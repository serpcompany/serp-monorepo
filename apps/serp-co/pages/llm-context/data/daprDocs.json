[
  {
    "owner": "dapr",
    "repo": "docs",
    "content": "TITLE: Implementing Dapr Workflow in Python\nDESCRIPTION: Demonstrates how to create a workflow function using Python's DaprWorkflowContext. Includes activity calls, child workflow execution, event handling with timeout, and retry policy implementation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@wfr.workflow(name='hello_world_wf')\ndef hello_world_wf(ctx: DaprWorkflowContext, wf_input):\n    print(f'{wf_input}')\n    yield ctx.call_activity(hello_act, input=1)\n    yield ctx.call_activity(hello_act, input=10)\n    yield ctx.call_activity(hello_retryable_act, retry_policy=retry_policy)\n    yield ctx.call_child_workflow(child_retryable_wf, retry_policy=retry_policy)\n\n    # Change in event handling: Use when_any to handle both event and timeout\n    event = ctx.wait_for_external_event(event_name)\n    timeout = ctx.create_timer(timedelta(seconds=30))\n    winner = yield when_any([event, timeout])\n\n    if winner == timeout:\n        print('Workflow timed out waiting for event')\n        return 'Timeout'\n\n    yield ctx.call_activity(hello_act, input=100)\n    yield ctx.call_activity(hello_act, input=1000)\n    return 'Completed'\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 for Shared Topic Consumption\nDESCRIPTION: YAML configuration for setting up MQTT3 to consume from a shared topic with unique consumer identifiers. This is particularly useful in Kubernetes deployments with multiple pods.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt3.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt3\n  version: v1\n  metadata:\n    - name: consumerID\n      value: \"{uuid}\"\n    - name: cleanSession\n      value: \"true\"\n    - name: url\n      value: \"tcp://admin:public@localhost:1883\"\n    - name: qos\n      value: 1\n    - name: retain\n      value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management in JavaScript using Dapr SDK\nDESCRIPTION: JavaScript code demonstrating state management operations using Dapr's client SDK to save, retrieve and delete state from a state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new DaprClient()\n\n// Save state into a state store\nawait client.state.save(DAPR_STATE_STORE_NAME, order)\nconsole.log(\"Saving Order: \", order)\n\n// Get state from a state store\nconst savedOrder = await client.state.get(DAPR_STATE_STORE_NAME, order.orderId)\nconsole.log(\"Getting Order: \", savedOrder)\n\n// Delete state from the state store\nawait client.state.delete(DAPR_STATE_STORE_NAME, order.orderId)\nconsole.log(\"Deleting Order: \", order)\n```\n\n----------------------------------------\n\nTITLE: Publishing messages using Dapr Go SDK\nDESCRIPTION: Shows how to use the Dapr Go SDK to publish messages to a topic in a loop. It includes the necessary dependencies and demonstrates how to run the application with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n//dependencies\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\t\"strconv\"\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\n//code\nvar (\n\tPUBSUB_NAME = \"order-pub-sub\"\n\tTOPIC_NAME  = \"orders\"\n)\n\nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\ttime.Sleep(5000)\n\t\torderId := rand.Intn(1000-1) + 1\n\t\tclient, err := dapr.NewClient()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer client.Close()\n\t\tctx := context.Background()\n    //Using Dapr SDK to publish a topic\n\t\tif err := client.PublishEvent(ctx, PUBSUB_NAME, TOPIC_NAME, []byte(strconv.Itoa(orderId))); \n\t\terr != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tlog.Println(\"Published data: \" + strconv.Itoa(orderId))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go State Management Implementation\nDESCRIPTION: Go code demonstrating basic state operations using the Dapr client SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nclient, err := dapr.NewClient()\n\n// Save state into the state store\n_ = client.SaveState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId), []byte(order))\nlog.Print(\"Saving Order: \" + string(order))\n\n// Get state from the state store\nresult, _ := client.GetState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId))\nfmt.Println(\"Getting Order: \" + string(result.Value))\n\n// Delete state from the state store\n_ = client.DeleteState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId))\nlog.Print(\"Deleting Order: \" + string(order))\n```\n\n----------------------------------------\n\nTITLE: HTTP Service Invocation Request Format\nDESCRIPTION: Base HTTP request format for invoking methods on Dapr-enabled applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH/POST/GET/PUT/DELETE http://localhost:<daprPort>/v1.0/invoke/<appID>/method/<method-name>\n```\n\n----------------------------------------\n\nTITLE: HTTP API State Management using Bash\nDESCRIPTION: Shows how to manage state using Dapr's HTTP API endpoints through Bash commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"order_1\", \"value\": \"250\"}, { \"key\": \"order_2\", \"value\": \"550\"}]' http://localhost:3601/v1.0/state/statestore\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"keys\":[\"order_1\", \"order_2\"]}' http://localhost:3601/v1.0/state/statestore/bulk\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow in Go with Dapr\nDESCRIPTION: Defines a complete order processing workflow that orchestrates multiple activities including order notification, inventory verification, payment processing, and inventory updates. The workflow handles high-value order approvals, payment processing, and maintains inventory state using Dapr's state management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_28\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/dapr/go-sdk/client\"\n\t\"github.com/dapr/go-sdk/workflow\"\n)\n\n// OrderProcessingWorkflow is the main workflow for orchestrating activities in the order process.\nfunc OrderProcessingWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\torderID := ctx.InstanceID()\n\tvar orderPayload OrderPayload\n\tif err := ctx.GetInput(&orderPayload); err != nil {\n\t\treturn nil, err\n\t}\n\terr := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{\n\t\tMessage: fmt.Sprintf(\"Received order %s for %d %s - $%d\", orderID, orderPayload.Quantity, orderPayload.ItemName, orderPayload.TotalCost),\n\t})).Await(nil)\n\tif err != nil {\n\t\treturn OrderResult{Processed: false}, err\n\t}\n\n\tvar verifyInventoryResult InventoryResult\n\tif err := ctx.CallActivity(VerifyInventoryActivity, workflow.ActivityInput(InventoryRequest{\n\t\tRequestID: orderID,\n\t\tItemName:  orderPayload.ItemName,\n\t\tQuantity:  orderPayload.Quantity,\n\t})).Await(&verifyInventoryResult); err != nil {\n\t\treturn OrderResult{Processed: false}, err\n\t}\n\n\tif !verifyInventoryResult.Success {\n\t\tnotification := Notification{Message: fmt.Sprintf(\"Insufficient inventory for %s\", orderPayload.ItemName)}\n\t\terr := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(notification)).Await(nil)\n\t\treturn OrderResult{Processed: false}, err\n\t}\n\n\tif orderPayload.TotalCost > 5000 {\n\t\tvar approvalRequired ApprovalRequired\n\t\tif err := ctx.CallActivity(RequestApprovalActivity, workflow.ActivityInput(orderPayload)).Await(&approvalRequired); err != nil {\n\t\t\treturn OrderResult{Processed: false}, err\n\t\t}\n\t\tif err := ctx.WaitForExternalEvent(\"manager_approval\", time.Second*200).Await(nil); err != nil {\n\t\t\treturn OrderResult{Processed: false}, err\n\t\t}\n\t\t// TODO: Confirm timeout flow - this will be in the form of an error.\n\t\tif approvalRequired.Approval {\n\t\t\tif err := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{Message: fmt.Sprintf(\"Payment for order %s has been approved!\", orderID)})).Await(nil); err != nil {\n\t\t\t\tlog.Printf(\"failed to notify of a successful order: %v\\n\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{Message: fmt.Sprintf(\"Payment for order %s has been rejected!\", orderID)})).Await(nil); err != nil {\n\t\t\t\tlog.Printf(\"failed to notify of an unsuccessful order :%v\\n\", err)\n\t\t\t}\n\t\t\treturn OrderResult{Processed: false}, err\n\t\t}\n\t}\n\terr = ctx.CallActivity(ProcessPaymentActivity, workflow.ActivityInput(PaymentRequest{\n\t\tRequestID:          orderID,\n\t\tItemBeingPurchased: orderPayload.ItemName,\n\t\tAmount:             orderPayload.TotalCost,\n\t\tQuantity:           orderPayload.Quantity,\n\t})).Await(nil)\n\tif err != nil {\n\t\tif err := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{Message: fmt.Sprintf(\"Order %s failed!\", orderID)})).Await(nil); err != nil {\n\t\t\tlog.Printf(\"failed to notify of a failed order: %v\", err)\n\t\t}\n\t\treturn OrderResult{Processed: false}, err\n\t}\n\n\terr = ctx.CallActivity(UpdateInventoryActivity, workflow.ActivityInput(PaymentRequest{\n\t\tRequestID:          orderID,\n\t\tItemBeingPurchased: orderPayload.ItemName,\n\t\tAmount:             orderPayload.TotalCost,\n\t\tQuantity:           orderPayload.Quantity,\n\t})).Await(nil)\n\tif err != nil {\n\t\tif err := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{Message: fmt.Sprintf(\"Order %s failed!\", orderID)})).Await(nil); err != nil {\n\t\t\tlog.Printf(\"failed to notify of a failed order: %v\", err)\n\t\t}\n\t\treturn OrderResult{Processed: false}, err\n\t}\n\n\tif err := ctx.CallActivity(NotifyActivity, workflow.ActivityInput(Notification{Message: fmt.Sprintf(\"Order %s has completed!\", orderID)})).Await(nil); err != nil {\n\t\tlog.Printf(\"failed to notify of a successful order: %v\", err)\n\t}\n\treturn OrderResult{Processed: true}, err\n}\n\n// NotifyActivity outputs a notification message\nfunc NotifyActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input Notification\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"NotifyActivity: %s\\n\", input.Message)\n\treturn nil, nil\n}\n\n// ProcessPaymentActivity is used to process a payment\nfunc ProcessPaymentActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input PaymentRequest\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"ProcessPaymentActivity: %s for %d - %s (%dUSD)\\n\", input.RequestID, input.Quantity, input.ItemBeingPurchased, input.Amount)\n\treturn nil, nil\n}\n\n// VerifyInventoryActivity is used to verify if an item is available in the inventory\nfunc VerifyInventoryActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input InventoryRequest\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"VerifyInventoryActivity: Verifying inventory for order %s of %d %s\\n\", input.RequestID, input.Quantity, input.ItemName)\n\tdClient, err := client.NewClient()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\titem, err := dClient.GetState(context.Background(), stateStoreName, input.ItemName, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif item == nil {\n\t\treturn InventoryResult{\n\t\t\tSuccess:       false,\n\t\t\tInventoryItem: InventoryItem{},\n\t\t}, nil\n\t}\n\tvar result InventoryItem\n\tif err := json.Unmarshal(item.Value, &result); err != nil {\n\t\tlog.Fatalf(\"failed to parse inventory result %v\", err)\n\t}\n\tfmt.Printf(\"VerifyInventoryActivity: There are %d %s available for purchase\\n\", result.Quantity, result.ItemName)\n\tif result.Quantity >= input.Quantity {\n\t\treturn InventoryResult{Success: true, InventoryItem: result}, nil\n\t}\n\treturn InventoryResult{Success: false, InventoryItem: InventoryItem{}}, nil\n}\n\n// UpdateInventoryActivity modifies the inventory.\nfunc UpdateInventoryActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input PaymentRequest\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"UpdateInventoryActivity: Checking Inventory for order %s for %d * %s\\n\", input.RequestID, input.Quantity, input.ItemBeingPurchased)\n\tdClient, err := client.NewClient()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\titem, err := dClient.GetState(context.Background(), stateStoreName, input.ItemBeingPurchased, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar result InventoryItem\n\terr = json.Unmarshal(item.Value, &result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tnewQuantity := result.Quantity - input.Quantity\n\tif newQuantity < 0 {\n\t\treturn nil, fmt.Errorf(\"insufficient inventory for: %s\", input.ItemBeingPurchased)\n\t}\n\tresult.Quantity = newQuantity\n\tnewState, err := json.Marshal(result)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to marshal new state: %v\", err)\n\t}\n\tdClient.SaveState(context.Background(), stateStoreName, input.ItemBeingPurchased, newState, nil)\n\tfmt.Printf(\"UpdateInventoryActivity: There are now %d %s left in stock\\n\", result.Quantity, result.ItemName)\n\treturn InventoryResult{Success: true, InventoryItem: result}, nil\n}\n\n// RequestApprovalActivity requests approval for the order\nfunc RequestApprovalActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input OrderPayload\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"RequestApprovalActivity: Requesting approval for payment of %dUSD for %d %s\\n\", input.TotalCost, input.Quantity, input.ItemName)\n\treturn ApprovalRequired{Approval: true}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis State Store in Dapr\nDESCRIPTION: YAML configuration for setting up Redis as a state store component in Dapr. Defines the connection details and configuration for Redis state store including host, password and actor state store settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Using Dapr Workflow Client in Go\nDESCRIPTION: A code snippet demonstrating how to use the higher-level Dapr workflow client in Go to schedule, manage, and interact with workflows. It shows initialization, scheduling a workflow, fetching metadata, raising events, and workflow termination.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nstage = 0\nfmt.Println(\"workflow client test\")\n\nwfClient, err := workflow.NewClient()\nif err != nil {\n\tlog.Fatalf(\"[wfclient] faield to initialize: %v\", err)\n}\n\nid, err := wfClient.ScheduleNewWorkflow(ctx, \"TestWorkflow\", workflow.WithInstanceID(\"a7a4168d-3a1c-41da-8a4f-e7f6d9c718d9\"), workflow.WithInput(1))\nif err != nil {\n\tlog.Fatalf(\"[wfclient] failed to start workflow: %v\", err)\n}\n\nfmt.Printf(\"[wfclient] started workflow with id: %s\\n\", id)\n\nmetadata, err := wfClient.FetchWorkflowMetadata(ctx, id)\nif err != nil {\n\tlog.Fatalf(\"[wfclient] failed to get worfklow: %v\", err)\n}\n\nfmt.Printf(\"[wfclient] workflow status: %v\\n\", metadata.RuntimeStatus.String())\n\nif stage != 1 {\n\tlog.Fatalf(\"Workflow assertion failed while validating the wfclient. Stage 1 expected, current: %d\", stage)\n}\n\nfmt.Printf(\"[wfclient] stage: %d\\n\", stage)\n\n// raise event\n\nif err := wfClient.RaiseEvent(ctx, id, \"testEvent\", workflow.WithEventPayload(\"testData\")); err != nil {\n\tlog.Fatalf(\"[wfclient] failed to raise event: %v\", err)\n}\n\nfmt.Println(\"[wfclient] event raised\")\n\n// Sleep to allow the workflow to advance\ntime.Sleep(time.Second)\n\nif stage != 2 {\n\tlog.Fatalf(\"Workflow assertion failed while validating the wfclient. Stage 2 expected, current: %d\", stage)\n}\n\nfmt.Printf(\"[wfclient] stage: %d\\n\", stage)\n\n// stop workflow\nif err := wfClient.TerminateWorkflow(ctx, id); err != nil {\n\tlog.Fatalf(\"[wfclient] failed to terminate workflow: %v\", err)\n}\n\nfmt.Println(\"[wfclient] workflow terminated\")\n\nif err := wfClient.PurgeWorkflow(ctx, id); err != nil {\n\tlog.Fatalf(\"[wfclient] failed to purge workflow: %v\", err)\n}\n\nfmt.Println(\"[wfclient] workflow purged\")\n\n// stop workflow runtime\nif err := w.Shutdown(); err != nil {\n\tlog.Fatalf(\"failed to shutdown runtime: %v\", err)\n}\n\nfmt.Println(\"workflow worker successfully shutdown\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Subscription in Python\nDESCRIPTION: Python code that defines a Flask route to receive CloudEvent messages from the 'orders' topic. This endpoint matches the route defined in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cloudevents.sdk.event import v1\n\n#Subscribe to a topic \n@app.route('/orders', methods=['POST'])\ndef checkout(event: v1.Event) -> None:\n    data = json.loads(event.Data())\n    logging.info('Subscriber received: ' + str(data))\n```\n\n----------------------------------------\n\nTITLE: Overriding CloudEvent Properties in Python with Dapr\nDESCRIPTION: Python code example showing how to override Dapr-generated CloudEvent properties like 'source' and 'id' using metadata. It also demonstrates creating a custom CloudEvent and publishing it with the proper content type.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith DaprClient() as client:\n    order = {'orderId': i}\n    # Publish an event/message using Dapr PubSub\n    result = client.publish_event(\n        pubsub_name='order_pub_sub',\n        topic_name='orders',\n        publish_metadata={'cloudevent.id': 'd99b228f-6c73-4e78-8c4d-3f80a043d317', 'cloudevent.source': 'payment'}\n    )\n\n    # or\n\n    cloud_event = {\n        'specversion': '1.0',\n        'type': 'com.example.event',\n        'source': 'payment',\n        'id': 'd99b228f-6c73-4e78-8c4d-3f80a043d317',\n        'data': {'orderId': i},\n        'datacontenttype': 'application/json',\n        ...\n    }\n\n    # Set the data content type to 'application/cloudevents+json'\n    result = client.publish_event(\n        pubsub_name='order_pub_sub',\n        topic_name='orders',\n        data=json.dumps(cloud_event),\n        data_content_type='application/cloudevents+json',\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-based Streaming Subscriptions in Python\nDESCRIPTION: Example of using the pull-based subscription model in Python with DaprClient. Demonstrates message processing with retry logic and proper subscription cleanup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc.subscription import StreamInactiveError\n\ncounter = 0\n\n\ndef process_message(message):\n    global counter\n    counter += 1\n    # Process the message here\n    print(f'Processing message: {message.data()} from {message.topic()}...')\n    return 'success'\n\n\ndef main():\n    with DaprClient() as client:\n        global counter\n\n        subscription = client.subscribe(\n            pubsub_name='pubsub', topic='orders', dead_letter_topic='orders_dead'\n        )\n\n        try:\n            while counter < 5:\n                try:\n                    message = subscription.next_message()\n\n                except StreamInactiveError as e:\n                    print('Stream is inactive. Retrying...')\n                    time.sleep(1)\n                    continue\n                if message is None:\n                    print('No message received within timeout period.')\n                    continue\n\n                # Process the message\n                response_status = process_message(message)\n\n                if response_status == 'success':\n                    subscription.respond_success(message)\n                elif response_status == 'retry':\n                    subscription.respond_retry(message)\n                elif response_status == 'drop':\n                    subscription.respond_drop(message)\n\n        finally:\n            print(\"Closing subscription...\")\n            subscription.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Workflow Activities and Process in TypeScript\nDESCRIPTION: This code defines the order processing workflow and its associated activities. It includes functions for notifying, verifying inventory, requesting approval, processing payment, and updating inventory. The main workflow orchestrates these activities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Task, WorkflowActivityContext, WorkflowContext, TWorkflow, DaprClient } from \"@dapr/dapr\";\nimport { InventoryItem, InventoryRequest, InventoryResult, OrderNotification, OrderPayload, OrderPaymentRequest, OrderResult } from \"./model\";\n\nconst daprClient = new DaprClient();\nconst storeName = \"statestore\";\n\n// Defines Notify Activity. This is used by the workflow to send out a notification\nexport const notifyActivity = async (_: WorkflowActivityContext, orderNotification: OrderNotification) => {\n  console.log(orderNotification.message);\n  return;\n};\n\n//Defines Verify Inventory Activity. This is used by the workflow to verify if inventory is available for the order\nexport const verifyInventoryActivity = async (_: WorkflowActivityContext, inventoryRequest: InventoryRequest) => {\n  console.log(`Verifying inventory for ${inventoryRequest.requestId} of ${inventoryRequest.quantity} ${inventoryRequest.itemName}`);\n  const result = await daprClient.state.get(storeName, inventoryRequest.itemName);\n  if (result == undefined || result == null) {\n    return new InventoryResult(false, undefined);\n  }\n  const inventoryItem = result as InventoryItem;\n  console.log(`There are ${inventoryItem.quantity} ${inventoryItem.itemName} in stock`);\n\n  if (inventoryItem.quantity >= inventoryRequest.quantity) {\n    return new InventoryResult(true, inventoryItem)\n  }\n  return new InventoryResult(false, undefined);\n}\n\nexport const requestApprovalActivity = async (_: WorkflowActivityContext, orderPayLoad: OrderPayload) => {\n  console.log(`Requesting approval for order ${orderPayLoad.itemName}`);\n  return true;\n}\n\nexport const processPaymentActivity = async (_: WorkflowActivityContext, orderPaymentRequest: OrderPaymentRequest) => {\n  console.log(`Processing payment for order ${orderPaymentRequest.itemBeingPurchased}`);\n  console.log(`Payment of ${orderPaymentRequest.amount} for ${orderPaymentRequest.quantity} ${orderPaymentRequest.itemBeingPurchased} processed successfully`);\n  return true;\n}\n\nexport const updateInventoryActivity = async (_: WorkflowActivityContext, inventoryRequest: InventoryRequest) => {\n  console.log(`Updating inventory for ${inventoryRequest.requestId} of ${inventoryRequest.quantity} ${inventoryRequest.itemName}`);\n  const result = await daprClient.state.get(storeName, inventoryRequest.itemName);\n  if (result == undefined || result == null) {\n    return new InventoryResult(false, undefined);\n  }\n  const inventoryItem = result as InventoryItem;\n  inventoryItem.quantity = inventoryItem.quantity - inventoryRequest.quantity;\n  if (inventoryItem.quantity < 0) {\n    console.log(`Insufficient inventory for ${inventoryRequest.requestId} of ${inventoryRequest.quantity} ${inventoryRequest.itemName}`);\n    return new InventoryResult(false, undefined);\n  }\n  await daprClient.state.save(storeName, [\n    {\n      key: inventoryRequest.itemName,\n      value: inventoryItem,\n    }\n  ]);\n  console.log(`Inventory updated for ${inventoryRequest.requestId}, there are now ${inventoryItem.quantity} ${inventoryItem.itemName} in stock`);\n  return new InventoryResult(true, inventoryItem);\n}\n\nexport const orderProcessingWorkflow: TWorkflow = async function* (ctx: WorkflowContext, orderPayLoad: OrderPayload): any {\n  const orderId = ctx.getWorkflowInstanceId();\n  console.log(`Processing order ${orderId}...`);\n\n  const orderNotification: OrderNotification = {\n    message: `Received order ${orderId} for ${orderPayLoad.quantity} ${orderPayLoad.itemName} at a total cost of ${orderPayLoad.totalCost}`,\n  };\n  yield ctx.callActivity(notifyActivity, orderNotification);\n\n  const inventoryRequest = new InventoryRequest(orderId, orderPayLoad.itemName, orderPayLoad.quantity);\n  const inventoryResult = yield ctx.callActivity(verifyInventoryActivity, inventoryRequest);\n\n  if (!inventoryResult.success) {\n    const orderNotification: OrderNotification = {\n      message: `Insufficient inventory for order ${orderId}`,\n    };\n    yield ctx.callActivity(notifyActivity, orderNotification);\n    return new OrderResult(false);\n  }\n\n  if (orderPayLoad.totalCost > 5000) {\n    yield ctx.callActivity(requestApprovalActivity, orderPayLoad);\n    \n    const tasks: Task<any>[] = [];\n    const approvalEvent = ctx.waitForExternalEvent(\"approval_event\");\n    tasks.push(approvalEvent);\n    const timeOutEvent = ctx.createTimer(30);\n    tasks.push(timeOutEvent);\n    const winner = ctx.whenAny(tasks);\n\n    if (winner == timeOutEvent) {\n      const orderNotification: OrderNotification = {\n        message: `Order ${orderId} has been cancelled due to approval timeout.`,\n      };\n      yield ctx.callActivity(notifyActivity, orderNotification);\n      return new OrderResult(false);\n    }\n    const approvalResult = approvalEvent.getResult();\n    if (!approvalResult) {\n      const orderNotification: OrderNotification = {\n        message: `Order ${orderId} was not approved.`,\n      };\n      yield ctx.callActivity(notifyActivity, orderNotification);\n      return new OrderResult(false);\n    }\n  }\n\n  const orderPaymentRequest = new OrderPaymentRequest(orderId, orderPayLoad.itemName, orderPayLoad.totalCost, orderPayLoad.quantity);\n  const paymentResult = yield ctx.callActivity(processPaymentActivity, orderPaymentRequest);\n\n  if (!paymentResult) {\n    const orderNotification: OrderNotification = {\n      message: `Payment for order ${orderId} failed`,\n    };\n    yield ctx.callActivity(notifyActivity, orderNotification);\n    return new OrderResult(false);\n  }\n\n  const updatedResult = yield ctx.callActivity(updateInventoryActivity, inventoryRequest);\n  if (!updatedResult.success) {\n    const orderNotification: OrderNotification = {\n      message: `Failed to update inventory for order ${orderId}`,\n    };\n    yield ctx.callActivity(notifyActivity, orderNotification);\n    return new OrderResult(false);\n  }\n\n  const orderCompletedNotification: OrderNotification = {\n    message: `order ${orderId} processed successfully!`,\n  };\n  yield ctx.callActivity(notifyActivity, orderCompletedNotification);\n\n  console.log(`Order ${orderId} processed successfully!`);\n  return new OrderResult(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Dapr State Management\nDESCRIPTION: Shows how to implement state management operations using the Dapr Go SDK, including saving and retrieving multiple states.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// dependencies\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"time\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\n// code\nfunc main() {\n\tconst STATE_STORE_NAME = \"statestore\"\n\trand.Seed(time.Now().UnixMicro())\n\tfor i := 0; i < 10; i++ {\n\t\torderId := rand.Intn(1000-1) + 1\n\t\tclient, err := dapr.NewClient()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer client.Close()\n\t\tctx := context.Background()\n\t\terr = client.SaveState(ctx, STATE_STORE_NAME, \"order_1\", []byte(strconv.Itoa(orderId)), nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tkeys := []string{\"key1\", \"key2\", \"key3\"}\n        items, err := client.GetBulkState(ctx, STATE_STORE_NAME, keys, nil, 100)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfor _, item := range items {\n\t\t\tlog.Println(\"Item from GetBulkState:\", string(item.Value))\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr on Kubernetes with CLI\nDESCRIPTION: Use the Dapr CLI to initialize Dapr on a Kubernetes cluster. This command deploys the Dapr control plane to the cluster in the current context.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k\n```\n\n----------------------------------------\n\nTITLE: Executing Query for California Employees (PowerShell)\nDESCRIPTION: Sends a POST request to execute the query for California employees using Invoke-RestMethod in PowerShell.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -InFile query-api-examples/query1.json -Uri 'http://localhost:3500/v1.0-alpha1/state/statestore/query'\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State in C#\nDESCRIPTION: Demonstrates saving and retrieving state using the Dapr .NET SDK. Creates random order IDs, saves them to state store, and retrieves them back using async operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string DAPR_STORE_NAME = \"statestore\";\n            while(true) {\n                System.Threading.Thread.Sleep(5000);\n                using var client = new DaprClientBuilder().Build();\n                Random random = new Random();\n                int orderId = random.Next(1,1000);\n                //Using Dapr SDK to save and get state\n                await client.SaveStateAsync(DAPR_STORE_NAME, \"order_1\", orderId.ToString());\n                await client.SaveStateAsync(DAPR_STORE_NAME, \"order_2\", orderId.ToString());\n                var result = await client.GetStateAsync<string>(DAPR_STORE_NAME, \"order_1\");\n                Console.WriteLine(\"Result after get: \" + result);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding CloudEvent Properties in .NET with Dapr\nDESCRIPTION: C# code example demonstrating how to override Dapr-generated CloudEvent properties like 'source' and 'id' using metadata dictionary when publishing events through the Dapr client.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar order = new Order(i);\nusing var client = new DaprClientBuilder().Build();\n\n// Override cloudevent metadata\nvar metadata = new Dictionary<string,string>() {\n    { \"cloudevent.source\", \"payment\" },\n    { \"cloudevent.id\", \"d99b228f-6c73-4e78-8c4d-3f80a043d317\" }\n}\n\n// Publish an event/message using Dapr PubSub\nawait client.PublishEventAsync(\"order_pub_sub\", \"orders\", order, metadata);\nConsole.WriteLine(\"Published data: \" + order);\n\nawait Task.Delay(TimeSpan.FromSeconds(1));\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis State Store Component for Kubernetes\nDESCRIPTION: This YAML configuration defines a Dapr state store component for Redis on Kubernetes. It specifies connection details including host and password that need to be customized for your environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Saving State with Strong Consistency in Python using Dapr\nDESCRIPTION: Demonstrates how to save state to a Dapr state store with strong consistency guarantees. Uses the Redis state store and makes HTTP POST requests to the Dapr state API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-stateful-service.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nstore_name = \"redis-store\" # name of the state store as specified in state store component yaml file\ndapr_state_url = \"http://localhost:3500/v1.0/state/{}\".format(store_name)\nstateReq = '[{ \"key\": \"k1\", \"value\": \"Some Data\", \"options\": { \"consistency\": \"strong\" }}]'\nresponse = requests.post(dapr_state_url, json=stateReq)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Middleware Component in YAML\nDESCRIPTION: YAML configuration for setting up OAuth2 middleware component with essential parameters including client credentials, authorization endpoints, and security settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: oauth2\nspec:\n  type: middleware.http.oauth2\n  version: v1\n  metadata:\n  - name: clientId\n    value: \"<your client ID>\"\n  - name: clientSecret\n    value: \"<your client secret>\"\n  - name: scopes\n    value: \"https://www.googleapis.com/auth/userinfo.email\"\n  - name: authURL\n    value: \"https://accounts.google.com/o/oauth2/v2/auth\"\n  - name: tokenURL\n    value: \"https://accounts.google.com/o/oauth2/token\"\n  - name: redirectURL\n    value: \"http://dummy.com\"\n  - name: authHeaderName\n    value: \"authorization\"\n  - name: forceHTTPS\n    value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-out/Fan-in Pattern in C# with Dapr\nDESCRIPTION: C# implementation of fan-out/fan-in pattern demonstrating parallel task execution and result aggregation using Dapr workflows.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Get a list of N work items to process in parallel.\nobject[] workBatch = await context.CallActivityAsync<object[]>(\"GetWorkBatch\", null);\n\n// Schedule the parallel tasks, but don't wait for them to complete yet.\nvar parallelTasks = new List<Task<int>>(workBatch.Length);\nfor (int i = 0; i < workBatch.Length; i++)\n{\n    Task<int> task = context.CallActivityAsync<int>(\"ProcessWorkItem\", workBatch[i]);\n    parallelTasks.Add(task);\n}\n\n// Everything is scheduled. Wait here until all parallel tasks have completed.\nawait Task.WhenAll(parallelTasks);\n\n// Aggregate all N outputs and publish the result.\nint sum = parallelTasks.Sum(t => t.Result);\nawait context.CallActivityAsync(\"PostResults\", sum);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Resiliency Resource in YAML\nDESCRIPTION: Complete YAML specification template for defining Dapr resiliency policies. Includes configuration for timeouts, retries, circuit breakers, and their application to various targets including apps, actors, and components. The spec requires policies and targets sections with respective configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/resiliency-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: <REPLACE-WITH-RESOURCE-NAME>\nversion: v1alpha1\nscopes:\n  - <REPLACE-WITH-SCOPED-APPIDS>\nspec:\n  policies: # Required\n    timeouts:\n      timeoutName: <REPLACE-WITH-TIME-VALUE> # Replace with any unique name\n    retries:\n      retryName: # Replace with any unique name\n        policy: <REPLACE-WITH-VALUE>\n        duration: <REPLACE-WITH-VALUE>\n        maxInterval: <REPLACE-WITH-VALUE>\n        maxRetries: <REPLACE-WITH-VALUE>\n        matching:\n          httpStatusCodes: <REPLACE-WITH-VALUE>\n          gRPCStatusCodes: <REPLACE-WITH-VALUE>\n    circuitBreakers:\n      circuitBreakerName: # Replace with any unique name\n        maxRequests: <REPLACE-WITH-VALUE>\n        timeout: <REPLACE-WITH-VALUE> \n        trip: <REPLACE-WITH-CONSECUTIVE-FAILURE-VALUE>\ntargets: # Required\n    apps:\n      appID: # Replace with scoped app ID\n        timeout: <REPLACE-WITH-TIMEOUT-NAME>\n        retry: <REPLACE-WITH-RETRY-NAME>\n        circuitBreaker: <REPLACE-WITH-CIRCUIT-BREAKER-NAME>\n    actors:\n      myActorType: \n        timeout: <REPLACE-WITH-TIMEOUT-NAME>\n        retry: <REPLACE-WITH-RETRY-NAME>\n        circuitBreaker: <REPLACE-WITH-CIRCUIT-BREAKER-NAME>\n        circuitBreakerCacheSize: <REPLACE-WITH-VALUE>\n    components:\n      componentName: # Replace with your component name\n        outbound:\n          timeout: <REPLACE-WITH-TIMEOUT-NAME>\n          retry: <REPLACE-WITH-RETRY-NAME>\n          circuitBreaker: <REPLACE-WITH-CIRCUIT-BREAKER-NAME>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default and Named Resiliency Policies in Dapr\nDESCRIPTION: This YAML snippet demonstrates how to configure both default and named resiliency policies for various targets in a Dapr solution. It includes global policies, component-specific policies, and named policies that are applied to specific applications, actors, and components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/default-policies.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    retries:\n      # Global Retry Policy\n      DefaultRetryPolicy:\n        policy: constant\n        duration: 1s\n        maxRetries: 3\n      \n      # Global Retry Policy for Apps\n      DefaultAppRetryPolicy:\n        policy: constant\n        duration: 100ms\n        maxRetries: 5\n\n      # Global Retry Policy for Apps\n      DefaultActorRetryPolicy:\n        policy: exponential\n        maxInterval: 15s\n        maxRetries: 10\n\n      # Global Retry Policy for Inbound Component operations\n      DefaultComponentInboundRetryPolicy:\n        policy: constant\n        duration: 5s\n        maxRetries: 5\n\n      # Global Retry Policy for Statestores\n      DefaultStatestoreComponentOutboundRetryPolicy:\n        policy: exponential\n        maxInterval: 60s\n        maxRetries: -1\n\n     # Named policy\n      fastRetries:\n        policy: constant\n        duration: 10ms\n        maxRetries: 3\n\n     # Named policy\n      retryForever:\n        policy: exponential\n        maxInterval: 10s\n        maxRetries: -1\n\n  targets:\n    apps:\n      appA:\n        retry: fastRetries\n\n      appB:\n        retry: retryForever\n    \n    actors:\n      EventActor:\n        retry: retryForever\n\n    components:\n      actorstore:\n        retry: fastRetries\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Middleware Component for Authorization Code Grant in YAML\nDESCRIPTION: This YAML configuration defines an OAuth middleware component for the Authorization Code Grant flow. It specifies client credentials, scopes, authorization and token URLs, and other settings required for OAuth authorization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/oauth.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: oauth2\n  namespace: default\nspec:\n  type: middleware.http.oauth2\n  version: v1\n  metadata:\n  - name: clientId\n    value: \"<your client ID>\"\n  - name: clientSecret\n    value: \"<your client secret>\"\n  - name: scopes\n    value: \"<comma-separated scope names>\"\n  - name: authURL\n    value: \"<authorization URL>\"\n  - name: tokenURL\n    value: \"<token exchange URL>\"\n  - name: redirectURL\n    value: \"<redirect URL>\"\n  - name: authHeaderName\n    value: \"<header name under which the secret token is saved>\"\n  - name: forceHTTPS\n    value: \"<set to true if you invoke an API method through Dapr from https origin>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Linux\nDESCRIPTION: Installs the latest Linux Dapr CLI to /usr/local/bin using wget and bash.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Pub/Sub Component for Self-Hosted Dapr\nDESCRIPTION: YAML configuration for setting up a RabbitMQ pub/sub component in Dapr. Defines connection parameters and behavior settings for message handling between order processing and checkout services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: order-pub-sub\nspec:\n  type: pubsub.rabbitmq\n  version: v1\n  metadata:\n  - name: host\n    value: \"amqp://localhost:5672\"\n  - name: durable\n    value: \"false\"\n  - name: deletedWhenUnused\n    value: \"false\"\n  - name: autoAck\n    value: \"false\"\n  - name: reconnectWait\n    value: \"0\"\n  - name: concurrency\n    value: parallel\nscopes:\n  - orderprocessing\n  - checkout\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State in Go\nDESCRIPTION: Shows state management implementation using the Dapr Go SDK. Demonstrates proper client initialization, error handling, and context usage while performing state operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tconst STATE_STORE_NAME = \"statestore\"\n\trand.Seed(time.Now().UnixMicro())\n\tfor i := 0; i < 10; i++ {\n\t\torderId := rand.Intn(1000-1) + 1\n\t\tclient, err := dapr.NewClient()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer client.Close()\n\t\tctx := context.Background()\n\t\terr = client.SaveState(ctx, STATE_STORE_NAME, \"order_1\", []byte(strconv.Itoa(orderId)), nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tresult, err := client.GetState(ctx, STATE_STORE_NAME, \"order_1\", nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tlog.Println(\"Result after get:\", string(result.Value))\n\t\ttime.Sleep(2 * time.Second)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Actor State with SQL\nDESCRIPTION: Demonstrates how to query an actor's state using SQL. This example selects all columns from the StateTable for a specific actor instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-management-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM StateTable WHERE Id='<app-id>||<actor-type>||<actor-id>||<key>'\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions in .NET with Dapr SDK\nDESCRIPTION: Example demonstrates using DaprClient to perform state transactions in .NET. The code executes upsert and delete operations on a state store with random order IDs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Dapr.Client;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading;\nusing System.Text.Json;\n\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string DAPR_STORE_NAME = \"statestore\";\n            while(true) {\n                System.Threading.Thread.Sleep(5000);\n                Random random = new Random();\n                int orderId = random.Next(1,1000);\n                using var client = new DaprClientBuilder().Build();\n                var requests = new List<StateTransactionRequest>()\n                {\n                    new StateTransactionRequest(\"order_3\", JsonSerializer.SerializeToUtf8Bytes(orderId.ToString()), StateOperationType.Upsert),\n                    new StateTransactionRequest(\"order_2\", null, StateOperationType.Delete)\n                };\n                CancellationTokenSource source = new CancellationTokenSource();\n                CancellationToken cancellationToken = source.Token;\n                //Using Dapr SDK to perform the state transactions\n                await client.ExecuteStateTransactionAsync(DAPR_STORE_NAME, requests, cancellationToken: cancellationToken);\n                Console.WriteLine(\"Order requested: \" + orderId);\n                Console.WriteLine(\"Result: \" + result);\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 dotnet run\n```\n\n----------------------------------------\n\nTITLE: Publishing messages using Dapr Java SDK\nDESCRIPTION: Shows how to use the Dapr Java SDK to publish messages to a topic in a loop. It includes the necessary dependencies and demonstrates how to run the application with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.domain.Metadata;\nimport static java.util.Collections.singletonMap;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n\n\tpublic static void main(String[] args) throws InterruptedException{\n\t\tString MESSAGE_TTL_IN_SECONDS = \"1000\";\n\t\tString TOPIC_NAME = \"orders\";\n\t\tString PUBSUB_NAME = \"order-pub-sub\";\n\n\t\twhile(true) {\n\t\t\tTimeUnit.MILLISECONDS.sleep(5000);\n\t\t\tRandom random = new Random();\n\t\t\tint orderId = random.nextInt(1000-1) + 1;\n\t\t\tDaprClient client = new DaprClientBuilder().build();\n      //Using Dapr SDK to publish a topic\n\t\t\tclient.publishEvent(\n\t\t\t\t\tPUBSUB_NAME,\n\t\t\t\t\tTOPIC_NAME,\n\t\t\t\t\torderId,\n\t\t\t\t\tsingletonMap(Metadata.TTL_IN_SECONDS, MESSAGE_TTL_IN_SECONDS)).block();\n\t\t\tlog.info(\"Published data:\" + orderId);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic in Java\nDESCRIPTION: This Java code defines a Spring Boot endpoint that subscribes to the 'orders' topic on the 'orderpubsub' component. It uses the Dapr Topic annotation to register the subscription and returns a success response after logging the received order information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@Topic(name = \"orders\", pubsubName = \"orderpubsub\")\n@PostMapping(path = \"/orders\", consumes = MediaType.ALL_VALUE)\npublic Mono<ResponseEntity> getCheckout(@RequestBody(required = false) CloudEvent<Order> cloudEvent) {\n    return Mono.fromSupplier(() -> {\n        try {\n            logger.info(\"Subscriber received: \" + cloudEvent.getData().getOrderId());\n            return ResponseEntity.ok(\"SUCCESS\");\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis State Store Component in YAML\nDESCRIPTION: This YAML configuration sets up a Redis state store component in Dapr. It includes various optional fields for customizing the Redis connection, including authentication, TLS settings, and performance tuning parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <HOST>\n  - name: redisPassword # Optional.\n    value: <PASSWORD>\n  - name: useEntraID\n    value: <bool> # Optional. Allowed: true, false.\n  - name: enableTLS\n    value: <bool> # Optional. Allowed: true, false.\n  - name: clientCert\n    value: # Optional\n  - name: clientKey\n    value: # Optional    \n  - name: maxRetries\n    value: # Optional\n  - name: maxRetryBackoff\n    value: # Optional\n  - name: failover\n    value: <bool> # Optional. Allowed: true, false.\n  - name: sentinelMasterName\n    value: <string> # Optional\n  - name: redeliverInterval\n    value: # Optional\n  - name: processingTimeout\n    value: # Optional\n  - name: redisType\n    value: # Optional\n  - name: redisDB\n    value: # Optional\n  - name: redisMaxRetries\n    value: # Optional\n  - name: redisMinRetryInterval\n    value: # Optional\n  - name: redisMaxRetryInterval\n    value: # Optional\n  - name: dialTimeout\n    value: # Optional\n  - name: readTimeout\n    value: # Optional\n  - name: writeTimeout\n    value: # Optional\n  - name: poolSize\n    value: # Optional\n  - name: poolTimeout\n    value: # Optional\n  - name: maxConnAge\n    value: # Optional\n  - name: minIdleConns\n    value: # Optional\n  - name: idleCheckFrequency\n    value: # Optional\n  - name: idleTimeout\n    value: # Optional\n  - name: ttlInSeconds\n    value: <int> # Optional\n  - name: queryIndexes\n    value: <string> # Optional\n  # Uncomment this if you wish to use Redis as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Component in Dapr\nDESCRIPTION: YAML configuration for setting up the bearer token middleware component. Defines the component type, version, and required metadata fields including audience, issuer, and optional jwksURL for token verification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-bearer.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: bearer-token\nspec:\n  type: middleware.http.bearer\n  version: v1\n  metadata:\n    - name: audience\n      value: \"<your token audience; i.e. the application's client ID>\"\n    - name: issuer\n      value: \"<your token issuer, e.g. 'https://accounts.google.com'>\"\n\n    # Optional values\n    - name: jwksURL\n      value: \"<JWKS URL, e.g. 'https://accounts.google.com/.well-known/openid-configuration'>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Workflow Order Processing in Python\nDESCRIPTION: Python implementation of a Dapr workflow application that processes orders, manages inventory, and handles workflow state. The code includes workflow scheduling, state management, and inventory operations using Dapr clients and workflow extensions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom time import sleep\n\nfrom dapr.clients import DaprClient\nfrom dapr.conf import settings\nfrom dapr.ext.workflow import DaprWorkflowClient, WorkflowStatus\n\nfrom workflow import wfr, order_processing_workflow\nfrom model import InventoryItem, OrderPayload\n\nstore_name = \"statestore\"\nworkflow_name = \"order_processing_workflow\"\ndefault_item_name = \"cars\"\n\nclass WorkflowConsoleApp:    \n    def main(self):\n        print(\"*** Welcome to the Dapr Workflow console app sample!\", flush=True)\n        print(\"*** Using this app, you can place orders that start workflows.\", flush=True)\n        \n        wfr.start()\n        # Wait for the sidecar to become available\n        sleep(5)\n\n        wfClient = DaprWorkflowClient()\n\n        baseInventory = {\n            \"paperclip\": InventoryItem(\"Paperclip\", 5, 100),\n            \"cars\": InventoryItem(\"Cars\", 5000, 10),\n            \"computers\": InventoryItem(\"Computers\", 500, 100),\n        }\n\n\n        daprClient = DaprClient(address=f'{settings.DAPR_RUNTIME_HOST}:{settings.DAPR_GRPC_PORT}')\n        self.restock_inventory(daprClient, baseInventory)\n\n        print(\"==========Begin the purchase of item:==========\", flush=True)\n        item_name = default_item_name\n        order_quantity = 1\n        total_cost = int(order_quantity) * baseInventory[item_name].per_item_cost\n        order = OrderPayload(item_name=item_name, quantity=int(order_quantity), total_cost=total_cost)\n\n        print(f'Starting order workflow, purchasing {order_quantity} of {item_name}', flush=True)\n        instance_id = wfClient.schedule_new_workflow(\n            workflow=order_processing_workflow, input=order.to_json())\n\n        try:\n            state = wfClient.wait_for_workflow_completion(instance_id=instance_id, timeout_in_seconds=30)\n            if not state:\n                print(\"Workflow not found!\")\n            elif state.runtime_status.name == 'COMPLETED':\n                print(f'Workflow completed! Result: {state.serialized_output}')\n            else:\n                print(f'Workflow failed! Status: {state.runtime_status.name}')  # not expected\n        except TimeoutError:\n            print('*** Workflow timed out!')\n\n        wfr.shutdown()\n\n    def restock_inventory(self, daprClient: DaprClient, baseInventory):\n        for key, item in baseInventory.items():\n            print(f'item: {item}')\n            item_str = f'{{{\"name\": \"{item.item_name}\", \"quantity\": {item.quantity},\\\n                          \"per_item_cost\": {item.per_item_cost}}}'\n            daprClient.save_state(store_name, key, item_str)\n\nif __name__ == '__main__':\n    app = WorkflowConsoleApp()\n    app.main()\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow in Java with Dapr\nDESCRIPTION: A Java console application that demonstrates Dapr workflow implementation for order processing. The code handles workflow registration, execution, inventory management, and status monitoring. It includes functionality for creating orders, managing inventory state, and processing workflows with multiple activities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npackage io.dapr.quickstarts.workflows;\n\nimport java.time.Duration;\nimport java.util.concurrent.TimeoutException;\n\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.quickstarts.workflows.activities.NotifyActivity;\nimport io.dapr.quickstarts.workflows.activities.ProcessPaymentActivity;\nimport io.dapr.quickstarts.workflows.activities.RequestApprovalActivity;\nimport io.dapr.quickstarts.workflows.activities.VerifyInventoryActivity;\nimport io.dapr.quickstarts.workflows.activities.UpdateInventoryActivity;\nimport io.dapr.quickstarts.workflows.models.InventoryItem;\nimport io.dapr.quickstarts.workflows.models.OrderPayload;\nimport io.dapr.workflows.client.DaprWorkflowClient;\nimport io.dapr.workflows.client.WorkflowInstanceStatus;\nimport io.dapr.workflows.runtime.WorkflowRuntime;\nimport io.dapr.workflows.runtime.WorkflowRuntimeBuilder;\n\npublic class WorkflowConsoleApp {\n\n  private static final String STATE_STORE_NAME = \"statestore\";\n\n  /**\n   * The main method of this console app.\n   *\n   * @param args The port the app will listen on.\n   * @throws Exception An Exception.\n   */\n  public static void main(String[] args) throws Exception {\n    System.out.println(\"*** Welcome to the Dapr Workflow console app sample!\");\n    System.out.println(\"*** Using this app, you can place orders that start workflows.\");\n    // Wait for the sidecar to become available\n    Thread.sleep(5 * 1000);\n\n    // Register the OrderProcessingWorkflow and its activities with the builder.\n    WorkflowRuntimeBuilder builder = new WorkflowRuntimeBuilder().registerWorkflow(OrderProcessingWorkflow.class);\n    builder.registerActivity(NotifyActivity.class);\n    builder.registerActivity(ProcessPaymentActivity.class);\n    builder.registerActivity(RequestApprovalActivity.class);\n    builder.registerActivity(VerifyInventoryActivity.class);\n    builder.registerActivity(UpdateInventoryActivity.class);\n\n    // Build and then start the workflow runtime pulling and executing tasks\n    try (WorkflowRuntime runtime = builder.build()) {\n      System.out.println(\"Start workflow runtime\");\n      runtime.start(false);\n    }\n\n    InventoryItem inventory = prepareInventoryAndOrder();\n\n    DaprWorkflowClient workflowClient = new DaprWorkflowClient();\n    try (workflowClient) {\n      executeWorkflow(workflowClient, inventory);\n    }\n\n  }\n\n  private static void executeWorkflow(DaprWorkflowClient workflowClient, InventoryItem inventory) {\n    System.out.println(\"==========Begin the purchase of item:==========\");\n    String itemName = inventory.getName();\n    int orderQuantity = inventory.getQuantity();\n    int totalcost = orderQuantity * inventory.getPerItemCost();\n    OrderPayload order = new OrderPayload();\n    order.setItemName(itemName);\n    order.setQuantity(orderQuantity);\n    order.setTotalCost(totalcost);\n    System.out.println(\"Starting order workflow, purchasing \" + orderQuantity + \" of \" + itemName);\n\n    String instanceId = workflowClient.scheduleNewWorkflow(OrderProcessingWorkflow.class, order);\n    System.out.printf(\"scheduled new workflow instance of OrderProcessingWorkflow with instance ID: %s%n\",\n        instanceId);\n\n    try {\n      workflowClient.waitForInstanceStart(instanceId, Duration.ofSeconds(10), false);\n      System.out.printf(\"workflow instance %s started%n\", instanceId);\n    } catch (TimeoutException e) {\n      System.out.printf(\"workflow instance %s did not start within 10 seconds%n\", instanceId);\n      return;\n    }\n\n    try {\n      WorkflowInstanceStatus workflowStatus = workflowClient.waitForInstanceCompletion(instanceId,\n          Duration.ofSeconds(30),\n          true);\n      if (workflowStatus != null) {\n        System.out.printf(\"workflow instance completed, out is: %s%n\",\n            workflowStatus.getSerializedOutput());\n      } else {\n        System.out.printf(\"workflow instance %s not found%n\", instanceId);\n      }\n    } catch (TimeoutException e) {\n      System.out.printf(\"workflow instance %s did not complete within 30 seconds%n\", instanceId);\n    }\n\n  }\n\n  private static InventoryItem prepareInventoryAndOrder() {\n    // prepare 10 cars in inventory\n    InventoryItem inventory = new InventoryItem();\n    inventory.setName(\"cars\");\n    inventory.setPerItemCost(50000);\n    inventory.setQuantity(10);\n    DaprClient daprClient = new DaprClientBuilder().build();\n    restockInventory(daprClient, inventory);\n\n    // prepare order for 10 cars\n    InventoryItem order = new InventoryItem();\n    order.setName(\"cars\");\n    order.setPerItemCost(5000);\n    order.setQuantity(1);\n    return order;\n  }\n\n  private static void restockInventory(DaprClient daprClient, InventoryItem inventory) {\n    String key = inventory.getName();\n    daprClient.saveState(STATE_STORE_NAME, key, inventory).block();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: C# State Management Implementation\nDESCRIPTION: C# code demonstrating state operations (save, get, delete) using the Dapr client SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new DaprClientBuilder().Build();\n\n// Save state into the state store\nawait client.SaveStateAsync(DAPR_STORE_NAME, orderId.ToString(), order.ToString());\nConsole.WriteLine(\"Saving Order: \" + order);\n\n// Get state from the state store\nvar result = await client.GetStateAsync<string>(DAPR_STORE_NAME, orderId.ToString());\nConsole.WriteLine(\"Getting Order: \" + result);\n\n// Delete state from the state store\nawait client.DeleteStateAsync(DAPR_STORE_NAME, orderId.ToString());\nConsole.WriteLine(\"Deleting Order: \" + order);\n```\n\n----------------------------------------\n\nTITLE: Setting State TTL in .NET using Dapr Client\nDESCRIPTION: Shows how to save state with TTL metadata using .NET Dapr client. Configures a TTL of 120 seconds for the state entry.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-store-ttl.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// dependencies\n\nusing Dapr.Client;\n\n// code\n\nawait client.SaveStateAsync(storeName, stateKeyName, state, metadata: new Dictionary<string, string>() { \n    { \n        \"ttlInSeconds\", \"120\" \n    } \n});\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 dotnet run\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow with Event Handling in C#\nDESCRIPTION: Defines a C# workflow that processes orders, waits for approval events, and handles timeouts. It demonstrates the use of external events and activity calls within a Dapr workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n                }\n            } catch (TaskCanceledException e) {\n                // An approval timeout results in automatic order cancellation\n                ctx.complete(\"Process cancel\");\n            }\n        }\n        // ...other steps...\n\n        // End the workflow with a success result\n        ctx.complete(\"Process approved\");\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Workflow in Go\nDESCRIPTION: Shows implementation of a test workflow in Go using WorkflowContext. Includes activity calls, external event handling, and timer implementation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn nil, err\n\t}\n\tvar output string\n\tif err := ctx.CallActivity(TestActivity, workflow.ActivityInput(input)).Await(&output); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := ctx.WaitForExternalEvent(\"testEvent\", time.Second*60).Await(&output); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tif err := ctx.CreateTimer(time.Second).Await(nil); err != nil {\n\t\treturn nil, nil\n\t}\n\treturn output, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Workflows in JavaScript\nDESCRIPTION: Complete JavaScript example showing workflow management including starting, pausing, resuming, terminating and purging workflow instances using the Dapr client.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DaprClient } from \"@dapr/dapr\";\n\nasync function printWorkflowStatus(client: DaprClient, instanceId: string) {\n  const workflow = await client.workflow.get(instanceId);\n  console.log(\n    `Workflow ${workflow.workflowName}, created at ${workflow.createdAt.toUTCString()}, has status ${\n      workflow.runtimeStatus\n    }`,\n  );\n  console.log(`Additional properties: ${JSON.stringify(workflow.properties)}`);\n  console.log(\"--------------------------------------------------\\n\\n\");\n}\n\nasync function start() {\n  const client = new DaprClient();\n\n  // Start a new workflow instance\n  const instanceId = await client.workflow.start(\"OrderProcessingWorkflow\", {\n    Name: \"Paperclips\",\n    TotalCost: 99.95,\n    Quantity: 4,\n  });\n  console.log(`Started workflow instance ${instanceId}`);\n  await printWorkflowStatus(client, instanceId);\n\n  // Pause a workflow instance\n  await client.workflow.pause(instanceId);\n  console.log(`Paused workflow instance ${instanceId}`);\n  await printWorkflowStatus(client, instanceId);\n\n  // Resume a workflow instance\n  await client.workflow.resume(instanceId);\n  console.log(`Resumed workflow instance ${instanceId}`);\n  await printWorkflowStatus(client, instanceId);\n\n  // Terminate a workflow instance\n  await client.workflow.terminate(instanceId);\n  console.log(`Terminated workflow instance ${instanceId}`);\n  await printWorkflowStatus(client, instanceId);\n\n  // Wait for the workflow to complete, 30 seconds!\n  await new Promise((resolve) => setTimeout(resolve, 30000));\n  await printWorkflowStatus(client, instanceId);\n\n  // Purge a workflow instance\n  await client.workflow.purge(instanceId);\n  console.log(`Purged workflow instance ${instanceId}`);\n  // This will throw an error because the workflow instance no longer exists.\n  await printWorkflowStatus(client, instanceId);\n}\n\nstart().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in JavaScript using Dapr SDK\nDESCRIPTION: This JavaScript code demonstrates how to subscribe to the 'orders' topic using the Dapr SDK. It creates a DaprServer instance and uses the pubsub.subscribe method to handle incoming messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprServer, CommunicationProtocolEnum } from '@dapr/dapr'; \n\n//code\nconst daprHost = \"127.0.0.1\"; \nconst serverHost = \"127.0.0.1\";\nconst serverPort = \"6002\"; \n\nstart().catch((e) => {\n    console.error(e);\n    process.exit(1);\n});\n\nasync function start(orderId) {\n    const server = new DaprServer({\n        serverHost,\n        serverPort,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n        clientOptions: {\n          daprHost,\n          daprPort: process.env.DAPR_HTTP_PORT,\n        },\n    });\n    //Subscribe to a topic\n    await server.pubsub.subscribe(\"order-pub-sub\", \"orders\", async (orderId) => {\n        console.log(`Subscriber received: ${JSON.stringify(orderId)}`)\n    });\n    await server.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State TTL using HTTP API (Bash)\nDESCRIPTION: Shows how to set state TTL using direct HTTP API calls with curl in Bash. Sets a TTL of 120 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-store-ttl.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"order_1\", \"value\": \"250\", \"metadata\": { \"ttlInSeconds\": \"120\" } }]' http://localhost:3601/v1.0/state/statestore\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Dapr State Operations\nDESCRIPTION: Demonstrates state management using the Dapr JavaScript SDK, including saving and retrieving multiple states.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprClient, HttpMethod, CommunicationProtocolEnum } from '@dapr/dapr'; \n\n//code\nconst daprHost = \"127.0.0.1\"; \nvar main = function() {\n    const STATE_STORE_NAME = \"statestore\";\n    var orderId = 100;\n    //Using Dapr SDK to save and retrieve multiple states\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n\n    await client.state.save(STATE_STORE_NAME, [\n        {\n            key: \"order_1\",\n            value: orderId.toString()\n        },\n        {\n            key: \"order_2\",\n            value: orderId.toString()\n        }\n    ]);\n    result = await client.state.getBulk(STATE_STORE_NAME, [\"order_1\", \"order_2\"]);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Distributed Lock using .NET SDK in Dapr\nDESCRIPTION: C# code example demonstrating how to acquire a lock on a resource using the Dapr .NET SDK. The code creates a DaprClient, attempts to lock a resource, and handles the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Dapr.Client;\n\nnamespace LockService\n{\n    class Program\n    {\n        [Obsolete(\"Distributed Lock API is in Alpha, this can be removed once it is stable.\")]\n        static async Task Main(string[] args)\n        {\n            string DAPR_LOCK_NAME = \"lockstore\";\n            string fileName = \"my_file_name\";\n            var client = new DaprClientBuilder().Build();\n    \n            await using (var fileLock = await client.Lock(DAPR_LOCK_NAME, fileName, \"random_id_abc123\", 60))\n            {\n                if (fileLock.Success)\n                {\n                    Console.WriteLine(\"Success\");\n                }\n                else\n                {\n                    Console.WriteLine($\"Failed to lock {fileName}.\");\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an AWS S3 binding component in Dapr. Includes required and optional metadata fields for connecting to an S3 bucket.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.s3\n  version: v1\n  metadata:\n  - name: bucket\n    value: \"mybucket\"\n  - name: region\n    value: \"us-west-2\"\n  - name: endpoint\n    value: \"s3.us-west-2.amazonaws.com\"\n  - name: accessKey\n    value: \"*****************\"\n  - name: secretKey\n    value: \"*****************\"\n  - name: sessionToken\n    value: \"mysession\"\n  - name: decodeBase64\n    value: \"<bool>\"\n  - name: encodeBase64\n    value: \"<bool>\"\n  - name: forcePathStyle\n    value: \"<bool>\"\n  - name: disableSSL\n    value: \"<bool>\"\n  - name: insecureSSL\n    value: \"<bool>\"\n  - name: storageClass\n    value: \"<string>\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Deterministic APIs in Workflow Functions\nDESCRIPTION: This snippet shows the correct way to use deterministic APIs provided by the workflow context or to call activities for non-deterministic operations. This approach ensures workflow determinism and proper replay functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Do this!!\nDateTime currentTime = context.CurrentUtcDateTime;\nGuid newIdentifier = context.NewGuid();\nstring randomString = await context.CallActivityAsync<string>(\"GetRandomString\");\n```\n\nLANGUAGE: java\nCODE:\n```\n// Do this!!\nInstant currentTime = context.getCurrentInstant();\nGuid newIdentifier = context.newGuid();\nString randomString = context.callActivity(GetRandomString.class.getName(), String.class).await();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this!!\nconst currentTime = context.getCurrentUtcDateTime();\nconst randomString = yield context.callActivity(getRandomString);\n```\n\nLANGUAGE: go\nCODE:\n```\nconst currentTime = ctx.CurrentUTCDateTime()\n```\n\n----------------------------------------\n\nTITLE: Publishing message using HTTP API (Bash)\nDESCRIPTION: Uses curl to send a POST request to the Dapr HTTP API for publishing a message to the 'orders' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3601/v1.0/publish/order-pub-sub/orders -H \"Content-Type: application/json\" -d '{\"orderId\": \"100\"}'\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete state using the Dapr SDK in a JavaScript application. It uses the DaprClient to delete a state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprClient, HttpMethod, CommunicationProtocolEnum } from '@dapr/dapr'; \n\n//code\nconst daprHost = \"127.0.0.1\"; \nvar main = function() {\n    const STATE_STORE_NAME = \"statestore\";\n    //Using Dapr SDK to save and get state\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n    \n    await client.state.delete(STATE_STORE_NAME, \"order_1\"); \n}\n\nmain();\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Runtime in Java\nDESCRIPTION: This snippet shows how to configure the actor runtime in Java using the ActorRuntime class. It sets various timeout and interval parameters, enables or disables features like draining rebalanced actors and reentrancy, and configures reminders storage partitions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-runtime-config.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// import io.dapr.actors.runtime.ActorRuntime;\n// import java.time.Duration;\n\nActorRuntime.getInstance().getConfig().setActorIdleTimeout(Duration.ofMinutes(60));\nActorRuntime.getInstance().getConfig().setActorScanInterval(Duration.ofSeconds(30));\nActorRuntime.getInstance().getConfig().setDrainOngoingCallTimeout(Duration.ofSeconds(60));\nActorRuntime.getInstance().getConfig().setDrainBalancedActors(true);\nActorRuntime.getInstance().getConfig().setActorReentrancyConfig(false, null);\nActorRuntime.getInstance().getConfig().setRemindersStoragePartitions(7);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr Go SDK\nDESCRIPTION: Go example demonstrating how to retrieve configuration items from a Dapr configuration store. It initializes a Dapr client, gets configuration items by their keys, and loops through the returned items to print them.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n  \"fmt\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\titems, err := client.GetConfigurationItems(ctx, \"configstore\", [\"orderId1\",\"orderId2\"])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n  for key, item := range items {\n    fmt.Printf(\"get config: key = %s value = %s version = %s\",key,(*item).Value, (*item).Version)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server/Azure SQL State Store Component in YAML\nDESCRIPTION: This YAML configuration sets up a Dapr component for using Microsoft SQL Server or Azure SQL as a state store. It includes options for authentication, connection string, and various optional fields for customizing the state store behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-sqlserver.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.sqlserver\n  version: v1\n  metadata:\n    # Authenticate using SQL Server credentials\n    - name: connectionString\n      value: |\n        Server=myServerName\\myInstanceName;Database=myDataBase;User Id=myUsername;Password=myPassword;\n\n    # Authenticate with Microsoft Entra ID (Azure SQL only)\n    # \"useAzureAD\" be set to \"true\"\n    - name: useAzureAD\n      value: true\n    # Connection string or URL of the Azure SQL database, optionally containing the database\n    - name: connectionString\n      value: |\n        sqlserver://myServerName.database.windows.net:1433?database=myDataBase\n\n    # Other optional fields (listing default values)\n    - name: tableName\n      value: \"state\"\n    - name: metadataTableName\n      value: \"dapr_metadata\"\n    - name: schema\n      value: \"dbo\"\n    - name: keyType\n      value: \"string\"\n    - name: keyLength\n      value: \"200\"\n    - name: indexedProperties\n      value: \"\"\n    - name: cleanupIntervalInSeconds\n      value: \"3600\"\n   # Uncomment this if you wish to use Microsoft SQL Server as a state store for actors (optional)\n   #- name: actorStateStore\n   #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data in JavaScript with Dapr\nDESCRIPTION: This snippet demonstrates decryption using the Dapr JavaScript SDK, showing two approaches: decrypting data from a buffer directly and using streams for efficient file decryption.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// When passing data as a buffer, `decrypt` returns a Buffer with the decrypted message\nconst plaintext = await client.crypto.decrypt(ciphertext, {\n    // Only required option is the component name\n    componentName: \"mycryptocomponent\",\n});\n\n// `decrypt` can also be used as a Duplex stream\nawait pipeline(\n    fs.createReadStream(\"ciphertext.out\"),\n    await client.crypto.decrypt({\n        // Only required option is the component name\n        componentName: \"mycryptocomponent\",\n    }),\n    fs.createWriteStream(\"plaintext.out\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Job Event Handling in Go\nDESCRIPTION: Shows how to register and implement a job event handler in Go. The handler processes the triggered job data, deserializes the payload, and performs the necessary operations when the job is triggered by Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n...\nif err = server.AddJobEventHandler(\"prod-db-backup\", prodDBBackupHandler); err != nil {\n    log.Fatalf(\"failed to register job event handler: %v\", err)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// ...\n\n// At job trigger time this function is called\nfunc prodDBBackupHandler(ctx context.Context, job *common.JobEvent) error {\n\tvar jobData common.Job\n\tif err := json.Unmarshal(job.Data, &jobData); err != nil {\n\t\t// ...\n\t}\n\n\tvar jobPayload api.DBBackup\n\tif err := json.Unmarshal(job.Data, &jobPayload); err != nil {\n\t\t// ...\n\t}\n\tfmt.Printf(\"job %d received:\\n type: %v \\n typeurl: %v\\n value: %v\\n extracted payload: %v\\n\", jobCount, job.JobType, jobData.TypeURL, jobData.Value, jobPayload)\n\tjobCount++\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Go Subscriber Implementation\nDESCRIPTION: Go code implementing a Dapr subscriber that handles events received on the pub/sub topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc eventHandler(ctx context.Context, e *common.TopicEvent) (retry bool, err error) {\n\tfmt.Println(\"Subscriber received: \", e.Data)\n\treturn false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript services with Dapr service invocation over HTTP/HTTPS\nDESCRIPTION: Commands to run JavaScript services with Dapr, assigning app IDs, configuring HTTP/HTTPS protocols, and setting Dapr HTTP ports for service invocation between a checkout service and order processor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol http --dapr-http-port 3500 -- npm start\n\ndarpr run --app-id order-processor --app-port 5001  --app-protocol http --dapr-http-port 3501 -- npm start\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --dapr-http-port 3500 --app-protocol https -- npm start\n\ndarpr run --app-id order-processor --app-port 5001 --dapr-http-port 3501 --app-protocol https -- npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Runtime in C#\nDESCRIPTION: This snippet demonstrates how to configure the actor runtime in C# using the AddActors method. It sets various timeout and interval parameters, enables or disables features like draining rebalanced actors and reentrancy, and registers specific actor types with custom configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-runtime-config.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// In Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Register actor runtime with DI\n    services.AddActors(options =>\n    {\n        // Register actor types and configure actor settings\n        options.Actors.RegisterActor<MyActor>();\n\n        // Configure default settings\n        options.ActorIdleTimeout = TimeSpan.FromMinutes(60);\n        options.ActorScanInterval = TimeSpan.FromSeconds(30);\n        options.DrainOngoingCallTimeout = TimeSpan.FromSeconds(60);\n        options.DrainRebalancedActors = true;\n        options.RemindersStoragePartitions = 7;\n        options.ReentrancyConfig = new() { Enabled = false };\n\n        // Add a configuration for a specific actor type.\n        // This actor type must have a matching value in the base level 'entities' field. If it does not, the configuration will be ignored.\n        // If there is a matching entity, the values here will be used to overwrite any values specified in the root configuration.\n        // In this example, `ReentrantActor` has reentrancy enabled; however, 'MyActor' will not have reentrancy enabled.\n        options.Actors.RegisterActor<ReentrantActor>(typeOptions: new()\n        {\n            ReentrancyConfig = new()\n            {\n                Enabled = true,\n            }\n        });\n    });\n\n    // Register additional services for use with actors\n    services.AddSingleton<BankService>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow in C# with Dapr\nDESCRIPTION: This code defines the OrderProcessingWorkflow class, which inherits from Workflow<OrderPayload, OrderResult>. It orchestrates the entire order processing flow, including inventory checks, payment processing, and notifications. The workflow uses various activities and handles different scenarios such as insufficient inventory and order approval.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed partial class OrderProcessingWorkflow : Workflow<OrderPayload, OrderResult>\n{\n    public override async Task<OrderResult> RunAsync(WorkflowContext context, OrderPayload order)\n    {\n        var logger = context.CreateReplaySafeLogger<OrderProcessingWorkflow>();\n        var orderId = context.InstanceId;\n\n        // Notify the user that an order has come through\n        await context.CallActivityAsync(nameof(NotifyActivity),\n            new Notification($\"Received order {orderId} for {order.Quantity} {order.Name} at ${order.TotalCost}\"));\n        LogOrderReceived(logger, orderId, order.Quantity, order.Name, order.TotalCost);\n\n        // Determine if there is enough of the item available for purchase by checking the inventory\n        var inventoryRequest = new InventoryRequest(RequestId: orderId, order.Name, order.Quantity);\n        var result = await context.CallActivityAsync<InventoryResult>(\n            nameof(VerifyInventoryActivity), inventoryRequest);\n        LogCheckInventory(logger, inventoryRequest);\n            \n        // If there is insufficient inventory, fail and let the user know \n        if (!result.Success)\n        {\n            // End the workflow here since we don't have sufficient inventory\n            await context.CallActivityAsync(nameof(NotifyActivity),\n                new Notification($\"Insufficient inventory for {order.Name}\"));\n            LogInsufficientInventory(logger, order.Name);\n            return new OrderResult(Processed: false);\n        }\n\n        if (order.TotalCost > 5000)\n        {\n            await context.CallActivityAsync(nameof(RequestApprovalActivity),\n                new ApprovalRequest(orderId, order.Name, order.Quantity, order.TotalCost));\n\n            var approvalResponse = await context.WaitForExternalEventAsync<ApprovalResponse>(\n                eventName: \"ApprovalEvent\",\n                timeout: TimeSpan.FromSeconds(30));\n            if (!approvalResponse.IsApproved)\n            {\n                await context.CallActivityAsync(nameof(NotifyActivity),\n                    new Notification($\"Order {orderId} was not approved\"));\n                LogOrderNotApproved(logger, orderId);\n                return new OrderResult(Processed: false);\n            }\n        }\n\n        // There is enough inventory available so the user can purchase the item(s). Process their payment\n        var processPaymentRequest = new PaymentRequest(RequestId: orderId, order.Name, order.Quantity, order.TotalCost);\n        await context.CallActivityAsync(nameof(ProcessPaymentActivity),processPaymentRequest);\n        LogPaymentProcessing(logger, processPaymentRequest);\n\n        try\n        {\n            // Update the available inventory\n            var paymentRequest = new PaymentRequest(RequestId: orderId, order.Name, order.Quantity, order.TotalCost); \n            await context.CallActivityAsync(nameof(UpdateInventoryActivity), paymentRequest);\n            LogInventoryUpdate(logger, paymentRequest);\n        }\n        catch (TaskFailedException)\n        {\n            // Let them know their payment was processed, but there's insufficient inventory, so they're getting a refund\n            await context.CallActivityAsync(nameof(NotifyActivity),\n                new Notification($\"Order {orderId} Failed! You are now getting a refund\"));\n            LogRefund(logger, orderId);\n            return new OrderResult(Processed: false);\n        }\n\n        // Let them know their payment was processed\n        await context.CallActivityAsync(nameof(NotifyActivity), new Notification($\"Order {orderId} has completed!\"));\n        LogSuccessfulOrder(logger, orderId);\n\n        // End the workflow with a success result\n        return new OrderResult(Processed: true);\n    }\n\n    // ... Logging methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data in Go with Dapr\nDESCRIPTION: This snippet shows the basic pattern for decrypting data using the Dapr Go SDK. It demonstrates how to use the Decrypt API to process encrypted data streams.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nout, err := sdkClient.Decrypt(context.Background(), rf, dapr.EncryptOptions{\n\t// Only required option is the component name\n\tComponentName: \"mycryptocomponent\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Resiliency Policies in YAML for Dapr\nDESCRIPTION: This YAML configuration defines resiliency policies for Dapr, including retry and circuit breaker behaviors for the 'order-processor' service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - checkout\n\nspec:\n  policies:\n    retries:\n      retryForever:\n        policy: constant\n        maxInterval: 5s\n        maxRetries: -1 \n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 5s \n        trip: consecutiveFailures >= 5\n\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages in Go with Dapr\nDESCRIPTION: This Go example shows how to make an HTTP request to publish bulk messages to a Dapr pub/sub component. It demonstrates sending multiple messages with different content types in a single request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nconst (\n  pubsubName = \"my-pubsub-name\"\n  topicName = \"topic-a\"\n  baseUrl = \"http://localhost:3500/v1.0-alpha1/publish/bulk/%s/%s\"\n)\n\nfunc main() {\n  url := fmt.Sprintf(baseUrl, pubsubName, topicName)\n  method := \"POST\"\n  payload := strings.NewReader(`[\n        {\n            \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  \"first text message\",\n            \"contentType\": \"text/plain\"\n        },\n        {\n            \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  {\n                \"message\": \"second JSON message\"\n            },\n            \"contentType\": \"application/json\"\n        }\n]`)\n\n  client := &http.Client {}\n  req, _ := http.NewRequest(method, url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  res, err := client.Do(req)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Task Chaining in Python\nDESCRIPTION: Implements a task chain workflow in Python that executes three sequential steps with error handling. Each step processes input and returns transformed output, with the workflow maintaining state between steps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dapr.ext.workflow as wf\n\ndef task_chain_workflow(ctx: wf.DaprWorkflowContext, wf_input: int):\n    try:\n        result1 = yield ctx.call_activity(step1, input=wf_input)\n        result2 = yield ctx.call_activity(step2, input=result1)\n        result3 = yield ctx.call_activity(step3, input=result2)\n    except Exception as e:\n        yield ctx.call_activity(error_handler, input=str(e))\n        raise\n    return [result1, result2, result3]\n\ndef step1(ctx, activity_input):\n    print(f'Step 1: Received input: {activity_input}.')\n    # Do some work\n    return activity_input + 1\n\ndef step2(ctx, activity_input):\n    print(f'Step 2: Received input: {activity_input}.')\n    # Do some work\n    return activity_input * 2\n\ndef step3(ctx, activity_input):\n    print(f'Step 3: Received input: {activity_input}.')\n    # Do some work\n    return activity_input ^ 2\n\ndef error_handler(ctx, error):\n    print(f'Executing error handler: {error}.')\n    # Do some compensating work\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Order Workflow in Go\nDESCRIPTION: Defines a Go function for a purchase order workflow using Dapr. It handles order approval based on cost, waits for external approval events, and processes the order accordingly.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype Order struct {\n\tCost     float64 `json:\"cost\"`\n\tProduct  string  `json:\"product\"`\n\tQuantity int     `json:\"quantity\"`\n}\ntype Approval struct {\n\tApprover string `json:\"approver\"`\n}\nfunc PurchaseOrderWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar order Order\n\tif err := ctx.GetInput(&order); err != nil {\n\t\treturn \"\", err\n\t}\n\t// Orders under $1000 are auto-approved\n\tif order.Cost < 1000 {\n\t\treturn \"Auto-approved\", nil\n\t}\n\t// Orders of $1000 or more require manager approval\n\tif err := ctx.CallActivity(SendApprovalRequest, workflow.ActivityInput(order)).Await(nil); err != nil {\n\t\treturn \"\", err\n\t}\n\t// Approvals must be received within 24 hours or they will be cancelled\n\tvar approval Approval\n\tif err := ctx.WaitForExternalEvent(\"approval_received\", time.Hour*24).Await(&approval); err != nil {\n\t\t// Assuming that a timeout has taken place - in any case; an error.\n\t\treturn \"error/cancelled\", err\n\t}\n\t// The order was approved\n\tif err := ctx.CallActivity(PlaceOrder, workflow.ActivityInput(order)).Await(nil); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn fmt.Sprintf(\"Approved by %s\", approval.Approver), nil\n}\nfunc SendApprovalRequest(ctx workflow.ActivityContext) (any, error) {\n\tvar order Order\n\tif err := ctx.GetInput(&order); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"*** Sending approval request for order: %v\\n\", order)\n\treturn \"\", nil\n}\nfunc PlaceOrder(ctx workflow.ActivityContext) (any, error) {\n\tvar order Order\n\tif err := ctx.GetInput(&order); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"*** Placing order: %v\", order)\n\treturn \"\", nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Topic Attributes in .NET\nDESCRIPTION: This C# code demonstrates implementing pub/sub routing using .NET controller methods with the Topic attribute. It defines handlers for widget, gadget, and generic product events, with routing rules specified directly in the attribute's parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n        [Topic(\"pubsub\", \"inventory\", \"event.type ==\\\"widget\\\"\", 1)]\n        [HttpPost(\"widgets\")]\n        public async Task<ActionResult<Stock>> HandleWidget(Widget widget, [FromServices] DaprClient daprClient)\n        {\n            // Logic\n            return stock;\n        }\n\n        [Topic(\"pubsub\", \"inventory\", \"event.type ==\\\"gadget\\\"\", 2)]\n        [HttpPost(\"gadgets\")]\n        public async Task<ActionResult<Stock>> HandleGadget(Gadget gadget, [FromServices] DaprClient daprClient)\n        {\n            // Logic\n            return stock;\n        }\n\n        [Topic(\"pubsub\", \"inventory\")]\n        [HttpPost(\"products\")]\n        public async Task<ActionResult<Stock>> HandleProduct(Product product, [FromServices] DaprClient daprClient)\n        {\n            // Logic\n            return stock;\n        }\n```\n\n----------------------------------------\n\nTITLE: Encrypting String Data with Dapr in Python\nDESCRIPTION: This snippet demonstrates how to encrypt a string using the Dapr Python SDK with gRPC APIs. It takes a message string, encodes it, and encrypts it using a specified cryptography component and key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# When passing data (a buffer or string), `encrypt` returns a Buffer with the encrypted message\ndef encrypt_decrypt_string(dapr: DaprClient):\n    message = 'The secret is \"passw0rd\"'\n\n    # Encrypt the message\n    resp = dapr.encrypt(\n        data=message.encode(),\n        options=EncryptOptions(\n            # Name of the cryptography component (required)\n            component_name=CRYPTO_COMPONENT_NAME,\n            # Key stored in the cryptography component (required)\n            key_name=RSA_KEY_NAME,\n            # Algorithm used for wrapping the key, which must be supported by the key named above.\n            # Options include: \"RSA\", \"AES\"\n            key_wrap_algorithm='RSA',\n        ),\n    )\n\n    # The method returns a readable stream, which we read in full in memory\n    encrypt_bytes = resp.read()\n    print(f'Encrypted the message, got {len(encrypt_bytes)} bytes')\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management in Python using Dapr SDK\nDESCRIPTION: Python code showing how to save, get and delete state using Dapr's state management building block. Uses DaprClient to interact with the state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith DaprClient() as client:\n\n    # Save state into the state store\n    client.save_state(DAPR_STORE_NAME, orderId, str(order))\n    logging.info('Saving Order: %s', order)\n\n    # Get state from the state store\n    result = client.get_state(DAPR_STORE_NAME, orderId)\n    logging.info('Result after get: ' + str(result.data))\n\n    # Delete state from the state store\n    client.delete_state(store_name=DAPR_STORE_NAME, key=orderId)\n    logging.info('Deleting Order: %s', order)\n```\n\n----------------------------------------\n\nTITLE: Registering Actor Timer in Dapr\nDESCRIPTION: HTTP POST/PUT request to register a timer for a Dapr actor. The timer parameters are specified in the request body.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPOST/PUT http://localhost:3500/v1.0/actors/<actorType>/<actorId>/timers/<name>\n```\n\n----------------------------------------\n\nTITLE: Deleting State Data with cURL\nDESCRIPTION: Example of deleting state data for a specific key using HTTP DELETE request with curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:3500/v1.0/state/starwars/planet -H \"If-Match: xxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Pub/Sub Subscriptions in Go\nDESCRIPTION: Shows Go implementation of Dapr pub/sub subscription using Gorilla Mux router, including type definitions and subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nconst appPort = 3000\n\ntype subscription struct {\n\tPubsubName string            `json:\"pubsubname\"`\n\tTopic      string            `json:\"topic\"`\n\tMetadata   map[string]string `json:\"metadata,omitempty\"`\n\tRoutes     routes            `json:\"routes\"`\n}\n\ntype routes struct {\n\tRules   []rule `json:\"rules,omitempty\"`\n\tDefault string `json:\"default,omitempty\"`\n}\n\ntype rule struct {\n\tMatch string `json:\"match\"`\n\tPath  string `json:\"path\"`\n}\n\n// This handles /dapr/subscribe\nfunc configureSubscribeHandler(w http.ResponseWriter, _ *http.Request) {\n\tt := []subscription{\n\t\t{\n\t\t\tPubsubName: \"pubsub\",\n\t\t\tTopic:      \"orders\",\n\t\t\tRoutes: routes{\n\t\t\t\tRules: []rule{\n\t\t\t\t\t{\n\t\t\t\t\t\tMatch: `event.type == \"order\"`,\n\t\t\t\t\t\tPath:  \"/orders\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tDefault: \"/orders\",\n\t\t\t},\n\t\t},\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(t)\n}\n\nfunc main() {\n\trouter := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/dapr/subscribe\", configureSubscribeHandler).Methods(\"GET\")\n\tlog.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", appPort), router))\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Python\nDESCRIPTION: Subscribes to configuration updates using the Dapr Python SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Subscribe for configuration changes\nconfiguration = await client.subscribe_configuration(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS)\n```\n\n----------------------------------------\n\nTITLE: Configuring CockroachDB State Store Component in YAML\nDESCRIPTION: This YAML configuration sets up a CockroachDB state store component for Dapr. It includes required fields like the connection string and optional fields for timeouts, table names, and actor state store configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cockroachdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.cockroachdb\n  version: v1\n  metadata:\n  # Connection string\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n  # Timeout for database operations, in seconds (optional)\n  #- name: timeoutInSeconds\n  #  value: 20\n  # Name of the table where to store the state (optional)\n  #- name: tableName\n  #  value: \"state\"\n  # Name of the table where to store metadata used by Dapr (optional)\n  #- name: metadataTableName\n  #  value: \"dapr_metadata\"\n  # Cleanup interval in seconds, to remove expired rows (optional)\n  #- name: cleanupIntervalInSeconds\n  #  value: 3600\n  # Max idle time for connections before they're closed (optional)\n  #- name: connectionMaxIdleTime\n  #  value: 0\n  # Uncomment this if you wish to use CockroachDB as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Raising Workflow Event in Python\nDESCRIPTION: Demonstrates how to raise an event to a Dapr workflow using the Python SDK. It uses the DaprClient to send an approval event to a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom dapr.clients import DaprClient\nfrom dataclasses import asdict\n\nwith DaprClient() as d:\n    d.raise_workflow_event(\n        instance_id=instance_id,\n        workflow_component=\"dapr\",\n        event_name=\"approval_received\",\n        event_data=asdict(Approval(\"Jane Doe\")))\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific HTTP APIs in Dapr Configuration\nDESCRIPTION: This YAML configuration enables only the state v1.0 HTTP API and blocks all other HTTP APIs. It demonstrates using an allowlist in the Dapr Configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/api-allowlist.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  api:\n    allowed:\n      - name: state\n        version: v1.0\n        protocol: http\n```\n\n----------------------------------------\n\nTITLE: Publishing messages using Dapr JavaScript SDK\nDESCRIPTION: Demonstrates how to use the Dapr JavaScript SDK to publish messages to a topic in a loop. It includes the necessary dependencies and shows how to run the application with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprServer, DaprClient, CommunicationProtocolEnum } from '@dapr/dapr'; \n\nconst daprHost = \"127.0.0.1\"; \n\nvar main = function() {\n    for(var i=0;i<10;i++) {\n        sleep(5000);\n        var orderId = Math.floor(Math.random() * (1000 - 1) + 1);\n        start(orderId).catch((e) => {\n            console.error(e);\n            process.exit(1);\n        });\n    }\n}\n\nasync function start(orderId) {\n    const PUBSUB_NAME = \"order-pub-sub\"\n    const TOPIC_NAME  = \"orders\"\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT, \n        communicationProtocol: CommunicationProtocolEnum.HTTP\n    });\n    console.log(\"Published data:\" + orderId)\n    //Using Dapr SDK to publish a topic\n    await client.pubsub.publish(PUBSUB_NAME, TOPIC_NAME, orderId);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Pattern in JavaScript Using Dapr Workflow\nDESCRIPTION: JavaScript implementation of a status monitoring workflow that checks status, sends alerts, and adjusts the monitoring interval based on health status. Uses continueAsNew to restart the workflow with updated state.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst statusMonitorWorkflow: TWorkflow = async function* (ctx: WorkflowContext): any {\n    let duration;\n    const status = yield ctx.callActivity(checkStatusActivity);\n    if (status === \"healthy\") {\n      // Check less frequently when in a healthy state\n      // set duration to 1 hour\n      duration = 60 * 60;\n    } else {\n      yield ctx.callActivity(alertActivity, \"job unhealthy\");\n      // Check more frequently when in an unhealthy state\n      // set duration to 5 minutes\n      duration = 5 * 60;\n    }\n\n    // Put the workflow to sleep until the determined time\n    ctx.createTimer(duration);\n\n    // Restart from the beginning with the updated state\n    ctx.continueAsNew();\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Control Plane Configuration in YAML\nDESCRIPTION: This YAML snippet defines the structure for the 'daprsystem' configuration file used for global settings when Dapr is deployed to Kubernetes. It includes fields for mTLS configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/configuration-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: default\nspec:\n  mtls:\n    enabled: true\n    allowedClockSkew: 15m\n    workloadCertTTL: 24h\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Workflow in Python\nDESCRIPTION: Complete Python implementation of a Dapr workflow application including workflow definition, activities, and client operations. Features workflow runtime setup, activity handlers, retry policies, and workflow management operations like pause, resume, and purge.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nfrom time import sleep\nfrom dapr.ext.workflow import (\n    WorkflowRuntime,\n    DaprWorkflowContext,\n    WorkflowActivityContext,\n    RetryPolicy,\n    DaprWorkflowClient,\n    when_any,\n)\nfrom dapr.conf import Settings\nfrom dapr.clients.exceptions import DaprInternalError\n\nsettings = Settings()\n\ncounter = 0\nretry_count = 0\nchild_orchestrator_count = 0\nchild_orchestrator_string = ''\nchild_act_retry_count = 0\ninstance_id = 'exampleInstanceID'\nchild_instance_id = 'childInstanceID'\nworkflow_name = 'hello_world_wf'\nchild_workflow_name = 'child_wf'\ninput_data = 'Hi Counter!'\nevent_name = 'event1'\nevent_data = 'eventData'\nnon_existent_id_error = 'no such instance exists'\n\nretry_policy = RetryPolicy(\n    first_retry_interval=timedelta(seconds=1),\n    max_number_of_attempts=3,\n    backoff_coefficient=2,\n    max_retry_interval=timedelta(seconds=10),\n    retry_timeout=timedelta(seconds=100),\n)\n\nwfr = WorkflowRuntime()\n\n\n@wfr.workflow(name='hello_world_wf')\ndef hello_world_wf(ctx: DaprWorkflowContext, wf_input):\n    print(f'{wf_input}')\n    yield ctx.call_activity(hello_act, input=1)\n    yield ctx.call_activity(hello_act, input=10)\n    yield ctx.call_activity(hello_retryable_act, retry_policy=retry_policy)\n    yield ctx.call_child_workflow(child_retryable_wf, retry_policy=retry_policy)\n\n    # Change in event handling: Use when_any to handle both event and timeout\n    event = ctx.wait_for_external_event(event_name)\n    timeout = ctx.create_timer(timedelta(seconds=30))\n    winner = yield when_any([event, timeout])\n\n    if winner == timeout:\n        print('Workflow timed out waiting for event')\n        return 'Timeout'\n\n    yield ctx.call_activity(hello_act, input=100)\n    yield ctx.call_activity(hello_act, input=1000)\n    return 'Completed'\n\n\n@wfr.activity(name='hello_act')\ndef hello_act(ctx: WorkflowActivityContext, wf_input):\n    global counter\n    counter += wf_input\n    print(f'New counter value is: {counter}!', flush=True)\n\n\n@wfr.activity(name='hello_retryable_act')\ndef hello_retryable_act(ctx: WorkflowActivityContext):\n    global retry_count\n    if (retry_count % 2) == 0:\n        print(f'Retry count value is: {retry_count}!', flush=True)\n        retry_count += 1\n        raise ValueError('Retryable Error')\n    print(f'Retry count value is: {retry_count}! This print statement verifies retry', flush=True)\n    retry_count += 1\n\n\n@wfr.workflow(name='child_retryable_wf')\ndef child_retryable_wf(ctx: DaprWorkflowContext):\n    global child_orchestrator_string, child_orchestrator_count\n    if not ctx.is_replaying:\n        child_orchestrator_count += 1\n        print(f'Appending {child_orchestrator_count} to child_orchestrator_string!', flush=True)\n        child_orchestrator_string += str(child_orchestrator_count)\n    yield ctx.call_activity(\n        act_for_child_wf, input=child_orchestrator_count, retry_policy=retry_policy\n    )\n    if child_orchestrator_count < 3:\n        raise ValueError('Retryable Error')\n\n\n@wfr.activity(name='act_for_child_wf')\ndef act_for_child_wf(ctx: WorkflowActivityContext, inp):\n    global child_orchestrator_string, child_act_retry_count\n    inp_char = chr(96 + inp)\n    print(f'Appending {inp_char} to child_orchestrator_string!', flush=True)\n    child_orchestrator_string += inp_char\n    if child_act_retry_count % 2 == 0:\n        child_act_retry_count += 1\n        raise ValueError('Retryable Error')\n    child_act_retry_count += 1\n\n\ndef main():\n    wfr.start()\n    wf_client = DaprWorkflowClient()\n\n    print('==========Start Counter Increase as per Input:==========')\n    wf_client.schedule_new_workflow(\n        workflow=hello_world_wf, input=input_data, instance_id=instance_id\n    )\n\n    wf_client.wait_for_workflow_start(instance_id)\n\n    # Sleep to let the workflow run initial activities\n    sleep(12)\n\n    assert counter == 11\n    assert retry_count == 2\n    assert child_orchestrator_string == '1aa2bb3cc'\n\n    # Pause Test\n    wf_client.pause_workflow(instance_id=instance_id)\n    metadata = wf_client.get_workflow_state(instance_id=instance_id)\n    print(f'Get response from {workflow_name} after pause call: {metadata.runtime_status.name}')\n\n    # Resume Test\n    wf_client.resume_workflow(instance_id=instance_id)\n    metadata = wf_client.get_workflow_state(instance_id=instance_id)\n    print(f'Get response from {workflow_name} after resume call: {metadata.runtime_status.name}')\n\n    sleep(2)  # Give the workflow time to reach the event wait state\n    wf_client.raise_workflow_event(instance_id=instance_id, event_name=event_name, data=event_data)\n\n    print('========= Waiting for Workflow completion', flush=True)\n    try:\n        state = wf_client.wait_for_workflow_completion(instance_id, timeout_in_seconds=30)\n        if state.runtime_status.name == 'COMPLETED':\n            print('Workflow completed! Result: {}'.format(state.serialized_output.strip('\"')))\n        else:\n            print(f'Workflow failed! Status: {state.runtime_status.name}')\n    except TimeoutError:\n        print('*** Workflow timed out!')\n\n    wf_client.purge_workflow(instance_id=instance_id)\n    try:\n        wf_client.get_workflow_state(instance_id=instance_id)\n    except DaprInternalError as err:\n        if non_existent_id_error in err._message:\n            print('Instance Successfully Purged')\n\n    wfr.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub Component Configuration\nDESCRIPTION: Dapr component configuration for Redis pub/sub messaging system, defining connection details and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Component in Dapr\nDESCRIPTION: YAML configuration for setting up the OpenAI conversation component in Dapr. Defines the component type, API key, model selection, and cache TTL settings. This configuration enables integration with OpenAI's language models.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/openai.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: openai\nspec:\n  type: conversation.openai\n  metadata:\n  - name: key\n    value: mykey\n  - name: model\n    value: gpt-4-turbo\n  - name: cacheTTL\n    value: 10m\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up MongoDB as a state store component in Dapr, including all available metadata fields for customization like server connection, authentication, database settings, and actor store configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mongodb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.mongodb\n  version: v1\n  metadata:\n  - name: server\n    value: <REPLACE-WITH-SERVER>\n  - name: host\n    value: <REPLACE-WITH-HOST>\n  - name: username\n    value: <REPLACE-WITH-USERNAME>\n  - name: password\n    value: <REPLACE-WITH-PASSWORD>\n  - name: databaseName\n    value: <REPLACE-WITH-DATABASE-NAME>\n  - name: collectionName\n    value: <REPLACE-WITH-COLLECTION-NAME>\n  - name: writeConcern\n    value: <REPLACE-WITH-WRITE-CONCERN>\n  - name: readConcern\n    value: <REPLACE-WITH-READ-CONCERN>\n  - name: operationTimeout\n    value: <REPLACE-WITH-OPERATION-TIMEOUT>\n  - name: params\n    value: <REPLACE-WITH-ADDITIONAL-PARAMETERS>\n```\n\n----------------------------------------\n\nTITLE: HTTP Actor Communication in Dapr\nDESCRIPTION: Shows the HTTP endpoint pattern for interacting with Dapr actors. This endpoint allows POST/GET/PUT/DELETE operations to invoke actor methods, manage state, and handle timers/reminders. The endpoint accepts actor type and ID as path parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-features-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOST/GET/PUT/DELETE http://localhost:3500/v1.0/actors/<actorType>/<actorId>/<method/state/timers/reminders>\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Dapr State Operations\nDESCRIPTION: Demonstrates saving and retrieving multiple states using the Dapr Python SDK with metadata support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc._state import StateItem\n\n#code\nlogging.basicConfig(level = logging.INFO)\nDAPR_STORE_NAME = \"statestore\"\norderId = 100\n#Using Dapr SDK to save and retrieve multiple states\nwith DaprClient() as client:\n    client.save_bulk_state(store_name=DAPR_STORE_NAME, states=[StateItem(key=\"order_2\", value=str(orderId))])\n    result = client.get_bulk_state(store_name=DAPR_STORE_NAME, keys=[\"order_1\", \"order_2\"], states_metadata={\"metakey\": \"metavalue\"}).items\n    logging.info('Result after get bulk: ' + str(result))\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in C# with ASP.NET Core\nDESCRIPTION: This C# code demonstrates how to create an HTTP POST endpoint to handle incoming events from the 'checkout' input binding. It logs the received order ID and returns a response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace CheckoutService.controller\n{\n    [ApiController]\n    public class CheckoutServiceController : Controller\n    {\n        [HttpPost(\"/checkout\")]\n        public ActionResult<string> getCheckout([FromBody] int orderId)\n        {\n            Console.WriteLine(\"Received Message: \" + orderId);\n            return \"CID\" + orderId;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Subscription to Raw Messages Using YAML in Dapr\nDESCRIPTION: Example of declaratively subscribing to raw pub/sub messages using a YAML subscription configuration with the isRawPayload metadata set to true.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: myevent-subscription\nspec:\n  topic: deathStarStatus\n  routes: \n    default: /dsstatus\n  pubsubname: pubsub\n  metadata:\n    isRawPayload: \"true\"\nscopes:\n- app1\n- app2\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages in Python with Dapr\nDESCRIPTION: This Python example demonstrates how to publish bulk messages to a Dapr pub/sub component using the HTTP API directly with the requests library. It sends two messages with different content types.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nbase_url = \"http://localhost:3500/v1.0-alpha1/publish/bulk/{}/{}\"\npubsub_name = \"my-pubsub-name\"\ntopic_name = \"topic-a\"\npayload = [\n  {\n    \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n    \"event\": \"first text message\",\n    \"contentType\": \"text/plain\"\n  },\n  {\n    \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n    \"event\": {\n      \"message\": \"second JSON message\"\n    },\n    \"contentType\": \"application/json\"\n  }\n]\n\nresponse = requests.post(base_url.format(pubsub_name, topic_name), json=payload)\nprint(response.status_code)\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State in Python\nDESCRIPTION: Implements state management using the Dapr Python SDK. Uses a continuous loop to generate random order IDs and demonstrates state operations with proper client lifecycle management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogging.basicConfig(level = logging.INFO)\nDAPR_STORE_NAME = \"statestore\"\nwhile True:\n    sleep(random.randrange(50, 5000) / 1000)\n    orderId = random.randint(1, 1000)\n    with DaprClient() as client:\n        #Using Dapr SDK to save and get state\n        client.save_state(DAPR_STORE_NAME, \"order_1\", str(orderId)) \n        result = client.get_state(DAPR_STORE_NAME, \"order_1\")\n        logging.info('Result after get: ' + result.data.decode('utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Python Subscriber Implementation with Dapr\nDESCRIPTION: Flask-based subscriber implementation that listens for messages on the 'orders' topic using Dapr pub/sub. Includes route handlers for subscription registration and message processing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [{\n        'pubsubname': 'orderpubsub',\n        'topic': 'orders',\n        'route': 'orders'\n    }]\n    print('Dapr pub/sub is subscribed to: ' + json.dumps(subscriptions))\n    return jsonify(subscriptions)\n\n@app.route('/orders', methods=['POST'])\ndef orders_subscriber():\n    event = from_http(request.headers, request.get_data())\n    print('Subscriber received : ' + event.data['orderid'], flush=True)\n    return json.dumps({'success': True}), 200, {\n        'ContentType': 'application/json'}\n\napp.run(port=5001)\n```\n\n----------------------------------------\n\nTITLE: Publishing messages using Dapr Python SDK\nDESCRIPTION: Demonstrates how to use the Dapr Python SDK to publish messages to a topic in a loop. It includes the necessary dependencies and shows how to run the application with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#dependencies  \nimport random\nfrom time import sleep    \nimport requests\nimport logging\nimport json\nfrom dapr.clients import DaprClient\n\n#code\nlogging.basicConfig(level = logging.INFO)\nwhile True:\n    sleep(random.randrange(50, 5000) / 1000)\n    orderId = random.randint(1, 1000)\n    PUBSUB_NAME = 'order-pub-sub'\n    TOPIC_NAME = 'orders'\n    with DaprClient() as client:\n        #Using Dapr SDK to publish a topic\n        result = client.publish_event(\n            pubsub_name=PUBSUB_NAME,\n            topic_name=TOPIC_NAME,\n            data=json.dumps(orderId),\n            data_content_type='application/json',\n        )\n    logging.info('Published data: ' + str(orderId))\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Runtime in Python\nDESCRIPTION: This snippet demonstrates how to configure the actor runtime in Python using the ActorRuntimeConfig class. It sets various timeout and interval parameters, enables or disables features like draining rebalanced actors and reentrancy, and configures reminders storage partitions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-runtime-config.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nfrom dapr.actor.runtime.config import ActorRuntimeConfig, ActorReentrancyConfig\n\nActorRuntime.set_actor_config(\n    ActorRuntimeConfig(\n        actor_idle_timeout=timedelta(hours=1),\n        actor_scan_interval=timedelta(seconds=30),\n        drain_ongoing_call_timeout=timedelta(minutes=1),\n        drain_rebalanced_actors=True,\n        reentrancy=ActorReentrancyConfig(enabled=False),\n        remindersStoragePartitions=7\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Dapr Workflows with Python Client\nDESCRIPTION: This code snippet demonstrates how to use the Dapr Python client to manage workflow instances. It includes examples of scheduling a new workflow, getting workflow state, pausing and resuming workflows, raising events, and purging workflow data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom dapr.ext.workflow import WorkflowRuntime, DaprWorkflowContext, WorkflowActivityContext\nfrom dapr.clients import DaprClient\n\n# Sane parameters\ninstanceId = \"exampleInstanceID\"\nworkflowComponent = \"dapr\"\nworkflowName = \"hello_world_wf\"\neventName = \"event1\"\neventData = \"eventData\"\n\n# Start the workflow\nwf_client.schedule_new_workflow(\n        workflow=hello_world_wf, input=input_data, instance_id=instance_id\n    )\n\n# Get info on the workflow\nwf_client.get_workflow_state(instance_id=instance_id)\n\n# Pause the workflow\nwf_client.pause_workflow(instance_id=instance_id)\n    metadata = wf_client.get_workflow_state(instance_id=instance_id)\n\n# Resume the workflow\nwf_client.resume_workflow(instance_id=instance_id)\n\n# Raise an event on the workflow. \nwf_client.raise_workflow_event(instance_id=instance_id, event_name=event_name, data=event_data)\n\n# Purge the workflow\nwf_client.purge_workflow(instance_id=instance_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Pattern in Python Using Dapr Workflow\nDESCRIPTION: Python implementation of a status monitoring workflow that checks job health, sends alerts for unhealthy jobs, and adjusts the monitoring interval based on status. Uses continue-as-new to restart the workflow with updated state instead of infinite loops.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom datetime import timedelta\nimport random\nimport dapr.ext.workflow as wf\n\n\n@dataclass\nclass JobStatus:\n    job_id: str\n    is_healthy: bool\n\n\ndef status_monitor_workflow(ctx: wf.DaprWorkflowContext, job: JobStatus):\n    # poll a status endpoint associated with this job\n    status = yield ctx.call_activity(check_status, input=job)\n    if not ctx.is_replaying:\n        print(f\"Job '{job.job_id}' is {status}.\")\n\n    if status == \"healthy\":\n        job.is_healthy = True\n        next_sleep_interval = 60  # check less frequently when healthy\n    else:\n        if job.is_healthy:\n            job.is_healthy = False\n            ctx.call_activity(send_alert, input=f\"Job '{job.job_id}' is unhealthy!\")\n        next_sleep_interval = 5  # check more frequently when unhealthy\n\n    yield ctx.create_timer(fire_at=ctx.current_utc_datetime + timedelta(minutes=next_sleep_interval))\n\n    # restart from the beginning with a new JobStatus input\n    ctx.continue_as_new(job)\n\n\ndef check_status(ctx, _) -> str:\n    return random.choice([\"healthy\", \"unhealthy\"])\n\n\ndef send_alert(ctx, message: str):\n    print(f'*** Alert: {message}')\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Server in Go\nDESCRIPTION: A Go implementation of a gRPC server using the helloworld example. This code creates a gRPC server that listens on port 50051 and implements the Greeter service with a SayHello method.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nconst (\n\tport = \":50051\"\n)\n\n// server is used to implement helloworld.GreeterServer.\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Publisher Implementation\nDESCRIPTION: Go code implementing a Dapr publisher that publishes events to the specified pub/sub topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient, err := dapr.NewClient()\n\nif err := client.PublishEvent(ctx, PUBSUB_NAME, PUBSUB_TOPIC, []byte(order)); err != nil {\n    panic(err)\n}\n\nfmt.Println(\"Published data: \", order)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Workflow Client in JavaScript\nDESCRIPTION: JavaScript implementation of DaprWorkflowClient class showing client operations for managing workflow instances, including scheduling, terminating, and querying workflow states.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TaskHubGrpcClient } from \"@microsoft/durabletask-js\";\nimport { WorkflowState } from \"./WorkflowState\";\nimport { generateApiTokenClientInterceptors, generateEndpoint, getDaprApiToken } from \"../internal/index\";\nimport { TWorkflow } from \"../../types/workflow/Workflow.type\";\nimport { getFunctionName } from \"../internal\";\nimport { WorkflowClientOptions } from \"../../types/workflow/WorkflowClientOption\";\n\n/** DaprWorkflowClient class defines client operations for managing workflow instances. */\n\nexport default class DaprWorkflowClient {\n  private readonly _innerClient: TaskHubGrpcClient;\n\n  /** Initialize a new instance of the DaprWorkflowClient.\n   */\n  constructor(options: Partial<WorkflowClientOptions> = {}) {\n    const grpcEndpoint = generateEndpoint(options);\n    options.daprApiToken = getDaprApiToken(options);\n    this._innerClient = this.buildInnerClient(grpcEndpoint.endpoint, options);\n  }\n\n  private buildInnerClient(hostAddress: string, options: Partial<WorkflowClientOptions>): TaskHubGrpcClient {\n    let innerOptions = options?.grpcOptions;\n    if (options.daprApiToken !== undefined && options.daprApiToken !== \"\") {\n      innerOptions = {\n        ...innerOptions,\n        interceptors: [generateApiTokenClientInterceptors(options), ...(innerOptions?.interceptors ?? [])],\n      };\n    }\n    return new TaskHubGrpcClient(hostAddress, innerOptions);\n  }\n\n  /**\n   * Schedule a new workflow using the DurableTask client.\n   */\n  public async scheduleNewWorkflow(\n    workflow: TWorkflow | string,\n    input?: any,\n    instanceId?: string,\n    startAt?: Date,\n  ): Promise<string> {\n    if (typeof workflow === \"string\") {\n      return await this._innerClient.scheduleNewOrchestration(workflow, input, instanceId, startAt);\n    }\n    return await this._innerClient.scheduleNewOrchestration(getFunctionName(workflow), input, instanceId, startAt);\n  }\n\n  /**\n   * Terminate the workflow associated with the provided instance id.\n   *\n   * @param {string} workflowInstanceId - Workflow instance id to terminate.\n   * @param {any} output - The optional output to set for the terminated workflow instance.\n   */\n  public async terminateWorkflow(workflowInstanceId: string, output: any) {\n    await this._innerClient.terminateOrchestration(workflowInstanceId, output);\n  }\n\n  /**\n   * Fetch workflow instance metadata from the configured durable store.\n   */\n  public async getWorkflowState(\n    workflowInstanceId: string,\n    getInputsAndOutputs: boolean,\n  ): Promise<WorkflowState | undefined> {\n    const state = await this._innerClient.getOrchestrationState(workflowInstanceId, getInputsAndOutputs);\n    if (state !== undefined) {\n      return new WorkflowState(state);\n    }\n  }\n\n  /**\n   * Waits for a workflow to start running\n   */\n  public async waitForWorkflowStart(\n    workflowInstanceId: string,\n    fetchPayloads = true,\n    timeoutInSeconds = 60,\n  ): Promise<WorkflowState | undefined> {\n    const state = await this._innerClient.waitForOrchestrationStart(\n```\n\n----------------------------------------\n\nTITLE: Triggering Smoke Detection and Retrieving Device States in C#\nDESCRIPTION: This snippet shows how to trigger smoke detection on a device and retrieve the updated states of both devices. It demonstrates the interaction between the client application and the actor instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Smoke is detected on device 1 that triggers an alarm on all devices.\nConsole.WriteLine($\"Detecting smoke on Device 1...\");\nproxySmartDevice1 = ActorProxy.Create<ISmartDevice>(deviceActorId1, smokeDetectorActorType);\nawait proxySmartDevice1.DetectSmokeAsync();   \n\nstoredDeviceData1 = await proxySmartDevice1.GetDataAsync();\nConsole.WriteLine($\"Device 1 state: {storedDeviceData1}\");\nstoredDeviceData2 = await proxySmartDevice2.GetDataAsync();\nConsole.WriteLine($\"Device 2 state: {storedDeviceData2}\");\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data in Go with Dapr\nDESCRIPTION: This snippet demonstrates how to encrypt data using the Dapr Go SDK. It provides three examples: a basic encryption call, encrypting a file with proper stream handling, and encrypting a string.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nout, err := sdkClient.Encrypt(context.Background(), rf, dapr.EncryptOptions{\n\t// Name of the Dapr component (required)\n\tComponentName: \"mycryptocomponent\",\n\t// Name of the key stored in the component (required)\n\tKeyName:       \"mykey\",\n\t// Algorithm used for wrapping the key, which must be supported by the key named above.\n\t// Options include: \"RSA\", \"AES\"\n\tAlgorithm:     \"RSA\",\n})\n```\n\nLANGUAGE: go\nCODE:\n```\n// Input file, clear-text\nrf, err := os.Open(\"input\")\nif err != nil {\n\tpanic(err)\n}\ndefer rf.Close()\n\n// Output file, encrypted\nwf, err := os.Create(\"output.enc\")\nif err != nil {\n\tpanic(err)\n}\ndefer wf.Close()\n\n// Encrypt the data using Dapr\nout, err := sdkClient.Encrypt(context.Background(), rf, dapr.EncryptOptions{\n\t// These are the 3 required parameters\n\tComponentName: \"mycryptocomponent\",\n\tKeyName:       \"mykey\",\n\tAlgorithm:     \"RSA\",\n})\nif err != nil {\n\tpanic(err)\n}\n\n// Read the stream and copy it to the out file\nn, err := io.Copy(wf, out)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"Written\", n, \"bytes\")\n```\n\nLANGUAGE: go\nCODE:\n```\n// Input string\nrf := strings.NewReader(\"Amor, ch'a nullo amato amar perdona, mi prese del costui piacer sì forte, che, come vedi, ancor non m'abbandona\")\n\n// Encrypt the data using Dapr\nenc, err := sdkClient.Encrypt(context.Background(), rf, dapr.EncryptOptions{\n\tComponentName: \"mycryptocomponent\",\n\tKeyName:       \"mykey\",\n\tAlgorithm:     \"RSA\",\n})\nif err != nil {\n\tpanic(err)\n}\n\n// Read the encrypted data into a byte slice\nenc, err := io.ReadAll(enc)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dapr Workflow Definition in Go\nDESCRIPTION: A code snippet showing how to implement a Dapr workflow definition in Go. The workflow processes an input value, calls activities, and waits for external events. It demonstrates core workflow patterns including activity orchestration and event handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc TestWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn nil, err\n\t}\n\tvar output string\n\tif err := ctx.CallActivity(TestActivity, workflow.ActivityInput(input)).Await(&output); err != nil {\n\t\treturn nil, err\n\t}\n\n\terr := ctx.WaitForExternalEvent(\"testEvent\", time.Second*60).Await(&output)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := ctx.CallActivity(TestActivity, workflow.ActivityInput(input)).Await(&output); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn output, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation in Python with Dapr\nDESCRIPTION: Python implementation of service invocation using requests library to make HTTP POST calls. Includes random order generation and logging functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nimport random\nfrom time import sleep\nimport logging\nimport requests\n\n#code\nlogging.basicConfig(level = logging.INFO) \nwhile True:\n    sleep(random.randrange(50, 5000) / 1000)\n    orderId = random.randint(1, 1000)\n        #Invoke a service\n        result = requests.post(\n           url='%s/orders' % (base_url),\n           data=json.dumps(order),\n           headers=headers\n        )    \n    logging.basicConfig(level = logging.INFO)\n    logging.info('Order requested: ' + str(orderId))\n    logging.info('Result: ' + str(result))\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Order Workflow in C#\nDESCRIPTION: C# implementation showing how to handle order approval workflows with timeout handling and external event processing using Dapr Workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic override async Task<OrderResult> RunAsync(WorkflowContext context, OrderPayload order)\n{\n    // ...(other steps)...\n\n    // Require orders over a certain threshold to be approved\n    if (order.TotalCost > OrderApprovalThreshold)\n    {\n        try\n        {\n            // Request human approval for this order\n            await context.CallActivityAsync(nameof(RequestApprovalActivity), order);\n\n            // Pause and wait for a human to approve the order\n            ApprovalResult approvalResult = await context.WaitForExternalEventAsync<ApprovalResult>(\n                eventName: \"ManagerApproval\",\n                timeout: TimeSpan.FromDays(3));\n            if (approvalResult == ApprovalResult.Rejected)\n            {\n                // The order was rejected, end the workflow here\n                return new OrderResult(Processed: false);\n            }\n        }\n        catch (TaskCanceledException)\n        {\n            // An approval timeout results in automatic order cancellation\n            return new OrderResult(Processed: false);\n        }\n    }\n\n    // ...(other steps)...\n\n    // End the workflow with a success result\n    return new OrderResult(Processed: true);\n}\n```\n\n----------------------------------------\n\nTITLE: State Management Operations in Java\nDESCRIPTION: Java implementation of state management operations using Dapr client. Shows how to save, retrieve, and delete state using Dapr's state management API with a Redis backend.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: java\nCODE:\n```\ntry (DaprClient client = new DaprClientBuilder().build()) {\n  for (int i = 1; i <= 10; i++) {\n    int orderId = i;\n    Order order = new Order();\n    order.setOrderId(orderId);\n\n    // Save state into the state store\n    client.saveState(DAPR_STATE_STORE, String.valueOf(orderId), order).block();\n    LOGGER.info(\"Saving Order: \" + order.getOrderId());\n\n    // Get state from the state store\n    State<Order> response = client.getState(DAPR_STATE_STORE, String.valueOf(orderId), Order.class).block();\n    LOGGER.info(\"Getting Order: \" + response.getValue().getOrderId());\n\n    // Delete state from the state store\n    client.deleteState(DAPR_STATE_STORE, String.valueOf(orderId)).block();\n    LOGGER.info(\"Deleting Order: \" + orderId);\n    TimeUnit.MILLISECONDS.sleep(1000);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Pub/Sub Subscriptions in .NET\nDESCRIPTION: Shows two approaches for implementing Dapr pub/sub subscriptions in .NET: using attribute-based routing and minimal API style. Includes endpoint configuration for the subscription handler.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n[Topic(\"pubsub\", \"orders\")]\n[HttpPost(\"/orders\")]\npublic async Task<ActionResult<Order>>Checkout(Order order, [FromServices] DaprClient daprClient)\n{\n    // Logic\n    return order;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapPost(\"/orders\", [Topic(\"pubsub\", \"orders\")] (Order order) => {\n    Console.WriteLine(\"Subscriber received : \" + order);\n    return Results.Ok(order);\n});\n```\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapSubscribeHandler();\n});\n```\n\n----------------------------------------\n\nTITLE: C# Workflow Registration and API Endpoints\nDESCRIPTION: C# example showing workflow registration with the Dapr.Workflow package and HTTP endpoints for order processing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDaprWorkflow(options =>\n{\n    options.RegisterWorkflow<OrderProcessingWorkflow>();\n    options.RegisterActivity<NotifyActivity>();\n    options.RegisterActivity<ReserveInventoryActivity>();\n    options.RegisterActivity<ProcessPaymentActivity>();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Workflow in Go\nDESCRIPTION: This Go code implements a Dapr workflow for processing orders. It includes workflow and activity registration, inventory management, and workflow execution. The main function sets up the workflow, processes an order, and waits for completion.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_27\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/dapr/go-sdk/client\"\n\t\"github.com/dapr/go-sdk/workflow\"\n)\n\nvar (\n\tstateStoreName    = \"statestore\"\n\tworkflowComponent = \"dapr\"\n\tworkflowName      = \"OrderProcessingWorkflow\"\n\tdefaultItemName   = \"cars\"\n)\n\nfunc main() {\n\tfmt.Println(\"*** Welcome to the Dapr Workflow console app sample!\")\n\tfmt.Println(\"*** Using this app, you can place orders that start workflows.\")\n\n\tw, err := workflow.NewWorker()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to start worker: %v\", err)\n\t}\n\n\tif err := w.RegisterWorkflow(OrderProcessingWorkflow); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.RegisterActivity(NotifyActivity); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.RegisterActivity(RequestApprovalActivity); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.RegisterActivity(VerifyInventoryActivity); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.RegisterActivity(ProcessPaymentActivity); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.RegisterActivity(UpdateInventoryActivity); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := w.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdaprClient, err := client.NewClient()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialise dapr client: %v\", err)\n\t}\n\twfClient, err := workflow.NewClient(workflow.WithDaprClient(daprClient))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialise workflow client: %v\", err)\n\t}\n\n\tinventory := []InventoryItem{\n\t\t{ItemName: \"paperclip\", PerItemCost: 5, Quantity: 100},\n\t\t{ItemName: \"cars\", PerItemCost: 5000, Quantity: 10},\n\t\t{ItemName: \"computers\", PerItemCost: 500, Quantity: 100},\n\t}\n\tif err := restockInventory(daprClient, inventory); err != nil {\n\t\tlog.Fatalf(\"failed to restock: %v\", err)\n\t}\n\n\tfmt.Println(\"==========Begin the purchase of item:==========\")\n\n\titemName := defaultItemName\n\torderQuantity := 1\n\n\ttotalCost := inventory[1].PerItemCost * orderQuantity\n\n\torderPayload := OrderPayload{\n\t\tItemName:  itemName,\n\t\tQuantity:  orderQuantity,\n\t\tTotalCost: totalCost,\n\t}\n\n\tid, err := wfClient.ScheduleNewWorkflow(context.Background(), workflowName, workflow.WithInput(orderPayload))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to start workflow: %v\", err)\n\t}\n\n\twaitCtx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\t_, err = wfClient.WaitForWorkflowCompletion(waitCtx, id)\n\tcancel()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to wait for workflow: %v\", err)\n\t}\n\n\trespFetch, err := wfClient.FetchWorkflowMetadata(context.Background(), id, workflow.WithFetchPayloads(true))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to get workflow: %v\", err)\n\t}\n\n\tfmt.Printf(\"workflow status: %v\\n\", respFetch.RuntimeStatus)\n\n\tfmt.Println(\"Purchase of item is complete\")\n}\n\nfunc restockInventory(daprClient client.Client, inventory []InventoryItem) error {\n\tfor _, item := range inventory {\n\t\titemSerialized, err := json.Marshal(item)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"adding base stock item: %s\\n\", item.ItemName)\n\t\tif err := daprClient.SaveState(context.Background(), stateStoreName, item.ItemName, itemSerialized, nil); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-out/Fan-in Pattern in JavaScript with Dapr\nDESCRIPTION: JavaScript implementation showing fan-out/fan-in pattern using Dapr workflows. Includes workflow client setup, activity registration, and parallel task execution with random work simulation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Task,\n  DaprWorkflowClient,\n  WorkflowActivityContext,\n  WorkflowContext,\n  WorkflowRuntime,\n  TWorkflow,\n} from \"@dapr/dapr\";\n\nasync function start() {\n  const daprHost = \"localhost\";\n  const daprPort = \"50001\";\n  const workflowClient = new DaprWorkflowClient({\n    daprHost,\n    daprPort,\n  });\n  const workflowRuntime = new WorkflowRuntime({\n    daprHost,\n    daprPort,\n  });\n\n  function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  async function getWorkItemsActivity(_: WorkflowActivityContext): Promise<string[]> {\n    const count: number = getRandomInt(2, 10);\n    console.log(`generating ${count} work items...`);\n\n    const workItems: string[] = Array.from({ length: count }, (_, i) => `work item ${i}`);\n    return workItems;\n  }\n\n  function sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async function processWorkItemActivity(context: WorkflowActivityContext, item: string): Promise<number> {\n    console.log(`processing work item: ${item}`);\n\n    const sleepTime = Math.random() * 5000;\n    await sleep(sleepTime);\n\n    return Math.floor(Math.random() * 11);\n  }\n\n  const workflow: TWorkflow = async function* (ctx: WorkflowContext): any {\n    const tasks: Task<any>[] = [];\n    const workItems = yield ctx.callActivity(getWorkItemsActivity);\n    for (const workItem of workItems) {\n      tasks.push(ctx.callActivity(processWorkItemActivity, workItem));\n    }\n    const results: number[] = yield ctx.whenAll(tasks);\n    const sum: number = results.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n    return sum;\n  };\n\n  workflowRuntime.registerWorkflow(workflow);\n  workflowRuntime.registerActivity(getWorkItemsActivity);\n  workflowRuntime.registerActivity(processWorkItemActivity);\n\n  try {\n    await workflowRuntime.start();\n    console.log(\"Worker started successfully\");\n  } catch (error) {\n    console.error(\"Error starting worker:\", error);\n  }\n\n  try {\n    const id = await workflowClient.scheduleNewWorkflow(workflow);\n    console.log(`Orchestration scheduled with ID: ${id}`);\n\n    const state = await workflowClient.waitForWorkflowCompletion(id, undefined, 30);\n\n    console.log(`Orchestration completed! Result: ${state?.serializedOutput}`);\n  } catch (error) {\n    console.error(\"Error scheduling or waiting for orchestration:\", error);\n  }\n\n  await workflowRuntime.stop();\n  await workflowClient.stop();\n\n  process.exit(0);\n}\n\nstart().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting State with Strong Consistency in Python using Dapr\nDESCRIPTION: Shows how to retrieve state from a Dapr state store with strong consistency. Makes HTTP GET requests and handles ETag headers for versioning.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-stateful-service.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nstore_name = \"redis-store\" # name of the state store as specified in state store component yaml file\ndapr_state_url = \"http://localhost:3500/v1.0/state/{}\".format(store_name)\nresponse = requests.get(dapr_state_url + \"/key1\", headers={\"consistency\":\"strong\"})\nprint(response.headers['ETag'])\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Verb and GRPC Operation Access Control\nDESCRIPTION: YAML configuration for complex access control based on specific HTTP verbs and GRPC operations across multiple apps\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: deny\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: deny\n      trustDomain: 'public'\n      namespace: \"default\"\n      operations:\n      - name: /op1\n        httpVerb: ['POST', 'PUT']\n        action: allow\n    - appId: app2\n      defaultAction: deny\n      trustDomain: 'myDomain'\n      namespace: \"ns1\"\n      operations:\n      - name: /op2\n        action: allow\n```\n\n----------------------------------------\n\nTITLE: Configuring Deny-All Access Control Except Specific App\nDESCRIPTION: YAML configuration that denies access to all apps except those matching trustDomain='public', namespace='default', and appId='app1'\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: deny\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: allow\n      trustDomain: 'public'\n      namespace: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Saving Configuration Items in Redis\nDESCRIPTION: Creates configuration items in Redis using the MSET command. This command sets multiple key-value pairs at once, where the keys are 'orderId1' and 'orderId2'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMSET orderId1 \"101||1\" orderId2 \"102||1\"\n```\n\n----------------------------------------\n\nTITLE: Bulk State Operations in Java using Dapr SDK\nDESCRIPTION: Shows how to perform bulk state operations using the Dapr Java SDK with Spring Boot integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.domain.State;\nimport java.util.Arrays;\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n\n\tpublic static void main(String[] args) throws InterruptedException{\n        String STATE_STORE_NAME = \"statestore\";\n        //Using Dapr SDK to retrieve multiple states\n        DaprClient client = new DaprClientBuilder().build();\n        Mono<List<State<String>>> resultBulk = client.getBulkState(STATE_STORE_NAME,\n        Arrays.asList(\"order_1\", \"order_2\"), String.class);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reentrancy in Go\nDESCRIPTION: Configure a Golang actor service to enable reentrancy by providing the proper configuration via the HTTP API. This example shows how to setup the config handler to respond with a reentrancy configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actor-reentrancy.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype daprConfig struct {\n\tEntities                []string                `json:\"entities,omitempty\"`\n\tActorIdleTimeout        string                  `json:\"actorIdleTimeout,omitempty\"`\n\tActorScanInterval       string                  `json:\"actorScanInterval,omitempty\"`\n\tDrainOngoingCallTimeout string                  `json:\"drainOngoingCallTimeout,omitempty\"`\n\tDrainRebalancedActors   bool                    `json:\"drainRebalancedActors,omitempty\"`\n\tReentrancy              config.ReentrancyConfig `json:\"reentrancy,omitempty\"`\n}\n\nvar daprConfigResponse = daprConfig{\n\t[]string{defaultActorType},\n\tactorIdleTimeout,\n\tactorScanInterval,\n\tdrainOngoingCallTimeout,\n\tdrainRebalancedActors,\n\tconfig.ReentrancyConfig{Enabled: true, MaxStackDepth: &maxStackDepth},\n}\n\nfunc configHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(daprConfigResponse)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Pattern in Java Using Dapr Workflow\nDESCRIPTION: Java implementation of a status monitoring workflow that checks the status of an entity, sends alerts when necessary, and adjusts monitoring intervals based on health status. Uses continueAsNew to restart the workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\npublic class MonitorWorkflow extends Workflow {\n\n  @Override\n  public WorkflowStub create() {\n    return ctx -> {\n\n      Duration nextSleepInterval;\n\n      var status = ctx.callActivity(DemoWorkflowStatusActivity.class.getName(), DemoStatusActivityOutput.class).await();\n      var isHealthy = status.getIsHealthy();\n\n      if (isHealthy) {\n        // Check less frequently when in a healthy state\n        nextSleepInterval = Duration.ofMinutes(60);\n      } else {\n\n        ctx.callActivity(DemoWorkflowAlertActivity.class.getName()).await();\n\n        // Check more frequently when in an unhealthy state\n        nextSleepInterval = Duration.ofMinutes(5);\n      }\n\n      // Put the workflow to sleep until the determined time\n      try {\n        ctx.createTimer(nextSleepInterval);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n\n      // Restart from the beginning with the updated state\n      ctx.continueAsNew();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Order Workflow in Python\nDESCRIPTION: Python implementation of a purchase order workflow that handles auto-approval for orders under $1000 and requires manager approval for larger amounts. Includes timeout handling and external event processing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom datetime import timedelta\nimport dapr.ext.workflow as wf\n\n\n@dataclass\nclass Order:\n    cost: float\n    product: str\n    quantity: int\n\n    def __str__(self):\n        return f'{self.product} ({self.quantity})'\n\n\n@dataclass\nclass Approval:\n    approver: str\n\n    @staticmethod\n    def from_dict(dict):\n        return Approval(**dict)\n\n\ndef purchase_order_workflow(ctx: wf.DaprWorkflowContext, order: Order):\n    # Orders under $1000 are auto-approved\n    if order.cost < 1000:\n        return \"Auto-approved\"\n\n    # Orders of $1000 or more require manager approval\n    yield ctx.call_activity(send_approval_request, input=order)\n\n    # Approvals must be received within 24 hours or they will be canceled.\n    approval_event = ctx.wait_for_external_event(\"approval_received\")\n    timeout_event = ctx.create_timer(timedelta(hours=24))\n    winner = yield wf.when_any([approval_event, timeout_event])\n    if winner == timeout_event:\n        return \"Cancelled\"\n\n    # The order was approved\n    yield ctx.call_activity(place_order, input=order)\n    approval_details = Approval.from_dict(approval_event.get_result())\n    return f\"Approved by '{approval_details.approver}'\"\n\n\ndef send_approval_request(_, order: Order) -> None:\n    print(f'*** Sending approval request for order: {order}')\n\n\ndef place_order(_, order: Order) -> None:\n    print(f'*** Placing order: {order}')\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow with Dapr in Python\nDESCRIPTION: This code defines a complete order processing workflow using Dapr's workflow runtime. It includes the main workflow function and several activity functions that handle different aspects of order processing such as inventory verification, payment processing, and notifications. The workflow checks inventory availability, processes payments, and handles approval for large orders.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nimport logging\nimport json\n\nfrom dapr.ext.workflow import DaprWorkflowContext, WorkflowActivityContext, WorkflowRuntime, when_any\nfrom dapr.clients import DaprClient\nfrom dapr.conf import settings\n\nfrom model import InventoryItem, Notification, InventoryRequest, OrderPayload, OrderResult,\\\n    PaymentRequest, InventoryResult\n\nstore_name = \"statestore\"\n\nwfr = WorkflowRuntime()\n\nlogging.basicConfig(level=logging.INFO)\n\n@wfr.workflow(name=\"order_processing_workflow\")\ndef order_processing_workflow(ctx: DaprWorkflowContext, order_payload_str: str):\n    \"\"\"Defines the order processing workflow.\n    When the order is received, the inventory is checked to see if there is enough inventory to\n    fulfill the order. If there is enough inventory, the payment is processed and the inventory is\n    updated. If there is not enough inventory, the order is rejected.\n    If the total order is greater than $5,000, the order is sent to a manager for approval.\n    \"\"\"\n    order_id = ctx.instance_id\n    order_payload=json.loads(order_payload_str)\n    yield ctx.call_activity(notify_activity, \n                            input=Notification(message=('Received order ' +order_id+ ' for '\n                                               +f'{order_payload[\"quantity\"]}' +' ' +f'{order_payload[\"item_name\"]}'\n                                               +' at $'+f'{order_payload[\"total_cost\"]}' +' !')))\n    result = yield ctx.call_activity(verify_inventory_activity,\n                                     input=InventoryRequest(request_id=order_id,\n                                                            item_name=order_payload[\"item_name\"],\n                                                            quantity=order_payload[\"quantity\"]))\n    if not result.success:\n        yield ctx.call_activity(notify_activity,\n                                input=Notification(message='Insufficient inventory for '\n                                                   +f'{order_payload[\"item_name\"]}'+'!'))\n        return OrderResult(processed=False)\n    \n    if order_payload[\"total_cost\"] > 5000:\n        yield ctx.call_activity(request_approval_activity, input=order_payload)\n        approval_task = ctx.wait_for_external_event(\"approval_event\")\n        timeout_event = ctx.create_timer(timedelta(seconds=30))\n        winner = yield when_any([approval_task, timeout_event])\n        if winner == timeout_event:\n            yield ctx.call_activity(notify_activity, \n                                    input=Notification(message='Order '+order_id\n                                                       +' has been cancelled due to approval timeout.'))\n            return OrderResult(processed=False)\n        approval_result = yield approval_task\n        if approval_result == False:\n            yield ctx.call_activity(notify_activity, input=Notification(\n                message=f'Order {order_id} was not approved'))\n            return OrderResult(processed=False)    \n    \n    yield ctx.call_activity(process_payment_activity, input=PaymentRequest(\n        request_id=order_id, item_being_purchased=order_payload[\"item_name\"],\n        amount=order_payload[\"total_cost\"], quantity=order_payload[\"quantity\"]))\n\n    try:\n        yield ctx.call_activity(update_inventory_activity, \n                                input=PaymentRequest(request_id=order_id,\n                                                     item_being_purchased=order_payload[\"item_name\"],\n                                                     amount=order_payload[\"total_cost\"],\n                                                     quantity=order_payload[\"quantity\"]))\n    except Exception:\n        yield ctx.call_activity(notify_activity, \n                                input=Notification(message=f'Order {order_id} Failed!'))\n        return OrderResult(processed=False)\n\n    yield ctx.call_activity(notify_activity, input=Notification(\n        message=f'Order {order_id} has completed!'))\n    return OrderResult(processed=True)\n\n@wfr.activity(name=\"notify_activity\")\ndef notify_activity(ctx: WorkflowActivityContext, input: Notification):\n    \"\"\"Defines Notify Activity. This is used by the workflow to send out a notification\"\"\"\n    # Create a logger\n    logger = logging.getLogger('NotifyActivity')\n    logger.info(input.message)\n\n@wfr.activity(name=\"process_payment_activity\")\ndef process_payment_activity(ctx: WorkflowActivityContext, input: PaymentRequest):\n    \"\"\"Defines Process Payment Activity.This is used by the workflow to process a payment\"\"\"\n    logger = logging.getLogger('ProcessPaymentActivity')\n    logger.info('Processing payment: '+f'{input.request_id}'+' for '\n                +f'{input.quantity}' +' ' +f'{input.item_being_purchased}'+' at '+f'{input.amount}'\n                +' USD')\n    logger.info(f'Payment for request ID {input.request_id} processed successfully')\n\n@wfr.activity(name=\"verify_inventory_activity\")\ndef verify_inventory_activity(ctx: WorkflowActivityContext,\n                              input: InventoryRequest) -> InventoryResult:\n    \"\"\"Defines Verify Inventory Activity. This is used by the workflow to verify if inventory\n    is available for the order\"\"\"\n    logger = logging.getLogger('VerifyInventoryActivity')\n\n    logger.info('Verifying inventory for order '+f'{input.request_id}'+' of '\n                +f'{input.quantity}' +' ' +f'{input.item_name}')\n    with DaprClient(f'{settings.DAPR_RUNTIME_HOST}:{settings.DAPR_GRPC_PORT}') as client:\n        result = client.get_state(store_name, input.item_name)\n    if result.data is None:\n        return InventoryResult(False, None)\n    res_json=json.loads(str(result.data.decode('utf-8')))\n    logger.info(f'There are {res_json[\"quantity\"]} {res_json[\"name\"]} available for purchase')\n    inventory_item = InventoryItem(item_name=input.item_name,\n                                  per_item_cost=res_json['per_item_cost'],\n                                  quantity=res_json['quantity'])\n\n    if res_json['quantity'] >= input.quantity:\n        return InventoryResult(True, inventory_item)\n    return InventoryResult(False, None)\n\n@wfr.activity(name=\"update_inventory_activity\")\ndef update_inventory_activity(ctx: WorkflowActivityContext,\n                              input: PaymentRequest) -> InventoryResult:\n    \"\"\"Defines Update Inventory Activity. This is used by the workflow to check if inventory\n    is sufficient to fulfill the order and updates inventory by reducing order quantity from\n    inventory.\"\"\"\n    logger = logging.getLogger('UpdateInventoryActivity')\n\n    logger.info('Checking inventory for order ' +f'{input.request_id}'+' for '\n                +f'{input.quantity}' +' ' +f'{input.item_being_purchased}')\n    with DaprClient(f'{settings.DAPR_RUNTIME_HOST}:{settings.DAPR_GRPC_PORT}') as client:\n        result = client.get_state(store_name, input.item_being_purchased)\n        res_json=json.loads(str(result.data.decode('utf-8')))\n        new_quantity = res_json['quantity'] - input.quantity\n        per_item_cost = res_json['per_item_cost']\n        if new_quantity < 0:\n            raise ValueError('Inventory update for request ID '+f'{input.item_being_purchased}'\n                             +' could not be processed. Insufficient inventory.')\n        new_val = f'{{\"name\": \"{input.item_being_purchased}\", \"quantity\": {str(new_quantity)}, \"per_item_cost\": {str(per_item_cost)}}}'\n        client.save_state(store_name, input.item_being_purchased, new_val)\n        logger.info(f'There are now {new_quantity} {input.item_being_purchased} left in stock')\n\n@wfr.activity(name=\"request_approval_activity\")\ndef request_approval_activity(ctx: WorkflowActivityContext,\n                             input: OrderPayload):\n    \"\"\"Defines Request Approval Activity. This is used by the workflow to request approval\n    for payment of an order. This activity is used only if the order total cost is greater than\n    a particular threshold\"\"\"\n    logger = logging.getLogger('RequestApprovalActivity')\n\n    logger.info('Requesting approval for payment of '+f'{input[\"total_cost\"]}'+' USD for '\n                +f'{input[\"quantity\"]}' +' ' +f'{input[\"item_name\"]}')\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Subscriptions in .NET\nDESCRIPTION: Example of using DaprPublishSubscribeClient in .NET to create dynamic streaming subscriptions. Shows how to configure message handling with timeout settings and implement message processing logic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nusing System.Text;\nusing Dapr.Messaging.PublishSubscribe;\nusing Dapr.Messaging.PublishSubscribe.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDaprPubSubClient();\nvar app = builder.Build();\n\nvar messagingClient = app.Services.GetRequiredService<DaprPublishSubscribeClient>();\n\n//Create a dynamic streaming subscription and subscribe with a timeout of 30 seconds and 10 seconds for message handling\nvar cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(30));\nvar subscription = await messagingClient.SubscribeAsync(\"pubsub\", \"myTopic\",\n    new DaprSubscriptionOptions(new MessageHandlingPolicy(TimeSpan.FromSeconds(10), TopicResponseAction.Retry)),\n    HandleMessageAsync, cancellationTokenSource.Token);\n\nawait Task.Delay(TimeSpan.FromMinutes(1));\n\n//When you're done with the subscription, simply dispose of it\nawait subscription.DisposeAsync();\nreturn;\n\n//Process each message returned from the subscription\nTask<TopicResponseAction> HandleMessageAsync(TopicMessage message, CancellationToken cancellationToken = default)\n{\n    try\n    {\n        //Do something with the message\n        Console.WriteLine(Encoding.UTF8.GetString(message.Data.Span));\n        return Task.FromResult(TopicResponseAction.Success);\n    }\n    catch\n    {\n        return Task.FromResult(TopicResponseAction.Retry);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Subscribe in C# with ASP.NET Core\nDESCRIPTION: This C# snippet demonstrates how to implement a Bulk Subscribe handler using ASP.NET Core. It processes multiple messages in a single request, logs the data, and returns appropriate response statuses for each message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Dapr.AspNetCore;\nusing Dapr;\n\nnamespace DemoApp.Controllers;\n\n[ApiController]\n[Route(\"[controller]\")]\npublic class BulkMessageController : ControllerBase\n{\n    private readonly ILogger<BulkMessageController> logger;\n\n    public BulkMessageController(ILogger<BulkMessageController> logger)\n    {\n        this.logger = logger;\n    }\n\n    [BulkSubscribe(\"messages\", 10, 10)]\n    [Topic(\"pubsub\", \"messages\")]\n    public ActionResult<BulkSubscribeAppResponse> HandleBulkMessages([FromBody] BulkSubscribeMessage<BulkMessageModel<BulkMessageModel>> bulkMessages)\n    {\n        List<BulkSubscribeAppResponseEntry> responseEntries = new List<BulkSubscribeAppResponseEntry>();\n        logger.LogInformation($\"Received {bulkMessages.Entries.Count()} messages\");\n        foreach (var message in bulkMessages.Entries)\n        {\n            try\n            {\n                logger.LogInformation($\"Received a message with data '{message.Event.Data.MessageData}'\");\n                responseEntries.Add(new BulkSubscribeAppResponseEntry(message.EntryId, BulkSubscribeAppResponseStatus.SUCCESS));\n            }\n            catch (Exception e)\n            {\n                logger.LogError(e.Message);\n                responseEntries.Add(new BulkSubscribeAppResponseEntry(message.EntryId, BulkSubscribeAppResponseStatus.RETRY));\n            }\n        }\n        return new BulkSubscribeAppResponse(responseEntries);\n    }\n    public class BulkMessageModel\n    {\n        public string MessageData { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python gRPC Client for Streaming with Dapr\nDESCRIPTION: Python code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmetadata = (('dapr-app-id', 'server'), ('dapr-stream', 'true'),)\n```\n\n----------------------------------------\n\nTITLE: Configuring Outbound Resiliency Policies for Component Targets in Dapr\nDESCRIPTION: Example YAML configuration demonstrating how to apply retry and circuit breaker policies to outbound operations (calls from the sidecar to a component) for a state store component named \"myStateStore\".\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/targets.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  targets:\n    components:\n      myStateStore:\n        outbound:\n          retry: retryForever\n          circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: C# Workflow Activity Class Definitions\nDESCRIPTION: Defines multiple C# workflow activity classes for order processing including notification, inventory reservation, and payment processing functionalities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NotifyActivity : WorkflowActivity<Notification, object>\n{\n    //...\n\n    public NotifyActivity(ILoggerFactory loggerFactory)\n    {\n        this.logger = loggerFactory.CreateLogger<NotifyActivity>();\n    }\n\n    //...\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ReserveInventoryActivity : WorkflowActivity<InventoryRequest, InventoryResult>\n{\n    //...\n\n    public ReserveInventoryActivity(ILoggerFactory loggerFactory, DaprClient client)\n    {\n        this.logger = loggerFactory.CreateLogger<ReserveInventoryActivity>();\n        this.client = client;\n    }\n\n    //...\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ProcessPaymentActivity : WorkflowActivity<PaymentRequest, object>\n{\n    //...\n    public ProcessPaymentActivity(ILoggerFactory loggerFactory)\n    {\n        this.logger = loggerFactory.CreateLogger<ProcessPaymentActivity>();\n    }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages in C# with Dapr\nDESCRIPTION: This C# example demonstrates how to bulk publish multiple events as objects to a Dapr pub/sub component, with error handling to detect any messages that failed to be published.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing Dapr.Client;\n\nconst string PubsubName = \"my-pubsub-name\";\nconst string TopicName = \"topic-a\";\nIReadOnlyList<object> BulkPublishData = new List<object>() {\n    new { Id = \"17\", Amount = 10m },\n    new { Id = \"18\", Amount = 20m },\n    new { Id = \"19\", Amount = 30m }\n};\n\nusing var client = new DaprClientBuilder().Build();\n\nvar res = await client.BulkPublishEventAsync(PubsubName, TopicName, BulkPublishData);\nif (res == null) {\n    throw new Exception(\"null response from dapr\");\n}\nif (res.FailedEntries.Count > 0)\n{\n    Console.WriteLine(\"Some events failed to be published!\");\n    foreach (var failedEntry in res.FailedEntries)\n    {\n        Console.WriteLine(\"EntryId: \" + failedEntry.Entry.EntryId + \" Error message: \" +\n                          failedEntry.ErrorMessage);\n    }\n}\nelse\n{\n    Console.WriteLine(\"Published all events!\");\n}\n```\n\n----------------------------------------\n\nTITLE: First-Write Concurrency Pattern Implementation in Python using Dapr\nDESCRIPTION: Shows implementation of first-write concurrency pattern using ETags for version control. Includes state retrieval, update, and deletion with version checking.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-stateful-service.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nstore_name = \"redis-store\" # name of the state store as specified in state store component yaml file\ndapr_state_url = \"http://localhost:3500/v1.0/state/{}\".format(store_name)\nresponse = requests.get(dapr_state_url + \"/key1\", headers={\"concurrency\":\"first-write\"})\netag = response.headers['ETag']\nnewState = '[{ \"key\": \"k1\", \"value\": \"New Data\", \"etag\": {}, \"options\": { \"concurrency\": \"first-write\" }}]'.format(etag)\n\nrequests.post(dapr_state_url, json=newState)\nresponse = requests.delete(dapr_state_url + \"/key1\", headers={\"If-Match\": \"{}\".format(etag)})\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data in .NET with Dapr\nDESCRIPTION: This snippet shows how to decrypt data using the Dapr .NET SDK. It demonstrates decrypting a byte array back into a UTF-8 encoded string, which is useful for handling encrypted text data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string> DecryptBytesAsync(byte[] encryptedBytes)\n{\n  using var client = new DaprClientBuilder().Build();\n\n  const string componentName = \"azurekeyvault\"; //Change this to match your cryptography component\n  const string keyName = \"myKey\"; //Change this to match the name of the key in your cryptographic store\n\n  var decryptedBytes = await client.DecryptAsync(componentName, encryptedBytes, keyName);\n  var decryptedString = Encoding.UTF8.GetString(decryptedBytes.ToArray());\n  return decryptedString;\n}\n```\n\n----------------------------------------\n\nTITLE: State Management Operations in Go\nDESCRIPTION: Go code demonstrating basic state operations (save, get, delete) using Dapr client\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n  client, err := dapr.NewClient()\n\n  // Save state into the state store\n  _ = client.SaveState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId), []byte(order))\n  log.Print(\"Saving Order: \" + string(order))\n\n  // Get state from the state store\n  result, _ := client.GetState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId))\n  fmt.Println(\"Getting Order: \" + string(result.Value))\n\n  // Delete state from the state store\n  _ = client.DeleteState(ctx, STATE_STORE_NAME, strconv.Itoa(orderId))\n  log.Print(\"Deleting Order: \" + string(order))\n```\n\n----------------------------------------\n\nTITLE: Java Publisher Implementation\nDESCRIPTION: Java code implementing a Dapr publisher that publishes events to the 'orders' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nDaprClient client = new DaprClientBuilder().build();\nclient.publishEvent(\n\t\tPUBSUB_NAME,\n\t\tTOPIC_NAME,\n\t\torder).block();\nlogger.info(\"Published data: \" + order.getOrderId());\n```\n\n----------------------------------------\n\nTITLE: Publishing messages using Dapr .NET SDK\nDESCRIPTION: Demonstrates how to use the Dapr .NET SDK to publish messages to a topic in a loop. It includes the necessary dependencies and shows how to run the application with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Dapr.Client;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading;\n\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n           string PUBSUB_NAME = \"order-pub-sub\";\n           string TOPIC_NAME = \"orders\";\n           while(true) {\n                System.Threading.Thread.Sleep(5000);\n                Random random = new Random();\n                int orderId = random.Next(1,1000);\n                CancellationTokenSource source = new CancellationTokenSource();\n                CancellationToken cancellationToken = source.Token;\n                using var client = new DaprClientBuilder().Build();\n                //Using Dapr SDK to publish a topic\n                await client.PublishEventAsync(PUBSUB_NAME, TOPIC_NAME, orderId, cancellationToken);\n                Console.WriteLine(\"Published data: \" + orderId);\n\t\t        }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-out/Fan-in Pattern in Java with Dapr\nDESCRIPTION: Java implementation of fan-out/fan-in pattern using Dapr workflows, showing parallel task execution and result aggregation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class FaninoutWorkflow extends Workflow {\n    @Override\n    public WorkflowStub create() {\n        return ctx -> {\n            // Get a list of N work items to process in parallel.\n            Object[] workBatch = ctx.callActivity(\"GetWorkBatch\", Object[].class).await();\n            // Schedule the parallel tasks, but don't wait for them to complete yet.\n            List<Task<Integer>> tasks = Arrays.stream(workBatch)\n                    .map(workItem -> ctx.callActivity(\"ProcessWorkItem\", workItem, int.class))\n                    .collect(Collectors.toList());\n            // Everything is scheduled. Wait here until all parallel tasks have completed.\n            List<Integer> results = ctx.allOf(tasks).await();\n            // Aggregate all N outputs and publish the result.\n            int sum = results.stream().mapToInt(Integer::intValue).sum();\n            ctx.complete(sum);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using Java\nDESCRIPTION: This snippet shows how to unsubscribe from configuration updates using the Dapr Java SDK. It creates a Dapr client and calls the unsubscribeConfiguration method with the subscription ID and store name, then checks if the unsubscription was successful.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.domain.ConfigurationItem;\nimport io.dapr.client.domain.GetConfigurationRequest;\nimport io.dapr.client.domain.SubscribeConfigurationRequest;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n//code\nprivate static final String CONFIG_STORE_NAME = \"configstore\";\nprivate static String subscriptionId = null;\n\npublic static void main(String[] args) throws Exception {\n    try (DaprClient client = (new DaprClientBuilder()).build()) {\n      // Unsubscribe from config changes\n      UnsubscribeConfigurationResponse unsubscribe = client\n              .unsubscribeConfiguration(subscriptionId, DAPR_CONFIGURATON_STORE).block();\n      if (unsubscribe.getIsUnsubscribed()) {\n          System.out.println(\"App unsubscribed to config changes\");\n      } else {\n          System.out.println(\"Error unsubscribing to config updates, err:\" + unsubscribe.getMessage());\n      }\n    } catch (Exception e) {\n        System.out.println(\"Error unsubscribing to config updates,\" + e.getMessage());\n        System.exit(1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint for Actor Method Invocation in Dapr\nDESCRIPTION: HTTP endpoint pattern for invoking actor methods in Dapr. Supports POST, GET, PUT, and DELETE methods. The endpoint requires actorType, actorId, and method name as path parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nPOST/GET/PUT/DELETE http://localhost:3500/v1.0/actors/<actorType>/<actorId>/method/<method>\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding in Java\nDESCRIPTION: This Java code uses the Dapr SDK to invoke an output binding. It creates a DaprClient and sends messages to the 'checkout' binding every 5 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.domain.HttpExtension;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n\n\tpublic static void main(String[] args) throws InterruptedException{\n\t\tString BINDING_NAME = \"checkout\";\n\t\tString BINDING_OPERATION = \"create\";\n\t\twhile(true) {\n\t\t\tTimeUnit.MILLISECONDS.sleep(5000);\n\t\t\tRandom random = new Random();\n\t\t\tint orderId = random.nextInt(1000-1) + 1;\n\t\t\tDaprClient client = new DaprClientBuilder().build();\n          //Using Dapr SDK to invoke output binding\n\t\t\tclient.invokeBinding(BINDING_NAME, BINDING_OPERATION, orderId).block();\n\t\t\tlog.info(\"Sending message: \" + orderId);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data in Python with Dapr\nDESCRIPTION: This snippet shows how to decrypt encrypted data using the Dapr Python SDK. It extends the encrypt example by adding decryption functionality to verify the integrity of the encryption/decryption process.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef encrypt_decrypt_string(dapr: DaprClient):\n    message = 'The secret is \"passw0rd\"'\n\n    # ...\n\n    # Decrypt the encrypted data\n    resp = dapr.decrypt(\n        data=encrypt_bytes,\n        options=DecryptOptions(\n            # Name of the cryptography component (required)\n            component_name=CRYPTO_COMPONENT_NAME,\n            # Key stored in the cryptography component (required)\n            key_name=RSA_KEY_NAME,\n        ),\n    )\n\n    # The method returns a readable stream, which we read in full in memory\n    decrypt_bytes = resp.read()\n    print(f'Decrypted the message, got {len(decrypt_bytes)} bytes')\n\n    print(decrypt_bytes.decode())\n    assert message == decrypt_bytes.decode()\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in Python with Dapr SDK\nDESCRIPTION: This Python code uses the Dapr SDK to create an input binding handler for the 'checkout' binding. It logs the received message text.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = App()\n\n@app.binding('checkout')\ndef getCheckout(request: BindingRequest):\n    logging.basicConfig(level = logging.INFO)\n    logging.info('Received Message : ' + request.text())\n\napp.run(6002)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in Python Using Dapr SDK\nDESCRIPTION: Uses the Dapr Python SDK to retrieve both individual and bulk secrets from the configured secret store. The code creates a Dapr client and demonstrates both get_secret and get_bulk_secret methods.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#dependencies \nimport random\nfrom time import sleep    \nimport requests\nimport logging\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc._state import StateItem\nfrom dapr.clients.grpc._request import TransactionalStateOperation, TransactionOperationType\n\n#code\nlogging.basicConfig(level = logging.INFO)\nDAPR_STORE_NAME = \"localsecretstore\"\nkey = 'secret'\n\nwith DaprClient() as client:\n    #Using Dapr SDK to get a secret\n    secret = client.get_secret(store_name=DAPR_STORE_NAME, key=key)\n    logging.info('Result: ')\n    logging.info(secret.secret)\n    #Using Dapr SDK to get bulk secrets\n    secret = client.get_bulk_secret(store_name=DAPR_STORE_NAME)\n    logging.info('Result for bulk secret: ')\n    logging.info(sorted(secret.secrets.items()))\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Pattern in Go Using Dapr Workflow\nDESCRIPTION: Go implementation of a status monitoring workflow that tracks job health state, sends alerts when health status changes, and adjusts monitoring intervals based on status. Uses ContinueAsNew to restart the workflow with updated state.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\ntype JobStatus struct {\n\tJobID     string `json:\"job_id\"`\n\tIsHealthy bool   `json:\"is_healthy\"`\n}\nfunc StatusMonitorWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar sleepInterval time.Duration\n\tvar job JobStatus\n\tif err := ctx.GetInput(&job); err != nil {\n\t\treturn \"\", err\n\t}\n\tvar status string\n\tif err := ctx.CallActivity(CheckStatus, workflow.ActivityInput(job)).Await(&status); err != nil {\n\t\treturn \"\", err\n\t}\n\tif status == \"healthy\" {\n\t\tjob.IsHealthy = true\n\t\tsleepInterval = time.Minutes * 60\n\t} else {\n\t\tif job.IsHealthy {\n\t\t\tjob.IsHealthy = false\n\t\t\terr := ctx.CallActivity(SendAlert, workflow.ActivityInput(fmt.Sprintf(\"Job '%s' is unhealthy!\", job.JobID))).Await(nil)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t}\n\t\tsleepInterval = time.Minutes * 5\n\t}\n\tif err := ctx.CreateTimer(sleepInterval).Await(nil); err != nil {\n\t\treturn \"\", err\n\t}\n\tctx.ContinueAsNew(job, false)\n\treturn \"\", nil\n}\nfunc CheckStatus(ctx workflow.ActivityContext) (any, error) {\n\tstatuses := []string{\"healthy\", \"unhealthy\"}\n\treturn statuses[rand.Intn(1)], nil\n}\nfunc SendAlert(ctx workflow.ActivityContext) (any, error) {\n\tvar message string\n\tif err := ctx.GetInput(&message); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"*** Alert: %s\", message)\n\treturn \"\", nil\n}\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr HTTP API (none strategy)\nDESCRIPTION: This curl command shows how to save state using the Dapr HTTP API with the 'none' strategy. The key will be saved as 'darth' without any prefix.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-share-state.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/redis \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"darth\",\n          \"value\": \"nihilus\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Pub/Sub Subscriptions in Java\nDESCRIPTION: Demonstrates Java implementation of Dapr pub/sub subscription using Spring annotations and CloudEvent handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nprivate static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n@Topic(name = \"orders\", pubsubName = \"pubsub\")\n@PostMapping(path = \"/orders\")\npublic Mono<Void> handleMessage(@RequestBody(required = false) CloudEvent<String> cloudEvent) {\n  return Mono.fromRunnable(() => {\n    try {\n      System.out.println(\"Subscriber received: \" + cloudEvent.getData());\n      System.out.println(\"Subscriber received: \" + OBJECT_MAPPER.writeValueAsString(cloudEvent));\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Items in Go\nDESCRIPTION: Retrieves configuration items from the Dapr configuration store using the Go SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfor _, item := range CONFIGURATION_ITEMS {\n\tconfig, err := client.GetConfigurationItem(ctx, DAPR_CONFIGURATION_STORE, item)\n\t//...\n\tc, _ := json.Marshal(config)\n\tfmt.Println(\"Configuration for \" + item + \": \" + string(c))\n}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation in Go with Dapr\nDESCRIPTION: Go implementation using standard http package for service invocation. Includes environment variable configuration and proper error handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\tdaprHttpPort := os.Getenv(\"DAPR_HTTP_PORT\")\n\tif daprHttpPort == \"\" {\n\t\tdaprHttpPort = \"3500\"\n\t}\n\n\tclient := &http.Client{\n\t\tTimeout: 15 * time.Second,\n\t}\n\n\tfor i := 0; i < 10; i++ {\n\t\ttime.Sleep(5000)\n\t\torderId := rand.Intn(1000-1) + 1\n\n\t\turl := fmt.Sprintf(\"http://localhost:%s/checkout/%v\", daprHttpPort, orderId)\n\t\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\t// Adding target app id as part of the header\n\t\treq.Header.Add(\"dapr-app-id\", \"order-processor\")\n\n\t\t// Invoking a service\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err.Error())\n\t\t}\n\n\t\tb, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tfmt.Println(string(b))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SQS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an AWS SQS binding component in Dapr. Defines required metadata fields including queue name, region, AWS credentials, and binding direction. Supports both input and output binding interfaces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sqs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.sqs\n  version: v1\n  metadata:\n  - name: queueName\n    value: \"items\"\n  - name: region\n    value: \"us-west-2\"\n  - name: accessKey\n    value: \"*****************\"\n  - name: secretKey\n    value: \"*****************\"\n  - name: sessionToken\n    value: \"*****************\"\n  - name: direction \n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr SDK in Java\nDESCRIPTION: This snippet shows how to delete state using the Dapr SDK in a Java Spring Boot application. It uses the DaprClient to retrieve the state's ETag and then delete the state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\tpublic static void main(String[] args) throws InterruptedException{\n        String STATE_STORE_NAME = \"statestore\";\n\n        //Using Dapr SDK to delete the state\n        DaprClient client = new DaprClientBuilder().build();\n        String storedEtag = client.getState(STATE_STORE_NAME, \"order_1\", String.class).block().getEtag();\n        client.deleteState(STATE_STORE_NAME, \"order_1\", storedEtag, null).block();\n\t}\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 mvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Bedrock Conversation Component in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of a Dapr conversation.yaml component file for AWS Bedrock. It includes metadata fields for endpoint, model, and cache TTL configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/aws-bedrock.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: awsbedrock\nspec:\n  type: conversation.aws.bedrock\n  metadata:\n  - name: endpoint\n    value: \"http://localhost:4566\"\n  - name: model\n    value: amazon.titan-text-express-v1\n  - name: cacheTTL\n    value: 10m\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up MySQL/MariaDB as a state store in Dapr, including connection string, schema settings, and optional actor store configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.mysql\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n  - name: schemaName\n    value: \"<SCHEMA NAME>\"\n  - name: tableName\n    value: \"<TABLE NAME>\"\n  - name: timeoutInSeconds\n    value: \"30\"\n  - name: pemPath\n    value: \"<PEM PATH>\"\n  - name: pemContents\n    value: \"<PEM CONTENTS>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Middleware Pipeline in Dapr\nDESCRIPTION: This YAML configuration defines a custom pipeline using OAuth 2.0 and uppercase middleware components. All requests are authorized through OAuth 2.0 and transformed to uppercase before being forwarded to user code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: pipeline\n  namespace: default\nspec:\n  httpPipeline:\n    handlers:\n      - name: oauth2\n        type: middleware.http.oauth2\n      - name: uppercase\n        type: middleware.http.uppercase\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow in .NET\nDESCRIPTION: Demonstrates an order processing workflow implementation in C# that handles order notifications, inventory reservation, and payment processing. Inherits from the Workflow base class and implements async activity calls.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nclass OrderProcessingWorkflow : Workflow<OrderPayload, OrderResult>\n    {\n        public override async Task<OrderResult> RunAsync(WorkflowContext context, OrderPayload order)\n        {\n            //...\n\n            await context.CallActivityAsync(\n                nameof(NotifyActivity),\n                new Notification($\"Received order {orderId} for {order.Name} at {order.TotalCost:c}\"));\n\n            //...\n\n            InventoryResult result = await context.CallActivityAsync<InventoryResult>(\n                nameof(ReserveInventoryActivity),\n                new InventoryRequest(RequestId: orderId, order.Name, order.Quantity));\n            //...\n            \n            await context.CallActivityAsync(\n                nameof(ProcessPaymentActivity),\n                new PaymentRequest(RequestId: orderId, order.TotalCost, \"USD\"));\n\n            await context.CallActivityAsync(\n                nameof(NotifyActivity),\n                new Notification($\"Order {orderId} processed successfully!\"));\n\n            // End the workflow with a success result\n            return new OrderResult(Processed: true);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Workflow Runtime and Client in TypeScript\nDESCRIPTION: This code sets up the Dapr workflow runtime, registers workflow and activities, and schedules a new workflow. It also initializes the state store with inventory data and handles workflow completion.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DaprWorkflowClient, WorkflowRuntime, DaprClient, CommunicationProtocolEnum } from \"@dapr/dapr\";\nimport { InventoryItem, OrderPayload } from \"./model\";\nimport { notifyActivity, orderProcessingWorkflow, processPaymentActivity, requestApprovalActivity, verifyInventoryActivity as verifyInventoryActivity, updateInventoryActivity } from \"./orderProcessingWorkflow\";\n\nconst workflowWorker = new WorkflowRuntime();\n\nasync function start() {\n  // Update the gRPC client and worker to use a local address and port\n  const workflowClient = new DaprWorkflowClient();\n\n\n  const daprHost = process.env.DAPR_HOST ?? \"127.0.0.1\";\n  const daprPort = process.env.DAPR_GRPC_PORT ?? \"50001\";\n\n  const daprClient = new DaprClient({\n    daprHost,\n    daprPort,\n    communicationProtocol: CommunicationProtocolEnum.GRPC,\n  });\n\n  const storeName = \"statestore\";\n\n  const inventory = new InventoryItem(\"car\", 5000, 10);\n  const key = inventory.itemName;\n\n  await daprClient.state.save(storeName, [\n    {\n      key: key,\n      value: inventory,\n    }\n  ]);\n\n  const order = new OrderPayload(\"car\", 5000, 1);\n\n  workflowWorker\n  .registerWorkflow(orderProcessingWorkflow)\n  .registerActivity(notifyActivity)\n  .registerActivity(verifyInventoryActivity)\n  .registerActivity(requestApprovalActivity)\n  .registerActivity(processPaymentActivity)\n  .registerActivity(updateInventoryActivity);\n\n  // Wrap the worker startup in a try-catch block to handle any errors during startup\n  try {\n    await workflowWorker.start();\n    console.log(\"Workflow runtime started successfully\");\n  } catch (error) {\n    console.error(\"Error starting workflow runtime:\", error);\n  }\n\n  // Schedule a new orchestration\n  try {\n    const id = await workflowClient.scheduleNewWorkflow(orderProcessingWorkflow, order);\n    console.log(`Orchestration scheduled with ID: ${id}`);\n\n    // Wait for orchestration completion\n    const state = await workflowClient.waitForWorkflowCompletion(id, undefined, 30);\n\n    console.log(`Orchestration completed! Result: ${state?.serializedOutput}`);\n  } catch (error) {\n    console.error(\"Error scheduling or waiting for orchestration:\", error);\n    throw error;\n  }\n\n  await workflowClient.stop();\n}\n\nprocess.on('SIGTERM', () => {\n  workflowWorker.stop();\n})\n\nstart().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Runtime in JavaScript\nDESCRIPTION: This snippet shows how to configure the actor runtime in JavaScript using DaprClientOptions. It sets various timeout and interval parameters, enables features like draining rebalanced actors and reentrancy, and configures reminders storage partitions. The options are then used when creating DaprServer and DaprClient instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-runtime-config.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient, DaprServer } from \"@dapr/dapr\";\n\n// Configure the actor runtime with the DaprClientOptions.\nconst clientOptions = {\n  actor: {\n    actorIdleTimeout: \"1h\",\n    actorScanInterval: \"30s\",\n    drainOngoingCallTimeout: \"1m\",\n    drainRebalancedActors: true,\n    reentrancy: {\n      enabled: true,\n      maxStackDepth: 32,\n    },\n    remindersStoragePartitions: 0,\n  },\n};\n\n// Use the options when creating DaprServer and DaprClient.\n\n// Note, DaprServer creates a DaprClient internally, which needs to be configured with clientOptions.\nconst server = new DaprServer(serverHost, serverPort, daprHost, daprPort, clientOptions);\n\nconst client = new DaprClient(daprHost, daprPort, CommunicationProtocolEnum.HTTP, clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions in Go with Dapr SDK\nDESCRIPTION: Go implementation showing how to perform state transactions using the Dapr SDK. Includes examples of upsert and delete operations with state operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n// dependencies\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"time\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\n// code\nfunc main() {\n\tconst STATE_STORE_NAME = \"statestore\"\n\trand.Seed(time.Now().UnixMicro())\n\tfor i := 0; i < 10; i++ {\n\t\torderId := rand.Intn(1000-1) + 1\n\t\tclient, err := dapr.NewClient()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer client.Close()\n\t\tctx := context.Background()\n\t\terr = client.SaveState(ctx, STATE_STORE_NAME, \"order_1\", []byte(strconv.Itoa(orderId)), nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tresult, err := client.GetState(ctx, STATE_STORE_NAME, \"order_1\", nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n        ops := make([]*dapr.StateOperation, 0)\n        data1 := \"data1\"\n        data2 := \"data2\"\n\n        op1 := &dapr.StateOperation{\n            Type: dapr.StateOperationTypeUpsert,\n            Item: &dapr.SetStateItem{\n                Key:   \"key1\",\n                Value: []byte(data1),\n            },\n        }\n        op2 := &dapr.StateOperation{\n            Type: dapr.StateOperationTypeDelete,\n            Item: &dapr.SetStateItem{\n                Key:   \"key2\",\n                Value: []byte(data2),\n            },\n        }\n        ops = append(ops, op1, op2)\n        meta := map[string]string{}\n        err = client.ExecuteStateTransaction(ctx, STATE_STORE_NAME, meta, ops)\n\n\t\tlog.Println(\"Result after get:\", string(result.Value))\n\t\ttime.Sleep(2 * time.Second)\n\t}\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 go run OrderProcessingService.go\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Dapr\nDESCRIPTION: Docker Compose YAML configuration for running multiple Dapr applications with sidecars and required services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  nodeapp:\n    build: ./node\n    ports:\n      - \"50001:50001\"\n    depends_on:\n      - redis\n      - placement\n    networks:\n      - hello-dapr\n  nodeapp-dapr:\n    image: \"daprio/daprd:edge\"\n    command: [\n      \"./daprd\",\n     \"--app-id\", \"nodeapp\",\n     \"--app-port\", \"3000\",\n     \"--placement-host-address\", \"placement:50006\",\n     \"--scheduler-host-address\", \"scheduler:50007\",\n     \"--resources-path\", \"./components\"\n     ]\n    volumes:\n        - \"./components/:/components\"\n    depends_on:\n      - nodeapp\n    network_mode: \"service:nodeapp\"\n\n  placement:\n    image: \"daprio/placement\"\n    command: [\"./placement\", \"--port\", \"50006\"]\n    ports:\n      - \"50006:50006\"\n\n  scheduler:\n    image: \"daprio/scheduler\"\n    command: [\"./scheduler\", \"--port\", \"50007\", \"--etcd-data-dir\", \"/data\"]\n    ports:\n      - \"50007:50007\"\n    user: root\n    volumes:\n    - \"./dapr-etcd-data/:/data\"\n  \n  networks:\n    hello-dapr: null\n```\n\n----------------------------------------\n\nTITLE: State Management Operations in C#\nDESCRIPTION: C# code demonstrating how to perform state management operations (save, get, delete) using the Dapr client. Shows interaction with the Redis state store through Dapr's state management API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new DaprClientBuilder().Build();\n\n// Save state into the state store\nawait client.SaveStateAsync(DAPR_STORE_NAME, orderId.ToString(), order.ToString());\nConsole.WriteLine(\"Saving Order: \" + order);\n\n// Get state from the state store\nvar result = await client.GetStateAsync<string>(DAPR_STORE_NAME, orderId.ToString());\nConsole.WriteLine(\"Getting Order: \" + result);\n\n// Delete state from the state store\nawait client.DeleteStateAsync(DAPR_STORE_NAME, orderId.ToString());\nConsole.WriteLine(\"Deleting Order: \" + order);\n```\n\n----------------------------------------\n\nTITLE: Deleting State with Strong Consistency in Python using Dapr\nDESCRIPTION: Demonstrates state deletion with strong consistency in Dapr. Uses HTTP DELETE requests to remove state from the store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-stateful-service.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nstore_name = \"redis-store\" # name of the state store as specified in state store component yaml file\ndapr_state_url = \"http://localhost:3500/v1.0/state/{}\".format(store_name)\nresponse = requests.delete(dapr_state_url + \"/key1\", headers={\"consistency\":\"strong\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Pattern in C# Using Dapr Workflow\nDESCRIPTION: C# implementation of a status monitoring workflow that tracks entity health state, sends alerts when health changes, and adjusts the monitoring interval based on status. Uses ContinueAsNew to restart the workflow with updated state.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic override async Task<object> RunAsync(WorkflowContext context, MyEntityState myEntityState)\n{\n    TimeSpan nextSleepInterval;\n\n    var status = await context.CallActivityAsync<string>(\"GetStatus\");\n    if (status == \"healthy\")\n    {\n        myEntityState.IsHealthy = true;\n\n        // Check less frequently when in a healthy state\n        nextSleepInterval = TimeSpan.FromMinutes(60);\n    }\n    else\n    {\n        if (myEntityState.IsHealthy)\n        {\n            myEntityState.IsHealthy = false;\n            await context.CallActivityAsync(\"SendAlert\", myEntityState);\n        }\n\n        // Check more frequently when in an unhealthy state\n        nextSleepInterval = TimeSpan.FromMinutes(5);\n    }\n\n    // Put the workflow to sleep until the determined time\n    await context.CreateTimer(nextSleepInterval);\n\n    // Restart from the beginning with the updated state\n    context.ContinueAsNew(myEntityState);\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State TTL using HTTP API (PowerShell)\nDESCRIPTION: Demonstrates setting state TTL using direct HTTP API calls with Invoke-RestMethod in PowerShell. Configures a TTL of 120 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-store-ttl.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '[{\"key\": \"order_1\", \"value\": \"250\", \"metadata\": {\"ttlInSeconds\": \"120\"}}]' -Uri 'http://localhost:3601/v1.0/state/statestore'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Component for GCP Pub/Sub Emulator\nDESCRIPTION: Dapr component configuration for connecting to a local GCP Pub/Sub Emulator. The configuration includes the project ID that must match the emulator's project, a consumer ID, and the endpoint pointing to the local emulator instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-gcp-pubsub.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: gcp-pubsub\nspec:\n  type: pubsub.gcp.pubsub\n  version: v1\n  metadata:\n  - name: projectId\n    value: \"local-test-prj\"\n  - name: consumerID\n    value: \"testConsumer\"\n  - name: endpoint\n    value: \"localhost:8085\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Store Scopes in YAML\nDESCRIPTION: Example YAML configuration showing how to define secret scopes with allowed and denied secrets lists for different secret stores.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/secret-scope.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  scopes:\n    - storeName: kubernetes\n      defaultAccess: allow\n      allowedSecrets: [\"redis-password\"]\n    - storeName: localstore\n      defaultAccess: allow\n      deniedSecrets: [\"redis-password\"]\n```\n\n----------------------------------------\n\nTITLE: Order Processor Workflow Execution Logs\nDESCRIPTION: Detailed execution logs showing the workflow orchestration process including order notification, inventory verification, payment processing, and inventory updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: log\nCODE:\n```\n== APP - order-processor == Starting new orderProcessingWorkflow instance with ID = f5087775-779c-4e73-ac77-08edfcb375f4\n== APP - order-processor == Orchestration scheduled with ID: f5087775-779c-4e73-ac77-08edfcb375f4\n== APP - order-processor == Waiting 30 seconds for instance f5087775-779c-4e73-ac77-08edfcb375f4 to complete...\n[...]\n```\n\n----------------------------------------\n\nTITLE: Dapr API token HTTP header format\nDESCRIPTION: This shows the format of the HTTP header that Dapr includes when sending requests to an application with token authentication enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndapr-api-token: <token>\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State using HTTP API (PowerShell)\nDESCRIPTION: Shows state management using PowerShell's Invoke-RestMethod commands. Demonstrates how to interact with Dapr's HTTP API for state operations in Windows environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '[{\"key\": \"order_1\", \"value\": \"250\"}]' -Uri 'http://localhost:3601/v1.0/state/statestore'\n\nInvoke-RestMethod -Uri 'http://localhost:3601/v1.0/state/statestore/order_1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr Java SDK\nDESCRIPTION: Java example demonstrating how to get configuration items from a Dapr configuration store. It uses the DaprClient to retrieve multiple configuration items by their keys and prints them.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.domain.ConfigurationItem;\nimport io.dapr.client.domain.GetConfigurationRequest;\nimport io.dapr.client.domain.SubscribeConfigurationRequest;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n//code\nprivate static final String CONFIG_STORE_NAME = \"configstore\";\n\npublic static void main(String[] args) throws Exception {\n    try (DaprClient client = (new DaprClientBuilder()).build()) {\n      List<String> keys = new ArrayList<>();\n      keys.add(\"orderId1\");\n      keys.add(\"orderId2\");\n      GetConfigurationRequest req = new GetConfigurationRequest(CONFIG_STORE_NAME, keys);\n      try {\n        Mono<List<ConfigurationItem>> items = client.getConfiguration(req);\n        items.block().forEach(ConfigurationClient::print);\n      } catch (Exception ex) {\n        System.out.println(ex.getMessage());\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr Service Invocation Across Namespaces\nDESCRIPTION: Service invocation URL pattern for calling a service in a different namespace by qualifying the app ID with the namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/service-invocation-namespaces.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nlocalhost:3500/v1.0/invoke/nodeapp.production/method/neworder\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Applications with Custom Components\nDESCRIPTION: CLI commands for running Dapr applications with custom pub/sub components across different programming languages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- dotnet run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- mvn spring-boot:run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- python3 app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- go run app.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- npm start\n```\n\n----------------------------------------\n\nTITLE: Dapr Client Sample with Method Invocation\nDESCRIPTION: Python code example demonstrating how to use the Dapr client to invoke a method on another service. Shows the creation of a request payload, invoking the method, and handling the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport time\n\nfrom dapr.clients import DaprClient\n\n#SAMPLE\nwith DaprClient() as d:\n    req_data = {\n        'id': 1,\n        'message': 'hello world'\n    }\n\n    while True:\n        # Create a typed message with content type and body\n        resp = d.invoke_method(\n            'invoke-receiver',\n            'my-method',\n            data=json.dumps(req_data),\n        )\n\n        # Print the response\n        print(resp.content_type, flush=True)\n        print(resp.text(), flush=True)\n\n        time.sleep(2)\n#SAMPLE\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processor Subscriber in Java\nDESCRIPTION: This Java code snippet shows how to implement a subscriber for the 'orders' topic using the Dapr SDK. It defines a method to handle incoming order messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Topic(name = \"orders\", pubsubName = \"orderpubsub\")\n@PostMapping(path = \"/orders\")\npublic Mono<ResponseEntity> orders(@RequestBody CloudEvent<Order> cloudEvent) {\n    return Mono.fromSupplier(() -> {\n        try {\n            logger.info(\"Subscriber received: \" + cloudEvent.getData());\n            return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Job Operations for BB8 in Go\nDESCRIPTION: Demonstrates full job lifecycle for BB8 including scheduling, retrieving, and deleting the job with error handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Schedule BB-8 job\nerr = schedule(droidJobs[2])\nif err != nil {\n\tlog.Fatalln(\"Error scheduling job: \", err)\n}\n\n// Get BB-8 job\nresp, err = get(droidJobs[2])\nif err != nil {\n\tlog.Fatalln(\"Error retrieving job: \", err)\n}\nfmt.Println(\"Get job response: \", resp)\n\n// Delete BB-8 job\nerr = delete(droidJobs[2])\nif err != nil {\n\tlog.Fatalln(\"Error deleting job: \", err)\n}\nfmt.Println(\"Job deleted: \", droidJobs[2].Name)\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker Configuration in YAML for Dapr\nDESCRIPTION: YAML configuration for a circuit breaker policy named 'simpleCB' in Dapr, specifying max requests, timeout, and trip conditions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncircuitBreakers:\n  simpleCB:\n  maxRequests: 1\n  timeout: 5s \n  trip: consecutiveFailures >= 5\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in C#\nDESCRIPTION: Subscribes to configuration updates using the Dapr C# SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nSubscribeConfigurationResponse subscribe = await client.SubscribeConfiguration(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS);\n```\n\n----------------------------------------\n\nTITLE: Starting a Workflow HTTP Request\nDESCRIPTION: HTTP POST endpoint for starting a workflow instance with an optional instance ID. The request content is passed directly to the workflow as input.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<workflowName>/start[?instanceID=<instanceID>]\n```\n\n----------------------------------------\n\nTITLE: RSA String Decryption in Go\nDESCRIPTION: Shows the decryption process for an RSA encrypted string using Dapr's cryptography API. The code demonstrates reading the encrypted bytes and decrypting them back to the original message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n\t// Now, decrypt the encrypted data\n\tdecStream, err := client.Decrypt(context.Background(),\n\t\tbytes.NewReader(encBytes),\n\t\tdapr.DecryptOptions{\n\t\t\t// We just need to pass the name of the component\n\t\t\tComponentName: CryptoComponentName,\n\t\t\t// Passing the name of the key is optional\n\t\t\tKeyName: RSAKeyName,\n\t\t},\n\t)\n\n    // ...\n\n\t// The method returns a readable stream, which we read in full in memory\n\tdecBytes, err := io.ReadAll(decStream)\n\n    // ...\n\n\t// Print the message on the console\n\tfmt.Printf(\"Decrypted the message, got %d bytes\\n\", len(decBytes))\n\tfmt.Println(string(decBytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Application in Go with Dapr\nDESCRIPTION: This Go code demonstrates how to create a conversation application using Dapr's conversation client. It sends a prompt to the echo mock LLM component and prints the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tinput := dapr.ConversationInput{\n\t\tMessage: \"What is dapr?\",\n\t\t// Role:     nil, // Optional\n\t\t// ScrubPII: nil, // Optional\n\t}\n\n\tfmt.Println(\"Input sent:\", input.Message)\n\n\tvar conversationComponent = \"echo\"\n\n\trequest := dapr.NewConversationRequest(conversationComponent, []dapr.ConversationInput{input})\n\n\tresp, err := client.ConverseAlpha1(context.Background(), request)\n\tif err != nil {\n\t\tlog.Fatalf(\"err: %v\", err)\n\t}\n\n\tfmt.Println(\"Output response:\", resp.Outputs[0].Result)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Flask Input Binding Handler\nDESCRIPTION: Python Flask application code showing how to handle incoming Kafka events through Dapr bindings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/kafkaevent\", methods=['POST'])\ndef incoming():\n    print(\"Hello from Kafka!\", flush=True)\n\n    return \"Kafka Event Processed!\"\n```\n\n----------------------------------------\n\nTITLE: Job Management Functions Implementation in Go\nDESCRIPTION: Implementation of core job management functions (schedule, get, delete) using Dapr client to interact with the job service via gRPC.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Schedules a job by invoking grpc service from job-service passing a DroidJob as an argument\nfunc schedule(droidJob DroidJob) error {\n\tjobData, err := json.Marshal(droidJob)\n\tif err != nil {\n\t\tfmt.Println(\"Error marshalling job content\")\n\t\treturn err\n\t}\n\n\tcontent := &daprc.DataContent{\n\t\tContentType: \"application/json\",\n\t\tData:        []byte(jobData),\n\t}\n\n\t// Schedule Job\n\t_, err = app.daprClient.InvokeMethodWithContent(context.Background(), \"job-service\", \"scheduleJob\", \"POST\", content)\n\tif err != nil {\n\t\tfmt.Println(\"Error invoking method: \", err)\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// Gets a job by invoking grpc service from job-service passing a job name as an argument\nfunc get(droidJob DroidJob) (string, error) {\n\tcontent := &daprc.DataContent{\n\t\tContentType: \"text/plain\",\n\t\tData:        []byte(droidJob.Name),\n\t}\n\n\t//get job\n\tresp, err := app.daprClient.InvokeMethodWithContent(context.Background(), \"job-service\", \"getJob\", \"GET\", content)\n\tif err != nil {\n\t\tfmt.Println(\"Error invoking method: \", err)\n\t\treturn \"\", err\n\t}\n\n\treturn string(resp), nil\n}\n\n// Deletes a job by invoking grpc service from job-service passing a job name as an argument\nfunc delete(droidJob DroidJob) error {\n\tcontent := &daprc.DataContent{\n\t\tContentType: \"text/plain\",\n\t\tData:        []byte(droidJob.Name),\n\t}\n\n\t_, err := app.daprClient.InvokeMethodWithContent(context.Background(), \"job-service\", \"deleteJob\", \"DELETE\", content)\n\tif err != nil {\n\t\tfmt.Println(\"Error invoking method: \", err)\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Interacting with SmokeDetectorActor Instances in C#\nDESCRIPTION: This snippet demonstrates the creation of two SmokeDetectorActor instances, setting their initial state, and retrieving their state. It showcases the use of ActorProxy to interact with actor instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Actor Ids and types\nvar deviceId1 = \"1\";\nvar deviceId2 = \"2\";\nvar smokeDetectorActorType = \"SmokeDetectorActor\";\nvar controllerActorType = \"ControllerActor\";\n\nConsole.WriteLine(\"Startup up...\");\n\n// An ActorId uniquely identifies the first actor instance for the first device\nvar deviceActorId1 = new ActorId(deviceId1);\n\n// Create a new instance of the data class that will be stored in the first actor\nvar deviceData1 = new SmartDeviceData(){\n    Location = \"First Floor\",\n    Status = \"Ready\",\n};\n\n// Create the local proxy by using the same interface that the service implements.\nvar proxySmartDevice1 = ActorProxy.Create<ISmartDevice>(deviceActorId1, smokeDetectorActorType);\n\n// Now you can use the actor interface to call the actor's methods.\nConsole.WriteLine($\"Calling SetDataAsync on {smokeDetectorActorType}:{deviceActorId1}...\");\nvar setDataResponse1 = await proxySmartDevice1.SetDataAsync(deviceData1);\nConsole.WriteLine($\"Got response: {setDataResponse1}\");\n\nConsole.WriteLine($\"Calling GetDataAsync on {smokeDetectorActorType}:{deviceActorId1}...\");\nvar storedDeviceData1 = await proxySmartDevice1.GetDataAsync();\nConsole.WriteLine($\"Device 1 state: {storedDeviceData1}\");\n\n// Create a second actor for second device\nvar deviceActorId2 = new ActorId(deviceId2);\n\n// Create a new instance of the data class that will be stored in the first actor\nvar deviceData2 = new SmartDeviceData(){\n    Location = \"Second Floor\",\n    Status = \"Ready\",\n};\n\n// Create the local proxy by using the same interface that the service implements.\nvar proxySmartDevice2 = ActorProxy.Create<ISmartDevice>(deviceActorId2, smokeDetectorActorType);\n\n// Now you can use the actor interface to call the second actor's methods.\nConsole.WriteLine($\"Calling SetDataAsync on {smokeDetectorActorType}:{deviceActorId2}...\");\nvar setDataResponse2 = await proxySmartDevice2.SetDataAsync(deviceData2);\nConsole.WriteLine($\"Got response: {setDataResponse2}\");\n\nConsole.WriteLine($\"Calling GetDataAsync on {smokeDetectorActorType}:{deviceActorId2}...\");\nvar storedDeviceData2 = await proxySmartDevice2.GetDataAsync();\nConsole.WriteLine($\"Device 2 state: {storedDeviceData2}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB State Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up Azure Cosmos DB as a state store in Dapr. The component requires URL, master key, database name, and collection name. It can optionally be configured as an actor state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.azure.cosmosdb\n  version: v1\n  metadata:\n  - name: url\n    value: <REPLACE-WITH-URL>\n  - name: masterKey\n    value: <REPLACE-WITH-MASTER-KEY>\n  - name: database\n    value: <REPLACE-WITH-DATABASE>\n  - name: collection\n    value: <REPLACE-WITH-COLLECTION>\n  # Uncomment this if you wish to use Azure Cosmos DB as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Items in JavaScript\nDESCRIPTION: Retrieves configuration items from the Dapr configuration store using the JavaScript SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Get config items from the config store\n//...\nconst config = await client.configuration.get(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS);\nObject.keys(config.items).forEach((key) => {\n  console.log(\"Configuration for \" + key + \":\", JSON.stringify(config.items[key]));\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Service with Dapr in Python\nDESCRIPTION: Python code for the checkout service, demonstrating how to invoke another service using Dapr's service invocation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nheaders = {'dapr-app-id': 'order-processor'}\n\nresult = requests.post(\n    url='%s/orders' % (base_url),\n    data=json.dumps(order),\n    headers=headers\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA Scaler for Kafka\nDESCRIPTION: YAML configuration for KEDA ScaledObject to enable autoscaling based on Kafka topic lag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/autoscale-keda.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: subscriber-scaler\nspec:\n  scaleTargetRef:\n    name: <REPLACE-WITH-DAPR-DEPLOYMENT-NAME>\n  pollingInterval: 15\n  minReplicaCount: 0\n  maxReplicaCount: 10\n  triggers:\n  - type: kafka\n    metadata:\n      topic: demo-topic\n      bootstrapServers: kafka-cp-kafka.kafka.svc.cluster.local:9092\n      consumerGroup: autoscaling-subscriber\n      lagThreshold: \"5\"\n```\n\n----------------------------------------\n\nTITLE: Task Chaining in JavaScript\nDESCRIPTION: Demonstrates a Node.js implementation of task chaining using Dapr Workflows. Sets up a workflow runtime, registers workflow and activities, and handles workflow execution with proper error handling and cleanup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DaprWorkflowClient, WorkflowActivityContext, WorkflowContext, WorkflowRuntime, TWorkflow } from \"@dapr/dapr\";\n\nasync function start() {\n  const daprHost = \"localhost\";\n  const daprPort = \"50001\";\n  const workflowClient = new DaprWorkflowClient({\n    daprHost,\n    daprPort,\n  });\n  const workflowRuntime = new WorkflowRuntime({\n    daprHost,\n    daprPort,\n  });\n\n  const hello = async (_: WorkflowActivityContext, name: string) => {\n    return `Hello ${name}!`;\n  };\n\n  const sequence: TWorkflow = async function* (ctx: WorkflowContext): any {\n    const cities: string[] = [];\n\n    const result1 = yield ctx.callActivity(hello, \"Tokyo\");\n    cities.push(result1);\n    const result2 = yield ctx.callActivity(hello, \"Seattle\");\n    cities.push(result2);\n    const result3 = yield ctx.callActivity(hello, \"London\");\n    cities.push(result3);\n\n    return cities;\n  };\n\n  workflowRuntime.registerWorkflow(sequence).registerActivity(hello);\n\n  try {\n    await workflowRuntime.start();\n    console.log(\"Workflow runtime started successfully\");\n  } catch (error) {\n    console.error(\"Error starting workflow runtime:\", error);\n  }\n\n  try {\n    const id = await workflowClient.scheduleNewWorkflow(sequence);\n    console.log(`Orchestration scheduled with ID: ${id}`);\n    const state = await workflowClient.waitForWorkflowCompletion(id, undefined, 30);\n    console.log(`Orchestration completed! Result: ${state?.serializedOutput}`);\n  } catch (error) {\n    console.error(\"Error scheduling or waiting for orchestration:\", error);\n  }\n\n  await workflowRuntime.stop();\n  await workflowClient.stop();\n\n  process.exit(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWKS Component in Dapr's crypto.yaml\nDESCRIPTION: This YAML configuration demonstrates how to set up the JWKS component in Dapr. It includes examples of loading JWKS from a file, a URL, and directly in the configuration. The component supports automatic reloading for file-based JWKS and periodic refreshing for URL-based JWKS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-cryptography/json-web-key-sets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: jwks\nspec:\n  type: crypto.dapr.jwks\n  version: v1\n  metadata:\n    # Example 1: load JWKS from file\n    - name: \"jwks\"\n      value: \"fixtures/crypto/jwks/jwks.json\"\n    # Example 2: load JWKS from a HTTP(S) URL\n    # Only \"jwks\" is required\n    - name: \"jwks\"\n      value: \"https://example.com/.well-known/jwks.json\"\n    - name: \"requestTimeout\"\n      value: \"30s\"\n    - name: \"minRefreshInterval\"\n      value: \"10m\"\n    # Option 3: include the actual JWKS\n    - name: \"jwks\"\n      value: |\n        {\n          \"keys\": [\n            {\n              \"kty\": \"RSA\",\n              \"use\": \"sig\",\n              \"kid\": \"…\",\n              \"n\": \"…\",\n              \"e\": \"…\",\n              \"issuer\": \"https://example.com\"\n            }\n          ]\n        }\n    # Option 3b: include the JWKS base64-encoded\n    - name: \"jwks\"\n      value: |\n        eyJrZXlzIjpbeyJ…\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Pub/Sub Component in Dapr\nDESCRIPTION: This YAML configuration sets up a RabbitMQ pub/sub component in Dapr. It includes various optional settings such as connection details, queue properties, and message handling options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: rabbitmq-pubsub\nspec:\n  type: pubsub.rabbitmq\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"amqp://localhost:5672\"\n  - name: protocol\n    value: amqp  \n  - name: hostname\n    value: localhost \n  - name: username\n    value: username\n  - name: password\n    value: password  \n  - name: consumerID\n    value: channel1\n  - name: durable\n    value: false\n  - name: deletedWhenUnused\n    value: false\n  - name: autoAck\n    value: false\n  - name: deliveryMode\n    value: 0\n  - name: requeueInFailure\n    value: false\n  - name: prefetchCount\n    value: 0\n  - name: reconnectWait\n    value: 0\n  - name: concurrencyMode\n    value: parallel\n  - name: publisherConfirm\n    value: false\n  - name: enableDeadLetter # Optional enable dead Letter or not\n    value: true\n  - name: maxLen # Optional max message count in a queue\n    value: 3000\n  - name: maxLenBytes # Optional maximum length in bytes of a queue.\n    value: 10485760\n  - name: exchangeKind\n    value: fanout\n  - name: saslExternal\n    value: false\n  - name: ttlInSeconds\n    value: 60\n  - name: clientName\n    value: {podName}\n  - name: heartBeat\n    value: 10s\n```\n\n----------------------------------------\n\nTITLE: Dapr Control Plane mTLS Configuration\nDESCRIPTION: This YAML snippet shows how to configure mTLS (Mutual TLS) settings for the Dapr control plane in a Kubernetes environment. It sets up global mTLS parameters including enabling mTLS, allowed clock skew, and workload certificate TTL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: default\nspec:\n  mtls:\n    enabled: true\n    allowedClockSkew: 15m\n    workloadCertTTL: 24h\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions in Java with Dapr SDK\nDESCRIPTION: Example shows how to use DaprClient in Java to execute state transactions. Implements upsert and delete operations with random order IDs using Spring Boot.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.domain.State;\nimport io.dapr.client.domain.TransactionalStateOperation;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport reactor.core.publisher.Mono;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n\n\tprivate static final String STATE_STORE_NAME = \"statestore\";\n\n\tpublic static void main(String[] args) throws InterruptedException{\n\t\twhile(true) {\n\t\t\tTimeUnit.MILLISECONDS.sleep(5000);\n\t\t\tRandom random = new Random();\n\t\t\tint orderId = random.nextInt(1000-1) + 1;\n\t\t\tDaprClient client = new DaprClientBuilder().build();\n\t\t\tList<TransactionalStateOperation<?>> operationList = new ArrayList<>();\n\t\t\toperationList.add(new TransactionalStateOperation<>(TransactionalStateOperation.OperationType.UPSERT,\n\t\t\t\t\tnew State<>(\"order_3\", Integer.toString(orderId), \"\")));\n\t\t\toperationList.add(new TransactionalStateOperation<>(TransactionalStateOperation.OperationType.DELETE,\n\t\t\t\t\tnew State<>(\"order_2\")));\n            //Using Dapr SDK to perform the state transactions\n\t\t\tclient.executeStateTransaction(STATE_STORE_NAME, operationList).block();\n\t\t\tlog.info(\"Order requested: \" + orderId);\n\t\t}\n\t}\n\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 mvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Extending Component Initialization Timeout for Azure Cosmos DB\nDESCRIPTION: YAML configuration that shows how to extend the initialization timeout for the Azure Cosmos DB component. This helps avoid rate limiting issues during application startup by allowing more time for connections to be established.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  type: state.azure.cosmosdb\n  version: v1\n  initTimeout: 5m\n  metadata:\n```\n\n----------------------------------------\n\nTITLE: Cross-namespace Service Invocation in Go with Dapr\nDESCRIPTION: Go code example showing how to invoke a service in a different namespace using Dapr. This adds the namespace information to the app ID in the format 'appID.namespace'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", \"server.production\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific gRPC APIs in Dapr Configuration\nDESCRIPTION: This YAML configuration enables only the state v1 gRPC API and blocks all other gRPC APIs. It shows how to use an allowlist for gRPC in the Dapr Configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/api-allowlist.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  api:\n    allowed:\n      - name: state\n        version: v1\n        protocol: grpc\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to a Topic in Dapr\nDESCRIPTION: This snippet demonstrates how to publish a message to a topic using Dapr's HTTP API. It includes the endpoint structure and a curl example for sending a JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/pubsubName/deathStarStatus \\\n  -H \"Content-Type: application/json\" \\\n -d '{\n       \"status\": \"completed\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Defining StateStore gRPC Service Interface in Protocol Buffers\nDESCRIPTION: Proto definition for the StateStore service interface that defines core functionality for state store components. Includes methods for initialization, feature advertisement, health checks, CRUD operations, and bulk operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// StateStore service provides a gRPC interface for state store components.\nservice StateStore {\n  // Initializes the state store component with the given metadata.\n  rpc Init(InitRequest) returns (InitResponse) {}\n  // Returns a list of implemented state store features.\n  rpc Features(FeaturesRequest) returns (FeaturesResponse) {}\n  // Ping the state store. Used for liveness purposes.\n  rpc Ping(PingRequest) returns (PingResponse) {}\n  \n  // Deletes the specified key from the state store.\n  rpc Delete(DeleteRequest) returns (DeleteResponse) {}\n  // Get data from the given key.\n  rpc Get(GetRequest) returns (GetResponse) {}\n  // Sets the value of the specified key.\n  rpc Set(SetRequest) returns (SetResponse) {}\n\n\n  // Deletes many keys at once.\n  rpc BulkDelete(BulkDeleteRequest) returns (BulkDeleteResponse) {}\n  // Retrieves many keys at once.\n  rpc BulkGet(BulkGetRequest) returns (BulkGetResponse) {}\n  // Set the value of many keys at once.\n  rpc BulkSet(BulkSetRequest) returns (BulkSetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Workflows in Java\nDESCRIPTION: Java example demonstrating workflow management using DaprWorkflowClient including starting, getting state, raising events and managing workflow lifecycle.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage io.dapr.examples.workflows;\n\nimport io.dapr.workflows.client.DaprWorkflowClient;\nimport io.dapr.workflows.client.WorkflowInstanceStatus;\n\n// ...\npublic class DemoWorkflowClient {\n\n  // ...\n  public static void main(String[] args) throws InterruptedException {\n    DaprWorkflowClient client = new DaprWorkflowClient();\n\n    try (client) {\n      // Start a workflow\n      String instanceId = client.scheduleNewWorkflow(DemoWorkflow.class, \"input data\");\n      \n      // Get status information on the workflow\n      WorkflowInstanceStatus workflowMetadata = client.getInstanceState(instanceId, true);\n\n      // Wait or pause for the workflow instance start\n      try {\n        WorkflowInstanceStatus waitForInstanceStartResult =\n            client.waitForInstanceStart(instanceId, Duration.ofSeconds(60), true);\n      }\n\n      // Raise an event for the workflow; you can raise several events in parallel\n      client.raiseEvent(instanceId, \"TestEvent\", \"TestEventPayload\");\n      client.raiseEvent(instanceId, \"event1\", \"TestEvent 1 Payload\");\n      client.raiseEvent(instanceId, \"event2\", \"TestEvent 2 Payload\");\n      client.raiseEvent(instanceId, \"event3\", \"TestEvent 3 Payload\");\n\n      // Wait for workflow to complete running through tasks\n      try {\n        WorkflowInstanceStatus waitForInstanceCompletionResult =\n            client.waitForInstanceCompletion(instanceId, Duration.ofSeconds(60), true);\n      } \n\n      // Purge the workflow instance, removing all metadata associated with it\n      boolean purgeResult = client.purgeInstance(instanceId);\n\n      // Terminate the workflow instance\n      client.terminateWorkflow(instanceToTerminateId, null);\n\n    System.exit(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Workflow in Java with Dapr\nDESCRIPTION: This code defines the OrderProcessingWorkflow class which extends Dapr's Workflow class. It orchestrates a series of activities including inventory verification, payment processing, and order notification using Dapr workflow activities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npublic class OrderProcessingWorkflow extends Workflow {\n\n  @Override\n  public WorkflowStub create() {\n    return ctx -> {\n      Logger logger = ctx.getLogger();\n      String orderId = ctx.getInstanceId();\n      logger.info(\"Starting Workflow: \" + ctx.getName());\n      logger.info(\"Instance ID(order ID): \" + orderId);\n      logger.info(\"Current Orchestration Time: \" + ctx.getCurrentInstant());\n\n      OrderPayload order = ctx.getInput(OrderPayload.class);\n      logger.info(\"Received Order: \" + order.toString());\n      OrderResult orderResult = new OrderResult();\n      orderResult.setProcessed(false);\n\n      // Notify the user that an order has come through\n      Notification notification = new Notification();\n      notification.setMessage(\"Received Order: \" + order.toString());\n      ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n\n      // Determine if there is enough of the item available for purchase by checking\n      // the inventory\n      InventoryRequest inventoryRequest = new InventoryRequest();\n      inventoryRequest.setRequestId(orderId);\n      inventoryRequest.setItemName(order.getItemName());\n      inventoryRequest.setQuantity(order.getQuantity());\n      InventoryResult inventoryResult = ctx.callActivity(VerifyInventoryActivity.class.getName(),\n          inventoryRequest, InventoryResult.class).await();\n\n      // If there is insufficient inventory, fail and let the user know\n      if (!inventoryResult.isSuccess()) {\n        notification.setMessage(\"Insufficient inventory for order : \" + order.getItemName());\n        ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n        ctx.complete(orderResult);\n        return;\n      }\n\n      // Require orders over a certain threshold to be approved\n      if (order.getTotalCost() > 5000) {\n        ctx.callActivity(RequestApprovalActivity.class.getName(), order).await();\n\n        ApprovalResponse approvalResponse = ctx.waitForExternalEvent(\"approvalEvent\",\n          Duration.ofSeconds(30), ApprovalResponse.class).await();\n        if (!approvalResponse.isApproved()) {\n          notification.setMessage(\"Order \" + order.getItemName() + \" was not approved.\");\n          ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n          ctx.complete(orderResult);\n          return;\n        }\n      }\n\n      // There is enough inventory available so the user can purchase the item(s).\n      // Process their payment\n      PaymentRequest paymentRequest = new PaymentRequest();\n      paymentRequest.setRequestId(orderId);\n      paymentRequest.setItemBeingPurchased(order.getItemName());\n      paymentRequest.setQuantity(order.getQuantity());\n      paymentRequest.setAmount(order.getTotalCost());\n      boolean isOK = ctx.callActivity(ProcessPaymentActivity.class.getName(),\n          paymentRequest, boolean.class).await();\n      if (!isOK) {\n        notification.setMessage(\"Payment failed for order : \" + orderId);\n        ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n        ctx.complete(orderResult);\n        return;\n      }\n\n      inventoryResult = ctx.callActivity(UpdateInventoryActivity.class.getName(),\n          inventoryRequest, InventoryResult.class).await();\n      if (!inventoryResult.isSuccess()) {\n        // If there is an error updating the inventory, refund the user\n        // paymentRequest.setAmount(-1 * paymentRequest.getAmount());\n        // ctx.callActivity(ProcessPaymentActivity.class.getName(),\n        // paymentRequest).await();\n\n        // Let users know their payment processing failed\n        notification.setMessage(\"Order failed to update inventory! : \" + orderId);\n        ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n        ctx.complete(orderResult);\n        return;\n      }\n\n      // Let user know their order was processed\n      notification.setMessage(\"Order completed! : \" + orderId);\n      ctx.callActivity(NotifyActivity.class.getName(), notification).await();\n\n      // Complete the workflow with order result is processed\n      orderResult.setProcessed(true);\n      ctx.complete(orderResult);\n    };\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudEvents Using HTTP API in Bash\nDESCRIPTION: Curl command example demonstrating how to publish a custom CloudEvent to the 'orders' topic using Dapr's HTTP API. The content type is set to 'application/cloudevents+json' to indicate a custom CloudEvent.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3601/v1.0/publish/order-pub-sub/orders -H \"Content-Type: application/cloudevents+json\" -d '{\"specversion\" : \"1.0\", \"type\" : \"com.dapr.cloudevent.sent\", \"source\" : \"testcloudeventspubsub\", \"subject\" : \"Cloud Events Test\", \"id\" : \"someCloudEventId\", \"time\" : \"2021-08-02T09:00:00Z\", \"datacontenttype\" : \"application/cloudevents+json\", \"data\" : {\"orderId\": \"100\"}}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Dapr State Store Component in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of a Dapr Component file for configuring a state store. It includes fields for specifying the API version, component kind, metadata, state store type, and version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-state-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.<DATABASE>\n  version: v1\n  metadata:\n  - name: <KEY>\n    value: <VALUE>\n  - name: <KEY>\n    value: <VALUE>\n...\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data in .NET with Dapr\nDESCRIPTION: This snippet demonstrates how to encrypt string data using the Dapr .NET SDK with gRPC APIs. It converts a string to a UTF-8 byte array and then encrypts it using the specified cryptography component and key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var client = new DaprClientBuilder().Build();\n\nconst string componentName = \"azurekeyvault\"; //Change this to match your cryptography component\nconst string keyName = \"myKey\"; //Change this to match the name of the key in your cryptographic store\n\nconst string plainText = \"This is the value we're going to encrypt today\";\n\n//Encode the string to a UTF-8 byte array and encrypt it\nvar plainTextBytes = Encoding.UTF8.GetBytes(plainText);\nvar encryptedBytesResult = await client.EncryptAsync(componentName, plaintextBytes, keyName, new EncryptionOptions(KeyWrapAlgorithm.Rsa));\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Topic with Streaming Subscription in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure a dead letter topic named 'poisonMessages' for messages consumed from the 'orders' topic using Dapr's streaming subscription method.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-deadletter.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar deadLetterTopic = \"poisonMessages\"\nsub, err := cl.Subscribe(context.Background(), client.SubscriptionOptions{\n\tPubsubName:      \"pubsub\",\n\tTopic:           \"orders\",\n\tDeadLetterTopic: &deadLetterTopic,\n})\n```\n\n----------------------------------------\n\nTITLE: Python Publisher Implementation with Dapr\nDESCRIPTION: Publisher implementation using Dapr client to publish order events to the 'orders' topic on Redis pubsub.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith DaprClient() as client:\n    result = client.publish_event(\n        pubsub_name='orderpubsub',\n        topic_name='orders',\n        data=json.dumps(order),\n        data_content_type='application/json',\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining App-Specific Resiliency Targets in YAML\nDESCRIPTION: YAML configuration for targeting the order-processor service with specific retry and circuit breaker policies. This configuration applies resiliency patterns to service invocations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Programmatic Subscription in JavaScript\nDESCRIPTION: This Express.js application implements programmatic subscription for CloudEvents with content-based routing. It routes events from the 'inventory' topic to different endpoints based on the event type, with a default path for unmatched events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst app = express()\napp.use(bodyParser.json({ type: 'application/*+json' }));\n\nconst port = 3000\n\napp.get('/dapr/subscribe', (req, res) => {\n  res.json([\n    {\n      pubsubname: \"pubsub\",\n      topic: \"inventory\",\n      routes: {\n        rules: [\n          {\n            match: 'event.type == \"widget\"',\n            path: '/widgets'\n          },\n          {\n            match: 'event.type == \"gadget\"',\n            path: '/gadgets'\n          },\n        ],\n        default: '/products'\n      }\n    }\n  ]);\n})\n\napp.post('/products', (req, res) => {\n  console.log(req.body);\n  res.sendStatus(200);\n});\n\napp.listen(port, () => console.log(`consumer app listening on port ${port}!`))\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in .NET\nDESCRIPTION: This C# code creates a Dapr client and publishes order events to the 'orders' topic on the 'orderpubsub' component. The code publishes order data and logs the published information to the console.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\nusing var client = new DaprClientBuilder().Build();\nawait client.PublishEventAsync(\"orderpubsub\", \"orders\", order);\nConsole.WriteLine(\"Published data: \" + order);\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Order Workflow in TypeScript/JavaScript\nDESCRIPTION: TypeScript/JavaScript implementation of a purchase order workflow with human approval system. Includes workflow client setup, activity registration, and interactive approval handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Task,\n  DaprWorkflowClient,\n  WorkflowActivityContext,\n  WorkflowContext,\n  WorkflowRuntime,\n  TWorkflow,\n} from \"@dapr/dapr\";\nimport * as readlineSync from \"readline-sync\";\n\n// Wrap the entire code in an immediately-invoked async function\nasync function start() {\n  class Order {\n    cost: number;\n    product: string;\n    quantity: number;\n    constructor(cost: number, product: string, quantity: number) {\n      this.cost = cost;\n      this.product = product;\n      this.quantity = quantity;\n    }\n  }\n\n  function sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  // Update the gRPC client and worker to use a local address and port\n  const daprHost = \"localhost\";\n  const daprPort = \"50001\";\n  const workflowClient = new DaprWorkflowClient({\n    daprHost,\n    daprPort,\n  });\n  const workflowRuntime = new WorkflowRuntime({\n    daprHost,\n    daprPort,\n  });\n\n  // Activity function that sends an approval request to the manager\n  const sendApprovalRequest = async (_: WorkflowActivityContext, order: Order) => {\n    // Simulate some work that takes an amount of time\n    await sleep(3000);\n    console.log(`Sending approval request for order: ${order.product}`);\n  };\n\n  // Activity function that places an order\n  const placeOrder = async (_: WorkflowActivityContext, order: Order) => {\n    console.log(`Placing order: ${order.product}`);\n  };\n\n  // Orchestrator function that represents a purchase order workflow\n  const purchaseOrderWorkflow: TWorkflow = async function* (ctx: WorkflowContext, order: Order): any {\n    // Orders under $1000 are auto-approved\n    if (order.cost < 1000) {\n      return \"Auto-approved\";\n    }\n\n    // Orders of $1000 or more require manager approval\n    yield ctx.callActivity(sendApprovalRequest, order);\n\n    // Approvals must be received within 24 hours or they will be cancled.\n    const tasks: Task<any>[] = [];\n    const approvalEvent = ctx.waitForExternalEvent(\"approval_received\");\n    const timeoutEvent = ctx.createTimer(24 * 60 * 60);\n    tasks.push(approvalEvent);\n    tasks.push(timeoutEvent);\n    const winner = ctx.whenAny(tasks);\n\n    if (winner == timeoutEvent) {\n      return \"Cancelled\";\n    }\n\n    yield ctx.callActivity(placeOrder, order);\n    const approvalDetails = approvalEvent.getResult();\n    return `Approved by ${approvalDetails.approver}`;\n  };\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in Python using Dapr SDK\nDESCRIPTION: This Python code demonstrates how to subscribe to the 'orders' topic using the Dapr SDK. It uses the App class from dapr.ext.grpc and defines a function decorated with @app.subscribe to handle incoming messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nfrom cloudevents.sdk.event import v1\nfrom dapr.ext.grpc import App\nimport logging\nimport json\n\n#code\napp = App()\nlogging.basicConfig(level = logging.INFO)\n#Subscribe to a topic \n@app.subscribe(pubsub_name='order-pub-sub', topic='orders')\ndef mytopic(event: v1.Event) -> None:\n    data = json.loads(event.Data())\n    logging.info('Subscriber received: ' + str(data))\n\napp.run(6002)\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Items in C#\nDESCRIPTION: Retrieves configuration items from the Dapr configuration store using the C# SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nGetConfigurationResponse config = await client.GetConfiguration(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS);\nforeach (var item in config.Items)\n{\n  var cfg = System.Text.Json.JsonSerializer.Serialize(item.Value);\n  Console.WriteLine(\"Configuration for \" + item.Key + \": \" + cfg);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Event with Dapr Client in Java\nDESCRIPTION: Demonstrates publishing an event 'My Message' to a topic named 'TopicName' using DaprClient. The event is serialized to byte[] before sending to the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  DaprClient client = (new DaprClientBuilder()).build();\n  client.publishEvent(\"TopicName\", \"My Message\").block();\n```\n\n----------------------------------------\n\nTITLE: Implementing Guest Config Handler in TinyGo\nDESCRIPTION: Example implementation showing how to handle guest configuration in Wasm middleware using TinyGo. Demonstrates JSON config parsing and logging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-wasm.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"github.com/http-wasm/http-wasm-guest-tinygo/handler\"\n\t\"github.com/http-wasm/http-wasm-guest-tinygo/handler/api\"\n)\n\ntype Config struct {\n\tEnvironment string `json:\"environment\"`\n}\n\nfunc main() {\n\t// get config bytes, which is the value of guestConfig defined in the component.\n\tconfigBytes := handler.Host.GetConfig()\n\t\n\tconfig := Config{}\n\tjson.Unmarshal(configBytes, &config)\n\thandler.Host.Log(api.LogLevelInfo, \"Config environment: \"+config.Environment)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-based Streaming Subscriptions in Go\nDESCRIPTION: Example of implementing pull-based streaming subscriptions in Go using the Dapr client. Shows message processing with proper error handling and cleanup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n\tcl, err := client.NewClient()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tsub, err := cl.Subscribe(context.Background(), client.SubscriptionOptions{\n\t\tPubsubName: \"pubsub\",\n\t\tTopic:      \"orders\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Close must always be called.\n\tdefer sub.Close()\n\n\tfor {\n\t\tmsg, err := sub.Receive()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\t// Process the event\n\n\t\t// We _MUST_ always signal the result of processing the message, else the\n\t\t// message will not be considered as processed and will be redelivered or\n\t\t// dead lettered.\n\t\t// msg.Retry()\n\t\t// msg.Drop()\n\t\tif err := msg.Success(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with Go in Dapr\nDESCRIPTION: This Go example shows how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses the Dapr Go SDK to execute a state transaction with two operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nops := make([]*dapr.StateOperation, 0)\n\nop1 := &dapr.StateOperation{\n    Type: dapr.StateOperationTypeUpsert,\n    Item: &dapr.SetStateItem{\n        Key:   \"key1\",\n        Value: []byte(\"2\"),\n    },\n}\nop2 := &dapr.StateOperation{\n    Type: dapr.StateOperationTypeUpsert,\n    Item: &dapr.SetStateItem{\n        Key:   \"key1\",\n\t\t\t\tValue: []byte(\"3\"),\n         // Override the data payload saved to the database \n\t\t\t\tMetadata: map[string]string{\n\t\t\t\t\t\"outbox.projection\": \"true\",\n        },\n    },\n}\nops = append(ops, op1, op2)\nmeta := map[string]string{}\nerr := testClient.ExecuteStateTransaction(ctx, store, meta, ops)\n```\n\n----------------------------------------\n\nTITLE: Invoking Services with Dapr in Go\nDESCRIPTION: This snippet shows how to invoke a service using Dapr's service invocation feature in the 'checkout' service. It adds the 'dapr-app-id' header to specify the target service for invocation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nreq.Header.Add(\"dapr-app-id\", \"order-processor\")\n\nresponse, err := client.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Python Order Processor Subscriber Implementation\nDESCRIPTION: Subscriber service implementation in Python that processes order events from a pub/sub topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [{\n        'pubsubname': 'orderpubsub',\n        'topic': 'orders',\n        'route': 'orders'\n    }]\n    print('Dapr pub/sub is subscribed to: ' + json.dumps(subscriptions))\n    return jsonify(subscriptions)\n\n@app.route('/orders', methods=['POST'])\ndef orders_subscriber():\n    event = from_http(request.headers, request.get_data())\n    print('Subscriber received : ' + event.data['orderid'], flush=True)\n    return json.dumps({'success': True}), 200, {\n        'ContentType': 'application/json'}\n\napp.run(port=5001)\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State using HTTP API (Bash)\nDESCRIPTION: Demonstrates state management using direct HTTP API calls with curl commands in Bash. Shows how to save and retrieve state without using an SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"order_1\", \"value\": \"250\"}]' http://localhost:3601/v1.0/state/statestore\n\ncurl http://localhost:3601/v1.0/state/statestore/order_1\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Java with Dapr\nDESCRIPTION: This snippet demonstrates how to subscribe to configuration updates using the Dapr Java SDK. It creates a Dapr client, subscribes to specific configuration keys, and handles updates for 20 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.domain.ConfigurationItem;\nimport io.dapr.client.domain.GetConfigurationRequest;\nimport io.dapr.client.domain.SubscribeConfigurationRequest;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n//code\nprivate static final String CONFIG_STORE_NAME = \"configstore\";\nprivate static String subscriptionId = null;\n\npublic static void main(String[] args) throws Exception {\n    try (DaprClient client = (new DaprClientBuilder()).build()) {\n      // Subscribe for config changes\n      List<String> keys = new ArrayList<>();\n      keys.add(\"orderId1\");\n      keys.add(\"orderId2\");\n      Flux<SubscribeConfigurationResponse> subscription = client.subscribeConfiguration(DAPR_CONFIGURATON_STORE,keys);\n\n      // Read config changes for 20 seconds\n      subscription.subscribe((response) -> {\n          // First ever response contains the subscription id\n          if (response.getItems() == null || response.getItems().isEmpty()) {\n              subscriptionId = response.getSubscriptionId();\n              System.out.println(\"App subscribed to config changes with subscription id: \" + subscriptionId);\n          } else {\n              response.getItems().forEach((k, v) -> {\n                  System.out.println(\"Configuration update for \" + k + \": {'value':'\" + v.getValue() + \"'}\");\n              });\n          }\n      });\n      Thread.sleep(20000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Query Indexes for Redis State Store\nDESCRIPTION: Example of specifying query indexes in the metadata of the Redis state store component configuration. This enables JSON object querying capabilities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"<indexing name>\",\n    \"indexes\": [\n      {\n        \"key\": \"<JSONPath-like syntax for selected element inside documents>\",\n        \"type\": \"<value type (supported types: TEXT, NUMERIC)>\",\n      },\n      ...\n    ]\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Service Invocation in JavaScript with Dapr\nDESCRIPTION: JavaScript implementation using axios for HTTP requests to invoke services. Features async/await pattern and random order generation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport axios from \"axios\";\n\n//code\nconst daprHost = \"127.0.0.1\"; \n\nvar main = function() {\n    for(var i=0;i<10;i++) {\n        sleep(5000);\n        var orderId = Math.floor(Math.random() * (1000 - 1) + 1);\n        start(orderId).catch((e) => {\n            console.error(e);\n            process.exit(1);\n        });\n    }\n}\n\n    //Invoke a service\n    const result = await axios.post('order-processor' , \"orders/\" + orderId , axiosConfig);\n    console.log(\"Order requested: \" + orderId);\n    console.log(\"Result: \" + result.config.data);\n\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages in TypeScript with Dapr\nDESCRIPTION: This TypeScript example shows two methods for bulk publishing messages: first with simple string messages, and second with explicit bulk publish messages containing different content types including JSON and CloudEvents.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DaprClient } from \"@dapr/dapr\";\n\nconst pubSubName = \"my-pubsub-name\";\nconst topic = \"topic-a\";\n\nasync function start() {\n    const client = new DaprClient();\n\n    // Publish multiple messages to a topic.\n    await client.pubsub.publishBulk(pubSubName, topic, [\"message 1\", \"message 2\", \"message 3\"]);\n\n    // Publish multiple messages to a topic with explicit bulk publish messages.\n    const bulkPublishMessages = [\n    {\n      entryID: \"entry-1\",\n      contentType: \"application/json\",\n      event: { hello: \"foo message 1\" },\n    },\n    {\n      entryID: \"entry-2\",\n      contentType: \"application/cloudevents+json\",\n      event: {\n        specversion: \"1.0\",\n        source: \"/some/source\",\n        type: \"example\",\n        id: \"1234\",\n        data: \"foo message 2\",\n        datacontenttype: \"text/plain\"\n      },\n    },\n    {\n      entryID: \"entry-3\",\n      contentType: \"text/plain\",\n      event: \"foo message 3\",\n    },\n  ];\n  await client.pubsub.publishBulk(pubSubName, topic, bulkPublishMessages);\n}\n\nstart().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with JavaScript in Dapr\nDESCRIPTION: This JavaScript example shows how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses the DaprClient to execute a state transaction with two operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DaprClient, StateOperationType } = require('@dapr/dapr');\n\nconst DAPR_STORE_NAME = \"statestore\";\n\nasync function main() {\n  const client = new DaprClient();\n\n  // Define the first state operation to save the value \"2\"\n  const op1 = {\n    operation: StateOperationType.UPSERT,\n    request: {\n      key: \"key1\",\n      value: \"2\"\n    }\n  };\n\n  // Define the second state operation to publish the value \"3\" with metadata\n  const op2 = {\n    operation: StateOperationType.UPSERT,\n    request: {\n      key: \"key1\",\n      value: \"3\",\n      metadata: {\n        \"outbox.projection\": \"true\"\n      }\n    }\n  };\n\n  // Create the list of state operations\n  const ops = [op1, op2];\n\n  // Execute the state transaction\n  await client.state.transaction(DAPR_STORE_NAME, ops);\n  console.log(\"State transaction executed.\");\n}\n\nmain().catch(err => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Method with ActorProxyBuilder in Java\nDESCRIPTION: Demonstrates how to invoke an Actor's method named 'say' with a message 'My Message' using ActorProxyBuilder. The invocation is done transparently by the SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void main() {\n    ActorProxyBuilder builder = new ActorProxyBuilder(\"DemoActor\");\n    String result = actor.invokeActorMethod(\"say\", \"My Message\", String.class).block();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis State Store Component in statestore.yaml\nDESCRIPTION: Dapr component configuration for Redis state store. This YAML file defines the Redis state store connection parameters and is referenced by applications via the component name 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Basic Retry Policy Configuration in YAML\nDESCRIPTION: Demonstrates how to configure basic retry policies with constant and exponential backoff strategies. Includes examples for infinite retries and fixed retry intervals.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/retries/retries-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    retries:\n      pubsubRetry:\n        policy: constant\n        duration: 5s\n        maxRetries: 10\n\n      retryForever:\n        policy: exponential\n        maxInterval: 15s\n        maxRetries: -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Component in YAML\nDESCRIPTION: Defines a Dapr component that implements rate limiting with a maximum of 10 requests per second. This component configuration specifies the middleware type and version along with the rate limit threshold.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-rate-limit.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: ratelimit\nspec:\n  type: middleware.http.ratelimit\n  version: v1\n  metadata:\n  - name: maxRequestsPerSecond\n    value: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra State Store Component in Dapr using YAML\nDESCRIPTION: YAML configuration for setting up a Cassandra state store component in Dapr. This includes required fields like hosts and optional fields for authentication, consistency levels, table name, keyspace, protocol version, and replication factor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cassandra.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.cassandra\n  version: v1\n  metadata:\n  - name: hosts\n    value: <REPLACE-WITH-COMMA-DELIMITED-HOSTS> # Required. Example: cassandra.cassandra.svc.cluster.local\n  - name: username\n    value: <REPLACE-WITH-PASSWORD> # Optional. default: \"\"\n  - name: password\n    value: <REPLACE-WITH-PASSWORD> # Optional. default: \"\"\n  - name: consistency\n    value: <REPLACE-WITH-CONSISTENCY> # Optional. default: \"All\"\n  - name: table\n    value: <REPLACE-WITH-TABLE> # Optional. default: \"items\"\n  - name: keyspace\n    value: <REPLACE-WITH-KEYSPACE> # Optional. default: \"dapr\"\n  - name: protoVersion\n    value: <REPLACE-WITH-PROTO-VERSION> # Optional. default: \"4\"\n  - name: replicationFactor\n    value: <REPLACE-WITH-REPLICATION-FACTOR> #  Optional. default: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resiliency Policies for Actor Targets in Dapr\nDESCRIPTION: Example YAML configuration demonstrating how to apply timeout, retry, and circuit breaker policies to actor operations. This includes specifying circuit breaker scoping (by id, type, or both) and cache size for the actor type \"myActorType\".\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/targets.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  targets:\n    actors:\n      myActorType:\n        timeout: general\n        retry: general\n        circuitBreaker: general\n        circuitBreakerScope: both\n        circuitBreakerCacheSize: 5000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets with .NET Dapr SDK\nDESCRIPTION: C# implementation showing secret retrieval using the Dapr .NET SDK. Uses DaprClient to fetch secrets from a configured secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nconst string DAPR_SECRET_STORE = \"localsecretstore\";\nconst string SECRET_NAME = \"secret\";\nvar client = new DaprClientBuilder().Build();\n\nvar secret = await client.GetSecretAsync(DAPR_SECRET_STORE, SECRET_NAME);\nvar secretValue = string.Join(\", \", secret);\nConsole.WriteLine($\"Fetched Secret: {secretValue}\");\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State in Java\nDESCRIPTION: Shows state management using the Dapr Java SDK with Spring Boot. Implements a loop that generates random order IDs, saves them to state store, and retrieves them using reactive programming patterns.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n\n\tprivate static final String STATE_STORE_NAME = \"statestore\";\n\n\tpublic static void main(String[] args) throws InterruptedException{\n\t\twhile(true) {\n\t\t\tTimeUnit.MILLISECONDS.sleep(5000);\n\t\t\tRandom random = new Random();\n\t\t\tint orderId = random.nextInt(1000-1) + 1;\n\t\t\tDaprClient client = new DaprClientBuilder().build();\n            //Using Dapr SDK to save and get state\n\t\t\tclient.saveState(STATE_STORE_NAME, \"order_1\", Integer.toString(orderId)).block();\n\t\t\tclient.saveState(STATE_STORE_NAME, \"order_2\", Integer.toString(orderId)).block();\n\t\t\tMono<State<String>> result = client.getState(STATE_STORE_NAME, \"order_1\", String.class);\n\t\t\tlog.info(\"Result after get\" + result);\n\t\t}\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr WorkflowRuntime in JavaScript\nDESCRIPTION: Shows the implementation of a WorkflowRuntime class that handles workflow and activity registration. Includes methods for registering workflows, activities, and starting the runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class WorkflowRuntime {\n\n  //...\n  // Register workflow implementation for handling orchestrations\n  public registerWorkflow(workflow: TWorkflow): WorkflowRuntime {\n    const name = getFunctionName(workflow);\n    const workflowWrapper = (ctx: OrchestrationContext, input: any): any => {\n      const workflowContext = new WorkflowContext(ctx);\n      return workflow(workflowContext, input);\n    };\n    this.worker.addNamedOrchestrator(name, workflowWrapper);\n    return this;\n  }\n\n  // Register workflow activities\n  public registerActivity(fn: TWorkflowActivity<TInput, TOutput>): WorkflowRuntime {\n    const name = getFunctionName(fn);\n    const activityWrapper = (ctx: ActivityContext, intput: TInput): TOutput => {\n      const wfActivityContext = new WorkflowActivityContext(ctx);\n      return fn(wfActivityContext, intput);\n    };\n    this.worker.addNamedActivity(name, activityWrapper);\n    return this;\n  }\n\n  // Start the workflow runtime processing items and block.\n  public async start() {\n    await this.worker.start();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Workflows in C#\nDESCRIPTION: C# example showing workflow management operations using DaprWorkflowClient including starting, terminating, raising events, and managing workflow state.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstring orderId = \"exampleOrderId\";\nOrderPayload input = new OrderPayload(\"Paperclips\", 99.95);\nDictionary<string, string> workflowOptions; // This is an optional parameter\n\n// Start the workflow using the orderId as our workflow ID. This returns a string containing the instance ID for the particular workflow instance, whether we provide it ourselves or not.\nawait daprWorkflowClient.ScheduleNewWorkflowAsync(nameof(OrderProcessingWorkflow), orderId, input, workflowOptions);\n\n// Get information on the workflow. This response contains information such as the status of the workflow, when it started, and more!\nWorkflowState currentState = await daprWorkflowClient.GetWorkflowStateAsync(orderId, orderId);\n\n// Terminate the workflow\nawait daprWorkflowClient.TerminateWorkflowAsync(orderId);\n\n// Raise an event (an incoming purchase order) that your workflow will wait for\nawait daprWorkflowClient.RaiseEventAsync(orderId, \"incoming-purchase-order\", input);\n\n// Pause\nawait daprWorkflowClient.SuspendWorkflowAsync(orderId);\n\n// Resume\nawait daprWorkflowClient.ResumeWorkflowAsync(orderId);\n\n// Purge the workflow, removing all inbox and history information from associated instance\nawait daprWorkflowClient.PurgeInstanceAsync(orderId);\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding via HTTP\nDESCRIPTION: This curl command demonstrates how to invoke the output binding endpoint using HTTP. It sends a POST request to the 'checkout' binding with a JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:3601/v1.0/bindings/checkout -d '{ \"data\": 100, \"operation\": \"create\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Java gRPC Client for Streaming with Dapr\nDESCRIPTION: Java code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nMetadata headers = new Metadata();\nMetadata.Key<String> jwtKey = Metadata.Key.of(\"dapr-app-id\", \"server\");\nMetadata.Key<String> jwtKey = Metadata.Key.of(\"dapr-stream\", \"true\");\n```\n\n----------------------------------------\n\nTITLE: Denying Access to Sensitive Secrets\nDESCRIPTION: Configuration to deny access to specific sensitive secrets while allowing access to all other secrets in a Vault secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/secret-scope.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: vault\n        defaultAccess: allow\n        deniedSecrets: [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding in Python\nDESCRIPTION: This Python code uses the Dapr SDK to invoke an output binding. It creates a DaprClient and sends messages to the 'checkout' binding at random intervals between 50ms and 5s.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nimport random\nfrom time import sleep    \nimport requests\nimport logging\nimport json\nfrom dapr.clients import DaprClient\n\n#code\nlogging.basicConfig(level = logging.INFO)\nBINDING_NAME = 'checkout'\nBINDING_OPERATION = 'create' \nwhile True:\n    sleep(random.randrange(50, 5000) / 1000)\n    orderId = random.randint(1, 1000)\n    with DaprClient() as client:\n        #Using Dapr SDK to invoke output binding\n        resp = client.invoke_binding(BINDING_NAME, BINDING_OPERATION, json.dumps(orderId))\n    logging.basicConfig(level = logging.INFO)\n    logging.info('Sending message: ' + str(orderId))\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data in JavaScript with Dapr\nDESCRIPTION: This snippet shows how to encrypt data using the Dapr JavaScript SDK. It provides two approaches: encrypting a buffer/string directly and encrypting data from a stream to support efficient file encryption.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/cryptography/howto-cryptography.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// When passing data (a buffer or string), `encrypt` returns a Buffer with the encrypted message\nconst ciphertext = await client.crypto.encrypt(plaintext, {\n    // Name of the Dapr component (required)\n    componentName: \"mycryptocomponent\",\n    // Name of the key stored in the component (required)\n    keyName: \"mykey\",\n    // Algorithm used for wrapping the key, which must be supported by the key named above.\n    // Options include: \"RSA\", \"AES\"\n    keyWrapAlgorithm: \"RSA\",\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// `encrypt` can be used as a Duplex stream\nawait pipeline(\n    fs.createReadStream(\"plaintext.txt\"),\n    await client.crypto.encrypt({\n        // Name of the Dapr component (required)\n        componentName: \"mycryptocomponent\",\n        // Name of the key stored in the component (required)\n        keyName: \"mykey\",\n        // Algorithm used for wrapping the key, which must be supported by the key named above.\n        // Options include: \"RSA\", \"AES\"\n        keyWrapAlgorithm: \"RSA\",\n    }),\n    fs.createWriteStream(\"ciphertext.out\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Pub/Sub Component in YAML\nDESCRIPTION: This YAML configuration sets up an MQTT pub/sub component in Dapr. It specifies the component type, version, and various metadata fields such as URL, QoS, retain flag, clean session, and consumer ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt\n  version: v1\n  metadata:\n  - name: url\n    value: \"tcp://[username][:password]@host.domain[:port]\"\n  - name: qos\n    value: 1\n  - name: retain\n    value: \"false\"\n  - name: cleanSession\n    value: \"false\"\n  - name: consumerID\n    value: \"channel1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Purchase Order Workflow in Java\nDESCRIPTION: Java implementation of a workflow that handles order approvals with external system interaction using Dapr Workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic class ExternalSystemInteractionWorkflow extends Workflow {\n    @Override\n    public WorkflowStub create() {\n        return ctx -> {\n            // ...other steps...\n            Integer orderCost = ctx.getInput(int.class);\n            // Require orders over a certain threshold to be approved\n            if (orderCost > ORDER_APPROVAL_THRESHOLD) {\n                try {\n                    // Request human approval for this order\n                    ctx.callActivity(\"RequestApprovalActivity\", orderCost, Void.class).await();\n                    // Pause and wait for a human to approve the order\n                    boolean approved = ctx.waitForExternalEvent(\"ManagerApproval\", Duration.ofDays(3), boolean.class).await();\n                    if (!approved) {\n                        // The order was rejected, end the workflow here\n                        ctx.complete(\"Process reject\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Programmatic Subscription in Go\nDESCRIPTION: This Go application sets up a subscription handler for Dapr pub/sub with routing rules. It defines routes for the 'inventory' topic that direct events to different endpoints based on the event type, with a default path for unmatched events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nconst appPort = 3000\n\ntype subscription struct {\n\tPubsubName string            `json:\"pubsubname\"`\n\tTopic      string            `json:\"topic\"`\n\tMetadata   map[string]string `json:\"metadata,omitempty\"`\n\tRoutes     routes            `json:\"routes\"`\n}\n\ntype routes struct {\n\tRules   []rule `json:\"rules,omitempty\"`\n\tDefault string `json:\"default,omitempty\"`\n}\n\ntype rule struct {\n\tMatch string `json:\"match\"`\n\tPath  string `json:\"path\"`\n}\n\n// This handles /dapr/subscribe\nfunc configureSubscribeHandler(w http.ResponseWriter, _ *http.Request) {\n\tt := []subscription{\n\t\t{\n\t\t\tPubsubName: \"pubsub\",\n\t\t\tTopic:      \"inventory\",\n\t\t\tRoutes: routes{\n\t\t\t\tRules: []rule{\n\t\t\t\t\t{\n\t\t\t\t\t\tMatch: `event.type == \"widget\"`,\n\t\t\t\t\t\tPath:  \"/widgets\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tMatch: `event.type == \"gadget\"`,\n\t\t\t\t\t\tPath:  \"/gadgets\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tDefault: \"/products\",\n\t\t\t},\n\t\t},\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(t)\n}\n\nfunc main() {\n\trouter := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/dapr/subscribe\", configureSubscribeHandler).Methods(\"GET\")\n\tlog.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", appPort), router))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Reentrant Requests in Go\nDESCRIPTION: Handle a reentrant request in Go by extracting the Dapr-Reentrancy-Id header from the incoming request and forwarding it to any subsequent requests. This ensures the request is recognized as part of the same call chain.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actor-reentrancy.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc reentrantCallHandler(w http.ResponseWriter, r *http.Request) {\n    /*\n     * Omitted.\n     */\n\n\treq, _ := http.NewRequest(\"PUT\", url, bytes.NewReader(nextBody))\n\n\treentrancyID := r.Header.Get(\"Dapr-Reentrancy-Id\")\n\treq.Header.Add(\"Dapr-Reentrancy-Id\", reentrancyID)\n\n\tclient := http.Client{}\n\tresp, err := client.Do(req)\n\n    /*\n     * Omitted.\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in C++ gRPC client\nDESCRIPTION: C++ code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\ngrpc::ClientContext context;\ncontext.AddMetadata(\"dapr-app-id\", \"server\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr HTTP API (Bash)\nDESCRIPTION: Bash example showing how to retrieve a configuration item using Dapr's HTTP API. It uses curl to get the 'orderId1' configuration item from the 'configstore' configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3601/v1.0/configuration/configstore?key=orderId1\n```\n\n----------------------------------------\n\nTITLE: JavaScript Publisher Implementation with Dapr\nDESCRIPTION: Node.js publisher implementation using Dapr client to publish order events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new DaprClient();\n\nawait client.pubsub.publish(PUBSUB_NAME, PUBSUB_TOPIC, order);\nconsole.log(\"Published data: \" + JSON.stringify(order));\n```\n\n----------------------------------------\n\nTITLE: Go Secret Retrieval Implementation\nDESCRIPTION: Go code demonstrating how to retrieve secrets using the Dapr client from a local secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconst DAPR_SECRET_STORE = \"localsecretstore\"\nconst SECRET_NAME = \"secret\"\n// ...\nsecret, err := client.GetSecret(ctx, DAPR_SECRET_STORE, SECRET_NAME, nil)\nif secret != nil {\n    fmt.Println(\"Fetched Secret: \", secret[SECRET_NAME])\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in C# using Dapr SDK\nDESCRIPTION: This C# code demonstrates how to subscribe to the 'orders' topic using the Dapr SDK. It defines a controller with a method decorated with the Topic attribute to handle incoming messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies \nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing Dapr;\nusing Dapr.Client;\n\n//code\nnamespace CheckoutService.controller\n{\n    [ApiController]\n    public class CheckoutServiceController : Controller\n    {\n         //Subscribe to a topic \n        [Topic(\"order-pub-sub\", \"orders\")]\n        [HttpPost(\"checkout\")]\n        public void getCheckout([FromBody] int orderId)\n        {\n            Console.WriteLine(\"Subscriber received : \" + orderId);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using Go\nDESCRIPTION: This snippet shows how to unsubscribe from configuration updates using the Dapr Go SDK. It creates a Dapr client and calls the UnsubscribeConfigurationItems method with a context, store name, and subscription ID to stop receiving updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_22\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\nvar DAPR_CONFIGURATION_STORE = \"configstore\"\nvar subscriptionID = \"\"\n\nfunc main() {\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n  if err := client.UnsubscribeConfigurationItems(ctx, DAPR_CONFIGURATION_STORE , subscriptionID); err != nil {\n    panic(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Pub/Sub Subscriptions in Python\nDESCRIPTION: Shows Python implementation of Dapr pub/sub subscription using Flask, including subscription configuration and message handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [\n      {\n        'pubsubname': 'pubsub',\n        'topic': 'orders',\n        'routes': {\n          'rules': [\n            {\n              'match': 'event.type == \"order\"',\n              'path': '/orders'\n            },\n          ],\n          'default': '/orders'\n        }\n      }]\n    return jsonify(subscriptions)\n\n@app.route('/orders', methods=['POST'])\ndef ds_subscriber():\n    print(request.json, flush=True)\n    return json.dumps({'success':True}), 200, {'ContentType':'application/json'}\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Go Service Invocation Handler Registration\nDESCRIPTION: Code for registering service invocation handlers for job scheduling, retrieval, and deletion operations\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := server.AddServiceInvocationHandler(\"scheduleJob\", scheduleJob); err != nil {\n\tlog.Fatalf(\"error adding invocation handler: %v\", err)\n}\n\nif err := server.AddServiceInvocationHandler(\"getJob\", getJob); err != nil {\n\tlog.Fatalf(\"error adding invocation handler: %v\", err)\n}\n\nif err := server.AddServiceInvocationHandler(\"deleteJob\", deleteJob); err != nil {\n\tlog.Fatalf(\"error adding invocation handler: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript gRPC Client for Streaming with Dapr\nDESCRIPTION: JavaScript code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst metadata = new grpc.Metadata();\nmetadata.add('dapr-app-id', 'server');\nmetadata.add('dapr-stream', 'true');\n```\n\n----------------------------------------\n\nTITLE: Querying Employees in California Sorted by ID\nDESCRIPTION: Demonstrates a query to find all employees in California, sorted by their employee ID in descending order.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": {\n        \"EQ\": { \"state\": \"CA\" }\n    },\n    \"sort\": [\n        {\n            \"key\": \"person.id\",\n            \"order\": \"DESC\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Subscriber Implementation with Dapr\nDESCRIPTION: Node.js subscriber implementation using Dapr SDK to subscribe to the 'orders' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nserver.pubsub.subscribe(\"orderpubsub\", \"orders\", (data) => console.log(\"Subscriber received: \" + JSON.stringify(data)));\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Distributed Lock using Go SDK in Dapr\nDESCRIPTION: Go code demonstrating how to acquire a lock on a resource using the Dapr Go SDK. The code creates a Dapr client, sends a lock request with resource ID, owner, and expiry time, then handles the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    dapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n    client, err := dapr.NewClient()\n    if err != nil {\n        panic(err)\n    }\n    defer client.Close()\n    \n    resp, err := client.TryLockAlpha1(ctx, \"lockstore\", &dapr.LockRequest{\n\t\t\tLockOwner:         \"random_id_abc123\",\n\t\t\tResourceID:      \"my_file_name\",\n\t\t\tExpiryInSeconds: 60,\n\t\t})\n\n    fmt.Println(resp.Success)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Reminder in ControllerActor with C#\nDESCRIPTION: This snippet demonstrates how to register a durable reminder in the ControllerActor to clear the alarm state after 15 seconds. It uses the RegisterReminderAsync method provided by the Dapr Actor runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Register a reminder to refresh and clear alarm state every 15 seconds\nawait this.RegisterReminderAsync(\"AlarmRefreshReminder\", null, TimeSpan.FromSeconds(15), TimeSpan.FromSeconds(15));\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in JavaScript\nDESCRIPTION: Subscribes to configuration updates using the Dapr JavaScript SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to config updates\ntry {\n  const stream = await client.configuration.subscribeWithKeys(\n    DAPR_CONFIGURATION_STORE,\n    CONFIGURATION_ITEMS,\n    (config) => {\n      console.log(\"Configuration update\", JSON.stringify(config.items));\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-out/Fan-in Pattern in Go with Dapr\nDESCRIPTION: Go implementation of fan-out/fan-in pattern demonstrating batch processing workflow with parallel task execution using Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc BatchProcessingWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn 0, err\n\t}\n\tvar workBatch []int\n\tif err := ctx.CallActivity(GetWorkBatch, workflow.ActivityInput(input)).Await(&workBatch); err != nil {\n\t\treturn 0, err\n\t}\n\tparallelTasks := workflow.NewTaskSlice(len(workBatch))\n\tfor i, workItem := range workBatch {\n\t\tparallelTasks[i] = ctx.CallActivity(ProcessWorkItem, workflow.ActivityInput(workItem))\n\t}\n\tvar outputs int\n\tfor _, task := range parallelTasks {\n\t\tvar output int\n\t\terr := task.Await(&output)\n\t\tif err == nil {\n\t\t\toutputs += output\n\t\t} else {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\tif err := ctx.CallActivity(ProcessResults, workflow.ActivityInput(outputs)).Await(nil); err != nil {\n\t\treturn 0, err\n\t}\n\treturn 0, nil\n}\nfunc GetWorkBatch(ctx workflow.ActivityContext) (any, error) {\n\tvar batchSize int\n\tif err := ctx.GetInput(&batchSize); err != nil {\n\t\treturn 0, err\n\t}\n\tbatch := make([]int, batchSize)\n\tfor i := 0; i < batchSize; i++ {\n\t\tbatch[i] = i\n\t}\n\treturn batch, nil\n}\nfunc ProcessWorkItem(ctx workflow.ActivityContext) (any, error) {\n\tvar workItem int\n\tif err := ctx.GetInput(&workItem); err != nil {\n\t\treturn 0, err\n\t}\n\tfmt.Printf(\"Processing work item: %d\\n\", workItem)\n\ttime.Sleep(time.Second * 5)\n\tresult := workItem * 2\n\tfmt.Printf(\"Work item %d processed. Result: %d\\n\", workItem, result)\n\treturn result, nil\n}\nfunc ProcessResults(ctx workflow.ActivityContext) (any, error) {\n\tvar finalResult int\n\tif err := ctx.GetInput(&finalResult); err != nil {\n\t\treturn 0, err\n\t}\n\tfmt.Printf(\"Final result: %d\\n\", finalResult)\n\treturn finalResult, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Order-Processor Output in Dapr Application Log\nDESCRIPTION: Example console output showing how the order-processor application saves, retrieves, and deletes order data from the Dapr state store. The log demonstrates the complete state management lifecycle for multiple order objects.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n== APP == dapr client initializing for: 127.0.0.1:53689\n== APP == 2022/04/01 09:16:03 Saving Order: {\"orderId\":1}\n== APP == Getting Order: {\"orderId\":1}\n== APP == 2022/04/01 09:16:03 Deleting Order: {\"orderId\":1}\n== APP == 2022/04/01 09:16:03 Saving Order: {\"orderId\":2}\n== APP == Getting Order: {\"orderId\":2}\n== APP == 2022/04/01 09:16:03 Deleting Order: {\"orderId\":2}\n== APP == 2022/04/01 09:16:03 Saving Order: {\"orderId\":3}\n== APP == Getting Order: {\"orderId\":3}\n== APP == 2022/04/01 09:16:03 Deleting Order: {\"orderId\":3}\n== APP == 2022/04/01 09:16:03 Saving Order: {\"orderId\":4}\n== APP == Getting Order: {\"orderId\":4}\n== APP == 2022/04/01 09:16:03 Deleting Order: {\"orderId\":4}\n== APP == 2022/04/01 09:16:03 Saving Order: {\"orderId\":5}\n== APP == Getting Order: {\"orderId\":5}\n== APP == 2022/04/01 09:16:03 Deleting Order: {\"orderId\":5}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation in Java with Dapr\nDESCRIPTION: Java Spring Boot implementation using HttpClient for service invocation. Features HTTP/2 support, timeout configuration, and JSON request handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n//code\n@SpringBootApplication\npublic class CheckoutServiceApplication {\n    private static final HttpClient httpClient = HttpClient.newBuilder()\n            .version(HttpClient.Version.HTTP_2)\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n\n    public static void main(String[] args) throws InterruptedException, IOException {\n        while (true) {\n            TimeUnit.MILLISECONDS.sleep(5000);\n            Random random = new Random();\n            int orderId = random.nextInt(1000 - 1) + 1;\n\n            // Create a Map to represent the request body\n            Map<String, Object> requestBody = new HashMap<>();\n            requestBody.put(\"orderId\", orderId);\n            // Add other fields to the requestBody Map as needed\n\n            HttpRequest request = HttpRequest.newBuilder()\n                    .POST(HttpRequest.BodyPublishers.ofString(new JSONObject(requestBody).toString()))\n                    .uri(URI.create(dapr_url))\n                    .header(\"Content-Type\", \"application/json\")\n                    .header(\"dapr-app-id\", \"order-processor\")\n                    .build();\n\n            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n            System.out.println(\"Order passed: \" + orderId);\n            TimeUnit.MILLISECONDS.sleep(1000);\n\n            log.info(\"Order requested: \" + orderId);\n            log.info(\"Result: \" + response.body());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets with JavaScript Dapr SDK\nDESCRIPTION: JavaScript implementation for retrieving secrets from a Dapr secret store using the Node.js SDK. Demonstrates async/await pattern for secret retrieval.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DAPR_SECRET_STORE = \"localsecretstore\";\nconst SECRET_NAME = \"secret\";\n\nasync function main() {\n    // ...\n    const secret = await client.secret.get(DAPR_SECRET_STORE, SECRET_NAME);\n    console.log(\"Fetched Secret: \" + JSON.stringify(secret));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Application in C# with Dapr\nDESCRIPTION: This C# code demonstrates how to create a conversation application using Dapr's conversation client. It sends a prompt to the echo mock LLM component and prints the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Dapr.AI.Conversation;\nusing Dapr.AI.Conversation.Extensions;\n\nclass Program\n{\n  private const string ConversationComponentName = \"echo\";\n\n  static async Task Main(string[] args)\n  {\n    const string prompt = \"What is dapr?\";\n\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddDaprConversationClient();\n    var app = builder.Build();\n\n    //Instantiate Dapr Conversation Client\n    var conversationClient = app.Services.GetRequiredService<DaprConversationClient>();\n\n    try\n    {\n      // Send a request to the echo mock LLM component\n      var response = await conversationClient.ConverseAsync(ConversationComponentName, [new(prompt, DaprConversationRole.Generic)]);\n      Console.WriteLine(\"Input sent: \" + prompt);\n\n      if (response != null)\n      {\n        Console.Write(\"Output response:\");\n        foreach (var resp in response.Outputs)\n        {\n          Console.WriteLine($\" {resp.Result}\");\n        }\n      }\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine(\"Error: \" + ex.Message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Secret Store Component Configuration\nDESCRIPTION: Basic YAML configuration template for defining a secret store component in Dapr. Shows the required fields including apiVersion, kind, metadata, and spec sections.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: secretstore\nspec:\n  type: secretstores.<NAME>\n  version: v1\n  metadata:\n  - name: <KEY>\n    value: <VALUE>\n  - name: <KEY>\n    value: <VALUE>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring App Middleware Pipeline in Dapr\nDESCRIPTION: This YAML configuration adds the 'uppercase' middleware component for all outgoing calls from the Dapr sidecar to the application. It demonstrates how to apply middleware to service-to-service invocation calls.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: pipeline\n  namespace: default\nspec:\n  appHttpPipeline:\n    handlers:\n      - name: uppercase\n        type: middleware.http.uppercase\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Queues PubSub with Connection String Authentication in YAML\nDESCRIPTION: YAML configuration for setting up Azure Service Bus Queues pubsub component using connection string authentication. Includes required and optional metadata fields such as connection string, timeout settings, message handling options, and retry configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-servicebus-queues.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: servicebus-pubsub\nspec:\n  type: pubsub.azure.servicebus.queues\n  version: v1\n  metadata:\n  # Required when not using Microsoft Entra ID Authentication\n  - name: connectionString\n    value: \"Endpoint=sb://{ServiceBusNamespace}.servicebus.windows.net/;SharedAccessKeyName={PolicyName};SharedAccessKey={Key};EntityPath={ServiceBus}\"\n  # - name: consumerID # Optional\n  #   value: channel1\n  # - name: timeoutInSec # Optional\n  #   value: 60\n  # - name: handlerTimeoutInSec # Optional\n  #   value: 60\n  # - name: disableEntityManagement # Optional\n  #   value: \"false\"\n  # - name: maxDeliveryCount # Optional\n  #   value: 3\n  # - name: lockDurationInSec # Optional\n  #   value: 60\n  # - name: lockRenewalInSec # Optional\n  #   value: 20\n  # - name: maxActiveMessages # Optional\n  #   value: 10000\n  # - name: maxConcurrentHandlers # Optional\n  #   value: 10\n  # - name: defaultMessageTimeToLiveInSec # Optional\n  #   value: 10\n  # - name: autoDeleteOnIdleInSec # Optional\n  #   value: 3600\n  # - name: minConnectionRecoveryInSec # Optional\n  #   value: 2\n  # - name: maxConnectionRecoveryInSec # Optional\n  #   value: 300\n  # - name: maxRetriableErrorsPerSec # Optional\n  #   value: 10\n  # - name: publishMaxRetries # Optional\n  #   value: 5\n  # - name: publishInitialRetryIntervalInMs # Optional\n  #   value: 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with Mutual TLS Authentication\nDESCRIPTION: YAML configuration for Kafka pubsub component using mTLS authentication. Includes client certificate and key configuration along with CA certificate for TLS verification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-mtls\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"mtls\"\n  - name: caCert\n    secretKeyRef:\n      name: kafka-tls\n      key: caCert\n  - name: clientCert\n    secretKeyRef:\n      name: kafka-tls\n      key: clientCert\n  - name: clientKey\n    secretKeyRef:\n      name: kafka-tls\n      key: clientKey\n  - name: maxMessageBytes\n    value: 1024\n  - name: consumeRetryInterval\n    value: 200ms\n  - name: heartbeatInterval\n    value: 5s\n  - name: sessionTimeout\n    value: 15s\n  - name: version\n    value: 0.10.2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Subscribe in Java with Spring Boot\nDESCRIPTION: This snippet demonstrates how to implement a Bulk Subscribe handler in Java using Spring Boot annotations. It processes multiple CloudEvents in a single request, logging the data and returning appropriate response statuses.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport io.dapr.Topic;\nimport io.dapr.client.domain.BulkSubscribeAppResponse;\nimport io.dapr.client.domain.BulkSubscribeAppResponseEntry;\nimport io.dapr.client.domain.BulkSubscribeAppResponseStatus;\nimport io.dapr.client.domain.BulkSubscribeMessage;\nimport io.dapr.client.domain.BulkSubscribeMessageEntry;\nimport io.dapr.client.domain.CloudEvent;\nimport io.dapr.springboot.annotations.BulkSubscribe;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport reactor.core.publisher.Mono;\n\nclass BulkSubscriber {\n  @BulkSubscribe()\n  // @BulkSubscribe(maxMessagesCount = 100, maxAwaitDurationMs = 40)\n  @Topic(name = \"topicbulk\", pubsubName = \"orderPubSub\")\n  @PostMapping(path = \"/topicbulk\")\n  public Mono<BulkSubscribeAppResponse> handleBulkMessage(\n          @RequestBody(required = false) BulkSubscribeMessage<CloudEvent<String>> bulkMessage) {\n    return Mono.fromCallable(() -> {\n      List<BulkSubscribeAppResponseEntry> entries = new ArrayList<BulkSubscribeAppResponseEntry>();\n      for (BulkSubscribeMessageEntry<?> entry : bulkMessage.getEntries()) {\n        try {\n          CloudEvent<?> cloudEvent = (CloudEvent<?>) entry.getEvent();\n          System.out.printf(\"Bulk Subscriber got: %s\\n\", cloudEvent.getData());\n          entries.add(new BulkSubscribeAppResponseEntry(entry.getEntryId(), BulkSubscribeAppResponseStatus.SUCCESS));\n        } catch (Exception e) {\n          e.printStackTrace();\n          entries.add(new BulkSubscribeAppResponseEntry(entry.getEntryId(), BulkSubscribeAppResponseStatus.RETRY));\n        }\n      }\n      return new BulkSubscribeAppResponse(entries);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation in C# with Dapr\nDESCRIPTION: C# implementation using Dapr SDK's HttpClient for service invocation. Implements async operations and random order generation in a continuous loop.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading;\n\n//code\nnamespace EventService\n{\n  class Program\n   {\n       static async Task Main(string[] args)\n       {\n          while(true) {\n               await Task.Delay(5000)\n               var random = new Random();\n               var orderId = random.Next(1,1000);\n\n               //Using Dapr SDK to invoke a method\n               var order = new Order(orderId.ToString());\n\n               var httpClient = DaprClient.CreateInvokeHttpClient();\n               var response = await httpClient.PostAsJsonAsync(\"http://order-processor/orders\", order);               \n               var result = await response.Content.ReadAsStringAsync();\n               \n               Console.WriteLine(\"Order requested: \" + orderId);\n               Console.WriteLine(\"Result: \" + result);\n   \t    }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in Go using Dapr SDK\nDESCRIPTION: This Go code shows how to subscribe to the 'orders' topic using the Dapr SDK. It creates a subscription and adds a topic event handler to process incoming messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//dependencies\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"context\"\n\n\t\"github.com/dapr/go-sdk/service/common\"\n\tdaprd \"github.com/dapr/go-sdk/service/http\"\n)\n\n//code\nvar sub = &common.Subscription{\n\tPubsubName: \"order-pub-sub\",\n\tTopic:      \"orders\",\n\tRoute:      \"/checkout\",\n}\n\nfunc main() {\n\ts := daprd.NewService(\":6002\")\n   //Subscribe to a topic\n\tif err := s.AddTopicEventHandler(sub, eventHandler); err != nil {\n\t\tlog.Fatalf(\"error adding topic subscription: %v\", err)\n\t}\n\tif err := s.Start(); err != nil && err != http.ErrServerClosed {\n\t\tlog.Fatalf(\"error listenning: %v\", err)\n\t}\n}\n\nfunc eventHandler(ctx context.Context, e *common.TopicEvent) (retry bool, err error) {\n\tlog.Printf(\"Subscriber received: %s\", e.Data)\n\treturn false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata in C#\nDESCRIPTION: This snippet demonstrates how to execute a state transaction in C# using the Dapr client, overriding CloudEvent metadata fields. It defines a state operation with custom metadata and executes the transaction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StateOperationExample\n{\n    public async Task ExecuteStateTransactionAsync()\n    {\n        var daprClient = new DaprClientBuilder().Build();\n\n        // Define the value \"2\" as a string and serialize it to a byte array\n        var value = \"2\";\n        var valueBytes = JsonSerializer.SerializeToUtf8Bytes(value);\n\n        // Define the first state operation to save the value \"2\" with metadata\n       // Override Cloudevent metadata\n        var metadata = new Dictionary<string, string>\n        {\n            { \"cloudevent.id\", \"unique-business-process-id\" },\n            { \"cloudevent.source\", \"CustomersApp\" },\n            { \"cloudevent.type\", \"CustomerCreated\" },\n            { \"cloudevent.subject\", \"123\" },\n            { \"my-custom-ce-field\", \"abc\" }\n        };\n\n        var op1 = new StateTransactionRequest(\n            key: \"key1\",\n            value: valueBytes,\n            operationType: StateOperationType.Upsert,\n            metadata: metadata\n        );\n\n        // Create the list of state operations\n        var ops = new List<StateTransactionRequest> { op1 };\n\n        // Execute the state transaction\n        var storeName = \"your-state-store-name\";\n        await daprClient.ExecuteStateTransactionAsync(storeName, ops);\n        Console.WriteLine(\"State transaction executed.\");\n    }\n\n    public static async Task Main(string[] args)\n    {\n        var example = new StateOperationExample();\n        await example.ExecuteStateTransactionAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dapr with orderprocessing app-id\nDESCRIPTION: Initializes a Dapr instance with the app-id 'orderprocessing' and sets the HTTP port to 3601.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --dapr-http-port 3601\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler-based Streaming Subscriptions in Python\nDESCRIPTION: Example of using the handler-based subscription model in Python with DaprClient. Shows how to process messages using a callback function in a separate thread.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc._response import TopicEventResponse\n\ncounter = 0\n\n\ndef process_message(message):\n    # Process the message here\n    global counter\n    counter += 1\n    print(f'Processing message: {message.data()} from {message.topic()}...')\n    return TopicEventResponse('success')\n\n\ndef main():\n    with (DaprClient() as client):\n        # This will start a new thread that will listen for messages\n        # and process them in the `process_message` function\n        close_fn = client.subscribe_with_handler(\n            pubsub_name='pubsub', topic='orders', handler_fn=process_message,\n            dead_letter_topic='orders_dead'\n        )\n\n        while counter < 5:\n            time.sleep(1)\n\n        print(\"Closing subscription...\")\n        close_fn()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple States in .NET using Dapr SDK\nDESCRIPTION: Demonstrates how to retrieve multiple state items using the Dapr .NET SDK. Includes both serialized and deserialized approaches with a Widget class example.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing Dapr.Client;\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string DAPR_STORE_NAME = \"statestore\";\n            //Using Dapr SDK to retrieve multiple states\n            using var client = new DaprClientBuilder().Build();\n            IReadOnlyList<BulkStateItem> multipleStateResult = await client.GetBulkStateAsync(DAPR_STORE_NAME, new List<string> { \"order_1\", \"order_2\" }, parallelism: 1);\n        }\n    }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 dotnet run\n```\n\n----------------------------------------\n\nTITLE: Uploading from File Path to AWS S3 using Dapr Binding\nDESCRIPTION: Example of uploading a file to an S3 bucket using a file path with Dapr's AWS S3 binding. This method uses the 'filePath' metadata key with an empty data field to specify the source file location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \\\"operation\\\": \\\"create\\\", \\\"metadata\\\": { \\\"filePath\\\": \\\"my-test-file.txt\\\" }}' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"metadata\": { \"filePath\": \"my-test-file.txt\" }}' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulsar PubSub with OIDC Authentication\nDESCRIPTION: This YAML configuration shows how to set up Apache Pulsar pubsub in Dapr with OpenID Connect (OIDC) authentication. It includes settings for OAuth2 token URL, client credentials, audiences, and scopes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"pulsar.example.com:6650\"\n  - name: oauth2TokenURL\n    value: https://oauth.example.com/o/oauth2/token\n  - name: oauth2TokenCAPEM\n    value: \"---BEGIN CERTIFICATE---\\n...\\n---END CERTIFICATE---\"\n  - name: oauth2ClientID\n    value: my-client-id\n  - name: oauth2ClientSecret\n    secretKeyRef:\n      name: pulsar-oauth2\n      key:  my-client-secret\n  - name: oauth2Audiences\n    value: \"my.pulsar.example.com,another.pulsar.example.com\"\n  - name: oauth2Scopes\n    value: \"openid,profile,email\"\n```\n\n----------------------------------------\n\nTITLE: Actor State Transaction with TTL\nDESCRIPTION: Example showing how to persist changes to actor state as a multi-item transaction. This transaction includes both upserting a key with a TTL value and deleting another key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/actors/stormtrooper/50/state \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n       {\n         \"operation\": \"upsert\",\n         \"request\": {\n           \"key\": \"key1\",\n           \"value\": \"myData\",\n           \"metadata\": {\n             \"ttlInSeconds\": \"3600\"\n           }\n         }\n       },\n       {\n         \"operation\": \"delete\",\n         \"request\": {\n           \"key\": \"key2\"\n         }\n       }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics in Kubernetes Deployment\nDESCRIPTION: A Kubernetes deployment example that explicitly enables metrics collection with the port specified as 9090. This configuration uses annotations to enable Dapr metrics for a Node.js application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodeapp\n  labels:\n    app: node\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: node\n  template:\n    metadata:\n      labels:\n        app: node\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodeapp\"\n        dapr.io/app-port: \"3000\"\n        dapr.io/enable-metrics: \"true\"\n        dapr.io/metrics-port: \"9090\"\n    spec:\n      containers:\n      - name: node\n        image: dapriosamples/hello-k8s-node:latest\n        ports:\n        - containerPort: 3000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Redis State Store Configuration\nDESCRIPTION: YAML configuration for Redis state store component defining connection details and metadata\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with OAuth2/OIDC Authentication\nDESCRIPTION: YAML configuration for Kafka pubsub component using OAuth2/OIDC authentication. Includes token endpoint, client credentials, and scope configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"oidc\"\n  - name: oidcTokenEndpoint\n    value: \"https://identity.example.com/v1/token\"\n  - name: oidcClientID\n    value: \"dapr-myapp\"\n  - name: oidcClientSecret\n    secretKeyRef:\n      name: kafka-secrets\n      key: oidcClientSecret\n  - name: oidcScopes\n    value: \"openid,kafka-dev\"\n  - name: caCert\n    secretKeyRef:\n      name: kafka-tls\n      key: caCert\n  - name: maxMessageBytes\n    value: 1024\n  - name: consumeRetryInterval\n    value: 200ms\n  - name: heartbeatInterval\n    value: 5s\n  - name: sessionTimeout\n    value: 15s\n  - name: version\n    value: 0.10.2.0\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr Annotations to Kubernetes Pod\nDESCRIPTION: This YAML snippet demonstrates how to add Dapr annotations to a Kubernetes pod definition. It enables Dapr, sets the application ID and port, and configures tracing. These annotations instruct Kubernetes to inject the Dapr sidecar container into the pod.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  annotations:\n    dapr.io/enabled: \"true\"\n    dapr.io/app-id: \"nodeapp\"\n    dapr.io/app-port: \"3000\"\n    dapr.io/config: \"tracing\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Job Handler in Go\nDESCRIPTION: Initializes a Go service with Dapr and registers a job event handler for the 'prod-db-backup' job. The code sets up the server and prepares job data with database backup information including database name and backup location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    //...\n\n\tdaprc \"github.com/dapr/go-sdk/client\"\n\t\"github.com/dapr/go-sdk/examples/dist-scheduler/api\"\n\t\"github.com/dapr/go-sdk/service/common\"\n\tdaprs \"github.com/dapr/go-sdk/service/grpc\"\n)\n\nfunc main() {\n    // Initialize the server\n\tserver, err := daprs.NewService(\":50070\")\n    // ...\n\n\tif err = server.AddJobEventHandler(\"prod-db-backup\", prodDBBackupHandler); err != nil {\n\t\tlog.Fatalf(\"failed to register job event handler: %v\", err)\n\t}\n\n\tlog.Println(\"starting server\")\n\tgo func() {\n\t\tif err = server.Start(); err != nil {\n\t\t\tlog.Fatalf(\"failed to start server: %v\", err)\n\t\t}\n\t}()\n    // ...\n\n    // Set up backup location\n\tjobData, err := json.Marshal(&api.DBBackup{\n\t\tTask: \"db-backup\",\n\t\tMetadata: api.Metadata{\n\t\t\tDBName:         \"my-prod-db\",\n\t\t\tBackupLocation: \"/backup-dir\",\n\t\t},\n\t},\n\t)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets with Python Dapr SDK\nDESCRIPTION: Python implementation showing how to retrieve secrets from a Dapr secret store using the DaprClient. Uses a local file-based secret store and demonstrates basic secret retrieval.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDAPR_SECRET_STORE = 'localsecretstore'\nSECRET_NAME = 'secret'\nwith DaprClient() as client:\n    secret = client.get_secret(store_name=DAPR_SECRET_STORE, key=SECRET_NAME)\n    logging.info('Fetched Secret: %s', secret.secret)\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency Limits in Kubernetes\nDESCRIPTION: Kubernetes deployment configuration showing how to set app-max-concurrency using Dapr annotations. The example sets the concurrency limit to 1 for a node subscriber application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/control-concurrency.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodesubscriber\n  namespace: default\n  labels:\n    app: nodesubscriber\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nodesubscriber\n  template:\n    metadata:\n      labels:\n        app: nodesubscriber\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodesubscriber\"\n        dapr.io/app-port: \"3000\"\n        dapr.io/app-max-concurrency: \"1\"\n#...\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Order Processing Workflow in C#\nDESCRIPTION: This code sets up a Dapr workflow application that processes orders. It registers workflow activities, connects to the Dapr sidecar, initializes inventory, creates and schedules a new workflow instance, and waits for workflow completion.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing Dapr.Client;\nusing Dapr.Workflow;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing WorkflowConsoleApp.Activities;\nusing WorkflowConsoleApp.Models;\nusing WorkflowConsoleApp.Workflows;\n\nconst string storeName = \"statestore\";\n\n// The workflow host is a background service that connects to the sidecar over gRPC\nvar builder = Host.CreateDefaultBuilder(args).ConfigureServices(services =>\n{\n    services.AddDaprClient();\n    services.AddDaprWorkflow(options =>\n    {\n        // Note that it's also possible to register a lambda function as the workflow\n        // or activity implementation instead of a class.\n        options.RegisterWorkflow<OrderProcessingWorkflow>();\n\n        // These are the activities that get invoked by the workflow(s).\n        options.RegisterActivity<NotifyActivity>();\n        options.RegisterActivity<VerifyInventoryActivity>();\n        options.RegisterActivity<RequestApprovalActivity>();\n        options.RegisterActivity<ProcessPaymentActivity>();\n        options.RegisterActivity<UpdateInventoryActivity>();\n    });\n});\n\n// Start the app - this is the point where we connect to the Dapr sidecar\nusing var host = builder.Build();\nhost.Start();\n\nvar daprClient = host.Services.GetRequiredService<DaprClient>();\nvar workflowClient = host.Services.GetRequiredService<DaprWorkflowClient>();\n\n// Generate a unique ID for the workflow\nvar orderId = Guid.NewGuid().ToString()[..8];\nconst string itemToPurchase = \"Cars\";\nconst int amountToPurchase = 1;\n\n// Populate the store with items\nRestockInventory(itemToPurchase);\n\n// Construct the order\nvar orderInfo = new OrderPayload(itemToPurchase, 5000, amountToPurchase);\n\n// Start the workflow\nConsole.WriteLine($\"Starting workflow {orderId} purchasing {amountToPurchase} {itemToPurchase}\");\n\nawait workflowClient.ScheduleNewWorkflowAsync(\n    name: nameof(OrderProcessingWorkflow),\n    instanceId: orderId,\n    input: orderInfo);\n\n// Wait for the workflow to start and confirm the input\nvar state = await workflowClient.WaitForWorkflowStartAsync(\n    instanceId: orderId);\n\nConsole.WriteLine($\"Your workflow has started. Here is the status of the workflow: {Enum.GetName(typeof(WorkflowRuntimeStatus), state.RuntimeStatus)}\");\n\n// Wait for the workflow to complete\nstate = await workflowClient.WaitForWorkflowCompletionAsync(\n    instanceId: orderId);\n\nConsole.WriteLine(\"Workflow Status: {0}\", Enum.GetName(typeof(WorkflowRuntimeStatus), state.RuntimeStatus));\nreturn;\n\nvoid RestockInventory(string itemToPurchase)\n{\n    daprClient.SaveStateAsync(storeName, itemToPurchase, new OrderPayload(Name: itemToPurchase, TotalCost: 50000, Quantity: 10));\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Dapr Workflow with Go SDK daprClient\nDESCRIPTION: A code snippet showing how to start, terminate, get status, and purge a workflow using the Dapr Go SDK daprClient. It demonstrates workflows lifecycle management using direct API calls and includes error handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nerr = daprClient.TerminateWorkflow(ctx, &client.TerminateWorkflowRequest{\n\tInstanceID:        \"a7a4168d-3a1c-41da-8a4f-e7f6d9c718d9\",\n\tWorkflowComponent: workflowComponent,\n})\nif err != nil {\n\tlog.Fatalf(\"failed to terminate workflow: %v\", err)\n}\n\nrespGet, err = daprClient.GetWorkflow(ctx, &client.GetWorkflowRequest{\n\tInstanceID:        \"a7a4168d-3a1c-41da-8a4f-e7f6d9c718d9\",\n\tWorkflowComponent: workflowComponent,\n})\nif err != nil {\n\tlog.Fatalf(\"failed to get workflow: %v\", err)\n}\nif respGet.RuntimeStatus != workflow.StatusTerminated.String() {\n\tlog.Fatal(\"failed to terminate workflow\")\n}\n\nfmt.Println(\"workflow terminated\")\n\nerr = daprClient.PurgeWorkflow(ctx, &client.PurgeWorkflowRequest{\n\tInstanceID:        \"a7a4168d-3a1c-41da-8a4f-e7f6d9c718d9\",\n\tWorkflowComponent: workflowComponent,\n})\n\nrespGet, err = daprClient.GetWorkflow(ctx, &client.GetWorkflowRequest{\n\tInstanceID:        \"a7a4168d-3a1c-41da-8a4f-e7f6d9c718d9\",\n\tWorkflowComponent: workflowComponent,\n})\nif err == nil || respGet != nil {\n\tlog.Fatalf(\"failed to purge workflow: %v\", err)\n}\n\nfmt.Println(\"workflow purged\")\n```\n\n----------------------------------------\n\nTITLE: Returning Bulk Delete Row Mismatch Error in Java\nDESCRIPTION: This Java code illustrates how to return a Bulk Delete Row Mismatch error in a Dapr pluggable component using Project Reactor. It creates a Status object with an INTERNAL code and includes an ErrorInfo detail with additional metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal Status status = Status.newBuilder()\n    .setCode(io.grpc.Status.Code.INTERNAL.value())\n    .setMessage(\"fake-err-msg-for-bulk-delete-row-mismatch\")\n    .addDetails(Any.pack(ErrorInfo.newBuilder()\n        .putAllMetadata(Map.ofEntries(\n            Map.entry(\"affected\", \"99\"),\n            Map.entry(\"expected\", \"100\")\n        ))\n        .build()))\n    .build();\nreturn Mono.error(StatusProto.toStatusException(status));\n```\n\n----------------------------------------\n\nTITLE: Complete Redis State Store Configuration with Encryption\nDESCRIPTION: A full YAML component definition for a Redis state store with encryption enabled. The configuration specifies the Redis connection details and the primary encryption key reference.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-encrypt-state.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: primaryEncryptionKey\n    secretKeyRef:\n      name: mysecret\n      key: mykey\n```\n\n----------------------------------------\n\nTITLE: Workflow Actor State Keys\nDESCRIPTION: State store key patterns used by workflow actors to maintain workflow state, including inbox messages, history events, custom status, and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninbox-NNNNNN\nhistory-NNNNNN\ncustomStatus\nmetadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Prometheus YAML for Dapr Metrics Collection\nDESCRIPTION: A basic Prometheus configuration file that defines scrape intervals and targets for monitoring Dapr metrics. This configuration sets up a job named 'dapr' that scrapes metrics from localhost:9090 every 5 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval:     15s # By default, scrape targets every 15 seconds.\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  - job_name: 'dapr'\n\n    # Override the global default and scrape targets from this job every 5 seconds.\n    scrape_interval: 5s\n\n    static_configs:\n      - targets: ['localhost:9090'] # Replace with Dapr metrics port if not default\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Dapr Crypto API using curl\nDESCRIPTION: Example curl command for encrypting data using the Dapr cryptography API. This request encrypts the string \"hello world\" using the specified key and algorithm from the myAzureKeyVault crypto store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3500/v1.0-alpha1/crypto/myAzureKeyVault/encrypt \\\n    -X PUT \\\n    -H \"dapr-key-name: myCryptoKey\" \\\n    -H \"dapr-key-wrap-algorithm: aes-gcm\" \\ \n    -H \"Content-Type: application/octet-string\" \\ \n    --data-binary \"\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64\"\n```\n\n----------------------------------------\n\nTITLE: Querying Actor State in Azure Cosmos DB for Dapr\nDESCRIPTION: These SQL queries show how to retrieve all state keys for a specific actor instance and how to get a specific actor state in the Dapr state store implemented using Azure Cosmos DB.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-cosmosdb-store.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE CONTAINS(states.id, 'mypets||cat||leroy||')\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE states.id = 'mypets||cat||leroy||food'\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processing Endpoint in Python\nDESCRIPTION: Python code for the order-processor service, defining a route to receive and process orders.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/orders', methods=['POST'])\ndef getOrder():\n    data = request.json\n    print('Order received : ' + json.dumps(data), flush=True)\n    return json.dumps({'success': True}), 200, {\n        'ContentType': 'application/json'}\n\n\napp.run(port=8001)\n```\n\n----------------------------------------\n\nTITLE: Programmatic Subscription to Raw Messages in Python\nDESCRIPTION: Example of programmatically subscribing to raw pub/sub messages in Python by setting the rawPayload metadata flag to true, allowing the subscriber to receive messages without CloudEvent wrapping.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport flask\nfrom flask import request, jsonify\nfrom flask_cors import CORS\nimport json\nimport sys\n\napp = flask.Flask(__name__)\nCORS(app)\n\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [{'pubsubname': 'pubsub',\n                      'topic': 'deathStarStatus',\n                      'route': 'dsstatus',\n                      'metadata': {\n                          'rawPayload': 'true',\n                      } }]\n    return jsonify(subscriptions)\n\n@app.route('/dsstatus', methods=['POST'])\ndef ds_subscriber():\n    print(request.json, flush=True)\n    return json.dumps({'success':True}), 200, {'ContentType':'application/json'}\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: File Decryption with AES in Go\nDESCRIPTION: Demonstrates decrypting a large encrypted file using AES encryption with Dapr's cryptography API. The code shows reading the encrypted file and writing the decrypted data back to a new file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\t// Now, decrypt the encrypted data\n\t// First, open the file \"encrypted.out\" again, this time for reading\n\tencryptedF, err = os.Open(\"encrypted.out\")\n\n    // ...\n\n\tdefer encryptedF.Close()\n\n\t// Now, decrypt the encrypted data\n\tdecStream, err := client.Decrypt(context.Background(),\n\t\tencryptedF,\n\t\tdapr.DecryptOptions{\n\t\t\t// We just need to pass the name of the component\n\t\t\tComponentName: CryptoComponentName,\n\t\t\t// Passing the name of the key is optional\n\t\t\tKeyName: SymmetricKeyName,\n\t\t},\n\t)\n\n    // ...\n\n\t// Write the decrypted data to a file \"decrypted.out.jpg\"\n\tdecryptedF, err := os.Create(\"decrypted.out.jpg\")\n\n    // ...\n\n\tdecryptedF.Close()\n\n\tfmt.Println(\"Wrote decrypted data to decrypted.out.jpg\")\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Orders Batch with PostgreSQL Output Binding\nDESCRIPTION: Function that reads orders from a JSON file and inserts them into PostgreSQL database using Dapr output binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function processBatch(){\n    const loc = '../../orders.json';\n    fs.readFile(loc, 'utf8', (err, data) => {\n        const orders = JSON.parse(data).orders;\n        orders.forEach(order => {\n            let sqlCmd = `insert into orders (orderid, customer, price) values (${order.orderid}, '${order.customer}', ${order.price});`;\n            let payload = `{  \"sql\": \"${sqlCmd}\" } `;\n            console.log(payload);\n            client.binding.send(postgresBindingName, \"exec\", \"\", JSON.parse(payload));\n        });\n        console.log('Finished processing batch');\n      });\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Bulk Subscribe Status Updates\nDESCRIPTION: This JSON example demonstrates the required response format when processing bulk subscribe messages. It shows how to communicate the processing status for each individual message using its entryId.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statuses\":\n  [\n    {\n    \"entryId\": \"<entryId1>\",\n    \"status\": \"<status>\"\n    },\n    {\n    \"entryId\": \"<entryId2>\",\n    \"status\": \"<status>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Client in Go with Dapr Service Invocation\nDESCRIPTION: A Go implementation of a gRPC client that uses Dapr for service invocation. This client connects to its local Dapr sidecar on port 50007 and invokes the server application using service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nconst (\n\taddress = \"localhost:50007\"\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*2)\n\tdefer cancel()\n\n\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", \"server\")\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: \"Darth Tyrannus\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetMessage())\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in Java Using Dapr SDK\nDESCRIPTION: Uses the Dapr Java SDK to retrieve a secret from the configured secret store. The code builds a Dapr client and calls the getSecret method, then logs the retrieved secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.dapr.client.DaprClient;\nimport io.dapr.client.DaprClientBuilder;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.Map;\n\n\n//code\n@SpringBootApplication\npublic class OrderProcessingServiceApplication {\n\n    private static final Logger log = LoggerFactory.getLogger(OrderProcessingServiceApplication.class);\n    private static final ObjectMapper JSON_SERIALIZER = new ObjectMapper();\n\n    private static final String SECRET_STORE_NAME = \"localsecretstore\";\n\n    public static void main(String[] args) throws InterruptedException, JsonProcessingException {\n        DaprClient client = new DaprClientBuilder().build();\n        //Using Dapr SDK to get a secret\n        Map<String, String> secret = client.getSecret(SECRET_STORE_NAME, \"secret\").block();\n        log.info(\"Result: \" + JSON_SERIALIZER.writeValueAsString(secret));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudEvents Using HTTP API in PowerShell\nDESCRIPTION: PowerShell command example showing how to publish a custom CloudEvent to the 'orders' topic using Dapr's HTTP API with Invoke-RestMethod. The content type specifies a CloudEvent format.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/cloudevents+json' -Body '{\"specversion\" : \"1.0\", \"type\" : \"com.dapr.cloudevent.sent\", \"source\" : \"testcloudeventspubsub\", \"subject\" : \"Cloud Events Test\", \"id\" : \"someCloudEventId\", \"time\" : \"2021-08-02T09:00:00Z\", \"datacontenttype\" : \"application/cloudevents+json\", \"data\" : {\"orderId\": \"100\"}}' -Uri 'http://localhost:3601/v1.0/publish/order-pub-sub/orders'\n```\n\n----------------------------------------\n\nTITLE: Bulk Publishing Messages to a Topic in Dapr\nDESCRIPTION: This snippet shows how to publish multiple messages to a topic using Dapr's bulk publish API. It includes the endpoint structure and a curl example for sending multiple events with different content types.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha1/publish/bulk/pubsubName/deathStarStatus \\\n  -H 'Content-Type: application/json' \\\n  -d '[\n        {\n            \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  \"first text message\",\n            \"contentType\": \"text/plain\"\n        },\n        {\n            \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  {\n                \"message\": \"second JSON message\"   \n            },\n            \"contentType\": \"application/json\"\n        },\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Dapr\nDESCRIPTION: Configuration for Dapr Runtime logging settings including API logging enablement, URL obfuscation, and health check logging options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nlogging:\n  apiLogging:\n    enabled: false\n    obfuscateURLs: false\n    omitHealthChecks: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkout Service with Dapr in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use Dapr's service invocation in the checkout service by adding the dapr-app-id header to the HTTP request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet axiosConfig = {\n  headers: {\n      \"dapr-app-id\": \"order-processor\"\n  }\n};\nconst res = await axios.post(`${DAPR_HOST}:${DAPR_HTTP_PORT}/orders`, order , axiosConfig);\nconsole.log(\"Order passed: \" + res.config.data);\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Component Configuration in YAML\nDESCRIPTION: YAML configuration for defining a Dapr pluggable component. Includes metadata, component type specification, version, and scoping. Features optional Kubernetes annotation for container injection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: prod-mystore\n  # When running on Kubernetes and automatic container injection, add annotation below:\n  annotations:\n    dapr.io/component-container: >\n      {\n        \"name\": \"my-component\",\n        \"image\": \"<registry>/<image_name>:<image_tag>\"\n      }\nspec:\n  type: your_component_type.your_socket_goes_here\n  version: v1\n  metadata:\nscopes:\n  - backend\n```\n\n----------------------------------------\n\nTITLE: Dapr Resiliency Configuration\nDESCRIPTION: YAML configuration for defining retry and circuit breaker policies for service resilience.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - checkout\n\nspec:\n  policies:\n    retries:\n      retryForever:\n        policy: constant\n        maxInterval: 5s\n        maxRetries: -1 \n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 5s \n        trip: consecutiveFailures >= 5\n\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reminder Partitioning in JavaScript\nDESCRIPTION: Sets up actor reminder partitions in JavaScript using the Dapr JavaScript SDK. Includes examples of registering and unregistering actor reminders with specified timing parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient, DaprServer } from \"@dapr/dapr\";\n\n// Configure the actor runtime with the DaprClientOptions.\nconst clientOptions = {\n  actor: {\n    remindersStoragePartitions: 0,\n  },\n};\n\nconst actor = builder.build(new ActorId(\"my-actor\"));\n\n// Register a reminder, it has a default callback: `receiveReminder`\nawait actor.registerActorReminder(\n  \"reminder-id\", // Unique name of the reminder.\n  Temporal.Duration.from({ seconds: 2 }), // DueTime\n  Temporal.Duration.from({ seconds: 1 }), // Period\n  Temporal.Duration.from({ seconds: 1 }), // TTL\n  100, // State to be sent to reminder callback.\n);\n\n// Delete the reminder\nawait actor.unregisterActorReminder(\"reminder-id\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription for Handling Dead Letter Topics in YAML\nDESCRIPTION: This YAML snippet shows how to configure a subscription for handling dead letter topics, where the 'checkout' application subscribes to the 'poisonMessages' topic and sends these to be handled by the '/failedmessages' endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-deadletter.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: deadlettertopics\nspec:\n  topic: poisonMessages\n  routes:\n    rules:\n      - match:\n        path: /failedMessages\n  pubsubname: pubsub\nscopes:\n- checkout\n```\n\n----------------------------------------\n\nTITLE: Creating a HashiCorp Vault Component Configuration in YAML\nDESCRIPTION: YAML configuration for setting up HashiCorp Vault as a secret store in Dapr. The configuration includes various optional parameters for connecting to a Vault server, authentication, and specifying how to handle secret values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/hashicorp-vault.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: vault\nspec:\n  type: secretstores.hashicorp.vault\n  version: v1\n  metadata:\n  - name: vaultAddr\n    value: [vault_address] # Optional. Default: \"https://127.0.0.1:8200\"\n  - name: caCert # Optional. This or caPath or caPem\n    value: \"[ca_cert]\"\n  - name: caPath # Optional. This or CaCert or caPem\n    value: \"[path_to_ca_cert_file]\"\n  - name: caPem # Optional. This or CaCert or CaPath\n    value : \"[encoded_ca_cert_pem]\"\n  - name: skipVerify # Optional. Default: false\n    value : \"[skip_tls_verification]\"\n  - name: tlsServerName # Optional.\n    value : \"[tls_config_server_name]\"\n  - name: vaultTokenMountPath # Required if vaultToken not provided. Path to token file.\n    value : \"[path_to_file_containing_token]\"\n  - name: vaultToken # Required if vaultTokenMountPath not provided. Token value.\n    value : \"[path_to_file_containing_token]\"\n  - name: vaultKVPrefix # Optional. Default: \"dapr\"\n    value : \"[vault_prefix]\"\n  - name: vaultKVUsePrefix # Optional. default: \"true\"\n    value: \"[true/false]\"\n  - name: enginePath # Optional. default: \"secret\"\n    value: \"secret\"\n  - name: vaultValueType # Optional. default: \"map\"\n    value: \"map\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-out/Fan-in Pattern in Python with Dapr\nDESCRIPTION: Python implementation of a batch processing workflow that demonstrates the fan-out/fan-in pattern. Includes parallel task execution and result aggregation using Dapr workflow activities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom typing import List\nimport dapr.ext.workflow as wf\n\n\ndef batch_processing_workflow(ctx: wf.DaprWorkflowContext, wf_input: int):\n    # get a batch of N work items to process in parallel\n    work_batch = yield ctx.call_activity(get_work_batch, input=wf_input)\n\n    # schedule N parallel tasks to process the work items and wait for all to complete\n    parallel_tasks = [ctx.call_activity(process_work_item, input=work_item) for work_item in work_batch]\n    outputs = yield wf.when_all(parallel_tasks)\n\n    # aggregate the results and send them to another activity\n    total = sum(outputs)\n    yield ctx.call_activity(process_results, input=total)\n\n\ndef get_work_batch(ctx, batch_size: int) -> List[int]:\n    return [i + 1 for i in range(batch_size)]\n\n\ndef process_work_item(ctx, work_item: int) -> int:\n    print(f'Processing work item: {work_item}.')\n    time.sleep(5)\n    result = work_item * 2\n    print(f'Work item {work_item} processed. Result: {result}.')\n    return result\n\n\ndef process_results(ctx, final_result: int):\n    print(f'Final result: {final_result}.')\n```\n\n----------------------------------------\n\nTITLE: Applying OAuth Configuration to Dapr Sidecar in YAML\nDESCRIPTION: This YAML snippet shows how to apply the OAuth configuration to a Dapr sidecar by adding a dapr.io/config annotation to the pod spec in a Kubernetes deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/oauth.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    metadata:\n      ...\n      annotations:\n        dapr.io/enabled: \"true\"\n        ...\n        dapr.io/config: \"pipeline\"\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dapr Workflow Activity in Go\nDESCRIPTION: A code snippet demonstrating how to implement a Dapr workflow activity in Go. The activity receives an input, processes it to modify a shared state variable, and returns a formatted string output.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc TestActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tstage += input\n\n\treturn fmt.Sprintf(\"Stage: %d\", stage), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Sentry Service Configuration with Custom Certificate TTL\nDESCRIPTION: YAML configuration for the Sentry service that changes the workload certificate TTL to 25 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: default\nspec:\n  mtls:\n    enabled: true\n    workloadCertTTL: \"25s\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in Java\nDESCRIPTION: This Java code creates a Dapr client and publishes order events to the 'orders' topic on the 'orderpubsub' component. The code publishes order data with a blocking call and logs the published information to the console.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nDaprClient client = new DaprClientBuilder().build();\nclient.publishEvent(\n\t\tPUBSUB_NAME,\n\t\tTOPIC_NAME,\n\t\torder).block();\nlogger.info(\"Published data: \" + order.getOrderId());\n```\n\n----------------------------------------\n\nTITLE: Defining Resiliency Policies in YAML for Dapr\nDESCRIPTION: This YAML configuration defines resiliency policies including retry and circuit breaker for the order-processor service in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Configuring Bulk Subscribe in TypeScript with Dapr SDK\nDESCRIPTION: This TypeScript example shows how to set up Bulk Subscribe using the Dapr SDK. It demonstrates both default configuration and custom configuration with maxMessagesCount and maxAwaitDurationMs parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DaprServer } from \"@dapr/dapr\";\n\nconst pubSubName = \"orderPubSub\";\nconst topic = \"topicbulk\";\n\nconst daprHost = process.env.DAPR_HOST || \"127.0.0.1\";\nconst daprPort = process.env.DAPR_HTTP_PORT || \"3502\";\nconst serverHost = process.env.SERVER_HOST || \"127.0.0.1\";\nconst serverPort = process.env.APP_PORT || 5001;\n\nasync function start() {\n    const server = new DaprServer({\n        serverHost,\n        serverPort,\n        clientOptions: {\n            daprHost,\n            daprPort,\n        },\n    });\n\n    // Publish multiple messages to a topic with default config.\n    await client.pubsub.bulkSubscribeWithDefaultConfig(pubSubName, topic, (data) => console.log(\"Subscriber received: \" + JSON.stringify(data)));\n\n    // Publish multiple messages to a topic with specific maxMessagesCount and maxAwaitDurationMs.\n    await client.pubsub.bulkSubscribeWithConfig(pubSubName, topic, (data) => console.log(\"Subscriber received: \" + JSON.stringify(data)), 100, 40);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Logging for Dapr Sidecars in Kubernetes\nDESCRIPTION: Kubernetes deployment YAML example showing how to enable JSON-formatted logging for a Dapr sidecar by adding the 'dapr.io/log-as-json: \"true\"' annotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/logs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pythonapp\n  labels:\n    app: python\nspec:\n  selector:\n    matchLabels:\n      app: python\n  template:\n    metadata:\n      labels:\n        app: python\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"pythonapp\"\n        # This enables JSON-formatted logging\n        dapr.io/log-as-json: \"true\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis State Store Component for Dapr\nDESCRIPTION: YAML configuration for the Redis state store component in Dapr. It includes settings for both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/configure-state-pubsub.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\n  namespace: default\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <REPLACE WITH HOSTNAME>\n  - name: redisPassword\n    secretKeyRef:\n      name: redis\n      key: redis-password\n  # uncomment below for connecting to redis cache instances over TLS (ex - Azure Redis Cache)\n  # - name: enableTLS\n  #   value: true \n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd State Store Component in Dapr\nDESCRIPTION: This YAML configuration defines an Etcd state store component for Dapr. It specifies connection details, TLS settings, and other configuration options needed to use Etcd as a state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-etcd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.etcd\n  # Supports v1 and v2. Users should always use v2 by default. There is no\n  # migration path from v1 to v2, see `versioning` below.\n  version: v2\n  metadata:\n  - name: endpoints\n    value: <CONNECTION STRING> # Required. Example: 192.168.0.1:2379,192.168.0.2:2379,192.168.0.3:2379\n  - name: keyPrefixPath\n    value: <KEY PREFIX STRING> # Optional. default: \"\". Example: \"dapr\"\n  - name: tlsEnable\n    value: <ENABLE TLS> # Optional. Example: \"false\"\n  - name: ca\n    value: <CA> # Optional. Required if tlsEnable is `true`.\n  - name: cert\n    value: <CERT> # Optional. Required if tlsEnable is `true`.\n  - name: key\n    value: <KEY> # Optional. Required if tlsEnable is `true`.\n  # Uncomment this if you wish to use Etcd as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Run Configuration\nDESCRIPTION: YAML configuration for running multiple Dapr applications, specifying app directories, IDs, ports, and commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napps:\n  - appDirPath: ./order-processor/\n    appID: order-processor\n    appPort: 9001\n    command: [\"java\", \"-jar\", \"target/OrderProcessingService-0.0.1-SNAPSHOT.jar\"]\n  - appID: checkout\n    appDirPath: ./checkout/\n    command: [\"java\", \"-jar\", \"target/CheckoutService-0.0.1-SNAPSHOT.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Registering Actor Reminder in Dapr\nDESCRIPTION: HTTP POST/PUT request to register a reminder for a Dapr actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nPOST/PUT http://localhost:3500/v1.0/actors/<actorType>/<actorId>/reminders/<name>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job in .NET\nDESCRIPTION: Demonstrates how to schedule a recurring job using the Dapr Jobs Client in .NET. Creates a job named 'prod-db-backup' that runs every minute for a total of 10 times. The job carries a data payload containing database and backup location information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Create a scope so we can access the registered DaprJobsClient\nawait using scope = app.Services.CreateAsyncScope();\nvar daprJobsClient = scope.ServiceProvider.GetRequiredService<DaprJobsClient>();\n\n//Create the payload we wish to present alongside our future job triggers\nvar jobData = new BackupJobData(\"db-backup\", new BackupMetadata(\"my-prod-db\", \"/backup-dir\")); \n\n//Serialize our payload to UTF-8 bytes\nvar serializedJobData = JsonSerializer.SerializeToUtf8Bytes(jobData);\n\n//Schedule our backup job to run every minute, but only repeat 10 times\nawait daprJobsClient.ScheduleJobAsync(\"prod-db-backup\", DaprJobSchedule.FromDuration(TimeSpan.FromMinutes(1)),\n    serializedJobData, repeats: 10);\n```\n\n----------------------------------------\n\nTITLE: Running Python services with Dapr service invocation over HTTP/HTTPS\nDESCRIPTION: Commands to run Python services with Dapr, assigning app IDs, configuring HTTP/HTTPS protocols, and setting Dapr HTTP ports for service invocation between a checkout service and order processor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol http --dapr-http-port 3500 -- python3 checkout/app.py\n\ndarpr run --app-id order-processor --app-port 8001  --app-protocol http --dapr-http-port 3501 -- python3 order-processor/app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol https --dapr-http-port 3500 -- python3 checkout/app.py\n\ndarpr run --app-id order-processor --app-port 8001 --app-protocol https --dapr-http-port 3501 -- python3 order-processor/app.py\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using Python\nDESCRIPTION: This snippet demonstrates how to unsubscribe from configuration updates using the Dapr Python SDK. It creates a Dapr client and calls the unsubscribe_configuration method with the store name and subscription ID, then prints whether the unsubscription was successful.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport time\nimport logging\nfrom dapr.clients import DaprClient\nsubscriptionID = \"\"\n\nwith DaprClient() as d:\n  isSuccess = d.unsubscribe_configuration(store_name='configstore', id=subscriptionID)\n  print(f\"Unsubscribed successfully? {isSuccess}\", flush=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Deployment with Dapr Volume Mounts\nDESCRIPTION: Example Kubernetes Deployment resource showing how to mount multiple volumes to a Dapr sidecar with different access modes. Demonstrates mounting three volumes: two in read-only mode and one in read-write mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-volume-mounts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/volume-mounts: \"my-volume1:/mnt/sample1,my-volume2:/mnt/sample2\"\n        dapr.io/volume-mounts-rw: \"my-volume3:/tmp/sample3\"\n    spec:\n      volumes:\n        - name: my-volume1\n          hostPath:\n            path: /sample\n        - name: my-volume2\n          persistentVolumeClaim:\n            claimName: pv-sample\n        - name: my-volume3\n          emptyDir: {}\n...\n```\n\n----------------------------------------\n\nTITLE: Save and Retrieve State in JavaScript\nDESCRIPTION: Implements state management using the Dapr JavaScript SDK. Shows how to initialize the Dapr client, handle promises, and perform state operations in an asynchronous manner.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst daprHost = \"127.0.0.1\"; \nvar main = function() {\n    for(var i=0;i<10;i++) {\n        sleep(5000);\n        var orderId = Math.floor(Math.random() * (1000 - 1) + 1);\n        start(orderId).catch((e) => {\n            console.error(e);\n            process.exit(1);\n        });\n    }\n}\n\nasync function start(orderId) {\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n    const STATE_STORE_NAME = \"statestore\";\n    //Using Dapr SDK to save and get state\n    await client.state.save(STATE_STORE_NAME, [\n        {\n            key: \"order_1\",\n            value: orderId.toString()\n        },\n        {\n            key: \"order_2\",\n            value: orderId.toString()\n        }\n    ]);\n    var result = await client.state.get(STATE_STORE_NAME, \"order_1\");\n    console.log(\"Result after get: \" + result);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Handling Job Triggers with gRPC in Go\nDESCRIPTION: Implementation of the gRPC callback function for handling triggered Dapr jobs. This function is called by the Dapr runtime when a scheduled job reaches its trigger time.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/jobs-features-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport rtv1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n...\nfunc (s *JobService) OnJobEventAlpha1(ctx context.Context, in *rtv1.JobEventRequest) (*rtv1.JobEventResponse, error) {\n    // Handle the triggered job\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Programmatic Subscription in Python\nDESCRIPTION: This Python Flask application sets up programmatic subscription for CloudEvents with routing rules. It subscribes to the 'inventory' topic and routes events to different endpoints based on the event type, with a default path for unmatched events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport flask\nfrom flask import request, jsonify\nfrom flask_cors import CORS\nimport json\nimport sys\n\napp = flask.Flask(__name__)\nCORS(app)\n\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [\n      {\n        'pubsubname': 'pubsub',\n        'topic': 'inventory',\n        'routes': {\n          'rules': [\n            {\n              'match': 'event.type == \"widget\"',\n              'path': '/widgets'\n            },\n            {\n              'match': 'event.type == \"gadget\"',\n              'path': '/gadgets'\n            },\n          ],\n          'default': '/products'\n        }\n      }]\n    return jsonify(subscriptions)\n\n@app.route('/products', methods=['POST'])\ndef ds_subscriber():\n    print(request.json, flush=True)\n    return json.dumps({'success':True}), 200, {'ContentType':'application/json'}\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Handling CloudEvent in Java Spring Boot\nDESCRIPTION: Shows how to handle a CloudEvent in a Spring Boot application. The incoming event body is deserialized into a CloudEvent object using the built-in deserializer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  @PostMapping(path = \"/TopicName\")\n  public void handleMessage(@RequestBody(required = false) byte[] body) {\n      // Dapr's event is compliant to CloudEvent.\n      CloudEvent event = CloudEvent.deserialize(body);\n  }\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions in Python with Dapr SDK\nDESCRIPTION: Python implementation of state transactions using DaprClient. Demonstrates upsert and delete operations on state store with random order IDs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nimport random\nfrom time import sleep    \nimport requests\nimport logging\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc._state import StateItem\nfrom dapr.clients.grpc._request import TransactionalStateOperation, TransactionOperationType\n\n#code\nlogging.basicConfig(level = logging.INFO)    \nDAPR_STORE_NAME = \"statestore\"\nwhile True:\n    sleep(random.randrange(50, 5000) / 1000)\n    orderId = random.randint(1, 1000)\n    with DaprClient() as client:\n        #Using Dapr SDK to perform the state transactions\n        client.execute_state_transaction(store_name=DAPR_STORE_NAME, operations=[\n            TransactionalStateOperation(\n                operation_type=TransactionOperationType.upsert,\n                key=\"order_3\",\n                data=str(orderId)),\n            TransactionalStateOperation(key=\"order_3\", data=str(orderId)),\n            TransactionalStateOperation(\n                operation_type=TransactionOperationType.delete,\n                key=\"order_2\",\n                data=str(orderId)),\n            TransactionalStateOperation(key=\"order_2\", data=str(orderId))\n        ])\n\n    client.delete_state(store_name=DAPR_STORE_NAME, key=\"order_1\")\n    logging.basicConfig(level = logging.INFO)\n    logging.info('Order requested: ' + str(orderId))\n    logging.info('Result: ' + str(result))\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 -- python3 OrderProcessingService.py\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ gRPC Client for Streaming with Dapr\nDESCRIPTION: C++ code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\ngrpc::ClientContext context;\ncontext.AddMetadata(\"dapr-app-id\", \"server\");\ncontext.AddMetadata(\"dapr-stream\", \"true\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 Pub/Sub Component in Dapr\nDESCRIPTION: YAML configuration for setting up a basic MQTT3 pub/sub component in Dapr, specifying connection details and optional parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt3\n  version: v1\n  metadata:\n    - name: url\n      value: \"tcp://[username][:password]@host.domain[:port]\"\n    # Optional\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"false\"\n    - name: qos\n      value: \"1\"\n    - name: consumerID\n      value: \"channel1\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Raw Messages Using cURL in Dapr\nDESCRIPTION: Example of using cURL to publish a raw message to a Dapr pub/sub topic without CloudEvent wrapping by setting the rawPayload metadata to true.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X \"POST\" http://localhost:3500/v1.0/publish/pubsub/TOPIC_A?metadata.rawPayload=true -H \"Content-Type: application/json\" -d '{\"order-number\": \"345\"}'\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with HTTP in Dapr\nDESCRIPTION: This HTTP example demonstrates how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses a curl command to send a POST request to the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/starwars/transaction \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"operations\": [\n    {\n      \"operation\": \"upsert\",\n      \"request\": {\n        \"key\": \"order1\",\n        \"value\": {\n            \"orderId\": \"7hf8374s\",\n            \"type\": \"book\",\n            \"name\": \"The name of the wind\"\n        }\n      }\n    },\n    {\n      \"operation\": \"upsert\",\n      \"request\": {\n        \"key\": \"order1\",\n        \"value\": {\n            \"orderId\": \"7hf8374s\"\n        },\n        \"metadata\": {\n           \"outbox.projection\": \"true\"\n        },\n        \"contentType\": \"application/json\"\n      }\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Publishing message using HTTP API (PowerShell)\nDESCRIPTION: Uses Invoke-RestMethod in PowerShell to send a POST request to the Dapr HTTP API for publishing a message to the 'orders' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '{\"orderId\": \"100\"}' -Uri 'http://localhost:3601/v1.0/publish/order-pub-sub/orders'\n```\n\n----------------------------------------\n\nTITLE: Correct Thread Management in Workflows\nDESCRIPTION: Examples of correct thread management in workflows across different languages. These practices ensure that all workflow operations execute on the same thread.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Do this!!\nTask t = context.CallActivityAsync(\"DoSomething\");\nawait context.CreateTimer(5000).ConfigureAwait(true);\n```\n\nLANGUAGE: java\nCODE:\n```\n// Do this!!\nctx.callActivity(DoSomethingActivity.class.getName()).await();\nctx.createTimer(Duration.ofSeconds(5)).await();\n```\n\nLANGUAGE: go\nCODE:\n```\n// Do this!\ntask := ctx.CallActivity(DoSomething)\ntask.Await(nil)\n```\n\n----------------------------------------\n\nTITLE: Task Chaining in Go\nDESCRIPTION: Implements task chaining workflow in Go with three sequential steps. Includes input validation, error handling, and mathematical transformations between steps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TaskChainWorkflow(ctx *workflow.WorkflowContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tvar result1 int\n\tif err := ctx.CallActivity(Step1, workflow.ActivityInput(input)).Await(&result1); err != nil {\n\t\treturn nil, err\n\t}\n\tvar result2 int\n\tif err := ctx.CallActivity(Step2, workflow.ActivityInput(input)).Await(&result2); err != nil {\n\t\treturn nil, err\n\t}\n\tvar result3 int\n\tif err := ctx.CallActivity(Step3, workflow.ActivityInput(input)).Await(&result3); err != nil {\n\t\treturn nil, err\n\t}\n\treturn []int{result1, result2, result3}, nil\n}\nfunc Step1(ctx workflow.ActivityContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"Step 1: Received input: %s\", input)\n\treturn input + 1, nil\n}\nfunc Step2(ctx workflow.ActivityContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"Step 2: Received input: %s\", input)\n\treturn input * 2, nil\n}\nfunc Step3(ctx workflow.ActivityContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"Step 3: Received input: %s\", input)\n\treturn int(math.Pow(float64(input), 2)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State TTL in Go using Dapr Client\nDESCRIPTION: Demonstrates setting state TTL using Go Dapr client. Implements a 120 second TTL for the state entry.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-store-ttl.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// dependencies\n\nimport (\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\n// code\n\nmd := map[string]string{\"ttlInSeconds\": \"120\"}\nif err := client.SaveState(ctx, store, \"key1\", []byte(\"hello world\"), md); err != nil {\n   panic(err)\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 go run .\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Output Binding in Go\nDESCRIPTION: Go function that uses the Dapr SDK to invoke a PostgreSQL output binding, inserting order data into the database.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc sqlOutput(order Order) (err error) {\n\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tctx := context.Background()\n\n\tsqlCmd := fmt.Sprintf(\"insert into orders (orderid, customer, price) values (%d, '%s', %s);\", order.OrderId, order.Customer, strconv.FormatFloat(order.Price, 'f', 2, 64))\n\tfmt.Println(sqlCmd)\n\n\t// Insert order using Dapr output binding via Dapr SDK\n\tin := &dapr.InvokeBindingRequest{\n\t\tName:      sqlBindingName,\n\t\tOperation: \"exec\",\n\t\tData:      []byte(\"\"),\n\t\tMetadata:  map[string]string{\"sql\": sqlCmd},\n\t}\n\terr = client.InvokeOutputBinding(ctx, in)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in JavaScript with Dapr SDK\nDESCRIPTION: This JavaScript code uses the Dapr SDK to set up a server that handles the 'checkout' input binding. It logs the received order ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst daprHost = \"127.0.0.1\"; \nconst serverHost = \"127.0.0.1\";\nconst serverPort = \"6002\"; \nconst daprPort = \"3602\"; \n\nstart().catch((e) => {\n    console.error(e);\n    process.exit(1);\n});\n\nasync function start() {\n    const server = new DaprServer({\n        serverHost,\n        serverPort,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n        clientOptions: {\n            daprHost,\n            daprPort, \n        }\n    });\n    await server.binding.receive('checkout', async (orderId) => console.log(`Received Message: ${JSON.stringify(orderId)}`));\n    await server.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in JavaScript gRPC client\nDESCRIPTION: JavaScript code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst metadata = new grpc.Metadata();\nmetadata.add('dapr-app-id', 'server');\n\nclient.sayHello({ name: \"Darth Malgus\" }, metadata)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in Go Using Dapr SDK\nDESCRIPTION: Uses the Dapr Go SDK to retrieve both individual and bulk secrets from the configured secret store. The code creates a Dapr client and demonstrates both GetSecret and GetBulkSecret methods.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//dependencies \nimport (\n\t\"context\"\n\t\"log\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\n//code\nfunc main() {\n\tclient, err := dapr.NewClient()\n\tSECRET_STORE_NAME := \"localsecretstore\"\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n     //Using Dapr SDK to get a secret\n\tsecret, err := client.GetSecret(ctx, SECRET_STORE_NAME, \"secret\", nil)\n\tif secret != nil {\n\t\tlog.Println(\"Result : \")\n\t\tlog.Println(secret)\n\t}\n    //Using Dapr SDK to get bulk secrets\n\tsecretBulk, err := client.GetBulkSecret(ctx, SECRET_STORE_NAME, nil)\n\n\tif secret != nil {\n\t\tlog.Println(\"Result for bulk: \")\n\t\tlog.Println(secretBulk)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr HTTP API (namespace strategy)\nDESCRIPTION: This curl command shows how to save state using the Dapr HTTP API with the 'namespace' strategy. The key will be saved as 'production.myApp||darth'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-share-state.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/redis \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"darth\",\n          \"value\": \"nihilus\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Task Chaining in .NET\nDESCRIPTION: Shows implementation of task chaining in C# with exponential backoff retry policy. Includes error handling and compensation logic for failed tasks, with configurable retry intervals and maximum attempts.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar retryOptions = new WorkflowTaskOptions\n{\n    RetryPolicy = new WorkflowRetryPolicy(\n        firstRetryInterval: TimeSpan.FromMinutes(1),\n        backoffCoefficient: 2.0,\n        maxRetryInterval: TimeSpan.FromHours(1),\n        maxNumberOfAttempts: 10),\n};\n\ntry\n{\n    var result1 = await context.CallActivityAsync<string>(\"Step1\", wfInput, retryOptions);\n    var result2 = await context.CallActivityAsync<byte[]>(\"Step2\", result1, retryOptions);\n    var result3 = await context.CallActivityAsync<long[]>(\"Step3\", result2, retryOptions);\n    return string.Join(\", \", result4);\n}\ncatch (TaskFailedException)\n{\n    await context.CallActivityAsync<long[]>(\"MyCompensation\", options: retryOptions);\n    throw;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Uppercase Middleware in Dapr Configuration\nDESCRIPTION: YAML configuration showing how to apply the uppercase middleware in a Dapr HTTP pipeline configuration. This defines the processing pipeline that includes the uppercase handler.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-uppercase.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: uppercase\n      type: middleware.http.uppercase\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Streams Pub/Sub Component in YAML\nDESCRIPTION: This YAML configuration sets up a Redis Streams pub/sub component named 'redis-pubsub'. It specifies the Redis host, password, consumer ID, and other optional settings like Entra ID support and TLS enablement.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: redis-pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"KeFg23!\"\n  - name: consumerID\n    value: \"channel1\"\n  - name: useEntraID\n    value: \"true\"\n  - name: enableTLS\n    value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Task Chaining in Java\nDESCRIPTION: Implements task chaining workflow pattern in Java with separate activity implementations. Includes workflow context handling, activity execution, and result aggregation with proper logging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ChainWorkflow extends Workflow {\n    @Override\n    public WorkflowStub create() {\n        return ctx -> {\n            StringBuilder sb = new StringBuilder();\n            String wfInput = ctx.getInput(String.class);\n            String result1 = ctx.callActivity(\"Step1\", wfInput, String.class).await();\n            String result2 = ctx.callActivity(\"Step2\", result1, String.class).await();\n            String result3 = ctx.callActivity(\"Step3\", result2, String.class).await();\n            String result = sb.append(result1).append(',').append(result2).append(',').append(result3).toString();\n            ctx.complete(result);\n        };\n    }\n}\n\n    class Step1 implements WorkflowActivity {\n        @Override\n        public Object run(WorkflowActivityContext ctx) {\n            Logger logger = LoggerFactory.getLogger(Step1.class);\n            logger.info(\"Starting Activity: \" + ctx.getName());\n            return null;\n        }\n    }\n\n    class Step2 implements WorkflowActivity {\n        @Override\n        public Object run(WorkflowActivityContext ctx) {\n            Logger logger = LoggerFactory.getLogger(Step2.class);\n            logger.info(\"Starting Activity: \" + ctx.getName());\n            return null;\n        }\n    }\n\n    class Step3 implements WorkflowActivity {\n        @Override\n        public Object run(WorkflowActivityContext ctx) {\n            Logger logger = LoggerFactory.getLogger(Step3.class);\n            logger.info(\"Starting Activity: \" + ctx.getName());\n            return null;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Huggingface Conversation Component\nDESCRIPTION: YAML configuration for setting up the Huggingface conversation component in Dapr. Includes essential settings like API key, model selection, and cache TTL configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/hugging-face.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: huggingface\nspec:\n  type: conversation.huggingface\n  metadata:\n  - name: key\n    value: mykey\n  - name: model\n    value: meta-llama/Meta-Llama-3-8B\n  - name: cacheTTL\n    value: 10m\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Rotation with Primary and Secondary Keys\nDESCRIPTION: YAML configuration showing how to set up both primary and secondary encryption keys to support key rotation. This allows Dapr to decrypt data with the old key while encrypting new data with the new key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-encrypt-state.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n- name: primaryEncryptionKey\n    secretKeyRef:\n      name: mysecret\n      key: mykey\n- name: secondaryEncryptionKey\n    secretKeyRef:\n      name: mysecret2\n      key: mykey2\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using JavaScript\nDESCRIPTION: This snippet demonstrates how to unsubscribe from configuration updates using the Dapr JavaScript SDK. It creates a Dapr client, subscribes to configuration updates, and then unsubscribes after a timeout by calling the stop method on the subscription stream.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient } from \"@dapr/dapr\";\n\n// JS SDK does not support Configuration API over HTTP protocol yet\nconst protocol = CommunicationProtocolEnum.GRPC;\nconst host = process.env.DAPR_HOST ?? \"localhost\";\nconst port = process.env.DAPR_GRPC_PORT ?? 3500;\n\nconst DAPR_CONFIGURATION_STORE = \"configstore\";\nconst CONFIGURATION_ITEMS = [\"orderId1\", \"orderId2\"];\n\nasync function main() {\n  const client = new DaprClient(host, port, protocol);\n\n  try {\n    const stream = await client.configuration.subscribeWithKeys(\n      DAPR_CONFIGURATION_STORE,\n      CONFIGURATION_ITEMS,\n      (config) => {\n        console.log(\"Configuration update\", JSON.stringify(config.items));\n      }\n    );\n    setTimeout(() => {\n      // Unsubscribe to config updates\n      stream.stop();\n      console.log(\"App unsubscribed to config changes\");\n      process.exit(0);\n    }, 20000);\n  } catch (error) {\n    console.log(\"Error subscribing to config updates, err:\" + error);\n    process.exit(1);\n  }\n}\n\nmain().catch((e) => console.error(e));\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions in JavaScript with Dapr SDK\nDESCRIPTION: JavaScript implementation of state transactions using the Dapr SDK. Shows how to perform upsert and delete operations using async/await pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprClient, HttpMethod, CommunicationProtocolEnum } from '@dapr/dapr'; \n\n//code\nconst daprHost = \"127.0.0.1\"; \nvar main = function() {\n    for(var i=0;i<10;i++) {\n        sleep(5000);\n        var orderId = Math.floor(Math.random() * (1000 - 1) + 1);\n        start(orderId).catch((e) => {\n            console.error(e);\n            process.exit(1);\n        });\n    }\n}\n\nasync function start(orderId) {\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n\n    const STATE_STORE_NAME = \"statestore\";\n    //Using Dapr SDK to save and retrieve multiple states\n    await client.state.transaction(STATE_STORE_NAME, [\n        {\n        operation: \"upsert\",\n        request: {\n            key: \"order_3\",\n            value: orderId.toString()\n        }\n        },\n        {\n        operation: \"delete\",\n        request: {\n            key: \"order_2\"\n        }\n        }\n    ]);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nmain();\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 npm start\n```\n\n----------------------------------------\n\nTITLE: Dapr Run Examples in Bash\nDESCRIPTION: Examples showing how to use the Dapr run command with different types of applications, including .NET, Java, NodeJS, Python, and Go applications. Also demonstrates various configuration options like unix domain sockets, API logging, multiple resource paths, and multi-app run templates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-run.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run a .NET application\ndapr run --app-id myapp --app-port 5000 -- dotnet run\n\n# Run a .Net application with unix domain sockets\ndapr run --app-id myapp --app-port 5000 --unix-domain-socket /tmp -- dotnet run\n\n# Run a Java application\ndapr run --app-id myapp -- java -jar myapp.jar\n\n# Run a NodeJs application that listens to port 3000\ndapr run --app-id myapp --app-port 3000 -- node myapp.js\n\n# Run a Python application\ndapr run --app-id myapp -- python myapp.py\n\n# Run sidecar only\ndapr run --app-id myapp\n\n# Run a gRPC application written in Go (listening on port 3000)\ndapr run --app-id myapp --app-port 5000 --app-protocol grpc -- go run main.go\n\n# Run a NodeJs application that listens to port 3000 with API logging enabled\ndapr run --app-id myapp --app-port 3000 --enable-api-logging  -- node myapp.js\n\n# Pass multiple resource paths\ndapr run --app-id myapp --resources-path path1 --resources-path path2\n\n# Run the multi-app run template file\ndapr run -f dapr.yaml\n\n# Run the multi-app run template file on Kubernetes\ndapr run -k -f dapr.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Subscription in Java\nDESCRIPTION: Java code that defines a Spring POST mapping endpoint to receive CloudEvent messages from the 'orders' topic. This endpoint matches the route defined in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport io.dapr.client.domain.CloudEvent;\n\n //Subscribe to a topic\n@PostMapping(path = \"/orders\")\npublic Mono<Void> getCheckout(@RequestBody(required = false) CloudEvent<String> cloudEvent) {\n    return Mono.fromRunnable(() -> {\n        try {\n            log.info(\"Subscriber received: \" + cloudEvent.getData());\n        } \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Workflows in Go\nDESCRIPTION: Go type definitions for workflow management operations including starting, getting status, and managing workflow lifecycle.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Start workflow\ntype StartWorkflowRequest struct {\n\tInstanceID        string // Optional instance identifier\n\tWorkflowComponent string\n\tWorkflowName      string\n\tOptions           map[string]string // Optional metadata\n\tInput             any               // Optional input\n\tSendRawInput      bool              // Set to True in order to disable serialization on the input\n}\n\ntype StartWorkflowResponse struct {\n\tInstanceID string\n}\n\n// Get the workflow status\ntype GetWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n}\n\ntype GetWorkflowResponse struct {\n\tInstanceID    string\n\tWorkflowName  string\n\tCreatedAt     time.Time\n\tLastUpdatedAt time.Time\n\tRuntimeStatus string\n\tProperties    map[string]string\n}\n\n// Purge workflow\ntype PurgeWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n}\n\n// Terminate workflow\ntype TerminateWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n}\n\n// Pause workflow\ntype PauseWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n}\n\n// Resume workflow\ntype ResumeWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n}\n\n// Raise an event for the running workflow\ntype RaiseEventWorkflowRequest struct {\n\tInstanceID        string\n\tWorkflowComponent string\n\tEventName         string\n\tEventData         any\n\tSendRawData       bool // Set to True in order to disable serialization on the data\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Hubs Binding Component in YAML\nDESCRIPTION: This YAML configuration sets up an Azure Event Hubs binding component in Dapr. It includes essential fields such as event hub name, consumer group, connection details, and optional settings for entity management and checkpointing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventhubs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.eventhubs\n  version: v1\n  metadata:\n    # Hub name (\"topic\")\n    - name: eventHub\n      value: \"mytopic\"\n    - name: consumerGroup\n      value: \"myapp\"\n    # Either connectionString or eventHubNamespace is required\n    # Use connectionString when *not* using Microsoft Entra ID\n    - name: connectionString\n      value: \"Endpoint=sb://{EventHubNamespace}.servicebus.windows.net/;SharedAccessKeyName={PolicyName};SharedAccessKey={Key};EntityPath={EventHub}\"\n    # Use eventHubNamespace when using Microsoft Entra ID\n    - name: eventHubNamespace\n      value: \"namespace\"\n    - name: enableEntityManagement\n      value: \"false\"\n    - name: enableInOrderMessageDelivery\n      value: \"false\"\n    # The following four properties are needed only if enableEntityManagement is set to true\n    - name: resourceGroupName\n      value: \"test-rg\"\n    - name: subscriptionID\n      value: \"value of Azure subscription ID\"\n    - name: partitionCount\n      value: \"1\"\n    - name: messageRetentionInDays\n      value: \"3\"\n    # Checkpoint store attributes\n    - name: storageAccountName\n      value: \"myeventhubstorage\"\n    - name: storageAccountKey\n      value: \"112233445566778899\"\n    - name: storageContainerName\n      value: \"myeventhubstoragecontainer\"\n    # Alternative to passing storageAccountKey\n    - name: storageConnectionString\n      value: \"DefaultEndpointsProtocol=https;AccountName=<account>;AccountKey=<account-key>\"\n    # Optional metadata\n    - name: getAllMessageProperties\n      value: \"true\"\n    - name: direction\n      value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Kafka PubSub Component in YAML\nDESCRIPTION: A comprehensive YAML configuration for setting up Apache Kafka as a pub/sub component in Dapr. Includes required broker settings, authentication configuration, and optional parameters for customizing behavior like message size limits, retry intervals, and Schema Registry integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers # Required. Kafka broker connection setting\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup # Optional. Used for input bindings.\n    value: \"{namespace}\"\n  - name: consumerID # Optional. If not supplied, runtime will create one.\n    value: \"channel1\"\n  - name: clientID # Optional. Used as client tracing ID by Kafka brokers.\n    value: \"my-dapr-app-id\"\n  - name: authType # Required.\n    value: \"password\"\n  - name: saslUsername # Required if authType is `password`.\n    value: \"adminuser\"\n  - name: saslPassword # Required if authType is `password`.\n    secretKeyRef:\n      name: kafka-secrets\n      key: saslPasswordSecret\n  - name: saslMechanism\n    value: \"SHA-512\"\n  - name: maxMessageBytes # Optional.\n    value: 1024\n  - name: consumeRetryInterval # Optional.\n    value: 200ms\n  - name: heartbeatInterval # Optional.\n    value: 5s\n  - name: sessionTimeout # Optional.\n    value: 15s\n  - name: version # Optional.\n    value: 2.0.0\n  - name: disableTls # Optional. Disable TLS. This is not safe for production!! You should read the `Mutual TLS` section for how to use TLS.\n    value: \"true\"\n  - name: consumerFetchMin # Optional. Advanced setting. The minimum number of message bytes to fetch in a request - the broker will wait until at least this many are available.\n    value: 1\n  - name: consumerFetchDefault # Optional. Advanced setting. The default number of message bytes to fetch from the broker in each request.\n    value: 2097152\n  - name: channelBufferSize # Optional. Advanced setting. The number of events to buffer in internal and external channels.\n    value: 512\n  - name: schemaRegistryURL # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry URL.\n    value: http://localhost:8081\n  - name: schemaRegistryAPIKey # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry API Key.\n    value: XYAXXAZ\n  - name: schemaRegistryAPISecret # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry credentials API Secret.\n    value: \"ABCDEFGMEADFF\"\n  - name: schemaCachingEnabled # Optional. When using Schema Registry Avro serialization/deserialization. Enables caching for schemas.\n    value: true\n  - name: schemaLatestVersionCacheTTL # Optional. When using Schema Registry Avro serialization/deserialization. The TTL for schema caching when publishing a message with latest schema available.\n    value: 5m\n  - name: escapeHeaders # Optional.\n    value: false\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Verification with Inline PEM CA Certificate\nDESCRIPTION: YAML configuration showing how to include a multi-line PEM certificate directly in the component configuration for TLS server verification when connecting to Vault over HTTPS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/hashicorp-vault.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: vault\nspec:\n  type: secretstores.hashicorp.vault\n  version: v1\n  metadata:\n  - name: vaultAddr\n    value: https://127.0.0.1:8200\n  - name: caPem\n    value: |-\n          -----BEGIN CERTIFICATE-----\n          << the rest of your PEM file content's here, indented appropriately. >>\n          -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Triggering in ControllerActor with C#\nDESCRIPTION: This snippet demonstrates the TriggerAlarmForAllDetectors method of the ControllerActor. It retrieves all registered device IDs, triggers their alarms, and sets a reminder to refresh the alarm state.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task TriggerAlarmForAllDetectors()\n{\n    var deviceIds =  await ListRegisteredDeviceIdsAsync();\n    foreach (var deviceId in deviceIds)\n    {\n        var actorId = new ActorId(deviceId);\n        var proxySmartDevice = ProxyFactory.CreateActorProxy<ISmartDevice>(actorId, \"SmokeDetectorActor\");\n        await proxySmartDevice.SoundAlarm();\n    }\n\n    // Register a reminder to refresh and clear alarm state every 15 seconds\n    await this.RegisterReminderAsync(\"AlarmRefreshReminder\", null, TimeSpan.FromSeconds(15), TimeSpan.FromSeconds(15));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes with Helm\nDESCRIPTION: Commands to add the Bitnami Helm repo, update it, and install Redis in a Kubernetes cluster. It also shows how to check if the Redis pods are running.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/configure-state-pubsub.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm install redis bitnami/redis --set image.tag=6.2\n\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Processor Service in JavaScript\nDESCRIPTION: This JavaScript code snippet shows the implementation of the order-processor service, which receives orders via HTTP POST requests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/orders', (req, res) => {\n    console.log(\"Order received:\", req.body);\n    res.sendStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL State Store without Outbox Pattern in Dapr\nDESCRIPTION: YAML configuration for a standard MySQL state store component without the outbox pattern. This can be used alongside an outbox-enabled component for flexibility.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mysql\nspec:\n  type: state.mysql\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n```\n\n----------------------------------------\n\nTITLE: Redis PubSub Component Configuration\nDESCRIPTION: Dapr component configuration for Redis pub/sub, defining the component name, type and connection details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr gRPC Client\nDESCRIPTION: Go code showing how to save state using Dapr gRPC client.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// save state with the key key1\nerr = client.SaveState(ctx, \"statestore\", \"key1\", data)\nif err != nil {\n  log.Panic(err)\n}\nlog.Println(\"data saved\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Changes via HTTP Request in Dapr\nDESCRIPTION: HTTP GET request format for subscribing to configuration changes in a Dapr configuration store. This allows applications to be notified when configurations are updated or deleted.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/<storename>/subscribe\n```\n\n----------------------------------------\n\nTITLE: Node.js Service Implementation Example\nDESCRIPTION: Example Node.js implementation of a service endpoint that handles addition operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/add', (req, res) => {\n  let args = req.body;\n  const [operandOne, operandTwo] = [Number(args['arg1']), Number(args['arg2'])];\n\n  let result = operandOne + operandTwo;\n  res.send(result.toString());\n});\n\napp.listen(port, () => console.log(`Listening on port ${port}!`));\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SNS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an AWS SNS binding component in Dapr. Includes required fields for topic ARN, region, endpoint, and AWS credentials. The component supports output binding with create operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sns.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.sns\n  version: v1\n  metadata:\n  - name: topicArn\n    value: \"mytopic\"\n  - name: region\n    value: \"us-west-2\"\n  - name: endpoint\n    value: \"sns.us-west-2.amazonaws.com\"\n  - name: accessKey\n    value: \"*****************\"\n  - name: secretKey\n    value: \"*****************\"\n  - name: sessionToken\n    value: \"*****************\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Go with Dapr\nDESCRIPTION: This snippet demonstrates how to subscribe to configuration updates using the Dapr Go SDK. It creates a Dapr client, subscribes to specific configuration keys, and handles updates for 20 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n  \"fmt\"\n  \"time\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n  subscribeID, err := client.SubscribeConfigurationItems(ctx, \"configstore\", []string{\"orderId1\", \"orderId2\"}, func(id string, items map[string]*dapr.ConfigurationItem) {\n  for k, v := range items {\n    fmt.Printf(\"get updated config key = %s, value = %s version = %s \\n\", k, v.Value, v.Version)\n  }\n  })\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Sleep(20*time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Event Hubs Configuration with Microsoft Entra ID Authentication\nDESCRIPTION: This YAML configuration demonstrates how to set up an Azure Event Hubs pub/sub component using Microsoft Entra ID authentication instead of connection strings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-eventhubs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: eventhubs-pubsub\nspec:\n  type: pubsub.azure.eventhubs\n  version: v1\n  metadata:\n    # Azure Authentication Used\n    - name: azureTenantId\n      value: \"***\"\n    - name: azureClientId\n      value: \"***\"\n    - name: azureClientSecret\n      value: \"***\"\n    - name: eventHubNamespace \n      value: \"namespace\"\n    - name: enableEntityManagement\n      value: \"false\"\n    # The following four properties are needed only if enableEntityManagement is set to true\n    - name: resourceGroupName\n      value: \"test-rg\"\n    - name: subscriptionID\n      value: \"value of Azure subscription ID\"\n    - name: partitionCount\n      value: \"1\"\n    - name: messageRetentionInDays\n    # Checkpoint store attributes\n    # In this case, we're using Microsoft Entra ID to access the storage account too\n    - name: storageAccountName\n      value: \"myeventhubstorage\"\n    - name: storageContainerName\n      value: \"myeventhubstoragecontainer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing and Subscription Scopes for Redis Pub/Sub Component\nDESCRIPTION: This YAML configuration demonstrates how to limit which applications can publish or subscribe to specific topics using the publishingScopes and subscriptionScopes metadata properties. In this example, app1 can only publish to topic1, app2 can publish to topic2 and topic3, and app3 cannot publish to any topic. For subscriptions, app2 cannot subscribe to any topic, while app3 can only subscribe to topic1.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: \"localhost:6379\"\n  - name: redisPassword\n    value: \"\"\n  - name: publishingScopes\n    value: \"app1=topic1;app2=topic2,topic3;app3=\"\n  - name: subscriptionScopes\n    value: \"app2=;app3=topic1\"\n```\n\n----------------------------------------\n\nTITLE: Non-Dapr Endpoint Invocation Request Format\nDESCRIPTION: HTTP request format for invoking methods on non-Dapr endpoints using HTTPEndpoint resource or FQDN URL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPATCH/POST/GET/PUT/DELETE http://localhost:<daprPort>/v1.0/invoke/<HTTPEndpoint name>/method/<method-name>\\n\\nPATCH/POST/GET/PUT/DELETE http://localhost:<daprPort>/v1.0/invoke/<FQDN URL>/method/<method-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Smoke Detection in SmokeDetectorActor with C#\nDESCRIPTION: This snippet shows the DetectSmokeAsync method of the SmokeDetectorActor. When smoke is detected, it creates a proxy to the ControllerActor and triggers the alarm for all detectors.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task DetectSmokeAsync()\n{\n    var controllerActorId = new ActorId(\"controller\");\n    var controllerActorType = \"ControllerActor\";\n    var controllerProxy = ProxyFactory.CreateActorProxy<IController>(controllerActorId, controllerActorType);\n    await controllerProxy.TriggerAlarmForAllDetectors();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Pub/Sub Component in Dapr\nDESCRIPTION: YAML configuration for setting up a GCP Pub/Sub component in Dapr. This snippet shows all available metadata fields including authentication settings, project configuration, connection parameters, and message handling options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-gcp-pubsub.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: gcp-pubsub\nspec:\n  type: pubsub.gcp.pubsub\n  version: v1\n  metadata:\n  - name: type\n    value: service_account\n  - name: projectId\n    value: <PROJECT_ID> # replace\n  - name: endpoint # Optional.\n    value: \"http://localhost:8085\"\n  - name: consumerID # Optional - defaults to the app's own ID\n    value: <CONSUMER_ID>\n  - name: identityProjectId\n    value: <IDENTITY_PROJECT_ID> # replace\n  - name: privateKeyId\n    value: <PRIVATE_KEY_ID> #replace\n  - name: clientEmail\n    value: <CLIENT_EMAIL> #replace\n  - name: clientId\n    value: <CLIENT_ID> # replace\n  - name: authUri\n    value: https://accounts.google.com/o/oauth2/auth\n  - name: tokenUri\n    value: https://oauth2.googleapis.com/token\n  - name: authProviderX509CertUrl\n    value: https://www.googleapis.com/oauth2/v1/certs\n  - name: clientX509CertUrl\n    value: https://www.googleapis.com/robot/v1/metadata/x509/<PROJECT_NAME>.iam.gserviceaccount.com #replace PROJECT_NAME\n  - name: privateKey\n    value: <PRIVATE_KEY> # replace x509 cert\n  - name: disableEntityManagement\n    value: \"false\"\n  - name: enableMessageOrdering\n    value: \"false\"\n  - name: orderingKey # Optional\n    value: <ORDERING_KEY>\n  - name: maxReconnectionAttempts # Optional\n    value: 30\n  - name: connectionRecoveryInSec # Optional\n    value: 2\n  - name: deadLetterTopic # Optional\n    value: <EXISTING_PUBSUB_TOPIC>\n  - name: maxDeliveryAttempts # Optional\n    value: 5\n  - name: maxOutstandingMessages # Optional\n    value: 1000\n  - name: maxOutstandingBytes # Optional\n    value: 1000000000\n  - name: maxConcurrentConnections # Optional\n    value: 10\n```\n\n----------------------------------------\n\nTITLE: Programmatic Priority Queue Subscription in Go\nDESCRIPTION: Go code example for setting up a priority queue subscription programmatically.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n\t\"encoding/json\"\n\t\"net/http\"\n\nconst appPort = 3000\n\ntype subscription struct {\n\tPubsubName string            `json:\"pubsubname\"`\n\tTopic      string            `json:\"topic\"`\n\tMetadata   map[string]string `json:\"metadata,omitempty\"`\n\tRoutes     routes            `json:\"routes\"`\n}\n\ntype routes struct {\n\tRules   []rule `json:\"rules,omitempty\"`\n\tDefault string `json:\"default,omitempty\"`\n}\n\nfunc configureSubscribeHandler(w http.ResponseWriter, _ *http.Request) {\n\tt := []subscription{\n\t\t{\n\t\t\tPubsubName: \"pubsub\",\n\t\t\tTopic:      \"checkout\",\n\t\t\tRoutes: routes{\n\t\t\t\tDefault: \"/orders\",\n\t\t\t},\n      Metadata: map[string]string{\n        \"maxPriority\": \"3\"\n      },\n\t\t},\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Lock Component in YAML for Dapr\nDESCRIPTION: This YAML snippet defines the configuration for a Redis lock component in Dapr. It includes various optional fields for customizing the Redis connection, authentication, and behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/redis-lock.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: lock.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <HOST>\n  - name: redisPassword #Optional.\n    value: <PASSWORD>\n  - name: useEntraID\n    value: <bool> # Optional. Allowed: true, false.\n  - name: enableTLS\n    value: <bool> # Optional. Allowed: true, false.\n  - name: failover\n    value: <bool> # Optional. Allowed: true, false.\n  - name: sentinelMasterName\n    value: <string> # Optional\n  - name: maxRetries\n    value: # Optional\n  - name: maxRetryBackoff\n    value: # Optional\n  - name: failover\n    value: # Optional\n  - name: sentinelMasterName\n    value: # Optional\n  - name: redeliverInterval\n    value: # Optional\n  - name: processingTimeout\n    value: # Optional\n  - name: redisType\n    value: # Optional\n  - name: redisDB\n    value: # Optional\n  - name: redisMaxRetries\n    value: # Optional\n  - name: redisMinRetryInterval\n    value: # Optional\n  - name: redisMaxRetryInterval\n    value: # Optional\n  - name: dialTimeout\n    value: # Optional\n  - name: readTimeout\n    value: # Optional\n  - name: writeTimeout\n    value: # Optional\n  - name: poolSize\n    value: # Optional\n  - name: poolTimeout\n    value: # Optional\n  - name: maxConnAge\n    value: # Optional\n  - name: minIdleConns\n    value: # Optional\n  - name: idleCheckFrequency\n    value: # Optional\n  - name: idleTimeout\n    value: # Optional\n```\n\n----------------------------------------\n\nTITLE: Getting State Data with cURL\nDESCRIPTION: Example of retrieving state data for a specific key using HTTP GET request with curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/state/starwars/planet?metadata.contentType=application/json\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudEvents Using Dapr CLI\nDESCRIPTION: Command-line example showing how to publish a CloudEvent to the 'orders' topic using the Dapr CLI. This approach lets you specify the message content directly.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr publish --publish-app-id orderprocessing --pubsub order-pub-sub --topic orders --data '{\\\"orderId\\\": \\\"100\\\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Pub/Sub with TLS in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up an MQTT pub/sub component with TLS communication. It includes additional metadata fields for CA certificate, client certificate, and client key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt\n  version: v1\n  metadata:\n  - name: url\n    value: \"ssl://host.domain[:port]\"\n  - name: qos\n    value: 1\n  - name: retain\n    value: \"false\"\n  - name: cleanSession\n    value: \"false\"\n  - name: caCert\n    value: ${{ myLoadedCACert }}\n  - name: clientCert\n    value: ${{ myLoadedClientCert }}\n  - name: clientKey\n    secretKeyRef:\n      name: myMqttClientKey\n      key: myMqttClientKey\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Go\nDESCRIPTION: Subscribes to configuration updates using the Dapr Go SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nerr = client.SubscribeConfigurationItems(ctx, DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS, func(id string, config map[string]*dapr.ConfigurationItem) {\n\t// First invocation when app subscribes to config changes only returns subscription id\n\tif len(config) == 0 {\n\t\tfmt.Println(\"App subscribed to config changes with subscription id: \" + id)\n\t\tsubscriptionId = id\n\t\treturn\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Partition Key and Headers\nDESCRIPTION: Examples of publishing messages to Pulsar topics with partition keys and custom message headers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myPlusar/myTopic?metadata.partitionKey=key1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myPlusar/myTopic?metadata.correlationId=myCorrelationID&metadata.partitionKey=key1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Java Workflow Class Implementation\nDESCRIPTION: Java example demonstrating workflow class implementation with activity calls and logging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoWorkflow extends Workflow {\n  @Override\n  public WorkflowStub create() {\n    return ctx -> {\n      ctx.getLogger().info(\"Starting Workflow: \" + ctx.getName());\n      ctx.getLogger().info(\"Calling Activity...\");\n      var input = new DemoActivityInput(\"Hello Activity!\");\n      var output = ctx.callActivity(DemoWorkflowActivity.class.getName(), input, DemoActivityOutput.class).await();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Job Handler in .NET\nDESCRIPTION: Configures an ASP.NET Core application to handle job triggers by registering a job handler endpoint. The handler routes triggered jobs based on job name and processes job payload data. This example sets up a handler for the 'prod-db-backup' job.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text;\nusing System.Text.Json;\nusing Dapr.Jobs;\nusing Dapr.Jobs.Extensions;\nusing Dapr.Jobs.Models;\nusing Dapr.Jobs.Models.Responses;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDaprJobsClient();\nvar app = builder.Build();\n\n//Registers an endpoint to receive and process triggered jobs\nvar cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5));\napp.MapDaprScheduledJobHandler((string jobName, ReadOnlyMemory<byte> jobPayload, ILogger logger, CancellationToken cancellationToken) => {\n  logger?.LogInformation(\"Received trigger invocation for job '{jobName}'\", jobName);\n  switch (jobName)\n  {\n    case \"prod-db-backup\":\n      // Deserialize the job payload metadata\n      var jobData = JsonSerializer.Deserialize<BackupJobData>(jobPayload);\n      \n      // Process the backup operation - we assume this is implemented elsewhere in your code\n      await BackupDatabaseAsync(jobData, cancellationToken);\n      break;\n  }\n}, cancellationTokenSource.Token);\n\nawait app.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata via HTTP\nDESCRIPTION: This snippet shows how to execute a state transaction using HTTP requests to the Dapr sidecar, overriding CloudEvent metadata fields. It demonstrates setting custom metadata in the request body.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/starwars/transaction \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"2\"\n            }\n          },\n        ],\n        \"metadata\": {\n          \"id\": \"unique-business-process-id\",\n          \"source\": \"CustomersApp\",\n          \"type\": \"CustomerCreated\",\n          \"subject\": \"123\",\n          \"my-custom-ce-field\": \"abc\",\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Java Checkout Service with Dapr Invocation\nDESCRIPTION: Java code snippet demonstrating how to invoke the 'order-processor' service using Dapr's service invocation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n.header(\"Content-Type\", \"application/json\")\n.header(\"dapr-app-id\", \"order-processor\")\n\nHttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(\"Order passed: \"+ orderId)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go gRPC Client for Streaming with Dapr\nDESCRIPTION: Go code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", \"server\")\nctx = metadata.AppendToOutgoingContext(ctx, \"dapr-stream\", \"true\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in JavaScript Using Dapr SDK\nDESCRIPTION: Uses the Dapr JavaScript SDK to retrieve both individual and bulk secrets from the configured secret store. The code initializes a Dapr client and demonstrates both get and getBulk methods.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies \nimport { DaprClient, HttpMethod, CommunicationProtocolEnum } from '@dapr/dapr'; \n\n//code\nconst daprHost = \"127.0.0.1\"; \n\nasync function main() {\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n    const SECRET_STORE_NAME = \"localsecretstore\";\n    //Using Dapr SDK to get a secret\n    var secret = await client.secret.get(SECRET_STORE_NAME, \"secret\");\n    console.log(\"Result: \" + secret);\n    //Using Dapr SDK to get bulk secrets\n    secret = await client.secret.getBulk(SECRET_STORE_NAME);\n    console.log(\"Result for bulk: \" + secret);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Acquiring a Lock in Dapr\nDESCRIPTION: The HTTP request format for acquiring a distributed lock via Dapr. This endpoint requires the Dapr port and storename as parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0-alpha1/lock/<storename>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a MySQL binding component in Dapr. It includes required and optional metadata fields for connection and performance tuning.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.mysql\n  version: v1\n  metadata:\n    - name: url # Required, define DB connection in DSN format\n      value: \"<CONNECTION_STRING>\"\n    - name: pemPath # Optional\n      value: \"<PEM PATH>\"\n    - name: maxIdleConns\n      value: \"<MAX_IDLE_CONNECTIONS>\"\n    - name: maxOpenConns\n      value: \"<MAX_OPEN_CONNECTIONS>\"\n    - name: connMaxLifetime\n      value: \"<CONNECTION_MAX_LIFE_TIME>\"\n    - name: connMaxIdleTime\n      value: \"<CONNECTION_MAX_IDLE_TIME>\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Kubernetes Deployment after Token Rotation\nDESCRIPTION: Triggers a rolling restart of a Kubernetes deployment to pick up the new API token after rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl rollout restart deployment/<deployment-name> --namespace <namespace-name>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Topic in .NET\nDESCRIPTION: This C# code defines an HTTP POST endpoint that subscribes to the 'orders' topic on the 'orderpubsub' component. It uses the Dapr Topic attribute to register the subscription and prints received order information to the console.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_21\n\nLANGUAGE: cs\nCODE:\n```\n// Dapr subscription in [Topic] routes orders topic to this route\napp.MapPost(\"/orders\", [Topic(\"orderpubsub\", \"orders\")] (Order order) => {\n    Console.WriteLine(\"Subscriber received : \" + order);\n    return Results.Ok(order);\n});\n\npublic record Order([property: JsonPropertyName(\"orderId\")] int OrderId);\n```\n\n----------------------------------------\n\nTITLE: Task Parallelism Control in C#\nDESCRIPTION: Code snippet showing how to manage parallel task execution with a maximum concurrency limit. It demonstrates task batching, waiting for task completion, and aggregating results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nif (inFlightTasks.Count >= MaxParallelism)\n{\n  var finishedTask = await Task.WhenAny(inFlightTasks);\n  results.Add(finishedTask.Result);\n  inFlightTasks.Remove(finishedTask);\n}\n\ninFlightTasks.Add(context.CallActivityAsync<int>(\"ProcessWorkItem\", workItem));\n}\nresults.AddRange(await Task.WhenAll(inFlightTasks));\n\nvar sum = results.Sum(t => t);\nawait context.CallActivityAsync(\"PostResults\", sum);\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Workflow Activity Counter\nDESCRIPTION: Defines a Python workflow activity that implements a counter using WorkflowActivityContext. The activity increments a counter and prints the new value.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@wfr.activity(name='hello_act')\ndef hello_act(ctx: WorkflowActivityContext, wf_input):\n    global counter\n    counter += wf_input\n    print(f'New counter value is: {counter}!', flush=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeebe JobWorker Binding Component in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Zeebe JobWorker binding component in Dapr. It includes various metadata fields for customizing the worker's behavior, such as gateway address, worker name, job type, and performance settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-jobworker.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.zeebe.jobworker\n  version: v1\n  metadata:\n  - name: gatewayAddr\n    value: \"<host>:<port>\"\n  - name: gatewayKeepAlive\n    value: \"45s\"\n  - name: usePlainTextConnection\n    value: \"true\"\n  - name: caCertificatePath\n    value: \"/path/to/ca-cert\"\n  - name: workerName\n    value: \"products-worker\"\n  - name: workerTimeout\n    value: \"5m\"\n  - name: requestTimeout\n    value: \"15s\"\n  - name: jobType\n    value: \"fetch-products\"\n  - name: maxJobsActive\n    value: \"32\"\n  - name: concurrency\n    value: \"4\"\n  - name: pollInterval\n    value: \"100ms\"\n  - name: pollThreshold\n    value: \"0.3\"\n  - name: fetchVariables\n    value: \"productId, productName, productKey\"\n  - name: autocomplete\n    value: \"true\"\n  - name: retryBackOff\n    value: \"30s\"\n  - name: direction\n    value: \"input\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Access to Specific Secrets\nDESCRIPTION: Configuration to allow access to only specific secrets in a Vault secret store while denying access to all others.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/secret-scope.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: vault\n        defaultAccess: deny\n        allowedSecrets: [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Pub/Sub Component with Namespace Consumer Group in YAML\nDESCRIPTION: This YAML configuration sets up a Redis pub/sub component with a namespace-based consumer group. It uses the {namespace} placeholder in the consumerID metadata to dynamically set the consumer group based on the Kubernetes namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-namespace.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: consumerID\n    value: \"{namespace}\"\n```\n\n----------------------------------------\n\nTITLE: Setting API Token in Self-Hosted Environment\nDESCRIPTION: Sets the DAPR_API_TOKEN environment variable in a self-hosted environment to enable API authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport DAPR_API_TOKEN=<token>\n```\n\n----------------------------------------\n\nTITLE: Implementing service invocation in C# client code\nDESCRIPTION: C# code snippet showing how to implement service invocation by creating a Dapr HTTP client and sending a request to the order-processor service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = DaprClient.CreateInvokeHttpClient(appId: \"order-processor\");\nvar cts = new CancellationTokenSource();\n\nvar response = await client.PostAsJsonAsync(\"/orders\", order, cts.Token);\nConsole.WriteLine(\"Order passed: \" + order);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation App in JavaScript\nDESCRIPTION: JavaScript code for the conversation application using HTTP requests. It sends a message to the echo mock LLM component and logs the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst conversationComponentName = \"echo\";\n\nasync function main() {\n  const daprHost = process.env.DAPR_HOST || \"http://localhost\";\n  const daprHttpPort = process.env.DAPR_HTTP_PORT || \"3500\";\n\n  const inputBody = {\n    name: \"echo\",\n    inputs: [{ message: \"What is dapr?\" }],\n    parameters: {},\n    metadata: {},\n  };\n\n  const reqURL = `${daprHost}:${daprHttpPort}/v1.0-alpha1/conversation/${conversationComponentName}/converse`;\n\n  try {\n    const response = await fetch(reqURL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(inputBody),\n    });\n\n    console.log(\"Input sent: What is dapr?\");\n\n    const data = await response.json();\n    const result = data.outputs[0].result;\n    console.log(\"Output response:\", result);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    process.exit(1);\n  }\n}\n\nmain().catch((error) => {\n  console.error(\"Unhandled error:\", error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Manual Worker Deployment\nDESCRIPTION: TOML configuration file for manually deploying a Cloudflare Worker using Wrangler CLI, including worker name, compatibility settings, and KV namespace binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Name of your Worker, for example \"mydaprkv\"\nname = \"\"\n\n# Do not change these options\nmain = \"worker.js\"\ncompatibility_date = \"2022-12-09\"\nusage_model = \"bundled\"\n\n[vars]\n# Set this to the **public** part of the Ed25519 key, PEM-encoded (with newlines replaced with `\\n`).\n# Example:\n# PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\nMCowB...=\\n-----END PUBLIC KEY-----\nPUBLIC_KEY = \"\"\n# Set this to the name of your Worker (same as the value of the \"name\" property above), for example \"mydaprkv\".\nTOKEN_AUDIENCE = \"\"\n\n[[kv_namespaces]]\n# Set the next two values to the ID (not name) of your KV namespace, for example \"123456789abcdef8b5588f3d134f74ac\".\n# Note that they will both be set to the same value.\nbinding = \"\"\nid = \"\"\n```\n\n----------------------------------------\n\nTITLE: Querying State Store with Filters\nDESCRIPTION: Example of querying the state store with complex filters, sorting, and pagination using curl POST request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha1/state/myStore/query?metadata.contentType=application/json \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"filter\": {\n          \"OR\": [\n            {\n              \"EQ\": { \"person.org\": \"Dev Ops\" }\n            },\n            {\n              \"AND\": [\n                {\n                  \"EQ\": { \"person.org\": \"Finance\" }\n                },\n                {\n                  \"IN\": { \"state\": [ \"CA\", \"WA\" ] }\n                }\n              ]\n            }\n          ]\n        },\n        \"sort\": [\n          {\n            \"key\": \"state\",\n            \"order\": \"DESC\"\n          },\n          {\n            \"key\": \"person.id\"\n          }\n        ],\n        \"page\": {\n          \"limit\": 3\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Lock Component in Dapr\nDESCRIPTION: YAML configuration for setting up a Redis-based lock component in Dapr. The component is named 'lockstore' and requires Redis connection details including host and password.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: lockstore\nspec:\n  type: lock.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: <PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Deploying MQTT Broker in Kubernetes\nDESCRIPTION: YAML configuration for deploying an MQTT broker (emqx) in a Kubernetes cluster, including both the Deployment and Service resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt3.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mqtt-broker\n  labels:\n    app-name: mqtt-broker\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app-name: mqtt-broker\n  template:\n    metadata:\n      labels:\n        app-name: mqtt-broker\n    spec:\n      containers:\n        - name: mqtt\n          image: emqx:latest\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: default\n              containerPort: 1883\n              protocol: TCP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mqtt-broker\n  labels:\n    app-name: mqtt-broker\nspec:\n  type: ClusterIP\n  selector:\n    app-name: mqtt-broker\n  ports:\n    - port: 1883\n      targetPort: default\n      name: default\n      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Go Workflow Client Operations\nDESCRIPTION: Go implementation showing workflow operations including starting, pausing, resuming and purging workflows using the Go SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/dapr/go-sdk/client\"\n\t\"github.com/dapr/go-sdk/workflow\"\n)\n\nvar stage = 0\n\nconst (\n\tworkflowComponent = \"dapr\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Secret Store Component in YAML\nDESCRIPTION: YAML configuration for setting up the Azure Key Vault secret store component in Dapr. It includes required and optional metadata fields for specifying the vault name, Azure environment, and authentication details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName # Required\n    value: [your_keyvault_name]\n  - name: azureEnvironment # Optional, defaults to AZUREPUBLICCLOUD\n    value: \"AZUREPUBLICCLOUD\"\n  # See authentication section below for all options\n  - name: azureTenantId\n    value: \"[your_service_principal_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_service_principal_app_id]\"\n  - name: azureCertificateFile\n    value : \"[pfx_certificate_file_fully_qualified_local_path]\"\n```\n\n----------------------------------------\n\nTITLE: Example Metadata API JSON Response in Dapr\nDESCRIPTION: Sample JSON response from the Metadata API showing information about the application ID, runtime version, enabled features, registered actors, loaded components, HttpEndpoints, subscriptions, and connection properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"myApp\",\n  \"runtimeVersion\": \"1.12.0\",\n  \"enabledFeatures\": [\n    \"ServiceInvocationStreaming\"\n  ],\n  \"actors\": [\n    {\n      \"type\": \"DemoActor\"\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"pubsub\",\n      \"type\": \"pubsub.redis\",\n      \"version\": \"v1\"\n    },\n    {\n      \"name\": \"statestore\",\n      \"type\": \"state.redis\",\n      \"version\": \"v1\",\n      \"capabilities\": [\n        \"ETAG\",\n        \"TRANSACTIONAL\",\n        \"ACTOR\"\n      ]\n    }\n  ],\n  \"httpEndpoints\": [\n    {\n      \"name\": \"my-backend-api\"\n    }\n  ],\n  \"subscriptions\": [\n    {\n      \"type\": \"DECLARATIVE\",\n      \"pubsubname\": \"pubsub\",\n      \"topic\": \"orders\",\n      \"deadLetterTopic\": \"\",\n      \"metadata\": {\n        \"ttlInSeconds\": \"30\"\n      },\n      \"rules\": [\n          {\n              \"match\": \"%!s(<nil>)\",\n              \"path\": \"orders\"\n          }\n      ]\n    }\n  ],\n  \"extended\": {\n    \"appCommand\": \"uvicorn --port 3000 demo_actor_service:app\",\n    \"appPID\": \"98121\",\n    \"cliPID\": \"98114\",\n    \"daprRuntimeVersion\": \"1.12.0\"\n  },\n  \"appConnectionProperties\": {\n    \"port\": 3000,\n    \"protocol\": \"http\",\n    \"channelAddress\": \"127.0.0.1\",\n    \"health\": {\n      \"healthProbeInterval\": \"5s\",\n      \"healthProbeTimeout\": \"500ms\",\n      \"healthThreshold\": 3\n    }\n  },\n  \"scheduler\": {\n    \"connected_addresses\": [\n      \"10.244.0.47:50006\",\n      \"10.244.0.48:50006\",\n      \"10.244.0.49:50006\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes secret for Dapr app token authentication\nDESCRIPTION: This command creates a Kubernetes secret to store the token used for authenticating requests between Dapr and your application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic app-api-token --from-literal=token=<token>\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr Control Plane Components\nDESCRIPTION: Series of commands to restart the rest of the Dapr control plane components after Sentry service has been restarted, to ensure all components pick up the new Dapr Trust Bundle.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/dapr-operator -n <DAPR_NAMESPACE>\nkubectl rollout restart statefulsets/dapr-placement-server -n <DAPR_NAMESPACE>\nkubectl rollout restart deploy/dapr-sidecar-injector -n <DAPR_NAMESPACE>\nkubectl rollout restart deploy/dapr-scheduler-server -n <DAPR_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding in JavaScript\nDESCRIPTION: This JavaScript code uses the Dapr SDK to invoke an output binding. It creates a DaprClient and sends 10 messages to the 'checkout' binding at 2-second intervals.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//dependencies\nimport { DaprClient, CommunicationProtocolEnum } from \"@dapr/dapr\";\n\n//code\nconst daprHost = \"127.0.0.1\";\n\n(async function () {\n    for (var i = 0; i < 10; i++) {\n        await sleep(2000);\n        const orderId = Math.floor(Math.random() * (1000 - 1) + 1);\n        try {\n            await sendOrder(orderId)\n        } catch (err) {\n            console.error(e);\n            process.exit(1);\n        }\n    }\n})();\n\nasync function sendOrder(orderId) {\n    const BINDING_NAME = \"checkout\";\n    const BINDING_OPERATION = \"create\";\n    const client = new DaprClient({\n        daprHost,\n        daprPort: process.env.DAPR_HTTP_PORT,\n        communicationProtocol: CommunicationProtocolEnum.HTTP,\n    });\n    //Using Dapr SDK to invoke output binding\n    const result = await client.binding.send(BINDING_NAME, BINDING_OPERATION, orderId);\n    console.log(\"Sending message: \" + orderId);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Headers using cURL\nDESCRIPTION: Example of publishing a message to Kafka topic with correlation ID and partition key\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myKafka/myTopic?metadata.correlationId=myCorrelationID&metadata.partitionKey=key1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Pub/Sub Component for Kubernetes\nDESCRIPTION: Kubernetes YAML configuration for deploying a RabbitMQ pub/sub component in Dapr. Includes connection credentials and message handling settings for a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: order-pub-sub\nspec:\n  type: pubsub.rabbitmq\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"amqp://localhost:5672\"\n  - name: protocol\n    value: amqp  \n  - name: hostname\n    value: localhost \n  - name: username\n    value: username\n  - name: password\n    value: password \n  - name: durable\n    value: \"false\"\n  - name: deletedWhenUnused\n    value: \"false\"\n  - name: autoAck\n    value: \"false\"\n  - name: reconnectWait\n    value: \"0\"\n  - name: concurrency\n    value: parallel\nscopes:\n  - orderprocessing\n  - checkout\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Reminder using cURL\nDESCRIPTION: Example of invoking an actor reminder using a cURL command. This snippet demonstrates how to make a POST request to trigger a specific reminder for an actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3000/actors/stormtrooper/50/method/remind/checkRebels \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Basic Solace-AMQP Component Configuration in YAML\nDESCRIPTION: Basic configuration for setting up a Solace-AMQP pubsub component with core settings including URL, username, password and consumerID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-solace-amqp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: solace\nspec:\n  type: pubsub.solace.amqp\n  version: v1\n  metadata:\n    - name: url\n      value: 'amqp://localhost:5672'\n    - name: username\n      value: 'default'\n    - name: password\n      value: 'default'\n    - name: consumerID\n      value: 'channel1'\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Configuration Keys via HTTP Request in Dapr\nDESCRIPTION: HTTP GET request format with query parameters to retrieve specific configuration items by key from a Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/mystore?key=config1&key=config2\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job with JSON Request Body\nDESCRIPTION: Example JSON payload for scheduling a job with specified data and due time. This format is used when posting to the jobs API endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/jobs_api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"some data\",\n  \"dueTime\": \"30s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Declarative Subscription in YAML\nDESCRIPTION: This YAML configuration demonstrates routing of CloudEvents from the 'inventory' topic to different paths based on event types using the declarative subscription approach. It routes 'widget' events to /widgets, 'gadget' events to /gadgets, and uses /products as the default route.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: myevent-subscription\nspec:\n  pubsubname: pubsub\n  topic: inventory\n  routes:\n    rules:\n      - match: event.type == \"widget\"\n        path: /widgets\n      - match: event.type == \"gadget\"\n        path: /gadgets\n    default: /products\nscopes:\n  - app1\n  - app2\n```\n\n----------------------------------------\n\nTITLE: Programmatic Priority Queue Subscription in Python\nDESCRIPTION: Python code example for setting up a priority queue subscription programmatically.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    subscriptions = [\n      {\n        'pubsubname': 'pubsub',\n        'topic': 'checkout',\n        'routes': {\n          'default': '/orders'\n        },\n        'metadata': {'maxPriority': '3'}\n      }\n    ]\n    return jsonify(subscriptions)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Pub/Sub Component in YAML\nDESCRIPTION: This YAML configuration defines the Redis pub/sub component for Dapr. It specifies the component name, type, version, connection details, and which applications can use it.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\nscopes:\n  - orderprocessing\n  - checkout\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Binding Component in YAML\nDESCRIPTION: This snippet shows how to create a Dapr component of type 'bindings.postgresql' using YAML configuration. It includes the required metadata for establishing a connection to a PostgreSQL database.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postgresql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.postgresql\n  version: v1\n  metadata:\n    # Connection string\n    - name: connectionString\n      value: \"<CONNECTION STRING>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Both Inbound and Outbound Resiliency Policies for PubSub Components in Dapr\nDESCRIPTION: Example YAML configuration demonstrating how to apply different resiliency policies to both inbound and outbound operations for a PubSub component named \"myPubsub\". This covers both publishing messages and delivering them to subscribers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/targets.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  targets:\n    components:\n      myPubsub:\n        outbound:\n          retry: pubsubRetry\n          circuitBreaker: pubsubCB\n        inbound: # inbound only applies to delivery from sidecar to app\n          timeout: general\n          retry: general\n          circuitBreaker: general\n```\n\n----------------------------------------\n\nTITLE: Generating Root and Issuer Certificates with OpenSSL\nDESCRIPTION: These Bash commands use OpenSSL to generate the root and issuer certificates for Dapr's mTLS setup. It includes steps for creating the private keys, certificate signing requests, and final certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Generate root cert and key\nopenssl ecparam -genkey -name prime256v1 | openssl ec -out root.key\nopenssl req -new -nodes -sha256 -key root.key -out root.csr -config root.conf -extensions v3_req\nopenssl x509 -req -sha256 -days 365 -in root.csr -signkey root.key -outform PEM -out root.pem -extfile root.conf -extensions v3_req\n\n# Generate issuer cert and key\nopenssl ecparam -genkey -name prime256v1 | openssl ec -out issuer.key\nopenssl req -new -sha256 -key issuer.key -out issuer.csr -config issuer.conf -extensions v3_req\nopenssl x509 -req -in issuer.csr -CA root.pem -CAkey root.key -CAcreateserial -outform PEM -out issuer.pem -days 365 -sha256 -extfile issuer.conf -extensions v3_req\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Java\nDESCRIPTION: Unsubscribes from configuration updates using the Dapr Java SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nUnsubscribeConfigurationResponse unsubscribe = client\n        .unsubscribeConfiguration(subscriptionId, DAPR_CONFIGURATON_STORE).block();\nif (unsubscribe.getIsUnsubscribed()) {\n    System.out.println(\"App unsubscribed to config changes\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in Java with Spring Boot\nDESCRIPTION: This Java code shows how to create a Spring Boot controller with a POST endpoint to handle incoming events from the 'checkout' input binding. It logs the received message body.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/\")\npublic class CheckoutServiceController {\n    private static final Logger log = LoggerFactory.getLogger(CheckoutServiceController.class);\n        @PostMapping(path = \"/checkout\")\n        public Mono<String> getCheckout(@RequestBody(required = false) byte[] body) {\n            return Mono.fromRunnable(() ->\n                    log.info(\"Received Message: \" + new String(body)));\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Raising Workflow Event in JavaScript\nDESCRIPTION: Shows how to raise an event to a Dapr workflow using the JavaScript SDK. It defines a method to raise an event for a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DaprClient } from \"@dapr/dapr\";\n\n  public async raiseEvent(workflowInstanceId: string, eventName: string, eventPayload?: any) {\n    this._innerClient.raiseOrchestrationEvent(workflowInstanceId, eventName, eventPayload);\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata in Java\nDESCRIPTION: This snippet shows how to execute a state transaction in Java using the Dapr client, overriding CloudEvent metadata fields. It defines a state operation with custom metadata and executes the transaction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class StateOperationExample {\n\n    public static void main(String[] args) {\n        executeStateTransaction();\n    }\n\n    public static void executeStateTransaction() {\n        // Build Dapr client\n        try (DaprClient daprClient = new DaprClientBuilder().build()) {\n\n            // Define the value \"2\"\n            String value = \"2\";\n\n            // Override CloudEvent metadata\n            Map<String, String> metadata = new HashMap<>();\n            metadata.put(\"cloudevent.id\", \"unique-business-process-id\");\n            metadata.put(\"cloudevent.source\", \"CustomersApp\");\n            metadata.put(\"cloudevent.type\", \"CustomerCreated\");\n            metadata.put(\"cloudevent.subject\", \"123\");\n            metadata.put(\"my-custom-ce-field\", \"abc\");\n\n            // Define state operations\n            List<StateOperation<?>> ops = new ArrayList<>();\n            StateOperation<String> op1 = new StateOperation<>(\n                    StateOperationType.UPSERT,\n                    \"key1\",\n                    value,\n                    metadata\n            );\n            ops.add(op1);\n\n            // Execute state transaction\n            String storeName = \"your-state-store-name\";\n            daprClient.executeStateTransaction(storeName, ops).block();\n            System.out.println(\"State transaction executed.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up PostgreSQL as a state store in Dapr. Includes required and optional metadata fields for connection, authentication, and performance tuning.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.postgresql\n  # Note: setting \"version\" to \"v2\" is required to use the v2 of the component\n  version: v2\n  metadata:\n    # Connection string\n    - name: connectionString\n      value: \"<CONNECTION STRING>\"\n    # Timeout for database operations, as a Go duration or number of seconds (optional)\n    #- name: timeout\n    #  value: 20\n    # Prefix for the table where the data is stored (optional)\n    #- name: tablePrefix\n    #  value: \"\"\n    # Name of the table where to store metadata used by Dapr (optional)\n    #- name: metadataTableName\n    #  value: \"dapr_metadata\"\n    # Cleanup interval in seconds, to remove expired rows (optional)\n    #- name: cleanupInterval\n    #  value: \"1h\"\n    # Maximum number of connections pooled by this component (optional)\n    #- name: maxConns\n    #  value: 0\n    # Max idle time for connections before they're closed (optional)\n    #- name: connectionMaxIdleTime\n    #  value: 0\n    # Controls the default mode for executing queries. (optional)\n    #- name: queryExecMode\n    #  value: \"\"\n    # Uncomment this if you wish to use PostgreSQL as a state store for actors or workflows (optional)\n    #- name: actorStateStore\n    #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dapr Go Client\nDESCRIPTION: Go code showing required imports for using Dapr gRPC client.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkout Publisher in Java\nDESCRIPTION: This Java code snippet demonstrates how to publish order events to the 'orders' topic using the Dapr SDK. It creates a DaprClient and publishes events in a loop.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ntry (DaprClient client = new DaprClientBuilder().build()) {\n    for (int i = 1; i <= 10; i++) {\n        Order order = new Order(i);\n        client.publishEvent(\n                \"orderpubsub\",\n                \"orders\",\n                order).block();\n        logger.info(\"Published data: \" + order);\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Version/ETag from Redis\nDESCRIPTION: Command to get the version or ETag of state data. This is useful for concurrency control in Dapr applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHGET myapp||balance version\n```\n\n----------------------------------------\n\nTITLE: Executing Query for Specific Organizations (PowerShell)\nDESCRIPTION: Sends a POST request to execute the query for employees from specific organizations using Invoke-RestMethod in PowerShell.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -InFile query-api-examples/query2.json -Uri 'http://localhost:3500/v1.0-alpha1/state/statestore/query'\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Configuration for Java\nDESCRIPTION: YAML configuration for running multiple Java applications with Dapr, specifying application IDs, directories, ports and commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appID: order-processor-sdk\n    appDirPath: ./order-processor/target/\n    appPort: 8080\n    command: [\"java\", \"-jar\", \"OrderProcessingService-0.0.1-SNAPSHOT.jar\"]\n  - appID: checkout-sdk\n    appDirPath: ./checkout/target/\n    command: [\"java\", \"-jar\", \"CheckoutService-0.0.1-SNAPSHOT.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Paginated Query with Token\nDESCRIPTION: Follow-up query using pagination token to retrieve the next batch of records\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": {\n        \"OR\": [\n            {\n                \"EQ\": { \"person.org\": \"Dev Ops\" }\n            },\n            {\n                \"AND\": [\n                    {\n                        \"EQ\": { \"person.org\": \"Finance\" }\n                    },\n                    {\n                        \"IN\": { \"state\": [ \"CA\", \"WA\" ] }\n                    }\n                ]\n            }\n        ]\n    },\n    \"sort\": [\n        {\n            \"key\": \"state\",\n            \"order\": \"DESC\"\n        },\n        {\n            \"key\": \"person.id\"\n        }\n    ],\n    \"page\": {\n        \"limit\": 3,\n        \"token\": \"3\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reminder Partitioning in .NET\nDESCRIPTION: Registers actor types and configures actor settings including reminder partitioning in a .NET application using the AddActors method in Startup.cs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// In Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Register actor runtime with DI\n    services.AddActors(options =>\n    {\n        // Register actor types and configure actor settings\n        options.Actors.RegisterActor<MyActor>();\n\n        // Configure default settings\n        options.ActorIdleTimeout = TimeSpan.FromMinutes(60);\n        options.ActorScanInterval = TimeSpan.FromSeconds(30);\n        options.RemindersStoragePartitions = 7;\n    });\n\n    // Register additional services for use with actors\n    services.AddSingleton<BankService>();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dapr Publish Command\nDESCRIPTION: The basic syntax for using the Dapr publish CLI command. This command is used to publish pub-sub events in Dapr applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-publish.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr publish [flags]\n```\n\n----------------------------------------\n\nTITLE: Publishing Raw Messages in .NET with Dapr Client\nDESCRIPTION: Example using Dapr .NET SDK to publish a raw message to a topic by setting the rawPayload metadata to true, which prevents CloudEvent encapsulation for compatibility with non-Dapr systems.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Dapr.Client;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers().AddDapr();\n\nvar app = builder.Build();\n\napp.MapPost(\"/publish\", async (DaprClient daprClient) =>\n{\n    var message = new Message(\n        Guid.NewGuid().ToString(),\n        $\"Hello at {DateTime.UtcNow}\",\n        DateTime.UtcNow\n    );\n\n    await daprClient.PublishEventAsync(\n        \"pubsub\",           // pubsub name\n        \"messages\",         // topic name\n        message,           // message data\n        new Dictionary<string, string> \n        { \n            { \"rawPayload\", \"true\" },\n            { \"content-type\", \"application/json\" }\n        }\n    );\n    \n    return Results.Ok(message);\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment with Dapr Tracing\nDESCRIPTION: Example Kubernetes deployment configuration showing how to enable Dapr tracing using annotations. This includes settings for app ID, port, and configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      ...\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"MyApp\"\n        dapr.io/app-port: \"8080\"\n        dapr.io/config: \"appconfig\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Workflow Worker in Java\nDESCRIPTION: Shows how to set up a workflow worker in Java using WorkflowRuntimeBuilder. Demonstrates workflow and activity registration, and runtime initialization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoWorkflowWorker {\n\n  public static void main(String[] args) throws Exception {\n\n    // Register the Workflow with the builder.\n    WorkflowRuntimeBuilder builder = new WorkflowRuntimeBuilder().registerWorkflow(DemoWorkflow.class);\n    builder.registerActivity(DemoWorkflowActivity.class);\n\n    // Build and then start the workflow runtime pulling and executing tasks\n    try (WorkflowRuntime runtime = builder.build()) {\n      System.out.println(\"Start workflow runtime\");\n      runtime.start();\n    }\n\n    System.exit(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata in Python\nDESCRIPTION: This snippet demonstrates how to execute a state transaction in Python using the Dapr client, overriding CloudEvent metadata fields. It defines and executes a state operation with custom metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def execute_state_transaction():\n    async with DaprClient() as client:\n        # Define state operations\n        ops = []\n\n        op1 = {\n            'operation': 'upsert',\n            'request': {\n                'key': 'key1',\n                'value': b'2',  # Convert string to byte array\n                'metadata': {\n                    'cloudevent.id': 'unique-business-process-id',\n                    'cloudevent.source': 'CustomersApp',\n                    'cloudevent.type': 'CustomerCreated',\n                    'cloudevent.subject': '123',\n                    'my-custom-ce-field': 'abc'\n                }\n            }\n        }\n\n        ops.append(op1)\n\n        # Execute state transaction\n        store_name = 'your-state-store-name'\n        try:\n            await client.execute_state_transaction(store_name, ops)\n            print('State transaction executed.')\n        except Exception as e:\n            print('Error executing state transaction:', e)\n\n# Run the async function\nif __name__ == \"__main__\":\n    asyncio.run(execute_state_transaction())\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr in Custom Namespace\nDESCRIPTION: Initialize Dapr in a specified namespace instead of the default dapr-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k -n mynamespace\n```\n\n----------------------------------------\n\nTITLE: Configuring tasks.json for Dapr Debugging\nDESCRIPTION: Example tasks.json configuration for Dapr debugging in VSCode. It defines tasks for starting and stopping Dapr sidecars for both Node.js and Python applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-how-to-debug-multiple-dapr-apps.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"daprd-debug-node\",\n            \"type\": \"daprd\",\n            \"appId\": \"nodeapp\",\n            \"appPort\": 3000,\n            \"httpPort\": 3500,\n            \"metricsPort\": 9090\n        },\n        {\n            \"label\": \"daprd-down-node\",\n            \"type\": \"daprd-down\",\n            \"appId\": \"nodeapp\"\n        },\n        {\n            \"label\": \"daprd-debug-python\",\n            \"type\": \"daprd\",\n            \"appId\": \"pythonapp\",\n            \"httpPort\": 53109,\n            \"grpcPort\": 53317,\n            \"metricsPort\": 9091\n        },\n        {\n            \"label\": \"daprd-down-python\",\n            \"type\": \"daprd-down\",\n            \"appId\": \"pythonapp\"\n        }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing a Distributed Lock using .NET SDK in Dapr\nDESCRIPTION: C# code example demonstrating how to release a lock on a resource using the Dapr .NET SDK. The code creates a DaprClient and calls the Unlock method with the required parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Dapr.Client;\n\nnamespace LockService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string DAPR_LOCK_NAME = \"lockstore\";\n            var client = new DaprClientBuilder().Build();\n\n            var response = await client.Unlock(DAPR_LOCK_NAME, \"my_file_name\", \"random_id_abc123\"));\n            Console.WriteLine(response.status);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Kinesis Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up AWS Kinesis binding component in Dapr. Includes required fields for stream configuration, authentication, and binding direction settings. Supports both input and output binding interfaces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kinesis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.kinesis\n  version: v1\n  metadata:\n  - name: streamName\n    value: \"KINESIS_STREAM_NAME\" # Kinesis stream name\n  - name: consumerName\n    value: \"KINESIS_CONSUMER_NAME\" # Kinesis consumer name\n  - name: mode\n    value: \"shared\" # shared - Shared throughput or extended - Extended/Enhanced fanout\n  - name: region\n    value: \"AWS_REGION\" #replace\n  - name: accessKey\n    value: \"AWS_ACCESS_KEY\" # replace\n  - name: secretKey\n    value: \"AWS_SECRET_KEY\" #replace\n  - name: sessionToken\n    value: \"*****************\"\n  - name: direction\n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in .NET Using Dapr SDK\nDESCRIPTION: Uses the Dapr .NET SDK to retrieve a secret from the configured secret store. The code initializes a Dapr client and calls the GetSecretAsync method to access the secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Dapr.Client;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading;\nusing System.Text.Json;\n\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string SECRET_STORE_NAME = \"localsecretstore\";\n            using var client = new DaprClientBuilder().Build();\n            //Using Dapr SDK to get a secret\n            var secret = await client.GetSecretAsync(SECRET_STORE_NAME, \"secret\");\n            Console.WriteLine($\"Result: {string.Join(\", \", secret)}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr from Kubernetes using Helm\nDESCRIPTION: This command uninstalls Dapr from a Kubernetes cluster using Helm. It targets the 'dapr-system' namespace where Dapr is typically installed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall dapr --namespace dapr-system\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Output Binding in Dapr\nDESCRIPTION: This YAML configuration sets up a PostgreSQL binding component that allows applications to write data to a PostgreSQL database. The binding includes connection details for the database and is configured as an output binding, enabling the application to send data to the database without direct database interactions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: sqldb\n  namespace: quickstarts\nspec:\n  type: bindings.postgresql\n  version: v1\n  metadata:\n  - name: url # Required\n    value: \"user=postgres password=docker host=localhost port=5432 dbname=orders pool_min_conns=1 pool_max_conns=10\"\n  - name: direction\n    value: \"output\" # direction of the postgresql binding\n```\n\n----------------------------------------\n\nTITLE: Local Secret Store Component Configuration\nDESCRIPTION: YAML configuration for the local secret store component used by the applications. Defines the file-based secret store with JSON backend.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: localsecretstore\n  namespace: default\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: secrets.json\n  - name: nestedSeparator\n    value: \":\"\n```\n\n----------------------------------------\n\nTITLE: Handling Cron Binding Trigger in Go\nDESCRIPTION: Go code that sets up an HTTP route handler to process the cron binding trigger received from the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Triggered by Dapr input binding\nr.HandleFunc(\"/\"+cronBindingName, processBatch).Methods(\"POST\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Actor State from Redis\nDESCRIPTION: Command to get a specific state value for an actor. This example retrieves the \"food\" state for a \"cat\" actor named \"leroy\" in the \"mypets\" application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nHGET mypets||cat||leroy||food value\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Method in Java\nDESCRIPTION: Shows how to implement an Actor's method named 'say' that takes a String parameter and returns a String. The method simply prints the input and returns 'OK'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic String say(String something) {\n  System.out.println(something);\n  return \"OK\";\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Actor State Request\nDESCRIPTION: Example JSON response returned when retrieving an actor's state. This shows the location value for a stormtrooper actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"location\": \"Alderaan\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go Job Operations Implementation\nDESCRIPTION: Complete implementation of job scheduling, retrieval, deletion, and event handling functions\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc scheduleJob(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {\n\n\tif in == nil {\n\t\terr = errors.New(\"no invocation parameter\")\n\t\treturn\n\t}\n\n\tdroidJob := DroidJob{}\n\terr = json.Unmarshal(in.Data, &droidJob)\n\tif err != nil {\n\t\tfmt.Println(\"failed to unmarshal job: \", err)\n\t\treturn nil, err\n\t}\n\n\tjobData := JobData{\n\t\tDroid: droidJob.Name,\n\t\tTask:  droidJob.Job,\n\t}\n\n\tcontent, err := json.Marshal(jobData)\n\tif err != nil {\n\t\tfmt.Printf(\"Error marshalling job content\")\n\t\treturn nil, err\n\t}\n\n\t// schedule job\n\tjob := daprc.Job{\n\t\tName:    droidJob.Name,\n\t\tDueTime: droidJob.DueTime,\n\t\tData: &anypb.Any{\n\t\t\tValue: content,\n\t\t},\n\t}\n\n\terr = app.daprClient.ScheduleJobAlpha1(ctx, &job)\n\tif err != nil {\n\t\tfmt.Println(\"failed to schedule job. err: \", err)\n\t\treturn nil, err\n\t}\n\n\tfmt.Println(\"Job scheduled: \", droidJob.Name)\n\n\tout = &common.Content{\n\t\tData:        in.Data,\n\t\tContentType: in.ContentType,\n\t\tDataTypeURL: in.DataTypeURL,\n\t}\n\n\treturn out, err\n\n}\n\nfunc getJob(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {\n\n\tif in == nil {\n\t\terr = errors.New(\"no invocation parameter\")\n\t\treturn nil, err\n\t}\n\n\tjob, err := app.daprClient.GetJobAlpha1(ctx, string(in.Data))\n\tif err != nil {\n\t\tfmt.Println(\"failed to get job. err: \", err)\n\t}\n\n\tout = &common.Content{\n\t\tData:        job.Data.Value,\n\t\tContentType: in.ContentType,\n\t\tDataTypeURL: in.DataTypeURL,\n\t}\n\n\treturn out, err\n}\n\nfunc deleteJob(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {\n\tif in == nil {\n\t\terr = errors.New(\"no invocation parameter\")\n\t\treturn nil, err\n\t}\n\n\terr = app.daprClient.DeleteJobAlpha1(ctx, string(in.Data))\n\tif err != nil {\n\t\tfmt.Println(\"failed to delete job. err: \", err)\n\t}\n\n\tout = &common.Content{\n\t\tData:        in.Data,\n\t\tContentType: in.ContentType,\n\t\tDataTypeURL: in.DataTypeURL,\n\t}\n\n\treturn out, err\n}\n\nfunc handleJob(ctx context.Context, job *common.JobEvent) error {\n    var jobData common.Job\n    if err := json.Unmarshal(job.Data, &jobData); err != nil {\n        return fmt.Errorf(\"failed to unmarshal job: %v\", err)\n    }\n\n    var jobPayload JobData\n    if err := json.Unmarshal(job.Data, &jobPayload); err != nil {\n        return fmt.Errorf(\"failed to unmarshal payload: %v\", err)\n    }\n\n    fmt.Println(\"Starting droid:\", jobPayload.Droid)\n    fmt.Println(\"Executing maintenance job:\", jobPayload.Task)\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Dapr Helm Repository\nDESCRIPTION: Add the official or private Dapr Helm chart repository and update the local cache.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add dapr https://dapr.github.io/helm-charts/\nhelm repo add dapr http://helm.custom-domain.com/dapr/dapr/ \\\n   --username=xxx --password=xxx\nhelm repo update\nhelm search repo dapr --devel --versions\n```\n\n----------------------------------------\n\nTITLE: Creating Dapr gRPC Client in Go\nDESCRIPTION: Go code demonstrating how to create and initialize a Dapr gRPC client.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// just for this demo\nctx := context.Background()\ndata := []byte(\"ping\")\n\n// create the client\nclient, err := dapr.NewClient()\nif err != nil {\n  log.Panic(err)\n}\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Pub/Sub Component for Topic Two\nDESCRIPTION: YAML configuration for setting up a Kafka pub/sub component with a specific consumer group for the second topic\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-topic-two\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: consumerGroup\n    value: \"{appID}-topic-two\"\n```\n\n----------------------------------------\n\nTITLE: Decrypt Payload HTTP Request Format\nDESCRIPTION: HTTP request format for decrypting values using a specified key and crypto component. The endpoint requires the Dapr port and crypto store name as URL parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT curl http://localhost:3500/v1.0-alpha1/crypto/<crypto-store-name>/decrypt\n```\n\n----------------------------------------\n\nTITLE: Azure Service Bus Component with Connection String Secret\nDESCRIPTION: Example of an Azure Service Bus component configuration using a secret reference for the entire connection string.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: servicec-inputq-azkvsecret-asbqueue\nspec:\n  type: bindings.azure.servicebusqueues\n  version: v1\n  metadata:\n  - name: connectionString\n    secretKeyRef:\n      name: asbNsConnString\n      key: asbNsConnString\n  - name: queueName\n    value: servicec-inputq\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Encrypting Large File with AES Key in JavaScript\nDESCRIPTION: Encrypts a large image file using an AES key and streams the result to a file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait pipeline(\n  createReadStream(testFileName),\n  await client.crypto.encrypt({\n    componentName: \"localstorage\",\n    keyName: \"symmetric-key-256\",\n    keyWrapAlgorithm: \"A256KW\",\n  }),\n  createWriteStream(\"encrypted.out\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Configuration Store Component in YAML\nDESCRIPTION: This YAML configuration sets up a PostgreSQL configuration store component for Dapr. It includes connection details, table name, and optional settings for timeouts, connection pooling, and query execution mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: configuration.postgresql\n  version: v1\n  metadata:\n    # Connection string\n    - name: connectionString\n      value: \"host=localhost user=postgres password=example port=5432 connect_timeout=10 database=config\"\n    # Name of the table which holds configuration information\n    - name: table\n      value: \"[your_configuration_table_name]\" \n    # Timeout for database operations, in seconds (optional)\n    #- name: timeoutInSeconds\n    #  value: 20\n    # Name of the table where to store the state (optional)\n    #- name: tableName\n    #  value: \"state\"\n    # Name of the table where to store metadata used by Dapr (optional)\n    #- name: metadataTableName\n    #  value: \"dapr_metadata\"\n    # Cleanup interval in seconds, to remove expired rows (optional)\n    #- name: cleanupIntervalInSeconds\n    #  value: 3600\n    # Maximum number of connections pooled by this component (optional)\n    #- name: maxConns\n    #  value: 0\n    # Max idle time for connections before they're closed (optional)\n    #- name: connectionMaxIdleTime\n    #  value: 0\n    # Controls the default mode for executing queries. (optional)\n    #- name: queryExecMode\n    #  value: \"\"\n    # Uncomment this if you wish to use PostgreSQL as a state store for actors (optional)\n    #- name: actorStateStore\n    #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving State with ETag from Dapr\nDESCRIPTION: HTTP GET request to retrieve state data and its associated ETag from the state store, showing the verbose output including headers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/state/statestore/sampleData -v\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr Client in Java\nDESCRIPTION: Shows how to use DaprClient to save a state with a key 'MyKey' and value 'My Message' to a state store named 'MyStateStore'. The value is serialized to JSON internally by Dapr's API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    DaprClient client = (new DaprClientBuilder()).build();\n    client.saveState(\"MyStateStore\", \"MyKey\", \"My Message\").block();\n```\n\n----------------------------------------\n\nTITLE: Running Memcached Locally with Docker\nDESCRIPTION: Command to run Memcached in a Docker container locally. This creates a container named 'my-memcache' that can be accessed at localhost:11211.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-memcached.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name my-memcache -d memcached\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Queues Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up the Cloudflare Queues binding component with required metadata fields including queue name, worker configuration, and authentication details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.cloudflare.queues\n  version: v1\n  # Increase the initTimeout if Dapr is managing the Worker for you\n  initTimeout: \"120s\"\n  metadata:\n    # Name of the existing Cloudflare Queue (required)\n    - name: queueName\n      value: \"\"\n    # Name of the Worker (required)\n    - name: workerName\n      value: \"\"\n    # PEM-encoded private Ed25519 key (required)\n    - name: key\n      value: |\n        -----BEGIN PRIVATE KEY-----\n        MC4CAQ...\n        -----END PRIVATE KEY-----\n    # Cloudflare account ID (required to have Dapr manage the Worker)\n    - name: cfAccountID\n      value: \"\"\n    # API token for Cloudflare (required to have Dapr manage the Worker)\n    - name: cfAPIToken\n      value: \"\"\n    # URL of the Worker (required if the Worker has been pre-created outside of Dapr)\n    - name: workerUrl\n      value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Input Binding Component in YAML\nDESCRIPTION: This YAML configuration creates a Kafka input binding component named 'checkout'. It specifies the Kafka broker, topic, consumer group, and other relevant settings for both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: checkout\nspec:\n  type: bindings.kafka\n  version: v1\n  metadata:\n  # Kafka broker connection setting\n  - name: brokers\n    value: localhost:9092\n  # consumer configuration: topic and consumer group\n  - name: topics\n    value: sample\n  - name: consumerGroup\n    value: group1\n  # publisher configuration: topic\n  - name: publishTopic\n    value: sample\n  - name: authRequired\n    value: false\n  - name: direction\n    value: input\n```\n\n----------------------------------------\n\nTITLE: Configuring a RethinkDB State Store Component in Dapr\nDESCRIPTION: A YAML configuration example for setting up a RethinkDB state store component in Dapr. It specifies required fields like address and database, along with optional parameters such as table, username, password, and archive option for storing state change history.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-rethinkdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.rethinkdb\n  version: v1\n  metadata:\n  - name: address\n    value: <REPLACE-RETHINKDB-ADDRESS> # Required, e.g. 127.0.0.1:28015 or rethinkdb.default.svc.cluster.local:28015).\n  - name: database\n    value: <REPLACE-RETHINKDB-DB-NAME> # Required, e.g. dapr (alpha-numerics only)\n  - name: table\n    value: # Optional\n  - name: username\n    value: <USERNAME> # Optional\n  - name: password\n    value: <PASSWORD> # Optional\n  - name: archive\n    value: bool # Optional (whether or not store should keep archive table of all the state changes)\n```\n\n----------------------------------------\n\nTITLE: State Store Transaction Example\nDESCRIPTION: Example of performing a transactional operation with upsert and delete operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/starwars/transaction \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Publishing Event with TTL using Dapr Python SDK\nDESCRIPTION: This Python code snippet shows how to publish an event to 'TOPIC_A' with a TTL of 120 seconds using the Dapr Python SDK. It creates a DaprClient and uses the publish_event method to send the message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dapr.clients import DaprClient\n\nwith DaprClient() as d:\n    req_data = {\n        'order-number': '345'\n    }\n    # Create a typed message with content type and body\n    resp = d.publish_event(\n        pubsub_name='pubsub',\n        topic='TOPIC_A',\n        data=json.dumps(req_data),\n        publish_metadata={'ttlInSeconds': '120'}\n    )\n    # Print the request\n    print(req_data, flush=True)\n```\n\n----------------------------------------\n\nTITLE: Java Secret Retrieval Implementation\nDESCRIPTION: Java code showing how to retrieve secrets using the Dapr client from a local secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String SECRET_STORE_NAME = \"localsecretstore\";\n// ...\n    Map<String, String> secret = client.getSecret(SECRET_STORE_NAME, \"secret\").block();\n    System.out.println(\"Fetched Secret: \" + secret);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr gRPC Server Interface\nDESCRIPTION: Go code implementing the Dapr gRPC server interface with various callback methods.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// server is our user app\ntype server struct {\n     pb.UnimplementedAppCallbackServer\n}\n\n// EchoMethod is a simple demo method to invoke\nfunc (s *server) EchoMethod() string {\n\treturn \"pong\"\n}\n\n// This method gets invoked when a remote service has called the app through Dapr\n// The payload carries a Method to identify the method, a set of metadata properties and an optional payload\nfunc (s *server) OnInvoke(ctx context.Context, in *commonv1pb.InvokeRequest) (*commonv1pb.InvokeResponse, error) {\n\tvar response string\n\n\tswitch in.Method {\n\tcase \"EchoMethod\":\n\t\tresponse = s.EchoMethod()\n\t}\n\n\treturn &commonv1pb.InvokeResponse{\n\t\tContentType: \"text/plain; charset=UTF-8\",\n\t\tData:        &any.Any{Value: []byte(response)},\n\t}, nil\n}\n\n// Dapr will call this method to get the list of topics the app wants to subscribe to. In this example, we are telling Dapr\n// To subscribe to a topic named TopicA\nfunc (s *server) ListTopicSubscriptions(ctx context.Context, in *empty.Empty) (*pb.ListTopicSubscriptionsResponse, error) {\n\treturn &pb.ListTopicSubscriptionsResponse{\n\t\tSubscriptions: []*pb.TopicSubscription{\n\t\t\t{Topic: \"TopicA\"},\n\t\t},\n\t}, nil\n}\n\n// Dapr will call this method to get the list of bindings the app will get invoked by. In this example, we are telling Dapr\n// To invoke our app with a binding named storage\nfunc (s *server) ListInputBindings(ctx context.Context, in *empty.Empty) (*pb.ListInputBindingsResponse, error) {\n\treturn &pb.ListInputBindingsResponse{\n\t\tBindings: []string{\"storage\"},\n\t}, nil\n}\n\n// This method gets invoked every time a new event is fired from a registered binding. The message carries the binding name, a payload and optional metadata\nfunc (s *server) OnBindingEvent(ctx context.Context, in *pb.BindingEventRequest) (*pb.BindingEventResponse, error) {\n\tfmt.Println(\"Invoked from binding\")\n\treturn &pb.BindingEventResponse{}, nil\n}\n\n// This method is fired whenever a message has been published to a topic that has been subscribed. Dapr sends published messages in a CloudEvents 0.3 envelope.\nfunc (s *server) OnTopicEvent(ctx context.Context, in *pb.TopicEventRequest) (*pb.TopicEventResponse, error) {\n\tfmt.Println(\"Topic message arrived\")\n        return &pb.TopicEventResponse{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing a Workflow HTTP Request\nDESCRIPTION: HTTP POST endpoint for pausing a running workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceId>/pause\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting File with AES Key in Go\nDESCRIPTION: Calls a function to encrypt and decrypt a large file using an AES key in Go.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nencryptDecryptFile(client)\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar with Application Port\nDESCRIPTION: Launches a Dapr sidecar process with a specified application ID and application port. This tells Dapr which port your application is listening on for communication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --app-port 5000\n```\n\n----------------------------------------\n\nTITLE: Defining Resiliency Policies in YAML\nDESCRIPTION: This YAML configuration defines retry and circuit breaker policies for the 'order-processor' application and 'statestore' component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - checkout\n\nspec:\n  policies:\n    retries:\n      retryForever:\n        policy: constant\n        maxInterval: 5s\n        maxRetries: -1 \n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 5s \n        trip: consecutiveFailures >= 5\n\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Excluding HTTP Verbs from Metrics Configuration\nDESCRIPTION: A YAML snippet showing how to exclude HTTP verbs from metrics reporting. This option can reduce memory usage in high-performance applications by decreasing metric cardinality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  excludeVerbs: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr annotations for token authentication in Kubernetes\nDESCRIPTION: This YAML snippet shows the annotations required in a Kubernetes deployment to enable Dapr token authentication using a secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/enabled: \"true\"\n  dapr.io/app-token-secret: \"app-api-token\" # name of the Kubernetes secret\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting String with RSA in Go\nDESCRIPTION: Demonstrates how to encrypt and decrypt a string message using RSA key encryption with Dapr's cryptography API. The code shows creating an encrypted stream from a string message and then decrypting it back.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc encryptDecryptString(client dapr.Client) {\n    // ...\n\n\t// Encrypt the message\n\tencStream, err := client.Encrypt(context.Background(),\n\t\tstrings.NewReader(message),\n\t\tdapr.EncryptOptions{\n\t\t\tComponentName: CryptoComponentName,\n\t\t\t// Name of the key to use\n\t\t\t// Since this is a RSA key, we specify that as key wrapping algorithm\n\t\t\tKeyName:          RSAKeyName,\n\t\t\tKeyWrapAlgorithm: \"RSA\",\n\t\t},\n\t)\n\n    // ...\n\n\t// The method returns a readable stream, which we read in full in memory\n\tencBytes, err := io.ReadAll(encStream)\n    // ...\n\n\tfmt.Printf(\"Encrypted the message, got %d bytes\\n\", len(encBytes))\n```\n\n----------------------------------------\n\nTITLE: Configuring Component with Application Scopes\nDESCRIPTION: YAML configuration showing how to limit component access to specific applications using scopes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\n  namespace: production\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: redis-master:6379\nscopes:\n- app1\n- app2\n```\n\n----------------------------------------\n\nTITLE: Version Mismatch Handling in Python using Dapr\nDESCRIPTION: Implements retry logic for handling version mismatch scenarios when saving state. Includes methods for state operations and error handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-stateful-service.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\n# This method saves the state and returns false if failed to save state\ndef save_state(data):\n    try:\n        store_name = \"redis-store\" # name of the state store as specified in state store component yaml file\n        dapr_state_url = \"http://localhost:3500/v1.0/state/{}\".format(store_name)\n        response = requests.post(dapr_state_url, json=data)\n        if response.status_code == 200:\n            return True\n    except:\n        return False\n    return False\n\n# This method gets the state and returns the response, with the ETag in the header -->\ndef get_state(key):\n    response = requests.get(\"http://localhost:3500/v1.0/state/<state_store_name>/{}\".format(key), headers={\"concurrency\":\"first-write\"})\n    return response\n\n# Exit when save state is successful. success will be False if there's an ETag mismatch -->\nsuccess = False\nwhile success != True:\n    response = get_state(\"key1\")\n    etag = response.headers['ETag']\n    newState = '[{ \"key\": \"key1\", \"value\": \"New Data\", \"etag\": {}, \"options\": { \"concurrency\": \"first-write\" }}]'.format(etag)\n\n    success = save_state(newState)\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Services for Dapr App and Sidecar\nDESCRIPTION: This YAML snippet defines two services in a Docker Compose file: 'nodeapp' for the application and 'nodeapp-dapr' for the Dapr sidecar. It sets up networking, ports, and volumes for a basic Dapr deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debugging-docker-compose.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nodeapp:\n    build: ./node\n    ports:\n      - \"50001:50001\"\n    networks:\n      - hello-dapr\n  nodeapp-dapr:\n    image: \"daprio/daprd:edge\"\n    command: [\n      \"./daprd\",\n     \"--app-id\", \"nodeapp\",\n     \"--app-port\", \"3000\",\n     \"--resources-path\", \"./components\"\n     ]\n    volumes:\n        - \"./components/:/components\"\n    depends_on:\n      - nodeapp\n    network_mode: \"service:nodeapp\"\nnetworks:\n  hello-dapr\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with SASL Password Authentication\nDESCRIPTION: YAML configuration for Kafka pubsub component using SASL password authentication. Includes username/password credentials and optional TLS configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-sasl\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"password\"\n  - name: saslUsername\n    value: \"adminuser\"\n  - name: saslPassword\n    secretKeyRef:\n      name: kafka-secrets\n      key: saslPasswordSecret\n  - name: saslMechanism\n    value: \"SHA-512\"\n  - name: maxMessageBytes\n    value: 1024\n  - name: consumeRetryInterval\n    value: 200ms\n  - name: heartbeatInterval\n    value: 5s\n  - name: sessionTimeout\n    value: 15s\n  - name: version\n    value: 0.10.2.0\n  - name: caCert\n    secretKeyRef:\n      name: kafka-tls\n      key: caCert\n```\n\n----------------------------------------\n\nTITLE: Mounting Kubernetes secret as environment variable in a pod\nDESCRIPTION: This YAML snippet shows how to mount the app-api-token secret as environment variables in a Kubernetes pod for use in the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: mycontainer\n    image: myregistry/myapp\n    envFrom:\n    - secretRef:\n      name: app-api-token\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Data from Redis\nDESCRIPTION: Command to get specific state data from Redis. This example retrieves the \"balance\" state for the \"myapp\" application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHGET myapp||balance data\n```\n\n----------------------------------------\n\nTITLE: Restarting Application Deployment\nDESCRIPTION: Command to perform a rollout restart of an application deployment to load new Dapr certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm Binding Component in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Wasm binding component in Dapr. It specifies the component type, version, and the URL of the Wasm binary to be executed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/wasm.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: wasm\nspec:\n  type: bindings.wasm\n  version: v1\n  metadata:\n    - name: url\n      value: \"file://uppercase.wasm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Aerospike State Store Component in YAML\nDESCRIPTION: This YAML configuration defines an Aerospike state store component for Dapr. It specifies the component type, version, and required metadata fields such as hosts and namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-aerospike.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.Aerospike\n  version: v1\n  metadata:\n  - name: hosts\n    value: <REPLACE-WITH-HOSTS> # Required. A comma delimited string of hosts. Example: \"aerospike:3000,aerospike2:3000\"\n  - name: namespace\n    value: <REPLACE-WITH-NAMESPACE> # Required. The aerospike namespace.\n  - name: set\n    value: <REPLACE-WITH-SET> # Optional\n```\n\n----------------------------------------\n\nTITLE: Sending Data with HTTP POST Operation\nDESCRIPTION: JSON payload for invoking an HTTP POST operation using the binding. Shows how to include data and specify custom headers in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"post\",\n  \"data\": \"content (default is JSON)\",\n  \"metadata\": {\n    \"path\": \"/things\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Notification Trigger Function\nDESCRIPTION: PL/pgSQL function that creates a notification trigger for configuration changes, converting row data to JSON and broadcasting events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nCREATE OR REPLACE FUNCTION notify_event() RETURNS TRIGGER AS $$\n    DECLARE \n        data json;\n        notification json;\n\n    BEGIN\n\n        IF (TG_OP = 'DELETE') THEN\n            data = row_to_json(OLD);\n        ELSE\n            data = row_to_json(NEW);\n        END IF;\n\n        notification = json_build_object(\n                          'table',TG_TABLE_NAME,\n                          'action', TG_OP,\n                          'data', data);\n        PERFORM pg_notify('config',notification::text);\n        RETURN NULL; \n    END;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPEndpoint Resource in YAML\nDESCRIPTION: Complete YAML specification for defining a Dapr HTTPEndpoint resource. Includes fields for base URL configuration, header settings, TLS authentication, and scope definitions. Supports both direct values and secret references for sensitive data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/httpendpoints-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: HTTPEndpoint\nmetadata:\n  name: <NAME>  \nspec:\n  baseUrl: <REPLACE-WITH-BASEURL> # Required. Use \"http://\" or \"https://\" prefix.\n  headers: # Optional\n  - name: <REPLACE-WITH-A-HEADER-NAME>\n    value: <REPLACE-WITH-A-HEADER-VALUE>\n  - name: <REPLACE-WITH-A-HEADER-NAME>\n    secretKeyRef:\n      name: <REPLACE-WITH-SECRET-NAME>\n      key: <REPLACE-WITH-SECRET-KEY>\n  clientTLS:\n    rootCA:\n      secretKeyRef:\n        name: <REPLACE-WITH-SECRET-NAME>\n        key: <REPLACE-WITH-SECRET-KEY>\n    certificate:\n      secretKeyRef:\n        name: <REPLACE-WITH-SECRET-NAME>\n        key: <REPLACE-WITH-SECRET-KEY>\n    privateKey:\n      secretKeyRef:\n        name: <REPLACE-WITH-SECRET-NAME>\n        key: <REPLACE-WITH-SECRET-KEY>\nscopes: # Optional\n  - <REPLACE-WITH-SCOPED-APPIDS>\nauth: # Optional\n  secretStore: <REPLACE-WITH-SECRETSTORE>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr Python SDK\nDESCRIPTION: Python example showing how to get configuration items from a Dapr configuration store. It creates a DaprClient, waits for Dapr to initialize, and retrieves and prints the configuration values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nfrom dapr.clients import DaprClient\n#code\nwith DaprClient() as d:\n        CONFIG_STORE_NAME = 'configstore'\n        keys = ['orderId1', 'orderId2']\n        #Startup time for dapr\n        d.wait(20)\n        configuration = d.get_configuration(store_name=CONFIG_STORE_NAME, keys=[keys], config_metadata={})\n        print(f\"Got key={configuration.items[0].key} value={configuration.items[0].value} version={configuration.items[0].version}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Binding Component in YAML\nDESCRIPTION: This snippet demonstrates how to set up a GraphQL binding component using YAML configuration. It includes the component type, version, and metadata fields for endpoint and headers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/graghql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: example.bindings.graphql\nspec:\n  type: bindings.graphql\n  version: v1\n  metadata:\n    - name: endpoint\n      value: \"http://localhost:8080/v1/graphql\"\n    - name: header:x-hasura-access-key\n      value: \"adminkey\"\n    - name: header:Cache-Control\n      value: \"no-cache\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulsar PubSub with Token Authentication\nDESCRIPTION: This YAML configuration demonstrates how to set up Apache Pulsar pubsub in Dapr with JWT token authentication. It uses a Kubernetes secret reference to securely store the authentication token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"pulsar.example.com:6650\"\n  - name: token\n    secretKeyRef:\n      name: pulsar\n      key:  token\n```\n\n----------------------------------------\n\nTITLE: Running Consul Locally with Docker\nDESCRIPTION: This Docker command runs a Consul server locally for development purposes. It binds the Consul interface to eth0 and exposes the default port 8500.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-consul.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name=dev-consul -e CONSUL_BIND_INTERFACE=eth0 consul\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata in JavaScript\nDESCRIPTION: This snippet shows how to execute a state transaction in JavaScript using the Dapr client, overriding CloudEvent metadata fields. It defines a state operation with custom metadata and prepares for execution.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DaprClient } = require('dapr-client');\n\nasync function executeStateTransaction() {\n    // Initialize Dapr client\n    const daprClient = new DaprClient();\n\n    // Define state operations\n    const ops = [];\n\n    const op1 = {\n        operationType: 'upsert',\n        request: {\n            key: 'key1',\n            value: Buffer.from('2'),\n            metadata: {\n                'id': 'unique-business-process-id',\n                'source': 'CustomersApp',\n                'type': 'CustomerCreated',\n                'subject': '123',\n                'my-custom-ce-field': 'abc'\n            }\n        }\n    };\n\n    ops.push(op1);\n\n    // Execute state transaction\n    const storeName = 'your-state-store-name';\n    const metadata = {};\n}\n\nexecuteStateTransaction();\n```\n\n----------------------------------------\n\nTITLE: Allowing Access to Specific Secrets in Vault Store\nDESCRIPTION: Configuration to allow access to only specific secrets (secret1 and secret2) while denying access to all others in a Vault secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/secrets-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: vault\n        defaultAccess: deny\n        allowedSecrets: [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Chat Completion API Request\nDESCRIPTION: JSON request structure for the chat completion API with system and user messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/openai.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operation\": \"chat-completion\",\n    \"data\": {\n        \"deploymentId\": \"my-model\",\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"message\": \"You are a bot that gives really short replies\"\n            },\n            {\n                \"role\": \"user\",\n                \"message\": \"Tell me a joke\"\n            }\n        ],\n        \"n\": 2,\n        \"maxTokens\": 30,\n        \"temperature\": 1.2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policy for Pub/Sub Component in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set a constant retry policy named 'pubsubRetry' with 10 maximum delivery attempts applied every 5 seconds for the 'pubsub' pub/sub component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-deadletter.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nspec:\n  policies:\n    retries:\n      pubsubRetry:\n        policy: constant\n        duration: 5s\n        maxRetries: 10\n  targets:\n    components:\n      pubsub:\n        inbound:\n          retry: pubsubRetry\n```\n\n----------------------------------------\n\nTITLE: Querying Dapr Health State via HTTP GET\nDESCRIPTION: This snippet demonstrates how to make an HTTP GET request to check the health state of Dapr. It uses the general health endpoint which checks for sidecar health and component readiness.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/health_api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:3500/v1.0/healthz\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dapr Workflow Information\nDESCRIPTION: HTTP endpoint to fetch workflow information including inputs and outputs. Requires the workflow ID in the URL path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:3500/v1.0/workflows/dapr/12345678\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr SDK in Go\nDESCRIPTION: This snippet shows how to delete state using the Dapr SDK in a Go application. It uses the Dapr client to delete a state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n//dependencies\nimport (\n\t\"context\"\n\tdapr \"github.com/dapr/go-sdk/client\"\n\n)\n\n//code\nfunc main() {\n    STATE_STORE_NAME := \"statestore\"\n    //Using Dapr SDK to delete the state\n    client, err := dapr.NewClient()\n    if err != nil {\n        panic(err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n\n    if err := client.DeleteState(ctx, STATE_STORE_NAME, \"order_1\"); err != nil {\n        panic(err)\n    }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 go run OrderProcessingService.go\n```\n\n----------------------------------------\n\nTITLE: SMTP Binding Request Example in JSON\nDESCRIPTION: Example JSON request for sending an email using the SMTP binding, demonstrating the use of metadata properties and email content.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/smtp.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"emailTo\": \"dapr-smtp-binding@example.net\",\n    \"emailCC\": \"cc1@example.net; cc2@example.net\",\n    \"subject\": \"Email subject\",\n    \"priority: \"1\"\n  },\n  \"data\": \"Testing Dapr SMTP Binding\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kitex Binding Component in YAML\nDESCRIPTION: This YAML configuration sets up a Kitex binding component with required metadata fields including hostPorts, destService, methodName, and version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kitex.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: bindings.kitex\nspec:\n  type: bindings.kitex\n  version: v1\n  metadata: \n  - name: hostPorts\n    value: \"127.0.0.1:8888\"\n  - name: destService\n    value: \"echo\"\n  - name: methodName\n    value: \"echo\"\n  - name: version\n    value: \"0.5.0\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Bulk Secret Retrieval from Vault\nDESCRIPTION: Example JSON response when retrieving all secrets in bulk from a store with name/value semantics, such as HashiCorp Vault. Each secret has its own entry with the secret name as the key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key1\": {\n        \"key1\": \"value1\"\n    },\n    \"key2\": {\n        \"key2\": \"value2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Readiness Probe for Dapr\nDESCRIPTION: Example showing how to set up a readiness probe in Kubernetes for a Dapr sidecar, which determines when the container is ready to receive traffic. It polls the /healthz endpoint on port 8080 every 3 seconds after an initial delay of 3 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/health-checks/sidecar-health.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    readinessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n      initialDelaySeconds: 3\n      periodSeconds: 3\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Middleware Component for Client Credentials Grant in YAML\nDESCRIPTION: This YAML configuration defines an OAuth middleware component for the Client Credentials Grant flow. It specifies client credentials, scopes, token URL, and other settings required for OAuth authorization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/oauth.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: myComponent\nspec:\n  type: middleware.http.oauth2clientcredentials\n  version: v1\n  metadata:\n  - name: clientId\n    value: \"<your client ID>\"\n  - name: clientSecret\n    value: \"<your client secret>\"\n  - name: scopes\n    value: \"<comma-separated scope names>\"\n  - name: tokenURL\n    value: \"<token issuing URL>\"\n  - name: headerName\n    value: \"<header name under which the secret token is saved>\"\n  - name: endpointParamsQuery\n    value: \"<list of additional key=value settings separated by ampersands or semicolons forwarded to the token issuing service>\"\n  - name: authStyle\n    value: \"<see comment>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js App Access Control in Dapr (YAML)\nDESCRIPTION: YAML configuration for the Node.js app that denies access to the 'neworder' method from the Python app. Sets a trust domain of 'public' with specific deny rules for the Python app in the 'myDomain' trust domain.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: nodeappconfig\nspec:\n  tracing:\n    samplingRate: \"1\"\n  accessControl:\n    defaultAction: allow\n    trustDomain: \"public\"\n    policies:\n    - appId: pythonapp\n      defaultAction: allow\n      trustDomain: 'myDomain'\n      namespace: \"default\"\n      operations:\n      - name: /neworder\n        httpVerb: ['POST']\n        action: deny\n```\n\n----------------------------------------\n\nTITLE: Storing Initial State in Dapr State Store\nDESCRIPTION: HTTP POST request to store an initial value in the Redis state store using Dapr's state management API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/statestore \\\n    -H \"Content-Type: application/json\" \\\n    -d '[\n            {\n                \"key\": \"sampleData\",\n                \"value\": \"1\"\n            }\n    ]'\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages with Bash HTTP Request to Dapr\nDESCRIPTION: This example demonstrates using curl in Bash to make an HTTP POST request to Dapr's bulk publish API. It sends two messages with different content types and entry IDs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha1/publish/bulk/my-pubsub-name/topic-a \\\n  -H 'Content-Type: application/json' \\\n  -d '[\n        {\n            \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  \"first text message\",\n            \"contentType\": \"text/plain\"\n        },\n        {\n            \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  {\n                \"message\": \"second JSON message\"\n            },\n            \"contentType\": \"application/json\"\n        },\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Dapr Crypto API using curl\nDESCRIPTION: Example curl command for decrypting data using the Dapr cryptography API. This request decrypts the previously encrypted payload using the specified key from the myAzureKeyVault crypto store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3500/v1.0-alpha1/crypto/myAzureKeyVault/decrypt \\\n    -X PUT\n    -H \"dapr-key-name: myCryptoKey\"\\\n    -H \"Content-Type: application/octet-stream\" \\\n    --data-binary \"gAAAAABhZfZ0Ywz4dQX8y9J0Zl5v7w6Z7xq4jV3cW9o2l4pQ0YD1LdR0Zk7zIYi4n2Ll7t6f0Z4X7r8x9o6a8GyL0X1m9Q0Z0A==\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Client for Cryptography in Go\nDESCRIPTION: Creates a new Dapr SDK client for cryptography operations in Go.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclient, err := dapr.NewClient()\n```\n\n----------------------------------------\n\nTITLE: Workflow Information Response Format\nDESCRIPTION: JSON response format returned when retrieving workflow instance information, including creation time, instance ID, last update time, custom properties, and runtime status.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createdAt\": \"2023-01-12T21:31:13Z\",\n  \"instanceID\": \"12345678\",\n  \"lastUpdatedAt\": \"2023-01-12T21:31:13Z\",\n  \"properties\": {\n    \"property1\": \"value1\",\n    \"property2\": \"value2\"\n  },\n  \"runtimeStatus\": \"RUNNING\"\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Status Query Command\nDESCRIPTION: Curl command for querying the status of a workflow instance using its ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3500/v1.0/workflows/dapr/12345678\n```\n\n----------------------------------------\n\nTITLE: Setting up Dapr Cron Job Handler in JavaScript\nDESCRIPTION: Code that sets up a server to receive Cron binding triggers and process batch jobs every 10 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function start() {\n    await server.binding.receive(cronBindingName,processBatch);\n    await server.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a SQLite state store component in Dapr. This defines the connection parameters, timeouts, table naming, and actor state store options for the component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.sqlite\n  version: v1\n  metadata:\n  # Connection string\n  - name: connectionString\n    value: \"data.db\"\n  # Timeout for database operations, in seconds (optional)\n  #- name: timeoutInSeconds\n  #  value: 20\n  # Name of the table where to store the state (optional)\n  #- name: tableName\n  #  value: \"state\"\n  # Cleanup interval in seconds, to remove expired rows (optional)\n  #- name: cleanupInterval\n  #  value: \"1h\"\n  # Set busy timeout for database operations\n  #- name: busyTimeout\n  #  value: \"2s\"\n  # Uncomment this if you wish to use SQLite as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Helm\nDESCRIPTION: This snippet shows the Helm command to install Dapr on Kubernetes with high availability enabled and namespace creation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr dapr/dapr \\\n  --version=<Dapr chart version> \\\n  --namespace dapr-system \\\n  --create-namespace \\\n  --values values.yml \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault with Certificate (Self-Hosted)\nDESCRIPTION: YAML configuration for setting up Azure Key Vault secret store component using certificate authentication in a self-hosted environment. Requires valid Azure Key Vault name, tenant ID, client ID, and local certificate file path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\n  namespace: default\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureCertificateFile\n    value : \"[pfx_certificate_file_fully_qualified_local_path]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Pub/Sub for Shared Topic Consumption in YAML\nDESCRIPTION: This YAML configuration shows how to set up an MQTT pub/sub component for consuming a shared topic. It uses a UUID tag for the consumer ID to ensure unique identifiers for each consumer instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt\n  version: v1\n  metadata:\n    - name: consumerID\n      value: \"{uuid}\"\n    - name: url\n      value: \"tcp://admin:public@localhost:1883\"\n    - name: qos\n      value: 1\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr HTTP Pipeline with OPA Middleware\nDESCRIPTION: This YAML snippet shows how to reference the OPA middleware in the Dapr configuration, specifically in the HTTP pipeline handlers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-opa.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: my-policy\n      type: middleware.http.opa\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Reminder with Complete Example\nDESCRIPTION: Complete example showing how to create a persistent reminder for an actor using curl. This creates a 'checkRebels' reminder for a 'stormtrooper' actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/actors/stormtrooper/50/reminders/checkRebels \\\n  -H \"Content-Type: application/json\" \\\n-d '{\n      \"data\": \"someData\",\n      \"dueTime\": \"1m\",\n      \"period\": \"20s\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Job with Dapr Sidecar Shutdown\nDESCRIPTION: YAML configuration for a Kubernetes Job that demonstrates proper Dapr sidecar shutdown using a curl command. The job uses Alpine Linux and includes annotations for Dapr integration with restart policy set to Never.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-job.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: job-with-shutdown\nspec:\n  template:\n    metadata:\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"with-shutdown\"\n    spec:\n      containers:\n      - name: job\n        image: alpine\n        command: [\"/bin/sh\", \"-c\", \"apk --no-cache add curl && sleep 20 && curl -X POST localhost:3500/v1.0/shutdown\"]\n      restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Aggregate Query Across Actor Instances with SQL\nDESCRIPTION: Shows how to perform an aggregate query across multiple actor instances using SQL. This example calculates the average temperature of all thermometer actors.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-management-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(value) FROM StateTable WHERE Id LIKE '<app-id>||<thermometer>||*||temperature'\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus with Service Discovery for Dapr Targets\nDESCRIPTION: Helm command to install Prometheus with a custom values file that enables automatic discovery of Dapr targets in a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr-prom prometheus-community/prometheus -f values.yaml -n dapr-monitoring --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Python App Access Control in Dapr (YAML)\nDESCRIPTION: YAML configuration for the Python app that sets up access control with a trust domain of 'myDomain'. Includes tracing configuration and sets the default action to allow all operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: pythonappconfig\nspec:\n  tracing:\n    samplingRate: \"1\"\n  accessControl:\n    defaultAction: allow\n    trustDomain: \"myDomain\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Queues Binding with Connection String\nDESCRIPTION: This YAML snippet demonstrates how to set up an Azure Service Bus Queues binding component using connection string authentication. It includes required and optional metadata fields for customizing the binding's behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/servicebusqueues.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.servicebusqueues\n  version: v1\n  metadata:\n  - name: connectionString # Required when not using Azure Authentication.\n    value: \"Endpoint=sb://{ServiceBusNamespace}.servicebus.windows.net/;SharedAccessKeyName={PolicyName};SharedAccessKey={Key};EntityPath={ServiceBus}\"\n  - name: queueName\n    value: \"queue1\"\n  # - name: timeoutInSec # Optional\n  #   value: \"60\"\n  # - name: handlerTimeoutInSec # Optional\n  #   value: \"60\"\n  # - name: disableEntityManagement # Optional\n  #   value: \"false\"\n  # - name: maxDeliveryCount # Optional\n  #   value: \"3\"\n  # - name: lockDurationInSec # Optional\n  #   value: \"60\"\n  # - name: lockRenewalInSec # Optional\n  #   value: \"20\"\n  # - name: maxActiveMessages # Optional\n  #   value: \"10000\"\n  # - name: maxConcurrentHandlers # Optional\n  #   value: \"10\"\n  # - name: defaultMessageTimeToLiveInSec # Optional\n  #   value: \"10\"\n  # - name: autoDeleteOnIdleInSec # Optional\n  #   value: \"3600\"\n  # - name: minConnectionRecoveryInSec # Optional\n  #   value: \"2\"\n  # - name: maxConnectionRecoveryInSec # Optional\n  #   value: \"300\"\n  # - name: maxRetriableErrorsPerSec # Optional\n  #   value: \"10\"\n  # - name: publishMaxRetries # Optional\n  #   value: \"5\"\n  # - name: publishInitialRetryIntervalInMs # Optional\n  #   value: \"500\"\n  # - name: direction\n  #   value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Variables in Golang\nDESCRIPTION: This snippet illustrates how to execute a GraphQL query with variables using the Dapr binding. It shows how to include query variables in the metadata map.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/graghql.md#2025-04-21_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nin := &dapr.InvokeBindingRequest{\nName: \"example.bindings.graphql\",\nOperation: \"query\",\nMetadata: map[string]string{ \n  \"query\": `query HeroNameAndFriends($episode: string!) { hero(episode: $episode) { name } }`,\n  \"variable:episode\": \"JEDI\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Response Format in Dapr\nDESCRIPTION: JSON response format returned when retrieving configuration items from a Dapr configuration store. Each configuration item is returned as a key-value pair.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"myConfigKey\": {\n        \"value\":\"myConfigValue\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages in Java with Dapr\nDESCRIPTION: This Java example demonstrates how to publish multiple messages in bulk to a Dapr pub/sub component. It creates a list of string messages and sends them to a specified topic using DaprPreviewClient.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.dapr.client.DaprClientBuilder;\nimport io.dapr.client.DaprPreviewClient;\nimport io.dapr.client.domain.BulkPublishResponse;\nimport io.dapr.client.domain.BulkPublishResponseFailedEntry;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass BulkPublisher {\n  private static final String PUBSUB_NAME = \"my-pubsub-name\";\n  private static final String TOPIC_NAME = \"topic-a\";\n\n  public void publishMessages() {\n    try (DaprPreviewClient client = (new DaprClientBuilder()).buildPreviewClient()) {\n      // Create a list of messages to publish\n      List<String> messages = new ArrayList<>();\n      for (int i = 0; i < 10; i++) {\n        String message = String.format(\"This is message #%d\", i);\n        messages.add(message);\n      }\n\n      // Publish list of messages using the bulk publish API\n      BulkPublishResponse<String> res = client.publishEvents(PUBSUB_NAME, TOPIC_NAME, \"text/plain\", messages).block();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Bulk Delete Row Mismatch Error in Go\nDESCRIPTION: This Go code illustrates how to return a Bulk Delete Row Mismatch error in a Dapr pluggable component. It creates a status with an Internal code and includes an ErrorInfo detail with additional metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nst := status.New(codes.Internal, \"fake-err-msg\")\nbr := &errdetails.ErrorInfo{}\nbr.Metadata = map[string]string{\n\taffected: \"99\",\n\texpected: \"100\",\n}\nst, err := st.WithDetails(br)\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Dapr Tracing Configuration\nDESCRIPTION: Example YAML snippet showing how to annotate a Kubernetes deployment to enable Dapr with the tracing configuration. The annotations specify the Dapr app ID, port, and reference the tracing configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      ...\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"MyApp\"\n        dapr.io/app-port: \"8080\"\n        dapr.io/config: \"tracing\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Queues PubSub with Microsoft Entra ID Authentication in YAML\nDESCRIPTION: YAML configuration for setting up Azure Service Bus Queues pubsub component using Microsoft Entra ID authentication. Includes the required namespaceName field and Microsoft Entra ID credentials for service authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-servicebus-queues.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: servicebus-pubsub\nspec:\n  type: pubsub.azure.servicebus.queues\n  version: v1\n  metadata:\n  - name: namespaceName\n    # Required when using Azure Authentication.\n    # Must be a fully-qualified domain name\n    value: \"servicebusnamespace.servicebus.windows.net\"\n  - name: azureTenantId\n    value: \"***\"\n  - name: azureClientId\n    value: \"***\"\n  - name: azureClientSecret\n    value: \"***\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Huawei OBS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up the Huawei OBS binding component. Includes required and optional fields such as bucket name, endpoint, access key, secret key, and region.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.huawei.obs\n  version: v1\n  - name: bucket\n    value: \"<your-bucket-name>\"\n  - name: endpoint\n    value: \"<obs-bucket-endpoint>\"\n  - name: accessKey\n    value: \"<your-access-key>\"\n  - name: secretKey\n    value: \"<your-secret-key>\"\n  # optional fields\n  - name: region\n    value: \"<your-bucket-region>\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in JavaScript with Dapr\nDESCRIPTION: This snippet shows how to subscribe to configuration updates using the Dapr JavaScript SDK. It creates a Dapr client, subscribes to specific configuration keys, and handles updates for 20 seconds before unsubscribing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient } from \"@dapr/dapr\";\n\n// JS SDK does not support Configuration API over HTTP protocol yet\nconst protocol = CommunicationProtocolEnum.GRPC;\nconst host = process.env.DAPR_HOST ?? \"localhost\";\nconst port = process.env.DAPR_GRPC_PORT ?? 3500;\n\nconst DAPR_CONFIGURATION_STORE = \"configstore\";\nconst CONFIGURATION_ITEMS = [\"orderId1\", \"orderId2\"];\n\nasync function main() {\n  const client = new DaprClient(host, port, protocol);\n  // Subscribe to config updates\n  try {\n    const stream = await client.configuration.subscribeWithKeys(\n      DAPR_CONFIGURATION_STORE,\n      CONFIGURATION_ITEMS,\n      (config) => {\n        console.log(\"Configuration update\", JSON.stringify(config.items));\n      }\n    );\n    // Unsubscribe to config updates and exit app after 20 seconds\n    setTimeout(() => {\n      stream.stop();\n      console.log(\"App unsubscribed to config changes\");\n      process.exit(0);\n    }, 20000);\n  } catch (error) {\n    console.log(\"Error subscribing to config updates, err:\" + error);\n    process.exit(1);\n  }\n}\nmain().catch((e) => console.error(e));\n```\n\n----------------------------------------\n\nTITLE: Configuring State Store Component in YAML\nDESCRIPTION: YAML configuration for defining a state store pluggable component. Shows how to specify the component type, version, and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-production-state-store\nspec:\n  type: state.my-component\n  version: v1\n  metadata:\n```\n\n----------------------------------------\n\nTITLE: Priority Queue Subscription Configuration\nDESCRIPTION: YAML configuration for setting up a priority queue with maxPriority metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: pubsub\nspec:\n  topic: checkout\n  routes: \n    default: /orders\n  pubsubname: order-pub-sub\n  metadata:\n    maxPriority: 3\n```\n\n----------------------------------------\n\nTITLE: Deploying MQTT Broker in Kubernetes\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment and Service for running an MQTT broker using the eclipse-mosquitto image. It exposes ports 1883 for MQTT and 9001 for WebSocket connections.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mqtt-broker\n  labels:\n    app-name: mqtt-broker\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app-name: mqtt-broker\n  template:\n    metadata:\n      labels:\n        app-name: mqtt-broker\n    spec:\n      containers:\n        - name: mqtt\n          image: eclipse-mosquitto:1.6\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: default\n              containerPort: 1883\n              protocol: TCP\n            - name: websocket\n              containerPort: 9001\n              protocol: TCP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mqtt-broker\n  labels:\n    app-name: mqtt-broker\nspec:\n  type: ClusterIP\n  selector:\n    app-name: mqtt-broker\n  ports:\n    - port: 1883\n      targetPort: default\n      name: default\n      protocol: TCP\n    - port: 9001\n      targetPort: websocket\n      name: websocket\n      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Scheduling R2D2 Job in Go\nDESCRIPTION: Demonstrates scheduling a job for R2D2 with error handling using the schedule function.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Schedule R2D2 job\nerr = schedule(droidJobs[0])\nif err != nil {\n\tlog.Fatalln(\"Error scheduling job: \", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing Kubernetes Secret\nDESCRIPTION: Example commands and configuration for creating and using a Kubernetes secret with Event Hubs binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic eventhubs-secret --from-literal=connectionString=*********\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: eventhubs\nspec:\n  type: bindings.azure.eventhubs\n  version: v1\n  metadata:\n  - name: connectionString\n    secretKeyRef:\n      name: eventhubs-secret\n      key: connectionString\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./eventhubs.yaml\n```\n\n----------------------------------------\n\nTITLE: CloudEvent with XML Data Example in Dapr Pub/Sub\nDESCRIPTION: An example of a v1.0 CloudEvent containing XML data content serialized in a JSON CloudEvent envelope. This demonstrates how different content types can be represented in CloudEvents.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"orders\",\n  \"pubsubname\": \"order_pub_sub\",\n  \"traceid\": \"00-113ad9c4e42b27583ae98ba698d54255-e3743e35ff56f219-01\",\n  \"tracestate\": \"\",\n  \"data\" : \"<note><to></to><from>user2</from><message>Order</message></note>\",\n  \"id\" : \"id-1234-5678-9101\",\n  \"specversion\" : \"1.0\",\n  \"datacontenttype\" : \"text/xml\",\n  \"subject\" : \"Test XML Message\",\n  \"source\" : \"https://example.com/message\",\n  \"type\" : \"xml.message\",\n   \"time\" : \"2020-09-23T06:23:21Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating a Workflow HTTP Request\nDESCRIPTION: HTTP POST endpoint for terminating a running workflow instance and its child workflows. Does not affect in-flight activity executions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceId>/terminate\n```\n\n----------------------------------------\n\nTITLE: Redis State Store Component Configuration with Query Indexes\nDESCRIPTION: YAML configuration for the Redis state store component, including the queryIndexes metadata that defines the indexing schema for JSON querying.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  initTimeout: 1m\n  metadata:\n  - name: redisHost\n    value: \"localhost:6379\"\n  - name: redisPassword\n    value: \"\"\n  - name: queryIndexes\n    value: |\n      [\n        {\n          \"name\": \"orgIndx\",\n          \"indexes\": [\n            {\n              \"key\": \"person.org\",\n              \"type\": \"TEXT\"\n            },\n            {\n              \"key\": \"person.id\",\n              \"type\": \"NUMERIC\"\n            },\n            {\n              \"key\": \"state\",\n              \"type\": \"TEXT\"\n            },\n            {\n              \"key\": \"city\",\n              \"type\": \"TEXT\"\n            }\n          ]\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Java\nDESCRIPTION: Subscribes to configuration updates using the Dapr Java SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nFlux<SubscribeConfigurationResponse> subscription = client.subscribeConfiguration(DAPR_CONFIGURATON_STORE,\n        CONFIGURATION_ITEMS.toArray(String[]::new));\n```\n\n----------------------------------------\n\nTITLE: Creating State Storage Table in Oracle Database\nDESCRIPTION: SQL DDL statement to create the 'dapr_state' table for storing state records in the Dapr user schema. This table includes columns for key, value, binary flag, etag, and timestamps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE dapr_state (\n\t\t\tkey varchar2(2000) NOT NULL PRIMARY KEY,\n\t\t\tvalue clob NOT NULL,\n\t\t\tbinary_yn varchar2(1) NOT NULL,\n\t\t\tetag varchar2(50)  NOT NULL,\n\t\t\tcreation_time TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL ,\n\t\t\texpiration_time TIMESTAMP WITH TIME ZONE NULL,\n\t\t\tupdate_time TIMESTAMP WITH TIME ZONE NULL\n      )\n```\n\n----------------------------------------\n\nTITLE: Redis Create Operation Request\nDESCRIPTION: JSON request format for creating a record in Redis using the create operation. Demonstrates setting a key with associated value data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"key\": \"key1\"\n  },\n  \"data\": {\n    \"Hello\": \"World\",\n    \"Lorem\": \"Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached State Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up a Memcached state store component in Dapr. The configuration includes required fields like 'hosts' and optional fields like 'maxIdleConnections' and 'timeout'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-memcached.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.memcached\n  version: v1\n  metadata:\n  - name: hosts\n    value: <REPLACE-WITH-COMMA-DELIMITED-ENDPOINTS> # Required. Example: \"memcached.default.svc.cluster.local:11211\"\n  - name: maxIdleConnections\n    value: <REPLACE-WITH-MAX-IDLE-CONNECTIONS> # Optional. default: \"2\"\n  - name: timeout\n    value: <REPLACE-WITH-TIMEOUT> # Optional. default: \"1000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Timer with Multiple Parameters\nDESCRIPTION: JSON request body for configuring a timer with due time, period, TTL, and limited invocations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"10s\",\n  \"period\":\"R4/PT3S\",\n  \"ttl\":\"10s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Queues Binding with Microsoft Entra ID\nDESCRIPTION: This YAML snippet shows how to configure the Azure Service Bus Queues binding component using Microsoft Entra ID authentication. It includes the necessary metadata fields for Azure AD authentication and queue configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/servicebusqueues.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.servicebusqueues\n  version: v1\n  metadata:\n  - name: azureTenantId\n    value: \"***\"\n  - name: azureClientId\n    value: \"***\"\n  - name: azureClientSecret\n    value: \"***\"\n  - name: namespaceName\n    # Required when using Azure Authentication.\n    # Must be a fully-qualified domain name\n    value: \"servicebusnamespace.servicebus.windows.net\"\n  - name: queueName\n    value: queue1\n  - name: ttlInSeconds\n    value: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SSM Parameter Store Secret Store Component in YAML\nDESCRIPTION: This snippet demonstrates how to configure an AWS SSM Parameter Store secret store component in Dapr. It includes the required component format with metadata fields for region, access credentials, and optional prefix parameter.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/aws-parameter-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: awsparameterstore\nspec:\n  type: secretstores.aws.parameterstore\n  version: v1\n  metadata:\n  - name: region\n    value: \"[aws_region]\"\n  - name: accessKey\n    value: \"[aws_access_key]\"\n  - name: secretKey\n    value: \"[aws_secret_key]\"\n  - name: sessionToken\n    value: \"[aws_session_token]\"\n  - name: prefix\n    value: \"[secret_name]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Subscription Resource (v2alpha1)\nDESCRIPTION: This YAML snippet demonstrates the structure of a v2alpha1 Subscription resource in Dapr. It includes fields for topic, routes with matching rules, pubsub name, dead letter topic, and bulk subscribe options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/subscription-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: <REPLACE-WITH-NAME>\nspec:\n  topic: <REPLACE-WITH-TOPIC-NAME> # Required\n  routes: # Required\n    rules:\n      - match: <REPLACE-WITH-CEL-FILTER>\n        path: <REPLACE-WITH-PATH>\n  pubsubname: <REPLACE-WITH-PUBSUB-NAME> # Required\n  deadLetterTopic: <REPLACE-WITH-DEADLETTERTOPIC-NAME> # Optional\n  bulkSubscribe: # Optional\n    enabled: <REPLACE-WITH-BOOLEAN-VALUE>\n    maxMessagesCount: <REPLACE-WITH-VALUE>\n    maxAwaitDurationMs: <REPLACE-WITH-VALUE>\nscopes:\n- <REPLACE-WITH-SCOPED-APPIDS>\n```\n\n----------------------------------------\n\nTITLE: Defining Declarative Subscription in YAML\nDESCRIPTION: This YAML file defines a declarative subscription to the 'orders' topic using the 'order-pub-sub' pubsub component. It specifies the route for message handling and the scopes for which the subscription is enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order-pub-sub\nspec:\n  topic: orders\n  routes: \n    default: /checkout\n  pubsubname: order-pub-sub\nscopes:\n- orderprocessing\n- checkout\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Dapr Debugging\nDESCRIPTION: Example launch.json configuration for debugging Dapr applications in VSCode. It includes configurations for both Node.js and Python applications, each with pre-launch and post-debug tasks for Dapr sidecar management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-how-to-debug-multiple-dapr-apps.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n       {\n         \"type\": \"pwa-node\",\n         \"request\": \"launch\",\n         \"name\": \"Nodeapp with Dapr\",\n         \"skipFiles\": [\n             \"<node_internals>/**\"\n         ],\n         \"program\": \"${workspaceFolder}/node/app.js\",\n         \"preLaunchTask\": \"daprd-debug-node\",\n         \"postDebugTask\": \"daprd-down-node\"\n       },\n       {\n         \"type\": \"python\",\n         \"request\": \"launch\",\n         \"name\": \"Pythonapp with Dapr\",\n         \"program\": \"${workspaceFolder}/python/app.py\",\n         \"console\": \"integratedTerminal\",\n         \"preLaunchTask\": \"daprd-debug-python\",\n         \"postDebugTask\": \"daprd-down-python\"\n       }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Mismatch Error in Java\nDESCRIPTION: This Java code demonstrates how to return an ETag Mismatch error in a Dapr pluggable component using Project Reactor. It creates a Status object with a FAILED_PRECONDITION code and includes a BadRequest.FieldViolation detail.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Status status = Status.newBuilder()\n    .setCode(io.grpc.Status.Code.FAILED_PRECONDITION.value())\n    .setMessage(\"fake-err-msg-for-etag-mismatch\")\n    .addDetails(Any.pack(BadRequest.FieldViolation.newBuilder()\n        .setField(\"etag\")\n        .setDescription(\"The ETag field provided does not match the one in the store\")\n        .build()))\n    .build();\nreturn Mono.error(StatusProto.toStatusException(status));\n```\n\n----------------------------------------\n\nTITLE: Bulk Subscribe Message Processing Response in Dapr\nDESCRIPTION: This JSON snippet shows the expected response format for bulk message processing. It includes an array of statuses for each message entry, allowing individual handling of multiple messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statuses\": \n  [ \n    {\n    \"entryId\": \"<entryId1>\",\n    \"status\": \"<status>\"\n    }, \n    {\n    \"entryId\": \"<entryId2>\",\n    \"status\": \"<status>\"\n    } \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct External State Interaction in Workflows\nDESCRIPTION: Examples of correct indirect interaction with external state in workflows across different languages. These practices adhere to workflow best practices by using workflow inputs and activity tasks.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Do this!!\nstring configuration = workflowInput.Configuration; // imaginary workflow input argument\nstring data = await context.CallActivityAsync<string>(\"MakeHttpCall\", \"https://example.com/api/data\");\n```\n\nLANGUAGE: java\nCODE:\n```\n// Do this!!\nString configuration = ctx.getInput(InputType.class).getConfiguration(); // imaginary workflow input argument\nString data = ctx.callActivity(MakeHttpCall.class, \"https://example.com/api/data\", String.class).await();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this!!\nconst configuration = workflowInput.getConfiguration(); // imaginary workflow input argument\nconst data = yield ctx.callActivity(makeHttpCall, \"https://example.com/api/data\");\n```\n\nLANGUAGE: go\nCODE:\n```\n// Do this!!\nerr := ctx.CallActivity(MakeHttpCallActivity, workflow.ActivityInput(\"https://example.com/api/data\")).Await(&output)\n```\n\n----------------------------------------\n\nTITLE: Defining Droid Jobs Structure in Go\nDESCRIPTION: Initializes an array of DroidJob structs containing job definitions for R2-D2, C-3PO, and BB-8 droids with their respective maintenance tasks and due times.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndroidJobs := []DroidJob{\n\t{Name: \"R2-D2\", Job: \"Oil Change\", DueTime: \"5s\"},\n\t{Name: \"C-3PO\", Job: \"Memory Wipe\", DueTime: \"15s\"},\n\t{Name: \"BB-8\", Job: \"Internal Gyroscope Check\", DueTime: \"30s\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure App Configuration Component in YAML\nDESCRIPTION: YAML configuration for setting up Azure App Configuration store component in Dapr. Includes all available metadata fields like host, connectionString, maxRetries, retryDelay, and authentication options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/azure-appconfig-configuration-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: configuration.azure.appconfig\n  version: v1\n  metadata:\n  - name: host # host should be used when Azure Authentication mechanism is used.\n    value: <HOST>\n  - name: connectionString # connectionString should not be used when Azure Authentication mechanism is used.\n    value: <CONNECTIONSTRING>\n  - name: maxRetries\n    value: # Optional\n  - name: retryDelay\n    value: # Optional\n  - name: maxRetryDelay\n    value: # Optional\n  - name: azureEnvironment # Optional, defaults to AZUREPUBLICCLOUD\n    value: \"AZUREPUBLICCLOUD\"\n  # See authentication section below for all options\n  - name: azureTenantId # Optional\n    value: \"[your_service_principal_tenant_id]\"\n  - name: azureClientId # Optional\n    value: \"[your_service_principal_app_id]\"\n  - name: azureCertificateFile # Optional\n    value : \"[pfx_certificate_file_fully_qualified_local_path]\"\n  - name: subscribePollInterval # Optional\n    value: #Optional [Expected format example - 24h]\n```\n\n----------------------------------------\n\nTITLE: Dapr Service Invocation Using curl\nDESCRIPTION: Examples of invoking Dapr services using curl commands, demonstrating different URL formats and header configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3602/v1.0/invoke/checkout/method/checkout/100\n\ncurl -H 'dapr-app-id: checkout' 'http://localhost:3602/checkout/100' -X POST\n\ncurl 'http://dapr-app-id:checkout@localhost:3602/checkout/100' -X POST\n\ndapr invoke --app-id checkout --method checkout/100\n\ncurl 'http://dapr-app-id:checkout@localhost:3602/checkout/100?basket=1234&key=abc` -X POST\n\ncurl http://localhost:3602/v1.0/invoke/checkout.production/method/checkout/100 -X POST\n```\n\n----------------------------------------\n\nTITLE: Applying a token secret to a Kubernetes namespace\nDESCRIPTION: This command applies a token secret YAML file to a specific Kubernetes namespace during token rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --file token-secret.yaml --namespace <namespace-name>\n```\n\n----------------------------------------\n\nTITLE: Applying OAuth2 Client Credentials Middleware in Dapr Configuration\nDESCRIPTION: This YAML snippet shows how to reference the OAuth2 client credentials middleware in a Dapr configuration. It defines an HTTP pipeline handler that uses the middleware.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-oauth2clientcredentials.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: oauth2clientcredentials\n      type: middleware.http.oauth2clientcredentials\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Method with Parameters\nDESCRIPTION: Examples showing how to pass parameters when invoking an actor method. The examples call the 'fly' method on an 'x-wing' actor with ID 33, passing a destination parameter as a JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/actors/x-wing/33/method/fly \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"destination\": \"Hoth\"\n      }'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/actors/x-wing/33/method/fly \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"destination\\\":\\\"Hoth\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Redis Host Configuration in Component YAML\nDESCRIPTION: YAML configuration showing how to specify Redis host address in Dapr component configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/redis-lock.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisHost\n      value: redis-master:6379\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Consul State Store Component in YAML\nDESCRIPTION: This YAML configuration defines a Dapr component for the HashiCorp Consul state store. It specifies required fields such as datacenter and httpAddr, as well as optional fields like aclToken, scheme, and keyPrefixPath.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-consul.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.consul\n  version: v1\n  metadata:\n  - name: datacenter\n    value: <REPLACE-WITH-DATA-CENTER> # Required. Example: dc1\n  - name: httpAddr\n    value: <REPLACE-WITH-CONSUL-HTTP-ADDRESS> # Required. Example: \"consul.default.svc.cluster.local:8500\"\n  - name: aclToken\n    value: <REPLACE-WITH-ACL-TOKEN> # Optional. default: \"\"\n  - name: scheme\n    value: <REPLACE-WITH-SCHEME> # Optional. default: \"http\"\n  - name: keyPrefixPath\n    value: <REPLACE-WITH-TABLE> # Optional. default: \"\"\n```\n\n----------------------------------------\n\nTITLE: Java Subscriber Implementation\nDESCRIPTION: Java code implementing a Dapr subscriber that listens for events on the 'orders' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Topic(name = \"orders\", pubsubName = \"orderpubsub\")\n@PostMapping(path = \"/orders\", consumes = MediaType.ALL_VALUE)\npublic Mono<ResponseEntity> getCheckout(@RequestBody(required = false) CloudEvent<Order> cloudEvent) {\n    return Mono.fromSupplier(() -> {\n        try {\n            logger.info(\"Subscriber received: \" + cloudEvent.getData().getOrderId());\n            return ResponseEntity.ok(\"SUCCESS\");\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Pipeline for OAuth2 Middleware\nDESCRIPTION: YAML configuration for setting up the HTTP pipeline in Dapr to include the OAuth2 middleware handler.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: oauth2\n      type: middleware.http.oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SES Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an AWS SES binding component with authentication and email settings. Includes required metadata fields for AWS credentials and email parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/ses.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: ses\nspec:\n  type: bindings.aws.ses\n  version: v1\n  metadata:\n  - name: accessKey\n    value: *****************\n  - name: secretKey\n    value: *****************\n  - name: region\n    value: \"eu-west-1\"\n  - name: sessionToken\n    value: mysession\n  - name: emailFrom\n    value: \"sender@example.com\"\n  - name: emailTo\n    value: \"receiver@example.com\"\n  - name: emailCc\n    value: \"cc@example.com\"\n  - name: emailBcc\n    value: \"bcc@example.com\"\n  - name: subject\n    value: \"subject\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core with Dapr Configuration Store\nDESCRIPTION: This snippet shows how to integrate Dapr configuration store into an ASP.NET Core application. It adds both initial configuration and streaming configuration updates from Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\nusing Dapr.Client;\nusing Dapr.Extensions.Configuration;\nusing System.Collections.Generic;\nusing System.Threading;\n\nnamespace ConfigurationApi\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Starting application.\");\n            CreateHostBuilder(args).Build().Run();\n            Console.WriteLine(\"Closing application.\");\n        }\n\n        /// <summary>\n        /// Creates WebHost Builder.\n        /// </summary>\n        /// <param name=\"args\">Arguments.</param>\n        /// <returns>Returns IHostbuilder.</returns>\n        public static IHostBuilder CreateHostBuilder(string[] args)\n        {\n            var client = new DaprClientBuilder().Build();\n            return Host.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(config =>\n                {\n                    // Get the initial value and continue to watch it for changes.\n                    config.AddDaprConfigurationStore(\"configstore\", new List<string>() { \"orderId1\",\"orderId2\" }, client, TimeSpan.FromSeconds(20));\n                    config.AddStreamingDaprConfigurationStore(\"configstore\", new List<string>() { \"orderId1\",\"orderId2\" }, client, TimeSpan.FromSeconds(20));\n\n                })\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Token Environment Variable in Self-Hosted Mode\nDESCRIPTION: Sets the DAPR_API_TOKEN environment variable for an application in self-hosted mode to access the token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport DAPR_API_TOKEN=<my-dapr-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Tracing with Zipkin in Self-Hosted Mode\nDESCRIPTION: Default YAML configuration created during 'dapr init' that enables Zipkin tracing. Located in the .dapr directory, this configuration sets the sampling rate to 100% and points to the local Zipkin endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprConfig\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    zipkin:\n      endpointAddress: \"http://localhost:9411/api/v2/spans\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SNS/SQS Pub/Sub Component with Localstack\nDESCRIPTION: Dapr component configuration YAML for connecting to a local Localstack instance. This configuration uses placeholder credentials and specifies the local endpoint for testing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: snssqs-pubsub\nspec:\n  type: pubsub.aws.snssqs\n  version: v1\n  metadata:\n    - name: accessKey\n      value: \"anyString\"\n    - name: secretKey\n      value: \"anyString\"\n    - name: endpoint\n      value: http://localhost:4566\n    # Use us-east-1 or any other region if provided to localstack as defined by \"AWS_DEFAULT_REGION\" envvar\n    - name: region\n      value: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Binding Component in YAML\nDESCRIPTION: YAML configuration for the PostgreSQL binding component that establishes connection to the database with necessary parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: sqldb\n  namespace: quickstarts\nspec:\n  type: bindings.postgresql\n  version: v1\n  metadata:\n  - name: url # Required\n    value: \"user=postgres password=docker host=localhost port=5432 dbname=orders pool_min_conns=1 pool_max_conns=10\"\n  - name: direction\n    value: \"output\" # direction of the postgresql binding\n```\n\n----------------------------------------\n\nTITLE: Getting Files via SFTP Binding\nDESCRIPTION: JSON request format for retrieving files through the SFTP binding, specifying the operation type and filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sftp.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"fileName\": \"<filename>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Invocation cURL Example\nDESCRIPTION: Example of invoking a math service using cURL command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/invoke/mathService/method/add \\\n  -H \"Content-Type: application/json\"\n  -d '{ \"arg1\": 10, \"arg2\": 23}'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topic in Java using Dapr SDK\nDESCRIPTION: This Java code shows how to subscribe to the 'orders' topic using the Dapr SDK with Spring Boot. It defines a REST controller with a method annotated with @Topic to handle incoming messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//dependencies\nimport io.dapr.Topic;\nimport io.dapr.client.domain.CloudEvent;\nimport org.springframework.web.bind.annotation.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport reactor.core.publisher.Mono;\n\n//code\n@RestController\npublic class CheckoutServiceController {\n\n    private static final Logger log = LoggerFactory.getLogger(CheckoutServiceController.class);\n     //Subscribe to a topic\n    @Topic(name = \"orders\", pubsubName = \"order-pub-sub\")\n    @PostMapping(path = \"/checkout\")\n    public Mono<Void> getCheckout(@RequestBody(required = false) CloudEvent<String> cloudEvent) {\n        return Mono.fromRunnable(() -> {\n            try {\n                log.info(\"Subscriber received: \" + cloudEvent.getData());\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Latency Buckets in Dapr Configuration\nDESCRIPTION: YAML configuration example that shows how to customize metrics latency buckets in Dapr. This example reduces the default 34 buckets to 11 buckets with higher granularity in the middle range of values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: custom-metrics\nspec:\n    metrics:\n        enabled: true\n        latencyDistributionBuckets: [10, 25, 40, 50, 70, 100, 150, 200, 500, 1000, 5000]\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with C# in Dapr\nDESCRIPTION: This C# example illustrates how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses the DaprClient to execute a state transaction with two operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Program\n{\n    private const string DAPR_STORE_NAME = \"statestore\";\n\n    public static async Task Main(string[] args)\n    {\n        var client = new DaprClientBuilder().Build();\n\n        // Define the first state operation to save the value \"2\"\n        var op1 = new StateTransactionRequest(\n            key: \"key1\",\n            value: Encoding.UTF8.GetBytes(\"2\"),\n            operationType: StateOperationType.Upsert\n        );\n\n        // Define the second state operation to publish the value \"3\" with metadata\n        var metadata = new Dictionary<string, string>\n        {\n            { \"outbox.projection\", \"true\" }\n        };\n        var op2 = new StateTransactionRequest(\n            key: \"key1\",\n            value: Encoding.UTF8.GetBytes(\"3\"),\n            operationType: StateOperationType.Upsert,\n            metadata: metadata\n        );\n\n        // Create the list of state operations\n        var ops = new List<StateTransactionRequest> { op1, op2 };\n\n        // Execute the state transaction\n        await client.ExecuteStateTransactionAsync(DAPR_STORE_NAME, ops);\n        Console.WriteLine(\"State transaction executed.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis State Store with Namespace Database\nDESCRIPTION: YAML configuration for Redis state store component with namespace isolation using logical database numbers\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/namespaced-actors.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n  - name: redisDB\n    value: \"1\"\n  - name: redisPassword\n    secretKeyRef:\n      name: redis-secret\n      key:  redis-password\n  - name: actorStateStore\n    value: \"true\"\n  - name: redisDB\n    value: \"1\"\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Hubs Pub/Sub Component in YAML\nDESCRIPTION: This YAML configuration sets up an Azure Event Hubs pub/sub component with various configuration options including connection strings, entity management, and checkpoint store attributes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-eventhubs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: eventhubs-pubsub\nspec:\n  type: pubsub.azure.eventhubs\n  version: v1\n  metadata:\n    # Either connectionString or eventHubNamespace is required\n    # Use connectionString when *not* using Microsoft Entra ID\n    - name: connectionString\n      value: \"Endpoint=sb://{EventHubNamespace}.servicebus.windows.net/;SharedAccessKeyName={PolicyName};SharedAccessKey={Key};EntityPath={EventHub}\"\n    # Use eventHubNamespace when using Microsoft Entra ID\n    - name: eventHubNamespace\n      value: \"namespace\"\n    - name: consumerID # Optional. If not supplied, the runtime will create one.\n      value: \"channel1\"\n    - name: enableEntityManagement\n      value: \"false\"\n    - name: enableInOrderMessageDelivery\n      value: \"false\"\n    # The following four properties are needed only if enableEntityManagement is set to true\n    - name: resourceGroupName\n      value: \"test-rg\"\n    - name: subscriptionID\n      value: \"value of Azure subscription ID\"\n    - name: partitionCount\n      value: \"1\"\n    - name: messageRetentionInDays\n      value: \"3\"\n    # Checkpoint store attributes\n    - name: storageAccountName\n      value: \"myeventhubstorage\"\n    - name: storageAccountKey\n      value: \"112233445566778899\"\n    - name: storageContainerName\n      value: \"myeventhubstoragecontainer\"\n    # Alternative to passing storageAccountKey\n    - name: storageConnectionString\n      value: \"DefaultEndpointsProtocol=https;AccountName=<account>;AccountKey=<account-key>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reentrancy in .NET\nDESCRIPTION: Configure a .NET actor service to enable reentrancy by setting the ReentrancyConfig property in the AddActors options. This allows actors to receive reentrant calls with a maximum stack depth of 32.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actor-reentrancy.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Startup\n{\n\tpublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddSingleton<BankService>();\n\t\tservices.AddActors(options =>\n\t\t{\n\t\toptions.Actors.RegisterActor<DemoActor>();\n\t\toptions.ReentrancyConfig = new Dapr.Actors.ActorReentrancyConfig()\n\t\t\t{\n\t\t\tEnabled = true,\n\t\t\tMaxStackDepth = 32,\n\t\t\t};\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in AWS S3 using Dapr Binding\nDESCRIPTION: JSON structure for listing objects in an S3 bucket using the 'list' operation. The request can include optional parameters like maxResults, prefix, marker, and delimiter to filter and paginate results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"data\": {\n    \"maxResults\": 10,\n    \"prefix\": \"file\",\n    \"marker\": \"hvlcCQFSOD5TD\",\n    \"delimiter\": \"i0FvxAn2EOEL6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Large File with AES Key in JavaScript\nDESCRIPTION: Decrypts a large encrypted file using the AES key and streams the result to a new file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait pipeline(\n  createReadStream(\"encrypted.out\"),\n  await client.crypto.decrypt({\n    componentName: \"localstorage\",\n  }),\n  createWriteStream(\"decrypted.out.jpg\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Conversation Component in YAML\nDESCRIPTION: YAML configuration for setting up the OpenAI conversation component with API key and model selection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: openai\nspec:\n  type: conversation.openai\n  metadata:\n  - name: key\n    value: <REPLACE_WITH_YOUR_KEY>\n  - name: model\n    value: gpt-4-turbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Timer with Period and TTL\nDESCRIPTION: JSON request body for configuring a timer with a period of 3 seconds and a TTL of 20 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"period\":\"PT3S\",\n  \"ttl\":\"20s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr SDK in Python\nDESCRIPTION: This snippet demonstrates how to delete state using the Dapr SDK in a Python application. It uses the DaprClient to delete a state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nfrom dapr.clients.grpc._request import TransactionalStateOperation, TransactionOperationType\n\n#code\nlogging.basicConfig(level = logging.INFO)\nDAPR_STORE_NAME = \"statestore\"\n\n#Using Dapr SDK to delete the state\nwith DaprClient() as client:\n    client.delete_state(store_name=DAPR_STORE_NAME, key=\"order_1\")\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 -- python3 OrderProcessingService.py\n```\n\n----------------------------------------\n\nTITLE: Azure SignalR Message Contract Format\nDESCRIPTION: JSON format for publishing messages to Azure SignalR output binding, including target specification, arguments, and optional group metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/signalr.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"Target\": \"<enter message name>\",\n        \"Arguments\": [\n            {\n                \"sender\": \"dapr\",\n                \"text\": \"Message from dapr output binding\"\n            }\n        ]\n    },\n    \"metadata\": {\n        \"group\": \"chat123\"\n    },\n    \"operation\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: TLS-Enabled Solace-AMQP Component Configuration\nDESCRIPTION: Extended configuration example showing TLS setup with certificates and secret references for secure communication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-solace-amqp.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: solace\nspec:\n  type: pubsub.solace.amqp\n  version: v1\n  metadata:\n  - name: url\n    value: \"amqps://host.domain[:port]\"\n  - name: username\n    value: 'default'\n  - name: password\n    value: 'default'\n  - name: caCert\n    value: ${{ myLoadedCACert }}\n  - name: clientCert\n    value: ${{ myLoadedClientCert }}\n  - name: clientKey\n    secretKeyRef:\n      name: mySolaceClientKey\n      key: mySolaceClientKey\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring JetStream KV State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a JetStream KV state store component in Dapr. Includes required fields like NATS URL and bucket name, plus optional JWT authentication parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-jetstream-kv.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.jetstream\n  version: v1\n  metadata:\n  - name: natsURL\n    value: \"nats://localhost:4222\"\n  - name: jwt\n    value: \"eyJhbGciOiJ...6yJV_adQssw5c\"\n  - name: seedKey\n    value: \"SUACS34K232O...5Z3POU7BNIL4Y\"\n  - name: bucket\n    value: \"<bucketName>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Output Binding Component in YAML\nDESCRIPTION: This YAML configuration creates a Kafka output binding component named 'checkout'. It specifies the Kafka broker, topics, consumer group, and sets the direction to 'output'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: checkout\nspec:\n  type: bindings.kafka\n  version: v1\n  metadata:\n  # Kafka broker connection setting\n  - name: brokers\n    value: localhost:9092\n  # consumer configuration: topic and consumer group\n  - name: topics\n    value: sample\n  - name: consumerGroup\n    value: group1\n  # publisher configuration: topic\n  - name: publishTopic\n    value: sample\n  - name: authRequired\n    value: false\n  - name: direction\n    value: output\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Workflow Actor Backend Component\nDESCRIPTION: This YAML snippet demonstrates how to define an actor backend component for Dapr Workflows. It specifies the component type as 'workflowbackend.actor' and sets the version to 'v1'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: actorbackend\nspec:\n  type: workflowbackend.actor\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Buffer Size in Kubernetes Deployment\nDESCRIPTION: Kubernetes deployment YAML configuration that sets the HTTP header read buffer size using Dapr annotations. Demonstrates setting the buffer size to 16KB along with other Dapr-specific configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/increase-read-buffer-size.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/http-read-buffer-size: \"16\"\n#...\n```\n\n----------------------------------------\n\nTITLE: Installing Couchbase on Kubernetes using Helm\nDESCRIPTION: Helm commands for installing Couchbase Operator and Cluster on Kubernetes using official Helm charts.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-couchbase.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add couchbase https://couchbase-partners.github.io/helm-charts/\nhelm install couchbase/couchbase-operator\nhelm install couchbase/couchbase-cluster\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document Structure for Redis State Store\nDESCRIPTION: Example of a JSON document structure that can be stored and queried in the Redis state store with JSON querying enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"1\",\n  \"value\": {\n    \"person\": {\n      \"org\": \"Dev Ops\",\n      \"id\": 1036\n    },\n    \"city\": \"Seattle\",\n    \"state\": \"WA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Changes with cURL in Dapr\nDESCRIPTION: Shell command using cURL to subscribe to changes for a specific configuration item in a Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET 'http://localhost:3500/v1.0/configuration/mystore/subscribe?key=myConfigKey'\n```\n\n----------------------------------------\n\nTITLE: Raising Workflow Event in Go\nDESCRIPTION: Demonstrates how to raise an event to a Dapr workflow using the Go SDK. It uses the DaprClient to send an approval event to a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc raiseEvent() {\n  daprClient, err := client.NewClient()\n  if err != nil {\n    log.Fatalf(\"failed to initialize the client\")\n  }\n  err = daprClient.RaiseEventWorkflow(context.Background(), &client.RaiseEventWorkflowRequest{\n    InstanceID: \"instance_id\",\n    WorkflowComponent: \"dapr\",\n    EventName: \"approval_received\",\n    EventData: Approval{\n      Approver: \"Jane Doe\",\n    },\n  })\n  if err != nil {\n    log.Fatalf(\"failed to raise event on workflow\")\n  }\n  log.Println(\"raised an event on specified workflow\")\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in Python with Dapr\nDESCRIPTION: This snippet shows how to subscribe to configuration updates using the Dapr Python SDK. It creates a Dapr client, subscribes to specific configuration keys, and handles updates for 20 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\nfrom dapr.clients import DaprClient\n#code\n\ndef handler(id: str, resp: ConfigurationResponse):\n    for key in resp.items:\n        print(f\"Subscribed item received key={key} value={resp.items[key].value} \"\n              f\"version={resp.items[key].version} \"\n              f\"metadata={resp.items[key].metadata}\", flush=True)\n\ndef executeConfiguration():\n    with DaprClient() as d:\n        storeName = 'configurationstore'\n        keys = ['orderId1', 'orderId2']\n        id = d.subscribe_configuration(store_name=storeName, keys=keys,\n                          handler=handler, config_metadata={})\n        print(\"Subscription ID is\", id, flush=True)\n        sleep(20)\n\nexecuteConfiguration()\n```\n\n----------------------------------------\n\nTITLE: Populating State Store with Employee Dataset\nDESCRIPTION: Sends a POST request to populate the state store with employee data from a JSON file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d @query-api-examples/dataset.json http://localhost:3500/v1.0/state/statestore\n```\n\n----------------------------------------\n\nTITLE: Using Protected Topics with Scopes in Redis Pub/Sub Component\nDESCRIPTION: This YAML configuration demonstrates the use of protectedTopics to secure sensitive data channels. Topics A and B are marked as protected, requiring explicit permissions for any application to interact with them. App1 has full access to A and B, app2 can only interact with B, while app3 can only access non-protected topics.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: \"localhost:6379\"\n  - name: redisPassword\n    value: \"\"\n  - name: protectedTopics\n    value: \"A,B\"\n  - name: publishingScopes\n    value: \"app1=A,B;app2=B\"\n  - name: subscriptionScopes\n    value: \"app1=A,B;app2=B\"\n```\n\n----------------------------------------\n\nTITLE: Presigning an S3 Object with Dapr Binding\nDESCRIPTION: Example of generating a presigned URL for an existing S3 object with a specified time-to-live. This operation uses the 'presign' operation type with 'presignTTL' and 'key' metadata values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"presign\\\", \\\"metadata\\\": { \\\"presignTTL\\\": \\\"15m\\\", \\\"key\\\": \\\"my-test-file.txt\\\" } }\" \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"presign\", \"metadata\": { \"presignTTL\": \"15m\", \"key\": \"my-test-file.txt\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar with Custom Resources Path\nDESCRIPTION: Starts a Dapr sidecar with a specific location for resource definition files. This allows you to specify where your component definitions and other Dapr resources are located.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --resources-path <PATH-TO-RESOURCES-FILES>\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Sidecar Resource Constraints in Kubernetes YAML\nDESCRIPTION: Example YAML annotations for configuring CPU and memory limits and requests for the Dapr sidecar in a production-ready setup. This snippet demonstrates how to set resource constraints using Kubernetes pod annotations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/enabled: \"true\"\n  dapr.io/app-id: \"nodeapp\"\n  # our daprd memory settings\n  dapr.io/sidecar-memory-limit: \"1000Mi\"   # your memory limit\n  dapr.io/env: \"GOMEMLIMIT=900MiB\"         # 90% of your memory limit. Also notice the suffix \"MiB\" instead of \"Mi\"\n```\n\n----------------------------------------\n\nTITLE: Purging Dapr Workflow\nDESCRIPTION: HTTP endpoint to permanently delete workflow metadata from the state store. Only works for workflows in COMPLETED, FAILED, or TERMINATED states.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/dapr/12345678/purge\n```\n\n----------------------------------------\n\nTITLE: Listing Dapr Configurations in Kubernetes\nDESCRIPTION: Command to list all Dapr Configuration resources in a Kubernetes cluster using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr configurations -k\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body for Lock Acquisition in Dapr\nDESCRIPTION: The JSON payload structure for the lock acquisition request. It requires a resourceId (the item to lock), a lockOwner (unique identifier), and an expiry time in seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resourceId\": \"\",\n    \"lockOwner\": \"\",\n    \"expiryInSeconds\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes Deployment with Dapr Sidecar Configuration\nDESCRIPTION: A complete example of a Kubernetes deployment YAML configuration with Dapr sidecar annotations. This example shows the correct placement of Dapr annotations within the pod template metadata section.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodeapp\n  namespace: default\n  labels:\n    app: node\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: node\n  template:\n    metadata:\n      labels:\n        app: node\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodeapp\"\n        dapr.io/app-port: \"3000\"\n    spec:\n      containers:\n      - name: node\n        image: dapriosamples/hello-k8s-node\n        ports:\n        - containerPort: 3000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Component for Self-Hosted Environment\nDESCRIPTION: YAML configuration for the Azure Key Vault secret store component in a self-hosted Dapr environment. This example shows how to configure authentication using either a client secret or a certificate.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureClientSecret\n    value : \"[your_client_secret]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Pub/Sub Component for Topic One\nDESCRIPTION: YAML configuration for setting up a Kafka pub/sub component with a specific consumer group for the first topic\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-topic-one\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: consumerGroup\n    value: \"{appID}-topic-one\"\n```\n\n----------------------------------------\n\nTITLE: Raising Workflow Event in Java\nDESCRIPTION: Shows how to raise an event to a Dapr workflow using the Java SDK. It demonstrates sending a restart event to a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(\"**SendExternalMessage: RestartEvent**);\nclient.raiseEvent(restartingInstanceId, \"RestartEvent\", \"RestartEventPayload\");\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager Component in Dapr\nDESCRIPTION: YAML configuration for setting up the GCP Secret Manager secret store component in Dapr. This includes all required metadata fields such as project_id, authentication credentials, and service account details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/gcp-secret-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: gcpsecretmanager\nspec:\n  type: secretstores.gcp.secretmanager\n  version: v1\n  metadata:\n  - name: type\n    value: <replace-with-account-type>\n  - name: project_id\n    value: <replace-with-project-id>\n  - name: private_key_id\n    value: <replace-with-private-key-id>\n  - name: client_email\n    value: <replace-with-email>\n  - name: client_id\n    value: <replace-with-client-id>\n  - name: auth_uri\n    value: <replace-with-auth-uri>\n  - name: token_uri\n    value: <replace-with-token-uri>\n  - name: auth_provider_x509_cert_url\n    value: <replace-with-auth-provider-cert-url>\n  - name: client_x509_cert_url\n    value: <replace-with-client-cert-url>\n  - name: private_key\n    value: <replace-with-private-key>\n```\n\n----------------------------------------\n\nTITLE: Getting a File with Local Storage Binding in JSON\nDESCRIPTION: JSON payload for retrieving a file using the Local Storage binding. Shows the structure for the get operation with filename metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"fileName\": \"myfile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Query Filter with Sorting and Pagination\nDESCRIPTION: JSON query to filter employees from Dev Ops department and Finance department in WA/CA states, with sorting by state (DESC) and employee ID (ASC). Includes pagination limit of 3 records.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": {\n        \"OR\": [\n            {\n                \"EQ\": { \"person.org\": \"Dev Ops\" }\n            },\n            {\n                \"AND\": [\n                    {\n                        \"EQ\": { \"person.org\": \"Finance\" }\n                    },\n                    {\n                        \"IN\": { \"state\": [ \"CA\", \"WA\" ] }\n                    }\n                ]\n            }\n        ]\n    },\n    \"sort\": [\n        {\n            \"key\": \"state\",\n            \"order\": \"DESC\"\n        },\n        {\n            \"key\": \"person.id\"\n        }\n    ],\n    \"page\": {\n        \"limit\": 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Retrieving a Secret from Vault\nDESCRIPTION: Example cURL command for retrieving a secret named 'db-secret' from a Vault secret store, which uses name/value semantics.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/vault/db-secret\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in Go with Gorilla Mux\nDESCRIPTION: This Go code sets up an HTTP server using Gorilla Mux to handle POST requests for the 'checkout' input binding. It logs the received order ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-triggers.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc getCheckout(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tvar orderId int\n\terr := json.NewDecoder(r.Body).Decode(&orderId)\n\tlog.Println(\"Received Message: \", orderId)\n\tif err != nil {\n\t\tlog.Printf(\"error parsing checkout input binding payload: %s\", err)\n\t\tw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/checkout\", getCheckout).Methods(\"POST\", \"OPTIONS\")\n\thttp.ListenAndServe(\":6002\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Saving State Data with cURL\nDESCRIPTION: Example of saving multiple state objects to a Dapr state store using HTTP POST request with curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/starwars?metadata.contentType=application/json \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n        {\n          \"key\": \"weapon\",\n          \"value\": \"DeathStar\",\n          \"etag\": \"1234\"\n        },\n        {\n          \"key\": \"planet\",\n          \"value\": {\n            \"name\": \"Tatooine\"\n          }\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Method with HTTP POST\nDESCRIPTION: Example of how to invoke a method on a Dapr actor using HTTP POST. This simple example calls the 'shoot' method on a 'stormtrooper' actor with ID 50.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/actors/stormtrooper/50/method/shoot \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr on Kubernetes with Mariner-based Images\nDESCRIPTION: This command initializes Dapr on Kubernetes using the Dapr CLI, specifying the use of Mariner-based container images with the '--image-variant' flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ndapr init -k --image-variant mariner\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Custom Configuration in Bash\nDESCRIPTION: This Bash command demonstrates how to run a Dapr application with a custom configuration file that enables preview features.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/preview-features.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myApp --config ./previewConfig.yaml ./app\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Account Variables for Azure Blob Storage Configuration\nDESCRIPTION: Bash commands for setting up Azure Storage Account variables that will be used in role assignment commands. These variables define the storage account and resource group to be configured.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSTORAGE_ACCOUNT_NAME=\"[your_storage_account_name]\"\nRG_NAME=\"[your_resource_group_name]\"\n```\n\n----------------------------------------\n\nTITLE: Generating Random API Token with OpenSSL\nDESCRIPTION: Uses OpenSSL to generate a secure random 16-byte key and encode it as Base64 to use as a Dapr API token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rand 16 | base64\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler-based Streaming Subscriptions in Go\nDESCRIPTION: Example of implementing handler-based streaming subscriptions in Go using the Dapr client. Demonstrates message processing using a callback function.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/dapr/go-sdk/client\"\n\t\"github.com/dapr/go-sdk/service/common\"\n)\n\nfunc main() {\n\tcl, err := client.NewClient()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tstop, err := cl.SubscribeWithHandler(context.Background(),\n\t\tclient.SubscriptionOptions{\n\t\t\tPubsubName: \"pubsub\",\n\t\t\tTopic:      \"orders\",\n\t\t},\n\t\teventHandler,\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Stop must always be called.\n\tdefer stop()\n\n\t<-make(chan struct{})\n}\n\nfunc eventHandler(e *common.TopicEvent) common.SubscriptionResponseStatus {\n\t// Process message here\n    // common.SubscriptionResponseStatusRetry\n    // common.SubscriptionResponseStatusDrop\n\t\t\tcommon.SubscriptionResponseStatusDrop, status)\n\t}\n\n\treturn common.SubscriptionResponseStatusSuccess\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Binding with Microsoft Entra ID\nDESCRIPTION: YAML configuration for Azure OpenAI binding using Microsoft Entra ID authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/openai.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.openai\n  version: v1\n  metadata:\n  - name: endpoint\n    value: \"https://myopenai.openai.azure.com\"\n  - name: azureTenantId\n    value: \"***\"\n  - name: azureClientId\n    value: \"***\"\n  - name: azureClientSecret\n    value: \"***\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Runtime in Go\nDESCRIPTION: This snippet demonstrates how to configure the actor runtime in Go using a custom daprConfig struct. It sets various timeout and interval parameters, enables or disables features like draining rebalanced actors and reentrancy, and configures reminders storage partitions. It also shows how to set up entity-specific configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-runtime-config.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    defaultActorType = \"basicType\"\n    reentrantActorType = \"reentrantType\"\n)\n\ntype daprConfig struct {\n\tEntities                []string                `json:\"entities,omitempty\"`\n\tActorIdleTimeout        string                  `json:\"actorIdleTimeout,omitempty\"`\n\tActorScanInterval       string                  `json:\"actorScanInterval,omitempty\"`\n\tDrainOngoingCallTimeout string                  `json:\"drainOngoingCallTimeout,omitempty\"`\n\tDrainRebalancedActors   bool                    `json:\"drainRebalancedActors,omitempty\"`\n\tReentrancy              config.ReentrancyConfig `json:\"reentrancy,omitempty\"`\n\tEntitiesConfig          []config.EntityConfig   `json:\"entitiesConfig,omitempty\"`\n}\n\nvar daprConfigResponse = daprConfig{\n\tEntities:                []string{defaultActorType, reentrantActorType},\n\tActorIdleTimeout:        actorIdleTimeout,\n\tActorScanInterval:       actorScanInterval,\n\tDrainOngoingCallTimeout: drainOngoingCallTimeout,\n\tDrainRebalancedActors:   drainRebalancedActors,\n\tReentrancy:              config.ReentrancyConfig{Enabled: false},\n\tEntitiesConfig: []config.EntityConfig{\n\t\t{\n            // Add a configuration for a specific actor type.\n            // This actor type must have a matching value in the base level 'entities' field. If it does not, the configuration will be ignored.\n            // If there is a matching entity, the values here will be used to overwrite any values specified in the root configuration.\n            // In this example, `reentrantActorType` has reentrancy enabled; however, 'defaultActorType' will not have reentrancy enabled.\n\t\t\tEntities: []string{reentrantActorType},\n\t\t\tReentrancy: config.ReentrancyConfig{\n\t\t\t\tEnabled:       true,\n\t\t\t\tMaxStackDepth: &maxStackDepth,\n\t\t\t},\n\t\t},\n\t},\n}\n\nfunc configHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(daprConfigResponse)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure KeyVault Component with System-Managed Identity\nDESCRIPTION: This YAML configuration demonstrates how to set up an Azure KeyVault component using system-managed identity. It specifies the component type and the vault name without requiring explicit authentication details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-mi.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: mykeyvault\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Denylists in Dapr\nDESCRIPTION: This YAML snippet demonstrates how to create a Dapr Configuration that disallows the initialization of specific component types. It can be used to restrict the use of certain components for security or resource management purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\nspec: \n  components:\n    deny:\n      - bindings.smtp\n      - secretstores.local.file\n```\n\n----------------------------------------\n\nTITLE: Local Secret Store Component Configuration\nDESCRIPTION: YAML configuration for the local secret store component defining the secret store name and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: localsecretstore\n  namespace: default\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: secrets.json\n  - name: nestedSeparator\n    value: \":\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Binding Component Configuration\nDESCRIPTION: YAML configuration for the PostgreSQL binding component that defines database connection and output direction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: sqldb\n  namespace: quickstarts\nspec:\n  type: bindings.postgresql\n  version: v1\n  metadata:\n  - name: url # Required\n    value: \"user=postgres password=docker host=localhost port=5432 dbname=orders pool_min_conns=1 pool_max_conns=10\"\n  - name: direction\n    value: \"output\" # direction of the postgresql binding\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Secret Store Component in YAML\nDESCRIPTION: Create a YAML file 'localSecretStore.yaml' that defines a Dapr component for the local file-based secret store. It specifies the component type, version, and metadata for accessing the secrets file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-secret-store\n  namespace: default\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: ./mysecrets.json\n  - name: nestedSeparator\n    value: \":\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Component in YAML\nDESCRIPTION: Example configuration for setting up Azure Key Vault as a cryptography component in Dapr. The configuration includes component metadata, authentication parameters, and vault specifications. Authentication credentials should be stored in a secret store rather than as plain strings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-cryptography/azure-key-vault.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: crypto.azure.keyvault\n  metadata:\n  - name: vaultName\n    value: mykeyvault\n  # See authentication section below for all options\n  - name: azureTenantId\n    value: ${{AzureKeyVaultTenantId}}\n  - name: azureClientId\n    value: ${{AzureKeyVaultServicePrincipalClientId}}\n  - name: azureClientSecret\n    value: ${{AzureKeyVaultServicePrincipalClientSecret}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Topics PubSub Component with Microsoft Entra ID\nDESCRIPTION: This YAML snippet shows how to configure the Azure Service Bus Topics pubsub component using Microsoft Entra ID authentication. It includes the necessary metadata fields for setting up authentication with Azure AD.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-servicebus-topics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: servicebus-pubsub\nspec:\n  type: pubsub.azure.servicebus.topics\n  version: v1\n  metadata:\n  - name: namespaceName\n    # Required when using Azure Authentication.\n    # Must be a fully-qualified domain name\n    value: \"servicebusnamespace.servicebus.windows.net\"\n  - name: azureTenantId\n    value: \"***\"\n  - name: azureClientId\n    value: \"***\"\n  - name: azureClientSecret\n    value: \"***\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RouterChecker Middleware in Dapr (YAML)\nDESCRIPTION: This YAML configuration defines the RouterChecker middleware component with a regex rule to validate HTTP request routing. It filters requests based on the specified pattern, allowing alphanumeric characters, forward slashes, periods, underscores, and hyphens.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-routerchecker.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: routerchecker \nspec:\n  type: middleware.http.routerchecker\n  version: v1\n  metadata:\n  - name: rule\n    value: \"^[A-Za-z0-9/._-]+$\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Dapr Sidecar Certificate Installation\nDESCRIPTION: This YAML configuration demonstrates how to use Docker Compose to install certificates in the Dapr sidecar container. It mounts a local certificate directory and sets the SSL_CERT_DIR environment variable.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/install-certificates.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  dapr-sidecar:\n    image: \"daprio/daprd:edge\" # dapr version must be at least v1.8\n    command: [\n      \"./daprd\",\n     \"-app-id\", \"myapp\",\n     \"-app-port\", \"3000\",\n     ]\n    volumes:\n        - \"./components/:/components\"\n        - \"./certificates:/certificates\" # (STEP 1) Mount the certificates folder to the sidecar container\n    environment:\n      - \"SSL_CERT_DIR=/certificates\" # (STEP 2) Set the environment variable to the path of the certificates folder\n    # Uncomment the line below for Windows containers\n    # user: ContainerAdministrator\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a Kafka binding component in Dapr. It includes various metadata fields for topics, brokers, authentication, and other Kafka-specific settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kafka.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-binding\nspec:\n  type: bindings.kafka\n  version: v1\n  metadata:\n  - name: topics # Optional. Used for input bindings.\n    value: \"topic1,topic2\"\n  - name: brokers # Required.\n    value: \"localhost:9092,localhost:9093\"\n  - name: consumerGroup # Optional. Used for input bindings.\n    value: \"group1\"\n  - name: publishTopic # Optional. Used for output bindings.\n    value: \"topic3\"\n  - name: authRequired # Required.\n    value: \"true\"\n  - name: saslUsername # Required if authRequired is `true`.\n    value: \"user\"\n  - name: saslPassword # Required if authRequired is `true`.\n    secretKeyRef:\n      name: kafka-secrets\n      key: \"saslPasswordSecret\"\n  - name: saslMechanism\n    value: \"SHA-512\"\n  - name: initialOffset # Optional. Used for input bindings.\n    value: \"newest\"\n  - name: maxMessageBytes # Optional.\n    value: \"1024\"\n  - name: heartbeatInterval # Optional.\n    value: 5s\n  - name: sessionTimeout # Optional.\n    value: 15s\n  - name: version # Optional.\n    value: \"2.0.0\"\n  - name: direction\n    value: \"input, output\"\n  - name: schemaRegistryURL # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry URL.\n    value: http://localhost:8081\n  - name: schemaRegistryAPIKey # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry API Key.\n    value: XYAXXAZ\n  - name: schemaRegistryAPISecret # Optional. When using Schema Registry Avro serialization/deserialization. The Schema Registry credentials API Secret.\n    value: \"ABCDEFGMEADFF\"\n  - name: schemaCachingEnabled # Optional. When using Schema Registry Avro serialization/deserialization. Enables caching for schemas.\n    value: true\n  - name: schemaLatestVersionCacheTTL # Optional. When using Schema Registry Avro serialization/deserialization. The TTL for schema caching when publishing a message with latest schema available.\n    value: 5m\n  - name: escapeHeaders # Optional.\n    value: false\n```\n\n----------------------------------------\n\nTITLE: Publishing Raw Messages in PHP with Dapr Client\nDESCRIPTION: Example using Dapr PHP SDK to publish a raw message to a topic without CloudEvent encapsulation by setting the rawPayload metadata to true.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$app = \\Dapr\\App::create();\n$app->run(function(\\DI\\FactoryInterface $factory) {\n    $publisher = $factory->make(\\Dapr\\PubSub\\Publish::class, ['pubsub' => 'pubsub']);\n    $publisher->topic('TOPIC_A')->publish('data', ['rawPayload' => 'true']);\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Raw Messages in Python with Dapr Client\nDESCRIPTION: Example using Dapr Python SDK to publish a raw message to a topic by setting the rawPayload metadata to true, bypassing CloudEvent encapsulation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dapr.clients import DaprClient\n\nwith DaprClient() as d:\n    req_data = {\n        'order-number': '345'\n    }\n    # Create a typed message with content type and body\n    resp = d.publish_event(\n        pubsub_name='pubsub',\n        topic_name='TOPIC_A',\n        data=json.dumps(req_data),\n        publish_metadata={'rawPayload': 'true'}\n    )\n    # Print the request\n    print(req_data, flush=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Pub/Sub Component with TLS in Dapr\nDESCRIPTION: This YAML configuration demonstrates how to set up a RabbitMQ pub/sub component in Dapr with TLS enabled. It includes settings for TLS certificates and keys, along with other RabbitMQ-specific configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: rabbitmq-pubsub\nspec:\n  type: pubsub.rabbitmq\n  version: v1\n  metadata:\n  - name: host\n    value: \"amqps://localhost:5671\"\n  - name: consumerID\n    value: myapp\n  - name: durable\n    value: false\n  - name: deletedWhenUnused\n    value: false\n  - name: autoAck\n    value: false\n  - name: deliveryMode\n    value: 0\n  - name: requeueInFailure\n    value: false\n  - name: prefetchCount\n    value: 0\n  - name: reconnectWait\n    value: 0\n  - name: concurrencyMode\n    value: parallel\n  - name: publisherConfirm\n    value: false\n  - name: enableDeadLetter # Optional enable dead Letter or not\n    value: true\n  - name: maxLen # Optional max message count in a queue\n    value: 3000\n  - name: maxLenBytes # Optional maximum length in bytes of a queue.\n    value: 10485760\n  - name: exchangeKind\n    value: fanout\n  - name: saslExternal\n    value: false\n  - name: caCert\n    value: ${{ myLoadedCACert }}\n  - name: clientCert\n    value: ${{ myLoadedClientCert }}\n  - name: clientKey\n    secretKeyRef:\n      name: myRabbitMQClientKey\n      key: myRabbitMQClientKey\n```\n\n----------------------------------------\n\nTITLE: Getting Registered Actors using cURL\nDESCRIPTION: Example of retrieving registered actor types and configurations using a cURL command. This snippet shows how to make a GET request to obtain actor configuration details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://localhost:3000/dapr/config \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Bulk Secret Retrieval from Vault\nDESCRIPTION: Example cURL command for retrieving all secrets from a HashiCorp Vault secret store in bulk.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/vault/bulk\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Subscription in JavaScript\nDESCRIPTION: JavaScript code using Express.js that defines a POST endpoint to receive messages from the 'orders' topic. This endpoint matches the route defined in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst app = express()\napp.use(bodyParser.json({ type: 'application/*+json' }));\n\n// listen to the declarative route\napp.post('/orders', (req, res) => {\n  console.log(req.body);\n  res.sendStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Pub/Sub Component in YAML\nDESCRIPTION: This YAML configuration defines a Redis Pub/Sub component named 'orderpubsub' for Dapr applications. It specifies the component type, version, and connection details for Redis running on localhost without a password.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Executing State Transaction with Custom CloudEvent Metadata in Go\nDESCRIPTION: This snippet demonstrates how to execute a state transaction in Go using the Dapr client, overriding CloudEvent metadata fields. It defines a state operation with custom metadata and executes the transaction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Create a Dapr client\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create Dapr client: %v\", err)\n\t}\n\tdefer client.Close()\n\n\tctx := context.Background()\n\tstore := \"your-state-store-name\"\n\n\t// Define state operations\n\tops := make([]*dapr.StateOperation, 0)\n\top1 := &dapr.StateOperation{\n\t\tType: dapr.StateOperationTypeUpsert,\n\t\tItem: &dapr.SetStateItem{\n\t\t\tKey:   \"key1\",\n\t\t\tValue: []byte(\"2\"),\n\t\t\t// Override Cloudevent metadata\n\t\t\tMetadata: map[string]string{\n\t\t\t\t\"cloudevent.id\":                \"unique-business-process-id\",\n\t\t\t\t\"cloudevent.source\":            \"CustomersApp\",\n\t\t\t\t\"cloudevent.type\":              \"CustomerCreated\",\n\t\t\t\t\"cloudevent.subject\":           \"123\",\n\t\t\t\t\"my-custom-ce-field\":           \"abc\",\n\t\t\t},\n\t\t},\n\t}\n\tops = append(ops, op1)\n\n\t// Metadata for the transaction (if any)\n\tmeta := map[string]string{}\n\n\t// Execute state transaction\n\terr = client.ExecuteStateTransaction(ctx, store, meta, ops)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to execute state transaction: %v\", err)\n\t}\n\n\tlog.Println(\"State transaction executed.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running MongoDB Locally with Docker\nDESCRIPTION: Shell command for running a single MongoDB instance locally using Docker, exposing it on port 27017.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mongodb.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --name some-mongo -d -p 27017:27017 mongo\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Items in Python\nDESCRIPTION: Retrieves configuration items from the Dapr configuration store using the Python SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get config items from the config store\nfor config_item in CONFIGURATION_ITEMS:\n    config = client.get_configuration(store_name=DAPR_CONFIGURATION_STORE, keys=[config_item], config_metadata={})\n    print(f\"Configuration for {config_item} : {config.items[config_item]}\", flush=True)\n```\n\n----------------------------------------\n\nTITLE: Running Dapr App with Sidecar\nDESCRIPTION: Command to launch a Dapr sidecar alongside a .NET application using the dapr run CLI command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --app-port 5000 -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Timer with Due Time and Period\nDESCRIPTION: JSON request body for configuring a timer with a due time of 9 seconds and a period of 3 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m9s0ms\",\n  \"period\":\"0h0m3s0ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Service with Dapr Client in Java\nDESCRIPTION: Demonstrates how to use DaprClient to invoke a service named 'myappid' with a 'saySomething' method and a string message payload. The message is serialized to JSON before sending.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    DaprClient client = (new DaprClientBuilder()).build();\n    client.invokeService(\"myappid\", \"saySomething\", \"My Message\", HttpExtension.POST).block();\n```\n\n----------------------------------------\n\nTITLE: Retry Policy Configuration in YAML for Dapr\nDESCRIPTION: YAML configuration for a retry policy named 'retryForever' in Dapr, specifying constant retry with 5-second intervals and unlimited retries.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nretryForever:\n  policy: constant\n  maxInterval: 5s\n  maxRetries: -1 \n```\n\n----------------------------------------\n\nTITLE: Getting Workflow Information HTTP Request\nDESCRIPTION: HTTP GET endpoint for retrieving information about a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceId>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Middleware in Dapr\nDESCRIPTION: Configuration for HTTP pipeline middleware handlers for both incoming and outgoing HTTP calls in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nhttpPipeline: # for incoming http calls\n  handlers:\n    - name: oauth2\n      type: middleware.http.oauth2\n    - name: uppercase\n      type: middleware.http.uppercase\nappHttpPipeline: # for outgoing http calls\n  handlers:\n    - name: oauth2\n      type: middleware.http.oauth2\n    - name: uppercase\n      type: middleware.http.uppercase\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reentrancy in Python with FastAPI\nDESCRIPTION: Set up actor reentrancy in a Python FastAPI application by creating an ActorReentrancyConfig and applying it to the ActorRuntime. This enables actors to handle reentrant calls.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actor-reentrancy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom dapr.ext.fastapi import DaprActor\nfrom dapr.actor.runtime.config import ActorRuntimeConfig, ActorReentrancyConfig\nfrom dapr.actor.runtime.runtime import ActorRuntime\nfrom demo_actor import DemoActor\n\nreentrancyConfig = ActorReentrancyConfig(enabled=True)\nconfig = ActorRuntimeConfig(reentrancy=reentrancyConfig)\nActorRuntime.set_actor_config(config)\napp = FastAPI(title=f'{DemoActor.__name__}Service')\nactor = DaprActor(app)\n\n@app.on_event(\"startup\")\nasync def startup_event():\n\t# Register DemoActor\n\tawait actor.register_actor(DemoActor)\n\n@app.get(\"/MakeExampleReentrantCall\")\ndef do_something_reentrant():\n\t# invoke another actor here, reentrancy will be handled automatically\n\treturn\n```\n\n----------------------------------------\n\nTITLE: Encrypt Payload HTTP Request Format\nDESCRIPTION: HTTP request format for encrypting values using a specified key and crypto component. The endpoint requires the Dapr port and crypto store name as URL parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT http://localhost:<daprPort>/v1.0-alpha1/crypto/<crypto-store-name>/encrypt\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an InfluxDB binding component in Dapr. Requires specification of URL, token, organization, and bucket details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/influxdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.influx\n  version: v1\n  metadata:\n  - name: url # Required\n    value: \"<INFLUX-DB-URL>\"\n  - name: token # Required\n    value: \"<TOKEN>\"\n  - name: org # Required\n    value: \"<ORG>\"\n  - name: bucket # Required\n    value: \"<BUCKET>\"\n```\n\n----------------------------------------\n\nTITLE: Invoking SLS Binding with cURL on Windows\nDESCRIPTION: Windows command line example for invoking the SLS binding using cURL with JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudsls.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"metadata\\\":{\\\"project\\\":\\\"project-name\\\",\\\"logstore\\\":\\\"logstore-name\\\",\\\"topic\\\":\\\"topic-name\\\",\\\"source\\\":\\\"source-name\\\"},\\\"data\\\":{\\\"log-filed\\\":\\\"log info\\\"}\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Workflow Client Implementation\nDESCRIPTION: TypeScript implementation showing workflow client methods including waiting for completion, raising events and purging workflow instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n  public async waitForWorkflowCompletion(\n    workflowInstanceId: string,\n    fetchPayloads = true,\n    timeoutInSeconds = 60,\n  ): Promise<WorkflowState | undefined> {\n    const state = await this._innerClient.waitForOrchestrationCompletion(\n      workflowInstanceId,\n      fetchPayloads,\n      timeoutInSeconds,\n    );\n    if (state != undefined) {\n      return new WorkflowState(state);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Annotation Configuration\nDESCRIPTION: Example of Kubernetes annotations used to configure a Dapr sidecar with specific settings including app ID, port, and configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  annotations:\n    dapr.io/enabled: \"true\"\n    dapr.io/app-id: \"nodeapp\"\n    dapr.io/app-port: \"3000\"\n    dapr.io/config: \"myappconfig\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific HTTP APIs in Dapr Configuration\nDESCRIPTION: This YAML configuration disables the state v1.0 HTTP API while allowing all other HTTP APIs. It demonstrates using a denylist in the Dapr Configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/api-allowlist.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  api:\n    denied:\n      - name: state\n        version: v1.0\n        protocol: http\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker Policy in Dapr YAML\nDESCRIPTION: Example YAML configuration for a circuit breaker policy named 'pubsubCB'. This configuration sets the maximum requests to 1, interval to 8 seconds, timeout to 45 seconds, and trips when consecutive failures exceed 8.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/circuit-breakers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    circuitBreakers:\n      pubsubCB:\n        maxRequests: 1\n        interval: 8s\n        timeout: 45s\n        trip: consecutiveFailures > 8\n```\n\n----------------------------------------\n\nTITLE: File Encryption with AES in Go\nDESCRIPTION: Shows how to encrypt a large image file using AES encryption with Dapr's cryptography API. The code demonstrates reading from a file stream and writing the encrypted data to a new file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc encryptDecryptFile(client dapr.Client) {\n\tconst fileName = \"liuguangxi-66ouBTTs_x0-unsplash.jpg\"\n\n\t// Get a readable stream to the input file\n\tplaintextF, err := os.Open(fileName)\n\n    // ...\n\n\tdefer plaintextF.Close()\n\n\t// Encrypt the file\n\tencStream, err := client.Encrypt(context.Background(),\n\t\tplaintextF,\n\t\tdapr.EncryptOptions{\n\t\t\tComponentName: CryptoComponentName,\n\t\t\t// Name of the key to use\n\t\t\t// Since this is a symmetric key, we specify AES as key wrapping algorithm\n\t\t\tKeyName:          SymmetricKeyName,\n\t\t\tKeyWrapAlgorithm: \"AES\",\n\t\t},\n\t)\n\n    // ...\n\n\t// Write the encrypted data to a file \"encrypted.out\"\n\tencryptedF, err := os.Create(\"encrypted.out\")\n\n    // ...\n\n\tencryptedF.Close()\n\n\tfmt.Println(\"Wrote decrypted data to encrypted.out\")\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application with Resiliency\nDESCRIPTION: This command runs the 'order-processor' application with Dapr, specifying the resources path for the resiliency configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id order-processor --resources-path ../../../resources/ -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Service Invocation Request Headers Example\nDESCRIPTION: Example JSON showing the Content-Type header for a service invocation request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"Content-Type\": \"application/json\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulsar E2E Encryption with File Certificates\nDESCRIPTION: YAML configurations for enabling Pulsar's end-to-end encryption using file-based certificates for both publisher and consumer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"localhost:6650\"\n  - name: publicKey\n    value: ./public.key\n  - name: keys\n    value: myapp.key\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"localhost:6650\"\n  - name: publicKey\n    value: ./public.key\n  - name: privateKey\n    value: ./private.key\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar for Jobs Application\nDESCRIPTION: Command to run the Dapr sidecar alongside the Go application. Configures ports, protocol, and logging level for the distributed scheduler application that processes jobs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id=distributed-scheduler \\\n                --metrics-port=9091 \\\n                --dapr-grpc-port 50001 \\\n                --app-port 50070 \\\n                --app-protocol grpc \\\n                --log-level debug \\\n                go run ./main.go\n```\n\n----------------------------------------\n\nTITLE: Pausing Dapr Workflow\nDESCRIPTION: HTTP endpoint to pause a workflow instance. Requires the workflow ID in the URL path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/dapr/12345678/pause\n```\n\n----------------------------------------\n\nTITLE: Verify Dapr Pods Status\nDESCRIPTION: Command to check the status of Dapr system pods after upgrade.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n dapr-system -w\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Distributed Lock using HTTP in Dapr\nDESCRIPTION: HTTP request to acquire a lock on a resource using Dapr's lock API. The request specifies the resource ID, lock owner, and expiry time for the lock.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha1/lock/lockstore\n   -H 'Content-Type: application/json'\n   -d '{\"resourceId\":\"my_file_name\", \"lockOwner\":\"random_id_abc123\", \"expiryInSeconds\": 60}'\n```\n\n----------------------------------------\n\nTITLE: Registering the gRPC Callback Server for Dapr Jobs\nDESCRIPTION: Code snippet showing how to register the gRPC callback server that will handle Dapr job triggers. This is necessary for the Dapr runtime to know where to send job events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/jobs-features-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n...\njs := &JobService{}\nrtv1.RegisterAppCallbackAlphaServer(server, js)\n```\n\n----------------------------------------\n\nTITLE: MQTT3 Per-Request Retain Override in JSON\nDESCRIPTION: JSON example demonstrating how to override the retain property for individual MQTT3 binding requests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mqtt3.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"retain\": \"true\"\n  },\n  \"data\": \"<h1>Testing Dapr Bindings</h1>This is a test.<br>Bye!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic Component in Dapr YAML\nDESCRIPTION: Configuration for the Anthropic conversation component in Dapr. The component requires an API key and optionally allows specification of the model and cache TTL settings. The example shows the basic structure with required and optional metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/anthropic.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: anthropic\nspec:\n  type: conversation.anthropic\n  metadata:\n  - name: key\n    value: \"mykey\"\n  - name: model\n    value: claude-3-5-sonnet-20240620\n  - name: cacheTTL\n    value: 10m\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Reminder with Time Duration\nDESCRIPTION: Example of how to create a persistent reminder for an actor with specific time duration parameters. The reminder fires after 3 seconds and repeats every 7 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m3s0ms\",\n  \"period\":\"0h0m7s0ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go services with Dapr service invocation over HTTP/HTTPS\nDESCRIPTION: Commands to run Go services with Dapr, assigning app IDs, configuring HTTP/HTTPS protocols, and setting Dapr HTTP ports for service invocation between a checkout service and order processor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --dapr-http-port 3500 -- go run .\n\ndarpr run --app-id order-processor --app-port 6006 --app-protocol http --dapr-http-port 3501 -- go run .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --dapr-http-port 3500 --app-protocol https -- go run .\n\ndarpr run --app-id order-processor --app-port 6006 --dapr-http-port 3501 --app-protocol https -- go run .\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS DynamoDB State Store Component\nDESCRIPTION: YAML configuration for setting up AWS DynamoDB as a Dapr state store component. Includes required and optional metadata fields for authentication, table configuration, and actor state store settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-dynamodb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.aws.dynamodb\n  version: v1\n  metadata:\n  - name: table\n    value: \"Contracts\"\n  - name: accessKey\n    value: \"AKIAIOSFODNN7EXAMPLE\" # Optional\n  - name: secretKey\n    value: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" # Optional\n  - name: endpoint\n    value: \"http://localhost:8080\" # Optional\n  - name: region\n    value: \"eu-west-1\" # Optional\n  - name: sessionToken\n    value: \"myTOKEN\" # Optional\n  - name: ttlAttributeName\n    value: \"expiresAt\" # Optional\n  - name: partitionKey\n    value: \"ContractID\" # Optional\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Timeout Resiliency Policies in YAML for Dapr\nDESCRIPTION: This YAML snippet demonstrates how to configure timeout policies in Dapr. The example shows three named timeouts - general, important, and largeResponse - each with different duration values. These timeouts can be referenced in other parts of the Dapr configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/timeouts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    # Timeouts are simple named durations.\n    timeouts:\n      timeoutName: timeout1\n      general: 5s\n      important: 60s\n      largeResponse: 10s\n```\n\n----------------------------------------\n\nTITLE: Saving State with Custom Partition Key in Azure Cosmos DB\nDESCRIPTION: HTTP request using curl to save state in Azure Cosmos DB with a custom partition key specified in the metadata. This allows explicit control over which Cosmos DB partition the data is stored in.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/<store_name> \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"nihilus\",\n          \"value\": \"darth\",\n          \"metadata\": {\n            \"partitionKey\": \"mypartition\"\n          }\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Component in YAML\nDESCRIPTION: YAML configuration for setting up Azure Blob Storage binding component with required and optional metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.blobstorage\n  version: v1\n  metadata:\n  - name: accountName\n    value: myStorageAccountName\n  - name: accountKey\n    value: ***********\n  - name: containerName\n    value: container1\n# - name: decodeBase64\n#   value: <bool>\n# - name: getBlobRetryCount\n#   value: <integer>\n# - name: publicAccessLevel\n#   value: <publicAccessLevel>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Binding Component in Dapr\nDESCRIPTION: YAML configuration for the AWS S3 binding component in Dapr. It specifies connection details like bucket name, region, endpoint, credentials, and additional options like Base64 decoding and path style enforcement.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.s3\n  version: v1\n  metadata:\n  - name: bucket\n    value: mybucket\n  - name: region\n    value: us-west-2\n  - name: endpoint\n    value: s3.us-west-2.amazonaws.com\n  - name: accessKey\n    value: *****************\n  - name: secretKey\n    value: *****************\n  - name: sessionToken\n    value: mysession\n  - name: decodeBase64\n    value: <bool>\n  - name: forcePathStyle\n    value: <bool>\n```\n\n----------------------------------------\n\nTITLE: Examples of Using Dapr Publish Command\nDESCRIPTION: Practical examples demonstrating how to use the Dapr publish command in different scenarios, including basic publishing, using Unix domain socket, and publishing without cloud event by specifying metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-publish.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Publish to sample topic in target pubsub via a publishing app\ndapr publish --publish-app-id appId --topic sample --pubsub target --data '{\"key\":\"value\"}'\n\n# Publish to sample topic in target pubsub via a publishing app using Unix domain socket\ndapr publish --enable-domain-socket --publish-app-id myapp --pubsub target --topic sample --data '{\"key\":\"value\"}'\n\n# Publish to sample topic in target pubsub via a publishing app without cloud event\ndapr publish --publish-app-id myapp --pubsub target --topic sample --data '{\"key\":\"value\"}' --metadata '{\"rawPayload\":\"true\"}'\n```\n\n----------------------------------------\n\nTITLE: Saving State Object via Dapr API (Bash)\nDESCRIPTION: Curl command to save a new state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"name\", \"value\": \"Bruce Wayne\"}]' http://localhost:3500/v1.0/state/statestore\n```\n\n----------------------------------------\n\nTITLE: Enabling Actor State Store in Azure Cosmos DB Component\nDESCRIPTION: YAML configuration snippet for enabling the Azure Cosmos DB state store for actors. This additional metadata field must be added to the component specification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with AWS IAM Authentication\nDESCRIPTION: YAML configuration for Kafka pubsub component using AWS IAM authentication for MSK. Includes AWS region and optional credentials configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-awsiam\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"awsiam\"\n  - name: region\n    value: \"us-west-1\"\n  - name: accessKey\n    value: <AWS_ACCESS_KEY>\n  - name: secretKey\n    value: <AWS_SECRET_KEY>\n  - name: sessionToken\n    value: <AWS_SESSION_KEY>\n  - name: assumeRoleArn\n    value: \"arn:aws:iam::123456789:role/mskRole\"\n  - name: sessionName\n    value: \"DaprDefaultSession\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Workers KV State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a Cloudflare Workers KV state store component in Dapr, including required metadata fields for namespace ID, worker name, authentication keys and optional configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.cloudflare.workerskv\n  version: v1\n  # Increase the initTimeout if Dapr is managing the Worker for you\n  initTimeout: \"120s\"\n  metadata:\n    # ID of the Workers KV namespace (required)\n    - name: kvNamespaceID\n      value: \"\"\n    # Name of the Worker (required)\n    - name: workerName\n      value: \"\"\n    # PEM-encoded private Ed25519 key (required)\n    - name: key\n      value: |\n        -----BEGIN PRIVATE KEY-----\n        MC4CAQ...\n        -----END PRIVATE KEY-----\n    # Cloudflare account ID (required to have Dapr manage the Worker)\n    - name: cfAccountID\n      value: \"\"\n    # API token for Cloudflare (required to have Dapr manage the Worker)\n    - name: cfAPIToken\n      value: \"\"\n    # URL of the Worker (required if the Worker has been pre-created outside of Dapr)\n    - name: workerUrl\n      value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Features in Dapr YAML\nDESCRIPTION: This YAML configuration demonstrates how to enable multiple preview features in Dapr. It includes tracing configuration and enables two features named 'Feature1' and 'Feature2'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/preview-features.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: featureconfig\nspec:\n  tracing:\n    samplingRate: \"1\"\n    zipkin:\n      endpointAddress: \"http://zipkin.default.svc.cluster.local:9411/api/v2/spans\"\n  features:\n    - name: Feature1\n      enabled: true\n    - name: Feature2\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Advanced Consul Registration Configuration\nDESCRIPTION: Advanced configuration for Consul that provides full control over service registration properties. This setup allows for detailed customization of the registration process.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-name-resolution/setup-nr-consul.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"consul\"\n    configuration:\n      client:\n          address: \"127.0.0.1:8500\"\n      selfRegister: false\n      queryOptions:\n        useCache: true\n      daprPortMetaKey: \"DAPR_PORT\"\n      advancedRegistration:\n        name: \"${APP_ID}\"\n        port: ${APP_PORT}\n        address: \"${HOST_ADDRESS}\"\n        check:\n          name: \"Dapr Health Status\"\n          checkID: \"daprHealth:${APP_ID}\"\n          interval: \"15s\"\n          http: \"http://${HOST_ADDRESS}:${DAPR_HTTP_PORT}/v1.0/healthz\"\n        meta:\n          DAPR_METRICS_PORT: \"${DAPR_METRICS_PORT}\"\n          DAPR_PROFILE_PORT: \"${DAPR_PROFILE_PORT}\"\n        tags:\n          - \"dapr\"\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Applications with Configuration Subscription\nDESCRIPTION: These bash commands demonstrate how to run Dapr applications that subscribe to configuration updates. Each command launches a Dapr sidecar along with the respective application in different programming languages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing -- dotnet run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing -- -- mvn spring-boot:run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing -- python3 OrderProcessingService.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing -- go run main.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-protocol grpc --dapr-grpc-port 3500 -- node index.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reminder Partitioning in Python\nDESCRIPTION: Sets the actor configuration in Python including reminder storage partitioning, actor idle timeout, and actor scan interval using the ActorRuntimeConfig class.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\n\nActorRuntime.set_actor_config(\n    ActorRuntimeConfig(\n        actor_idle_timeout=timedelta(hours=1),\n        actor_scan_interval=timedelta(seconds=30),\n        remindersStoragePartitions=7\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Actor State in Java\nDESCRIPTION: Demonstrates how to read and write Actor state using getActorStateManager(). The state is transparently serialized and deserialized by the state manager.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic String actorMethod(String message) {\n    // Reads a state from key and deserializes it to String.\n    String previousMessage = super.getActorStateManager().get(\"lastmessage\", String.class).block();\n\n    // Sets the new state for the key after serializing it.\n    super.getActorStateManager().set(\"lastmessage\", message).block();\n    return previousMessage;\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Start Response Format\nDESCRIPTION: JSON response format returned when successfully starting a workflow instance, containing the instance ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"instanceID\": \"12345678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Multi-App Run Template in YAML\nDESCRIPTION: YAML configuration for running multiple Dapr applications, specifying app directories, IDs, ports, and commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napps:\n  - appDirPath: ./order-processor/\n    appID: order-processor\n    appPort: 8001\n    command: [\"python3\", \"app.py\"]\n  - appID: checkout\n    appDirPath: ./checkout/\n    command: [\"python3\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Pub/Sub Subscriptions in JavaScript\nDESCRIPTION: Demonstrates Node.js/Express implementation of Dapr pub/sub subscription with subscription configuration and message handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst app = express()\napp.use(bodyParser.json({ type: 'application/*+json' }));\n\nconst port = 3000\n\napp.get('/dapr/subscribe', (req, res) => {\n  res.json([\n    {\n      pubsubname: \"pubsub\",\n      topic: \"orders\",\n      routes: {\n        rules: [\n          {\n            match: 'event.type == \"order\"',\n            path: '/orders'\n          },\n        ],\n        default: '/products'\n      }\n    }\n  ]);\n})\n\napp.post('/orders', (req, res) => {\n  console.log(req.body);\n  res.sendStatus(200);\n});\n\napp.listen(port, () => console.log(`consumer app listening on port ${port}!`))\n```\n\n----------------------------------------\n\nTITLE: Processing Orders in Go with HTTP Requests\nDESCRIPTION: This snippet demonstrates how to receive and process orders via HTTP POST requests in the 'order-processor' service. It reads the request body and logs the received order.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc getOrder(w http.ResponseWriter, r *http.Request) {\n\tdata, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"Order received : %s\", string(data))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a RabbitMQ binding component in Dapr, including queue settings, authentication, and message handling parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/rabbitmq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.rabbitmq\n  version: v1\n  metadata:\n  - name: queueName\n    value: \"queue1\"\n  - name: host\n    value: \"amqp://[username][:password]@host.domain[:port]\"\n  - name: durable\n    value: \"true\"\n  - name: deleteWhenUnused\n    value: \"false\"\n  - name: ttlInSeconds\n    value: \"60\"\n  - name: prefetchCount\n    value: \"0\"\n  - name: exclusive\n    value: \"false\"\n  - name: maxPriority\n    value: \"5\"\n  - name: contentType\n    value: \"text/plain\"\n  - name: reconnectWaitInSeconds\n    value: \"5\"\n  - name: externalSasl\n    value: \"false\"\n  - name: caCert\n    value: \"null\"\n  - name: clientCert\n    value: \"null\"\n  - name: clientKey\n    value: \"null\"\n  - name: direction \n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Secret Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a local file-based secret store component in Dapr. This defines the component type, version, and metadata including the path to the JSON secrets file and formatting options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: local-secret-store\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: [path to the JSON file]\n  - name: nestedSeparator\n    value: \":\"\n  - name: multiValued\n    value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Binding Handler in Node.js\nDESCRIPTION: Express.js endpoint implementation for handling cron binding triggers. Creates a POST endpoint that matches the component name and logs incoming requests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cron.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/scheduled', async function(req, res){\n    console.log(\"scheduled endpoint called\", req.body)\n    res.status(200).send()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up Couchbase as a state store component in Dapr. Defines required metadata fields including URL, credentials, and bucket name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-couchbase.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.couchbase\n  version: v1\n  metadata:\n  - name: couchbaseURL\n    value: <REPLACE-WITH-URL> # Required. Example: \"http://localhost:8091\"\n  - name: username\n    value: <REPLACE-WITH-USERNAME> # Required.\n  - name: password\n    value: <REPLACE-WITH-PASSWORD> # Required.\n  - name: bucketName\n    value: <REPLACE-WITH-BUCKET> # Required.\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Tracing with New Relic Zipkin Integration\nDESCRIPTION: YAML configuration for setting up Dapr to send distributed tracing data to New Relic's Trace API using Zipkin format. This configuration specifies the sampling rate and the New Relic endpoint that accepts Zipkin-formatted traces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/newrelic.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    zipkin:\n      endpointAddress: \"https://trace-api.newrelic.com/trace/v1?Api-Key=<NR-INSIGHTS-INSERT-API-KEY>&Data-Format=zipkin&Data-Format-Version=2\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting gRPC Server\nDESCRIPTION: Go code showing how to create and start a gRPC server for Dapr application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// create listener\n\tlis, err := net.Listen(\"tcp\", \":50001\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\t// create grpc server\n\ts := grpc.NewServer()\n\tpb.RegisterAppCallbackServer(s, &server{})\n\n\tfmt.Println(\"Client starting...\")\n\n\t// and start...\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Configuration Items via HTTP Request in Dapr\nDESCRIPTION: HTTP GET request format to retrieve all configuration items from a specified Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/mystore\n```\n\n----------------------------------------\n\nTITLE: Generating Root Certificate Configuration\nDESCRIPTION: This INI configuration file is used to generate a root certificate for Dapr's mTLS setup. It specifies the certificate details, including the subject information and extensions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = VA\nL = Daprville\nO = dapr.io/sentry\nOU = dapr.io/sentry\nCN = cluster.local\n[v3_req]\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\nextendedKeyUsage = serverAuth, clientAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = cluster.local\n```\n\n----------------------------------------\n\nTITLE: Resolving Incident in Zeebe\nDESCRIPTION: Resolves a specific incident in the workflow using its incident key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"incidentKey\": 2251799813686123\n  },\n  \"operation\": \"resolve-incident\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Run Configuration\nDESCRIPTION: YAML configuration for running multiple Dapr applications using the Multi-App Run template file. Defines common settings and application-specific configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../resources/\napps:\n  - appID: order-processor\n    appDirPath: ./order-processor/\n    command: [\"python3\" , \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Bulk Secret Retrieval from Kubernetes\nDESCRIPTION: Example JSON response when retrieving all secrets in bulk from a store that supports multiple key-values, such as Kubernetes. The response contains multiple secrets, each with multiple key-value pairs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secret1\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    },\n    \"secret2\": {\n        \"key3\": \"value3\",\n        \"key4\": \"value4\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying New Token Secret to Kubernetes Namespace\nDESCRIPTION: Applies the updated token secret manifest to a specific Kubernetes namespace during token rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --file token-secret.yaml --namespace <namespace-name>\n```\n\n----------------------------------------\n\nTITLE: Raising Events in Dapr Workflow\nDESCRIPTION: HTTP endpoint for raising a named event for a specific workflow instance. Requires workflowComponentName, instanceID, and eventName parameters in the URL path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/<workflowComponentName>/<instanceID>/raiseEvent/<eventName>\n```\n\n----------------------------------------\n\nTITLE: Running SmartDevice.Service with Dapr\nDESCRIPTION: Start the SmartDevice.Service and its Dapr sidecar using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id actorservice --app-port 5001 --dapr-http-port 3500 --resources-path ../../../resources -- dotnet run --urls=http://localhost:5001/\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault with Client Secret (Self-Hosted)\nDESCRIPTION: YAML configuration for setting up Azure Key Vault secret store component using client secret authentication in a self-hosted environment. Requires valid Azure Key Vault name, tenant ID, client ID, and client secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\n  namespace: default\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureClientSecret\n    value : \"[your_client_secret]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inbound Resiliency Policies for Component Targets in Dapr\nDESCRIPTION: Example YAML configuration showing how to apply timeout, retry, and circuit breaker policies to inbound operations (calls from the sidecar to your application) for an input binding component named \"myInputBinding\".\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/targets.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  targets:\n    components:\n      myInputBinding:\n        inbound: \n          timeout: general\n          retry: general\n          circuitBreaker: general\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Metadata Parameters\nDESCRIPTION: Example of a GET request with metadata parameters for retrieving a secret with version-specific information. This demonstrates how to use query parameters to provide per-request metadata properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/secrets/<secret-store-name>/<name>?metadata.version_id=15\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Pub/Sub Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a GCP Pub/Sub binding component in Dapr. Includes required fields for authentication, topic configuration, and binding direction. Contains sensitive credentials that should be stored in a secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcppubsub.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.gcp.pubsub\n  version: v1\n  metadata:\n  - name: topic\n    value: \"topic1\"\n  - name: subscription\n    value: \"subscription1\"\n  - name: type\n    value: \"service_account\"\n  - name: project_id\n    value: \"project_111\"\n  - name: private_key_id\n    value: \"*************\"\n  - name: client_email\n    value: \"name@domain.com\"\n  - name: client_id\n    value: \"1111111111111111\"\n  - name: auth_uri\n    value: \"https://accounts.google.com/o/oauth2/auth\"\n  - name: token_uri\n    value: \"https://oauth2.googleapis.com/token\"\n  - name: auth_provider_x509_cert_url\n    value: \"https://www.googleapis.com/oauth2/v1/certs\"\n  - name: client_x509_cert_url\n    value: \"https://www.googleapis.com/robot/v1/metadata/x509/<project-name>.iam.gserviceaccount.com\"\n  - name: private_key\n    value: \"PRIVATE KEY\"\n  - name: direction\n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: JWKS Validator Static Keys Configuration\nDESCRIPTION: YAML configuration for enabling JWKS token validator with static public keys array.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Configuration\napiVersion: dapr.io/v1alpha1\nmetadata:\n  name: sentryconfig\nspec:\n  mtls:\n    enabled: true\n    tokenValidators:\n      - name: jwks\n        options:\n          minRefreshInterval: 2m\n          requestTimeout: 1m\n          source: |\n            {\"keys\":[ \"12345..\" ]}\n```\n\n----------------------------------------\n\nTITLE: Configuring commercetools GraphQL Binding Component in YAML\nDESCRIPTION: Example YAML configuration for setting up a commercetools GraphQL binding component in Dapr. Includes required fields for region, provider, project details, and authentication credentials.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/commercetools.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.commercetools\n  version: v1\n  metadata:\n  - name: region # required.\n    value: \"region\"\n  - name: provider # required.\n    value: \"gcp\"\n  - name: projectKey # required.\n    value: \"<project-key>\"\n  - name: clientID # required.\n    value: \"*****************\"\n  - name: clientSecret # required.\n    value: \"*****************\"\n  - name: scopes # required.\n    value: \"<project-scopes>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracing for Dapr Applications in YAML\nDESCRIPTION: This YAML configuration sets up tracing for a Dapr application, configuring a 100% sampling rate (1) and specifying a Zipkin endpoint where the trace data should be sent. The configuration is named 'daprConfig' in the 'default' namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/configuration-concept.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprConfig\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    zipkin:\n      endpointAddress: \"http://localhost:9411/api/v2/spans\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Timer using cURL\nDESCRIPTION: Example of invoking an actor timer using a cURL command. This snippet shows how to make a POST request to trigger a specific timer for an actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3000/actors/stormtrooper/50/method/timer/checkRebels \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Firestore as a Dapr State Store Component\nDESCRIPTION: YAML configuration for setting up GCP Firestore as a state store component in Dapr. This includes required fields like project_id and optional fields for authentication, endpoint configuration, and entity specifications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-firestore.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.gcp.firestore\n  version: v1\n  metadata:\n  - name: project_id\n    value: <REPLACE-WITH-PROJECT-ID> # Required.\n  - name: endpoint # Optional. \n    value: \"http://localhost:8432\"\n  - name: private_key_id\n    value: <REPLACE-WITH-PRIVATE-KEY-ID> # Optional.\n  - name: private_key\n    value: <REPLACE-WITH-PRIVATE-KEY> # Optional, but Required if `private_key_id` is specified.\n  - name: client_email\n    value: <REPLACE-WITH-CLIENT-EMAIL> # Optional, but Required if `private_key_id` is specified.\n  - name: client_id\n    value: <REPLACE-WITH-CLIENT-ID> # Optional, but Required if `private_key_id` is specified.\n  - name: auth_uri\n    value: <REPLACE-WITH-AUTH-URI> # Optional.\n  - name: token_uri\n    value: <REPLACE-WITH-TOKEN-URI> # Optional.\n  - name: auth_provider_x509_cert_url\n    value: <REPLACE-WITH-AUTH-X509-CERT-URL> # Optional.\n  - name: client_x509_cert_url\n    value: <REPLACE-WITH-CLIENT-x509-CERT-URL> # Optional.\n  - name: entity_kind\n    value: <REPLACE-WITH-ENTITY-KIND> # Optional. default: \"DaprState\"\n  - name: noindex\n    value: <REPLACE-WITH-BOOLEAN> # Optional. default: \"false\"\n  - name: type \n    value: <REPLACE-WITH-CREDENTIALS-TYPE> # Deprecated.\n```\n\n----------------------------------------\n\nTITLE: HTTPEndpoint Configuration with Client Certificate\nDESCRIPTION: YAML configuration for an HTTPEndpoint resource using TLS authentication with client certificate and private key\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-non-dapr-endpoints.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: HTTPEndpoint\nmetadata:\n  name: \"external-http-endpoint-tls\"\nspec:\n  baseUrl: https://service-invocation-external:443\n  headers:\n  - name: \"Accept-Language\"\n    value: \"en-US\"\n  clientTLS:\n    certificate:\n      secretKeyRef:\n        name: dapr-tls-client\n        key: tls.crt\n    privateKey:\n      secretKeyRef:\n        name: dapr-tls-key\n        key: tls.key\n```\n\n----------------------------------------\n\nTITLE: Running .NET services with Dapr service invocation over HTTP/HTTPS\nDESCRIPTION: Commands to run .NET services with Dapr, assigning app IDs, configuring HTTP/HTTPS protocols, and setting Dapr HTTP ports for service invocation between a checkout service and order processor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol http --dapr-http-port 3500 -- dotnet run\n\ndarpr run --app-id order-processor --app-port 7001 --app-protocol http --dapr-http-port 3501 -- dotnet run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --dapr-http-port 3500 --app-protocol https -- dotnet run\n\ndarpr run --app-id order-processor --app-port 7001 --dapr-http-port 3501 --app-protocol https -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a Redis binding component in Dapr. Includes essential fields like component type, version, and metadata configuration options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: \"<address>:6379\"\n  - name: redisPassword\n    value: \"**************\"\n  - name: useEntraID\n    value: \"true\"\n  - name: enableTLS\n    value: \"<bool>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Pulsar PubSub Component in Dapr\nDESCRIPTION: This YAML configuration sets up an Apache Pulsar pubsub component in Dapr. It includes settings for host connection, tenant configuration, authentication token, and various Pulsar-specific settings like schema validation and batching configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pulsar-pubsub\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"localhost:6650\"\n  - name: enableTLS\n    value: \"false\"\n  - name: tenant\n    value: \"public\"\n  - name: token\n    value: \"eyJrZXlJZCI6InB1bHNhci1wajU0cXd3ZHB6NGIiLCJhbGciOiJIUzI1NiJ9.eyJzd\"\n  - name: consumerID\n    value: \"channel1\"\n  - name: namespace\n    value: \"default\"\n  - name: persistent\n    value: \"true\"\n  - name: disableBatching\n    value: \"false\"\n  - name: receiverQueueSize\n    value: \"1000\"\n  - name: <topic-name>.jsonschema # sets a json schema validation for the configured topic\n    value: |\n      {\n        \"type\": \"record\",\n        \"name\": \"Example\",\n        \"namespace\": \"test\",\n        \"fields\": [\n          {\"name\": \"ID\",\"type\": \"int\"},\n          {\"name\": \"Name\",\"type\": \"string\"}\n        ]\n      }\n  - name: <topic-name>.avroschema # sets an avro schema validation for the configured topic\n    value: |\n      {\n        \"type\": \"record\",\n        \"name\": \"Example\",\n        \"namespace\": \"test\",\n        \"fields\": [\n          {\"name\": \"ID\",\"type\": \"int\"},\n          {\"name\": \"Name\",\"type\": \"string\"}\n        ]\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS JetStream Pub/Sub Component in Dapr\nDESCRIPTION: YAML configuration for setting up NATS JetStream as a pub/sub component in Dapr. This example shows all available configuration options including connection settings, authentication methods, and JetStream-specific parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: jetstream-pubsub\nspec:\n  type: pubsub.jetstream\n  version: v1\n  metadata:\n  - name: natsURL\n    value: \"nats://localhost:4222\"\n  - name: jwt # Optional. Used for decentralized JWT authentication.\n    value: \"eyJhbGciOiJ...6yJV_adQssw5c\"\n  - name: seedKey # Optional. Used for decentralized JWT authentication.\n    value: \"SUACS34K232O...5Z3POU7BNIL4Y\"\n  - name: tls_client_cert # Optional. Used for TLS Client authentication.\n    value: \"/path/to/tls.crt\"\n  - name: tls_client_key # Optional. Used for TLS Client authentication.\n    value: \"/path/to/tls.key\"\n  - name: token # Optional. Used for token based authentication.\n    value: \"my-token\"\n  - name: name\n    value: \"my-conn-name\"\n  - name: streamName\n    value: \"my-stream\"\n  - name: durableName \n    value: \"my-durable-subscription\"\n  - name: queueGroupName\n    value: \"my-queue-group\"\n  - name: startSequence\n    value: 1\n  - name: startTime # In Unix format\n    value: 1630349391\n  - name: flowControl\n    value: false\n  - name: ackWait\n    value: 10s\n  - name: maxDeliver\n    value: 5\n  - name: backOff\n    value: \"50ms, 1s, 10s\"\n  - name: maxAckPending\n    value: 5000\n  - name: replicas\n    value: 1\n  - name: memoryStorage\n    value: false\n  - name: rateLimit\n    value: 1024\n  - name: heartbeat\n    value: 15s\n  - name: ackPolicy\n    value: explicit\n  - name: deliverPolicy\n    value: all\n  - name: domain\n    value: hub\n  - name: apiPrefix\n    value: PREFIX\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Encryption Key with OpenSSL\nDESCRIPTION: Shell command to generate a random 128-bit (16-byte) encryption key in hex format using OpenSSL. This command can be used to create valid encryption keys for Dapr state encryption.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-encrypt-state.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rand 16 | hexdump -v -e '/1 \"%02x\"'\n# Result will be similar to \"cb321007ad11a9d23f963bff600d58e0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Database for Dapr State Store in PostgreSQL\nDESCRIPTION: SQL command to create a new database in PostgreSQL for storing Dapr state data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE my_dapr;\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 Pub/Sub Component with Shared Topics\nDESCRIPTION: A Dapr component configuration for MQTT3 pub/sub that enables shared topics using the {podName} marker for consumer IDs. This setup allows multiple subscribers to compete for messages, with each message processed by only one subscriber.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-subscribe-statefulset.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt3\n  version: v1\n  metadata:\n    - name: consumerID\n      value: \"{podName}\"\n    - name: cleanSession\n      value: \"true\"\n    - name: url\n      value: \"tcp://admin:public@localhost:1883\"\n    - name: qos\n      value: 1\n    - name: retain\n      value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeebe Command Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a Zeebe command binding component. It specifies the component type, version, and metadata fields such as gateway address, keep-alive duration, connection type, and CA certificate path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.zeebe.command\n  version: v1\n  metadata:\n  - name: gatewayAddr\n    value: \"<host>:<port>\"\n  - name: gatewayKeepAlive\n    value: \"45s\"\n  - name: usePlainTextConnection\n    value: \"true\"\n  - name: caCertificatePath\n    value: \"/path/to/ca-cert\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Rules in Dapr\nDESCRIPTION: Example of configuring metric rules with regular expressions to filter specific metrics in the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nmetrics:\n  enabled: true\n  rules:\n    - name: dapr_runtime_service_invocation_req_sent_total\n      labels:\n      - name: method\n        regex:\n          \"orders/\": \"orders/.+\"\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes with Helm\nDESCRIPTION: Bash commands for installing Redis on Kubernetes using Helm, specifically setting up Redis version 6.2 which is required for Dapr's pub/sub functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/redis-configuration-store.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install redis bitnami/redis --set image.tag=6.2\n```\n\n----------------------------------------\n\nTITLE: Multiple Routing Keys Subscription\nDESCRIPTION: YAML configuration showing how to bind multiple routing keys in a subscription.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: orderspubsub\nspec:\n  topic: B\n  routes: \n    default: /B\n  pubsubname: pubsub\n  metadata:\n    routingKey: keyA,keyB,\n```\n\n----------------------------------------\n\nTITLE: Successful State Deletion with Correct ETag\nDESCRIPTION: HTTP DELETE request to remove state data using the correct ETag value in the If-Match header.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE -H 'If-Match: 1' http://localhost:3500/v1.0/state/statestore/sampleData\n```\n\n----------------------------------------\n\nTITLE: Workflow Start API Request with Curl\nDESCRIPTION: Example of initiating a workflow using Dapr's HTTP API endpoint with curl. Shows how to start an OrderProcessingWorkflow with a specific instance ID and payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/workflows/dapr/OrderProcessingWorkflow/start?instanceID=12345678 -d '{\"Name\":\"Paperclips\",\"Quantity\":1,\"TotalCost\":9.95}'\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Reminder with Immediate Firing\nDESCRIPTION: Example of how to create a reminder that fires immediately and repeats every 9 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m0s0ms\",\n  \"period\":\"0h0m9s0ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Run Configuration for Go\nDESCRIPTION: YAML configuration for running multiple Go applications with Dapr, specifying app directories, IDs, ports, and commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napps:\n  - appDirPath: ./order-processor/\n    appID: order-processor\n    appPort: 6006\n    command: [\"go\", \"run\", \".\"]\n  - appID: checkout\n    appDirPath: ./checkout/\n    command: [\"go\", \"run\", \".\"]\n```\n\n----------------------------------------\n\nTITLE: Message Processing Status Response in Dapr\nDESCRIPTION: This JSON snippet demonstrates the response format for indicating the processing status of a received message. It allows for specifying success, retry, or drop actions for the message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"<status>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Conversation API Request in JSON\nDESCRIPTION: This snippet demonstrates how to structure a request body for the Dapr Conversation API. It includes inputs, caching settings, PII scrubbing options, and temperature control for the LLM.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/conversation_api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"content\": \"What is Dapr?\",\n      \"role\": \"user\",\n      \"scrubPII\": \"true\"\n    }\n  ],\n  \"cacheTTL\": \"10m\",\n  \"scrubPII\": \"true\",\n  \"temperature\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP Traceparent Header Format\nDESCRIPTION: Shows the format of the traceparent header used in HTTP requests to represent incoming requests in a tracing system. This header follows the W3C trace context specification and is understood by all vendors.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/w3c-tracing-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntraceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr .NET SDK\nDESCRIPTION: C# example showing how to retrieve configuration items from a Dapr configuration store. It uses the Dapr client to get the values of 'orderId1' and 'orderId2' from the 'configstore' component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Dapr.Client;\n\n//code\nnamespace ConfigurationApi\n{\n    public class Program\n    {\n        private static readonly string CONFIG_STORE_NAME = \"configstore\";\n\n        public static async Task Main(string[] args)\n        {\n            using var client = new DaprClientBuilder().Build();\n            var configuration = await client.GetConfiguration(CONFIG_STORE_NAME, new List<string>() { \"orderId1\", \"orderId2\" });\n            Console.WriteLine($\"Got key=\\n{configuration[0].Key} -> {configuration[0].Value}\\n{configuration[1].Key} -> {configuration[1].Value}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Dapr API Token in Kubernetes Pod\nDESCRIPTION: Kubernetes configuration to mount the API token secret as an environment variable in a container.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: mycontainer\n    image: myregistry/myapp\n    envFrom:\n    - secretRef:\n      name: dapr-api-token\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepSeek Conversation Component in YAML\nDESCRIPTION: Example configuration for setting up a DeepSeek conversation component in Dapr. The component requires an API key and optionally accepts a maxTokens parameter to limit response length.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/deepseek.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: deepseek\nspec:\n  type: conversation.deepseek\n  metadata:\n  - name: key\n    value: mykey\n  - name: maxTokens\n    value: 2048\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pipeline for Authorization Code Grant in YAML\nDESCRIPTION: This YAML configuration creates a custom pipeline using Dapr configuration to utilize the OAuth middleware for the Authorization Code Grant flow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/oauth.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: pipeline\n  namespace: default\nspec:\n  httpPipeline:\n    handlers:\n    - name: oauth2\n      type: middleware.http.oauth2\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL State Store with Outbox Pattern in Dapr\nDESCRIPTION: YAML configuration for a MySQL state store component with the outbox pattern enabled. It specifies the required and optional metadata fields for outbox functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mysql-outbox\nspec:\n  type: state.mysql\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n  - name: outboxPublishPubsub # Required\n    value: \"mypubsub\"\n  - name: outboxPublishTopic # Required\n    value: \"newOrder\"\n  - name: outboxPubsub # Optional\n    value: \"myOutboxPubsub\"\n  - name: outboxDiscardWhenMissingState #Optional. Defaults to false\n    value: false\n```\n\n----------------------------------------\n\nTITLE: Deleting Placement Stateful Set for HA Upgrade\nDESCRIPTION: This command deletes the existing placement stateful set to enable high availability mode for Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete statefulset.apps/dapr-placement-server -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Tracing with Zipkin in Kubernetes\nDESCRIPTION: YAML configuration for enabling Zipkin tracing in a Kubernetes environment. Sets the sampling rate to 100% and points to the Zipkin service endpoint within the cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: tracing\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    zipkin:\n      endpointAddress: \"http://zipkin.default.svc.cluster.local:9411/api/v2/spans\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in Java gRPC client\nDESCRIPTION: Java code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMetadata headers = new Metadata();\nMetadata.Key<String> jwtKey = Metadata.Key.of(\"dapr-app-id\", \"server\");\n\nGreeterService.ServiceBlockingStub stub = GreeterService.newBlockingStub(channel);\nstub = MetadataUtils.attachHeaders(stub, header);\nstub.SayHello(new HelloRequest() { Name = \"Darth Malak\" });\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Python\nDESCRIPTION: Unsubscribes from configuration updates and exits the application using the Dapr Python SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Unsubscribe from configuration updates\nunsubscribed = True\nfor config_item in CONFIGURATION_ITEMS:\n    unsub_item = client.unsubscribe_configuration(DAPR_CONFIGURATION_STORE, config_item)\n    #...\nif unsubscribed == True:\n    print(\"App unsubscribed from config changes\", flush=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL using Dapr PHP SDK\nDESCRIPTION: This PHP code demonstrates how to publish an event to 'TOPIC_A' with a TTL of 120 seconds using the Dapr PHP SDK. It creates a Dapr application, initializes a publisher, and uses the topic method to publish the message with TTL metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$app = \\Dapr\\App::create();\n$app->run(function(\\DI\\FactoryInterface $factory) {\n    $publisher = $factory->make(\\Dapr\\PubSub\\Publish::class, ['pubsub' => 'pubsub']);\n    $publisher->topic('TOPIC_A')->publish('data', ['ttlInSeconds' => '120']);\n});\n```\n\n----------------------------------------\n\nTITLE: Non-Dapr Endpoint Invocation Examples\nDESCRIPTION: Examples of invoking a non-Dapr math service using HTTPEndpoint and FQDN URL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/invoke/mathHTTPEndpoint/method/add \\\n  -H \"Content-Type: application/json\"\n  -d '{ \"arg1\": 10, \"arg2\": 23}'\n\ncurl http://localhost:3500/v1.0/invoke/http://mathServiceURL.com/method/add \\\n  -H \"Content-Type: application/json\"\n  -d '{ \"arg1\": 10, \"arg2\": 23}'\n```\n\n----------------------------------------\n\nTITLE: JSON Response Body for Lock Acquisition in Dapr\nDESCRIPTION: The JSON response returned after a lock acquisition attempt, indicating whether the operation was successful.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Response JSON Structure\nDESCRIPTION: JSON structure for binding response body showing state store and output binding configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"storeName\": \"stateStore\",\n    \"state\": \"stateDataToStore\",\n\n    \"to\": [\"storage\", \"queue\"],\n    \"concurrency\": \"parallel\",\n    \"data\": \"jsonObject\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Zipkin Container in Self-Hosted Mode\nDESCRIPTION: Docker command to run the Zipkin container in detached mode. This exposes Zipkin's UI and API on port 9411.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Setting TTL for RabbitMQ Messages via HTTP Request\nDESCRIPTION: Example of how to set message-level TTL when invoking RabbitMQ binding through Dapr's HTTP endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/rabbitmq.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myRabbitMQ \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\n        \\\"data\\\": {\\\n          \\\"message\\\": \\\"Hi\\\"\\\n        },\\\n        \\\"metadata\\\": {\\\n          \\\"ttlInSeconds\\\": \\\"60\\\"\\\n        },\\\n        \\\"operation\\\": \\\"create\\\"\\\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Resiliency Configuration\nDESCRIPTION: YAML configuration for defining resiliency policies including retry and circuit breaker patterns for Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - order-processor\n\nspec:\n  policies:\n    retries:\n      retryForever:\n        policy: constant\n        duration: 5s\n        maxRetries: -1\n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 5s\n        trip: consecutiveFailures >= 5\n\n  targets:\n    components:\n      statestore:\n        outbound:\n          retry: retryForever\n          circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Configuring APNS Binding Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up an APNS binding component with required metadata fields including development mode, key ID, team ID, and private key reference.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/apns.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.apns\n  version: v1\n  metadata:\n    - name: development\n      value: \"<bool>\"\n    - name: key-id\n      value: \"<APPLE_KEY_ID>\"\n    - name: team-id\n      value: \"<APPLE_TEAM_ID>\"\n    - name: private-key\n      secretKeyRef:\n        name: <SECRET>\n        key: \"<SECRET-KEY-NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Status Code-Based Retry Policy Configuration\nDESCRIPTION: Shows how to configure retry policies with specific HTTP and gRPC status code matching. Includes filtering for specific error codes and code ranges.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/retries/retries-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    retries:\n      retry5xxOnly:\n        policy: constant\n        duration: 5s\n        maxRetries: 3\n        matching:\n          httpStatusCodes: \"429,500-599\"\n          gRPCStatusCodes: \"1-4,8-11,13,14\"\n```\n\n----------------------------------------\n\nTITLE: Executing Wasm Binding with Ruby Script via cURL\nDESCRIPTION: This cURL command demonstrates how to invoke the Wasm binding component with a Ruby script. It sends a POST request to the Dapr sidecar, specifying the operation, command-line arguments, and input data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/wasm.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/wasm -d'\n{\n  \"operation\": \"execute\",\n  \"metadata\": {\n    \"args\": \"-ne,print \\\"Hello \\\"; print\"\n  },\n  \"data\": \"salaboy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Topic Subscription Discovery Response in Dapr\nDESCRIPTION: This JSON snippet shows the expected response format for the topic subscription discovery endpoint. It includes pubsub name, topic, routing rules, and metadata for configuring subscriptions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"pubsubname\": \"pubsub\",\n    \"topic\": \"newOrder\",\n    \"routes\": {\n      \"rules\": [\n        {\n          \"match\": \"event.type == order\",\n          \"path\": \"/orders\"\n        }\n      ]\n      \"default\" : \"/otherorders\"\n    },\n    \"metadata\": {\n      \"rawPayload\": \"true\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting Object from Alibaba Cloud Tablestore\nDESCRIPTION: JSON payload for deleting an object from Alibaba Cloud Tablestore. Specifies the 'delete' operation, primary keys, columns to get, and data containing the primary key value.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudtablestore.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n   \"primaryKeys\": \"pk1\",\n   \"columnToGet\": \"name,age,date\"\n  },\n  \"data\": {\n    \"pk1\": \"data1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Conversation Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up the Echo conversation component in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: echo\nspec:\n  type: conversation.echo\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker Policy in YAML\nDESCRIPTION: YAML configuration for a circuit breaker named 'simpleCB' that trips after 5 consecutive failures, allows 1 request when half-open, and remains open for 5 seconds before testing recovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ncircuitBreakers:\n  simpleCB:\n  maxRequests: 1\n  timeout: 5s \n  trip: consecutiveFailures >= 5\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Manual Component Configuration\nDESCRIPTION: Kubernetes deployment configuration for manually specifying pluggable component containers without using auto-injection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app\n  template:\n    metadata:\n      labels:\n        app: app\n      annotations:\n        dapr.io/pluggable-components: \"component\"\n        dapr.io/app-id: \"my-app\"\n        dapr.io/enabled: \"true\"\n    spec:\n      containers:\n        - name: app\n           image: YOUR_APP_IMAGE:YOUR_APP_IMAGE_VERSION\n        - name: component\n          image: YOUR_IMAGE_GOES_HERE:YOUR_IMAGE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Gremlin API Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an Azure Cosmos DB Gremlin API binding component in Dapr. Includes required metadata fields for URL, master key, and username.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cosmosdbgremlinapi.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.cosmosdb.gremlinapi\n  version: v1\n  metadata:\n  - name: url\n    value: \"wss://******.gremlin.cosmos.azure.com:443/\"\n  - name: masterKey\n    value: \"*****\"\n  - name: username\n    value: \"*****\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 Binding with TLS Support\nDESCRIPTION: YAML configuration demonstrating TLS setup for MQTT3 binding including CA certificate, client certificate, and client key configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mqtt3.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-binding\nspec:\n  type: bindings.mqtt3\n  version: v1\n  metadata:\n    - name: url\n      value: \"ssl://host.domain[:port]\"\n    - name: topic\n      value: \"topic1\"\n    - name: consumerID\n      value: \"myapp\"\n    # TLS configuration\n    - name: caCert\n      value: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n    - name: clientCert\n      value: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n    - name: clientKey\n      secretKeyRef:\n        name: myMqttClientKey\n        key: myMqttClientKey\n    # Optional\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"false\"\n    - name: backoffMaxRetries\n      value: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from AWS S3 using Dapr Binding\nDESCRIPTION: JSON structure for deleting an object from an S3 bucket using the 'delete' operation. The operation requires specifying the object key in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Delayed Messages with Pulsar in Shell\nDESCRIPTION: Examples of publishing messages to Pulsar topics with delivery delays specified using either deliverAt (specific time) or deliverAfter (time duration) parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myPulsar/myTopic?metadata.deliverAt='2021-09-01T10:00:00Z' \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myPulsar/myTopic?metadata.deliverAfter='4h5m3s' \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Slim Self-Hosted Dapr Installation\nDESCRIPTION: Install Dapr in slim self-hosted mode without Docker dependencies\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -s\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Subscribe in Python with Flask\nDESCRIPTION: This Python example uses Flask to implement Bulk Subscribe. It defines a subscription configuration endpoint and a message handling endpoint that processes multiple messages in a single request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/dapr/subscribe', methods=['GET'])\ndef subscribe():\n    # Define the bulk subscribe configuration\n    subscriptions = [{\n        \"pubsubname\": \"pubsub\",\n        \"topic\": \"TOPIC_A\",\n        \"route\": \"/checkout\",\n        \"bulkSubscribe\": {\n            \"enabled\": True,\n            \"maxMessagesCount\": 3,\n            \"maxAwaitDurationMs\": 40\n        }\n    }]\n    print('Dapr pub/sub is subscribed to: ' + json.dumps(subscriptions))\n    return jsonify(subscriptions)\n\n\n# Define the endpoint to handle incoming messages\n@app.route('/checkout', methods=['POST'])\ndef checkout():\n    messages = request.json\n    print(messages)\n    for message in messages:\n        print(f\"Received message: {message}\")\n    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}\n\nif __name__ == '__main__':\n    app.run(port=5000)\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Storage Bucket Binding Component in YAML\nDESCRIPTION: This YAML configuration sets up a GCP Storage Bucket binding component in Dapr. It includes various metadata fields for authentication and bucket configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.gcp.bucket\n  version: v1\n  metadata:\n  - name: bucket\n    value: \"mybucket\"\n  - name: type\n    value: \"service_account\"\n  - name: project_id\n    value: \"project_111\"\n  - name: private_key_id\n    value: \"*************\"\n  - name: client_email\n    value: \"name@domain.com\"\n  - name: client_id\n    value: \"1111111111111111\"\n  - name: auth_uri\n    value: \"https://accounts.google.com/o/oauth2/auth\"\n  - name: token_uri\n    value: \"https://oauth2.googleapis.com/token\"\n  - name: auth_provider_x509_cert_url\n    value: \"https://www.googleapis.com/oauth2/v1/certs\"\n  - name: client_x509_cert_url\n    value: \"https://www.googleapis.com/robot/v1/metadata/x509/<project-name>.iam.gserviceaccount.com\"\n  - name: private_key\n    value: \"PRIVATE KEY\"\n  - name: decodeBase64\n    value: \"<bool>\"\n  - name: encodeBase64\n    value: \"<bool>\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific gRPC APIs in Dapr Configuration\nDESCRIPTION: This YAML configuration disables the state v1 gRPC API while allowing all other gRPC APIs. It shows how to use a denylist for gRPC in the Dapr Configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/api-allowlist.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  api:\n    denied:\n      - name: state\n        version: v1\n        protocol: grpc\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Secret Store JSON File\nDESCRIPTION: Creates a JSON file named 'secrets.json' to store secret values. This file will be used by the local secret store component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"secret\": \"Order Processing pass key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running multiple Dapr applications with Multi-App Run\nDESCRIPTION: Command to run both order-processor and checkout applications using Dapr's Multi-App Run feature instead of separate commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets from Dapr's HashiCorp Vault Integration\nDESCRIPTION: Shell command to retrieve a secret from the Vault secret store using Dapr's API. This example uses curl to make an HTTP request to the local Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/hashicorp-vault.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3501/v1.0/secrets/my-hashicorp-vault/mysecret\n```\n\n----------------------------------------\n\nTITLE: Saving Text to a File using AWS S3 Binding with curl\nDESCRIPTION: Example of how to save text to a specific file in an S3 bucket using Dapr's AWS S3 binding. The curl command sends a POST request with the 'create' operation, the data to be saved, and metadata including the target filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\", \\\"metadata\\\": { \\\"key\\\": \\\"my-test-file.txt\\\" } }\" \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\", \"metadata\": { \"key\": \"my-test-file.txt\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Workflow Start API Response\nDESCRIPTION: JSON response returned by the workflow start API containing the instance ID for status tracking.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"instanceID\":\"12345678\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr HTTP Pipeline for Bearer Authentication\nDESCRIPTION: YAML configuration for applying the bearer token middleware in the Dapr HTTP pipeline. Specifies the middleware handler configuration in the application configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-bearer.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: bearer-token\n      type: middleware.http.bearer\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeMQ PubSub Component in YAML\nDESCRIPTION: YAML configuration for setting up a KubeMQ pub/sub component in Dapr. Defines the component type, version, and essential metadata fields like address, store settings, and consumer ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-kubemq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kubemq-pubsub\nspec:\n  type: pubsub.kubemq\n  version: v1\n  metadata:\n    - name: address\n      value: localhost:50000\n    - name: store\n      value: false\n    - name: consumerID\n      value: channel1\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr with gRPC in Kubernetes\nDESCRIPTION: Kubernetes deployment YAML configuration for running a Dapr application with gRPC protocol.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-protocol: \"grpc\"\n        dapr.io/app-port: \"5005\"\n...\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar in Podman Container with Host Network\nDESCRIPTION: This command runs the Dapr sidecar in a Podman container using the host network. It mounts a local components directory and specifies the application ID and port.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-podman.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman run --network=\"host\" --mount type=bind,source=\"$(pwd)\"/components,target=/components daprio/daprd:edge ./daprd -app-id <my-app-id> -app-port <my-app-port>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-App Run Template in YAML\nDESCRIPTION: YAML configuration for the Multi-App Run template file (dapr.yaml) used to start the conversation application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appID: conversation\n    appDirPath: ./conversation/\n    command: [\"python3\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Applying Windows Application Deployment\nDESCRIPTION: This command applies the Windows application deployment YAML file to the Kubernetes cluster, creating or updating the deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deploy_windows.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Actor State Keys in Redis\nDESCRIPTION: Command to retrieve all state keys associated with a specific actor instance. This example lists keys for a \"cat\" actor named \"leroy\" in the \"mypets\" application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nKEYS mypets||cat||leroy*\n```\n\n----------------------------------------\n\nTITLE: Low Cardinality Path Matching Configuration\nDESCRIPTION: A YAML snippet demonstrating how to configure HTTP path matching with low cardinality. This approach provides balanced metrics reporting by grouping similar paths while limiting resource consumption.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  increasedCardinality: false\n  pathMatching:\n    - /orders/{orderID}\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in .NET gRPC client\nDESCRIPTION: C# code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar metadata = new Metadata\n{\n\t{ \"dapr-app-id\", \"server\" }\n};\n\nvar call = client.SayHello(new HelloRequest { Name = \"Darth Nihilus\" }, metadata);\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Creation Command\nDESCRIPTION: Command to create an EKS cluster using the eksctl tool and configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neksctl create cluster -f cluster-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Dapr Components in Bash\nDESCRIPTION: Create a new directory named 'my-components' to store the secret and component files.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-components\n```\n\n----------------------------------------\n\nTITLE: Setting Priority for RabbitMQ Messages via HTTP Request\nDESCRIPTION: Example of how to set message-level priority when invoking RabbitMQ binding through Dapr's HTTP endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/rabbitmq.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myRabbitMQ \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\n        \\\"data\\\": {\\\n          \\\"message\\\": \\\"Hi\\\"\\\n        },\\\n        \\\"metadata\\\": {\\\n          \\\"priority\\\": \\\"5\\\"\\\n        },\\\n        \\\"operation\\\": \\\"create\\\"\\\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Component for Kubernetes Environment\nDESCRIPTION: YAML configuration and Kubernetes commands for setting up the Azure Key Vault secret store component in a Kubernetes environment. This example demonstrates how to store and reference client secrets or certificates using Kubernetes secrets.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic [your_k8s_secret_name] --from-literal=[your_k8s_secret_key]=[your_client_secret]\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureClientSecret\n    secretKeyRef:\n      name: \"[your_k8s_secret_name]\"\n      key: \"[your_k8s_secret_key]\"\nauth:\n  secretStore: kubernetes\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f azurekeyvault.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating State with TTL in Dapr using OCI Object Storage\nDESCRIPTION: This curl command demonstrates how to create a state entry with a Time To Live (TTL) of 120 seconds using the Dapr API. The state is stored in OCI Object Storage with an expiry-time-from-ttl metadata tag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oci-objectstorage.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"temporary\",\n          \"value\": \"ephemeral\",\n          \"metadata\": {\"ttlInSeconds\": \"120\"}}\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Competing Consumers with NATS JetStream\nDESCRIPTION: YAML configuration for implementing the competing consumers pattern with NATS JetStream. This example shows how to configure durableName and queueGroupName to ensure messages are processed by only one consumer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.jetstream\n  version: v1\n  metadata:\n  - name: name\n    value: \"my-conn-name\"\n  - name: streamName\n    value: \"my-stream\"\n  - name: durableName \n    value: \"my-durable-subscription\"\n  - name: queueGroupName\n    value: \"my-queue-group\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Command to create a new resource group in Azure with specified name and location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-aks.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name [your_resource_group] --location [region]\n```\n\n----------------------------------------\n\nTITLE: Configuring KiND Cluster with YAML\nDESCRIPTION: This YAML configuration defines a KiND cluster with one control plane and two worker nodes. It sets up port mappings and node labels for ingress readiness.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 8081\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 8443\n    protocol: TCP\n- role: worker\n- role: worker\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Storage State Store Component in YAML\nDESCRIPTION: This YAML configuration sets up an Azure Table Storage state store component for Dapr. It includes required fields like accountName, accountKey, and tableName. The cosmosDbMode field is commented out and set to false by default for Azure Tables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-tablestorage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.azure.tablestorage\n  version: v1\n  metadata:\n  - name: accountName\n    value: <REPLACE-WITH-ACCOUNT-NAME>\n  - name: accountKey\n    value: <REPLACE-WITH-ACCOUNT-KEY>\n  - name: tableName\n    value: <REPLACE-WITH-TABLE-NAME>\n# - name: cosmosDbMode\n#   value: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MQTT3 Binding Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up an MQTT3 binding component with required and optional metadata fields including URL, topic, consumer ID, retain settings, and session management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mqtt3.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.mqtt3\n  version: v1\n  metadata:\n    - name: url\n      value: \"tcp://[username][:password]@host.domain[:port]\"\n    - name: topic\n      value: \"mytopic\"\n    - name: consumerID\n      value: \"myapp\"\n    # Optional\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"false\"\n    - name: backOffMaxRetries\n      value: \"0\"\n    - name: direction\n      value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Deployment with API Token Authentication\nDESCRIPTION: Adds annotations to a Kubernetes deployment template to enable Dapr and specify the API token secret to use for authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/enabled: \"true\"\n  dapr.io/api-token-secret: \"dapr-api-token\" # name of the Kubernetes secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Queues Binding Component in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up an Azure Storage Queues binding component in Dapr. It includes required and optional metadata fields for configuring the binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/storagequeues.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.storagequeues\n  version: v1\n  metadata:\n  - name: accountName\n    value: \"account1\"\n  - name: accountKey\n    value: \"***********\"\n  - name: queueName\n    value: \"myqueue\"\n# - name: pollingInterval\n#   value: \"30s\"\n# - name: ttlInSeconds\n#   value: \"60\"\n# - name: decodeBase64\n#   value: \"false\"\n# - name: encodeBase64\n#   value: \"false\"\n# - name: endpoint\n#   value: \"http://127.0.0.1:10001\"\n# - name: visibilityTimeout\n#   value: \"30s\"\n# - name: direction \n#   value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a Zookeeper state store component in Dapr. Defines required and optional metadata fields including server addresses, session timeout, buffer sizes, and key prefix path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-zookeeper.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.zookeeper\n  version: v1\n  metadata:\n  - name: servers\n    value: <REPLACE-WITH-COMMA-DELIMITED-SERVERS>\n  - name: sessionTimeout\n    value: <REPLACE-WITH-SESSION-TIMEOUT>\n  - name: maxBufferSize\n    value: <REPLACE-WITH-MAX-BUFFER-SIZE>\n  - name: maxConnBufferSize\n    value: <REPLACE-WITH-MAX-CONN-BUFFER-SIZE>\n  - name: keyPrefixPath\n    value: <REPLACE-WITH-KEY-PREFIX-PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting Redis password in Dapr YAML\nDESCRIPTION: YAML configuration snippet for specifying the Redis password in a Dapr component file. This is used to authenticate Dapr with the Redis instance in a Kubernetes setup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisPassword\n      value: lhDOkwTlp0\n```\n\n----------------------------------------\n\nTITLE: SendGrid Dynamic Template Email Request\nDESCRIPTION: JSON example demonstrating how to send an email using SendGrid's dynamic templates with template ID and dynamic data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sendgrid.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"emailTo\": \"changeme@example.net\",\n    \"subject\": \"An template email from Dapr SendGrid binding\",\n    \"dynamicTemplateId\": \"d-123456789\",\n    \"dynamicTemplateData\": \"{\\\"customer\\\":{\\\"name\\\":\\\"John Smith\\\"}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Object with JSON Payload\nDESCRIPTION: JSON payload for creating an object in S3 using the AWS S3 binding. Demonstrates setting the operation, data, and optional metadata like storage class.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\",\n  \"metadata\": { \n    \"storageClass\": \"STANDARD_IA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Client for Cryptography in JavaScript\nDESCRIPTION: Creates a new Dapr SDK client for cryptography operations using gRPC protocol.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new DaprClient({\n  daprHost,\n  daprPort,\n  communicationProtocol: CommunicationProtocolEnum.GRPC,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Dapr Sidecar in Kubernetes\nDESCRIPTION: Example of configuring the log level for a Dapr sidecar in Kubernetes by adding an annotation to the pod specification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nannotations:\n  dapr.io/log-level: \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription for Custom Properties in YAML\nDESCRIPTION: YAML configuration for a Dapr subscription that enables receiving custom properties as HTTP headers by setting 'requireAllProperties' to 'true'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-eventhubs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order-pub-sub\nspec:\n  topic: orders\n  routes: \n    default: /checkout\n  pubsubname: order-pub-sub\n  metadata:\n    requireAllProperties: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Windows Application with Node Affinity\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment for a Windows application. It includes Dapr annotations and node affinity rules to ensure the application is scheduled on Windows nodes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yourwinapp\n  labels:\n    app: applabel\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: applablel\n  template:\n    metadata:\n      labels:\n        app: applabel\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/id: \"addapp\"\n        dapr.io/port: \"6000\"\n        dapr.io/config: \"appconfig\"\n    spec:\n      containers:\n      - name: add\n        image: yourreponsitory/your-windows-dapr-container:your-tag\n        ports:\n        - containerPort: 6000\n        imagePullPolicy: Always\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: kubernetes.io/os\n                  operator: In\n                  values:\n                  - windows\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Kubernetes Secret Store Component in YAML\nDESCRIPTION: YAML configuration for setting up a custom Kubernetes secret store component in Dapr. This component definition allows for customized secret store access and portability between different environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/kubernetes-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mycustomsecretstore\nspec:\n  type: secretstores.kubernetes\n  version: v1\n  metadata:[]\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Timer with JSON Payload\nDESCRIPTION: Examples of JSON payloads for creating actor timers. These snippets show how to specify dueTime and period for actor timers in different formats.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m3s0ms\",\n  \"period\":\"0h0m7s0ms\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m0s0ms\",\n  \"period\":\"0h0m9s0ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AlibabaCloud OOS Parameter Store Secret Store in Dapr\nDESCRIPTION: YAML configuration for creating a secretstores.alicloud.parameterstore component in Dapr. The configuration requires region ID, access key ID, access key secret, and optionally a security token to authenticate with AlibabaCloud.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/alicloud-oos-parameter-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: alibabacloudparameterstore\nspec:\n  type: secretstores.alicloud.parameterstore\n  version: v1\n  metadata:\n  - name: regionId\n    value: \"[alicloud_region_id]\"\n  - name: accessKeyId \n    value: \"[alicloud_access_key_id]\"\n  - name: accessKeySecret\n    value: \"[alicloud_access_key_secret]\"\n  - name: securityToken\n    value: \"[alicloud_security_token]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as a Dapr Configuration Store\nDESCRIPTION: YAML component definition that configures Redis as a Dapr configuration store. The component is named 'configstore' and uses the 'configuration.redis' type with Redis connection details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: configstore\nspec:\n  type: configuration.redis\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: <PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: S3 Presign Response Format\nDESCRIPTION: JSON response format returned when successfully presigning an S3 object. It contains a presigned URL with a limited validity period that allows temporary access to the object.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"presignURL\": \"https://<your bucket>.s3.<your region>.amazonaws.com/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Body Size Limit in Self-Hosted Dapr\nDESCRIPTION: Command to run a Dapr application with a custom HTTP request body size limit of 16MB in self-hosted mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/increase-request-size.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --dapr-http-max-request-size 16 node app.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Topics PubSub Component with Connection String\nDESCRIPTION: This YAML snippet demonstrates how to set up the Azure Service Bus Topics pubsub component using connection string authentication. It includes required and optional metadata fields for customizing the component's behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-servicebus-topics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: servicebus-pubsub\nspec:\n  type: pubsub.azure.servicebus.topics\n  version: v1\n  metadata:\n  # Required when not using Microsoft Entra ID Authentication\n  - name: connectionString\n    value: \"Endpoint=sb://{ServiceBusNamespace}.servicebus.windows.net/;SharedAccessKeyName={PolicyName};SharedAccessKey={Key};EntityPath={ServiceBus}\"\n  # - name: consumerID # Optional: defaults to the app's own ID\n  #   value: channel1 \n  # - name: timeoutInSec # Optional\n  #   value: 60\n  # - name: handlerTimeoutInSec # Optional\n  #   value: 60\n  # - name: disableEntityManagement # Optional\n  #   value: \"false\"\n  # - name: maxDeliveryCount # Optional\n  #   value: 3\n  # - name: lockDurationInSec # Optional\n  #   value: 60\n  # - name: lockRenewalInSec # Optional\n  #   value: 20\n  # - name: maxActiveMessages # Optional\n  #   value: 10000\n  # - name: maxConcurrentHandlers # Optional\n  #   value: 10\n  # - name: defaultMessageTimeToLiveInSec # Optional\n  #   value: 10\n  # - name: autoDeleteOnIdleInSec # Optional\n  #   value: 3600\n  # - name: minConnectionRecoveryInSec # Optional\n  #   value: 2\n  # - name: maxConnectionRecoveryInSec # Optional\n  #   value: 300\n  # - name: maxRetriableErrorsPerSec # Optional\n  #   value: 10\n  # - name: publishMaxRetries # Optional\n  #   value: 5\n  # - name: publishInitialRetryIntervalInMs # Optional\n  #   value: 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Grid Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an Azure Event Grid binding component in Dapr. Includes required and optional metadata fields for both input and output bindings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <name>\nspec:\n  type: bindings.azure.eventgrid\n  version: v1\n  metadata:\n  # Required Output Binding Metadata\n  - name: accessKey\n    value: \"[AccessKey]\"\n  - name: topicEndpoint\n    value: \"[TopicEndpoint]\"\n  # Required Input Binding Metadata\n  - name: azureTenantId\n    value: \"[AzureTenantId]\"\n  - name: azureSubscriptionId\n    value: \"[AzureSubscriptionId]\"\n  - name: azureClientId\n    value: \"[ClientId]\"\n  - name: azureClientSecret\n    value: \"[ClientSecret]\"\n  - name: subscriberEndpoint\n    value: \"[SubscriberEndpoint]\"\n  - name: handshakePort\n    # Make sure to pass this as a string, with quotes around the value\n    value: \"[HandshakePort]\"\n  - name: scope\n    value: \"[Scope]\"\n  # Optional Input Binding Metadata\n  - name: eventSubscriptionName\n    value: \"[EventSubscriptionName]\"\n  # Optional metadata\n  - name: direction\n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component YAML with Versioning in Dapr\nDESCRIPTION: This YAML snippet demonstrates the structure of a Dapr component manifest, including versioning for both the manifest itself and the component implementation. It shows how to specify the API version, component type, and implementation version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/support/support-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1 # <-- This is the version of the component manifest\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  version: v1 # <-- This is the version of the pubsub.redis schema implementation\n  type: pubsub.redis\n  metadata:\n  - name: redisHost\n    value: redis-master:6379\n  - name: redisPassword\n    value: general-kenobi\n```\n\n----------------------------------------\n\nTITLE: Kubernetes RBAC Configuration for Non-default Namespaces\nDESCRIPTION: YAML configuration for setting up necessary RBAC permissions in non-default Kubernetes namespaces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-secrets.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: secret-reader\n  namespace: <NAMESPACE>\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"get\", \"list\"]\n---\n\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: dapr-secret-reader\n  namespace: <NAMESPACE>\nsubjects:\n- kind: ServiceAccount\n  name: default\nroleRef:\n  kind: Role\n  name: secret-reader\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault and Authorizing Service Principal\nDESCRIPTION: Bash script for creating an Azure Key Vault, enabling RBAC authorization, and assigning the 'Key Vault Secrets User' role to a Service Principal. This setup is required before configuring the Dapr component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_PRINCIPAL_ID=\"[your_service_principal_object_id]\"\nLOCATION=\"[your_location]\"\nRG_NAME=\"[resource_group_name]\"\nRG_ID=$(az group create \\\n  --name \"${RG_NAME}\" \\\n  --location \"${LOCATION}\" \\\n  | jq -r .id)\nKEYVAULT_NAME=\"[key_vault_name]\"\naz keyvault create \\\n  --name \"${KEYVAULT_NAME}\" \\\n  --enable-rbac-authorization true \\\n  --resource-group \"${RG_NAME}\" \\\n  --location \"${LOCATION}\"\naz role assignment create \\\n  --assignee \"${SERVICE_PRINCIPAL_ID}\" \\\n  --role \"Key Vault Secrets User\" \\\n  --scope \"${RG_ID}/providers/Microsoft.KeyVault/vaults/${KEYVAULT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Configuration Updates via HTTP in Dapr Applications\nDESCRIPTION: HTTP POST endpoint format that applications can implement to receive configuration change notifications from Dapr. This endpoint is called by Dapr when subscribed configurations change.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<appPort>/configuration/<store-name>/<key>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up the HTTP binding component in Dapr. Includes required and optional metadata fields for customizing the binding behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.http\n  version: v1\n  metadata:\n    - name: url\n      value: \"http://something.com\"\n    #- name: maxResponseBodySize\n    #  value: \"100Mi\" # OPTIONAL maximum amount of data to read from a response\n    #- name: MTLSRootCA\n    #  value: \"/Users/somepath/root.pem\" # OPTIONAL path to root CA or PEM-encoded string\n    #- name: MTLSClientCert\n    #  value: \"/Users/somepath/client.pem\" # OPTIONAL path to client cert or PEM-encoded string\n    #- name: MTLSClientKey\n    #  value: \"/Users/somepath/client.key\" # OPTIONAL path to client key or PEM-encoded string\n    #- name: MTLSRenegotiation\n    #  value: \"RenegotiateOnceAsClient\" # OPTIONAL one of: RenegotiateNever, RenegotiateOnceAsClient, RenegotiateFreelyAsClient\n    #- name: securityToken # OPTIONAL <token to include as a header on HTTP requests>\n    #  secretKeyRef:\n    #    name: mysecret\n    #    key: \"mytoken\"\n    #- name: securityTokenHeader\n    #  value: \"Authorization: Bearer\" # OPTIONAL <header name for the security token>\n    #- name: errorIfNot2XX\n    #  value: \"false\" # OPTIONAL\n```\n\n----------------------------------------\n\nTITLE: Deleting Actor Reminder using cURL\nDESCRIPTION: Example of deleting an actor reminder using a cURL command. This snippet demonstrates how to make a DELETE request to remove a specific reminder for an actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:3500/v1.0/actors/stormtrooper/50/reminders/checkRebels \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Applying Rate Limit Middleware in Dapr Configuration\nDESCRIPTION: Shows how to reference and apply the rate limit middleware in a Dapr configuration file. This configuration sets up the HTTP pipeline to use the rate limiting handler.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-rate-limit.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: ratelimit\n      type: middleware.http.ratelimit\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite State Store with Namespace Table\nDESCRIPTION: YAML configuration for SQLite state store component with namespace isolation using separate tables\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/namespaced-actors.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.sqlite\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"data.db\"\n  - name: tableName\n    value: \"namespace-actorA\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis host in Dapr YAML\nDESCRIPTION: YAML configuration snippet for specifying the Redis host in a Dapr component file. This is used to connect Dapr to the Redis instance in a Kubernetes setup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisHost\n      value: redis-master:6379\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dapr with High Availability Enabled\nDESCRIPTION: This Helm command upgrades Dapr with high availability mode enabled after deleting the placement stateful set.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade dapr ./charts/dapr -n dapr-system --set global.ha.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Topic with Programmatic Subscription in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to configure a dead letter topic named 'poisonMessages' for messages consumed from the 'orders' topic using Dapr's programmatic subscription method.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-deadletter.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/dapr/subscribe', (_req, res) => {\n    res.json([\n        {\n            pubsubname: \"pubsub\",\n            topic: \"orders\",\n            route: \"/checkout\",\n            deadLetterTopic: \"poisonMessages\"\n        }\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Status Code Filter Implementation\nDESCRIPTION: Demonstrates how to implement status code filtering in retry policies, allowing granular control over which HTTP and gRPC status codes trigger retries.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/retries/retries-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    retries:\n      retry5xxOnly:\n        matching:\n          httpStatusCodes: \"429,500-599\"\n          gRPCStatusCodes: \"4,8-11,13,14\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with JSON Logging\nDESCRIPTION: Helm commands to install Dapr with JSON-formatted logging enabled\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add dapr https://dapr.github.io/helm-charts/\nhelm repo update\nhelm install dapr dapr/dapr --namespace dapr-system --set global.logAsJson=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Sidecar Shutdown in Go\nDESCRIPTION: Go code example showing how to properly initialize a Dapr client and implement graceful shutdown using the Go SDK. The code demonstrates proper resource cleanup with defer statements.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-job.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\tdapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n  client, err := dapr.NewClient()\n  if err != nil {\n    log.Panic(err)\n  }\n  defer client.Close()\n  defer client.Shutdown()\n  // Job\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reentrancy in JavaScript\nDESCRIPTION: Configure a JavaScript actor service to enable reentrancy by setting the reentrancy options in DaprClientOptions. This enables actors to receive reentrant calls with a maximum stack depth of 32.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actor-reentrancy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient, DaprServer } from \"@dapr/dapr\";\n\n// Configure the actor runtime with the DaprClientOptions.\nconst clientOptions = {\n  actor: {\n    reentrancy: {\n      enabled: true,\n      maxStackDepth: 32,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Key-Value Secret with cURL\nDESCRIPTION: HTTP request to retrieve a multi-valued secret from the Dapr secret store API. This example demonstrates accessing a nested object as a single secret when multiValued=true.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:3501/v1.0/secrets/local-secret-store/connectionStrings\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sql\": \"your sql connection string\",\n  \"mysql\": \"your mysql connection string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr in High Availability Mode\nDESCRIPTION: Deploy Dapr with three replicas of each control plane pod for production scenarios.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --enable-ha=true\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Items in Java\nDESCRIPTION: Retrieves configuration items from the Dapr configuration store using the Java SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ntry (DaprPreviewClient client = (new DaprClientBuilder()).buildPreviewClient()) {\n    for (String configurationItem : CONFIGURATION_ITEMS) {\n        ConfigurationItem item = client.getConfiguration(DAPR_CONFIGURATON_STORE, configurationItem).block();\n        System.out.println(\"Configuration for \" + configurationItem + \": {'value':'\" + item.getValue() + \"'}\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Aerospike on Kubernetes with Helm\nDESCRIPTION: These commands add the Helm repository for Aerospike and install it on a Kubernetes cluster using Helm. It creates an Aerospike instance in the 'aerospike' namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-aerospike.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator\nhelm install --name my-aerospike --namespace aerospike stable/aerospike\n```\n\n----------------------------------------\n\nTITLE: Configuring In-memory State Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up an in-memory state store component in Dapr. This component stores state in the Dapr sidecar's memory and is primarily intended for development purposes. The configuration includes an optional commented section for enabling actor state storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-inmemory.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.in-memory\n  version: v1\n  metadata: \n  # Uncomment this if you wish to use In-memory as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Update Notification Format in Dapr\nDESCRIPTION: JSON request body format that Dapr sends to application endpoints when notifying about configuration changes. Includes subscription ID and details of changed configuration items.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"<subscription-id>\",\n    \"items\": [\n        \"key\": \"<key-of-configuration-item>\",\n        \"value\": \"<new-value>\",\n        \"version\": \"<version-of-item>\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Reminder with Custom Data\nDESCRIPTION: Example of how to create a reminder with custom data. This reminder includes data that will be returned when the reminder fires.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"someData\",\n  \"dueTime\": \"1m\",\n  \"period\": \"20s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Quorum Queue Configuration\nDESCRIPTION: YAML configuration for setting up a quorum queue type.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: pubsub\nspec:\n  topic: checkout\n  routes: \n    default: /orders\n  pubsubname: order-pub-sub\n  metadata:\n    queueType: quorum\n```\n\n----------------------------------------\n\nTITLE: Retrieving Actor Reminder in Dapr\nDESCRIPTION: HTTP GET request to retrieve a reminder for a Dapr actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nGET http://localhost:3500/v1.0/actors/<actorType>/<actorId>/reminders/<name>\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Multi-App Services\nDESCRIPTION: This command runs both the order-processor and checkout services simultaneously using Dapr's multi-app run feature.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Configuring Bulk Subscribe with YAML Subscription Definition\nDESCRIPTION: This YAML example shows how to define a subscription with bulk subscription enabled. It configures maximum message count and maximum await duration for batching messages before delivery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order-pub-sub\nspec:\n  topic: orders\n  routes:\n    default: /checkout\n  pubsubname: order-pub-sub\n  bulkSubscribe:\n    enabled: true\n    maxMessagesCount: 100\n    maxAwaitDurationMs: 40\nscopes:\n- orderprocessing\n- checkout\n```\n\n----------------------------------------\n\nTITLE: MQTT PubSub Component Configuration Example with Templates\nDESCRIPTION: Example of a Dapr MQTT pubsub component configuration using template tags. Demonstrates the use of the {uuid} template tag for generating unique consumer IDs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/component-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.mqtt3\n  version: v1\n  metadata:\n    - name: consumerID\n      value: \"{uuid}\"\n    - name: url\n      value: \"tcp://admin:public@localhost:1883\"\n    - name: qos\n      value: 1\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation-Specific Access Control\nDESCRIPTION: YAML configuration that allows only specific operation 'op1' from app1, denying all other operations and apps\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: deny\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: deny\n      trustDomain: 'public'\n      namespace: \"default\"\n      operations:\n      - name: /op1\n        httpVerb: ['*']\n        action: allow\n```\n\n----------------------------------------\n\nTITLE: Configuring a Local Secret Store Component in Dapr\nDESCRIPTION: Creates a YAML component file that configures a local file-based secret store in Dapr. This component defines how Dapr will access the secrets from the JSON file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: localsecretstore\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: secrets.json  #path to secrets file\n  - name: nestedSeparator\n    value: \":\"\n```\n\n----------------------------------------\n\nTITLE: Creating Process Instance by BPMN ID in Zeebe\nDESCRIPTION: Creates a new process instance using BPMN process ID with specified variables. This version creates an asynchronous process instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bpmnProcessId\": \"products-process\",\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"create-instance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Router Alias Component in YAML\nDESCRIPTION: This YAML snippet defines a Dapr component for the router alias HTTP middleware. It specifies the component type, version, and metadata including a JSON-encoded dictionary of route mappings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-routeralias.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: routeralias \nspec:\n  type: middleware.http.routeralias\n  version: v1\n  metadata:\n    # String containing a JSON-encoded or YAML-encoded dictionary\n    # Each key in the dictionary is the incoming path, and the value is the path it's converted to\n    - name: \"routes\"\n      value: |\n        {\n          \"/mall/activity/info\": \"/v1.0/invoke/srv.default/method/mall/activity/info\",\n          \"/hello/activity/{id}/info\": \"/v1.0/invoke/srv.default/method/hello/activity/info\",\n          \"/hello/activity/{id}/user\": \"/v1.0/invoke/srv.default/method/hello/activity/user\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Index for Optimizing TTL Cleanup in SQL\nDESCRIPTION: This SQL command creates a clustered index on the ExpireDate column of the state table. This can improve performance when cleaning up expired records, especially in tables with a large number of records using TTLs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-sqlserver.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CLUSTERED INDEX expiredate_idx ON state(ExpireDate ASC)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Pub/Sub Component in YAML\nDESCRIPTION: YAML configuration for defining a Dapr pub/sub component. The component specification includes the API version, kind, metadata name, namespace, component type, version, and metadata key-value pairs for configuration settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\n  namespace: default\nspec:\n  type: pubsub.<NAME>\n  version: v1\n  metadata:\n  - name: <KEY>\n    value: <VALUE>\n  - name: <KEY>\n    value: <VALUE>\n...\n```\n\n----------------------------------------\n\nTITLE: Declarative Subscription with Checkpoint Configuration for Azure Event Hubs\nDESCRIPTION: This YAML configuration shows a declarative subscription setup for Azure Event Hubs with checkpoint frequency configuration, allowing control over how often checkpoints are created during message processing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-eventhubs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order-pub-sub\nspec:\n  topic: orders\n  routes: \n    default: /checkout\n  pubsubname: order-pub-sub\n  metadata:\n    checkPointFrequencyPerPartition: 1\nscopes:\n- orderprocessing\n- checkout\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Pub/Sub Component with pubsub.yaml\nDESCRIPTION: This YAML file configures the Redis pub/sub component for Dapr. It specifies the component name, type, version, and connection details for Redis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: MQTT3 Per-Request Topic Override in JSON\nDESCRIPTION: JSON example showing how to override the topic setting for individual MQTT3 binding requests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mqtt3.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"topic\": \"myTopic\"\n  },\n  \"data\": \"<h1>Testing Dapr Bindings</h1>This is a test.<br>Bye!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Binding Component with API Key\nDESCRIPTION: Basic YAML configuration for setting up Azure OpenAI binding using API key authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/openai.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.openai\n  version: v1\n  metadata:\n  - name: apiKey\n    value: \"1234567890abcdef\"\n  - name: endpoint\n    value: \"https://myopenai.openai.azure.com\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request for AWS SES Binding\nDESCRIPTION: Sample JSON request demonstrating how to trigger the AWS SES binding with custom email metadata and message content. Shows the format for specifying recipients and subject.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/ses.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"emailTo\": \"dapr-smtp-binding@example.net\",\n    \"emailCc\": \"cc1@example.net\",\n    \"subject\": \"Email subject\"\n  },\n  \"data\": \"Testing Dapr SMTP Binding\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up Redis as a configuration store in Dapr. Includes essential fields like redisHost, redisPassword, useEntraID, and enableTLS settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/redis-configuration-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: configuration.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <address>:6379\n  - name: redisPassword\n    value: **************\n  - name: useEntraID\n    value: \"true\"\n  - name: enableTLS\n    value: <bool>\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Binding Component in YAML\nDESCRIPTION: This YAML configuration defines an Azure Cosmos DB binding component for Dapr. It specifies the necessary metadata fields including URL, master key, database name, collection name, and partition key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cosmosdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.cosmosdb\n  version: v1\n  metadata:\n  - name: url\n    value: \"https://******.documents.azure.com:443/\"\n  - name: masterKey\n    value: \"*****\"\n  - name: database\n    value: \"OrderDb\"\n  - name: collection\n    value: \"Orders\"\n  - name: partitionKey\n    value: \"<message>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Binding with Extended Timeout\nDESCRIPTION: This YAML snippet demonstrates how to configure the Azure Cosmos DB binding component with an extended initialization timeout. This is recommended for production use to allow more time for connecting to the database during sidecar initialization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cosmosdb.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  type: bindings.azure.cosmosdb\n  version: v1\n  initTimeout: 5m\n  metadata:\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client Credentials Middleware Component in YAML\nDESCRIPTION: This YAML snippet defines a Dapr component for OAuth2 client credentials middleware. It specifies the component type, version, and metadata fields such as client ID, client secret, scopes, token URL, and header name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-oauth2clientcredentials.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: oauth2clientcredentials\nspec:\n  type: middleware.http.oauth2clientcredentials\n  version: v1\n  metadata:\n  - name: clientId\n    value: \"<your client ID>\"\n  - name: clientSecret\n    value: \"<your client secret>\"\n  - name: scopes\n    value: \"https://www.googleapis.com/auth/userinfo.email\"\n  - name: tokenURL\n    value: \"https://accounts.google.com/o/oauth2/token\"\n  - name: headerName\n    value: \"authorization\"\n```\n\n----------------------------------------\n\nTITLE: Setting the API token environment variable in self-hosted mode\nDESCRIPTION: This command sets the APP_API_TOKEN environment variable for a self-hosted application to access the token for authentication verification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport APP_API_TOKEN=<my-app-token>\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Resource Path in Python\nDESCRIPTION: Command to run a Python application with Dapr, specifying the application ID and the path to component resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- python3 app.py\n```\n\n----------------------------------------\n\nTITLE: Querying Data from PostgreSQL Database\nDESCRIPTION: This JSON request shows how to use the 'query' operation to select data from a PostgreSQL database. It includes a parameterized SQL query with a condition.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postgresql.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"query\",\n  \"metadata\": {\n    \"sql\": \"SELECT * FROM foo WHERE id < $1\",\n    \"params\": \"[3]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Launch for Multiple Dapr Apps\nDESCRIPTION: Example of a compound launch configuration in launch.json for debugging multiple Dapr applications simultaneously. This configuration allows launching both Node.js and Python Dapr applications in parallel.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-how-to-debug-multiple-dapr-apps.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"version\": \"2.0.0\",\n   \"configurations\": [...],\n   \"compounds\": [\n      {\n        \"name\": \"Node/Python Dapr\",\n        \"configurations\": [\"Nodeapp with Dapr\",\"Pythonapp with Dapr\"]\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Actor using cURL\nDESCRIPTION: Example of deactivating an actor using a cURL command. This snippet demonstrates how to make a DELETE request to deactivate a specific actor instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:3000/actors/stormtrooper/50 \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Running the Conversation Service with Dapr\nDESCRIPTION: Launches the conversation service using the Dapr CLI. The command specifies the application ID, resources path for components, and runs the Go application with Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id conversation --resources-path ../../../components/ -- go run .\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration via HTTP Request in Dapr\nDESCRIPTION: HTTP GET request format for retrieving configuration from a Dapr configuration store. This endpoint allows fetching either specific configuration items by key or all configuration items from a store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/<storename>\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job in Go\nDESCRIPTION: Configures a job schedule in Go for a database backup job. The job is set to run every second for a total of 10 repetitions, with custom job data about the database and backup location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    // ...\n    // Set up the job\n\tjob := daprc.Job{\n\t\tName:     \"prod-db-backup\",\n\t\tSchedule: \"@every 1s\",\n\t\tRepeats:  10,\n\t\tData: &anypb.Any{\n\t\t\tValue: jobData,\n\t\t},\n\t}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Retry Policies in Dapr Resiliency Specification\nDESCRIPTION: This YAML example demonstrates how to override Dapr's default service invocation retries using the reserved keyword 'DaprBuiltInServiceRetries', while also defining a custom 'retryForever' policy that applies specifically to the 'appB' target. The custom policy will retry indefinitely with exponential backoff.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/retries/override-default-retries.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  policies:\n    retries:\n      DaprBuiltInServiceRetries: # Overrides default retry behavior for service-to-service calls\n        policy: constant\n        duration: 5s\n        maxRetries: 10\n\n      retryForever: # A user defined retry policy replaces default retries. Targets rely solely on the applied policy. \n        policy: exponential\n        maxInterval: 15s\n        maxRetries: -1 # Retry indefinitely\n\n  targets:\n    apps:\n      appB: # app-id of the target service\n        retry: retryForever\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Query Examples\nDESCRIPTION: These SQL snippets illustrate the difference between a vulnerable query prone to SQL injection and a secure parameterized query. The secure version uses a placeholder ($1) for user input.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postgresql.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- ❌ WRONG! Includes values in the query and is vulnerable to SQL Injection attacks.\nSELECT * FROM mytable WHERE user_key = 'something';\n\n-- ✅ GOOD! Uses parametrized queries.\n-- This will be executed with parameters [\"something\"]\nSELECT * FROM mytable WHERE user_key = $1;\n```\n\n----------------------------------------\n\nTITLE: Advanced Prometheus Configuration for Dapr Service Discovery\nDESCRIPTION: A custom Prometheus values.yaml file for Kubernetes deployment that disables persistent volumes and adds service discovery configurations to automatically detect Dapr system components and sidecars.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  persistence:\n    enabled: false\npushgateway:\n  persistentVolume:\n    enabled: false\nserver:\n  persistentVolume:\n    enabled: false\n\n# Adds additional scrape configurations to prometheus.yml\n# Uses service discovery to find Dapr and Dapr sidecar targets\nextraScrapeConfigs: |-\n  - job_name: dapr-sidecars\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - action: keep\n        regex: \"true\"\n        source_labels:\n          - __meta_kubernetes_pod_annotation_dapr_io_enabled\n      - action: keep\n        regex: \"true\"\n        source_labels:\n          - __meta_kubernetes_pod_annotation_dapr_io_enable_metrics\n      - action: replace\n        replacement: ${1}\n        source_labels:\n          - __meta_kubernetes_namespace\n        target_label: namespace\n      - action: replace\n        replacement: ${1}\n        source_labels:\n          - __meta_kubernetes_pod_name\n        target_label: pod\n      - action: replace\n        regex: (.*);daprd\n        replacement: ${1}-dapr\n        source_labels:\n          - __meta_kubernetes_pod_annotation_dapr_io_app_id\n          - __meta_kubernetes_pod_container_name\n        target_label: service\n      - action: replace\n        replacement: ${1}:9090\n        source_labels:\n          - __meta_kubernetes_pod_ip\n        target_label: __address__\n\n  - job_name: dapr\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - action: keep\n        regex: dapr\n        source_labels:\n          - __meta_kubernetes_pod_label_app_kubernetes_io_name\n      - action: keep\n        regex: dapr\n        source_labels:\n          - __meta_kubernetes_pod_label_app_kubernetes_io_part_of\n      - action: replace\n        replacement: ${1}\n        source_labels:\n          - __meta_kubernetes_pod_label_app\n        target_label: app\n      - action: replace\n        replacement: ${1}\n        source_labels:\n          - __meta_kubernetes_namespace\n        target_label: namespace\n      - action: replace\n        replacement: ${1}\n        source_labels:\n          - __meta_kubernetes_pod_name\n        target_label: pod\n      - action: replace\n        replacement: ${1}:9090\n        source_labels:\n          - __meta_kubernetes_pod_ip\n        target_label: __address__\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Name/Value Secret Store\nDESCRIPTION: Example JSON response when retrieving a secret from a store with name/value semantics, such as HashiCorp Vault. The secret name is returned as the key in the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"db-secret\": \"value1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr Sidecar Logs in Kubernetes\nDESCRIPTION: Commands for viewing logs of the Dapr sidecar container in a Kubernetes pod. First find the pod with 'kubectl get pods' and then view the logs for the daprd container.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs addapp-74b57fb78c-67zm6 -c daprd\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes secret manifest for token rotation\nDESCRIPTION: This YAML definition creates a Kubernetes secret that stores the API token for Dapr authentication, useful for token rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: app-api-token\ntype: Opaque\ndata:\n  token: <your-new-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 with TLS in Dapr\nDESCRIPTION: YAML configuration showing how to set up MQTT3 pub/sub with TLS security, including certificate configuration. This demonstrates the secure way to connect to an MQTT broker.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt3.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-pubsub\nspec:\n  type: pubsub.mqtt3\n  version: v1\n  metadata:\n    - name: url\n      value: \"ssl://host.domain[:port]\"\n  # TLS configuration\n    - name: caCert\n      value: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n    - name: clientCert\n      value: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n    - name: clientKey\n      secretKeyRef:\n        name: myMqttClientKey\n        key: myMqttClientKey\n    # Optional\n    - name: retain\n      value: \"false\"\n    - name: cleanSession\n      value: \"false\"\n    - name: qos\n      value: 1\n```\n\n----------------------------------------\n\nTITLE: Updating GKE Firewall Rules\nDESCRIPTION: Command to update firewall rules to allow Kubernetes master access to port 4000, which is required for Dapr sidecar injection in private clusters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-gke.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute firewall-rules update <firewall-rule-name> --allow tcp:10250,tcp:443,tcp:4000\n```\n\n----------------------------------------\n\nTITLE: Publishing to RocketMQ Topic with Metadata in Dapr\nDESCRIPTION: This curl command demonstrates how to publish a message to a RocketMQ topic using Dapr's HTTP API. It includes metadata parameters for tag, key, sharding key, and queue selection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rocketmq.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myRocketMQ/myTopic?metadata.rocketmq-tag=?&metadata.rocketmq-key=?&metadata.rocketmq-shardingkey=key&metadata.rocketmq-queue=1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Name Resolution Component in Dapr\nDESCRIPTION: Example configuration for setting up a name resolution component in Dapr using SQLite with custom configuration options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration \nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"sqlite\"\n    version: \"v1\"\n    configuration:\n      connectionString: \"/home/user/.dapr/nr.db\"\n```\n\n----------------------------------------\n\nTITLE: Creating Process Instance by Definition Key in Zeebe\nDESCRIPTION: Creates a new process instance using process definition key with specified variables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"processDefinitionKey\": 2251799813685895,\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"create-instance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a File from GCP Storage Bucket using JSON\nDESCRIPTION: This JSON structure illustrates how to delete a file from a GCP Storage Bucket. It specifies the delete operation and the file key in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Actor State Store Configuration in YAML\nDESCRIPTION: Configuration snippet for enabling MongoDB as an actor state store by adding the actorStateStore metadata field.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mongodb.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager Configuration Example\nDESCRIPTION: Specific example of configuring AWS Secrets Manager as a secret store in Dapr, including required AWS-specific configuration fields like region, access key, secret key, and session token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-secret-store.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: awssecretmanager\nspec:\n  type: secretstores.aws.secretmanager\n  version: v1\n  metadata:\n  - name: region\n    value: \"[aws_region]\"\n  - name: accessKey\n    value: \"[aws_access_key]\"\n  - name: secretKey\n    value: \"[aws_secret_key]\"\n  - name: sessionToken\n    value: \"[aws_session_token]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reminder Partitioning in Java\nDESCRIPTION: Configures actor runtime properties in Java including reminder storage partitions, actor idle timeout, and actor scan interval using the ActorRuntime singleton instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// import io.dapr.actors.runtime.ActorRuntime;\n// import java.time.Duration;\n\nActorRuntime.getInstance().getConfig().setActorIdleTimeout(Duration.ofMinutes(60));\nActorRuntime.getInstance().getConfig().setActorScanInterval(Duration.ofSeconds(30));\nActorRuntime.getInstance().getConfig().setRemindersStoragePartitions(7);\n```\n\n----------------------------------------\n\nTITLE: Modified CloudEvent JSON After Property Override\nDESCRIPTION: JSON output showing how the CloudEvent structure changes after overriding the 'id' and 'source' properties using the metadata approach. The CloudEvent now reflects the custom values while maintaining the Dapr-generated fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"orders\",\n  \"pubsubname\": \"order_pub_sub\",\n  \"traceid\": \"00-113ad9c4e42b27583ae98ba698d54255-e3743e35ff56f219-01\",\n  \"tracestate\": \"\",\n  \"data\": {\n    \"orderId\": 1\n  },\n  \"id\": \"d99b228f-6c73-4e78-8c4d-3f80a043d317\",\n  \"specversion\": \"1.0\",\n  \"datacontenttype\": \"application/json; charset=utf-8\",\n  \"source\": \"payment\",\n  \"type\": \"com.dapr.event.sent\",\n  \"time\": \"2020-09-23T06:23:21Z\",\n  \"traceparent\": \"00-113ad9c4e42b27583ae98ba698d54255-e3743e35ff56f219-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hazelcast State Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up a Hazelcast state store component in Dapr. Requires hazelcastServers (comma-delimited list of servers) and hazelcastMap (map configuration) to be specified in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-hazelcast.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.hazelcast\n  version: v1\n  metadata:\n  - name: hazelcastServers\n    value: <REPLACE-WITH-HOSTS> # Required. A comma delimited string of servers. Example: \"hazelcast:3000,hazelcast2:3000\"\n  - name: hazelcastMap\n    value: <REPLACE-WITH-MAP> # Required. Hazelcast map configuration.\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure KeyVault Component with User-Assigned Identity\nDESCRIPTION: This YAML configuration shows how to set up an Azure KeyVault component using user-assigned identity. It includes the azureClientId property to specify the user-assigned identity ID along with the vault name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-mi.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: mykeyvault\n  - name: azureClientId\n    value: someAzureIdentityClientIDHere\n```\n\n----------------------------------------\n\nTITLE: Multi-App Run Configuration in YAML\nDESCRIPTION: Dapr multi-app configuration file that defines the order processor and checkout services with their respective settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appID: order-processor-sdk\n    appDirPath: ./order-processor/\n    appPort: 6001\n    command: [\"uvicorn\", \"app:app\"]\n  - appID: checkout-sdk\n    appDirPath: ./checkout/\n    command: [\"python3\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS for Dapr Control Plane in YAML\nDESCRIPTION: This YAML configuration enables mutual TLS (mTLS) for the Dapr control plane system services. It sets a workload certificate TTL of 24 hours and allows for a clock skew of 15 minutes. The configuration is named 'daprsystem' and is applied in the 'dapr-system' namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/configuration-concept.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: dapr-system\nspec:\n  mtls:\n    enabled: true\n    workloadCertTTL: \"24h\"\n    allowedClockSkew: \"15m\"\n```\n\n----------------------------------------\n\nTITLE: Creating Blob with JSON Payload\nDESCRIPTION: JSON structure for creating a blob in Azure Blob Storage using the binding API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Storing State with Composite Key in OCI Object Storage using Dapr API\nDESCRIPTION: This curl command shows how to store a key-value pair with a composite key in the OCI Object Storage state store. It uses the Dapr API to store the value 'darth' with the composite key 'myApplication||nihilus', which will be mapped to a directory structure in OCI Object Storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oci-objectstorage.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"myApplication||nihilus\",\n          \"value\": \"darth\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Multiple Service Call Pattern Example\nDESCRIPTION: Example showing the pattern of multiple service calls from a single service where trace headers need to be propagated between services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/tracing-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nservice A -> service B\n[ .. some code logic ..]\nservice A -> service C\n[ .. some code logic ..]\nservice A -> service D\n[ .. some code logic ..]\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task for Dapr Debugging\nDESCRIPTION: This JSON snippet represents a VS Code task configuration for debugging a Dapr application. It includes steps to run the Dapr sidecar and the application itself.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-dapr-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"daprd-debug\",\n      \"type\": \"daprd\",\n      \"appId\": \"myapp\",\n      \"appPort\": 5000,\n      \"grpcPort\": 50001,\n      \"metricsPort\": 9091,\n      \"httpPort\": 3501\n    },\n    {\n      \"label\": \"app-debug\",\n      \"type\": \"process\",\n      \"command\": \"dotnet\",\n      \"args\": [\"run\"],\n      \"dependsOn\": [\"daprd-debug\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Insert Operation with MySQL Binding\nDESCRIPTION: JSON request for executing an SQL INSERT operation using the MySQL binding. It demonstrates the use of parameterized queries for security.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"exec\",\n  \"metadata\": {\n    \"sql\": \"INSERT INTO foo (id, c1, ts) VALUES (?, ?, ?)\",\n    \"params\": \"[1, \\\"demo\\\", \\\"2020-09-24T11:45:05Z07:00\\\"]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Pub/Sub Component with Dynamic Consumer IDs\nDESCRIPTION: A Dapr component configuration for Kafka pub/sub that uses the {podName} marker to create unique consumer IDs for each pod. This allows each StatefulSet pod to have its own position in the Kafka topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-subscribe-statefulset.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092\n  - name: consumerID\n    value: \"{podName}\"\n  - name: authRequired\n    value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Table in PostgreSQL\nDESCRIPTION: SQL command to create a table for storing configuration data with key, value, version and metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS table_name (\n  KEY VARCHAR NOT NULL,\n  VALUE VARCHAR NOT NULL,\n  VERSION VARCHAR NOT NULL,\n  METADATA JSON\n);\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration for Dapr and Event Grid Integration\nDESCRIPTION: YAML configuration defining a Service, Ingress, and Deployment for a .NET Core Web API with Dapr and Event Grid integration. Includes TLS configuration and Dapr annotations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# dotnetwebapi.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: dotnetwebapi\n  labels:\n    app: dotnetwebapi\nspec:\n  selector:\n    app: dotnetwebapi\n  ports:\n    - name: webapi\n      protocol: TCP\n      port: 80\n      targetPort: 80\n    - name: dapr-eventgrid\n      protocol: TCP\n      port: 9000\n      targetPort: 9000\n  type: ClusterIP\n\n---\n  apiVersion: extensions/v1beta1\n  kind: Ingress\n  metadata:\n    name: eventgrid-input-rule\n    annotations:\n      kubernetes.io/ingress.class: nginx\n      cert-manager.io/cluster-issuer: letsencrypt\n  spec:\n    tls:\n      - hosts:\n        - dapr.<your custom domain>\n        secretName: dapr-tls\n    rules:\n      - host: dapr.<your custom domain>\n        http:\n          paths:\n            - path: /api/events\n              backend:\n                serviceName: dotnetwebapi\n                servicePort: 9000\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dotnetwebapi\n  labels:\n    app: dotnetwebapi\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dotnetwebapi\n  template:\n    metadata:\n      labels:\n        app: dotnetwebapi\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"dotnetwebapi\"\n        dapr.io/app-port: \"5000\"\n    spec:\n      containers:\n      - name: webapi\n        image: <your container image>\n        ports:\n        - containerPort: 5000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Dapr Tracing Configuration\nDESCRIPTION: YAML configuration for setting up distributed tracing in Dapr, including sampling rate and endpoints for OpenTelemetry and Zipkin.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n  samplingRate: \"1\"\n  otel: \n    endpointAddress: \"otelcollector.observability.svc.cluster.local:4317\"\n  zipkin:\n    endpointAddress: \"http://zipkin.default.svc.cluster.local:9411/api/v2/spans\"\n```\n\n----------------------------------------\n\nTITLE: Failing a Job with Zeebe Command Binding in JSON\nDESCRIPTION: This snippet shows how to mark a job as failed using the Zeebe command binding. It includes parameters for job key, retries, error message, retry back-off, and variables to be set.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"jobKey\": 2251799813685739,\n    \"retries\": 5,\n    \"errorMessage\": \"some error occurred\",\n    \"retryBackOff\": \"30s\",\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"fail-job\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-App Run Template for Self-hosted Environment in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Multi-App Run template file for running multiple applications in a self-hosted environment. It includes configuration for two apps with custom ports and environment variables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napps:\n  - appID: processor\n    appDirPath: ../apps/processor/\n    appPort: 9081\n    daprHTTPPort: 3510\n    command: [\"go\",\"run\", \"app.go\"]\n  - appID: emit-metrics\n    appDirPath: ../apps/emit-metrics/\n    daprHTTPPort: 3511\n    env:\n      DAPR_HOST_ADD: localhost\n    command: [\"go\",\"run\", \"app.go\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring RethinkDB StateChange Binding in YAML\nDESCRIPTION: This YAML configuration sets up a RethinkDB statechange binding component for Dapr. It specifies the component type, version, and required metadata fields including the RethinkDB server address, database name, and binding direction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/rethinkdb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: changes\nspec:\n  type: bindings.rethinkdb.statechange\n  version: v1\n  metadata:\n  - name: address\n    value: \"<REPLACE-RETHINKDB-ADDRESS>\" # Required, e.g. 127.0.0.1:28015 or rethinkdb.default.svc.cluster.local:28015).\n  - name: database\n    value: \"<REPLACE-RETHINKDB-DB-NAME>\" # Required, e.g. dapr (alpha-numerics only)\n  - name: direction \n    value: \"<DIRECTION-OF-RETHINKDB-BINDING>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Based Access Denial\nDESCRIPTION: YAML configuration allowing access to all methods except specific path patterns for a particular app\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: allow\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: allow\n      trustDomain: 'public'\n      namespace: \"default\"\n      operations:\n      - name: /op1/*\n        httpVerb: ['*']\n        action: deny\n```\n\n----------------------------------------\n\nTITLE: Complete Dapr Resiliency Configuration Example\nDESCRIPTION: Comprehensive example of a Dapr resiliency configuration showing timeout policies, retry strategies, circuit breaker configurations, and their application to different targets including apps, actors, and components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/resiliency-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - app1\n  - app2\nspec:\n  policies:\n    timeouts:\n      general: 5s\n      important: 60s\n      largeResponse: 10s\n\n    retries:\n      pubsubRetry:\n        policy: constant\n        duration: 5s\n        maxRetries: 10\n\n      retryForever:\n        policy: exponential\n        maxInterval: 15s\n        maxRetries: -1\n\n      important:\n        policy: constant\n        duration: 5s\n        maxRetries: 30\n\n      someOperation:\n        policy: exponential\n        maxInterval: 15s\n\n      largeResponse:\n        policy: constant\n        duration: 5s\n        maxRetries: 3\n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 30s \n        trip: consecutiveFailures >= 5\n\n      pubsubCB:\n        maxRequests: 1\n        interval: 8s\n        timeout: 45s\n        trip: consecutiveFailures > 8\n\n  targets:\n    apps:\n      appB:\n        timeout: general\n        retry: important\n        circuitBreaker: simpleCB\n\n    actors:\n      myActorType:\n        timeout: general\n        retry: important\n        circuitBreaker: simpleCB\n        circuitBreakerScope: both\n        circuitBreakerCacheSize: 5000\n\n    components:\n      statestore1:\n        outbound:\n          timeout: general\n          retry: retryForever\n          circuitBreaker: simpleCB\n\n      pubsub1:\n        outbound:\n          retry: pubsubRetry\n          circuitBreaker: pubsubCB\n\n      pubsub2:\n        outbound:\n          retry: pubsubRetry\n          circuitBreaker: pubsubCB\n        inbound:\n          timeout: general\n          retry: important\n          circuitBreaker: pubsubCB\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding Configuration for File Upload\nDESCRIPTION: YAML configuration for enabling base64 decoding when uploading files to Azure Blob Storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.blobstorage\n  version: v1\n  metadata:\n  - name: accountName\n    value: myStorageAccountName\n  - name: accountKey\n    value: ***********\n  - name: containerName\n    value: container1\n  - name: decodeBase64\n    value: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameterized SQL Queries\nDESCRIPTION: SQL examples showing the correct use of parameterized queries to prevent SQL injection attacks, contrasted with an unsafe query.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mysql.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- ❌ WRONG! Includes values in the query and is vulnerable to SQL Injection attacks.\nSELECT * FROM mytable WHERE user_key = 'something';\n\n-- ✅ GOOD! Uses parametrized queries.\n-- This will be executed with parameters [\"something\"]\nSELECT * FROM mytable WHERE user_key = ?;\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar with Basic Application ID\nDESCRIPTION: Starts a Dapr sidecar process alongside an application by specifying its unique ID. The app-id is a required field and cannot contain dots.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp\n```\n\n----------------------------------------\n\nTITLE: APNS Push Notification Request Format\nDESCRIPTION: JSON structure for sending push notifications through the APNS binding, including notification content and required metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/apns.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"aps\": {\n            \"alert\": {\n                \"title\": \"New Updates!\",\n                \"body\": \"There are new updates for your review\"\n            }\n        }\n    },\n    \"metadata\": {\n        \"device-token\": \"PUT-DEVICE-TOKEN-HERE\",\n        \"apns-push-type\": \"alert\",\n        \"apns-priority\": \"10\",\n        \"apns-topic\": \"com.example.helloworld\"\n    },\n    \"operation\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data in Redis State Store\nDESCRIPTION: Example JSON query to find employees in California, sorted by employee ID in descending order.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": {\n        \"EQ\": { \"state\": \"CA\" }\n    },\n    \"sort\": [\n        {\n            \"key\": \"person.id\",\n            \"order\": \"DESC\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Running Dapr Applications in Standalone Mode\nDESCRIPTION: Command to list all running Dapr applications in standalone mode. This shows APP ID, ports, commands, age, creation time, and PID for each application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr list\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Dapr Binding Component in YAML\nDESCRIPTION: Basic YAML configuration template for setting up a Dapr binding component. Defines the component name, namespace, type, version and metadata fields required for binding configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  type: bindings.<NAME>\n  version: v1\n  metadata:\n  - name: <KEY>\n    value: <VALUE>\n  - name: <KEY>\n    value: <VALUE>\n...\n```\n\n----------------------------------------\n\nTITLE: Topic Exchange Subscription Configuration\nDESCRIPTION: YAML configuration for setting up topic exchange subscription with routing key and queue name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: orderspubsub\nspec:\n  topic: B\n  routes: \n    default: /B\n  pubsubname: pubsub\n  metadata:\n    routingKey: keyA\n    queueName: queue-A\n```\n\n----------------------------------------\n\nTITLE: Redis Component with Secret Reference\nDESCRIPTION: Example of a Redis state store component configuration using a secret reference with an embedded key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    secretKeyRef:\n      name: redis-secret\n      key:  redis-password\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Defining Job Data Types in .NET\nDESCRIPTION: Defines C# record types to represent job data with custom JSON property names for consistent serialization across language examples. These types store information about the database backup task including database name and backup location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/jobs/howto-schedule-and-handle-triggered-jobs.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//Define the types that we'll represent the job data with\ninternal sealed record BackupJobData([property: JsonPropertyName(\"task\")] string Task, [property: JsonPropertyName(\"metadata\")] BackupMetadata Metadata);\ninternal sealed record BackupMetadata([property: JsonPropertyName(\"DBName\")]string DatabaseName, [property: JsonPropertyName(\"BackupLocation\")] string BackupLocation);\n```\n\n----------------------------------------\n\nTITLE: Running Java Subscriber Service with Dapr\nDESCRIPTION: This Bash command runs a Java order processor service with Dapr. It specifies the application port, application ID, and resources path for components for the subscriber service that will receive published messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 8080 --app-id order-processor --resources-path ../../../components -- java -jar target/OrderProcessingService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Binding in YAML\nDESCRIPTION: Specific example of configuring an Azure Blob Storage binding in Dapr, including required fields like storage account, access key, container name, and optional settings for base64 decoding and retry counts.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.blobstorage\n  version: v1\n  metadata:\n  - name: storageAccount\n    value: myStorageAccountName\n  - name: storageAccessKey\n    value: ***********\n  - name: container\n    value: container1\n  - name: decodeBase64\n    value: <bool>\n  - name: getBlobRetryCount\n    value: <integer>\n```\n\n----------------------------------------\n\nTITLE: Setting up Etcd with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up a local Etcd instance for development or testing purposes. It configures a single-node Etcd server that listens on port 2379.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-etcd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  etcd:\n    image: gcr.io/etcd-development/etcd:v3.4.20\n    ports:\n      - \"2379:2379\"\n    command: etcd --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Partition Key using cURL\nDESCRIPTION: Example of publishing a message to Kafka topic with partition key using HTTP API\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/publish/myKafka/myTopic?metadata.partitionKey=key1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar for Node.js App with mTLS\nDESCRIPTION: Command to run the Dapr sidecar (daprd) for a Node.js application with mTLS enabled. Configures ports, app ID, and points to the Sentry service for certificate management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id nodeapp --dapr-grpc-port 50002 -dapr-http-port 3501 --log-level debug --app-port 3000 --enable-mtls --sentry-address localhost:50001 --config nodeappconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker State Transition Logs\nDESCRIPTION: Log output showing the circuit breaker transitioning between half-open and open states as it tests whether the service has recovered while continuing to fail.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nINFO[0030] Circuit breaker \"order-processor:orders\" changed state from open to half-open  \nINFO[0030] Circuit breaker \"order-processor:orders\" changed state from half-open to open   \nINFO[0030] Circuit breaker \"order-processor:orders\" changed state from open to half-open  \nINFO[0030] Circuit breaker \"order-processor:orders\" changed state from half-open to open     \n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secrets Manager Component in Dapr\nDESCRIPTION: YAML configuration for setting up AWS Secrets Manager as a secret store in Dapr. Includes required fields for AWS authentication and region specification. The component type is 'secretstores.aws.secretmanager' with version v1.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/aws-secret-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: awssecretmanager\nspec:\n  type: secretstores.aws.secretmanager\n  version: v1\n  metadata:\n  - name: region\n    value: \"[aws_region]\"\n  - name: accessKey\n    value: \"[aws_access_key]\"\n  - name: secretKey\n    value: \"[aws_secret_key]\"\n  - name: sessionToken\n    value: \"[aws_session_token]\"\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure using Azure CLI\nDESCRIPTION: Commands to log into Azure and set the subscription using Azure CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\naz login\naz account set -s [your subscription id]\n```\n\n----------------------------------------\n\nTITLE: Creating a NATS JetStream for a Subject\nDESCRIPTION: Command to create a JetStream for a specific subject using the NATS CLI. This example creates a stream called 'myStream' that will handle the 'mySubject' topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnats -s localhost:4222 stream add myStream --subjects mySubject\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr SDK in .NET\nDESCRIPTION: This snippet demonstrates how to delete state using the Dapr SDK in a .NET application. It uses the DaprClient to delete a state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing Dapr.Client;\n\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string DAPR_STORE_NAME = \"statestore\";\n            //Using Dapr SDK to delete the state\n            using var client = new DaprClientBuilder().Build();\n            await client.DeleteStateAsync(DAPR_STORE_NAME, \"order_1\", cancellationToken: cancellationToken);\n        }\n    }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Resource Path in JavaScript\nDESCRIPTION: Command to run a JavaScript application with Dapr, specifying the application ID and the path to component resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring In-memory Pub/Sub Component in Dapr\nDESCRIPTION: This YAML configuration defines the in-memory pub/sub component for Dapr. It specifies the component type, version, and an empty metadata field. This component operates within a single Dapr sidecar and is primarily used for development purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-inmemory.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.in-memory\n  version: v1\n  metadata: []\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Multiple Keys in a Secret\nDESCRIPTION: Example JSON response when retrieving a secret from a store that supports multiple key-values in a single secret, such as Kubernetes. The response contains multiple key-value pairs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Prometheus Services\nDESCRIPTION: Command to list all services in the dapr-monitoring namespace to get the Prometheus server endpoint\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/grafana.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Invoking Secure Binding on Windows\nDESCRIPTION: Curl command to invoke a secure Dapr binding on Windows. This command sends a GET operation to the specified binding using HTTPS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"get\\\" }\" \\\n      https://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr StatefulSet for Python Subscriber\nDESCRIPTION: A Kubernetes StatefulSet configuration that deploys a Python subscriber application with Dapr. It creates 3 replicas of the subscriber with sticky identity, allowing for consistent message consumption.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-subscribe-statefulset.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: python-subscriber\nspec:\n  selector:\n    matchLabels:\n      app: python-subscriber  # has to match .spec.template.metadata.labels\n  serviceName: \"python-subscriber\"\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: python-subscriber # has to match .spec.selector.matchLabels\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"python-subscriber\"\n        dapr.io/app-port: \"5001\"\n    spec:\n      containers:\n      - name: python-subscriber\n        image: ghcr.io/dapr/samples/pubsub-python-subscriber:latest\n        ports:\n        - containerPort: 5001\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud SLS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an Alibaba Cloud SLS binding component with required credentials and endpoint information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudsls.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: alicloud.sls\nspec:\n  type: bindings.alicloud.sls\n  version: v1\n  metadata:\n  - name: AccessKeyID\n    value: \"[accessKey-id]\"\n  - name: AccessKeySecret\n    value: \"[accessKey-secret]\"\n  - name: Endpoint\n    value: \"[endpoint]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Body Size in Kubernetes Deployment\nDESCRIPTION: Kubernetes deployment YAML configuration that sets the HTTP request body size limit to 16MB using Dapr annotations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/increase-request-size.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/http-max-request-size: \"16\"\n#...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dapr Ports in launch.json\nDESCRIPTION: Example of setting custom HTTP and gRPC ports for Dapr in the launch.json configuration. This allows for using non-default ports in the debugging setup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-how-to-debug-multiple-dapr-apps.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n      \"DAPR_HTTP_PORT\": \"3502\",\n      \"DAPR_GRPC_PORT\": \"50002\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up the HTTP binding component with HTTPS support. Demonstrates how to specify an HTTPS URL in the binding configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  type: bindings.http\n  version: v1\n  metadata:\n  - name: url\n    value: https://my-secured-website.com # Use HTTPS\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Component with Plain Text Secret\nDESCRIPTION: Example of a Redis state store component configuration using plain text password (not recommended for production).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: MyPassword\n```\n\n----------------------------------------\n\nTITLE: Running a Dapr Application with Default Tracing Configuration\nDESCRIPTION: Command to launch a Node.js application with Dapr using the default configuration which includes Zipkin tracing settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id mynode --app-port 3000 node app.js\n```\n\n----------------------------------------\n\nTITLE: Defining Declarative Subscription in YAML\nDESCRIPTION: This YAML configuration defines a declarative subscription named 'order' that subscribes to the 'orders' topic via a pub/sub component called 'pubsub'. It routes messages to the '/orders' endpoint and is scoped to the 'orderprocessing' application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order\nspec:\n  topic: orders\n  routes:\n    default: /orders\n  pubsubname: pubsub\nscopes:\n- orderprocessing\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Using cURL\nDESCRIPTION: Example of how to perform a query operation against InfluxDB binding using cURL. Shows the required HTTP POST request format with query metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/influxdb.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myInfluxBinding \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n        \\\"metadata\\\": {\n          \\\"raw\\\": \\\"SELECT * FROM 'sith_lords'\\\"\n        },\n        \\\"operation\\\": \\\"query\\\"\n      }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr for OpenTelemetry Tracing\nDESCRIPTION: A complete Kubernetes configuration object example that enables tracing with a 100% sampling rate and sends traces to an OpenTelemetry server using gRPC protocol.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/setup-tracing.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: tracing\nspec:\n  tracing:\n    samplingRate: \"1\"\n    otel:\n      endpointAddress: \"localhost:4317\"\n      isSecure: false\n      protocol: grpc \n```\n\n----------------------------------------\n\nTITLE: Creating a File in GCP Storage Bucket using JSON\nDESCRIPTION: This JSON structure demonstrates how to create a file in a GCP Storage Bucket using the binding. It specifies the operation type and the file content.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Message in Zeebe\nDESCRIPTION: Publishes a message with correlation key, time-to-live, and variables for message correlation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"messageName\": \"product-message\",\n    \"correlationKey\": \"2\",\n    \"timeToLive\": \"1m\",\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },  \n  \"operation\": \"publish-message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SNS/SQS Pubsub Component in Dapr\nDESCRIPTION: A YAML configuration template for setting up the AWS SNS/SQS pubsub component in Dapr. The component automatically generates SNS topics, provisions SQS queues, and configures subscriptions. Various optional parameters allow for customization of behavior including FIFO queues, message retry limits, and concurrency settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: snssqs-pubsub\nspec:\n  type: pubsub.aws.snssqs\n  version: v1\n  metadata:\n    - name: accessKey\n      value: \"AKIAIOSFODNN7EXAMPLE\"\n    - name: secretKey\n      value: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    - name: region\n      value: \"us-east-1\"\n    # - name: consumerID # Optional. If not supplied, runtime will create one.\n    #   value: \"channel1\"\n    # - name: endpoint # Optional. \n    #   value: \"http://localhost:4566\"\n    # - name: sessionToken  # Optional (mandatory if using AssignedRole; for example, temporary accessKey and secretKey)\n    #   value: \"TOKEN\"\n    # - name: messageVisibilityTimeout # Optional\n    #   value: 10\n    # - name: messageRetryLimit # Optional\n    #   value: 10\n    # - name: messageReceiveLimit # Optional\n    #   value: 10\n    # - name: sqsDeadLettersQueueName # Optional\n    # - value: \"myapp-dlq\"\n    # - name: messageWaitTimeSeconds # Optional\n    #   value: 1\n    # - name: messageMaxNumber # Optional\n    #   value: 10\n    # - name: fifo # Optional\n    #   value: \"true\"\n    # - name: fifoMessageGroupID # Optional\n    #   value: \"app1-mgi\"\n    # - name: disableEntityManagement # Optional\n    #   value: \"false\"\n    # - name: disableDeleteOnRetryLimit # Optional\n    #   value: \"false\"\n    # - name: assetsManagementTimeoutSeconds # Optional\n    #   value: 5\n    # - name: concurrencyMode # Optional\n    #   value: \"single\"\n    # - name: concurrencyLimit # Optional\n    #   value: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Metadata Configuration\nDESCRIPTION: JSON schema for configuring blob metadata when publishing to Azure Blob Storage, including content properties and custom metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": \"file content\",\n    \"metadata\": {\n        \"blobName\"           : \"filename.txt\",\n        \"contentType\"        : \"text/plain\",\n        \"contentMD5\"         : \"vZGKbMRDAnMs4BIwlXaRvQ==\",\n        \"contentEncoding\"    : \"UTF-8\",\n        \"contentLanguage\"    : \"en-us\",\n        \"contentDisposition\" : \"attachment\",\n        \"cacheControl\"       : \"no-cache\",\n        \"custom\"             : \"hello-world\"\n    },\n    \"operation\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault with Certificate (Kubernetes)\nDESCRIPTION: YAML configuration for setting up Azure Key Vault secret store component in Kubernetes using certificate authentication. References a certificate stored in Kubernetes secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\n  namespace: default\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureCertificate\n    secretKeyRef:\n      name: \"[your_k8s_secret_name]\"\n      key: \"[your_k8s_secret_key]\"\nauth:\n  secretStore: kubernetes\n```\n\n----------------------------------------\n\nTITLE: Listing Files in GCP Storage Bucket using JSON\nDESCRIPTION: This JSON structure demonstrates how to list files in a GCP Storage Bucket. It includes optional parameters for filtering and limiting results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"data\": {\n    \"maxResults\": 10,\n    \"prefix\": \"file\",\n    \"delimiter\": \"i0FvxAn2EOEL6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Subscription in Go\nDESCRIPTION: Go code that defines a subscription structure and an event handler function to process messages from the 'orders' topic. The subscription structure specifies the same route defined in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n//Subscribe to a topic\nvar sub = &common.Subscription{\n\tPubsubName: \"pubsub\",\n\tTopic:      \"orders\",\n\tRoute:      \"/orders\",\n}\n\nfunc eventHandler(ctx context.Context, e *common.TopicEvent) (retry bool, err error) {\n\tlog.Printf(\"Subscriber received: %s\", e.Data)\n\treturn false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Dapr Sidecar Configuration Example\nDESCRIPTION: This YAML configuration demonstrates a complete example of a Dapr sidecar configuration. It includes settings for tracing, HTTP pipeline handlers, secrets management, component restrictions, and access control policies.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    stdout: true\n    otel:\n      endpointAddress: \"localhost:4317\"\n      isSecure: false\n      protocol: \"grpc\"\n  httpPipeline:\n    handlers:\n      - name: oauth2\n        type: middleware.http.oauth2\n  secrets:\n    scopes:\n      - storeName: localstore\n        defaultAccess: allow\n        deniedSecrets: [\"redis-password\"]\n  components:\n    deny:\n      - bindings.smtp\n      - secretstores.local.file\n  accessControl:\n    defaultAction: deny\n    trustDomain: \"public\"\n    policies:\n      - appId: app1\n        defaultAction: deny\n        trustDomain: 'public'\n        namespace: \"default\"\n        operations:\n          - name: /op1\n            httpVerb: ['POST', 'GET']\n            action: deny\n          - name: /op2/*\n            httpVerb: [\"*\"]\n            action: allow\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Conversation Services\nDESCRIPTION: Command line instructions for running the Dapr conversation services with different programming languages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id conversation --dapr-grpc-port 50001 --log-level debug --resources-path ./config -- dotnet run\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id conversation --dapr-grpc-port 50001 --log-level debug --resources-path ./config -- go run ./main.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id=conversation --resources-path ./config --dapr-grpc-port 3500 -- cargo run --example conversation\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTelemetry Collector Configuration for App Insights\nDESCRIPTION: Command to apply the OpenTelemetry Collector configuration YAML file to your Kubernetes cluster. This sets up the collector to send traces to Azure Application Insights.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-appinsights.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f open-telemetry-collector-appinsights.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Code Metrics in Configuration\nDESCRIPTION: A Dapr Configuration resource that enables additional metrics for Dapr API error codes. This configuration enables both standard metrics and error code tracking by setting recordErrorCodes to true.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: tracing\n  namespace: default\nspec:\n  metrics:\n    enabled: true\n    recordErrorCodes: true\n```\n\n----------------------------------------\n\nTITLE: Completing a Job with Zeebe Command Binding in JSON\nDESCRIPTION: This snippet illustrates how to complete a job using the Zeebe command binding. It requires the job key and allows for specifying variables to be set in the current task scope.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"jobKey\": 2251799813686172,\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"complete-job\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Timer with Limited Invocations\nDESCRIPTION: JSON request body for configuring a timer with a period of 3 seconds and limiting the number of invocations to 10.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"period\":\"R10/PT3S\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NATS JetStream on Kubernetes with Helm\nDESCRIPTION: Commands to install NATS JetStream on Kubernetes using Helm. This adds the NATS helm repository and installs NATS with JetStream enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add nats https://nats-io.github.io/k8s/helm/charts/\nhelm install --set nats.jetstream.enabled=true my-nats nats/nats\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics via Configuration\nDESCRIPTION: A Dapr Configuration resource that disables metrics collection for Dapr sidecars by default. This is done by setting the spec.metrics.enabled property to false.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: tracing\n  namespace: default\nspec:\n  metrics:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Failed State Update with Incorrect ETag\nDESCRIPTION: Example of a failed state update attempt using an incorrect ETag value, demonstrating Dapr's optimistic concurrency control.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/statestore \\\n    -H \"Content-Type: application/json\" \\\n    -d '[\n            {\n                \"key\": \"sampleData\",\n                \"value\": \"2\",\n                \"etag\": \"2\"\n            }\n    ]'\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Name Resolution in Dapr\nDESCRIPTION: Basic example of a Dapr Configuration resource for setting up SQLite name resolution. Demonstrates the minimal required configuration including the component specification and connection string.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-name-resolution/nr-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"sqlite\"\n    version: \"v1\"\n    configuration:\n      connectionString: \"/home/user/.dapr/nr.db\"\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions using HTTP API (PowerShell)\nDESCRIPTION: Example of performing state transactions using direct HTTP API calls with Invoke-RestMethod in PowerShell. Shows how to execute transactions and retrieve results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '{\"operations\": [{\"operation\":\"upsert\", \"request\": {\"key\": \"order_1\", \"value\": \"250\"}}, {\"operation\":\"delete\", \"request\": {\"key\": \"order_2\"}}]}' -Uri 'http://localhost:3601/v1.0/state/statestore/transaction'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '{\"keys\":[\"order_1\", \"order_2\"]}' -Uri 'http://localhost:3601/v1.0/state/statestore/bulk'\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration for gRPC Application with Dapr\nDESCRIPTION: YAML configuration for deploying a gRPC application to Kubernetes with Dapr annotations. This configuration enables Dapr, specifies app ID, sets the protocol to gRPC, and configures the application port.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grpc-app\n  namespace: default\n  labels:\n    app: grpc-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grpc-app\n  template:\n    metadata:\n      labels:\n        app: grpc-app\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"server\"\n        dapr.io/app-protocol: \"grpc\"\n        dapr.io/app-port: \"50051\"\n...\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar for Python App with mTLS\nDESCRIPTION: Command to run the Dapr sidecar (daprd) for a Python application with mTLS enabled. Configures ports, app ID, and points to the Sentry service for certificate management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id pythonapp   --dapr-grpc-port 50003 --metrics-port 9092 --log-level debug --enable-mtls --sentry-address localhost:50001 --config pythonappconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Order Processor Service with Dapr in Python\nDESCRIPTION: This command runs the 'order-processor' Python service with a Dapr sidecar, specifying various configuration options like app port, ID, and resources path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 8001 --app-id order-processor --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3501 -- python3 app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Secrets Component in YAML\nDESCRIPTION: Basic configuration structure for the Kubernetes Secrets cryptography component in Dapr. Defines the component type, version, and metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-cryptography/kubernetes-secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: crypto.dapr.kubernetes.secrets\n  version: v1\n  metadata:[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-App Run in YAML for Dapr (Go version)\nDESCRIPTION: This YAML configuration sets up a multi-app run environment for Dapr, specifically for a Go application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appDirPath: ./conversation/\n    appID: conversation\n    daprHTTPPort: 3501\n    command: [\"go\", \"run\", \".\"]\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Creating Object with Specific Key in Linux/MacOS\nDESCRIPTION: This bash command shows how to use curl to create an object in Alibaba Cloud OSS with a specific key on Linux or MacOS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\", \"metadata\": { \"key\": \"my-key\" } }' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes using Helm\nDESCRIPTION: Commands to add the Bitnami Helm repository and install Redis 6.2 on a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install redis bitnami/redis --set image.tag=6.2\n```\n\n----------------------------------------\n\nTITLE: Self-Hosted Dapr Installation\nDESCRIPTION: Install Dapr in self-hosted mode with default settings pulling container images from Docker Hub\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr init\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Mock LLM Component in YAML\nDESCRIPTION: YAML configuration for the echo mock LLM component used in the conversation quickstart. This component echoes back the input message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: echo\nspec:\n  type: conversation.echo\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an SMTP binding component in Dapr. Includes required and optional metadata fields for SMTP server connection and email settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/smtp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: smtp\nspec:\n  type: bindings.smtp\n  version: v1\n  metadata:\n  - name: host\n    value: \"smtp host\"\n  - name: port\n    value: \"smtp port\"\n  - name: user\n    value: \"username\"\n  - name: password\n    value: \"password\"\n  - name: skipTLSVerify\n    value: true|false\n  - name: emailFrom\n    value: \"sender@example.com\"\n  - name: emailTo\n    value: \"receiver@example.com\"\n  - name: emailCC\n    value: \"cc@example.com\"\n  - name: emailBCC\n    value: \"bcc@example.com\"\n  - name: subject\n    value: \"subject\"\n  - name: priority\n    value: \"[value 1-5]\"\n```\n\n----------------------------------------\n\nTITLE: Saving Text to Specific File with cURL (Linux)\nDESCRIPTION: cURL command for Linux to save text content to a specific file using the Local Storage binding. Demonstrates using metadata to specify the filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\", \"metadata\": { \"fileName\": \"my-test-file.txt\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with Java in Dapr\nDESCRIPTION: This Java example demonstrates how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses the DaprClient to execute a state transaction with two operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class Main {\n    private static final String DAPR_STORE_NAME = \"statestore\";\n\n    public static void main(String[] args) {\n        try (DaprClient client = new DaprClientBuilder().build()) {\n            // Define the first state operation to save the value \"2\"\n            StateOperation<String> op1 = new StateOperation<>(\n                    StateOperationType.UPSERT,\n                    \"key1\",\n                    \"2\"\n            );\n\n            // Define the second state operation to publish the value \"3\" with metadata\n            Map<String, String> metadata = new HashMap<>();\n            metadata.put(\"outbox.projection\", \"true\");\n\n            StateOperation<String> op2 = new StateOperation<>(\n                    StateOperationType.UPSERT,\n                    \"key1\",\n                    \"3\",\n                    metadata\n            );\n\n            // Create the list of state operations\n            List<StateOperation<?>> ops = new ArrayList<>();\n            ops.add(op1);\n            ops.add(op2);\n\n            // Execute the state transaction\n            client.executeStateTransaction(DAPR_STORE_NAME, ops).block();\n            System.out.println(\"State transaction executed.\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a File from Huawei OBS using JSON\nDESCRIPTION: JSON payload for retrieving a file from Huawei OBS. Illustrates the 'get' operation with metadata specifying the file name to retrieve.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Thread Management in Workflows\nDESCRIPTION: Examples of incorrect thread management in workflows across different languages. These practices should be avoided as they can lead to undefined behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// DON'T DO THIS!\nTask t = Task.Run(() => context.CallActivityAsync(\"DoSomething\"));\nawait context.CreateTimer(5000).ConfigureAwait(false);\n```\n\nLANGUAGE: java\nCODE:\n```\n// DON'T DO THIS!\nnew Thread(() -> {\n    ctx.callActivity(DoSomethingActivity.class.getName()).await();\n}).start();\nctx.createTimer(Duration.ofSeconds(5)).await();\n```\n\nLANGUAGE: go\nCODE:\n```\n// DON'T DO THIS!\ngo func() {\n  err := ctx.CallActivity(DoSomething).Await(nil)\n}()\nerr := ctx.CreateTimer(time.Second).Await(nil)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Data with CURL Command\nDESCRIPTION: Example curl command that retrieves information about a job named 'jobforjabba' including its schedule, repeat count, and associated data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/jobs_api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X GET http://localhost:3500/v1.0-alpha1/jobs/jobforjabba -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resiliency Policies in YAML\nDESCRIPTION: This YAML configuration defines resiliency policies including retry and circuit breaker settings for a Dapr application. It specifies a 'retryForever' policy and a 'simpleCB' circuit breaker policy.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  - checkout\n\nspec:\n  policies:\n    retries:\n      retryForever:\n        policy: constant\n        maxInterval: 5s\n        maxRetries: -1 \n\n    circuitBreakers:\n      simpleCB:\n        maxRequests: 1\n        timeout: 5s \n        trip: consecutiveFailures >= 5\n\n  targets:\n    apps:\n      order-processor:\n        retry: retryForever\n        circuitBreaker: simpleCB\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deeply Nested Secrets with cURL\nDESCRIPTION: HTTP request showing how deeply nested secrets are returned when using multiValued=true. The response demonstrates how multiple levels of nesting are flattened using the nestedSeparator.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:3501/v1.0/secrets/local-secret-store/connectionStrings\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mysql:username\": \"your mysql username\",\n  \"mysql:password\": \"your mysql password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking HTTP Binding with cURL on Windows\nDESCRIPTION: Example cURL command for invoking the HTTP binding on Windows, demonstrating how to send a GET request to a specific path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"get\\\", \\\"metadata\\\": { \\\"path\\\": \\\"/things/1234\\\" } }\" \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Messages with Azure Service Bus Binding in Dapr\nDESCRIPTION: Example demonstrating how to schedule a delayed message using the ScheduledEnqueueTimeUtc metadata field. The timestamp can be in either RFC1123 or RFC3339 format.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/servicebusqueues.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myServiceBusQueue \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        },\n        \"metadata\": {\n          \"ScheduledEnqueueTimeUtc\": \"Tue, 02 Jan 2024 15:04:05 GMT\"\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Creating Object with Specific Key\nDESCRIPTION: This JSON snippet demonstrates the structure for creating an object in Alibaba Cloud OSS with a specific key. It includes the operation type, data, and metadata specifying the desired key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": \"file content\",\n    \"metadata\": {\n        \"key\": \"my-key\"\n    },\n    \"operation\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dapr with High Availability using Helm\nDESCRIPTION: Helm command to upgrade or install Dapr with high availability mode enabled for scheduler and placement services. This configuration sets up three instances of these services independently of the global HA setting.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n --version={{% dapr-latest-version short=\"true\" %}} \\\n --namespace dapr-system \\\n --create-namespace \\\n --set global.ha.enabled=false \\\n --set dapr_scheduler.ha=true \\\n --set dapr_placement.ha=true \\\n --wait\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Tracing with OpenTelemetry for Self-hosted Mode\nDESCRIPTION: YAML configuration for enabling Dapr tracing with OpenTelemetry protocol to communicate with Jaeger. Sets the sampling rate, enables stdout logging, and specifies the Jaeger endpoint address.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: tracing\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n    stdout: true\n    otel:\n      endpointAddress: \"localhost:4317\"\n      isSecure: false\n      protocol: grpc \n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL in Pub/Sub Request using cURL\nDESCRIPTION: This curl command demonstrates how to set a message TTL of 120 seconds when publishing an event to 'TOPIC_A' using the Dapr pub/sub API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-message-ttl.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X \"POST\" http://localhost:3500/v1.0/publish/pubsub/TOPIC_A?metadata.ttlInSeconds=120 -H \"Content-Type: application/json\" -d '{\"order-number\": \"345\"}'\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment for Python App with Dapr Configuration\nDESCRIPTION: Kubernetes Deployment YAML for the Python application that includes Dapr annotations. This configuration applies the pythonappconfig to enable access control and sets up the app in the default namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pythonapp\n  namespace: default\n  labels:\n    app: python\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: python\n  template:\n    metadata:\n      labels:\n        app: python\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"pythonapp\"\n        dapr.io/config: \"pythonappconfig\"\n    spec:\n      containers:\n      - name: python\n        image: dapriosamples/hello-k8s-python:edge\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Sidecar Configuration in YAML\nDESCRIPTION: This YAML snippet defines the structure for a Dapr Configuration resource used to configure the Dapr sidecar. It includes fields for API allowlist, tracing, metrics, HTTP pipeline, name resolution, secrets, components, and access control.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/configuration-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: <REPLACE-WITH-NAME>\n  namespace: <REPLACE-WITH-NAMESPACE>\nspec:\n  api:\n    allowed:\n      - name: <REPLACE-WITH-API>\n        version: <VERSION>\n        protocol: <HTTP-OR-GRPC>\n  tracing:\n    samplingRate: <REPLACE-WITH-INTEGER>\n    stdout: true\n    otel:\n      endpointAddress: <REPLACE-WITH-ENDPOINT-ADDRESS>\n      isSecure: <TRUE-OR-FALSE>\n      protocol: <HTTP-OR-GRPC>\n  metrics:\n    enabled: <TRUE-OR-FALSE>\n    rules:\n      - name: <METRIC-NAME>\n        labels:\n          - name: <LABEL-NAME>\n            regex: {}\n    recordErrorCodes: <TRUE-OR-FALSE>\n    latencyDistributionBuckets:\n      - <BUCKET-VALUE-MS-0>\n      - <BUCKET-VALUE-MS-1>\n    http:\n      increasedCardinality: <TRUE-OR-FALSE>\n      pathMatching: \n        - <PATH-A>\n        - <PATH-B>\n      excludeVerbs: <TRUE-OR-FALSE>\n  httpPipeline: # for incoming http calls\n    handlers:\n      - name: <HANDLER-NAME>\n        type: <HANDLER-TYPE>\n  appHttpPipeline: # for outgoing http calls\n    handlers:\n      - name: <HANDLER-NAME>\n        type: <HANDLER-TYPE>\n  nameResolution:\n    component: <NAME-OF-NAME-RESOLUTION-COMPONENT>\n    version: <NAME-RESOLUTION-COMPONENT-VERSION>\n    configuration:\n     <NAME-RESOLUTION-COMPONENT-METADATA-CONFIGURATION>\n  secrets:\n    scopes:\n      - storeName: <NAME-OF-SCOPED-STORE>\n        defaultAccess: <ALLOW-OR-DENY>\n        deniedSecrets: <REPLACE-WITH-DENIED-SECRET>\n  components:\n    deny:\n      - <COMPONENT-TO-DENY>\n  accessControl:\n    defaultAction: <ALLOW-OR-DENY>\n    trustDomain: <REPLACE-WITH-TRUST-DOMAIN>\n    policies:\n      - appId: <APP-NAME>\n        defaultAction: <ALLOW-OR-DENY>\n        trustDomain: <REPLACE-WITH-TRUST-DOMAIN>\n        namespace: \"default\"\n        operations:\n          - name: <OPERATION-NAME>\n            httpVerb: ['POST', 'GET']\n            action: <ALLOW-OR-DENY>\n```\n\n----------------------------------------\n\nTITLE: Creating a File with Local Storage Binding in JSON\nDESCRIPTION: JSON payload for creating a file using the Local Storage binding. Demonstrates the structure for the create operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with HTTP GET Operation\nDESCRIPTION: JSON payload for invoking an HTTP GET operation using the binding. Demonstrates how to specify the operation and optional path metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"path\": \"/things/1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a File from Huawei OBS using JSON\nDESCRIPTION: JSON payload for deleting a file from Huawei OBS. Shows the 'delete' operation with metadata specifying the file name to delete.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Worker with Wrangler\nDESCRIPTION: TOML configuration file for manually provisioning a Cloudflare Worker with necessary settings for queue management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Name of your Worker, for example \"mydaprqueue\"\nname = \"\"\n\n# Do not change these options\nmain = \"worker.js\"\ncompatibility_date = \"2022-12-09\"\nusage_model = \"bundled\"\n\n[vars]\n# Set this to the **public** part of the Ed25519 key, PEM-encoded (with newlines replaced with `\\n`).\n# Example:\n# PUBLIC_KEY = \"-----BEGIN PUBLIC KEY-----\\nMCowB...=\\n-----END PUBLIC KEY-----\"\nPUBLIC_KEY = \"\"\n# Set this to the name of your Worker (same as the value of the \"name\" property above), for example \"mydaprqueue\".\nTOKEN_AUDIENCE = \"\"\n\n# Set the next two values to the name of your Queue, for example \"myqueue\".\n# Note that they will both be set to the same value.\n[[queues.producers]]\nqueue = \"\"\nbinding = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-App Run Template for Kubernetes in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Multi-App Run template file for running multiple applications in a Kubernetes environment. It includes configuration for two apps with container images and Kubernetes-specific settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\napps:\n  - appID: nodeapp\n    appDirPath: ./nodeapp/\n    appPort: 3000\n    containerImage: ghcr.io/dapr/samples/hello-k8s-node:latest\n    containerImagePullPolicy: Always\n    createService: true\n    env:\n      APP_PORT: 3000\n  - appID: pythonapp\n    appDirPath: ./pythonapp/\n    containerImage: ghcr.io/dapr/samples/hello-k8s-python:latest\n```\n\n----------------------------------------\n\nTITLE: JWKS Validator Remote Configuration\nDESCRIPTION: YAML configuration for enabling JWKS token validator with remote source endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Configuration\napiVersion: dapr.io/v1alpha1\nmetadata:\n  name: sentryconfig\nspec:\n  mtls:\n    enabled: true\n    tokenValidators:\n      - name: jwks\n        options:\n          minRefreshInterval: 2m\n          requestTimeout: 1m\n          source: \"https://localhost:1234/\"\n          caCertificate: \"<optional ca certificate bundle string>\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Go SDK Application\nDESCRIPTION: Commands to navigate to the SDK directory, build the application, and run it with a Dapr sidecar to enable the scheduled job.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd bindings/go/sdk/batch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo build .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id batch-sdk --app-port 6002 --dapr-http-port 3502 --dapr-grpc-port 60002 --resources-path ../../../components -- go run .\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr in High Availability Mode with Helm\nDESCRIPTION: Deploy Dapr using Helm with high availability mode enabled for production scenarios.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--set global.ha.enabled=true \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription for Custom Properties in C#\nDESCRIPTION: C# code example showing how to configure a Dapr subscription to receive custom properties using attributes on an action method.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-azure-eventhubs.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Topic(\"order-pub-sub\", \"orders\")]\n[TopicMetadata(\"requireAllProperties\", \"true\")]\n[HttpPost(\"checkout\")]\npublic ActionResult Checkout(Order order, [FromHeader] int priority)\n{\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Actor Reminder Partitioning Configuration\nDESCRIPTION: A simple JSON example showing how to configure reminder partitioning for multiple actor types with a specified number of partitions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"entities\": [ \"MyActorType\", \"AnotherActorType\" ],\n\t\"remindersStoragePartitions\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET gRPC Client for Streaming with Dapr\nDESCRIPTION: .NET code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar metadata = new Metadata\n{\n\t{ \"dapr-app-id\", \"server\" },\n\t{ \"dapr-stream\", \"true\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Dapr Redis PubSub Component Configuration\nDESCRIPTION: YAML configuration for Redis pub/sub component in Dapr, defining connection details and component metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: orderpubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Insert Operation with PostgreSQL Binding\nDESCRIPTION: This JSON request demonstrates how to use the 'exec' operation to insert data into a PostgreSQL database. It includes a parameterized SQL query and the corresponding parameter values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postgresql.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"exec\",\n  \"metadata\": {\n    \"sql\": \"INSERT INTO foo (id, c1, ts) VALUES ($1, $2, $3)\",\n    \"params\": \"[1, \\\"demo\\\", \\\"2020-09-24T11:45:05Z07:00\\\"]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding in C#\nDESCRIPTION: This C# code demonstrates how to use the Dapr SDK to invoke an output binding. It creates a DaprClient and uses it to send messages to the 'checkout' binding every 5 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//dependencies\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Dapr.Client;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading;\n\n//code\nnamespace EventService\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            string BINDING_NAME = \"checkout\";\n            string BINDING_OPERATION = \"create\";\n            while(true)\n            {\n                System.Threading.Thread.Sleep(5000);\n                Random random = new Random();\n                int orderId = random.Next(1,1000);\n                using var client = new DaprClientBuilder().Build();\n                //Using Dapr SDK to invoke output binding\n                await client.InvokeBindingAsync(BINDING_NAME, BINDING_OPERATION, orderId);\n                Console.WriteLine(\"Sending message: \" + orderId);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dapr gRPC Application\nDESCRIPTION: Command to run a Dapr application with gRPC protocol in self-hosted mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id goapp --app-port 50001 --app-protocol grpc go run main.go\n```\n\n----------------------------------------\n\nTITLE: Successful State Update with Correct ETag\nDESCRIPTION: HTTP POST request to update state data using the correct ETag value for successful operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/statestore \\\n    -H \"Content-Type: application/json\" \\\n    -d '[\n        {\n            \"key\": \"sampleData\",\n            \"value\": \"2\",\n            \"etag\": \"1\"\n        }\n    ]'\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Update Notification in Dapr\nDESCRIPTION: Example JSON payload that Dapr would send to an application when a subscribed configuration item changes, including the subscription ID and updated configuration value with version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"bf3aa454-312d-403c-af95-6dec65058fa2\",\n    \"items\": [\n        \"key\": \"config-1\",\n        \"value\": \"abcdefgh\",\n        \"version\": \"1.1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Java Demo Workflow Activity Implementation\nDESCRIPTION: Implements a demo workflow activity in Java that processes messages with simulated long-running operations and logging functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\npublic class DemoWorkflowActivity implements WorkflowActivity {\n\n  @Override\n  public DemoActivityOutput run(WorkflowActivityContext ctx) {\n    Logger logger = LoggerFactory.getLogger(DemoWorkflowActivity.class);\n    logger.info(\"Starting Activity: \" + ctx.getName());\n\n    var message = ctx.getInput(DemoActivityInput.class).getMessage();\n    var newMessage = message + \" World!, from Activity\";\n    logger.info(\"Message Received from input: \" + message);\n    logger.info(\"Sending message to output: \" + newMessage);\n\n    logger.info(\"Sleeping for 5 seconds to simulate long running operation...\");\n\n    try {\n      TimeUnit.SECONDS.sleep(5);\n    } catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n\n\n    logger.info(\"Activity finished\");\n\n    var output = new DemoActivityOutput(message, newMessage);\n    logger.info(\"Activity returned: \" + output);\n\n    return output;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Concurrency Limits via Dapr CLI\nDESCRIPTION: Command to set app-max-concurrency flag when running a Dapr application locally using the CLI. This example sets the concurrency limit to 1, making the service process requests sequentially.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/control-concurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-max-concurrency 1 --app-port 5000 python ./app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Resiliency Policies for App Targets in Dapr\nDESCRIPTION: Example YAML configuration showing how to apply retry, timeout, and circuit breaker policies to a target app with the app-id \"appB\". This configuration is used when service invocation calls occur between Dapr applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/targets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspecs:\n  targets:\n    apps:\n      appB: # app-id of the target service\n        timeout: general\n        retry: general\n        circuitBreaker: general\n```\n\n----------------------------------------\n\nTITLE: Certificate Rotation without Service Restart\nDESCRIPTION: Rotates certificates using provided CA, issuer certificates and private key without service restart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --ca-root-certificate <ca.pem> --issuer-private-key <issuer.key> --issuer-public-certificate <issuer.pem>\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Container to Introduce Fault\nDESCRIPTION: This command stops the Redis container to simulate a fault in the state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop dapr_redis\n```\n\n----------------------------------------\n\nTITLE: Calling a Method with Namespace Qualification\nDESCRIPTION: Example of invoking a specific method on an application in a different namespace using the fully qualified app ID format.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/service-invocation-namespaces.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://localhost:3500/v1.0/invoke/myapp.production/method/ping\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Control Plane\nDESCRIPTION: Command to initialize the Dapr control plane containers and create default configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init\n```\n\n----------------------------------------\n\nTITLE: Query Execution Commands\nDESCRIPTION: Commands to execute the query using HTTP API in both Bash and PowerShell\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST -H \"Content-Type: application/json\" -d @query-api-examples/query3.json http://localhost:3500/v1.0-alpha1/state/statestore/query | jq .\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -InFile query-api-examples/query3.json -Uri 'http://localhost:3500/v1.0-alpha1/state/statestore/query'\n```\n\n----------------------------------------\n\nTITLE: Dapr mTLS Configuration YAML\nDESCRIPTION: YAML configuration to enable mTLS for Dapr in self-hosted mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: default\nspec:\n  mtls:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example for Unlocking in Dapr\nDESCRIPTION: A complete curl command example showing how to release a lock named 'lock1' owned by 'vader' using the Redis store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha/unlock/redisStore \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"resourceId\": \"lock1\",\n        \"lockOwner\": \"vader\"\n      }'\n\n{\n    \"status\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor State Store in Redis Component\nDESCRIPTION: YAML configuration snippet for enabling actor state store in Redis component configuration\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-no-docker.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Applying RouterChecker Middleware in Dapr Configuration (YAML)\nDESCRIPTION: This YAML configuration shows how to reference and apply the RouterChecker middleware in a Dapr configuration. It defines an HTTP pipeline that includes the RouterChecker middleware for processing incoming requests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-routerchecker.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: routerchecker \n      type: middleware.http.routerchecker\n```\n\n----------------------------------------\n\nTITLE: Generating a random token for Dapr authentication using OpenSSL\nDESCRIPTION: This command generates a random 32-byte key and encodes it as Base64 to be used as a secure API token for Dapr authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rand 16 | base64\n```\n\n----------------------------------------\n\nTITLE: Saving Text to Random UUID File (Linux)\nDESCRIPTION: Linux command using curl to save text content to a randomly generated UUID file in S3. Shows basic object creation without specifying a filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\" }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Reminder Partitioning in Go\nDESCRIPTION: Implements an HTTP handler for Dapr actor configuration in Go, setting up entities, timeouts, and reminder storage partitions for the actor runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/howto-actors-partitioning.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype daprConfig struct {\n\tEntities                   []string `json:\"entities,omitempty\"`\n\tActorIdleTimeout           string   `json:\"actorIdleTimeout,omitempty\"`\n\tActorScanInterval          string   `json:\"actorScanInterval,omitempty\"`\n\tDrainOngoingCallTimeout    string   `json:\"drainOngoingCallTimeout,omitempty\"`\n\tDrainRebalancedActors      bool     `json:\"drainRebalancedActors,omitempty\"`\n\tRemindersStoragePartitions int      `json:\"remindersStoragePartitions,omitempty\"`\n}\n\nvar daprConfigResponse = daprConfig{\n\t[]string{defaultActorType},\n\tactorIdleTimeout,\n\tactorScanInterval,\n\tdrainOngoingCallTimeout,\n\tdrainRebalancedActors,\n\t7,\n}\n\nfunc configHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(daprConfigResponse)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Actor Reminder in Dapr\nDESCRIPTION: HTTP DELETE request to remove a reminder for a Dapr actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nDELETE http://localhost:3500/v1.0/actors/<actorType>/<actorId>/reminders/<name>\n```\n\n----------------------------------------\n\nTITLE: Consul Configuration with Self-Registration and Customizations\nDESCRIPTION: Configuration for Consul that enables self-registration and customizes checks, tags, and metadata. This setup provides more control over service registration and health checks.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-name-resolution/setup-nr-consul.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"consul\"\n    configuration:\n      client:\n        address: \"127.0.0.1:8500\"\n      selfRegister: true\n      checks:\n        - name: \"Dapr Health Status\"\n          checkID: \"daprHealth:${APP_ID}\"\n          interval: \"15s\"\n          http: \"http://${HOST_ADDRESS}:${DAPR_HTTP_PORT}/v1.0/healthz\"\n        - name: \"Service Health Status\"\n          checkID: \"serviceHealth:${APP_ID}\"\n          interval: \"15s\"\n          http: \"http://${HOST_ADDRESS}:${APP_PORT}/health\"\n      tags:\n        - \"dapr\"\n        - \"v1\"\n        - \"${OTHER_ENV_VARIABLE}\"\n      meta:\n        DAPR_METRICS_PORT: \"${DAPR_METRICS_PORT}\"\n        DAPR_PROFILE_PORT: \"${DAPR_PROFILE_PORT}\"\n      daprPortMetaKey: \"DAPR_PORT\"\n      queryOptions:\n        useCache: true\n        filter: \"Checks.ServiceTags contains dapr\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Path Pattern Access Control\nDESCRIPTION: YAML configuration allowing access to all methods except those matching a specific nested path pattern\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: allow\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: allow\n      trustDomain: 'public'\n      namespace: \"default\"\n      operations:\n      - name: /op1/**/a\n        httpVerb: ['*']\n        action: deny\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr gRPC in Kubernetes\nDESCRIPTION: Kubernetes deployment YAML configuration showing how to enable gRPC communication for a Dapr application using annotations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/grpc.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-protocol: \"grpc\"\n        dapr.io/app-port: \"5005\"\n#...\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with mTLS via CLI\nDESCRIPTION: Command to run a Dapr application with mTLS enabled, specifying the configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --config ./config.yaml node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Job with CURL Command\nDESCRIPTION: Example curl command that creates a job named 'jobforjabba' with a schedule that runs every minute, repeats 5 times, and includes custom JSON data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/jobs_api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST \\\n  http://localhost:3500/v1.0-alpha1/jobs/jobforjabba \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": \"{\\\"value\\\":\\\"Running spice\\\"}\",\n        \"schedule\": \"@every 1m\",\n        \"repeats\": 5\n    }'\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Bulk Secret Retrieval\nDESCRIPTION: The HTTP request format for retrieving all secrets from a specific secret store in bulk. This endpoint returns all secrets the caller has access to in the specified store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/secrets/<secret-store-name>/bulk\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Liveness Probe for Dapr\nDESCRIPTION: Example of how to configure a liveness probe in Kubernetes pod configuration to monitor the Dapr sidecar health. The probe checks the /healthz endpoint on port 8080 every 3 seconds after an initial delay of 3 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/health-checks/sidecar-health.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n      initialDelaySeconds: 3\n      periodSeconds: 3\n```\n\n----------------------------------------\n\nTITLE: Transforming Metrics with Regular Expressions in Dapr\nDESCRIPTION: YAML configuration example showing how to use regular expressions to transform metric values in Dapr. This example applies a regex to the 'method' label in the service invocation metrics to reduce cardinality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprConfig\nspec:\n  metrics:\n    enabled: true\n    http:\n      increasedCardinality: true\n    rules:\n      - name: dapr_runtime_service_invocation_req_sent_total\n        labels:\n        - name: method\n          regex:\n            \"orders/\": \"orders/.+\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment for Dapr Sidecar Certificate Installation\nDESCRIPTION: This YAML configuration shows a Kubernetes deployment that attaches a pod volume to the Dapr sidecar and sets the SSL_CERT_DIR environment variable to install certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/install-certificates.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/volume-mounts: \"certificates-vol:/tmp/certificates\" # (STEP 1) Mount the certificates folder to the sidecar container\n        dapr.io/env: \"SSL_CERT_DIR=/tmp/certificates\" # (STEP 2) Set the environment variable to the path of the certificates folder\n    spec:\n      volumes:\n        - name: certificates-vol\n          hostPath:\n            path: /certificates\n#...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm Middleware Component in YAML\nDESCRIPTION: YAML configuration for setting up a Wasm middleware component in Dapr. Specifies the component type, version, and metadata including URL and guest configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-wasm.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: wasm\nspec:\n  type: middleware.http.wasm\n  version: v1\n  metadata:\n  - name: url\n    value: \"file://router.wasm\"\n  - guestConfig\n    value: {\"environment\":\"production\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Files via SFTP Binding\nDESCRIPTION: JSON request formats for listing files through the SFTP binding, with optional directory path specification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sftp.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"metadata\": {\n    \"fileName\": \"my/cool/directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example for Acquiring a Lock in Dapr\nDESCRIPTION: A complete curl command example showing how to acquire a lock named 'lock1' for owner 'vader' with a 60-second expiry time using the Redis store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha/lock/redisStore \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"resourceId\": \"lock1\",\n        \"lockOwner\": \"vader\",\n        \"expiryInSeconds\": 60\n      }'\n\n{\n    \"success\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud Object Storage Binding in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Alibaba Cloud Object Storage binding component in Dapr. It includes essential metadata fields such as endpoint, access credentials, and bucket name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: alicloudobjectstorage\nspec:\n  type: bindings.alicloud.oss\n  version: v1\n  metadata:\n  - name: endpoint\n    value: \"[endpoint]\"\n  - name: accessKeyID\n    value: \"[key-id]\"\n  - name: accessKey\n    value: \"[access-key]\"\n  - name: bucket\n    value: \"[bucket]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CLI for Event Grid Permissions\nDESCRIPTION: Bash script to set up necessary permissions for an Azure Service Principal to create event subscriptions in Event Grid using Azure CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set the client ID of the app you created\nCLIENT_ID=\"...\"\n# Scope of the resource, usually in the format:\n# `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}`\nSCOPE=\"...\"\n\n# First ensure that Azure Resource Manager provider is registered for Event Grid\naz provider register --namespace \"Microsoft.EventGrid\"\naz provider show --namespace \"Microsoft.EventGrid\" --query \"registrationState\"\n# Give the SP needed permissions so that it can create event subscriptions to Event Grid\naz role assignment create --assignee \"$CLIENT_ID\" --role \"EventGrid EventSubscription Contributor\" --scopes \"$SCOPE\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with NFS Volume Mount for Secrets\nDESCRIPTION: Example showing how to configure a Kubernetes Deployment to mount an NFS volume for use with Dapr's local file secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-volume-mounts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n...\nspec:\n  ...\n  template:\n    ...\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/volume-mounts: \"nfs-secrets-vol:/mnt/secrets\"\n    spec:\n      volumes:\n        - name: nfs-secrets-vol\n          nfs:\n            server: 10.201.202.203\n            path: /secrets/stage\n...\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Kubernetes Namespace B\nDESCRIPTION: Commands to create namespace-b and switch kubectl context to use it\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace namespace-b\nkubectl config set-context --current --namespace=namespace-b\n```\n\n----------------------------------------\n\nTITLE: Renewing Certificates for Kubernetes\nDESCRIPTION: Generates new root and issuer certificates for Kubernetes cluster with default 365-day validity.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Shared using Helm\nDESCRIPTION: This command installs a new Dapr Shared instance using the official Helm Chart. It sets the app ID, remote URL, remote port, and deployment strategy.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-dapr-shared.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-shared-instance oci://registry-1.docker.io/daprio/dapr-shared-chart --set shared.appId=<DAPR_APP_ID> --set shared.remoteURL=<REMOTE_URL> --set shared.remotePort=<REMOTE_PORT> --set shared.strategy=deployment\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulsar E2E Encryption with Key Values\nDESCRIPTION: YAML configurations for enabling Pulsar's end-to-end encryption using embedded key values for both publisher and consumer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"localhost:6650\"\n  - name: publicKey\n    value:  \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1KDAM4L8RtJ+nLaXBrBh\\nzVpvTemsKVZoAct8A+ShepOHT9lgHOCGLFGWNla6K6j+b3AV/P/fAAhwj82vwTDd\\nruXSflvSdmYeFAw3Ypphc1A5oM53wSRWhg63potBNWqdDzj8ApYgqjpmjYSQdL5/\\na3golb36GYFrY0MLFTv7wZ87pmMIPsOgGIcPbCHker2fRZ34WXYLb1hkeUpwx4eK\\njpwcg35gccvR6o/UhbKAuc60V1J9Wof2sNgtlRaQej45wnpjWYzZrIyk5qUbn0Qi\\nCdpIrXvYtANq0Id6gP8zJvUEdPIgNuYxEmVCl9jI+8eGI6peD0qIt8U80hf9axhJ\\n3QIDAQAB\\n-----END PUBLIC KEY-----\\n\"\n  - name: keys\n    value: myapp.key\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: messagebus\nspec:\n  type: pubsub.pulsar\n  version: v1\n  metadata:\n  - name: host\n    value: \"localhost:6650\"\n  - name: publicKey\n    value: \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1KDAM4L8RtJ+nLaXBrBh\\nzVpvTemsKVZoAct8A+ShepOHT9lgHOCGLFGWNla6K6j+b3AV/P/fAAhwj82vwTDd\\nruXSflvSdmYeFAw3Ypphc1A5oM53wSRWhg63potBNWqdDzj8ApYgqjpmjYSQdL5/\\na3golb36GYFrY0MLFTv7wZ87pmMIPsOgGIcPbCHker2fRZ34WXYLb1hkeUpwx4eK\\njpwcg35gccvR6o/UhbKAuc60V1J9Wof2sNgtlRaQej45wnpjWYzZrIyk5qUbn0Qi\\nCdpIrXvYtANq0Id6gP8zJvUEdPIgNuYxEmVCl9jI+8eGI6peD0qIt8U80hf9axhJ\\n3QIDAQAB\\n-----END PUBLIC KEY-----\\n\"\n  - name: privateKey\n    value: \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpAIBAAKCAQEA1KDAM4L8RtJ+nLaXBrBhzVpvTemsKVZoAct8A+ShepOHT9lg\\nHOCGLFGWNla6K6j+b3AV/P/fAAhwj82vwTDdruXSflvSdmYeFAw3Ypphc1A5oM53\\nwSRWhg63potBNWqdDzj8ApYgqjpmjYSQdL5/a3golb36GYFrY0MLFTv7wZ87pmMI\\nPsOgGIcPbCHker2fRZ34WXYLb1hkeUpwx4eKjpwcg35gccvR6o/UhbKAuc60V1J9\\nWof2sNgtlRaQej45wnpjWYzZrIyk5qUbn0QiCdpIrXvYtANq0Id6gP8zJvUEdPIg\\nNuYxEmVCl9jI+8eGI6peD0qIt8U80hf9axhJ3QIDAQABAoIBAQCKuHnM4ac/eXM7\\nQPDVX1vfgyHc3hgBPCtNCHnXfGFRvFBqavKGxIElBvGOcBS0CWQ+Rg1Ca5kMx3TQ\\njSweSYhH5A7pe3Sa5FK5V6MGxJvRhMSkQi/lJZUBjzaIBJA9jln7pXzdHx8ekE16\\nBMPONr6g2dr4nuI9o67xKrtfViwRDGaG6eh7jIMlEqMMc6WqyhvI67rlVDSTHFKX\\njlMcozJ3IT8BtTzKg2Tpy7ReVuJEpehum8yn1ZVdAnotBDJxI07DC1cbOP4M2fHM\\ngfgPYWmchauZuTeTFu4hrlY5jg0/WLs6by8r/81+vX3QTNvejX9UdTHMSIfQdX82\\nAfkCKUVhAoGBAOvGv+YXeTlPRcYC642x5iOyLQm+BiSX4jKtnyJiTU2s/qvvKkIu\\nxAOk3OtniT9NaUAHEZE9tI71dDN6IgTLQlAcPCzkVh6Sc5eG0MObqOO7WOMCWBkI\\nlaAKKBbd6cGDJkwGCJKnx0pxC9f8R4dw3fmXWgWAr8ENiekMuvjSfjZ5AoGBAObd\\ns2L5uiUPTtpyh8WZ7rEvrun3djBhzi+d7rgxEGdditeiLQGKyZbDPMSMBuus/5wH\\nwfi0xUq50RtYDbzQQdC3T/C20oHmZbjWK5mDaLRVzWS89YG/NT2Q8eZLBstKqxkx\\ngoT77zoUDfRy+CWs1xvXzgxagD5Yg8/OrCuXOqWFAoGAPIw3r6ELknoXEvihASxU\\nS4pwInZYIYGXpygLG8teyrnIVOMAWSqlT8JAsXtPNaBtjPHDwyazfZrvEmEk51JD\\nX0tA8M5ah1NYt+r5JaKNxp3P/8wUT6lyszyoeubWJsnFRfSusuq/NRC+1+KDg/aq\\nKnSBu7QGbm9JoT2RrmBv5RECgYBRn8Lj1I1muvHTNDkiuRj2VniOSirkUkA2/6y+\\nPMKi+SS0tqcY63v4rNCYYTW1L7Yz8V44U5mJoQb4lvpMbolGhPljjxAAU3hVkItb\\nvGVRlSCIZHKczADD4rJUDOS7DYxO3P1bjUN4kkyYx+lKUMDBHFzCa2D6Kgt4dobS\\n5qYajQKBgQC7u7MFPkkEMqNqNGu5erytQkBq1v1Ipmf9rCi3iIj4XJLopxMgw0fx\\n6jwcwNInl72KzoUBLnGQ9PKGVeBcgEgdI+a+tq+1TJo6Ta+hZSx+4AYiKY18eRKG\\neNuER9NOcSVJ7Eqkcw4viCGyYDm2vgNV9HJ0VlAo3RDh8x5spEN+mg==\\n-----END RSA PRIVATE KEY-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Zeebe\nDESCRIPTION: Creates or updates variables for a specific element instance in the workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"elementInstanceKey\": 2251799813687880,\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"set-variables\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Multi-App Services\nDESCRIPTION: Command to run both 'order-processor' and 'checkout' services using Dapr's multi-app run feature.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Storage Class Configuration for Volume Expansion\nDESCRIPTION: YAML configuration for a Kubernetes StorageClass that enables volume expansion.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: standard\nprovisioner: my.driver\nallowVolumeExpansion: true\n...\n```\n\n----------------------------------------\n\nTITLE: Failed State Deletion with Incorrect ETag\nDESCRIPTION: Example of a failed state deletion attempt using an incorrect ETag value in the If-Match header.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE -H 'If-Match: 5' http://localhost:3500/v1.0/state/statestore/sampleData\n```\n\n----------------------------------------\n\nTITLE: High Cardinality With Path Matching Configuration\nDESCRIPTION: A YAML snippet for configuring HTTP metrics with high cardinality and path matching. This approach groups similar paths together while maintaining detailed metrics information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  increasedCardinality: true\n  pathMatching:\n    - /orders/{orderID}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Using Dapr HTTP API in Bash\nDESCRIPTION: Use curl to send a GET request to the Dapr sidecar's HTTP endpoint to retrieve a secret from the configured secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/my-secret-store/my-secret\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Entry with Dapr HTTP API\nDESCRIPTION: Shell command using curl to retrieve a state entry from the Dapr state store through the HTTP API. Shows how to fetch a specific key value.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:$PORT/v1.0/state/prod-mystore/name\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Pipeline with Sentinel\nDESCRIPTION: YAML configuration for including Sentinel middleware in the Dapr HTTP pipeline configuration. This defines how the middleware is applied in the processing pipeline.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-sentinel.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprConfig\nspec:\n  httpPipeline:\n    handlers:\n      - name: sentinel\n        type: middleware.http.sentinel\n```\n\n----------------------------------------\n\nTITLE: Cloning Quickstarts Repository\nDESCRIPTION: Command to clone the Dapr quickstarts repository containing the sample code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Dapr CLI Invoke Command Examples\nDESCRIPTION: Demonstrates how to use the invoke command with different HTTP verbs and data payloads. Shows invoking a sample method with both POST and GET verbs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-invoke.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Invoke a sample method on target app with POST Verb\ndapr invoke --app-id target --method sample --data '{\"key\":\"value\"}'\n\n# Invoke a sample method on target app with GET Verb\ndapr invoke --app-id target --method sample --verb GET\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with step CLI\nDESCRIPTION: Command to generate an Ed25519 key pair using the step CLI tool. Creates public.pem and private.pem files with no password protection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nstep crypto keypair \\\n  public.pem private.pem \\\n  --kty OKP --curve Ed25519 \\\n  --insecure --no-password\n```\n\n----------------------------------------\n\nTITLE: Example JSON Input for Zeebe JobWorker\nDESCRIPTION: This JSON snippet illustrates the structure of input data that a Zeebe JobWorker might receive when processing a job. It includes process variables that were specified in the 'fetchVariables' metadata field of the binding configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-jobworker.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productId\": \"some-product-id\",\n  \"productName\": \"some-product-name\",\n  \"productKey\": \"some-product-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dapr Installation on Kubernetes\nDESCRIPTION: This command checks the status of Dapr pods in the dapr-system namespace to verify the installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace dapr-system\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS Settings in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows the available mTLS settings in a Dapr control plane configuration resource. It includes options for enabling mTLS, setting workload certificate TTL, and specifying allowed clock skew.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: daprsystem\n  namespace: default\nspec:\n  mtls:\n    enabled: true\n    workloadCertTTL: \"24h\"\n    allowedClockSkew: \"15m\"\n```\n\n----------------------------------------\n\nTITLE: Creating One-time Actor Reminder\nDESCRIPTION: Example of how to create a reminder that fires only once. This reminder will fire after 3 seconds and then never fire again.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\":\"0h0m3s0ms\",\n  \"period\":\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Worker Code Using curl\nDESCRIPTION: Shell command for downloading the pre-compiled worker code from GitHub using curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Set this to the version of Dapr that you're using\nDAPR_VERSION=\"release-1.12\"\ncurl -LfO \"https://raw.githubusercontent.com/dapr/components-contrib/${DAPR_VERSION}/internal/component/cloudflare/workers/code/worker.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRoleBinding for Dapr User\nDESCRIPTION: Command to create a clusterrolebinding for resolving webhook admission issues by granting necessary permissions to a user.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding dapr-<name-of-user> --clusterrole=dapr-operator-admin --user <name-of-user>\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio SMS Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a Twilio SMS binding component. Defines required metadata fields including target phone number, sender number, account SID, and authentication token for Twilio integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/twilio.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.twilio.sms\n  version: v1\n  metadata:\n  - name: toNumber # required.\n    value: \"111-111-1111\"\n  - name: fromNumber # required.\n    value: \"222-222-2222\"\n  - name: accountSid # required.\n    value: \"*****************\"\n  - name: authToken # required.\n    value: \"*****************\"\n```\n\n----------------------------------------\n\nTITLE: Invoking SLS Binding with cURL on Linux/MacOS\nDESCRIPTION: Linux/MacOS command line example for invoking the SLS binding using cURL with JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudsls.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"metadata\":{\"project\":\"project-name\",\"logstore\":\"logstore-name\",\"topic\":\"topic-name\",\"source\":\"source-name\"},\"data\":{\"log-filed\":\"log info\"}}' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Object Storage State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up an OCI Object Storage state store component in Dapr. Includes authentication options like instance principal and config file authentication, along with required fields for OCI connectivity such as tenancy OCID, user OCID, private key, and bucket details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oci-objectstorage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.oci.objectstorage\n  version: v1\n  metadata:\n - name: instancePrincipalAuthentication\n   value: <\"true\" or \"false\">  # Optional. default: \"false\" \n - name: configFileAuthentication\n   value: <\"true\" or \"false\">  # Optional. default: \"false\" . Not used when instancePrincipalAuthentication == \"true\" \n - name: configFilePath\n   value: <REPLACE-WITH-FULL-QUALIFIED-PATH-OF-CONFIG-FILE>  # Optional. No default. Only used when configFileAuthentication == \"true\" \n - name: configFileProfile\n   value: <REPLACE-WITH-NAME-OF-PROFILE-IN-CONFIG-FILE>  # Optional. default: \"DEFAULT\" . Only used when configFileAuthentication == \"true\" \n - name: tenancyOCID\n   value: <REPLACE-WITH-TENANCY-OCID>  # Not used when configFileAuthentication == \"true\" or instancePrincipalAuthentication == \"true\" \n - name: userOCID\n   value: <REPLACE-WITH-USER-OCID>  # Not used when configFileAuthentication == \"true\" or instancePrincipalAuthentication == \"true\" \n - name: fingerPrint\n   value: <REPLACE-WITH-FINGERPRINT>  # Not used when configFileAuthentication == \"true\" or instancePrincipalAuthentication == \"true\" \n - name: privateKey  # Not used when configFileAuthentication == \"true\" or instancePrincipalAuthentication == \"true\" \n   value: |\n          -----BEGIN RSA PRIVATE KEY-----\n          REPLACE-WITH-PRIVATE-KEY-AS-IN-PEM-FILE\n          -----END RSA PRIVATE KEY-----    \n - name: region\n   value: <REPLACE-WITH-OCI-REGION>  # Not used when configFileAuthentication == \"true\" or instancePrincipalAuthentication == \"true\" \n - name: bucketName\n\t value: <REPLACE-WITH-BUCKET-NAME>\n - name: compartmentOCID\n   value: <REPLACE-WITH-COMPARTMENT-OCID>\n```\n\n----------------------------------------\n\nTITLE: Granting Azure AD Application Access to Cosmos DB using Azure CLI\nDESCRIPTION: This bash script uses Azure CLI to grant an Azure AD application access to Cosmos DB. It assigns the 'Cosmos DB Built-in Data Contributor' role to the specified Service Principal for the Cosmos DB account.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cosmosdb.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Name of the Resource Group that contains your Cosmos DB\nRESOURCE_GROUP=\"...\"\n# Name of your Cosmos DB account\nACCOUNT_NAME=\"...\"\n# ID of your Service Principal object\nPRINCIPAL_ID=\"...\"\n# ID of the \"Cosmos DB Built-in Data Contributor\" role\n# You can also use the ID of a custom role\nROLE_ID=\"00000000-0000-0000-0000-000000000002\"\n\naz cosmosdb sql role assignment create \\\n  --account-name \"$ACCOUNT_NAME\" \\\n  --resource-group \"$RESOURCE_GROUP\" \\\n  --scope \"/\" \\\n  --principal-id \"$PRINCIPAL_ID\" \\\n  --role-definition-id \"$ROLE_ID\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Key Secret Environment Variable in Kubernetes Deployment\nDESCRIPTION: Example of a Kubernetes deployment configuration that uses dapr.io/env-from-secret annotation to inject a multi-key secret as an environment variable into the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/environment-variables-secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodeapp\nspec:\n  template:\n    metadata:\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodeapp\"\n        dapr.io/app-port: \"3000\"\n        dapr.io/env-from-secret: \"AUTH_TOKEN=auth-headers-secret:auth-header-value\"\n    spec:\n      containers:\n      - name: node\n        image: dapriosamples/hello-k8s-node:latest\n        ports:\n        - containerPort: 3000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Downloading Metrics Server Manifests\nDESCRIPTION: This bash command downloads the latest metrics-server manifests from GitHub.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Partition Key Configuration\nDESCRIPTION: Example of configuring DynamoDB state store with a custom partition key attribute name 'ContractID' instead of the default 'key'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-dynamodb.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.aws.dynamodb\n  version: v1\n  metadata:\n  - name: table\n    value: \"Contracts\"\n  - name: partitionKey\n    value: \"ContractID\"\n```\n\n----------------------------------------\n\nTITLE: Bulk Publish Error Response in Dapr\nDESCRIPTION: This JSON snippet illustrates the error response format when some messages fail to be delivered during a bulk publish operation. It includes a list of failed entries with their IDs and error messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/pubsub_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"failedEntries\": [\n    {\n      \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n      \"error\": \"some error message\"\n    },\n  ],\n  \"errorCode\": \"ERR_PUBSUB_PUBLISH_MESSAGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Environment Variables Secret Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up a local environment variables secret store component in Dapr. The component type is 'secretstores.local.env' and includes an optional prefix configuration for filtering environment variables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/envvar-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: envvar-secret-store\nspec:\n  type: secretstores.local.env\n  version: v1\n  metadata:\n    # - name: prefix\n    #   value: \"MYAPP_\"\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Object with Presigned URL (Linux)\nDESCRIPTION: Linux command using curl to create an S3 object with a presigned URL. Shows how to set the presignTTL metadata for generating a temporary access URL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\", \"metadata\": { \"presignTTL\": \"15m\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Canceling Process Instance in Zeebe\nDESCRIPTION: Cancels a running process instance using its process instance key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"processInstanceKey\": 2251799813687851\n  },\n  \"operation\": \"cancel-instance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing State Store with cURL Commands\nDESCRIPTION: Shell commands to test the state store API endpoints for storing and retrieving data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"name\", \"value\": \"Bruce Wayne\", \"metadata\": {}}]' http://localhost:$PORT/v1.0/state/prod-mystore\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:$PORT/v1.0/state/prod-mystore/name\n```\n\n----------------------------------------\n\nTITLE: Configuring Injector Watchdog in YAML\nDESCRIPTION: YAML configuration options for enabling and configuring the injector watchdog feature in the Dapr Operator service. It shows different interval settings including disabling, setting a specific interval, and running once.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/operator.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- --watch-interval=0\n- --watch-interval=<interval>\n- --watch-interval=once\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Completion API Request\nDESCRIPTION: JSON request structure for the completion API operation with optional parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/openai.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"completion\",\n  \"data\": {\n    \"deploymentId\": \"my-model\",\n    \"prompt\": \"A dog is\",\n    \"maxTokens\":5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr Sidecar Health Configuration in Kubernetes\nDESCRIPTION: Complete configuration for liveness and readiness probes as automatically set by the Dapr Sidecar Injector. It configures both probes to check the v1.0/healthz endpoint on port 3500 with specific timing parameters for health monitoring.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/health-checks/sidecar-health.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    livenessProbe:\n      httpGet:\n        path: v1.0/healthz\n        port: 3500\n      initialDelaySeconds: 5\n      periodSeconds: 10\n      timeoutSeconds : 5\n      failureThreshold : 3\n    readinessProbe:\n      httpGet:\n        path: v1.0/healthz\n        port: 3500\n      initialDelaySeconds: 5\n      periodSeconds: 10\n      timeoutSeconds : 5\n      failureThreshold: 3\n```\n\n----------------------------------------\n\nTITLE: Combining AllowedTopics with Publishing and Subscription Scopes\nDESCRIPTION: This YAML configuration demonstrates how to combine allowedTopics with publishingScopes and subscriptionScopes for granular access control. It limits the allowed topics to only A and B, while restricting app1 to only publish to topic A and preventing it from subscribing to any topics. App2 can only subscribe to topic A.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: \"localhost:6379\"\n  - name: redisPassword\n    value: \"\"\n  - name: allowedTopics\n    value: \"A,B\"\n  - name: publishingScopes\n    value: \"app1=A\"\n  - name: subscriptionScopes\n    value: \"app1=;app2=A\"\n```\n\n----------------------------------------\n\nTITLE: Service Invocation Request Body Example\nDESCRIPTION: Example JSON request body for a mathematical operation service invocation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"arg1\": 10,\\n  \"arg2\": 23,\\n  \"operator\": \"+\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Dapr Metadata API with curl\nDESCRIPTION: Example of using curl to request metadata information from a Dapr sidecar running on port 3500. This retrieves the complete metadata object including components, actors, and other configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/metadata\n```\n\n----------------------------------------\n\nTITLE: Deleting a File with Local Storage Binding in JSON\nDESCRIPTION: JSON payload for deleting a file using the Local Storage binding. Shows the structure for the delete operation with filename metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"fileName\": \"myfile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alibaba Cloud SLS Binding Request Format in JSON\nDESCRIPTION: JSON request format for performing log store operations with project, logstore, topic, and source specifications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudsls.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metadata\":{\n        \"project\":\"your-sls-project-name\",\n        \"logstore\":\"your-sls-logstore-name\",\n        \"topic\":\"your-sls-topic-name\",\n        \"source\":\"your-sls-source\"\n    },\n    \"data\":{\n        \"custome-log-filed\":\"any other log info\"\n    },\n    \"operation\":\"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes deployment with Dapr service invocation annotations\nDESCRIPTION: Kubernetes deployment YAML configuration that demonstrates how to set the app-id, app-port, and other Dapr annotations for service invocation in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: <language>-app\n  namespace: default\n  labels:\n    app: <language>-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: <language>-app\n  template:\n    metadata:\n      labels:\n        app: <language>-app\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"order-processor\"\n        dapr.io/app-port: \"6001\"\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Etcd with Docker Compose\nDESCRIPTION: This shell command starts the Etcd server in detached mode using Docker Compose, running the service defined in the docker-compose.yml file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-etcd.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Pub/Sub Routing with Programmatic Subscription in PHP\nDESCRIPTION: This PHP application uses the Dapr SDK to set up programmatic subscription with routing rules. It configures the 'inventory' topic to route events to different paths based on event type, with a default handler for unmatched events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$app = \\Dapr\\App::create(configure: fn(\\DI\\ContainerBuilder $builder) => $builder->addDefinitions(['dapr.subscriptions' => [\n    new \\Dapr\\PubSub\\Subscription(pubsubname: 'pubsub', topic: 'inventory', routes: (\n      rules: => [\n        ('match': 'event.type == \"widget\"', path: '/widgets'),\n        ('match': 'event.type == \"gadget\"', path: '/gadgets'),\n      ]\n      default: '/products')),\n]]));\n$app->post('/products', function(\n    #[\\Dapr\\Attributes\\FromBody]\n    \\Dapr\\PubSub\\CloudEvent $cloudEvent,\n    \\Psr\\Log\\LoggerInterface $logger\n    ) {\n        $logger->alert('Received event: {event}', ['event' => $cloudEvent]);\n        return ['status' => 'SUCCESS'];\n    }\n);\n$app->start();\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Mismatch Error in Go\nDESCRIPTION: This Go code demonstrates how to return an ETag Mismatch error in a Dapr pluggable component. It creates a status with a FailedPrecondition code and includes a BadRequest detail with a FieldViolation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nst := status.New(codes.FailedPrecondition, \"fake-err-msg\")\ndesc := \"The ETag field provided does not match the one in the store\"\nv := &errdetails.BadRequest_FieldViolation{\n\tField:       etagField,\n\tDescription: desc,\n}\nbr := &errdetails.BadRequest{}\nbr.FieldViolations = append(br.FieldViolations, v)\nst, err := st.WithDetails(br)\n```\n\n----------------------------------------\n\nTITLE: Querying State Keys by App ID in Azure Cosmos DB for Dapr\nDESCRIPTION: This SQL query retrieves all state keys associated with a specific application in the Dapr state store implemented using Azure Cosmos DB.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-cosmosdb-store.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE CONTAINS(states.id, 'myapp||')\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting an S3 Object with curl\nDESCRIPTION: Example curl commands for deleting an object from an S3 bucket using Dapr's AWS S3 binding. The request uses the 'delete' operation with the object key specified in metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \\\"operation\\\": \\\"delete\\\", \\\"metadata\\\": { \\\"key\\\": \\\"my-test-file.txt\\\" }}' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"delete\", \"metadata\": { \"key\": \"my-test-file.txt\" }}' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Dapr API Token\nDESCRIPTION: Creates a Kubernetes secret to store the Dapr API token that must be created in each namespace where token authentication is needed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic dapr-api-token --from-literal=token=<token>\n```\n\n----------------------------------------\n\nTITLE: Creating State Entry with Dapr HTTP API\nDESCRIPTION: Shell command using curl to create a state entry in the Dapr state store through the HTTP API. Demonstrates POST request with JSON payload.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '[{ \"key\": \"name\", \"value\": \"Bruce Wayne\", \"metadata\": {}}]' http://localhost:$PORT/v1.0/state/prod-mystore\n```\n\n----------------------------------------\n\nTITLE: Performing State Transactions using HTTP API (Bash)\nDESCRIPTION: Example of performing state transactions using direct HTTP API calls with curl in Bash. Shows how to execute transactions and retrieve results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"operations\": [{\"operation\":\"upsert\", \"request\": {\"key\": \"order_1\", \"value\": \"250\"}}, {\"operation\":\"delete\", \"request\": {\"key\": \"order_2\"}}]}' http://localhost:3601/v1.0/state/statestore/transaction\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"keys\":[\"order_1\", \"order_2\"]}' http://localhost:3601/v1.0/state/statestore/bulk\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Docker Container for Tracing\nDESCRIPTION: Command to launch the Zipkin Docker container for workflow trace visualization on port 9411.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Raising Workflow Event in C#\nDESCRIPTION: Illustrates how to raise an event to a Dapr workflow using the C# SDK. It uses the DaprClient to send a manager approval event to a specific workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n// Raise the workflow event to the waiting workflow\nawait daprClient.RaiseWorkflowEventAsync(\n    instanceId: orderId,\n    workflowComponent: \"dapr\",\n    eventName: \"ManagerApproval\",\n    eventData: ApprovalResult.Approved);\n```\n\n----------------------------------------\n\nTITLE: Returning Bulk Delete Row Mismatch Error in .NET\nDESCRIPTION: This C# code illustrates how to return a Bulk Delete Row Mismatch error in a Dapr pluggable component. It uses an ErrorInfo object with an Internal status code to provide additional metadata about the error.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar errorInfo = new Google.Rpc.ErrorInfo();\n\nerrorInfo.Metadata.Add(\"expected\", \"100\");\nerrorInfo.Metadata.Add(\"affected\", \"99\");\n\nvar baseStatusCode = Grpc.Core.StatusCode.Internal;\nvar status = new Google.Rpc.Status{\n    Code = (int)baseStatusCode\n};\n\nstatus.Details.Add(Google.Protobuf.WellKnownTypes.Any.Pack(errorInfo));\n\nvar metadata = new Metadata();\nmetadata.Add(\"grpc-status-details-bin\", status.ToByteArray());\nthrow new RpcException(new Grpc.Core.Status(baseStatusCode, \"fake-err-msg\"), metadata);\n```\n\n----------------------------------------\n\nTITLE: Defining OPA Middleware Component in YAML\nDESCRIPTION: This YAML snippet defines an OPA middleware component for Dapr, specifying the policy, included headers, default status, and whether to read the request body.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-opa.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-policy\nspec:\n  type: middleware.http.opa\n  version: v1\n  metadata:\n    - name: includedHeaders\n      value: \"x-my-custom-header, x-jwt-header\"\n    - name: defaultStatus\n      value: 403\n    - name: readBody\n      value: \"false\"\n    - name: rego\n      value: |\n        package http\n\n        default allow = true\n\n        allow = {\n            \"status_code\": 301,\n            \"additional_headers\": {\n                \"location\": \"https://my.site/authorize\"\n            }\n        } {\n            not jwt.payload[\"my-claim\"]\n        }\n\n        allow = {\n            \"allow\": true,\n            \"additional_headers\": {\n                \"x-my-claim\": my_claim\n            }\n        } {\n            my_claim := jwt.payload[\"my-claim\"]\n        }\n        jwt = { \"payload\": payload } {\n            auth_header := input.request.headers[\"Authorization\"]\n            [_, jwt] := split(auth_header, \" \")\n            [_, payload, _] := io.jwt.decode(jwt)\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Object with Curl Command\nDESCRIPTION: Bash command using curl to create an S3 object via the Dapr binding. Shows how to include the operation, data, and metadata in the request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"YOUR_BASE_64_CONTENT\", \"metadata\": { \"storageClass\": \"STANDARD_IA\" } }' /\nhttp://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Single Active Consumer Configuration\nDESCRIPTION: YAML configuration for enabling single active consumer pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: pubsub\nspec:\n  topic: orders\n  routes:\n    default: /orders\n  pubsubname: order-pub-sub\n  metadata:\n    singleActiveConsumer: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Key Secret Definition\nDESCRIPTION: Example of a Kubernetes secret definition for multi-key secret configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/environment-variables-secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: auth-headers-secret\ntype: Opaque\nstringData:\n  auth-header-value: \"AUTH=mykey\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Redis State Values\nDESCRIPTION: Redis command to view the state values stored by Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhgetall \"myapp||name\"\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in JavaScript\nDESCRIPTION: Unsubscribes from configuration updates and exits the application using the Dapr JavaScript SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Unsubscribe to config updates and exit app after 20 seconds\nsetTimeout(() => {\n  stream.stop();\n  console.log(\"App unsubscribed to config changes\");\n  process.exit(0);\n},\n```\n\n----------------------------------------\n\nTITLE: List Running Dapr Applications\nDESCRIPTION: Commands to view currently running Dapr applications in both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ndapr list\n```\n\n----------------------------------------\n\nTITLE: Getting Components List in Kubernetes\nDESCRIPTION: Command to list all Dapr components deployed in a Kubernetes cluster. This helps verify if required components like state stores or pub/sub brokers are properly installed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get components\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes using Helm\nDESCRIPTION: Commands to add the Bitnami Helm repo and install Redis on a Kubernetes cluster. This setup is required for using Redis with Dapr in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install redis bitnami/redis\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr on Kubernetes with Development Flag\nDESCRIPTION: Initialize Dapr on Kubernetes with additional Redis and Zipkin deployments for development purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --dev\n```\n\n----------------------------------------\n\nTITLE: Go Job Event Handler Registration\nDESCRIPTION: Implementation of job event handler registration for processing droid jobs\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfor _, jobName := range jobNames {\n\tif err := server.AddJobEventHandler(jobName, handleJob); err != nil {\n\t\tlog.Fatalf(\"failed to register job event handler: %v\", err)\n\t}\n\tfmt.Println(\"Registered job handler for: \", jobName)\n}\n\nfmt.Println(\"Starting server on port: \" + appPort)\nif err = server.Start(); err != nil {\n\tlog.Fatalf(\"failed to start server: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: APNS Binding Configuration with Production Settings\nDESCRIPTION: Example YAML configuration for APNS binding in production environment with secret reference for private key storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/apns.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: apns\nspec:\n  type: bindings.apns\n  metadata:\n  - name: development\n    value: false\n  - name: key-id\n    value: PUT-KEY-ID-HERE\n  - name: team-id\n    value: PUT-APPLE-TEAM-ID-HERE\n  - name: private-key\n    secretKeyRef:\n      name: apns-secrets\n      key: private-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Storage Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up the Local Storage binding component in Dapr. Specifies the component type and required metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.localstorage\n  version: v1\n  metadata:\n  - name: rootPath\n    value: \"<string>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-App Run with dapr.yaml\nDESCRIPTION: This YAML file defines the configuration for running multiple Dapr applications. It specifies the common resources path and details for the order-processor and checkout-sdk apps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appID: order-processor\n    appDirPath: ./order-processor/\n    appPort: 7006\n    command: [\"mvn\", \"spring-boot:run\"]\n  - appID: checkout-sdk\n    appDirPath: ./checkout/\n    command: [\"mvn\", \"spring-boot:run\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus in Kubernetes with Helm\nDESCRIPTION: Helm commands to add the Prometheus community repository and install Prometheus in the dapr-monitoring namespace on a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\nhelm install dapr-prom prometheus-community/prometheus -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Restarting Order Processor Service with Dapr in .NET\nDESCRIPTION: Bash command to restart the order-processor service using Dapr CLI with specified ports and protocols for .NET implementation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 7001 --app-id order-processor --app-protocol http --dapr-http-port 3501 -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Setting Up Microsoft Entra ID Credentials for Event Grid\nDESCRIPTION: PowerShell script to configure Microsoft Entra ID credentials for authenticating Event Grid messages and managing event subscriptions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Set the client ID of the app you created\n$clientId = \"...\"\n\n# Authenticate with the Microsoft Graph\n# You may need to add the -TenantId flag to the next command if needed\nConnect-MgGraph -Scopes \"Application.Read.All\",\"Application.ReadWrite.All\"\n./setup-eventgrid-sp.ps1 $clientId\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Dapr Debugging in Kubernetes\nDESCRIPTION: This Bash command sets up port forwarding to expose the internal debug port of the Dapr sidecar to the external IDE for remote debugging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-daprd.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward nodeapp-78866448f5-pqdtr 40000:40000\n```\n\n----------------------------------------\n\nTITLE: Invoking Azure Storage Queues Binding with Custom TTL in Shell\nDESCRIPTION: This curl command demonstrates how to invoke the Azure Storage Queues binding with a custom Time To Live (TTL) setting for a specific message. It shows the usage of metadata to override the default TTL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/storagequeues.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myStorageQueue \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        },\n        \"metadata\": {\n          \"ttlInSeconds\": \"60\"\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Huawei OBS using JSON\nDESCRIPTION: JSON payload for uploading a binary file to Huawei OBS. Shows the 'upload' operation with metadata for specifying the destination file name and source file path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"upload\",\n  \"metadata\": {\n     \"key\": \"DESTINATION_FILE_NAME\"\n   },\n  \"data\": {\n     \"sourceFile\": \"PATH_TO_YOUR_SOURCE_FILE\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Component Configuration with Header Escaping\nDESCRIPTION: YAML configuration for Kafka pub/sub component with header escaping enabled\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-escape-headers\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"none\"\n  - name: escapeHeaders\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Executing Query for California Employees (Bash)\nDESCRIPTION: Sends a POST request to execute the query for California employees using curl in Bash.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST -H \"Content-Type: application/json\" -d @query-api-examples/query1.json http://localhost:3500/v1.0-alpha1/state/statestore/query | jq .\n```\n\n----------------------------------------\n\nTITLE: Omitting Health Checks from API Logs\nDESCRIPTION: Dapr Configuration spec to omit health check calls from API logs. This reduces noise in the logs by excluding frequent health check endpoint calls when API logging is enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  apiLogging:\n    omitHealthChecks: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Mistral Conversation Component in YAML for Dapr\nDESCRIPTION: This YAML configuration sets up the Mistral conversation component for Dapr. It specifies the API key, model, and cache TTL. The component type is 'conversation.mistral' and uses API version 'dapr.io/v1alpha1'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/mistral.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mistral\nspec:\n  type: conversation.mistral\n  metadata:\n  - name: key\n    value: mykey\n  - name: model\n    value: open-mistral-7b\n  - name: cacheTTL\n    value: 10m\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body for Unlocking in Dapr\nDESCRIPTION: The JSON payload structure for the unlock request. It requires both the resourceId and lockOwner to identify the specific lock to be released.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resourceId\": \"\",\n    \"lockOwner\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Profile for Dapr in Linux/MacOS\nDESCRIPTION: Demonstrates how to tell Dapr which AWS profile to use by specifying the AWS_PROFILE environment variable when running Dapr or the Dapr runtime directly in standalone mode on Linux or MacOS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/AWS/authenticating-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=myprofile dapr run...\n```\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=myprofile daprd...\n```\n\n----------------------------------------\n\nTITLE: Testing Azure Event Grid Binding Locally with ngrok\nDESCRIPTION: Bash commands for setting up local testing of Azure Event Grid binding using ngrok for creating a public endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using port 9000 as an example\nngrok http --host-header=localhost 9000\n```\n\n----------------------------------------\n\nTITLE: Executing Zeebe Deploy-Resource Operation in JSON\nDESCRIPTION: JSON payload for performing a 'deploy-resource' operation with the Zeebe command binding. This operation deploys a single resource (BPMN or DMN) to Zeebe.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"YOUR_FILE_CONTENT\",\n  \"metadata\": {\n    \"fileName\": \"products-process.bpmn\"\n  },\n  \"operation\": \"deploy-resource\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Actor Method using cURL\nDESCRIPTION: Example of invoking an actor method using a cURL command. This snippet shows how to make a POST request to call a specific method on an actor instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3000/actors/stormtrooper/50/method/performAction \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Client Secret\nDESCRIPTION: Command to create a Kubernetes secret for storing the Azure Key Vault client secret. This secret will be referenced in the component configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic [your_k8s_secret_name] --from-literal=[your_k8s_secret_key]=[your_client_secret]\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Timeout\nDESCRIPTION: Wait for Dapr installation to complete with a specified timeout duration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --wait --timeout 600\n```\n\n----------------------------------------\n\nTITLE: Programmatic Subscription to Raw Messages in PHP\nDESCRIPTION: Example of programmatically subscribing to raw pub/sub messages in PHP by setting the rawPayload metadata flag to true in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$app = \\Dapr\\App::create(configure: fn(\\DI\\ContainerBuilder $builder) => $builder->addDefinitions(['dapr.subscriptions' => [\n    new \\Dapr\\PubSub\\Subscription(pubsubname: 'pubsub', topic: 'deathStarStatus', route: '/dsstatus', metadata: [ 'rawPayload' => 'true'] ),\n]]));\n\n$app->post('/dsstatus', function(\n    #[\\Dapr\\Attributes\\FromBody]\n    \\Dapr\\PubSub\\CloudEvent $cloudEvent,\n    \\Psr\\Log\\LoggerInterface $logger\n    ) {\n        $logger->alert('Received event: {event}', ['event' => $cloudEvent]);\n        return ['status' => 'SUCCESS'];\n    }\n);\n\n$app->start();\n```\n\n----------------------------------------\n\nTITLE: Querying All Actor State Keys in SQL Server\nDESCRIPTION: Retrieves all state keys for a specific actor instance by combining application ID, actor type, and actor ID in the query pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE [Key] LIKE 'mypets||cat||leroy||%'\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Creating Object with Random UUID in Linux/MacOS\nDESCRIPTION: This bash command shows how to use curl to create an object in Alibaba Cloud OSS with a randomly generated UUID as the key on Linux or MacOS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\" }' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Secrets File in Dapr\nDESCRIPTION: Example JSON structure for storing secrets in a file to be used with the local file secret store component. Shows how to define top-level secrets and nested secret structures.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redisPassword\": \"your redis password\",\n    \"connectionStrings\": {\n        \"sql\": \"your sql connection string\",\n        \"mysql\": \"your mysql connection string\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Topic Subscription in .NET\nDESCRIPTION: C# code that defines an HTTP POST endpoint to receive messages from the 'orders' topic. This endpoint matches the route defined in the subscription configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n //Subscribe to a topic \n[HttpPost(\"orders\")]\npublic void getCheckout([FromBody] int orderId)\n{\n    Console.WriteLine(\"Subscriber received : \" + orderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Invalid Error in Go\nDESCRIPTION: This Go code shows how to return an ETag Invalid error in a Dapr pluggable component. It creates a status with an InvalidArgument code and includes a BadRequest detail with a FieldViolation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nst := status.New(codes.InvalidArgument, \"fake-err-msg\")\ndesc := \"The ETag field must only contain alphanumeric characters\"\nv := &errdetails.BadRequest_FieldViolation{\n\tField:       etagField,\n\tDescription: desc,\n}\nbr := &errdetails.BadRequest{}\nbr.FieldViolations = append(br.FieldViolations, v)\nst, err := st.WithDetails(br)\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr HTTP API (appid strategy)\nDESCRIPTION: This curl command demonstrates how to save state using the Dapr HTTP API. With the 'appid' strategy, the key will be saved as 'myApp||darth'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-share-state.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/redis \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"darth\",\n          \"value\": \"nihilus\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Setting Message TTL with Azure Service Bus Binding in Dapr\nDESCRIPTION: Example showing how to set a Time-To-Live (TTL) value for a specific message using the Dapr binding API. The TTL is set to 60 seconds using the metadata.ttlInSeconds field.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/servicebusqueues.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myServiceBusQueue \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        },\n        \"metadata\": {\n          \"ttlInSeconds\": \"60\"\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Configuration Changes in Dapr\nDESCRIPTION: HTTP GET request format to subscribe to all configuration changes in a specified Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/mystore/subscribe\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Events Binding Component in YAML\nDESCRIPTION: Basic YAML configuration for setting up a Kubernetes Events binding component with required and optional metadata fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubernetes-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.kubernetes\n  version: v1\n  metadata:\n  - name: namespace\n    value: \"<NAMESPACE>\"\n  - name: resyncPeriodInSec\n    value: \"<seconds>\"\n  - name: direction\n    value: \"input\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Multi-App Run Parameters\nDESCRIPTION: Reference table showing configuration parameters for Dapr multi-app deployment, including log destination settings, container image configuration, and service creation options for Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| `daprdLogDestination`      |    N     | Log destination for outputting daprd logs; Its value can be file, console or fileAndConsole. Default is file                                                                                                            | `file`, `console`, `fileAndConsole`            |\n| `containerImage`           |    N     | URI of the container image to be used when deploying to Kubernetes dev/test environment.                                                                                                                                | `ghcr.io/dapr/samples/hello-k8s-python:latest` |\n| `containerImagePullPolicy` |    N     | The container image pull policy (default to `Always`).                                                                                                                                                                  | `Always`, `IfNotPresent`, `Never`              |\n| `createService`            |    N     | Create a Kubernetes service for the application when deploying to dev/test environment.                                                                                                                                 | `true`, `false`                                |\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Encryption Key in Dapr State Store YAML\nDESCRIPTION: Adding the primaryEncryptionKey metadata configuration to a Dapr state store component to enable encryption. The encryption key is fetched from a secret store rather than being provided as plaintext.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-encrypt-state.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n- name: primaryEncryptionKey\n  secretKeyRef:\n    name: mysecret\n    key: mykey # key is optional.\n```\n\n----------------------------------------\n\nTITLE: Removing Actor Timer in Dapr\nDESCRIPTION: HTTP DELETE request to remove a timer for a Dapr actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/actors-timers-reminders.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nDELETE http://localhost:3500/v1.0/actors/<actorType>/<actorId>/timers/<name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Binding Directions in YAML\nDESCRIPTION: Example of how to specify binding directions in component metadata to indicate supported operations (input, output, or both) and optimize Dapr sidecar behavior.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/bindings-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  direction: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus as a Process with Custom Configuration\nDESCRIPTION: Command to run Prometheus as a local process with a specified configuration file and custom web interface port. The port is set to 8080 to avoid conflicts with Dapr's metrics endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --config.file=/tmp/prometheus.yml --web.listen-address=:8080\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Format with Dapr API Token\nDESCRIPTION: Example of the HTTP request format showing how to include the Dapr API token in the header.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nGET http://<daprAddress>/v1.0/metadata\ndapr-api-token: <token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Dapr Binding Component Structure\nDESCRIPTION: Basic YAML structure for defining a Dapr binding component with metadata and namespace configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  type: bindings.<TYPE>\n  version: v1\n  metadata:\n  - name: <NAME>\n    value: <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on Windows without Admin Rights\nDESCRIPTION: Installs a specific version of the Dapr CLI to an alternate directory without requiring administrative rights.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:DAPR_INSTALL_DIR = \"<your_alt_install_dir_path>\"\n$script=iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1; $block=[ScriptBlock]::Create($script); invoke-command -ScriptBlock $block -ArgumentList \"{{% dapr-latest-version cli=\\\"true\\\" %}}\", \"$Env:DAPR_INSTALL_DIR\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS DynamoDB Binding Component in YAML\nDESCRIPTION: This YAML configuration sets up an AWS DynamoDB binding component for Dapr. It specifies the component type, version, and required metadata including table name, AWS region, and authentication credentials.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/dynamodb.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.aws.dynamodb\n  version: v1\n  metadata:\n  - name: table\n    value: \"items\"\n  - name: region\n    value: \"us-west-2\"\n  - name: accessKey\n    value: \"*****************\"\n  - name: secretKey\n    value: \"*****************\"\n  - name: sessionToken\n    value: \"*****************\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Dapr API Access in YAML\nDESCRIPTION: This YAML configuration enables all Dapr APIs for both HTTP and gRPC by default. It sets up a Configuration resource with tracing enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/api-allowlist.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: myappconfig\n  namespace: default\nspec:\n  tracing:\n    samplingRate: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Low Cardinality Without Path Matching Configuration\nDESCRIPTION: A YAML snippet showing HTTP metrics configuration with low cardinality but without path matching. This configuration drops path information from metrics to reduce cardinality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  increasedCardinality: false\n```\n\n----------------------------------------\n\nTITLE: Saving State with Default Partition Key in Azure Cosmos DB\nDESCRIPTION: HTTP request using curl to save state in Azure Cosmos DB using the key as the partition key. When no explicit partition key is provided, the state store uses the key value as the partition key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/<store_name> \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"nihilus\",\n          \"value\": \"darth\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Redis State Store Component Configuration\nDESCRIPTION: YAML configuration for the Redis state store component used by Dapr. Defines the component type, version, and connection details for Redis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Remote Debugging\nDESCRIPTION: Kubernetes command to set up port forwarding from the local machine to the Dapr operator pod for remote debugging on port 40000.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward dapr-operator-7878f94fcd-6bfx9 40000:40000 -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Verifying Dapr Installation on Kubernetes\nDESCRIPTION: Check the status of Dapr-related pods in the dapr-system namespace to confirm successful installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace dapr-system\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Environment with Podman\nDESCRIPTION: This command initializes the Dapr control plane containers and creates a default configuration file using Podman as the container runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-podman.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --container-runtime podman\n```\n\n----------------------------------------\n\nTITLE: Launching Sentry Service with Custom Certificates\nDESCRIPTION: Command to start the Sentry service with custom issuer credentials and trust domain configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n./sentry --issuer-credentials $HOME/.dapr/certs --trust-domain cluster.local\n```\n\n----------------------------------------\n\nTITLE: Storing State in DynamoDB via HTTP API\nDESCRIPTION: Example of using curl to store state in DynamoDB through Dapr's HTTP API endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-dynamodb.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/<store_name> \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"A12345\",\n          \"value\": \"Dapr Contract\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Activate-Jobs Response Structure in JSON\nDESCRIPTION: This snippet shows the structure of the response returned by the activate-jobs operation. It includes details such as job key, type, process instance information, and variables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": 2251799813685267,\n    \"type\": \"fetch-products\",\n    \"processInstanceKey\": 2251799813685260,\n    \"bpmnProcessId\": \"products\",\n    \"processDefinitionVersion\": 1,\n    \"processDefinitionKey\": 2251799813685249,\n    \"elementId\": \"Activity_test\",\n    \"elementInstanceKey\": 2251799813685266,\n    \"customHeaders\": \"{\\\"process-header-1\\\":\\\"1\\\",\\\"process-header-2\\\":\\\"2\\\"}\",\n    \"worker\": \"test\", \n    \"retries\": 1,\n    \"deadline\": 1694091934039,\n    \"variables\":\"{\\\"productId\\\":\\\"some-product-id\\\"}\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Flattened Secret with cURL\nDESCRIPTION: HTTP request to retrieve a flattened secret from the Dapr secret store API. This example shows how to access a nested secret when using name/value semantics (multiValued=false).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:3501/v1.0/secrets/local-secret-store/connectionStrings:sql\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connectionStrings:sql\": \"your sql connection string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Latency Bucket Configuration in Dapr\nDESCRIPTION: The default latency bucket values used by Dapr for grouping request latency metrics. These buckets range from 1ms to 100000ms in a cumulative fashion.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n1, 2, 3, 4, 5, 6, 8, 10, 13, 16, 20, 25, 30, 40, 50, 65, 80, 100, 130, 160, 200, 250, 300, 400, 500, 650, 800, 1000, 2000, 5000, 10000, 20000, 50000, 100000\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Dapr Helm Repository\nDESCRIPTION: Bash commands for adding or updating the official Dapr Helm repository, as well as a private repository. It also includes a command to search for available chart versions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add/update a official Dapr Helm repo.\nhelm repo add dapr https://dapr.github.io/helm-charts/\n# or add/update a private Dapr Helm repo.\nhelm repo add dapr http://helm.custom-domain.com/dapr/dapr/ \\\n   --username=xxx --password=xxx\nhelm repo update\n\n# See which chart versions are available\nhelm search repo dapr --devel --versions\n```\n\n----------------------------------------\n\nTITLE: Modifying Azure Monitor ConfigMap for Custom Namespace\nDESCRIPTION: YAML snippet showing how to customize the Azure Monitor ConfigMap to enable Prometheus metrics collection from specific Kubernetes namespaces where Dapr is installed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  prometheus-data-collection-settings: |-\n    [prometheus_data_collection_settings.cluster]\n        interval = \"1m\"\n        monitor_kubernetes_pods = true\n        monitor_kubernetes_pods_namespaces = [\"dapr-system\", \"default\"]\n    [prometheus_data_collection_settings.node]\n        interval = \"1m\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring HuaweiCloud CSMS Secret Store Component in Dapr\nDESCRIPTION: YAML configuration for setting up HuaweiCloud Cloud Secret Management Service (CSMS) as a secret store component in Dapr. The configuration requires region, accessKey, and secretAccessKey to connect to the HuaweiCloud CSMS instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/huaweicloud-csms.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: huaweicloudcsms\nspec:\n  type: secretstores.huaweicloud.csms\n  version: v1\n  metadata:\n  - name: region\n    value: \"[huaweicloud_region]\"\n  - name: accessKey \n    value: \"[huaweicloud_access_key]\"\n  - name: secretAccessKey\n    value: \"[huaweicloud_secret_access_key]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Mock LLM Component in YAML for Dapr\nDESCRIPTION: This YAML configuration sets up an echo mock LLM component for Dapr, which can be used for testing conversation applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: echo\nspec:\n  type: conversation.echo\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Dapr Components Command Examples\nDESCRIPTION: Demonstrates various ways to use the dapr components command in Kubernetes environments, including listing components across namespaces and filtering by specific component names.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-components.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List Dapr components in all namespaces in Kubernetes mode\ndapr components -k\n\n# List Dapr components in specific namespace in Kubernetes mode\ndapr components -k --namespace default\n\n# Print specific Dapr component in Kubernetes mode\ndapr components -k -n mycomponent\n\n# List Dapr components in all namespaces in Kubernetes mode\ndapr components -k --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Configuring SFTP Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an SFTP binding component with required and optional metadata fields including authentication and host validation options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sftp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.sftp\n  version: v1\n  metadata:\n  - name: rootPath\n    value: \"<string>\"\n  - name: address\n    value: \"<string>\"\n  - name: username\n    value: \"<string>\"\n  - name: password\n    value: \"*****************\"\n  - name: privateKey\n    value: \"*****************\"\n  - name: privateKeyPassphrase\n    value: \"*****************\"\n  - name: hostPublicKey\n    value: \"*****************\"\n  - name: knownHostsFile\n    value: \"<string>\"\n  - name: insecureIgnoreHostKey\n    value: \"<bool>\"\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Object with Presigned URL (Windows)\nDESCRIPTION: Windows command using curl to create an S3 object with a presigned URL. Demonstrates setting the presignTTL metadata for temporary access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\", \\\"metadata\\\": { \\\"presignTTL\\\": \\\"15m\\\" } }\" \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud Tablestore Binding in YAML\nDESCRIPTION: YAML configuration for setting up an Alibaba Cloud Tablestore binding component in Dapr. Includes required metadata fields such as endpoint, access credentials, instance name, and table name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudtablestore.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mytablestore\nspec:\n  type: bindings.alicloud.tablestore\n  version: v1\n  metadata:\n  - name: endpoint\n    value: \"[endpoint]\"\n  - name: accessKeyID\n    value: \"[key-id]\"\n  - name: accessKey\n    value: \"[access-key]\"\n  - name: instanceName\n    value: \"[instance]\"\n  - name: tableName\n    value: \"[table]\"\n  - name: endpoint\n    value: \"[endpoint]\"\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper Locally with Docker\nDESCRIPTION: Docker command to run a Zookeeper instance locally for development purposes. Sets up a container that automatically restarts and runs in detached mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-zookeeper.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name some-zookeeper --restart always -d zookeeper\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation with Custom Docker Network\nDESCRIPTION: Install Dapr in a specific Docker network for isolation or Docker Compose compatibility\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create mynet\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --network mynet\n```\n\n----------------------------------------\n\nTITLE: Creating a File in GCP Storage Bucket using cURL (Windows)\nDESCRIPTION: This cURL command demonstrates how to create a file in a GCP Storage Bucket on Windows. It sends a POST request with the create operation and file content.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\" }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Redis Get Operation with Delete Flag\nDESCRIPTION: JSON request format for retrieving and deleting a record from Redis using the get operation with delete flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"key\": \"key1\",\n    \"delete\": \"true\"\n  },\n  \"data\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Postmark Binding Request Payload in JSON\nDESCRIPTION: This JSON snippet shows an example request payload for the Postmark binding. It includes the 'create' operation, metadata for email details, and HTML content for the email body.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postmark.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"emailTo\": \"changeme@example.net\",\n    \"subject\": \"An email from Dapr Postmark binding\"\n  },\n  \"data\": \"<h1>Testing Dapr Bindings</h1>This is a test.<br>Bye!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Multi-App Run with YAML\nDESCRIPTION: This YAML configuration defines the setup for running multiple Dapr applications, specifying the app directories, IDs, ports, and startup commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nversion: 1\napps:\n  - appDirPath: ./order-processor/\n    appID: order-processor\n    appPort: 5001\n    command: [\"npm\", \"start\"]\n  - appID: checkout\n    appDirPath: ./checkout/\n    command: [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: JSON Response Body for Unlock Operation in Dapr\nDESCRIPTION: The JSON response returned after an unlock operation, containing a status code that indicates the result of the operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Subscription Resource (v1alpha1)\nDESCRIPTION: This YAML snippet shows the structure of a deprecated v1alpha1 Subscription resource in Dapr. It includes fields for topic, route, pubsub name, dead letter topic, and bulk subscribe options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/subscription-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Subscription\nmetadata:\n  name: <REPLACE-WITH-RESOURCE-NAME>\nspec:\n  topic: <REPLACE-WITH-TOPIC-NAME> # Required\n  route: <REPLACE-WITH-ROUTE-NAME> # Required\n  pubsubname: <REPLACE-WITH-PUBSUB-NAME> # Required\n  deadLetterTopic: <REPLACE-WITH-DEAD-LETTER-TOPIC-NAME> # Optional\n  bulkSubscribe: # Optional\n  - enabled: <REPLACE-WITH-BOOLEAN-VALUE>\n  - maxMessagesCount: <REPLACE-WITH-VALUE>\n  - maxAwaitDurationMs: <REPLACE-WITH-VALUE>\nscopes:\n- <REPLACE-WITH-SCOPED-APPIDS>\n```\n\n----------------------------------------\n\nTITLE: Setting State TTL in Python using Dapr Client\nDESCRIPTION: Demonstrates how to save state with TTL metadata using Python Dapr client. Sets a TTL of 120 seconds for a state entry.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-store-ttl.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#dependencies\n\nfrom dapr.clients import DaprClient\n\n#code\n\nDAPR_STORE_NAME = \"statestore\"\n\nwith DaprClient() as client:\n        client.save_state(DAPR_STORE_NAME, \"order_1\", str(orderId), state_metadata={\n            'ttlInSeconds': '120'\n        })\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --app-port 6001 --dapr-http-port 3601 --dapr-grpc-port 60001 -- python3 OrderProcessingService.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading Custom Certificates with Helm\nDESCRIPTION: Helm command to upgrade Dapr with new custom certificates, specifying the paths to the issuer and root certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade \\\n  --set-file dapr_sentry.tls.issuer.certPEM=issuer.pem \\\n  --set-file dapr_sentry.tls.issuer.keyPEM=issuer.key \\\n  --set-file dapr_sentry.tls.root.certPEM=root.pem \\\n  --namespace dapr-system \\\n  dapr \\\n  dapr/dapr\n```\n\n----------------------------------------\n\nTITLE: Executing JSON Query on Redis State Store\nDESCRIPTION: cURL command to execute a JSON query on the Redis state store using the Dapr query API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST -H \"Content-Type: application/json\" -d @query-api-examples/query1.json \\\n  'http://localhost:3500/v1.0-alpha1/state/querystatestore/query?metadata.contentType=application/json&metadata.queryIndexName=orgIndx'\n```\n\n----------------------------------------\n\nTITLE: Listing Redis Keys\nDESCRIPTION: Redis command to list all keys, showing how Dapr creates key-value pairs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkeys *\n```\n\n----------------------------------------\n\nTITLE: Creating State in Azure Blob Storage with HTTP Request\nDESCRIPTION: Example cURL command to save state to the Azure Blob Storage state store through Dapr's state API. This creates a blob file in the container with the key as filename and value as the file contents.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"nihilus\",\n          \"value\": \"darth\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Configuration Resource\nDESCRIPTION: Example of applying a Dapr configuration YAML file to a Kubernetes cluster using kubectl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f myappconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Running GCP Pub/Sub Emulator Locally with Docker Compose\nDESCRIPTION: Docker Compose configuration for running the GCP Pub/Sub Emulator locally for development purposes. The emulator exposes port 8085 and is configured for a test project named 'local-test-prj'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-gcp-pubsub.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  pubsub:\n    image: gcr.io/google.com/cloudsdktool/cloud-sdk:422.0.0-emulators\n    ports:\n      - \"8085:8085\"\n    container_name: gcp-pubsub\n    entrypoint: gcloud beta emulators pubsub start --project local-test-prj --host-port 0.0.0.0:8085\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead Letter Topic with Declarative Subscription in YAML\nDESCRIPTION: This YAML snippet shows how to configure a subscription with a dead letter topic named 'poisonMessages' for messages consumed from the 'orders' topic, scoped to an app with a 'checkout' ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-deadletter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v2alpha1\nkind: Subscription\nmetadata:\n  name: order\nspec:\n  topic: orders\n  routes: \n    default: /checkout\n  pubsubname: pubsub\n  deadLetterTopic: poisonMessages\nscopes:\n- checkout\n```\n\n----------------------------------------\n\nTITLE: Releasing a Distributed Lock using HTTP in Dapr\nDESCRIPTION: HTTP request to release a previously acquired lock using Dapr's unlock API. The request specifies the resource ID and lock owner to identify which lock to release.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0-alpha1/unlock/lockstore\n   -H 'Content-Type: application/json'\n   -d '{\"resourceId\":\"my_file_name\", \"lockOwner\":\"random_id_abc123\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Binding Example\nDESCRIPTION: Complete example of a Kafka binding configuration with broker settings, topics, and bidirectional support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafkaevent\nspec:\n  type: bindings.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"http://localhost:5050\"\n  - name: topics\n    value: \"someTopic\"\n  - name: publishTopic\n    value: \"someTopic2\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: \"direction\"\n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Starting Dapr Application with MongoDB State Store\nDESCRIPTION: Launches a Dapr application using MongoDB as the state store, specifying the component configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id demo --dapr-http-port 3500 --resources-path query-api-examples/components/mongodb\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Service for Zipkin\nDESCRIPTION: Kubernetes command to expose the Zipkin deployment as a ClusterIP service on port 9411.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deployment zipkin --type ClusterIP --port 9411\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Secret Store for Dapr\nDESCRIPTION: Create a local JSON file named 'mysecrets.json' with a sample secret. This file will be used as a local secret store for Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"my-secret\" : \"I'm Batman\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Java services with Dapr service invocation over HTTP/HTTPS\nDESCRIPTION: Commands to run Java services with Dapr, assigning app IDs, configuring HTTP/HTTPS protocols, and setting Dapr HTTP ports for service invocation between a checkout service and order processor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol http --dapr-http-port 3500 -- java -jar target/CheckoutService-0.0.1-SNAPSHOT.jar\n\ndarpr run --app-id order-processor --app-port 9001 --app-protocol http --dapr-http-port 3501 -- java -jar target/OrderProcessingService-0.0.1-SNAPSHOT.jar\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --dapr-http-port 3500 --app-protocol https -- java -jar target/CheckoutService-0.0.1-SNAPSHOT.jar\n\ndarpr run --app-id order-processor --app-port 9001 --dapr-http-port 3501 --app-protocol https -- java -jar target/OrderProcessingService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Dapr Resiliency Documentation\nDESCRIPTION: YAML frontmatter block that configures the metadata for a documentation page about Dapr's resiliency features. Specifies the document type, title, navigation link text, ordering weight, and description.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: docs\ntitle: \"Resiliency Quickstarts\"\nlinkTitle: \"Resiliency\"\nweight: 100\ndescription: \"Get started with Dapr's resiliency component\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr State Store Component in YAML\nDESCRIPTION: YAML configuration structure for a Dapr state store component defining the store name, type and metadata properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  type: state.<TYPE>\n  version: v1\n  metadata:\n  - name:<KEY>\n    value:<VALUE>\n  - name: <KEY>\n    value: <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment with Dapr and Prometheus Annotations\nDESCRIPTION: Example Kubernetes deployment YAML that includes annotations for enabling Dapr sidecar with JSON logging and Prometheus metrics scraping. These annotations are required for Azure Monitor to collect metrics from the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pythonapp\n  namespace: default\n  labels:\n    app: python\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: python\n  template:\n    metadata:\n      labels:\n        app: python\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"pythonapp\"\n        dapr.io/log-as-json: \"true\"\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9090\"\n        prometheus.io/path: \"/\"\n\n...\n```\n\n----------------------------------------\n\nTITLE: S3 Object Creation Response\nDESCRIPTION: Example JSON response from creating an S3 object. Includes the object's location, version ID (if applicable), and presigned URL for temporary access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"location\":\"https://<your bucket>.s3.<your region>.amazonaws.com/<key>\",\n    \"versionID\":\"<version ID if Bucket Versioning is enabled>\",\n    \"presignURL\": \"https://<your bucket>.s3.<your region>.amazonaws.com/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret Manifest for Token Rotation\nDESCRIPTION: YAML manifest for creating or updating the Dapr API token secret in Kubernetes during token rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: dapr-api-token\ntype: Opaque\ndata:\n  token: <your-new-token>\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Deployment in Kubernetes\nDESCRIPTION: Kubernetes command to check if Prometheus pods are running correctly in the dapr-monitoring namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr on Kubernetes\nDESCRIPTION: This bash command initializes Dapr on the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --kubernetes\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Configuration Template\nDESCRIPTION: YAML configuration template for creating an EKS cluster with managed node groups and necessary addons. Includes settings for cluster metadata, IAM, node groups, and core Kubernetes components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: [your_cluster_name]\n  region: [your_cluster_region]\n  version: [your_k8s_version]\n  tags:\n    karpenter.sh/discovery: [your_cluster_name]\n\niam:\n  withOIDC: true\n\nmanagedNodeGroups:\n  - name: mng-od-4vcpu-8gb\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 5\n    instanceType: c5.xlarge\n    privateNetworking: true\n\naddons:\n  - name: vpc-cni \n    attachPolicyARNs:\n      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n  - name: coredns\n    version: latest \n  - name: kube-proxy\n    version: latest\n  - name: aws-ebs-csi-driver\n    wellKnownPolicies: \n      ebsCSIController: true\n```\n\n----------------------------------------\n\nTITLE: Scheduling and Retrieving C3PO Job in Go\nDESCRIPTION: Shows how to schedule a job for C3PO and retrieve its job data with error handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Schedule C-3PO job\nerr = schedule(droidJobs[1])\nif err != nil {\n\tlog.Fatalln(\"Error scheduling job: \", err)\n}\n\n// Get C-3PO job\nresp, err := get(droidJobs[1])\nif err != nil {\n\tlog.Fatalln(\"Error retrieving job: \", err)\n}\nfmt.Println(\"Get job response: \", resp)\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation with Private Registry\nDESCRIPTION: Install Dapr using container images from a private registry\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --image-registry docker.io/username\n```\n\n----------------------------------------\n\nTITLE: Including HTTP Verbs in Metrics Configuration\nDESCRIPTION: A YAML snippet demonstrating how to include HTTP verbs in metrics reporting. This is the default behavior that provides more detailed metrics with method information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  excludeVerbs: false\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr using Helm\nDESCRIPTION: Install the Dapr Helm chart on the Kubernetes cluster in the dapr-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Job Data Response Format\nDESCRIPTION: Example JSON response when retrieving job information, showing the job name, schedule configuration, repeat count, and associated data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/jobs_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"jobforjabba\",\n  \"schedule\": \"@every 1m\",\n  \"repeats\": 5,\n  \"data\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics in Dapr\nDESCRIPTION: Configuration for enabling and customizing metrics collection in Dapr. Includes settings for HTTP path matching, error code recording, and cardinality management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/configuration-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nmetrics:\n  enabled: true\n  rules: []\n  latencyDistributionBuckets: []\n  http:\n    increasedCardinality: true\n    pathMatching:\n      - /items\n      - /orders/{orderID}\n      - /orders/{orderID}/items/{itemID}\n      - /payments/{paymentID}\n      - /payments/{paymentID}/status\n      - /payments/{paymentID}/refund\n      - /payments/{paymentID}/details\n    excludeVerbs: false\n  recordErrorCodes: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Kafka Pub/Sub Component\nDESCRIPTION: YAML configuration for setting up a Dapr Kafka pub/sub component in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/autoscale-keda.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: autoscaling-pubsub\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n    - name: brokers\n      value: kafka-cp-kafka.kafka.svc.cluster.local:9092\n    - name: authRequired\n      value: \"false\"\n    - name: consumerID\n      value: autoscaling-subscriber\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dapr mTLS in Linux/MacOS\nDESCRIPTION: Bash commands to set environment variables required for Dapr's mTLS authentication. Points to certificate locations for trust anchors, certificate chain, and certificate key in a self-hosted environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport DAPR_TRUST_ANCHORS=`cat $HOME/.dapr/certs/ca.crt`\nexport DAPR_CERT_CHAIN=`cat $HOME/.dapr/certs/issuer.crt`\nexport DAPR_CERT_KEY=`cat $HOME/.dapr/certs/issuer.key`\nexport NAMESPACE=default\n```\n\n----------------------------------------\n\nTITLE: Azure Cosmos DB Gremlin API Query Request Format\nDESCRIPTION: Example JSON payload for making a query request to the Azure Cosmos DB Gremlin API binding. Shows the structure for executing a Gremlin query operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cosmosdbgremlinapi.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"gremlin\": \"g.V().count()\"\n    },\n  \"operation\": \"query\"\n}\n```\n\n----------------------------------------\n\nTITLE: SendGrid Basic Email Request Example\nDESCRIPTION: JSON example showing how to send a basic email using the SendGrid binding with custom metadata properties for email recipient and subject.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sendgrid.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"metadata\": {\n    \"emailTo\": \"changeme@example.net\",\n    \"subject\": \"An email from Dapr SendGrid binding\"\n  },\n  \"data\": \"<h1>Testing Dapr Bindings</h1>This is a test.<br>Bye!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Local Storage Binding in JSON\nDESCRIPTION: JSON payload for listing files in a specific directory using the Local Storage binding. Demonstrates the list operation with optional directory metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"metadata\": {\n    \"fileName\": \"my/cool/directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dapr Build Information using CLI\nDESCRIPTION: Command to get version and git commit information for dapr CLI and daprd executables. This provides detailed build information about the installed Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-build-info.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr build-info\n```\n\n----------------------------------------\n\nTITLE: Deleting State Object via Dapr API (Bash)\nDESCRIPTION: Curl command to delete a state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -X DELETE -H \"Content-Type: application/json\" http://localhost:3500/v1.0/state/statestore/name\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query in Golang\nDESCRIPTION: This code snippet shows how to execute a GraphQL query using the Dapr binding. It demonstrates creating an InvokeBindingRequest with the query operation and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/graghql.md#2025-04-21_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nin := &dapr.InvokeBindingRequest{\nName:      \"example.bindings.graphql\",\nOperation: \"query\",\nMetadata: map[string]string{ \"query\": `query { users { name } }`},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Binding Component in YAML\nDESCRIPTION: YAML configuration for the Cron binding component that triggers the batch process every 10 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: cron\n  namespace: quickstarts\nspec:\n  type: bindings.cron\n  version: v1\n  metadata:\n  - name: schedule\n    value: \"@every 10s\" # valid cron schedule\n  - name: direction\n    value: \"input\" # direction of the cron binding\n```\n\n----------------------------------------\n\nTITLE: Root Certificate Expiration Warning Message in Dapr CLI\nDESCRIPTION: Shows the warning message format displayed when the Dapr root certificate is approaching expiration. This warning appears when the certificate is within 30 days of expiry.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-status.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDapr root certificate of your Kubernetes cluster expires in <n> days. Expiry date: <date:time> UTC. \nPlease see docs.dapr.io for certificate renewal instructions to avoid service interruptions.\n```\n\n----------------------------------------\n\nTITLE: Populating Redis State Store with JSON Data\nDESCRIPTION: cURL command to populate the Redis state store with a JSON dataset for querying purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d @query-api-examples/dataset.json \\\n  http://localhost:3500/v1.0/state/querystatestore?metadata.contentType=application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring DingTalk Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up an Alibaba Cloud DingTalk binding component. Defines the component type, version, and required metadata fields including webhook ID, URL, secret, and binding direction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloud-dingtalk.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.dingtalk.webhook\n  version: v1\n  metadata:\n  - name: id\n    value: \"test_webhook_id\"\n  - name: url\n    value: \"https://oapi.dingtalk.com/robot/send?access_token=******\"\n  - name: secret\n    value: \"****************\"\n  - name: direction\n    value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Saving State Object (JSON)\nDESCRIPTION: JSON structure representing the state object to be saved, with a key 'name' and value 'Bruce Wayne'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"name\",\n    \"value\": \"Bruce Wayne\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Saving State Object via Dapr API (PowerShell)\nDESCRIPTION: PowerShell command to save a new state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '[{ \"key\": \"name\", \"value\": \"Bruce Wayne\"}]' -Uri 'http://localhost:3500/v1.0/state/statestore'\n```\n\n----------------------------------------\n\nTITLE: Clearing Dapr Trust Bundle Secret in Kubernetes\nDESCRIPTION: YAML configuration to clear the existing Dapr Trust Bundle secret, which is the first step in regenerating Dapr self-signed certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: dapr-trust-bundle\n  labels:\n    app: dapr-sentry\ndata:\n```\n\n----------------------------------------\n\nTITLE: Invoking Kitex Binding with JSON Request\nDESCRIPTION: This JSON request demonstrates how to invoke the Kitex binding using the 'get' operation. It includes the required metadata fields and a data payload that should be Thrift-encoded binary.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kitex.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"hostPorts\": \"127.0.0.1:8888\",\n    \"destService\": \"echo\",\n    \"methodName\": \"echo\",\n    \"version\":\"0.5.0\"\n  },\n  \"data\": reqdata\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Dashboard with Helm\nDESCRIPTION: Install the Dapr dashboard as part of the control plane using a separate Helm chart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add dapr https://dapr.github.io/helm-charts/\nhelm repo update\nkubectl create namespace dapr-system\nhelm install dapr-dashboard dapr/dapr-dashboard --namespace dapr-system\n```\n\n----------------------------------------\n\nTITLE: Limiting Allowed Topics in Redis Pub/Sub Component\nDESCRIPTION: This YAML configuration restricts the available topics for all applications using the allowedTopics metadata property. Only the specified topics (topic1, topic2, and topic3) can be used, preventing the creation of unplanned topics. This helps govern topic creation and prevents unlimited growth of topics.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: \"localhost:6379\"\n  - name: redisPassword\n    value: \"\"\n  - name: allowedTopics\n    value: \"topic1,topic2,topic3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Uppercase Middleware Component in Dapr\nDESCRIPTION: YAML configuration for defining an uppercase middleware component that transforms request body content to uppercase. This component requires no additional metadata configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-uppercase.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: uppercase\nspec:\n  type: middleware.http.uppercase\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Types in Kubernetes Cluster\nDESCRIPTION: This command lists all nodes in the Kubernetes cluster, showing their OS and other details. It's used to verify that both Windows and Linux nodes are available in the cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -o wide\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRequest Input Structure in Go\nDESCRIPTION: This Go code defines the structure of the HTTPRequest input that is supplied to the OPA middleware, including method, path, headers, and body information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-opa.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Input struct {\n  request HTTPRequest\n}\n\ntype HTTPRequest struct {\n  method string\n  path string\n  path_parts string[]\n  raw_query string\n  query map[string][]string\n  headers map[string]string\n  scheme string\n  body string\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Blob Storage Configuration in Kubernetes\nDESCRIPTION: Kubernetes CLI command to apply the Azure Blob Storage state store configuration to a Kubernetes cluster. This command applies the YAML configuration file to the cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f azureblob.yaml\n```\n\n----------------------------------------\n\nTITLE: Set Variables Response in Zeebe\nDESCRIPTION: Response structure returned after setting variables, containing the command key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": 2251799813687896\n}\n```\n\n----------------------------------------\n\nTITLE: Running MySQL in Docker for Development\nDESCRIPTION: Docker command to run a local MySQL instance for development purposes with root access and password configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name dapr-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database State Store Component in YAML\nDESCRIPTION: Component configuration for setting up Oracle Database as a state store, including connection string, wallet location, and table name specifications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.oracledatabase\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n  - name: oracleWalletLocation\n    value: \"<FULL PATH TO DIRECTORY WITH ORACLE WALLET CONTENTS >\"  # Optional, no default\n  - name: tableName\n    value: \"<NAME OF DATABASE TABLE TO STORE STATE IN >\" # Optional, defaults to STATE\n  # Uncomment this if you wish to use Oracle Database as a state store for actors (optional)\n  #- name: actorStateStore\n  #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Buffer Size in Self-Hosted Dapr\nDESCRIPTION: Command to run a Dapr application with increased HTTP header read buffer size using the CLI flag. Sets the maximum buffer size to 16KB.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/increase-read-buffer-size.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --dapr-http-read-buffer-size 16 node app.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr in Kubernetes Deployment YAML\nDESCRIPTION: This YAML configuration demonstrates how to reference a Dapr configuration in a Kubernetes deployment, enabling preview features for a specific application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/preview-features.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodeapp\n  labels:\n    app: node\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: node\n  template:\n    metadata:\n      labels:\n        app: node\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodeapp\"\n        dapr.io/app-port: \"3000\"\n        dapr.io/config: \"featureconfig\"\n    spec:\n      containers:\n      - name: node\n        image: dapriosamples/hello-k8s-node:latest\n        ports:\n        - containerPort: 3000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Modifying Metrics Server Configuration\nDESCRIPTION: This YAML snippet shows the modification required in the metrics-server configuration to add the insecure TLS parameter.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n   labels:\n     k8s-app: metrics-server\n spec:\n   containers:\n   - args:\n     - --cert-dir=/tmp\n     - --secure-port=4443\n     - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\n     - --kubelet-use-node-status-port\n     - --kubelet-insecure-tls   <==== Add this\n     - --metric-resolution=15s\n     image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2\n     imagePullPolicy: IfNotPresent\n     livenessProbe:\n       failureThreshold: 3\n       httpGet:\n         path: /livez\n```\n\n----------------------------------------\n\nTITLE: Denying Access to Kubernetes Secrets\nDESCRIPTION: Configuration to deny access to all secrets in the Kubernetes secret store for a Dapr application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/secret-scope.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: kubernetes\n        defaultAccess: deny\n```\n\n----------------------------------------\n\nTITLE: Editing Dapr Trust Bundle Secret\nDESCRIPTION: Command to directly edit the Kubernetes secret containing the Dapr trust bundle certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit secret dapr-trust-bundle -n <DAPR_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for SNS/SQS with Dynamic Resource Creation\nDESCRIPTION: AWS IAM policy JSON defining permissions needed when Dapr dynamically creates SNS topics and SQS queues. It includes permissions for creating, subscribing, publishing, and managing both SNS and SQS resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"YOUR_POLICY_NAME\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"sns:CreateTopic\",\n        \"sns:GetTopicAttributes\",\n        \"sns:ListSubscriptionsByTopic\",\n        \"sns:Publish\",\n        \"sns:Subscribe\",\n        \"sns:TagResource\",\n        \"sqs:ChangeMessageVisibility\",\n        \"sqs:CreateQueue\",\n        \"sqs:DeleteMessage\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:GetQueueUrl\",\n        \"sqs:ReceiveMessage\",\n        \"sqs:SetQueueAttributes\",\n        \"sqs:TagQueue\"\n      ],\n      \"Resource\": [\n        \"arn:aws:sns:AWS_REGION:AWS_ACCOUNT_ID:*\",\n        \"arn:aws:sqs:AWS_REGION:AWS_ACCOUNT_ID:*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Configuration Command\nDESCRIPTION: Command to configure AWS CLI credentials and settings for cluster access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Logging with Dapr CLI\nDESCRIPTION: Command to run a Dapr application with JSON-formatted logging enabled using the '--log-as-json' flag in the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/logs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run \\\n  --app-id orderprocessing \\\n  --resources-path ./components/ \\\n  --log-as-json \\\n    -- python3 OrderProcessingService.py\n```\n\n----------------------------------------\n\nTITLE: Running .NET Publisher Service with Dapr\nDESCRIPTION: This Bash command runs a .NET checkout service with Dapr. It specifies the application ID and resources path for components for the publisher service that will send messages to the pubsub component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --resources-path ../../../components -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage with Microsoft Entra ID Authentication\nDESCRIPTION: YAML configuration for Azure Blob Storage state store using Microsoft Entra ID authentication instead of account keys. This method is recommended for production systems for better security.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.azure.blobstorage\n  version: v1\n  metadata:\n  - name: accountName\n    value: \"[your_account_name]\"\n  - name: containerName\n    value: \"[your_container_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureClientSecret\n    value : \"[your_client_secret]\"\n```\n\n----------------------------------------\n\nTITLE: Resuming a Workflow HTTP Request\nDESCRIPTION: HTTP POST endpoint for resuming a paused workflow instance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceId>/resume\n```\n\n----------------------------------------\n\nTITLE: Redis State Store Configuration\nDESCRIPTION: YAML configuration for the Redis state store component in Dapr, defining connection parameters and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: localhost:6379\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Actor Configuration JSON Response\nDESCRIPTION: Example JSON response for actor configuration. This snippet shows the structure of the configuration object returned when querying for registered actors and their settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\":[\"actorType1\", \"actorType2\"],\n  \"actorIdleTimeout\": \"1h\",\n  \"actorScanInterval\": \"30s\",\n  \"drainOngoingCallTimeout\": \"30s\",\n  \"drainRebalancedActors\": true,\n  \"reentrancy\": {\n    \"enabled\": true,\n    \"maxStackDepth\": 32\n  },\n  \"entitiesConfig\": [\n      {\n          \"entities\": [\"actorType1\"],\n          \"actorIdleTimeout\": \"1m\",\n          \"drainOngoingCallTimeout\": \"10s\",\n          \"reentrancy\": {\n              \"enabled\": false\n          }\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Prefix Strategy in Dapr Component YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify a prefix strategy by adding a metadata key named 'keyPrefix' on a state component in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-share-state.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\n  namespace: production\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: keyPrefix\n    value: <key-prefix-strategy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Component in Dapr\nDESCRIPTION: YAML configuration for setting up Sentinel middleware component with flow control rules. This example sets a maximum of 10 requests per second for a specific endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-sentinel.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: sentinel\nspec:\n  type: middleware.http.sentinel\n  version: v1\n  metadata:\n  - name: appName\n    value: \"nodeapp\"\n  - name: logDir\n    value: \"/var/tmp\"\n  - name: flowRules\n    value: >\n      [\n        {\n          \"resource\": \"POST:/v1.0/invoke/nodeapp/method/neworder\",\n          \"threshold\": 10,\n          \"tokenCalculateStrategy\": 0,\n          \"controlBehavior\": 0\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Assigning RBAC Roles for Azure Blob Storage Access\nDESCRIPTION: Bash commands that assign the 'Storage blob Data Contributor' role to a Service Principal, allowing access to data in the Azure Storage Account. This is needed for Microsoft Entra ID authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nRG_ID=$(az group show --resource-group ${RG_NAME} | jq -r \".id\")\naz role assignment create \\\n  --assignee \"${SERVICE_PRINCIPAL_ID}\" \\\n  --role \"Storage blob Data Contributor\" \\\n  --scope \"${RG_ID}/providers/Microsoft.Storage/storageAccounts/${STORAGE_ACCOUNT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Role for Kubernetes Events Access\nDESCRIPTION: YAML configuration for setting up RBAC Role with necessary permissions to access Kubernetes events.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubernetes-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: <ROLENAME>\nrules:\n- apiGroups: [\"\"]\n  resources: [\"events\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Query for Specific Organizations (Bash)\nDESCRIPTION: Sends a POST request to execute the query for employees from specific organizations using curl in Bash.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST -H \"Content-Type: application/json\" -d @query-api-examples/query2.json http://localhost:3500/v1.0-alpha1/state/statestore/query | jq .\n```\n\n----------------------------------------\n\nTITLE: Get Blob Operation JSON Structure\nDESCRIPTION: JSON payload structure for retrieving a blob from Azure Blob Storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"blobName\": \"myblob\",\n    \"includeMetadata\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation with Specific Version\nDESCRIPTION: Install a specific version of Dapr runtime\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --runtime-version 1.13.4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Password on Linux/MacOS\nDESCRIPTION: Command to retrieve and decode the Redis password from Kubernetes secrets on Linux or MacOS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace default redis -o jsonpath=\"{.data.redis-password}\" | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar with Multiple Resource Paths\nDESCRIPTION: Launches a Dapr sidecar with multiple resource paths for components, resiliency policies, subscriptions, or configurations. This is useful when organizing resources in separate folders.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --resources-path <PATH-1-TO-RESOURCES-FILES> --resources-path <PATH-2-TO-RESOURCES-FILES>\n```\n\n----------------------------------------\n\nTITLE: Annotating Kubernetes deployments with Dapr\nDESCRIPTION: Examples of using the Dapr annotate command to add annotations to Kubernetes deployments. These examples demonstrate various scenarios including annotating from YAML input, multiple deployments, specific namespaces, and from a URL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-annotate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Annotate the first deployment found in the input\nkubectl get deploy -l app=node -o yaml | dapr annotate -k - | kubectl apply -f -\n\n# Annotate multiple deployments by name in a chain\nkubectl get deploy -o yaml | dapr annotate -k -r nodeapp - | dapr annotate -k -r pythonapp - | kubectl apply -f -\n\n# Annotate deployment in a specific namespace from file or directory by name\ndapr annotate -k -r nodeapp -n namespace mydeploy.yaml | kubectl apply -f -\n\n# Annotate deployment from url by name\ndapr annotate -k -r nodeapp --log-level debug https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/hello-kubernetes/deploy/node.yaml | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Dapr Services Status from Kubernetes\nDESCRIPTION: An example command for checking the health status of Dapr services in a Kubernetes environment, with a comment indicating its purpose.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-status.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get status of Dapr services from Kubernetes\ndapr status -k\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on MacOS without sudo\nDESCRIPTION: Installs the Dapr CLI to an alternate directory specified by DAPR_INSTALL_DIR when sudo access is not available.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/dapr/cli/master/install/install.sh | DAPR_INSTALL_DIR=\"$HOME/dapr\" /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Dapr Components in Command Line\nDESCRIPTION: Examples of setting the log level when starting Dapr runtime and Placement Service using command-line arguments. The log level can be set to error, warn, info, or debug.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./daprd --log-level error\n./placement --log-level debug\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Run Command Usage in Bash\nDESCRIPTION: The basic syntax for using the Dapr run command. This command runs Dapr and optionally your application side by side.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-run.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run [flags] [command]\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Combined Dapr and App Container\nDESCRIPTION: Dockerfile example showing how to package both Dapr runtime and application code in a single container for development purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.7.1\n# Install dapr CLI\nRUN wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash\n\n# Install daprd\nARG DAPR_BUILD_DIR\nCOPY $DAPR_BUILD_DIR /opt/dapr\nENV PATH=\"/opt/dapr/:${PATH}\"\nRUN dapr init --slim\n\n# Install your app\nWORKDIR /app\nCOPY python .\nRUN pip install requests\nENTRYPOINT [\"dapr\"]\nCMD [\"run\", \"--app-id\", \"nodeapp\", \"--app-port\", \"3000\", \"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Running Redis with JSON Module Support\nDESCRIPTION: Docker command to run a Redis instance with JSON module support, which is required for using the state store query API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9445:9445 --name rejson --rm redislabs/rejson:2.0.6\n```\n\n----------------------------------------\n\nTITLE: Output Binding Request Payload\nDESCRIPTION: JSON structure for invoking output bindings with data, metadata, and operation specifications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"\",\n  \"metadata\": {\n    \"\": \"\"\n  },\n  \"operation\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr HTTP API in PowerShell\nDESCRIPTION: This snippet demonstrates how to delete state using the Dapr HTTP API with PowerShell. It sends a DELETE request to delete the state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Delete -Uri 'http://localhost:3601/v1.0/state/statestore/order_1'\n```\n\n----------------------------------------\n\nTITLE: Generating PFX Certificate for Microsoft Entra ID Application\nDESCRIPTION: Azure CLI command to create a self-signed PFX certificate for the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\naz ad app credential reset \\\n  --id \"${APP_ID}\" \\\n  --create-cert\n```\n\n----------------------------------------\n\nTITLE: Creating a File in Huawei OBS using JSON\nDESCRIPTION: JSON payload for creating a file in Huawei OBS. Demonstrates the 'create' operation with optional metadata for specifying the file name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with JSON Logging Enabled\nDESCRIPTION: Helm command to install Dapr with JSON-formatted logs enabled, which makes logs more structured and queryable in Azure Monitor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr dapr/dapr --namespace dapr-system --set global.logAsJson=true\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Service Principal Creation\nDESCRIPTION: Example output showing the Service Principal ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nService Principal ID: 1d0ccf05-5427-4b5e-8eb4-005ac5f9f163\n```\n\n----------------------------------------\n\nTITLE: Example of Getting an S3 Object with curl\nDESCRIPTION: Example curl commands for retrieving an object from an S3 bucket using Dapr's AWS S3 binding. The request uses the 'get' operation with the object key specified in metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \\\"operation\\\": \\\"get\\\", \\\"metadata\\\": { \\\"key\\\": \\\"my-test-file.txt\\\" }}' http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"get\", \"metadata\": { \"key\": \"my-test-file.txt\" }}' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Viewing the Batch Processing Output\nDESCRIPTION: Sample output from the application showing SQL insert statements being executed for multiple orders.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n== APP == Processing batch..\n== APP == insert into orders (orderid, customer, price) values(1, 'John Smith', 100.32)\n== APP == insert into orders (orderid, customer, price) values(2, 'Jane Bond', 15.4)\n== APP == insert into orders (orderid, customer, price) values(3, 'Tony James', 35.56)\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Redis Password\nDESCRIPTION: Command to create a Kubernetes secret to store the Redis password securely.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/configure-state-pubsub.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic redis --from-literal=redis-password=*********\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up Azure Blob Storage as a state store in Dapr. The configuration includes required fields like account name, account key, and container name with a recommendation to use v2 of the component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.azure.blobstorage\n  # Supports v1 and v2. Users should always use v2 by default. There is no\n  # migration path from v1 to v2, see `versioning` below.\n  version: v2\n  metadata:\n  - name: accountName\n    value: \"[your_account_name]\"\n  - name: accountKey\n    value: \"[your_account_key]\"\n  - name: containerName\n    value: \"[your_container_name]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RocketMQ Pub/Sub Component in Dapr\nDESCRIPTION: YAML configuration for setting up a RocketMQ pub/sub component in Dapr. It includes essential metadata like instanceName, consumer and producer groups, nameServer addresses, and other configuration options needed for RocketMQ integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rocketmq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: rocketmq-pubsub\nspec:\n  type: pubsub.rocketmq\n  version: v1\n  metadata:\n    - name: instanceName\n      value: dapr-rocketmq-test\n    - name: consumerGroup\n      value: dapr-rocketmq-test-g-c\n    - name: producerGroup \n      value: dapr-rocketmq-test-g-p\n    - name: consumerID\n      value: channel1\n    - name: nameSpace\n      value: dapr-test\n    - name: nameServer\n      value: \"127.0.0.1:9876,127.0.0.2:9876\"\n    - name: retries\n      value: 3\n    - name: consumerModel\n      value: \"clustering\"\n    - name: consumeOrderly\n      value: false\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL State Store Component in YAML\nDESCRIPTION: YAML configuration for setting up PostgreSQL v1 as a Dapr state store component. Includes connection string and optional parameters for timeout, table names, cleanup intervals, and connection pooling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: state.postgresql\n  version: v1\n  metadata:\n    # Connection string\n    - name: connectionString\n      value: \"<CONNECTION STRING>\"\n    # Timeout for database operations, as a Go duration or number of seconds (optional)\n    #- name: timeout\n    #  value: 20\n    # Name of the table where to store the state (optional)\n    #- name: tableName\n    #  value: \"state\"\n    # Name of the table where to store metadata used by Dapr (optional)\n    #- name: metadataTableName\n    #  value: \"dapr_metadata\"\n    # Cleanup interval in seconds, to remove expired rows (optional)\n    #- name: cleanupInterval\n    #  value: \"1h\"\n    # Maximum number of connections pooled by this component (optional)\n    #- name: maxConns\n    #  value: 0\n    # Max idle time for connections before they're closed (optional)\n    #- name: connectionMaxIdleTime\n    #  value: 0\n    # Controls the default mode for executing queries. (optional)\n    #- name: queryExecMode\n    #  value: \"\"\n    # Uncomment this if you wish to use PostgreSQL as a state store for actors or workflows (optional)\n    #- name: actorStateStore\n    #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dapr mTLS in Windows\nDESCRIPTION: PowerShell commands to set environment variables required for Dapr's mTLS authentication. Points to certificate locations for trust anchors, certificate chain, and certificate key in a Windows self-hosted environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DAPR_TRUST_ANCHORS=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\ca.crt)\n$env:DAPR_CERT_CHAIN=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\issuer.crt)\n$env:DAPR_CERT_KEY=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\issuer.key)\n$env:NAMESPACE=\"default\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Standalone Mode with Dapr CLI\nDESCRIPTION: Example of setting the log level when running an application with the Dapr CLI in standalone mode. The log-level parameter controls the verbosity of logs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --log-level warn node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in Ruby gRPC client\nDESCRIPTION: Ruby code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmetadata = { 'dapr-app-id' : 'server' }\nresponse = service.sayHello({ 'name': 'Darth Bane' }, metadata)\n```\n\n----------------------------------------\n\nTITLE: Cross Namespace Invocation Format\nDESCRIPTION: Example of FQDN format for cross-namespace service invocation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/service_invocation_api.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmyApp.production\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Resiliency Policy Structure\nDESCRIPTION: Template showing the general structure of a Dapr resiliency policy including metadata, scopes, and policy definitions for timeouts, retries, and circuit breakers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/resiliency-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Resiliency\nmetadata:\n  name: myresiliency\nscopes:\n  # optionally scope the policy to specific apps\nspec:\n  policies:\n    timeouts:\n      # timeout policy definitions\n\n    retries:\n      # retry policy definitions\n\n    circuitBreakers:\n      # circuit breaker policy definitions\n\n  targets:\n    apps:\n      # apps and their applied policies here\n\n    actors:\n      # actor types and their applied policies here\n\n    components:\n      # components and their applied policies here\n```\n\n----------------------------------------\n\nTITLE: Restarting Remaining Dapr Control Plane Components\nDESCRIPTION: Commands to restart the remaining Dapr control plane components after Sentry has been restarted with new certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/dapr-operator -n <DAPR_NAMESPACE>\nkubectl rollout restart statefulsets/dapr-placement-server -n <DAPR_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Single Key Secret Definition\nDESCRIPTION: Example of a Kubernetes secret definition for single key secret configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/environment-variables-secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: auth-headers-secret\ntype: Opaque\nstringData:\n  auth-headers-secret: \"AUTH=mykey\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Debugging Binaries with Helm in Kubernetes\nDESCRIPTION: This Bash command uses Helm to install Dapr debugging binaries in the Kubernetes cluster. It specifies the namespace and values file for the installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-daprd.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr charts/dapr --namespace dapr-system --values values.yml --wait\n```\n\n----------------------------------------\n\nTITLE: Uploading Base64-Encoded Content to AWS S3 using Dapr Binding\nDESCRIPTION: Example of uploading Base64-encoded content to an S3 bucket using Dapr's AWS S3 binding. This approach is useful for binary files like images which need to be encoded in the request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"YOUR_BASE_64_CONTENT\\\", \\\"metadata\\\": { \\\"key\\\": \\\"my-test-file.jpg\\\" } }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"YOUR_BASE_64_CONTENT\", \"metadata\": { \"key\": \"my-test-file.jpg\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Java Dependencies\nDESCRIPTION: Commands to install Maven dependencies for the 'order-processor' and 'checkout' Java applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ./order-processor\nmvn clean install\ncd ../checkout\nmvn clean install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Storing State in OCI Object Storage using Dapr API\nDESCRIPTION: This curl command demonstrates how to store a key-value pair in the OCI Object Storage state store using the Dapr API. It sends a POST request to the Dapr sidecar to store the value 'darth' with the key 'nihilus'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oci-objectstorage.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"nihilus\",\n          \"value\": \"darth\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Generating PDF of Memory Allocations\nDESCRIPTION: Command to create a PDF visualization of memory allocations from a previously captured heap profile. The alloc_objects flag focuses the analysis on allocated objects rather than in-use ones.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof -alloc_objects --pdf /Users/myusername/pprof/pprof.daprd.alloc_objects.alloc_space.inuse_objects.inuse_space.003.pb.gz > alloc-objects.pdf\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with TLS Communication\nDESCRIPTION: YAML configuration for Kafka pubsub component with TLS transport security. Includes CA certificate configuration and basic connection settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"certificate\"\n  - name: consumeRetryInterval\n    value: 200ms\n  - name: heartbeatInterval\n    value: 5s\n  - name: sessionTimeout\n    value: 15s\n  - name: version\n    value: 0.10.2.0\n  - name: maxMessageBytes\n    value: 1024\n  - name: caCert\n    secretKeyRef:\n      name: kafka-tls\n      key: caCert\nauth:\n  secretStore: <SECRET_STORE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Configuration Keys in Dapr\nDESCRIPTION: HTTP GET request format with query parameters to subscribe to specific configuration items by key in a Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/mystore/subscribe?key=config1&key=config2\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Alias Middleware in Dapr\nDESCRIPTION: This YAML snippet shows how to reference the router alias middleware in a Dapr configuration. It defines an HTTP pipeline handler for the middleware.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-routeralias.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: routeralias \n      type: middleware.http.routeralias\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes using Helm\nDESCRIPTION: Commands to add Bitnami repo and install Redis 6.2+ on Kubernetes cluster using Helm. Required for Dapr pub/sub functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/redis-lock.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install redis bitnami/redis --set image.tag=6.2\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC RoleBinding for Kubernetes Events Access\nDESCRIPTION: YAML configuration for setting up RBAC RoleBinding to associate the role with a service account.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubernetes-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: <NAME>\nsubjects:\n- kind: ServiceAccount\n  name: default # or as need be, can be changed\nroleRef:\n  kind: Role\n  name: <ROLENAME> # same as the one above\n  apiGroup: \"\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Retrieving a Secret\nDESCRIPTION: The HTTP request format for retrieving a secret from a specific secret store. The URL includes the Dapr port, secret store name, and the name of the secret to retrieve.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/secrets/<secret-store-name>/<name>\n```\n\n----------------------------------------\n\nTITLE: Publish Message Response in Zeebe\nDESCRIPTION: Response structure returned after publishing a message, containing the message key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": 2251799813688225\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking HTTP Binding with cURL on Linux\nDESCRIPTION: Example cURL command for invoking the HTTP binding on Linux, demonstrating how to send a GET request to a specific path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"get\", \"metadata\": { \"path\": \"/things/1234\" } }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Running Multi-App Template in Kubernetes with Dapr CLI\nDESCRIPTION: This bash command demonstrates how to run a Multi-App template file in a Kubernetes environment using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -k -f ./<your-preferred-file-name>.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar and Application Process\nDESCRIPTION: This command launches both the Dapr sidecar and your application using the 'dapr run' CLI command. It specifies the application ID and port.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-podman.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --app-port 5000 -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Template Structure for Kubernetes\nDESCRIPTION: YAML configuration template showing the structure and available properties for running multiple Dapr applications in Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon: # optional section for variables shared across apps\n  env:  # any environment variable shared across apps\n    DEBUG: true\napps:\n  - appID: webapp # optional\n    appDirPath: .dapr/webapp/ # REQUIRED\n    appChannelAddress: 127.0.0.1 # network address where the app listens on. (optional) can be left to default value by convention.\n    appProtocol: http\n    appPort: 8080\n    appHealthCheckPath: \"/healthz\"\n    appLogDestination: file # (optional), can be file, console or fileAndConsole. default is fileAndConsole.\n    daprdLogDestination: file # (optional), can be file, console or fileAndConsole. default is file.\n    containerImage: ghcr.io/dapr/samples/hello-k8s-node:latest # (optional) URI of the container image to be used when deploying to Kubernetes dev/test environment.\n    containerImagePullPolicy: IfNotPresent # (optional), the container image is downloaded if one is not present locally, otherwise the local one is used.\n    createService: true # (optional) Create a Kubernetes service for the application when deploying to dev/test environment.\n  - appID: backend # optional\n    appDirPath: .dapr/backend/ # REQUIRED\n    appProtocol: grpc\n    appPort: 3000\n    unixDomainSocket: \"/tmp/test-socket\"\n    env:\n      DEBUG: false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Dapr List Command\nDESCRIPTION: Examples demonstrating different ways to use the 'dapr list' command, including listing instances in self-hosted mode, Kubernetes mode with namespace filtering, and output formatting options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List Dapr instances in self-hosted mode\ndapr list\n\n# List Dapr instances in all namespaces in Kubernetes mode\ndapr list -k\n\n# List Dapr instances in JSON format\ndapr list -o json\n\n# List Dapr instances in a specific namespace in Kubernetes mode\ndapr list -k --namespace default\n\n# List Dapr instances in all namespaces in  Kubernetes mode\ndapr list -k --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values in Redis (Bash)\nDESCRIPTION: Uses Docker to set initial configuration values for orderId1 and orderId2 in Redis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec dapr_redis redis-cli MSET orderId1 \"101\" orderId2 \"102\"\n```\n\n----------------------------------------\n\nTITLE: Java State Management Implementation\nDESCRIPTION: Java code showing state operations using the Dapr client SDK with error handling and loops.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ntry (DaprClient client = new DaprClientBuilder().build()) {\n  for (int i = 1; i <= 10; i++) {\n    int orderId = i;\n    Order order = new Order();\n    order.setOrderId(orderId);\n\n    // Save state into the state store\n    client.saveState(DAPR_STATE_STORE, String.valueOf(orderId), order).block();\n    LOGGER.info(\"Saving Order: \" + order.getOrderId());\n\n    // Get state from the state store\n    State<Order> response = client.getState(DAPR_STATE_STORE, String.valueOf(orderId), Order.class).block();\n    LOGGER.info(\"Getting Order: \" + response.getValue().getOrderId());\n\n    // Delete state from the state store\n    client.deleteState(DAPR_STATE_STORE, String.valueOf(orderId)).block();\n    LOGGER.info(\"Deleting Order: \" + orderId);\n    TimeUnit.MILLISECONDS.sleep(1000);\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing Conversation API Response in JSON\nDESCRIPTION: This snippet shows the structure of a response from the Dapr Conversation API. It includes an array of outputs, each containing a result and parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/conversation_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outputs\": {\n    {\n       \"result\": \"Dapr is distribution application runtime ...\",\n       \"parameters\": {}\n    },\n    {\n       \"result\": \"Dapr can help developers ...\",\n       \"parameters\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing JSON-formatted Logs in Dapr\nDESCRIPTION: Example of Dapr's JSON-formatted logs showing the same startup information as the plain-text logs but in structured JSON format for easier parsing by log collection tools.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/logs.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"instance\":\"dapr-pod-xxxx\",\"level\":\"info\",\"msg\":\"starting Dapr Runtime -- version 1.9.0 -- commit v1.9.0-g5dfcf2e\",\"scope\":\"dapr.runtime\",\"time\":\"2022-11-01T17:09:45.788005Z\",\"type\":\"log\",\"ver\":\"1.9.0\"}\n{\"instance\":\"dapr-pod-xxxx\",\"level\":\"info\",\"msg\":\"log level set to: info\",\"scope\":\"dapr.runtime\",\"time\":\"2022-11-01T17:09:45.788075Z\",\"type\":\"log\",\"ver\":\"1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm Binding with Ruby Interpreter in YAML\nDESCRIPTION: This YAML configuration sets up a Wasm binding component using a Ruby interpreter from the webassembly-language-runtimes project. It demonstrates how to use a remote URL for the Wasm binary.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/wasm.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: wasm\nspec:\n  type: bindings.wasm\n  version: v1\n  metadata:\n  - name: url\n    value: \"https://github.com/vmware-labs/webassembly-language-runtimes/releases/download/ruby%2F3.2.0%2B20230215-1349da9/ruby-3.2.0-slim.wasm\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent SQL Query\nDESCRIPTION: SQL representation of the same query filter showing the equivalent database operation\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM c WHERE\n  person.org = \"Dev Ops\" OR\n  (person.org = \"Finance\" AND state IN (\"CA\", \"WA\"))\nORDER BY\n  state DESC,\n  person.id ASC\nLIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Complete Java Dev Container Configuration for Dapr\nDESCRIPTION: Full devcontainer.json configuration for setting up a Java development environment with Dapr support, based on the official Java 17 Dev Container image.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-remote-dev-containers.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Java\",\n\t\"image\": \"mcr.microsoft.com/devcontainers/java:0-17\",\n\n\t\"features\": {\n\t\t\"ghcr.io/devcontainers/features/java:1\": {\n\t\t\t\"version\": \"none\",\n\t\t\t\"installMaven\": \"false\",\n\t\t\t\"installGradle\": \"false\"\n\t\t},\n        \"ghcr.io/dapr/cli/dapr-cli:0\": {},\n        \"ghcr.io/devcontainers/features/docker-in-docker:2\": {},\n        //\"ghcr.io/devcontainers/features/docker-outside-of-docker:1\": {},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using AwsHelper for AWS SSO Authentication in Linux/MacOS\nDESCRIPTION: Example of how to use the AwsHelper utility to bridge the gap between AWS SSO-based credentials and legacy credentials when starting Dapr on Linux or MacOS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/AWS/authenticating-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=myprofile awshelper dapr run...\n```\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=myprofile awshelper daprd...\n```\n\n----------------------------------------\n\nTITLE: Saving Text to Random UUID File (Windows)\nDESCRIPTION: Windows command using curl to save text content to a randomly generated UUID file in S3. Demonstrates basic object creation without specifying a filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\" }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Deployment for Dapr Debugging\nDESCRIPTION: This Bash command applies the modified Kubernetes deployment file to enable Dapr debugging for the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-daprd.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./deploy/node.yaml\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Removing Expired States\nDESCRIPTION: SQL statement to delete expired state records from the Oracle Database state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndelete dapr_state \nwhere  expiration_time < SYS_EXTRACT_UTC(SYSTIMESTAMP);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Environment in Dapr Component (YAML)\nDESCRIPTION: Example of setting the Azure environment metadata property in a Dapr component configuration to specify a non-default Azure cloud (such as Azure China or Azure Government).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  azureEnvironment: \"AzureChinaCloud\"\n```\n\n----------------------------------------\n\nTITLE: Returning to SDK Directory\nDESCRIPTION: Command to navigate back to the main SDK directory\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Service Output Examples\nDESCRIPTION: Sample output showing the order processing flow between checkout and order-processor services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP == Order passed: {\"orderId\": 1}\n== APP == Order passed: {\"orderId\": 2}\n== APP == Order passed: {\"orderId\": 3}\n== APP == Order passed: {\"orderId\": 4}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP == Order received: {\"orderId\": 1}\n== APP == Order received: {\"orderId\": 2}\n== APP == Order received: {\"orderId\": 3}\n== APP == Order received: {\"orderId\": 4}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Binding Component in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a Postmark binding component in Dapr. It includes required fields like accountToken and serverToken, as well as optional fields for email details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postmark.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: postmark\nspec:\n  type: bindings.postmark\n  metadata:\n  - name: accountToken\n    value: \"YOUR_ACCOUNT_TOKEN\" # required, this is your Postmark account token\n  - name: serverToken\n    value: \"YOUR_SERVER_TOKEN\" # required, this is your Postmark server token\n  - name: emailFrom\n    value: \"testapp@dapr.io\" # optional\n  - name: emailTo\n    value: \"dave@dapr.io\" # optional\n  - name: subject\n    value: \"Hello!\" # optional\n```\n\n----------------------------------------\n\nTITLE: Setting mTLS Certificate Environment Variables in Linux/MacOS\nDESCRIPTION: Bash commands to set the environment variables for Dapr mTLS certificates in Linux or MacOS environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport DAPR_TRUST_ANCHORS=`cat $HOME/.dapr/certs/ca.crt`\nexport DAPR_CERT_CHAIN=`cat $HOME/.dapr/certs/issuer.crt`\nexport DAPR_CERT_KEY=`cat $HOME/.dapr/certs/issuer.key`\nexport NAMESPACE=default\n```\n\n----------------------------------------\n\nTITLE: Circuit Breaker State Change Log\nDESCRIPTION: Log output showing the circuit breaker changing state from closed to open after 5 consecutive failures, preventing further requests to the failing service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nINFO[0025] Circuit breaker \"order-processor:orders\" changed state from closed to open  \n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Events Output Format in JSON\nDESCRIPTION: Sample JSON structure showing the output format received from the binding with fields for event type, old value, and new value data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubernetes-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n {\n   \"event\": \"\",\n   \"oldVal\": {\n     \"metadata\": {\n       \"name\": \"hello-node.162c2661c524d095\",\n       \"namespace\": \"kube-events\",\n       \"selfLink\": \"/api/v1/namespaces/kube-events/events/hello-node.162c2661c524d095\",\n       ...\n     },\n     \"involvedObject\": {\n       \"kind\": \"Deployment\",\n       \"namespace\": \"kube-events\",\n       ...\n     },\n     \"reason\": \"ScalingReplicaSet\",\n     \"message\": \"Scaled up replica set hello-node-7bf657c596 to 1\",\n     ...\n   },\n   \"newVal\": {\n     \"metadata\": { \"creationTimestamp\": \"null\" },\n     \"involvedObject\": {},\n     \"source\": {},\n     \"firstTimestamp\": \"null\",\n     \"lastTimestamp\": \"null\",\n     \"eventTime\": \"null\",\n     ...\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Values File for Dapr Helm Installation\nDESCRIPTION: This snippet demonstrates how to create a values.yml file to enable high availability for Dapr installation using Helm.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch values.yml\ncat << EOF >> values.yml\nglobal:\n  ha:\n    enabled: true\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building Go Applications\nDESCRIPTION: Commands to build the Go 'order-processor' and 'checkout' applications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd ./order-processor\ngo build .\ncd ../checkout\ngo build .\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Running daprd Directly with mTLS\nDESCRIPTION: Command to run the Dapr runtime (daprd) directly with mTLS enabled, specifying necessary flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --enable-mtls --sentry-address localhost:50001 --config=./config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-App Run in YAML for Dapr\nDESCRIPTION: This YAML configuration sets up a multi-app run environment for Dapr, specifying the resources path and application details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../components/\napps:\n  - appDirPath: ./conversation/\n    appID: conversation\n    daprHTTPPort: 3500\n    command: [\"dotnet\", \"run\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Status Command with Kubernetes in Dapr CLI\nDESCRIPTION: Executes the status command to show the health status of Dapr services in a Kubernetes cluster. The -k flag indicates Kubernetes deployment mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-status.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr status -k\n```\n\n----------------------------------------\n\nTITLE: Getting State Object via Dapr API (Bash)\nDESCRIPTION: Curl command to retrieve a state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3500/v1.0/state/statestore/name\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL State Store with Outbox Pattern (Simplified)\nDESCRIPTION: YAML configuration for a MySQL state store component with the outbox pattern enabled, showing only the required fields for basic outbox functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mysql-outbox\nspec:\n  type: state.mysql\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"<CONNECTION STRING>\"\n  - name: outboxPublishPubsub # Required\n    value: \"mypubsub\"\n  - name: outboxPublishTopic # Required\n    value: \"newOrder\"\n```\n\n----------------------------------------\n\nTITLE: JSON Notification Object Structure\nDESCRIPTION: SQL snippet showing the structure of the JSON notification object used in the trigger function.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nnotification = json_build_object(\n  'table',TG_TABLE_NAME,\n  'action', TG_OP,\n  'data', data\n);\n```\n\n----------------------------------------\n\nTITLE: Capturing Heap Memory Profile\nDESCRIPTION: Command to capture the heap memory profile from the Dapr profiling endpoint. This saves profile data to a dynamically generated file path for later analysis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof http://localhost:7777/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: List Blobs Response Schema in Azure Storage Binding\nDESCRIPTION: JSON response format for list blobs operation showing blob properties including name, creation time, content details, lease status, and access tier information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"XMLName\": {\n      \"Space\": \"\",\n      \"Local\": \"Blob\"\n    },\n    \"Name\": \"file-08-07-2021-09-38-13-776-1.txt\",\n    \"Deleted\": false,\n    \"Snapshot\": \"\",\n    \"Properties\": {\n      \"XMLName\": {\n        \"Space\": \"\",\n        \"Local\": \"Properties\"\n      },\n      \"CreationTime\": \"2021-07-08T07:38:16Z\",\n      \"LastModified\": \"2021-07-08T07:38:16Z\",\n      \"Etag\": \"0x8D941E3593C6573\",\n      \"ContentLength\": 1,\n      \"ContentType\": \"application/octet-stream\",\n      \"ContentEncoding\": \"\",\n      \"ContentLanguage\": \"\",\n      \"ContentMD5\": \"xMpCOKC5I4INzFCab3WEmw==\",\n      \"ContentDisposition\": \"\",\n      \"CacheControl\": \"\",\n      \"BlobSequenceNumber\": null,\n      \"BlobType\": \"BlockBlob\",\n      \"LeaseStatus\": \"unlocked\",\n      \"LeaseState\": \"available\",\n      \"LeaseDuration\": \"\",\n      \"CopyID\": null,\n      \"CopyStatus\": \"\",\n      \"CopySource\": null,\n      \"CopyProgress\": null,\n      \"CopyCompletionTime\": null,\n      \"CopyStatusDescription\": null,\n      \"ServerEncrypted\": true,\n      \"IncrementalCopy\": null,\n      \"DestinationSnapshot\": null,\n      \"DeletedTime\": null,\n      \"RemainingRetentionDays\": null,\n      \"AccessTier\": \"Hot\",\n      \"AccessTierInferred\": true,\n      \"ArchiveStatus\": \"\",\n      \"CustomerProvidedKeySha256\": null,\n      \"AccessTierChangeTime\": null\n    },\n    \"Metadata\": null\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database with SQL\nDESCRIPTION: SQL command to create a new database in PostgreSQL for storing Dapr state data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE my_dapr;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr HTTP Pipeline in YAML\nDESCRIPTION: YAML configuration for adding Wasm middleware to the Dapr HTTP pipeline configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-wasm.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  httpPipeline:\n    handlers:\n    - name: wasm\n      type: middleware.http.wasm\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr Applications\nDESCRIPTION: Command to restart Dapr applications to ensure they pick up the latest trust bundle after certificate regeneration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment/mydaprservice1 kubectl deployment/myotherdaprservice2\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested JSON Structure for Secrets\nDESCRIPTION: Example of a more complex JSON structure for storing secrets with multiple nesting levels. Demonstrates how secrets are organized with deeper hierarchies.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/file-secret-store.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"redisPassword\": \"your redis password\",\n    \"connectionStrings\": {\n        \"mysql\": {\n          \"username\": \"your mysql username\",\n          \"password\": \"your mysql password\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret Using curl\nDESCRIPTION: Uses curl to make an HTTP request to the Dapr sidecar's secrets API endpoint to retrieve a secret. This demonstrates how to access secrets directly via Dapr's HTTP API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/howto-secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3601/v1.0/secrets/localsecretstore/secret\n```\n\n----------------------------------------\n\nTITLE: Creating Object in Alibaba Cloud Tablestore\nDESCRIPTION: JSON payload for creating an object in Alibaba Cloud Tablestore using the binding. Requires specifying the operation as 'create', providing data, and including the primary key in metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudtablestore.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\",\n  \"metadata\": {\n    \"primaryKeys\": \"pk1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Values for Dapr Debugging in Kubernetes\nDESCRIPTION: This YAML configuration sets up the Helm values for installing Dapr debugging binaries in Kubernetes. It specifies the Docker registry and tag for the debug images.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-daprd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n   registry: docker.io/<your docker.io id>\n   tag: \"dev-linux-amd64\"\n```\n\n----------------------------------------\n\nTITLE: Creating a table in Kusto for Dapr logs\nDESCRIPTION: Kusto Query Language (KQL) command for creating a table schema to store Dapr logs. The schema includes various fields from Dapr's structured logs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies.md#2025-04-21_snippet_3\n\nLANGUAGE: kql\nCODE:\n```\n.create table daprlog(scope:string, time:datetime, level:string, id:string, app_id:string, type:string, ver:string, address:string, instance:string, namespace:string, msg:string, data:dynamic)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-App Run in dapr.yaml\nDESCRIPTION: Dapr YAML configuration for running multiple applications in a project. This template file is created during 'dapr init' and specifies resources path and application settings for the order-processor service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../resources/\napps:\n  - appID: order-processor\n    appDirPath: ./order-processor/\n    command: [\"go\", \"run\", \".\"]\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Run Configuration\nDESCRIPTION: YAML configuration for running multiple Dapr applications, specifying resource paths and runtime commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon:\n  resourcesPath: ../../../resources/\napps:\n  - appID: order-processor\n    appDirPath: ./order-processor/\n    command: [\"dotnet\", \"run\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Dapr logs command\nDESCRIPTION: The basic usage syntax for the Dapr logs command, which allows retrieving Dapr sidecar logs from a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-logs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr logs [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating KiND Cluster with Configuration\nDESCRIPTION: This bash command creates a KiND cluster using the specified configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --config kind-cluster-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating DingTalk Message Using POST Request\nDESCRIPTION: Example of sending a text message to DingTalk using the create operation via curl command. Shows how to structure the payload with message type and content.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloud-dingtalk.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myDingTalk \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"msgtype\": \"text\",\n          \"text\": {\n            \"content\": \"Hi\"\n          }\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation App in Python\nDESCRIPTION: Python code for the conversation application using the Dapr SDK. It sends a message to the echo mock LLM component and prints the response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dapr.clients import DaprClient\nfrom dapr.clients.grpc._request import ConversationInput\n\nwith DaprClient() as d:\n    inputs = [\n        ConversationInput(content=\"What is dapr?\", role='user', scrub_pii=True),\n    ]\n\n    metadata = {\n        'model': 'modelname',\n        'key': 'authKey',\n        'cacheTTL': '10m',\n    }\n\n    print('Input sent: What is dapr?')\n\n    response = d.converse_alpha1(\n        name='echo', inputs=inputs, temperature=0.7, context_id='chat-123', metadata=metadata\n    )\n\n    for output in response.outputs:\n        print(f'Output response: {output.result}')\n```\n\n----------------------------------------\n\nTITLE: Java Order Processing Service\nDESCRIPTION: Java code snippet showing the order processing logic in the 'order-processor' service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic String processOrders(@RequestBody Order body) {\n        System.out.println(\"Order received: \"+ body.getOrderId());\n        return \"CID\" + body.getOrderId();\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Key Vault Component to Kubernetes\nDESCRIPTION: Bash command to apply the Azure Key Vault component configuration to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f azurekeyvault.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Sentry Service Certificates\nDESCRIPTION: Command to create a directory for the Sentry service to store self-signed root certificates in self-hosted mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/.dapr/certs\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completion on macOS (Bash 4.1+)\nDESCRIPTION: Commands for installing bash completion on macOS using Homebrew for Bash 4.1+.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash-completion@2\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare Queue Using Wrangler CLI\nDESCRIPTION: Shell command for creating a new Cloudflare Queue using the Wrangler CLI tool.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Authenticate if needed with `npx wrangler login` first\nnpx wrangler queues create <NAME>\n# For example: `npx wrangler queues create myqueue`\n```\n\n----------------------------------------\n\nTITLE: Constructing Actor State Key in Dapr\nDESCRIPTION: This example demonstrates how to construct a key for querying the state of an actor instance in Dapr. The key is composed of the App ID, Actor Type, Actor ID, and the specific state key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nmyapp||cat||hobbit||food\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with API Logging Enabled\nDESCRIPTION: Example of running a Node.js app with Dapr and API logging enabled using the Dapr CLI. This command starts both the app and Dapr sidecar with API logging activated.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run \\\n  --enable-api-logging \\\n  -- node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Deploying Linux Application with Node Affinity\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment for a Linux application. It includes Dapr annotations and node affinity rules to ensure the application is scheduled on Linux nodes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yourlinuxapp\n  labels:\n    app: yourlabel\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yourlabel\n  template:\n    metadata:\n      labels:\n        app: yourlabel\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/id: \"addapp\"\n        dapr.io/port: \"6000\"\n        dapr.io/config: \"appconfig\"\n    spec:\n      containers:\n      - name: add\n        image: yourreponsitory/your-application:your-tag\n        ports:\n        - containerPort: 6000\n        imagePullPolicy: Always\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: kubernetes.io/os\n                  operator: In\n                  values:\n                  - linux\n```\n\n----------------------------------------\n\nTITLE: Deleting Files via SFTP Binding\nDESCRIPTION: JSON request format for deleting files through the SFTP binding, specifying the operation type and filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sftp.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"fileName\": \"myfile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Azure Environment\nDESCRIPTION: Command to create a new Azure Developer CLI environment\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nazd env new\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Local Branches with Remote Repository in Bash\nDESCRIPTION: Commands to pull changes from the upstream repository and push them to your fork for both the current release branch and upcoming release branch.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream v1.0\ngit push origin v1.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream v1.1\ngit push origin v1.1\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Environment Commands in the Dapr Docs Project\nDESCRIPTION: A set of shell commands for setting up and running the Dapr documentation project locally. These commands include opening VSCode, changing to the documentation directory, updating Git submodules, installing NPM packages, and running a local Hugo server.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd ./daprdocs\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit submodule update --init --recursive\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\nhugo server\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr SDK Environment Variables\nDESCRIPTION: These environment variables are set for an application to connect to the Dapr Shared instance running in the default namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-dapr-shared.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: DAPR_HTTP_ENDPOINT\n  value: http://my-shared-instance-dapr.default.svc.cluster.local:3500\n- name: DAPR_GRPC_ENDPOINT\n  value: http://my-shared-instance-dapr.default.svc.cluster.local:50001\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTelemetry Collector Configuration in Kubernetes\nDESCRIPTION: Command to apply the OpenTelemetry Collector configuration to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f open-telemetry-collector-generic.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as an Actor Store in YAML\nDESCRIPTION: This YAML snippet shows how to enable Redis as an actor store by adding the 'actorStateStore' metadata field to the component configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-redis.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Programmatic Subscription to Raw Messages in .NET\nDESCRIPTION: Example of programmatically subscribing to raw pub/sub messages in .NET by setting the isRawPayload metadata flag to true, which allows the subscriber to receive messages not wrapped in CloudEvents.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-raw.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/dapr/subscribe\", () =>\n{\n    var subscriptions = new[]\n    {\n        new\n        {\n            pubsubname = \"pubsub\",\n            topic = \"messages\",\n            route = \"/messages\",\n            metadata = new Dictionary<string, string>\n            {\n                { \"isRawPayload\", \"true\" },\n                { \"content-type\", \"application/json\" }\n            }\n        }\n    };\n    return Results.Ok(subscriptions);\n});\n\napp.MapPost(\"/messages\", async (HttpContext context) =>\n{\n    using var reader = new StreamReader(context.Request.Body);\n    var json = await reader.ReadToEndAsync();\n\n    Console.WriteLine($\"Raw message received: {json}\");\n\n    return Results.Ok();\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Placement Service on Windows\nDESCRIPTION: Command and output for starting the Dapr placement service on Windows systems with specific port configuration\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-no-docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n%USERPROFILE%/.dapr/bin/placement.exe -port 6050\n\ntime=\"2022-10-17T14:56:55.4055836-05:00\" level=info msg=\"starting Dapr Placement Service -- version 1.9.0 -- commit fdce5f1f1b76012291c888113169aee845f25ef8\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\ntime=\"2022-10-17T14:56:55.4066226-05:00\" level=info msg=\"log level set to: info\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\ntime=\"2022-10-17T14:56:55.4067306-05:00\" level=info msg=\"metrics server started on :9090/\" instance=LAPTOP-OMK50S19 scope=dapr.metrics type=log ver=1.9.0\ntime=\"2022-10-17T14:56:55.4077529-05:00\" level=info msg=\"Raft server is starting on 127.0.0.1:8201...\" instance=LAPTOP-OMK50S19 scope=dapr.placement.raft type=log ver=1.9.0\ntime=\"2022-10-17T14:56:55.4077529-05:00\" level=info msg=\"placement service started on port 6050\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\ntime=\"2022-10-17T14:56:55.4082772-05:00\" level=info msg=\"Healthz server is listening on :8080\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\ntime=\"2022-10-17T14:56:56.8232286-05:00\" level=info msg=\"cluster leadership acquired\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\ntime=\"2022-10-17T14:56:56.8232286-05:00\" level=info msg=\"leader is established.\" instance=LAPTOP-OMK50S19 scope=dapr.placement type=log ver=1.9.0\n```\n\n----------------------------------------\n\nTITLE: Decrypting String with RSA Key in JavaScript\nDESCRIPTION: Decrypts an encrypted buffer using the RSA key stored in the local storage component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst decrypted = await client.crypto.decrypt(encrypted, {\n  componentName: \"localstorage\",\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Webhook Admission Error\nDESCRIPTION: Error message showing webhook admission denial when trying to run a debug container in Kubernetes due to service account restrictions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nroot:[dapr]$ kubectl run -i --tty --rm debug --image=busybox --restart=Never -- sh\nError from server: admission webhook \"sidecar-injector.dapr.io\" denied the request: service account 'user-xdd5l' not on the list of allowed controller accounts\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ on Kubernetes with Helm\nDESCRIPTION: Command to install RabbitMQ on Kubernetes using Helm chart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install rabbitmq stable/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Developer Frameworks Table in Markdown\nDESCRIPTION: Markdown table showing supported web frameworks across different programming languages in Dapr, including .NET, Java, Python, JavaScript, and PHP platforms.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Frameworks | Description |\n|----------|------------|-------------|\n| [.NET]({{< ref dotnet >}}) | [ASP.NET Core](https://github.com/dapr/dotnet-sdk/tree/master/examples/AspNetCore) | Brings stateful routing controllers that respond to pub/sub events from other services. Can also take advantage of [ASP.NET Core gRPC Services](https://docs.microsoft.com/aspnet/core/grpc/).\n| [Java]({{< ref java >}}) | [Spring Boot](https://spring.io/) | Build Spring boot applications with Dapr APIs\n| [Python]({{< ref python >}}) | [Flask]({{< ref python-flask.md >}}) | Build Flask applications with Dapr APIs\n| [JavaScript](https://github.com/dapr/js-sdk) | [Express](https://expressjs.com/) | Build Express applications with Dapr APIs\n| [PHP]({{< ref php >}}) | | You can serve with Apache, Nginx, or Caddyserver.\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Order Processor App\nDESCRIPTION: The expected console output when running the order processor app. It shows the registration of workflows and activities, the start of the workflow runtime, and the execution of the order processing workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP - order-processor == *** Welcome to the Dapr Workflow console app sample!\n== APP - order-processor == *** Using this app, you can place orders that start workflows.\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Workflow: OrderProcessingWorkflow\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Activity: NotifyActivity\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Activity: ProcessPaymentActivity\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Activity: RequestApprovalActivity\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Activity: VerifyInventoryActivity\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Registered Activity: UpdateInventoryActivity\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - List of registered workflows: [io.dapr.quickstarts.workflows.OrderProcessingWorkflow]\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - List of registered activites: [io.dapr.quickstarts.workflows.activities.NotifyActivity, io.dapr.quickstarts.workflows.activities.UpdateInventoryActivity, io.dapr.quickstarts.workflows.activities.ProcessPaymentActivity, io.dapr.quickstarts.workflows.activities.RequestApprovalActivity, io.dapr.quickstarts.workflows.activities.VerifyInventoryActivity]\n== APP - order-processor == [main] INFO io.dapr.workflows.runtime.WorkflowRuntimeBuilder - Successfully built dapr workflow runtime\n== APP - order-processor == Start workflow runtime\n== APP - order-processor == Feb 12, 2025 2:44:13 PM com.microsoft.durabletask.DurableTaskGrpcWorker startAndBlock\n== APP - order-processor == INFO: Durable Task worker is connecting to sidecar at 127.0.0.1:39261.\n== APP - order-processor == ==========Begin the purchase of item:==========\n== APP - order-processor == Starting order workflow, purchasing 1 of cars\n== APP - order-processor == scheduled new workflow instance of OrderProcessingWorkflow with instance ID: d1bf548b-c854-44af-978e-90c61ed88e3c\n== APP - order-processor == [Thread-0] INFO io.dapr.workflows.WorkflowContext - Starting Workflow: io.dapr.quickstarts.workflows.OrderProcessingWorkflow\n== APP - order-processor == [Thread-0] INFO io.dapr.workflows.WorkflowContext - Instance ID(order ID): d1bf548b-c854-44af-978e-90c61ed88e3c\n== APP - order-processor == [Thread-0] INFO io.dapr.workflows.WorkflowContext - Current Orchestration Time: 2025-02-12T14:44:18.154Z\n== APP - order-processor == [Thread-0] INFO io.dapr.workflows.WorkflowContext - Received Order: OrderPayload [itemName=cars, totalCost=5000, quantity=1]\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.NotifyActivity - Received Order: OrderPayload [itemName=cars, totalCost=5000, quantity=1]\n== APP - order-processor == workflow instance d1bf548b-c854-44af-978e-90c61ed88e3c started\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.VerifyInventoryActivity - Verifying inventory for order 'd1bf548b-c854-44af-978e-90c61ed88e3c' of 1 cars\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.VerifyInventoryActivity - There are 10 cars available for purchase\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.VerifyInventoryActivity - Verified inventory for order 'd1bf548b-c854-44af-978e-90c61ed88e3c' of 1 cars\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.ProcessPaymentActivity - Processing payment: d1bf548b-c854-44af-978e-90c61ed88e3c for 1 cars at $5000\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.ProcessPaymentActivity - Payment for request ID 'd1bf548b-c854-44af-978e-90c61ed88e3c' processed successfully\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.UpdateInventoryActivity - Updating inventory for order 'd1bf548b-c854-44af-978e-90c61ed88e3c' of 1 cars\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.UpdateInventoryActivity - Updated inventory for order 'd1bf548b-c854-44af-978e-90c61ed88e3c': there are now 9 cars left in stock\n== APP - order-processor == there are now 9 cars left in stock\n== APP - order-processor == [Thread-0] INFO io.dapr.quickstarts.workflows.activities.NotifyActivity - Order completed! : d1bf548b-c854-44af-978e-90c61ed88e3c\n== APP - order-processor == workflow instance completed, out is: {\"processed\":true}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Windows using winget\nDESCRIPTION: Installs the latest Windows Dapr CLI using the winget package manager.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Dapr.CLI\n```\n\n----------------------------------------\n\nTITLE: Deploying Localstack on Kubernetes\nDESCRIPTION: Kubernetes configuration for deploying Localstack in a cluster. This setup includes both a Deployment and a Service definition to expose Localstack on port 4566 as a LoadBalancer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: localstack\nspec:\n  # using the selector, we will expose the running deployments\n  # this is how Kubernetes knows, that a given service belongs to a deployment\n  selector:\n    matchLabels:\n      app: localstack\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: localstack\n    spec:\n      containers:\n      - name: localstack\n        image: localstack/localstack:latest\n        ports:\n          # Expose the edge endpoint\n          - containerPort: 4566\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: localstack\n  labels:\n    app: localstack\nspec:\n  selector:\n    app: localstack\n  ports:\n  - protocol: TCP\n    port: 4566\n    targetPort: 4566\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Running Order Processor Service with Dapr in JavaScript\nDESCRIPTION: This command runs the 'order-processor' JavaScript service with a Dapr sidecar, specifying various configuration options like app port, ID, and resources path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 5001 --app-id order-processor --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3501 -- npm start\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Expiration Date in PostgreSQL State Table\nDESCRIPTION: This SQL query creates an index on the 'expiredate' column in the 'state' table to optimize the cleanup process for TTL records. This is useful for tables with a large number of records where only some use TTL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX expiredate_idx\n    ON state\n    USING btree (expiredate ASC NULLS LAST);\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT3 Binding with UUID Consumer ID\nDESCRIPTION: YAML configuration showing how to set up MQTT3 binding with a UUID-based consumer ID for shared topic consumption across multiple instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mqtt3.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mqtt-binding\n  namespace: default\nspec:\n  type: bindings.mqtt3\n  version: v1\n  metadata:\n  - name: consumerID\n    value: \"{uuid}\"\n  - name: url\n    value: \"tcp://admin:public@localhost:1883\"\n  - name: topic\n    value: \"topic1\"\n  - name: retain\n    value: \"false\"\n  - name: cleanSession\n    value: \"true\"\n  - name: backoffMaxRetries\n    value: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr with All Components in Self-Hosted Mode\nDESCRIPTION: Uninstalls Dapr and removes all associated components including the .dapr directory, Redis, Placement, Scheduler, and Zipkin containers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-uninstall.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall --all\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Auto-injection\nDESCRIPTION: Kubernetes deployment configuration showing how to enable automatic injection of pluggable components using annotations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/pluggable-components-registration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app\n  template:\n    metadata:\n      labels:\n        app: app\n      annotations:\n        dapr.io/inject-pluggable-components: \"true\" \n        dapr.io/app-id: \"my-app\"\n        dapr.io/enabled: \"true\"\n    spec:\n      containers:\n        - name: app\n           image: YOUR_APP_IMAGE:YOUR_APP_IMAGE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Getting Actor State by Key\nDESCRIPTION: Example of how to retrieve actor state for a specific key. This example retrieves the 'location' state for a 'stormtrooper' actor with ID 50.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/actors/stormtrooper/50/state/location \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Component with Production Namespace\nDESCRIPTION: YAML configuration for a Redis state store component that is scoped to the production namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\n  namespace: production\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: redis-master:6379\n```\n\n----------------------------------------\n\nTITLE: Running Order Processor App with Dapr Multi-App Run\nDESCRIPTION: Command to start the order processor app alongside a Dapr sidecar using Multi-App Run. This command is executed from the java/sdk/workflows/java/sdk directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncd workflows/java/sdk\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Running Multi-App Template with Custom Filename in Bash\nDESCRIPTION: This bash command shows how to run a Multi-App template file with a custom filename using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f ./<your-preferred-file-name>.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying ConfigMap for Prometheus Metrics Scraping\nDESCRIPTION: Command to apply a ConfigMap that enables Prometheus metrics endpoint scraping for Azure Monitor. This configures Azure Monitor to collect metrics from Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./azm-config.map.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr gRPC in Self-Hosted Mode\nDESCRIPTION: Command to run Dapr in self-hosted mode using gRPC protocol for app communication on port 5005.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/grpc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-protocol grpc --app-port 5005 node app.js\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr Runtime using CLI\nDESCRIPTION: Basic usage of the 'dapr uninstall' command. This command uninstalls the Dapr runtime from the system.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall [flags]\n```\n\n----------------------------------------\n\nTITLE: Dapr Internal Actor Type Patterns\nDESCRIPTION: Example format of internal actor type names used by the Dapr workflow engine. Shows how namespace and appID are incorporated into the actor type identifiers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndapr.internal.{namespace}.{appID}.workflow\ndapr.internal.{namespace}.{appID}.activity\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr with Custom Scheduler Volume\nDESCRIPTION: Command to initialize Dapr with a custom scheduler volume for persistent storage of scheduler jobs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-persisting-scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --scheduler-volume my-scheduler-volume\n```\n\n----------------------------------------\n\nTITLE: Running Sentry Service Locally\nDESCRIPTION: Command to run the Sentry service locally, specifying the directory for issuer credentials and the trust domain.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./sentry --issuer-credentials $HOME/.dapr/certs --trust-domain cluster.local\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr Configuration Annotation\nDESCRIPTION: YAML configuration for adding the Dapr configuration annotation to enable tracing for a container.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/datadog.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n   dapr.io/config: \"appconfig\"\n```\n\n----------------------------------------\n\nTITLE: Running KubeMQ Broker with Docker\nDESCRIPTION: Docker command to run a KubeMQ broker instance with specified ports and authentication token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubemq.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 -p 50000:50000 -p 9090:9090 -e KUBEMQ_TOKEN=<your-key> kubemq/kubemq\n```\n\n----------------------------------------\n\nTITLE: Running Hazelcast in Docker for Self-Hosted Environments\nDESCRIPTION: Command to run Hazelcast locally using Docker. Sets the public address to 127.0.0.1:5701 and exposes port 5701 for client connections.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-hazelcast.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e JAVA_OPTS=\"-Dhazelcast.local.publicAddress=127.0.0.1:5701\" -p 5701:5701 hazelcast/hazelcast\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application with CLI\nDESCRIPTION: Example command to start a Dapr application using the Dapr CLI. This command runs a Node.js app with specific Dapr configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-how-to-debug-multiple-dapr-apps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id nodeapp --app-port 3000 --dapr-http-port 3500 app.js\n```\n\n----------------------------------------\n\nTITLE: Running Placement Service on Linux/MacOS\nDESCRIPTION: Command and output for starting the Dapr placement service on Linux/MacOS systems, showing service initialization and port configuration\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-no-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ $HOME/.dapr/bin/placement\n\nINFO[0000] starting Dapr Placement Service -- version 1.0.0-rc.1 -- commit 13ae49d  instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\nINFO[0000] log level set to: info                        instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\nINFO[0000] metrics server started on :9090/              instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.metrics type=log ver=1.0.0-rc.1\nINFO[0000] Raft server is starting on 127.0.0.1:8201...  instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement.raft type=log ver=1.0.0-rc.1\nINFO[0000] placement service started on port 50005       instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\nINFO[0000] Healthz server is listening on :8080          instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\nINFO[0001] cluster leadership acquired                   instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\nINFO[0001] leader is established.                        instance=Nicoletaz-L10.redmond.corp.microsoft.com scope=dapr.placement type=log ver=1.0.0-rc.1\n```\n\n----------------------------------------\n\nTITLE: Failed Unsubscribe Response Format in Dapr\nDESCRIPTION: JSON response format returned when unsubscribing from configuration changes fails. Includes an error message explaining the failure.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ok\": false,\n  \"message\": \"<dapr returned error message>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading New Relic Kubernetes Manifests\nDESCRIPTION: Commands to download the required Kubernetes manifest files for manual installation of New Relic logging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/newrelic.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/newrelic/helm-charts/master/charts/newrelic-logging/k8s/fluent-conf.yml > fluent-conf.yml\ncurl https://raw.githubusercontent.com/newrelic/helm-charts/master/charts/newrelic-logging/k8s/new-relic-fluent-plugin.yml > new-relic-fluent-plugin.yml\ncurl https://raw.githubusercontent.com/newrelic/helm-charts/master/charts/newrelic-logging/k8s/rbac.yml > rbac.yml\n```\n\n----------------------------------------\n\nTITLE: Basic Components Command Usage\nDESCRIPTION: Shows the basic syntax for using the dapr components command with optional flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-components.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr components [flags]\n```\n\n----------------------------------------\n\nTITLE: Running the checkout service with Dapr sidecar\nDESCRIPTION: Command to run the checkout service alongside a Dapr sidecar using HTTP protocol with specific ports and application ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --app-protocol http --dapr-http-port 3500 -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Video Embed\nDESCRIPTION: HTML iframe code for embedding a YouTube video demonstrating Dapr Multi-App Run overview\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/s1p9MNl4VGo?start=2456\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Dapr Configurations Usage Examples\nDESCRIPTION: Examples demonstrating different ways to use the dapr configurations command including namespace-specific queries and output formatting.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-configurations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List Dapr configurations in all namespaces in Kubernetes mode\ndapr configurations -k\n\n# List Dapr configurations in specific namespace in Kubernetes mode\ndapr configurations -k --namespace default\n\n# Print specific Dapr configuration in Kubernetes mode\ndapr configurations -k -n appconfig\n\n# List Dapr configurations in all namespaces in Kubernetes mode\ndapr configurations -k --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeMQ Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a KubeMQ binding component in Dapr. Defines essential metadata including server address, channel name, and binding direction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubemq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: binding-topic\nspec:\n  type: bindings.kubemq\n  version: v1\n  metadata:\n    - name: address\n      value: \"localhost:50000\"\n    - name: channel\n      value: \"queue1\"\n    - name: direction\n      value: \"input, output\"\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting NGINX Ingress Controller in Kubernetes\nDESCRIPTION: Bash commands for checking pod status, viewing logs, and restarting the NGINX ingress controller pod if issues are detected.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods -l app=nginx-ingress\n\nNAME                                                   READY   STATUS    RESTARTS   AGE\nnginx-nginx-ingress-controller-649df94867-fp6mg        2/2     Running   0          51m\nnginx-nginx-ingress-default-backend-6d96c457f6-4nbj5   1/1     Running   0          55m\n\n$ kubectl logs nginx-nginx-ingress-controller-649df94867-fp6mg nginx-ingress-controller\n\n# If you see 503s logged from calls to webhook endpoint '/api/events' restart the pod\n# ..\"OPTIONS /api/events HTTP/1.1\" 503..\n\n$ kubectl delete pod nginx-nginx-ingress-controller-649df94867-fp6mg\n\n# Check the logs again - it should start returning 200\n# ..\"OPTIONS /api/events HTTP/1.1\" 200..\n```\n\n----------------------------------------\n\nTITLE: Port-forwarding Jaeger UI Service on Kubernetes\nDESCRIPTION: Command to port-forward the Jaeger query service from a Kubernetes cluster to the local machine, allowing access to the Jaeger UI for viewing distributed traces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/jaeger-query 16686 -n observability\n```\n\n----------------------------------------\n\nTITLE: Equivalent SQL Query for California Employees\nDESCRIPTION: Shows the SQL equivalent of the JSON query for finding employees in California.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM c WHERE\n  state = \"CA\"\nORDER BY\n  person.id DESC\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Component Configuration Structure in YAML\nDESCRIPTION: Base template for defining a Dapr component specification. Includes all essential fields like apiVersion, kind, auth, metadata, and spec sections with placeholders for actual values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/resource-specs/component-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nauth: \n secretstore: <REPLACE-WITH-SECRET-STORE-NAME>\nmetadata:\n  name: <REPLACE-WITH-COMPONENT-NAME>\n  namespace: <REPLACE-WITH-COMPONENT-NAMESPACE>\nspec:\n  type: <REPLACE-WITH-COMPONENT-TYPE>\n  version: v1\n  initTimeout: <REPLACE-WITH-TIMEOUT-DURATION>\n  ignoreErrors: <REPLACE-WITH-BOOLEAN>\n  metadata:\n  - name: <REPLACE-WITH-METADATA-NAME>\n    value: <REPLACE-WITH-METADATA-VALUE>\nscopes:\n  - <REPLACE-WITH-APPID>\n  - <REPLACE-WITH-APPID>\n```\n\n----------------------------------------\n\nTITLE: Importing Packages for Dapr gRPC Server\nDESCRIPTION: Go code showing required imports for implementing a Dapr gRPC server.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\n\tcommonv1pb \"github.com/dapr/dapr/pkg/proto/common/v1\"\n\tpb \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n\t\"google.golang.org/grpc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Security Group Ingress Rule Configuration\nDESCRIPTION: AWS CLI command to add an inbound security group rule for Dapr sidecar communication on port 4000.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 authorize-security-group-ingress --region [your_aws_region] \\\n--group-id [your_security_group] \\\n--protocol tcp \\\n--port 4000 \\\n--source-group [your_security_group]\n```\n\n----------------------------------------\n\nTITLE: HTTP API State Management using PowerShell\nDESCRIPTION: Demonstrates state management using Dapr's HTTP API endpoints through PowerShell commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '[{ \"key\": \"order_1\", \"value\": \"250\"}, { \"key\": \"order_2\", \"value\": \"550\"}]' -Uri 'http://localhost:3601/v1.0/state/statestore'\n\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Body '{\"keys\":[\"order_1\", \"order_2\"]}' -Uri 'http://localhost:3601/v1.0/state/statestore/bulk'\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with OpenSSL\nDESCRIPTION: Commands to generate an Ed25519 key pair using OpenSSL. Requires OpenSSL 1.1.0 or later. Creates private.pem and public.pem files containing the key pair.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out private.pem\nopenssl pkey -in private.pem -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Creating AKS Cluster\nDESCRIPTION: Command to create an AKS cluster with HTTP application routing enabled and 2 nodes. Requires Kubernetes version 1.13.x or newer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-aks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz aks create --resource-group [your_resource_group] --name [your_aks_cluster_name] --node-count 2 --enable-addons http_application_routing --generate-ssh-keys\n```\n\n----------------------------------------\n\nTITLE: Displaying Dapr CLI Usage and Commands\nDESCRIPTION: Shows the main Dapr CLI help output, including the ASCII art logo, available commands for both Kubernetes and self-hosted platforms, and global flags. Documents core functionality like initialization, invocation, publishing, and runtime management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/cli-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n         __\n    ____/ /___ _____  _____\n   / __  / __ '/ __ \\/ ___/\n  / /_/ / /_/ / /_/ / /\n  \\__,_/\\__,_/ .___/_/\n              /_/\n\n===============================\nDistributed Application Runtime\n\nUsage:\n  dapr [command]\n\nAvailable Commands:\n  annotate       Add dapr annotations to a Kubernetes configuration. Supported platforms: Kubernetes\n  build-info     Print build info of Dapr CLI and runtime\n  completion     Generates shell completion scripts\n  components     List all Dapr components. Supported platforms: Kubernetes\n  configurations List all Dapr configurations. Supported platforms: Kubernetes\n  dashboard      Start Dapr dashboard. Supported platforms: Kubernetes and self-hosted\n  help           Help about any command\n  init           Install Dapr on supported hosting platforms. Supported platforms: Kubernetes and self-hosted\n  invoke         Invoke a method on a given Dapr application. Supported platforms: Self-hosted\n  list           List all Dapr instances. Supported platforms: Kubernetes and self-hosted\n  logs           Get Dapr sidecar logs for an application. Supported platforms: Kubernetes\n  mtls           Check if mTLS is enabled. Supported platforms: Kubernetes\n  publish        Publish a pub-sub event. Supported platforms: Self-hosted\n  run            Run Dapr and (optionally) your application side by side. Supported platforms: Self-hosted\n  status         Show the health status of Dapr services. Supported platforms: Kubernetes\n  stop           Stop Dapr instances and their associated apps. Supported platforms: Self-hosted\n  uninstall      Uninstall Dapr runtime. Supported platforms: Kubernetes and self-hosted\n  upgrade        Upgrades a Dapr control plane installation in a cluster. Supported platforms: Kubernetes\n  version        Print the Dapr runtime and CLI version\n\nFlags:\n  -h, --help          help for dapr\n      --log-as-json   Log output in JSON format\n  -v, --version       version for dapr\n\nUse \"dapr [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Applying Tracing Configuration in Kubernetes\nDESCRIPTION: Kubernetes command to apply the Zipkin tracing configuration created in 'tracing.yaml'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f tracing.yaml\n```\n\n----------------------------------------\n\nTITLE: Opening Dapr Components Directory on Windows (PowerShell)\nDESCRIPTION: PowerShell command to open the Dapr components directory in Windows Explorer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nexplorer \"$env:USERPROFILE\\.dapr\"\n```\n\n----------------------------------------\n\nTITLE: High Cardinality Without Path Matching Configuration\nDESCRIPTION: A YAML snippet showing HTTP metrics configuration with high cardinality and no path matching. This results in detailed but potentially resource-intensive metrics collection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  increasedCardinality: true\n```\n\n----------------------------------------\n\nTITLE: JavaScript Environment Setup Commands\nDESCRIPTION: Terminal commands for setting up the JavaScript development environment, including cloning the repository and installing dependencies.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\ncd ../state_management/javascript/sdk/order-processor\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Listing Dapr-enabled Deployments\nDESCRIPTION: This Dapr CLI command lists all Dapr-enabled deployments in the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr list -k\n\nAPP ID     APP PORT  AGE  CREATED\nnodeapp    3000      16h  2020-07-29 17:16.22\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault with Client Secret (Kubernetes)\nDESCRIPTION: YAML configuration for setting up Azure Key Vault secret store component in Kubernetes using client secret authentication. References a secret stored in Kubernetes secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\n  namespace: default\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n  - name: azureTenantId\n    value: \"[your_tenant_id]\"\n  - name: azureClientId\n    value: \"[your_client_id]\"\n  - name: azureClientSecret\n    secretKeyRef:\n      name: \"[your_k8s_secret_name]\"\n      key: \"[your_k8s_secret_key]\"\nauth:\n  secretStore: kubernetes\n```\n\n----------------------------------------\n\nTITLE: Dapr Container Image Reference Formats\nDESCRIPTION: Examples of how to reference Dapr sidecar container images, including both default and stable component variations. Shows both GitHub Container Registry and Docker Registry formats.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/support/support-release-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Default sidecar images: `daprio/daprd:<version>` or `ghcr.io/dapr/daprd:<version>` (for example `ghcr.io/dapr/daprd:1.11.1`)\n* Sidecar images for stable components: `daprio/daprd:<version>-stablecomponents` or `ghcr.io/dapr/daprd:<version>-stablecomponents` (for example `ghcr.io/dapr/daprd:1.11.1-stablecomponents`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Key Secret Environment Variable in Kubernetes Deployment\nDESCRIPTION: Example of a Kubernetes deployment configuration that uses dapr.io/env-from-secret annotation to inject a single key secret as an environment variable into the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/environment-variables-secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodeapp\nspec:\n  template:\n    metadata:\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"nodeapp\"\n        dapr.io/app-port: \"3000\"\n        dapr.io/env-from-secret: \"AUTH_TOKEN=auth-headers-secret\"\n    spec:\n      containers:\n      - name: node\n        image: dapriosamples/hello-k8s-node:latest\n        ports:\n        - containerPort: 3000\n        imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Releasing a Lock in Dapr\nDESCRIPTION: The HTTP request format for releasing a previously acquired distributed lock via Dapr. This endpoint requires the Dapr port and storename as parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/distributed_lock_api.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0-alpha1/unlock/<storename>\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector on Kubernetes\nDESCRIPTION: Command to apply the OpenTelemetry Collector configuration to a Kubernetes cluster, which enables collecting traces from Dapr sidecars and forwarding them to Jaeger.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f open-telemetry-collector-jaeger.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Elasticsearch Helm Repository\nDESCRIPTION: Commands to add and update the Elasticsearch Helm repository\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add elastic https://helm.elastic.co\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Redis Get Operation Request\nDESCRIPTION: JSON request format for retrieving a record from Redis using the get operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"key\": \"key1\"\n  },\n  \"data\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error Code Metric Format\nDESCRIPTION: A JSON example showing the format of an error code metric. This demonstrates the structure of metrics collected when error code tracking is enabled, including app_id, category, and error_code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/metrics-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app_id\": \"publisher-app\",\n  \"category\": \"state\",\n  \"dapr_io_enabled\": \"true\",\n  \"error_code\": \"ERR_STATE_STORE_NOT_CONFIGURED\",\n  \"instance\": \"10.244.1.64:9090\",\n  \"job\": \"kubernetes-service-endpoints\",\n  \"namespace\": \"my-app\",\n  \"node\": \"my-node\",\n  \"service\": \"publisher-app-dapr\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object in Alibaba Cloud OSS using JSON\nDESCRIPTION: This JSON snippet shows the structure for creating an object in Alibaba Cloud Object Storage. It specifies the operation type and the data to be stored.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"YOUR_CONTENT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr with Custom Container Runtime\nDESCRIPTION: Uninstalls Dapr using a specified container runtime (e.g., Podman). This allows for flexibility in container runtime choice.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-uninstall.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall --all --container-runtime podman\n```\n\n----------------------------------------\n\nTITLE: Installing Memcached on Kubernetes using Helm\nDESCRIPTION: Command to install Memcached on a Kubernetes cluster using Helm. This installs Memcached into the default namespace, which can then be accessed using the service name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-memcached.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install memcached stable/memcached\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar with HTTP Port (Bash)\nDESCRIPTION: Launches a Dapr sidecar that listens on port 3500 for an application named 'myapp'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --dapr-http-port 3500\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr with Docker in Airgap Environment\nDESCRIPTION: Command to initialize Dapr using a pre-downloaded installer bundle in an airgap environment with Docker. This command should be run from the bundle directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-airgap.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --from-dir .\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Router in TinyGo for Wasm\nDESCRIPTION: TinyGo implementation of a simple HTTP router using the http-wasm-guest-tinygo handler. Demonstrates request handling and URI manipulation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-wasm.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"strings\"\n\n\t\"github.com/http-wasm/http-wasm-guest-tinygo/handler\"\n\t\"github.com/http-wasm/http-wasm-guest-tinygo/handler/api\"\n)\n\nfunc main() {\n\thandler.HandleRequestFn = handleRequest\n}\n\n// handleRequest implements a simple HTTP router.\nfunc handleRequest(req api.Request, resp api.Response) (next bool, reqCtx uint32) {\n\t// If the URI starts with /host, trim it and dispatch to the next handler.\n\tif uri := req.GetURI(); strings.HasPrefix(uri, \"/host\") {\n\t\treq.SetURI(uri[5:])\n\t\tnext = true // proceed to the next handler on the host.\n\t\treturn\n\t}\n\n\t// Serve a static response\n\tresp.Headers().Set(\"Content-Type\", \"text/plain\")\n\tresp.Body().WriteString(\"hello\")\n\treturn // skip the next handler, as we wrote a response.\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Upload Response Format\nDESCRIPTION: JSON response format returned after successful upload to AWS S3 using Dapr's binding. It includes the URL location of the uploaded object and a version ID if bucket versioning is enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"location\":\"https://<your bucket>.s3.<your region>.amazonaws.com/<key>\",\n    \"versionID\":\"<version ID if Bucket Versioning is enabled\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Dashboard on Kubernetes\nDESCRIPTION: Launch the Dapr dashboard for the Kubernetes deployment. Optionally specify a non-default namespace if Dapr was installed in a custom namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr dashboard -k\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr dashboard -k -n <your-namespace>\n```\n\n----------------------------------------\n\nTITLE: Managing Workflows via HTTP\nDESCRIPTION: HTTP endpoint examples for starting and terminating workflows using the Dapr HTTP API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/dapr/OrderProcessingWorkflow/start?instanceID=12345678\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/dapr/12345678/terminate\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Actors\nDESCRIPTION: Commands to create and configure a new Kubernetes namespace for actor deployment\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/namespaced-actors.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace namespace-actorA\nkubectl config set-context --current --namespace=namespace-actorA\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom Scheduler Storage Size - Helm\nDESCRIPTION: Helm command to install Dapr with increased scheduler storage size (16Gi).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--set dapr_scheduler.cluster.storageSize=16Gi \\\n--set dapr_scheduler.etcdSpaceQuota=16Gi \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Checking Dapr Status on Kubernetes\nDESCRIPTION: This bash command checks the status of Dapr components on the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr status -k\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Container with Host Network\nDESCRIPTION: Docker command to run Dapr in a container using host network mode with mounted components directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --net=\"host\" --mount type=bind,source=\"$(pwd)\"/components,target=/components daprio/daprd:edge ./daprd -app-id <my-app-id> -app-port <my-app-port>\n```\n\n----------------------------------------\n\nTITLE: GCS Object List Response Structure in JSON\nDESCRIPTION: Example response showing the detailed structure of a Google Cloud Storage object listing. The response includes metadata like bucket name, object name, size, content type, timestamps, and storage class information. The response is returned as a JSON array containing object entries.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"Bucket\": \"<your bucket>\",\n\t\t\"Name\": \"02WGzEdsUWNlQ\",\n\t\t\"ContentType\": \"image/png\",\n\t\t\"ContentLanguage\": \"\",\n\t\t\"CacheControl\": \"\",\n\t\t\"EventBasedHold\": false,\n\t\t\"TemporaryHold\": false,\n\t\t\"RetentionExpirationTime\": \"0001-01-01T00:00:00Z\",\n\t\t\"ACL\": null,\n\t\t\"PredefinedACL\": \"\",\n\t\t\"Owner\": \"\",\n\t\t\"Size\": 5187,\n\t\t\"ContentEncoding\": \"\",\n\t\t\"ContentDisposition\": \"\",\n\t\t\"MD5\": \"aQdLBCYV0BxA51jUaxc3pQ==\",\n\t\t\"CRC32C\": 1058633505,\n\t\t\"MediaLink\": \"https://storage.googleapis.com/download/storage/v1/b/<your bucket>/o/02WGzEdsUWNlQ?generation=1631553155678071&alt=media\",\n\t\t\"Metadata\": null,\n\t\t\"Generation\": 1631553155678071,\n\t\t\"Metageneration\": 1,\n\t\t\"StorageClass\": \"STANDARD\",\n\t\t\"Created\": \"2021-09-13T17:12:35.679Z\",\n\t\t\"Deleted\": \"0001-01-01T00:00:00Z\",\n\t\t\"Updated\": \"2021-09-13T17:12:35.679Z\",\n\t\t\"CustomerKeySHA256\": \"\",\n\t\t\"KMSKeyName\": \"\",\n\t\t\"Prefix\": \"\",\n\t\t\"Etag\": \"CPf+mpK5/PICEAE=\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Partial Inclusion for Component Documentation\nDESCRIPTION: Hugo template syntax for including HTML partial files that contain component descriptions and lock-specific documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< partial \"components/description.html\" >}}\n\n{{< partial \"components/locks.html\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-App Run Template Properties Table in Markdown\nDESCRIPTION: A comprehensive table listing all available properties for the Multi-App Run template in Dapr. It includes property names, whether they are required, details about their usage, and examples.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{{< table \"table table-white table-striped table-bordered\" >}}\n\n| Properties               | Required | Details | Example |\n|--------------------------|:--------:|--------|--------|\n| `appDirPath`             | Y        | Path to the your application code | `./webapp/`, `./backend/` |\n| `appID`                  | N        | Application's app ID. If not provided, will be derived from `appDirPath` | `webapp`, `backend` |\n| `resourcesPath`          | N        | **Deprecated**. Path to your Dapr resources. Can be default value  by convention| `./app/components`, `./webapp/components` |\n| `resourcesPaths`         | N        | Comma separated paths to your Dapr resources. Can be default value by convention | `./app/components`, `./webapp/components` |\n| `appChannelAddress`      | N        | The network address the application listens on. Can be left to the default value by convention. | `127.0.0.1` | `localhost` |\n| `configFilePath`         | N        | Path to your application's configuration file | `./webapp/config.yaml` |\n| `appProtocol`            | N        | The protocol Dapr uses to talk to the application. | `http`, `grpc` |\n| `appPort`                | N        | The port your application is listening on | `8080`, `3000` |\n| `daprHTTPPort`           | N        | Dapr HTTP port |  |\n| `daprGRPCPort`           | N        | Dapr GRPC port |  |\n| `daprInternalGRPCPort`   | N        | gRPC port for the Dapr Internal API to listen on; used when parsing the value from a local DNS component |  |\n| `metricsPort`            | N        | The port that Dapr sends its metrics information to |  |\n| `unixDomainSocket`       | N        | Path to a unix domain socket dir mount. If specified, communication with the Dapr sidecar uses unix domain sockets for lower latency and greater throughput when compared to using TCP ports. Not available on Windows. | `/tmp/test-socket` |\n| `profilePort`            | N        | The port for the profile server to listen on |  |\n| `enableProfiling`        | N        | Enable profiling via an HTTP endpoint |  |\n| `apiListenAddresses`     | N        | Dapr API listen addresses |  |\n| `logLevel`               | N        | The log verbosity. |  |\n| `appMaxConcurrency`      | N        | The concurrency level of the application; default is unlimited |  |\n| `placementHostAddress`   | N        | Comma separated list of addresses for Dapr placement servers | `127.0.0.1:50057,127.0.0.1:50058` |\n| `schedulerHostAddress`   | N        | Dapr Scheduler Service host address | `localhost:50006` |\n| `appSSL`                 | N        | Enable https when Dapr invokes the application |  |\n| `maxBodySize`            | N        | Max size of the request body in MB. Set the value using size units (e.g., `16Mi` for 16MB). The default is `4Mi` |  |\n| `readBufferSize`         | N        | Max size of the HTTP read buffer in KB. This also limits the maximum size of HTTP headers. Set the value using size units, for example `32Ki` will support headers up to 32KB . Default is `4Ki` for 4KB |  |\n| `enableAppHealthCheck`   | N        | Enable the app health check on the application | `true`, `false` |\n| `appHealthCheckPath`     | N        | Path to the health check file | `/healthz` |\n| `appHealthProbeInterval` | N        | Interval to probe for the health of the app in seconds |  |\n| `appHealthProbeTimeout`  | N        | Timeout for app health probes in milliseconds |  |\n| `appHealthThreshold`     | N        | Number of consecutive failures for the app to be considered unhealthy |  |\n| `enableApiLogging`       | N        | Enable the logging of all API calls from application to Dapr |  |\n| `runtimePath`            | N        | Dapr runtime install path |  |\n| `env`                    | N        | Map to environment variable; environment variables applied per application will overwrite environment variables shared across applications | `DEBUG`, `DAPR_HOST_ADD` |\n| `appLogDestination`                    | N        | Log destination for outputting app logs; Its value can be file, console or fileAndConsole. Default is fileAndConsole | `file`, `console`, `fileAndConsole` |\n| `daprdLogDestination`                    | N        | Log destination for outputting daprd logs; Its value can be file, console or fileAndConsole. Default is file | `file`, `console`, `fileAndConsole` |\n\n{{< /table >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Default VM Driver in Minikube\nDESCRIPTION: Command to configure the default VM driver for Minikube. Replace [driver_name] with your preferred driver such as 'hyperv', 'virtualbox', or other supported drivers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-minikube.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube config set vm-driver [driver_name]\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Dapr in AKS using GitHub Actions\nDESCRIPTION: This YAML and Bash snippet shows how to install a specific version of Dapr, initialize it in an Azure Kubernetes Service environment, and check its status. It includes steps for getting AKS credentials and running Dapr initialization commands.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/github_actions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Dapr\n  uses: dapr/setup-dapr@v1\n  with:\n    version: '{{% dapr-latest-version long=\"true\" %}}'\n\n- name: Initialize Dapr\n  shell: bash\n  run: |\n    # Get the credentials to K8s to use with dapr init\n    az aks get-credentials --resource-group ${{ env.RG_NAME }} --name \"${{ steps.azure-deployment.outputs.aksName }}\"\n\n    # Initialize Dapr    \n    # Group the Dapr init logs so these lines can be collapsed.\n    echo \"::group::Initialize Dapr\"\n    dapr init --kubernetes --wait --runtime-version ${{ env.DAPR_VERSION }}\n    echo \"::endgroup::\"\n\n    dapr status --kubernetes\n  working-directory: ./demos/demo3\n```\n\n----------------------------------------\n\nTITLE: Viewing Plain-text Formatted Logs in Dapr\nDESCRIPTION: Example of Dapr's default plain-text log format showing startup messages from the Dapr runtime with timestamp, log level, and other structured fields.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/logs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntime=\"2022-11-01T17:08:48.303776-07:00\" level=info msg=\"starting Dapr Runtime -- version 1.9.0 -- commit v1.9.0-g5dfcf2e\" instance=dapr-pod-xxxx scope=dapr.runtime type=log ver=1.9.0\ntime=\"2022-11-01T17:08:48.303913-07:00\" level=info msg=\"log level set to: info\" instance=dapr-pod-xxxx scope=dapr.runtime type=log ver=1.9.0\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in C#\nDESCRIPTION: Unsubscribes from configuration updates and exits the application using the Dapr C# SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n  client.UnsubscribeConfiguration(DAPR_CONFIGURATION_STORE, subscriptionId);\n  Console.WriteLine(\"App unsubscribed from config changes\");\n  Environment.Exit(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Using cURL with Dapr API Token\nDESCRIPTION: Example of using curl to make a request to the Dapr API with the required authentication token in the header.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/api-token.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3500/v1.0/metadata \\\n  --header \"dapr-api-token: my-token\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Dapr Upgrade Examples in Bash\nDESCRIPTION: Examples showing how to upgrade Dapr in a Kubernetes environment, including upgrading to the latest version, specifying a particular version, and setting additional configuration values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade Dapr in Kubernetes to latest version\ndapr upgrade -k\n\n# Upgrade or downgrade to a specified version of Dapr runtime in Kubernetes\ndapr upgrade -k --runtime-version 1.2\n\n# Upgrade or downgrade to a specified version of Dapr runtime in Kubernetes with value set\ndapr upgrade -k --runtime-version 1.2 --set global.logAsJson=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific State Data in SQL Server\nDESCRIPTION: Gets state data for a specific key within an application by using exact key matching with the application ID prefix.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE [Key] = 'myapp||balance'\n```\n\n----------------------------------------\n\nTITLE: Deploying Static Web App\nDESCRIPTION: Command to deploy the Dapr documentation Static Web App to Azure\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nazd up\n```\n\n----------------------------------------\n\nTITLE: Saving Text to Random UUID File with cURL (Windows)\nDESCRIPTION: cURL command for Windows to save text content to a randomly generated UUID file using the Local Storage binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\" }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Root Certificate with Step CLI\nDESCRIPTION: Command to create a root certificate using the Step CLI tool. Creates a root CA certificate without password protection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nstep certificate create cluster.local ca.crt ca.key --profile root-ca --no-password --insecure\n```\n\n----------------------------------------\n\nTITLE: Querying Placement State API with cURL\nDESCRIPTION: Example of how to query the Placement service API endpoint to retrieve the current placement table information using cURL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/placement_api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n curl localhost:8080/placement/state\n```\n\n----------------------------------------\n\nTITLE: Opening Dapr Components Directory on Windows (Command Prompt)\nDESCRIPTION: Command Prompt command to open the Dapr components directory in Windows Explorer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nexplorer \"%USERPROFILE%\\.dapr\"\n```\n\n----------------------------------------\n\nTITLE: Execute Dapr Multi-App Template with Directory Path\nDESCRIPTION: CLI commands to run the Multi-App template using a directory path containing dapr.yaml file for both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n# the template file needs to be called `dapr.yaml` by default if a directory path is given\n\ndapr run -f <dir_path>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Dapr Quickstarts Repository\nDESCRIPTION: Command to clone the Dapr Quickstarts repository containing the sample code for the workflow application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom Certificates using Helm\nDESCRIPTION: This Bash command installs Dapr using Helm, providing custom root and issuer certificates. It demonstrates how to pass the certificate files to the Sentry service during installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns dapr-system\n\nhelm install \\\n  --set-file dapr_sentry.tls.issuer.certPEM=issuer.pem \\\n  --set-file dapr_sentry.tls.issuer.keyPEM=issuer.key \\\n  --set-file dapr_sentry.tls.root.certPEM=root.pem \\\n  --namespace dapr-system \\\n  dapr \\\n  dapr/dapr\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Key Vault Component Configuration\nDESCRIPTION: YAML configuration for setting up an Azure Key Vault component in Dapr. Defines the secret store component with vault name specification.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: azurekeyvault\nspec:\n  type: secretstores.azure.keyvault\n  version: v1\n  metadata:\n  - name: vaultName\n    value: \"[your_keyvault_name]\"\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Resource Path in .NET\nDESCRIPTION: Command to run a .NET application with Dapr, specifying the application ID and the path to component resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Dapr Local File Secret Store Component Configuration\nDESCRIPTION: Component configuration for Dapr's local file secret store that uses a mounted NFS volume as the secrets source.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-volume-mounts.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: local-secret-store\nspec:\n  type: secretstores.local.file\n  version: v1\n  metadata:\n  - name: secretsFile\n    value: /mnt/secrets/secrets.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File from GCP Storage Bucket using JSON\nDESCRIPTION: This JSON structure shows how to retrieve a file from a GCP Storage Bucket. It specifies the operation type and the file key in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dapr Tracing Configuration on Kubernetes\nDESCRIPTION: Command to apply the Dapr configuration for tracing to a Kubernetes cluster, which enables the Dapr sidecars to send distributed tracing data to the OpenTelemetry Collector.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Describing a Pod to Troubleshoot Sidecar Issues\nDESCRIPTION: Command to get detailed information about a Kubernetes pod for troubleshooting. This command is useful for investigating why a pod might be in a failed state, such as CrashLoopBackoff.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod <name-of-pod>\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr in Dev Container\nDESCRIPTION: Shell command to initialize Dapr inside the Dev Container after installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-remote-dev-containers.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndapr init\n```\n\n----------------------------------------\n\nTITLE: Closing PostgreSQL Database Connection\nDESCRIPTION: This JSON request demonstrates how to use the 'close' operation to explicitly close the database connection and return it to the connection pool.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/postgresql.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"close\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Component Deployment Command\nDESCRIPTION: Command to deploy a secret store component configuration in a Kubernetes environment using kubectl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-secret-store.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f secret-store.yaml\n```\n\n----------------------------------------\n\nTITLE: Available mtls subcommands in Dapr CLI\nDESCRIPTION: Lists the available subcommands for the mtls command that allow checking certificate expiry, exporting certificates, and renewing certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nexpiry              Checks the expiry of the root Certificate Authority (CA) certificate\nexport              Export the root Certificate Authority (CA), issuer cert and issuer key to local files\nrenew-certificate   Rotates the existing root Certificate Authority (CA), issuer cert and issuer key\n```\n\n----------------------------------------\n\nTITLE: Certificate Rotation with User Provided Certificates\nDESCRIPTION: Rotates certificates using provided CA, issuer certificates and private key with service restart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --ca-root-certificate <ca.pem> --issuer-private-key <issuer.key> --issuer-public-certificate <issuer.pem> --restart\n```\n\n----------------------------------------\n\nTITLE: Using Private Registry for Dapr Upgrade in Bash\nDESCRIPTION: Examples demonstrating how to upgrade Dapr using a private registry for hosting Dapr images, showing both direct root folder hosting and directory-based hosting scenarios.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade or downgrade using private registry, if you are using private registry for hosting dapr images and have used it while doing `dapr init -k`\n# Scenario 1 : dapr image hosted directly under root folder in private registry - \ndapr init -k --image-registry docker.io/username\n# Scenario 2 : dapr image hosted under a new/different directory in private registry - \ndapr init -k --image-registry docker.io/username/<directory-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Helm Chart Repository\nDESCRIPTION: Set environment variables to use a private Helm chart repository for Dapr installation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DAPR_HELM_REPO_URL=\"https://helm.custom-domain.com/dapr/dapr\"\nexport DAPR_HELM_REPO_USERNAME=\"username_xxx\"\nexport DAPR_HELM_REPO_PASSWORD=\"passwd_xxx\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Kafka Binding with Partition Key in Shell\nDESCRIPTION: Shell command example demonstrating how to invoke a Kafka binding with a specified partition key using curl. This shows how to send a message to Kafka through the Dapr binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kafka.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myKafka \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        },\n        \"metadata\": {\n          \"partitionKey\": \"key1\"\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Running MQTT Broker Locally with Docker\nDESCRIPTION: Bash command to run the emqx MQTT broker locally using Docker, exposing the default MQTT port.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-mqtt3.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 1883:1883 --name mqtt emqx:latest\n```\n\n----------------------------------------\n\nTITLE: Using Dapr annotate CLI command\nDESCRIPTION: Basic usage syntax for the Dapr annotate command. It takes flags and a configuration file as input.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-annotate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr annotate [flags] CONFIG-FILE\n```\n\n----------------------------------------\n\nTITLE: Stopping a Service on MacOS\nDESCRIPTION: Command to stop a running service on MacOS to simulate a service failure for testing resiliency patterns.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: script\nCODE:\n```\nCMD + C\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch with Different Configurations\nDESCRIPTION: Various Helm commands for installing Elasticsearch with different replica and persistence configurations\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install elasticsearch elastic/elasticsearch --version 7.17.3 -n dapr-monitoring --set replicas=1\n\nhelm install elasticsearch elastic/elasticsearch --version 7.17.3 -n dapr-monitoring\n\nhelm install elasticsearch elastic/elasticsearch --version 7.17.3 -n dapr-monitoring --set persistence.enabled=false,replicas=1\n```\n\n----------------------------------------\n\nTITLE: Defining Tracing Configuration in Dapr YAML Spec\nDESCRIPTION: This YAML snippet shows the basic structure of a Dapr tracing configuration with options for sampling rate and endpoints for OpenTelemetry and Zipkin.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/setup-tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tracing:\n    samplingRate: \"1\"\n    otel: \n      endpointAddress: \"myendpoint.cluster.local:4317\"\n    zipkin:\n      endpointAddress: \"https://...\"\n    \n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Uninstall Command\nDESCRIPTION: Removes the Dapr sidecar binaries and placement container while preserving Redis and Zipkin containers that may be used for other purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall\n```\n\n----------------------------------------\n\nTITLE: Dapr Error Code Tables - Markdown Format\nDESCRIPTION: Markdown tables listing error codes, their gRPC equivalents, and descriptions across different Dapr APIs. The tables are organized by functional area to help developers understand and handle specific error scenarios.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/error-codes-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Pub/Sub and messaging errors\n\n| HTTP Code                     | gRPC Code                              | Description                            |\n| ----------------------------- | -------------------------------------- | -------------------------------------- |\n| `ERR_PUBSUB_EMPTY`            | `DAPR_PUBSUB_NAME_EMPTY`               | Pubsub name is empty                   |\n| `ERR_PUBSUB_NOT_FOUND`        | `DAPR_PUBSUB_NOT_FOUND`                | Pubsub not found                       |\n| `ERR_PUBSUB_NOT_FOUND`        | `DAPR_PUBSUB_TEST_NOT_FOUND`           | Pubsub not found                       |\n| `ERR_PUBSUB_NOT_CONFIGURED`   | `DAPR_PUBSUB_NOT_CONFIGURED`           | Pubsub not configured                  |\n| `ERR_TOPIC_NAME_EMPTY`        | `DAPR_PUBSUB_TOPIC_NAME_EMPTY`         | Topic name is empty                    |\n| `ERR_PUBSUB_FORBIDDEN`        | `DAPR_PUBSUB_FORBIDDEN`                | Access to topic forbidden for APP ID   |\n| `ERR_PUBSUB_PUBLISH_MESSAGE`  | `DAPR_PUBSUB_PUBLISH_MESSAGE`          | Error publishing message               |\n| `ERR_PUBSUB_REQUEST_METADATA` | `DAPR_PUBSUB_METADATA_DESERIALIZATION` | Error deserializing metadata           |\n| `ERR_PUBSUB_CLOUD_EVENTS_SER` | `DAPR_PUBSUB_CLOUD_EVENT_CREATION`     | Error creating CloudEvent              |\n| `ERR_PUBSUB_EVENTS_SER`       | `DAPR_PUBSUB_MARSHAL_ENVELOPE`         | Error marshalling Cloud Event envelope |\n| `ERR_PUBSUB_EVENTS_SER`       | `DAPR_PUBSUB_MARSHAL_EVENTS`           | Error marshalling events to bytes      |\n| `ERR_PUBSUB_EVENTS_SER`       | `DAPR_PUBSUB_UNMARSHAL_EVENTS`         | Error unmarshalling events             |\n| `ERR_PUBLISH_OUTBOX`          |                                        | Error publishing message to outbox     |\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Cron Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a cron binding component in Dapr. Specifies the schedule interval and binding direction.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cron.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.cron\n  version: v1\n  metadata:\n  - name: schedule\n    value: \"@every 15m\" # valid cron schedule\n  - name: direction\n    value: \"input\"\n```\n\n----------------------------------------\n\nTITLE: Certificate Renewal with Custom Root Key and Validity\nDESCRIPTION: Generates new certificates using existing private root key with custom validity period.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --private-key myprivatekey.key --valid-until <no of days>\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Error Response in Dapr\nDESCRIPTION: This JSON snippet demonstrates the structure of an error response returned by Dapr when a state store is not found. It includes the error code, message, app ID, and reason for the error.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/errors-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Bad Request\",\n  \"error_msg\": \"{\\\"errorCode\\\":\\\"ERR_STATE_STORE_NOT_FOUND\\\",\\\"message\\\":\\\"state store <name> is not found\\\",\\\"details\\\":[{\\\"@type\\\":\\\"type.googleapis.com/google.rpc.ErrorInfo\\\",\\\"domain\\\":\\\"dapr.io\\\",\\\"metadata\\\":{\\\"appID\\\":\\\"nodeapp\\\"},\\\"reason\\\":\\\"DAPR_STATE_NOT_FOUND\\\"}]}\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Dapr API token gRPC metadata format\nDESCRIPTION: This shows the format of the gRPC metadata that Dapr includes when sending requests to an application with token authentication enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndapr-api-token[0].\n```\n\n----------------------------------------\n\nTITLE: Checking Dapr Sidecar Injector Logs in Kubernetes\nDESCRIPTION: Command to check the logs of the Dapr sidecar injector for diagnosing sidecar injection issues. This helps identify problems with the Dapr sidecar injection process.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -l app=dapr-sidecar-injector -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: IntelliJ Config Path for Windows\nDESCRIPTION: Windows path location for IntelliJ configuration files in version 2020.1 and above.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n%USERPROFILE%\\AppData\\Roaming\\JetBrains\\IntelliJIdea2020.1\\tools\\\n```\n\n----------------------------------------\n\nTITLE: Enabling App Health Checks via Dapr CLI\nDESCRIPTION: This command demonstrates how to enable and configure app health checks when running a Dapr application using the CLI in self-hosted mode. It includes all available health check configuration options including paths, intervals, timeouts, and thresholds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/health-checks/app-health.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndapr run \\\n  --app-id my-app \\\n  --app-port 7001 \\\n  --app-protocol http \\\n  --enable-app-health-check \\\n  --app-health-check-path=/healthz \\\n  --app-health-probe-interval 3 \\\n  --app-health-probe-timeout 200 \\\n  --app-health-threshold 2 \\\n  -- \\\n    <command to execute>\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom HA Configuration\nDESCRIPTION: Deploy Dapr using Helm with high availability mode for specific services while disabling global HA.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--set global.ha.enabled=false \\\n--set dapr_scheduler.ha=true \\\n--set dapr_placement.ha=true \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Deleting State Object via Dapr API (PowerShell)\nDESCRIPTION: PowerShell command to delete a state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Delete -ContentType 'application/json' -Uri 'http://localhost:3500/v1.0/state/statestore/name'\n```\n\n----------------------------------------\n\nTITLE: Redis Password Configuration in Kubernetes\nDESCRIPTION: YAML configuration example for setting the Redis password in Kubernetes deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: redisPassword\n      value: \"lhDOkwTlp0\"\n```\n\n----------------------------------------\n\nTITLE: Querying Placement State API - Shell Command\nDESCRIPTION: Example of how to query the Dapr Placement service state API using curl to retrieve the current placement table information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/placement.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8080/placement/state\n```\n\n----------------------------------------\n\nTITLE: Enabling API Logging in Dapr CLI\nDESCRIPTION: Command to enable API logging when running an app with the Dapr CLI. This allows you to see API calls made to the Dapr sidecar for debugging purposes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./daprd --enable-api-logging\n```\n\n----------------------------------------\n\nTITLE: Installing Consul on Kubernetes with Helm\nDESCRIPTION: This Helm command installs Consul on a Kubernetes cluster using the stable Helm chart. It deploys Consul to the default namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-consul.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install consul stable/consul\n```\n\n----------------------------------------\n\nTITLE: Querying Redis State Store Keys\nDESCRIPTION: Example command showing how to directly query Redis state store to get all state keys associated with an application ID 'myApp' using the Redis KEYS command pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/state-management-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKEYS \"myApp*\"\n```\n\n----------------------------------------\n\nTITLE: Updating Job Retries with Zeebe Command Binding in JSON\nDESCRIPTION: This snippet demonstrates how to update the number of retries for a job using the Zeebe command binding. It requires the job key and the new number of retries.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"jobKey\": 2251799813686172,\n    \"retries\": 10\n  },\n  \"operation\": \"update-job-retries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Denying Access to Specific Secrets in Vault Store\nDESCRIPTION: Configuration to deny access to specific sensitive secrets while allowing access to all others in a Vault secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/secrets-scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: vault\n        defaultAccess: allow\n        deniedSecrets: [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Job with CURL Command\nDESCRIPTION: Example curl command that deletes a job named 'jobforjabba' by making a DELETE request to the jobs API endpoint.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/jobs_api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X DELETE http://localhost:3500/v1.0-alpha1/jobs/jobforjabba -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Secrets JSON Configuration\nDESCRIPTION: JSON file containing the secret value that will be retrieved by the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secret\": \"YourPasskeyHere\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Zeebe Topology Operation in JSON\nDESCRIPTION: Example JSON response from a Zeebe 'topology' operation, showing cluster information including brokers, partitions, cluster size, and versions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brokers\": [\n    {\n      \"nodeId\": null,\n      \"host\": \"172.18.0.5\",\n      \"port\": 26501,\n      \"partitions\": [\n        {\n          \"partitionId\": 1,\n          \"role\": null,\n          \"health\": null\n        }\n      ],\n      \"version\": \"0.26.0\"\n    }\n  ],\n  \"clusterSize\": 1,\n  \"partitionsCount\": 1,\n  \"replicationFactor\": 1,\n  \"gatewayVersion\": \"0.26.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access Zipkin UI\nDESCRIPTION: Kubernetes command to create a port forward from local port 9411 to the Zipkin service port, allowing access to the Zipkin UI from a local browser.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/zipkin 9411:9411\n```\n\n----------------------------------------\n\nTITLE: Example Decrypted Output\nDESCRIPTION: Sample output returned from a decryption request, showing the original plaintext message that was encrypted.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Running Redis and Zipkin Containers for Dapr\nDESCRIPTION: Commands to run Redis and Zipkin containers, emulating online Dapr initialization. These are optional steps for setting up additional components in an airgap environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-airgap.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name \"dapr_zipkin\" --restart always -d -p 9411:9411 openzipkin/zipkin\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name \"dapr_redis\" --restart always -d -p 6379:6379 redislabs/rejson\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis CLI\nDESCRIPTION: Connect to a Redis instance using Redis CLI to save configuration items. This command connects to the Redis instance running on port 6379.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -p 6379\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application with Tracing Configuration\nDESCRIPTION: Command to launch a Dapr application with the tracing configuration enabled, specifying the app ID, port, and the path to the configuration YAML file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --app-port 3000 node app.js --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Exporting mTLS Certificates with Dapr CLI\nDESCRIPTION: This command exports the root Certificate Authority (CA), issuer cert, and issuer key to local files. It can be used in Kubernetes environments and supports specifying an output directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls export [flags]\n```\n\n----------------------------------------\n\nTITLE: Fixing unsigned commits with DCO sign-off\nDESCRIPTION: This code snippet shows how to retrospectively sign a commit that was previously submitted without the required DCO sign-off. It demonstrates checking out the branch, amending the commit to add the sign-off, and force pushing the changes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/contributing-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <branch-name>\ngit commit --amend --no-edit --signoff\ngit push --force-with-lease <remote-name> <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Basic mTLS Certificate Renewal Command\nDESCRIPTION: Base command structure for renewing Dapr certificates with optional flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on ARM64 Macs using Homebrew\nDESCRIPTION: Installs the Dapr CLI on ARM64 Macs using Homebrew 3.0 or higher.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\narch -arm64 brew install dapr/tap/dapr-cli\n```\n\n----------------------------------------\n\nTITLE: Go Workflow Activity Function Definition\nDESCRIPTION: Defines a Go workflow activity function that processes input parameters and returns results with error handling capabilities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestActivity(ctx workflow.ActivityContext) (any, error) {\n\tvar input int\n\tif err := ctx.GetInput(&input); err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\t// Do something here\n\treturn \"result\", nil\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Sentry with Custom Configuration\nDESCRIPTION: Command to start the Sentry service with a custom configuration file that specifies custom mTLS settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./sentry --issuer-credentials $HOME/.dapr/certs --trust-domain cluster.local --config=./config.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Zipkin Container for Tracing\nDESCRIPTION: Docker command to launch the Zipkin container for viewing workflow trace spans through the web UI on port 9411.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Running Aerospike Locally with Docker\nDESCRIPTION: This command runs an Aerospike server locally using Docker. It maps the necessary ports for communication with the server.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-aerospike.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name aerospike -p 3000:3000 -p 3001:3001 -p 3002:3002 -p 3003:3003 aerospike\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completion on macOS (Bash 3.2)\nDESCRIPTION: Commands for installing bash completion on macOS using Homebrew for Bash 3.2.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash-completion\n```\n\n----------------------------------------\n\nTITLE: Setting Error Log Level for Dapr Operator with Helm\nDESCRIPTION: Specific example of setting the log level to 'error' for the Dapr operator component when deploying with Helm.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr dapr/dapr --namespace dapr-system --set dapr_operator.logLevel=error\n```\n\n----------------------------------------\n\nTITLE: Python Checkout Publisher Implementation\nDESCRIPTION: Publisher service implementation in Python that publishes order events to a pub/sub topic.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith DaprClient() as client:\n    result = client.publish_event(\n        pubsub_name='orderpubsub',\n        topic_name='orders',\n        data=json.dumps(order),\n        data_content_type='application/json',\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing Prometheus Dashboard from Kubernetes\nDESCRIPTION: Kubernetes port-forwarding command to access the Prometheus web interface from a local browser by forwarding the service port to localhost:9090.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/dapr-prom-prometheus-server 9090:80 -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr Completion to macOS Bash Profile\nDESCRIPTION: Commands to add Dapr completion to the bash completion directory and load it in the profile.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion bash > $(brew --prefix)/etc/bash_completion.d/dapr\\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Optimized Cosmos DB Indexing Policy in Terraform\nDESCRIPTION: An optimized Terraform configuration for Cosmos DB indexing that only indexes the 'id' and 'partitionKey' fields. This setup improves write performance by excluding all other fields from indexing, suitable for key-based read operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_7\n\nLANGUAGE: tf\nCODE:\n```\nindexing_policy {\n  # This could also be set to \"none\" if you are using the container purely as a key-value store. This may be applicable if your container is only going to be used as a distributed cache.\n  indexing_mode = \"consistent\" \n\n  # Note that included_path has been replaced with excluded_path\n  excluded_path {\n    path = \"/*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Blobs Request Schema in Azure Storage Binding\nDESCRIPTION: JSON schema for requesting a list of blobs with optional parameters including maxResults, prefix, marker, and include options for filtering and pagination.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"data\": {\n    \"maxResults\": 10,\n    \"prefix\": \"file\",\n    \"marker\": \"2!108!MDAwMDM1IWZpbGUtMDgtMDctMjAyMS0wOS0zOC01NS03NzgtMjEudHh0ITAwMDAyOCE5OTk5LTEyLTMxVDIzOjU5OjU5Ljk5OTk5OTlaIQ--\",\n    \"include\": {\n      \"snapshots\": false,\n      \"metadata\": true,\n      \"uncommittedBlobs\": false,\n      \"copy\": false,\n      \"deleted\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Pub/Sub Outputs in Java\nDESCRIPTION: This snippet shows the console output of a Java publisher and subscriber using Dapr's pub/sub. The publisher sends numbered messages, which are then received by the subscriber.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP == 7194 [main] INFO com.service.CheckoutServiceApplication - Published data: 1\n== APP == 12213 [main] INFO com.service.CheckoutServiceApplication - Published data: 2\n== APP == 17233 [main] INFO com.service.CheckoutServiceApplication - Published data: 3\n== APP == 22252 [main] INFO com.service.CheckoutServiceApplication - Published data: 4\n== APP == 27276 [main] INFO com.service.CheckoutServiceApplication - Published data: 5\n== APP == 32320 [main] INFO com.service.CheckoutServiceApplication - Published data: 6\n== APP == 37340 [main] INFO com.service.CheckoutServiceApplication - Published data: 7\n== APP == 42356 [main] INFO com.service.CheckoutServiceApplication - Published data: 8\n== APP == 47386 [main] INFO com.service.CheckoutServiceApplication - Published data: 9\n== APP == 52410 [main] INFO com.service.CheckoutServiceApplication - Published data: 10\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP == 2022-03-07 13:31:19.551  INFO 43512 --- [nio-8080-exec-5] c.s.c.OrderProcessingServiceController   : Subscriber received: 1\n== APP == 2022-03-07 13:31:19.552  INFO 43512 --- [nio-8080-exec-9] c.s.c.OrderProcessingServiceController   : Subscriber received: 2\n== APP == 2022-03-07 13:31:19.551  INFO 43512 --- [nio-8080-exec-6] c.s.c.OrderProcessingServiceController   : Subscriber received: 3\n== APP == 2022-03-07 13:31:19.552  INFO 43512 --- [nio-8080-exec-2] c.s.c.OrderProcessingServiceController   : Subscriber received: 4\n== APP == 2022-03-07 13:31:19.553  INFO 43512 --- [nio-8080-exec-2] c.s.c.OrderProcessingServiceController   : Subscriber received: 5\n== APP == 2022-03-07 13:31:19.553  INFO 43512 --- [nio-8080-exec-9] c.s.c.OrderProcessingServiceController   : Subscriber received: 6\n== APP == 2022-03-07 13:31:22.849  INFO 43512 --- [nio-8080-exec-3] c.s.c.OrderProcessingServiceController   : Subscriber received: 7\n== APP == 2022-03-07 13:31:27.866  INFO 43512 --- [nio-8080-exec-6] c.s.c.OrderProcessingServiceController   : Subscriber received: 8\n== APP == 2022-03-07 13:31:32.895  INFO 43512 --- [nio-8080-exec-6] c.s.c.OrderProcessingServiceController   : Subscriber received: 9\n== APP == 2022-03-07 13:31:37.919  INFO 43512 --- [nio-8080-exec-2] c.s.c.OrderProcessingServiceController   : Subscriber received: 10\n```\n\n----------------------------------------\n\nTITLE: Performing Health Check using cURL\nDESCRIPTION: Example of performing a health check on the application using a cURL command. This snippet demonstrates how to make a GET request to check if the app is healthy and running.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://localhost:3000/healthz \\\n```\n\n----------------------------------------\n\nTITLE: Wait for Workflow Completion in Python\nDESCRIPTION: Python code snippet demonstrating how to wait for a workflow to complete with a timeout.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwf_client.wait_for_workflow_completion(instance_id, timeout_in_seconds=30)\n```\n\n----------------------------------------\n\nTITLE: Restarting Order Processor Service with Dapr in JavaScript\nDESCRIPTION: Bash command to restart the order-processor service using Dapr CLI with specified ports and protocols for JavaScript implementation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 5001 --app-id order-processor --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3501 -- npm start\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Changes via HTTP Request in Dapr\nDESCRIPTION: HTTP GET request format for unsubscribing from configuration changes in a Dapr configuration store using a previously obtained subscription ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/configuration/<storename>/<subscription-id>/unsubscribe\n```\n\n----------------------------------------\n\nTITLE: JSON Output Version Command - Dapr CLI\nDESCRIPTION: Demonstrates how to get version information in JSON format for both Dapr CLI and runtime using the --output flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-version.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr version --output json\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr-enabled Deployments\nDESCRIPTION: This command restarts a deployment with Dapr enabled to pick up new Dapr runtime versions after an upgrade.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/<Application deployment name>\n```\n\n----------------------------------------\n\nTITLE: Creating Dapr Annotations for NGINX Ingress Controller\nDESCRIPTION: YAML configuration for Dapr annotations to be applied to the NGINX ingress controller pod.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  podAnnotations:\n    dapr.io/enabled: \"true\"\n    dapr.io/app-id: \"nginx-ingress\"\n    dapr.io/app-port: \"80\"\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application and Viewing Combined Logs\nDESCRIPTION: Example of running a Node.js application with Dapr CLI and viewing the combined logs from both the application and Dapr runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr run node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Installing Cassandra on Kubernetes with Helm\nDESCRIPTION: Commands to install Cassandra on Kubernetes using the Helm chart. This creates a dedicated namespace and deploys Cassandra into the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cassandra.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace cassandra\nhelm install cassandra incubator/cassandra --namespace cassandra\n```\n\n----------------------------------------\n\nTITLE: Creating a File in GCP Storage Bucket using cURL (Linux)\nDESCRIPTION: This cURL command shows how to create a file in a GCP Storage Bucket on Linux. It sends a POST request with the create operation and file content.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/gcpbucket.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"create\", \"data\": \"Hello World\" }' \\\n      http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Storage Crypto Component in YAML\nDESCRIPTION: Example configuration for the Dapr local storage cryptography component. This defines a component that loads cryptographic keys from a specified local directory path. The component requires a path metadata field pointing to the folder containing the key files.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-cryptography/local-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: mycrypto\nspec:\n  type: crypto.dapr.localstorage\n  metadata:\n    version: v1\n    - name: path\n      value: /path/to/folder/\n```\n\n----------------------------------------\n\nTITLE: Restarting Kubernetes deployments after token rotation\nDESCRIPTION: This command triggers a rolling restart of a Kubernetes deployment to apply the new token after rotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl rollout restart deployment/<deployment-name> --namespace <namespace-name>\n```\n\n----------------------------------------\n\nTITLE: Secrets JSON Configuration\nDESCRIPTION: JSON file containing the secret values used by the secret store component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/secrets-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"secret\": \"YourPasskeyHere\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Zeebe Deploy-Resource Operation (BPMN) in JSON\nDESCRIPTION: Example JSON response from a Zeebe 'deploy-resource' operation for a BPMN process, showing deployment key and process metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": 2251799813685252,\n  \"deployments\": [\n    {\n      \"Metadata\": {\n        \"Process\": {\n          \"bpmnProcessId\": \"products-process\",\n          \"version\": 2,\n          \"processDefinitionKey\": 2251799813685251,\n          \"resourceName\": \"products-process.bpmn\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing KubeMQ Dashboard on Kubernetes\nDESCRIPTION: Commands for accessing the KubeMQ dashboard through port forwarding in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-kubemq.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubemqctl get dashboard\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/kubemq-cluster-api -n kubemq 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr CLI Run Command\nDESCRIPTION: Example of running a Daprized service using the Dapr CLI with app-id, app-port, and dapr-http-port specifications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id nodeapp --app-port 3000 --dapr-http-port 3500 app.js\n```\n\n----------------------------------------\n\nTITLE: Using Code-Snippet with Marker Parameter\nDESCRIPTION: Example of using the code-snippet shortcode with a marker parameter to show only a specific portion of a code file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* code-snippet file=\"./contributing-1.py\" lang=\"python\" marker=\"#SAMPLE\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: Command to get the base64 decoded admin password from Kubernetes secret for Grafana login\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/grafana.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace dapr-monitoring grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog API Key in OpenTelemetry Collector\nDESCRIPTION: YAML configuration snippet for adding Datadog API key to the OpenTelemetry Collector configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  otel-collector-config:\n    ...\n    exporters:\n      ...\n      datadog:\n        api:\n          key: <YOUR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Feature Table in Markdown\nDESCRIPTION: A table listing current preview features in Dapr including pluggable components, multi-app run for Kubernetes, cryptography, actor state TTL, component hot reloading, subscription hot reloading, and scheduler actor reminders. Each feature includes its description, settings, documentation link, and version introduced.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/support/support-preview-features.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature | Description | Setting | Documentation | Version introduced |\n| --- | --- | --- | --- | --- |\n| **Pluggable components** | Allows creating self-hosted gRPC-based components written in any language that supports gRPC. The following component APIs are supported: State stores, Pub/sub, Bindings | N/A | [Pluggable components concept]({{<ref \"components-concept#pluggable-components\" >}})| v1.9  |\n| **Multi-App Run for Kubernetes** | Configure multiple Dapr applications from a single configuration file and run from a single command on Kubernetes | `dapr run -k -f` | [Multi-App Run]({{< ref multi-app-dapr-run.md >}}) | v1.12 |\n| **Cryptography** | Encrypt or decrypt data without having to manage secrets keys  | N/A | [Cryptography concept]({{< ref \"components-concept#cryptography\" >}})| v1.11  |\n| **Actor State TTL** | Allow actors to save records to state stores with Time To Live (TTL) set to automatically clean up old data. In its current implementation, actor state with TTL may not be reflected correctly by clients, read [Actor State Transactions]({{< ref actors_api.md >}}) for more information. | `ActorStateTTL` | [Actor State Transactions]({{< ref actors_api.md >}}) | v1.11  |\n| **Component Hot Reloading** | Allows for Dapr-loaded components to be \"hot reloaded\". A component spec is reloaded when it is created/updated/deleted in Kubernetes or on file when running in self-hosted mode. Ignores changes to actor state stores and workflow backends. | `HotReload`| [Hot Reloading]({{< ref components-concept.md >}}) | v1.13  |\n| **Subscription Hot Reloading** | Allows for declarative subscriptions to be \"hot reloaded\". A subscription is reloaded either when it is created/updated/deleted in Kubernetes, or on file in self-hosted mode. In-flight messages are unaffected when reloading. | `HotReload`| [Hot Reloading]({{< ref \"subscription-methods.md#declarative-subscriptions\" >}}) | v1.14  |\n| **Scheduler Actor Reminders** | Scheduler actor reminders are actor reminders stored in the Scheduler control plane service, as opposed to the Placement control plane service actor reminder system. The `SchedulerReminders` preview feature defaults to `true`, but you can disable Scheduler actor reminders by setting it to `false`.  | `SchedulerReminders`| [Scheduler actor reminders]({{< ref \"scheduler.md#actor-reminders\" >}}) | v1.14  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Sidecar to Listen on Specific Addresses\nDESCRIPTION: Runs a Dapr sidecar configured to listen only on IPv4 and IPv6 loopback addresses. This provides more control over which network interfaces Dapr will listen on.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --dapr-listen-addresses '127.0.0.1,[::1]'\n```\n\n----------------------------------------\n\nTITLE: Order Processor Service Success Logs\nDESCRIPTION: Log output from the order-processor service showing successful receipt of orders after recovery, with matching order IDs to the checkout service indicating successful end-to-end processing.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n== APP == Order received: {\"orderId\": 5}\n== APP == Order received: {\"orderId\": 6}\n== APP == Order received: {\"orderId\": 7}\n== APP == Order received: {\"orderId\": 8}\n== APP == Order received: {\"orderId\": 9}\n== APP == Order received: {\"orderId\": 10}\n```\n\n----------------------------------------\n\nTITLE: Launching Zipkin Docker Container for Tracing\nDESCRIPTION: This command runs the Zipkin Docker container for tracing Dapr workflows. It maps port 9411 and runs the container in detached mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Applying New Relic Kubernetes Manifests\nDESCRIPTION: Command to apply the downloaded Kubernetes manifest files after configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/newrelic.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f .\n```\n\n----------------------------------------\n\nTITLE: Configuring Kusto resource provider registration in Azure\nDESCRIPTION: Azure CLI command for registering the Kusto resource provider in your Azure subscription. This is a prerequisite for using Azure Data Explorer with Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz provider register --namespace Microsoft.Kusto\n```\n\n----------------------------------------\n\nTITLE: Custom Validity Period Certificate Renewal\nDESCRIPTION: Generates new certificates with custom validity period.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --valid-until <no of days>\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Multi-App Template with Python\nDESCRIPTION: Command to run multiple Dapr applications simultaneously using the Multi-App Run template file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service\nDESCRIPTION: Command to set up port forwarding from localhost:8080 to the Grafana service\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/grafana.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/grafana 8080:80 -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics with Dapr Sidecar\nDESCRIPTION: Starts a Dapr sidecar with Prometheus metrics collection enabled. This allows monitoring and observability of your Dapr application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/sidecar.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndaprd --app-id myapp --enable-metrics\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with OpenSSL\nDESCRIPTION: These commands use OpenSSL to generate a new Ed25519 key pair, creating private and public key files. Note that OpenSSL 1.1.0 or later is required for Ed25519 support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out private.pem\nopenssl pkey -in private.pem -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Finding NATS Service in Kubernetes\nDESCRIPTION: Command to locate the NATS service installed in the Kubernetes cluster. This helps identify the service endpoint for connecting to NATS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc my-nats\n```\n\n----------------------------------------\n\nTITLE: Raising a Workflow Event HTTP Request\nDESCRIPTION: HTTP POST endpoint for delivering a named event to a specific workflow instance for workflow components that support external event subscription.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceID>/raiseEvent/<eventName>\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with JSON Logging in Kubernetes using Helm\nDESCRIPTION: Helm command to install Dapr in a Kubernetes cluster with JSON-formatted logging enabled for all Dapr system services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/logs.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr \\\n  dapr/dapr \\\n  --namespace dapr-system \\\n  --set global.logAsJson=true\n```\n\n----------------------------------------\n\nTITLE: Complete Dapr Uninstall Command\nDESCRIPTION: Performs a complete uninstallation of Dapr by removing Redis, Zipkin, Actor Placement containers, and the default Dapr directory located at $HOME/.dapr or %USERPROFILE%\\.dapr\\.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall --all\n```\n\n----------------------------------------\n\nTITLE: Querying Dapr Outbound Health via HTTP GET\nDESCRIPTION: This snippet shows how to make an HTTP GET request to check the outbound health state of Dapr. This endpoint is used for checking if the sidecar is initialized correctly and ready for API calls, but before the app channel is established.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/health_api.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:3500/v1.0/healthz/outbound\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management Commands\nDESCRIPTION: Commands for managing Docker containers to simulate system failures and recovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop dapr_redis\ndocker start dapr_redis\n```\n\n----------------------------------------\n\nTITLE: Purging a Workflow HTTP Request\nDESCRIPTION: HTTP POST endpoint for purging workflow state from the state store. Only applicable for COMPLETED, FAILED, or TERMINATED workflows.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/workflow_api.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:<daprPort>/v1.0/workflows/<workflowComponentName>/<instanceId>/purge\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr without Docker in Airgap Environment\nDESCRIPTION: Command to initialize Dapr in slim mode without Docker, using a pre-downloaded installer bundle. This installs only the Dapr binaries without default configuration files or containers.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-airgap.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --slim --from-dir .\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Non-Deterministic APIs in Workflow Functions\nDESCRIPTION: This snippet demonstrates incorrect usage of non-deterministic APIs like DateTime.UtcNow, Guid.NewGuid(), and custom random string generation in workflow functions. These should be avoided to maintain workflow determinism.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// DON'T DO THIS!\nDateTime currentTime = DateTime.UtcNow;\nGuid newIdentifier = Guid.NewGuid();\nstring randomString = GetRandomString();\n```\n\nLANGUAGE: java\nCODE:\n```\n// DON'T DO THIS!\nInstant currentTime = Instant.now();\nUUID newIdentifier = UUID.randomUUID();\nString randomString = getRandomString();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// DON'T DO THIS!\nconst currentTime = new Date();\nconst newIdentifier = uuidv4();\nconst randomString = getRandomString();\n```\n\nLANGUAGE: go\nCODE:\n```\n// DON'T DO THIS!\nconst currentTime = time.Now()\n```\n\n----------------------------------------\n\nTITLE: Running NATS Server with Docker\nDESCRIPTION: Docker command to run a NATS Server instance with JetStream enabled locally on port 4222.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-jetstream-kv.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 4222:4222 nats:latest -js\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Container for State Store\nDESCRIPTION: Starts a MongoDB container to be used as a state store for the Dapr application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --rm -p 27017:27017 --name mongodb mongo:5\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr with Ephemeral Storage using Dapr CLI\nDESCRIPTION: This command initializes Dapr in Kubernetes mode with the Scheduler configured to use in-memory storage. This setting is not resilient to restarts and is suitable for non-production environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --set dapr_scheduler.cluster.inMemoryStorage=true\n```\n\n----------------------------------------\n\nTITLE: Installing Zookeeper on Kubernetes using Helm\nDESCRIPTION: Helm commands for installing Zookeeper on a Kubernetes cluster using the incubator chart repository. Includes adding the repository and installing Zookeeper.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-zookeeper.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator\nhelm install zookeeper incubator/zookeeper\n```\n\n----------------------------------------\n\nTITLE: Pod Configuration with Identity Binding\nDESCRIPTION: Kubernetes pod configuration that includes the necessary label for Azure managed identity binding via pod identity.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/azure-keyvault.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mydaprdemoapp\n  labels:\n    aadpodidbinding: $POD_IDENTITY_NAME\n```\n\n----------------------------------------\n\nTITLE: HTTPEndpoint Configuration with Root Certificate\nDESCRIPTION: YAML configuration for an HTTPEndpoint resource using TLS authentication with a root certificate\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-non-dapr-endpoints.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: HTTPEndpoint\nmetadata:\n  name: \"external-http-endpoint-tls\"\nspec:\n  baseUrl: https://service-invocation-external:443\n  headers:\n  - name: \"Accept-Language\"\n    value: \"en-US\"\n  clientTLS:\n    rootCA:\n      secretKeyRef:\n        name: dapr-tls-client\n        key: ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring etcd State Store with Namespace Prefix\nDESCRIPTION: YAML configuration for etcd state store component with namespace isolation using keyPrefixPath\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/actors/namespaced-actors.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.etcd\n  version: v2\n  metadata:\n  - name: endpoints\n    value: localhost:2379\n  - name: keyPrefixPath\n    value: namespace-actorA\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Azure Monitor Query for Dapr JSON-formatted Logs\nDESCRIPTION: Example KQL (Kusto Query Language) query for Azure Monitor that parses JSON-formatted logs from Dapr system processes. It extracts fields like app_id, scope, level, and message for easier analysis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nContainerLog\n| extend parsed=parse_json(LogEntry)\n| project Time=todatetime(parsed['time']), app_id=parsed['app_id'], scope=parsed['scope'],level=parsed['level'], msg=parsed['msg'], type=parsed['type'], ver=parsed['ver'], instance=parsed['instance']\n| where level != \"\"\n| sort by Time\n```\n\n----------------------------------------\n\nTITLE: Equivalent SQL Query for Specific Organizations\nDESCRIPTION: Shows the SQL equivalent of the JSON query for finding employees from specific organizations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM c WHERE\n  person.org IN (\"Dev Ops\", \"Hardware\")\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr from Kubernetes\nDESCRIPTION: Remove Dapr from the Kubernetes cluster using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall -k\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dapr List Command\nDESCRIPTION: The basic syntax for using the Dapr list command. This command lists all running Dapr instances with optional flags for customization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr list [flags]\n```\n\n----------------------------------------\n\nTITLE: Dapr External Tool Configuration for Specific Service\nDESCRIPTION: XML configuration for setting up Dapr as an external tool in IntelliJ for a specific demo service with fixed ports and parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<toolSet name=\"External Tools\">\n  ...\n  <!-- 1. Each tool has its own app-id, so create one per application to be debugged -->\n  <tool name=\"dapr for DemoService in examples\" description=\"Dapr sidecar\" showInMainMenu=\"false\" showInEditor=\"false\" showInProject=\"false\" showInSearchPopup=\"false\" disabled=\"false\" useConsole=\"true\" showConsoleOnStdOut=\"true\" showConsoleOnStdErr=\"true\" synchronizeAfterRun=\"true\">\n    <exec>\n      <!-- 2. For Linux or MacOS use: /usr/local/bin/dapr -->\n      <option name=\"COMMAND\" value=\"C:\\dapr\\dapr.exe\" />\n      <!-- 3. Choose app, http and grpc ports that do not conflict with other daprd command entries (placement address should not change). -->\n      <option name=\"PARAMETERS\" value=\"run -app-id demoservice -app-port 3000 -dapr-http-port 3005 -dapr-grpc-port 52000\" />\n      <!-- 4. Use the folder where the `components` folder is located -->\n      <option name=\"WORKING_DIRECTORY\" value=\"C:/Code/dapr/java-sdk/examples\" />\n    </exec>\n  </tool>\n  ...\n</toolSet>\n```\n\n----------------------------------------\n\nTITLE: Deploying Zipkin in Kubernetes\nDESCRIPTION: Kubernetes command to create a deployment for Zipkin using the official Docker image.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create deployment zipkin --image openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Listing Dapr Pods in Kubernetes\nDESCRIPTION: Kubernetes command to list all Dapr-related pods in the dapr-system namespace, showing their status and IP addresses.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n dapr-system -o wide\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation with Image Variant\nDESCRIPTION: Install Dapr with a specific image variant like mariner\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --image-variant mariner\n```\n\n----------------------------------------\n\nTITLE: Certificate Renewal with Custom Root Key\nDESCRIPTION: Generates new certificates using existing private root key with default validity.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --private-key myprivatekey.key\n```\n\n----------------------------------------\n\nTITLE: Example CEL Expressions for Pub/Sub Routing\nDESCRIPTION: These Common Expression Language (CEL) examples demonstrate different matching patterns for event routing: checking for a property existence and value, comparing a numeric value after type conversion, and matching message versions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-route-messages.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhas(event.data.important) && event.data.important == true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nevent.type == \"deposit\" && int(event.data.amount) > 10000\n```\n\nLANGUAGE: javascript\nCODE:\n```\nevent.type == \"mymessage.v1\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nevent.type == \"mymessage.v2\"\n```\n\n----------------------------------------\n\nTITLE: Activating Jobs with Zeebe Command Binding in JSON\nDESCRIPTION: This snippet demonstrates how to activate jobs using the Zeebe command binding. It includes parameters for job type, maximum jobs to activate, timeout, worker name, and variables to fetch.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"jobType\": \"fetch-products\",\n    \"maxJobsToActivate\": 5,\n    \"timeout\": \"5m\",\n    \"workerName\": \"products-worker\",\n    \"fetchVariables\": [\n      \"productId\",\n      \"productName\",\n      \"productKey\"\n    ],\n    \"requestTimeout\": \"30s\"\n  },\n  \"operation\": \"activate-jobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Runtime on Linux/MacOS\nDESCRIPTION: Command to initialize Dapr runtime binaries on Linux or MacOS systems. Uses sudo if Docker commands require it or if installing to the default path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo dapr init\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Invalid Error in .NET\nDESCRIPTION: This C# code shows how to return an ETag Invalid error in a Dapr pluggable component. It creates a BadRequest error with an InvalidArgument status code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar badRequest = new BadRequest();\nvar des = \"The ETag field must only contain alphanumeric characters\";\nbadRequest.FieldViolations.Add(\n   new Google.Rpc.BadRequest.Types.FieldViolation\n   {\n      Field = \"etag\",\n      Description = des\n   });\n\nvar baseStatusCode = Grpc.Core.StatusCode.InvalidArgument;\nvar status = new Google.Rpc.Status\n{\n   Code = (int)baseStatusCode\n};\n\nstatus.Details.Add(Google.Protobuf.WellKnownTypes.Any.Pack(badRequest));\n\nvar metadata = new Metadata();\nmetadata.Add(\"grpc-status-details-bin\", status.ToByteArray());\nthrow new RpcException(new Grpc.Core.Status(baseStatusCode, \"fake-err-msg\"), metadata);\n```\n\n----------------------------------------\n\nTITLE: Creating JetStream KV Bucket\nDESCRIPTION: NATS CLI command to create a new key-value bucket in JetStream.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-jetstream-kv.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnats kv add <bucketName>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Certificate Warning Message\nDESCRIPTION: Example of warning message displayed when the Kubernetes cluster's mtls root certificate is nearing expiration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-dashboard.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDapr root certificate of your Kubernetes cluster expires in <n> days. Expiry date: <date:time> UTC. \nPlease see docs.dapr.io for certificate renewal instructions to avoid service interruptions.\n```\n\n----------------------------------------\n\nTITLE: Building SmartDevice.Client in .NET\nDESCRIPTION: Navigate to the client directory and build the SmartDevice.Client application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ./actors/csharp/sdk/client\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr Runtime Logs in Kubernetes\nDESCRIPTION: Command to view the logs of the Dapr runtime (daprd) in a Kubernetes pod. This is useful for diagnosing issues with state management, pub/sub messaging, or other Dapr functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs <name-of-pod> daprd\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace-Based Access Control\nDESCRIPTION: YAML configuration demonstrating different access policies for the same app ID in different namespaces\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  accessControl:\n    defaultAction: allow\n    trustDomain: \"public\"\n    policies:\n    - appId: app1\n      defaultAction: allow\n      trustDomain: 'public'\n      namespace: \"ns1\"\n    - appId: app1\n      defaultAction: deny\n      trustDomain: 'public'\n      namespace: \"ns2\"\n```\n\n----------------------------------------\n\nTITLE: Getting State Object via Dapr API (PowerShell)\nDESCRIPTION: PowerShell command to retrieve a state object using the Dapr API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Uri 'http://localhost:3500/v1.0/state/statestore/name'\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal for Microsoft Entra ID Application\nDESCRIPTION: Azure CLI command to create a Service Principal for the application and store its ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nSERVICE_PRINCIPAL_ID=$(az ad sp create \\\n  --id \"${APP_ID}\" \\\n  | jq -r .id)\necho \"Service Principal ID: ${SERVICE_PRINCIPAL_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Dapr Multi-App Template Structure for Self-Hosted\nDESCRIPTION: YAML configuration template showing the structure and available properties for running multiple Dapr applications in self-hosted mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ncommon: # optional section for variables shared across apps\n  resourcesPath: ./app/components # any dapr resources to be shared across apps\n  env:  # any environment variable shared across apps\n    DEBUG: true\napps:\n  - appID: webapp # optional\n    appDirPath: .dapr/webapp/ # REQUIRED\n    resourcesPath: .dapr/resources # deprecated\n    resourcesPaths: .dapr/resources # comma separated resources paths. (optional) can be left to default value by convention.\n    appChannelAddress: 127.0.0.1 # network address where the app listens on. (optional) can be left to default value by convention.\n    configFilePath: .dapr/config.yaml # (optional) can be default by convention too, ignore if file is not found.\n    appProtocol: http\n    appPort: 8080\n    appHealthCheckPath: \"/healthz\"\n    command: [\"python3\", \"app.py\"]\n    appLogDestination: file # (optional), can be file, console or fileAndConsole. default is fileAndConsole.\n    daprdLogDestination: file # (optional), can be file, console or fileAndConsole. default is file.\n  - appID: backend # optional\n    appDirPath: .dapr/backend/ # REQUIRED\n    appProtocol: grpc\n    appPort: 3000\n    unixDomainSocket: \"/tmp/test-socket\"\n    env:\n      DEBUG: false\n    command: [\"./backend\"]\n```\n\n----------------------------------------\n\nTITLE: Publishing message using Dapr CLI\nDESCRIPTION: Uses the Dapr CLI to publish a message to the 'orders' topic in the 'order-pub-sub' pub/sub component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/howto-publish-subscribe.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndapr publish --publish-app-id orderprocessing --pubsub order-pub-sub --topic orders --data '{\"orderId\": \"100\"}'\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr CLI Invoke Command Syntax\nDESCRIPTION: Shows the basic syntax for the Dapr invoke command with flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-invoke.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr invoke [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Resource Path in Go\nDESCRIPTION: Command to run a Go application with Dapr, specifying the application ID and the path to component resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- go run app.go\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace Using Wrangler CLI\nDESCRIPTION: Shell command for creating a new Cloudflare Workers KV namespace using the Wrangler CLI tool.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Authenticate if needed with `npx wrangler login` first\nwrangler kv:namespace create <NAME>\n```\n\n----------------------------------------\n\nTITLE: Installing New Relic Logging with Helm 3\nDESCRIPTION: Command to install the New Relic Logging Kubernetes plugin using Helm 3, requiring a New Relic license key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/newrelic.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install newrelic-logging newrelic/newrelic-logging --set licenseKey=YOUR_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Running RethinkDB Locally Using Docker\nDESCRIPTION: Shell command to run a RethinkDB instance locally using Docker. It mounts the current directory to store RethinkDB data and runs the container in detached mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-rethinkdb.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name rethinkdb -v \"$PWD:/rethinkdb-data\" -d rethinkdb:latest\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Metadata API in Dapr\nDESCRIPTION: Shows the HTTP request format for getting metadata information from the Dapr sidecar. This retrieves information about runtime version, components, subscriptions, and other configuration details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:<daprPort>/v1.0/metadata\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr API Logs in Kubernetes\nDESCRIPTION: Command to view Dapr API logs for a specific pod in Kubernetes. This allows you to inspect the API calls made to the Dapr sidecar in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs <pod_name> daprd -n <name_space>\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr Operator Logs in Kubernetes\nDESCRIPTION: Command for viewing logs of the Dapr operator system component in a Kubernetes cluster. The command filters logs by the label 'app=dapr-operator' in the dapr-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -l app=dapr-operator -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database in Docker\nDESCRIPTION: Command to start an Oracle Database instance in a Docker container. This sets up a local development environment with a pre-configured password.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 1521:1521 -e ORACLE_PASSWORD=TheSuperSecret1509! gvenzl/oracle-xe\n```\n\n----------------------------------------\n\nTITLE: Query Response Example\nDESCRIPTION: Example JSON response from a state store query showing results with pagination token.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"key\": \"1\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1036\n        },\n        \"city\": \"Seattle\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"6f54ad94-dfb9-46f0-a371-e42d550adb7d\"\n    },\n    {\n      \"key\": \"4\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1042\n        },\n        \"city\": \"Spokane\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"7415707b-82ce-44d0-bf15-6dc6305af3b1\"\n    },\n    {\n      \"key\": \"10\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1054\n        },\n        \"city\": \"New York\",\n        \"state\": \"NY\"\n      },\n      \"etag\": \"26bbba88-9461-48d1-8a35-db07c374e5aa\"\n    }\n  ],\n  \"token\": \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cron Binding Component Configuration\nDESCRIPTION: YAML configuration for the Cron binding component that triggers the batch process every 10 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: cron\n  namespace: quickstarts\nspec:\n  type: bindings.cron\n  version: v1\n  metadata:\n  - name: schedule\n    value: \"@every 10s\" # valid cron schedule\n  - name: direction\n    value: \"input\" # direction of the cron binding\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Table Trigger\nDESCRIPTION: SQL command to create a trigger that executes the notification function for INSERT, UPDATE, and DELETE operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER config\nAFTER INSERT OR UPDATE OR DELETE ON configtable\n    FOR EACH ROW EXECUTE PROCEDURE notify_event();\n```\n\n----------------------------------------\n\nTITLE: Listing GKE Firewall Rules\nDESCRIPTION: Command to list firewall rules for master access in private GKE clusters. Used to identify the rule that needs to be updated for Dapr sidecar injection.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-gke.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute firewall-rules list --filter=\"name~gke-${CLUSTER_NAME}-[0-9a-z]*-master\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Monitoring Tools\nDESCRIPTION: Kubernetes command to create a dedicated namespace for deploying monitoring tools like Prometheus and Grafana for Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Running .NET Subscriber Service with Dapr\nDESCRIPTION: This Bash command runs a .NET order processor service with Dapr. It specifies the application ID, resources path for components, and the application port for the subscriber service that will receive published messages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id order-processor --resources-path ../../../components --app-port 7006 -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Python App with Dapr\nDESCRIPTION: Command to start the Python application that will be managed by the Dapr sidecar. This is run separately from the daprd command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: APNS Push Notification Response Format\nDESCRIPTION: JSON response structure returned after sending a push notification through the APNS binding.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/apns.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messageID\": \"UNIQUE-ID-FOR-NOTIFICATION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Dapr Debug Docker Images\nDESCRIPTION: Commands to build Docker images with debug binaries and push them to Docker Hub. Requires Docker Hub login and setting environment variables for image tag and registry.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DAPR_TAG=dev\nexport DAPR_REGISTRY=<your docker.io id>\ndocker login\nmake docker-push DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on Linux without sudo\nDESCRIPTION: Installs a specific version of the Dapr CLI to an alternate directory without requiring sudo access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | DAPR_INSTALL_DIR=\"$HOME/dapr\" /bin/bash -s {{% dapr-latest-version cli=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Certificate\nDESCRIPTION: Command to create a Kubernetes secret containing the certificate file for Azure Key Vault authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic [your_k8s_secret_name] --from-file=[your_k8s_secret_key]=[pfx_certificate_file_fully_qualified_local_path]\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on MacOS without sudo\nDESCRIPTION: Installs a specific version of the Dapr CLI to an alternate directory without requiring sudo access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/dapr/cli/master/install/install.sh | DAPR_INSTALL_DIR=\"$HOME/dapr\" -s {{% dapr-latest-version cli=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Port to Dapr Dashboard\nDESCRIPTION: This bash command forwards a port to access the Dapr dashboard.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr dashboard -k -p 9999\n```\n\n----------------------------------------\n\nTITLE: Installing NATS JetStream on Kubernetes\nDESCRIPTION: Helm commands to install NATS JetStream on a Kubernetes cluster using the official NATS Helm chart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-jetstream-kv.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add nats https://nats-io.github.io/k8s/helm/charts/\nhelm install my-nats nats/nats\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr Sidecar Injector Logs in Kubernetes\nDESCRIPTION: Command for viewing logs of the Dapr sidecar injector system component in a Kubernetes cluster. The command filters logs by the label 'app=dapr-sidecar-injector' in the dapr-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -l app=dapr-sidecar-injector -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Navigating to Order Processor Directory\nDESCRIPTION: Command to change directory to the order-processor workflow sample\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd workflows/csharp/sdk/order-processor\n```\n\n----------------------------------------\n\nTITLE: Required Dapr Annotations for Kubernetes Pod Sidecar Injection\nDESCRIPTION: Shows the necessary annotations that need to be added to Kubernetes pod specifications for Dapr sidecar injection. These annotations enable Dapr, specify the application ID, and define the port where the application is listening.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/enabled: \"true\"\n  dapr.io/app-id: \"nodeapp\"\n  dapr.io/app-port: \"3000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby gRPC Client for Streaming with Dapr\nDESCRIPTION: Ruby code example for configuring a gRPC client to support streaming RPCs through Dapr. This adds the required metadata to enable Dapr streaming support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nmetadata = { 'dapr-app-id' : 'server' }\nmetadata = { 'dapr-stream' : 'true' }\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Applications\nDESCRIPTION: Command to run multiple Dapr applications simultaneously using the Multi-App Run template.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration with cURL in Dapr\nDESCRIPTION: Shell command using cURL to get a specific configuration item from a Dapr configuration store by key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET 'http://localhost:3500/v1.0/configuration/mystore?key=myConfigKey'\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Kubernetes Namespace A\nDESCRIPTION: Commands to create namespace-a and switch kubectl context to use it\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace namespace-a\nkubectl config set-context --current --namespace=namespace-a\n```\n\n----------------------------------------\n\nTITLE: Applying Cleared Trust Bundle Secret\nDESCRIPTION: Bash command to apply the cleared trust bundle secret YAML file to the Kubernetes cluster in the specified Dapr namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f `clear-trust-bundle.yaml` -n <DAPR_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Checking mTLS status in Kubernetes with Dapr CLI\nDESCRIPTION: Example command for checking if mTLS is enabled on a Kubernetes cluster using the Dapr CLI mtls command with the Kubernetes flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Check if mTLS is enabled on the Kubernetes cluster\ndapr mtls -k\n```\n\n----------------------------------------\n\nTITLE: Installing Kafka using Helm\nDESCRIPTION: Commands to install Kafka in a Kubernetes cluster using Helm charts from Confluent.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/autoscale-keda.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add confluentinc https://confluentinc.github.io/cp-helm-charts/\nhelm repo update\nkubectl create ns kafka\nhelm install kafka confluentinc/cp-helm-charts -n kafka \\\n\t\t--set cp-schema-registry.enabled=false \\\n\t\t--set cp-kafka-rest.enabled=false \\\n\t\t--set cp-kafka-connect.enabled=false\n```\n\n----------------------------------------\n\nTITLE: cURL Command with Version Parameters\nDESCRIPTION: Example cURL command demonstrating how to retrieve a secret with specific version parameters, including version_id and version_stage, from an AWS secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/myAwsSecretStore/db-secret?metadata.version_id=15&metadata.version_stage=production\n```\n\n----------------------------------------\n\nTITLE: Setting mTLS Certificate Environment Variables in Windows\nDESCRIPTION: PowerShell commands to set the environment variables for Dapr mTLS certificates in Windows environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DAPR_TRUST_ANCHORS=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\ca.crt)\n$env:DAPR_CERT_CHAIN=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\issuer.crt)\n$env:DAPR_CERT_KEY=$(Get-Content -raw $env:USERPROFILE\\.dapr\\certs\\issuer.key)\n$env:NAMESPACE=\"default\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Sentry Service Logs\nDESCRIPTION: Command to view the Dapr Sentry service logs, which include certificate expiration warnings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs deployment/dapr-sentry -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Latest Version in TOML\nDESCRIPTION: TOML configuration for the Hugo website to mark a version as the latest release and update version dropdown menu accordingly.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Versioning\nversion_menu = \"v1.1 (latest)\"\nversion = \"v1.1\"\narchived_version = false\nurl_latest_version = \"https://docs.dapr.io\"\n\n[[params.versions]]\n  version = \"v1.2 (preview)\"\n  url = \"v1-2.docs.dapr.io\"\n[[params.versions]]\n  version = \"v1.1 (latest)\"\n  url = \"#\"\n[[params.versions]]\n  version = \"v1.0\"\n  url = \"https://v1-0.docs.dapr.io\"\n```\n\n----------------------------------------\n\nTITLE: CURL Example for Setting Metadata Attribute\nDESCRIPTION: Demonstrates how to set a custom metadata attribute using curl command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT -H \"Content-Type: text/plain\" --data \"myDemoAttributeValue\" http://localhost:3500/v1.0/metadata/myDemoAttribute\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT Request Format for Metadata Attribute\nDESCRIPTION: Shows the HTTP PUT request format for setting a custom metadata attribute in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT http://localhost:<daprPort>/v1.0/metadata/attributeName\n```\n\n----------------------------------------\n\nTITLE: Using etcdctl to Interact with Etcd\nDESCRIPTION: This shell command demonstrates how to use etcdctl to interact with a running Etcd instance, setting a key-value pair in the database.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-etcd.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\netcdctl --endpoints=localhost:2379 put mykey myvalue\n```\n\n----------------------------------------\n\nTITLE: Default Storage Class Configuration\nDESCRIPTION: Kubectl command to set the gp2 storage class as the default storage class.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch storageclass gp2 -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Adding Tracing Configuration Annotation to Pod\nDESCRIPTION: YAML snippet showing the annotation required to enable the Zipkin tracing configuration for a Dapr sidecar in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/zipkin.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/config: \"tracing\"\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Container Status\nDESCRIPTION: Command to check that the PostgreSQL container is running and its expected output showing container details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\nLANGUAGE: bash\nCODE:\n```\nCONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES\n55305d1d378b   postgres   \"docker-entrypoint.s…\"   3 seconds ago   Up 2 seconds   0.0.0.0:5432->5432/tcp   sql_db\n```\n\n----------------------------------------\n\nTITLE: Disabling mTLS with Helm in Kubernetes\nDESCRIPTION: This Bash command demonstrates how to install Dapr using Helm with mTLS disabled for data plane communication. Note that the control plane will continue to use mTLS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns dapr-system\n\nhelm install \\\n  --set global.mtls.enabled=false \\\n  --namespace dapr-system \\\n  dapr \\\n  dapr/dapr\n```\n\n----------------------------------------\n\nTITLE: Injecting Environment Variables for Dapr Runtime in Linux/MacOS\nDESCRIPTION: Example of how to inject environment variables into the Dapr runtime process when running in standalone mode on Linux or MacOS. This can be used to specify AWS credentials or configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/AWS/authenticating-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFOO=bar daprd --app-id myapp\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Windows\nDESCRIPTION: Installs the latest Windows Dapr CLI to $Env:SystemDrive\\dapr and adds it to the User PATH environment variable.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -Command \"iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Container to Simulate Fault\nDESCRIPTION: This command stops the Redis container to simulate a fault in the system, triggering the resiliency policies.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop dapr_redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Values for Dapr Debug Installation\nDESCRIPTION: YAML configuration for Helm to install Dapr debug version. It specifies the custom Docker registry, image tag, and enables debugging for the Dapr operator with a delay.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n   registry: docker.io/<your docker.io id>\n   tag: \"dev-linux-amd64\"\ndapr_operator:\n  debug:\n    enabled: true\n    initialDelaySeconds: 3000\n```\n\n----------------------------------------\n\nTITLE: Stopping Specific Dapr Application\nDESCRIPTION: Example showing how to stop a specific Dapr application using the app-id flag. This command terminates both the Dapr sidecar and the associated application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-stop.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr stop --app-id <ID>\n```\n\n----------------------------------------\n\nTITLE: Markdown Tutorial Documentation Table Structure\nDESCRIPTION: Markdown table structure defining tutorial descriptions and links for both Dapr Docs hosted tutorials and GitHub hosted tutorials. Includes navigation and setup prerequisites.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: docs\ntitle: \"Dapr Tutorials\"\nlinkTitle: \"Dapr Tutorials\"\nweight: 70\ndescription: \"Walk through in-depth examples to learn more about how to work with Dapr concepts\"\nno_list: true\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling API Logging in Kubernetes\nDESCRIPTION: Kubernetes pod spec annotation to enable API logging for a Dapr sidecar. This allows you to see API calls made to the Dapr sidecar when running in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  dapr.io/enable-api-logging: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Issuer Certificate with Step CLI\nDESCRIPTION: Command to create an intermediate issuer certificate signed by the root CA. Sets validity period to 8760 hours (1 year).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nstep certificate create cluster.local issuer.crt issuer.key --ca ca.crt --ca-key ca.key --profile intermediate-ca --not-after 8760h --no-password --insecure\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling in Kubernetes with Dapr Annotations\nDESCRIPTION: YAML annotation example for enabling profiling in a Kubernetes pod running Dapr. Adding the dapr.io/enable-profiling annotation with value \"true\" activates profiling for the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n   annotations:\n    dapr.io/enabled: \"true\"\n    dapr.io/app-id: \"rust-app\"\n    dapr.io/enable-profiling: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Captured pprof Profile\nDESCRIPTION: Command to analyze a captured CPU profile using the pprof tool. This opens an interactive pprof session for examining the profile data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npprof cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Running SmartDevice.Client with Dapr\nDESCRIPTION: Start the SmartDevice.Client application using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id actorclient -- dotnet run\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Init Command Usage\nDESCRIPTION: Basic syntax for using the dapr init command with flags\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Resources to Namespace B\nDESCRIPTION: Commands to deploy Redis component and React form to namespace-b\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deploy/redis.yaml\nkubectl apply -f deploy/react-form.yaml\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL in Docker\nDESCRIPTION: Docker command to run a local instance of PostgreSQL for development purposes with default credentials.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 5432:5432 -e POSTGRES_PASSWORD=example postgres\n```\n\n----------------------------------------\n\nTITLE: Applying Modified Metrics Server Manifest\nDESCRIPTION: This bash command applies the modified metrics-server manifest to the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-kind.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f components.yaml\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr Services After Certificate Update\nDESCRIPTION: Commands to restart the Dapr Sentry service and other control plane components after updating certificates with a different private key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/dapr-sentry -n <DAPR_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Running Localstack with SNS/SQS Services via Docker\nDESCRIPTION: Docker command to start a local Localstack instance with SNS, SQS, and STS services for development purposes. It configures the services to run on ports 4566 and 4571 with the US East 1 region.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 4566:4566 -p 4571:4571 -e SERVICES=\"sts,sns,sqs\" -e AWS_DEFAULT_REGION=\"us-east-1\" localstack/localstack\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Dapr\nDESCRIPTION: Commands to create and use a Docker network for Dapr container communication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-docker.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my-dapr-network\ndocker run --net=my-dapr-network ...\n```\n\n----------------------------------------\n\nTITLE: Running Checkout Service with Dapr in Python\nDESCRIPTION: This command runs the 'checkout' Python service with a Dapr sidecar, specifying the app ID, resources path, and other configuration options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3500 -- python3 app.py\n```\n\n----------------------------------------\n\nTITLE: Applying Dapr Component Configurations in Kubernetes\nDESCRIPTION: Commands to apply the Redis state store and pub/sub component configurations in a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/configure-state-pubsub.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f redis-state.yaml\nkubectl apply -f redis-pubsub.yaml\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Minikube Service External IP Access\nDESCRIPTION: Example of troubleshooting LoadBalancer services in Minikube. Shows checking service status with kubectl and using the minikube service command to access services with pending external IPs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-minikube.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get svc\nNAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)            AGE\n...\ncalculator-front-end        LoadBalancer   10.103.98.37     <pending>     80:30534/TCP       25h\ncalculator-front-end-dapr   ClusterIP      10.107.128.226   <none>        80/TCP,50001/TCP   25h\n...\n\n$ minikube service calculator-front-end\n|-----------|----------------------|-------------|---------------------------|\n| NAMESPACE |         NAME         | TARGET PORT |            URL            |\n|-----------|----------------------|-------------|---------------------------|\n| default   | calculator-front-end |             | http://192.168.64.7:30534 |\n|-----------|----------------------|-------------|---------------------------|\n🎉  Opening kubernetes service  default/calculator-front-end in default browser...\n```\n\n----------------------------------------\n\nTITLE: Exporting Kubernetes mTLS Certificates to Specific Directory\nDESCRIPTION: This example demonstrates how to export mTLS certificates from a Kubernetes cluster to a specific directory named './certs'. It's useful for checking certificate expiry or backing up certificates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls export -o ./certs\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Retrieving a Secret\nDESCRIPTION: Simple cURL command example for retrieving a secret named 'db-secret' from a secret store named 'kubernetes' running on localhost port 3500.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/kubernetes/db-secret\n```\n\n----------------------------------------\n\nTITLE: Running the Order Processor Application\nDESCRIPTION: Command to start the order processor application using Dapr's Multi-App Run feature.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dapr using CLI\nDESCRIPTION: Command to upgrade Dapr on Kubernetes using the Dapr CLI with specified runtime version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr upgrade -k --runtime-version={{% dapr-latest-version long=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Complete Metadata Response Example\nDESCRIPTION: Shows the full JSON response structure when retrieving metadata information, including custom attributes, runtime information, components, and configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"myApp\",\n  \"runtimeVersion\": \"1.12.0\",\n  \"enabledFeatures\": [\n    \"ServiceInvocationStreaming\"\n  ],\n  \"actors\": [\n    {\n      \"type\": \"DemoActor\"\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"pubsub\",\n      \"type\": \"pubsub.redis\",\n      \"version\": \"v1\"\n    },\n    {\n      \"name\": \"statestore\",\n      \"type\": \"state.redis\",\n      \"version\": \"v1\",\n      \"capabilities\": [\n        \"ETAG\",\n        \"TRANSACTIONAL\",\n        \"ACTOR\"\n      ]\n    }\n  ],\n  \"httpEndpoints\": [\n    {\n      \"name\": \"my-backend-api\"\n    }\n  ],\n  \"subscriptions\": [\n    {\n      \"type\": \"PROGRAMMATIC\",\n      \"pubsubname\": \"pubsub\",\n      \"topic\": \"orders\",\n      \"deadLetterTopic\": \"\",\n      \"metadata\": {\n        \"ttlInSeconds\": \"30\"\n      },\n      \"rules\": [\n          {\n              \"match\": \"%!s(<nil>)\",\n              \"path\": \"orders\"\n          }\n      ]\n    }\n  ],\n  \"extended\": {\n    \"myDemoAttribute\": \"myDemoAttributeValue\",\n    \"appCommand\": \"uvicorn --port 3000 demo_actor_service:app\",\n    \"appPID\": \"98121\",\n    \"cliPID\": \"98114\",\n    \"daprRuntimeVersion\": \"1.12.0\"\n  },\n  \"appConnectionProperties\": {\n    \"port\": 3000,\n    \"protocol\": \"http\",\n    \"channelAddress\": \"127.0.0.1\",\n    \"health\": {\n      \"healthProbeInterval\": \"5s\",\n      \"healthProbeTimeout\": \"500ms\",\n      \"healthThreshold\": 3\n    }\n  },\n  \"scheduler\": {\n    \"connected_addresses\": [\n      \"10.244.0.47:50006\",\n      \"10.244.0.48:50006\",\n      \"10.244.0.49:50006\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Resiliency Configuration in Kubernetes\nDESCRIPTION: Command to apply a resiliency specification to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/resiliency-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f <resiliency-spec-name>.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Cassandra Locally with Docker\nDESCRIPTION: Docker command to run Cassandra locally using the Datastax Docker image. This provides a self-hosted instance of Cassandra that listens on localhost:9042.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cassandra.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e DS_LICENSE=accept --memory 4g --name my-dse -d datastax/dse-server -g -s -k\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Order Processor Service\nDESCRIPTION: Commands to navigate to order-processor directory, install dependencies and run the service with Dapr sidecar configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd service_invocation/java/http/order-processor\nmvn clean install\ndapr run --app-id order-processor --resources-path ../../../resources/ --app-port 9001 --app-protocol http --dapr-http-port 3501 -- java -jar target/OrderProcessingService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Sample values.yaml for Dapr Helm Installation with hostNetwork\nDESCRIPTION: A sample values.yaml file for Helm installation that sets the hostNetwork parameter to true for the Dapr sidecar injector. This configuration is required for Amazon EKS with overlay networks like Calico.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndapr_sidecar_injector:\n  hostNetwork: true\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL State Store for Human-Readable Data in SQL\nDESCRIPTION: This SQL query selects all columns from the state table and converts the 'value' column from BYTEA to UTF-8 for human-readable display. It's useful for inspecting non-binary data stored in the state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-postgresql-v2.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Replace \"state\" with the name of the state table in your environment\nSELECT *, convert_from(value, 'utf-8') FROM state;\n```\n\n----------------------------------------\n\nTITLE: Helm Upgrade Commands Set\nDESCRIPTION: Series of commands to upgrade Dapr using Helm, including updating CRDs and the Helm chart.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/dapr/dapr/v{{% dapr-latest-version long=\"true\" %}}/charts/dapr/crds/components.yaml\nkubectl replace -f https://raw.githubusercontent.com/dapr/dapr/v{{% dapr-latest-version long=\"true\" %}}/charts/dapr/crds/configuration.yaml\nkubectl replace -f https://raw.githubusercontent.com/dapr/dapr/v{{% dapr-latest-version long=\"true\" %}}/charts/dapr/crds/subscription.yaml\nkubectl apply -f https://raw.githubusercontent.com/dapr/dapr/v{{% dapr-latest-version long=\"true\" %}}/charts/dapr/crds/resiliency.yaml\nkubectl apply -f https://raw.githubusercontent.com/dapr/dapr/v{{% dapr-latest-version long=\"true\" %}}/charts/dapr/crds/httpendpoints.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade dapr dapr/dapr --version {{% dapr-latest-version long=\"true\" %}} --namespace dapr-system --wait\n```\n\n----------------------------------------\n\nTITLE: Running Java Publisher Service with Dapr\nDESCRIPTION: This Bash command runs a Java checkout service with Dapr. It specifies the application ID and resources path for components for the publisher service that will send messages to the pubsub component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/pubsub-quickstart.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --resources-path ../../../components -- java -jar target/CheckoutService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Current Dapr Deployment in Bash\nDESCRIPTION: This command uninstalls the current Dapr deployment, removing the default $HOME/.dapr directory, binaries, and all containers (dapr_redis, dapr_placement, and dapr_zipkin). Note that Linux users may need to use sudo if the docker command requires it.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall --all\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Dapr How-to Guides\nDESCRIPTION: A comprehensive markdown template for creating how-to guides in the Dapr documentation. The template includes front-matter configuration, guidelines for content structure, and placeholders for required sections like introductory paragraphs, task details, and next steps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/docs-templates/howto-template.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: #Required; docs\ntitle: #Required; \"How to: Brief, clear title\"\nlinkTitle: #Required; \"How to: Shorter than regular title, to show in table of contents\"\nweight: #Required; Use the correct weight based on hierarchy\ndescription: #Required; One-sentence description of what to expect in the article\n---\n\n<!--\nRemove all the comments in this template before opening a PR.\n-->\n\n<!-- \nH1: The title in the Hugo front-matter serves as the article's markdown H1. \n-->\n\n<!-- Introductory paragraph  \nRequired. Light intro that briefly describes what the how-to will cover and any default Dapr characteristics. Link off to the appropriate concept or overview docs to provide context. -->\n\n<!-- \nInclude a diagram or image, if possible. \n-->\n\n<!--\nIf applicable, link to the related quickstart in a shortcode note or alert with text like:\n\n If you haven't already, [try out the <topic> quickstart](link) for a quick walk-through on how to use <topic>.\n\n-->\n\n<!-- \nMake sure the how-to includes examples for multiple programming languages, OS, or deployment targets, if applicable. \n-->\n\n## <Action or task>\n\n<!-- \nUnlike quickstarts, do not use \"Step 1\", \"Step 2\", etc.  \n-->\n\n## <Action or task>\n\n<!-- \nEach H2 step should start with a verb/action word.\n-->\n\n<!--\nInclude code snippets where possible. \n-->\n\n## Next steps\n\n<!--\nLink to related pages and examples. For example, the building block overview, the related tutorial, API reference, etc.\n-->\n```\n\n----------------------------------------\n\nTITLE: Building SmartDevice.Service in .NET\nDESCRIPTION: Navigate to the service directory and build the SmartDevice.Service application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd actors/csharp/sdk/service\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Restarting Redis Container to Remove Fault\nDESCRIPTION: This command restarts the Redis container to remove the simulated fault and allow the application to recover.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker start dapr_redis\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Conversation Sample Directory\nDESCRIPTION: Changes to the Go SDK conversation sample directory within the cloned repository. This directory contains the Go implementation of the conversation API example.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd conversation/go/sdk/conversation\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Alibaba Cloud Tablestore\nDESCRIPTION: JSON payload for listing objects in Alibaba Cloud Tablestore. Includes the 'delete' operation (likely a typo, should be 'list'), primary keys, columns to retrieve, and data with multiple primary key values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudtablestore.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"primaryKeys\": \"pk1\",\n    \"columnToGet\": \"name,age,date\"\n  },\n  \"data\": {\n    \"pk1\": \"data1\",\n    \"pk2\": \"data2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying KubeMQ on Kubernetes\nDESCRIPTION: Kubernetes commands for deploying KubeMQ using initialization files and license key configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-kubemq.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://deploy.kubemq.io/init\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://deploy.kubemq.io/key/<your-key>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Dapr Installation\nDESCRIPTION: Install Dapr on a Kubernetes cluster with various configuration options\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --wait --timeout 600\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --runtime-version 1.4.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --set global.tag=1.0.0 --set dapr_operator.logLevel=error\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Logging in Dapr Deployment\nDESCRIPTION: Example Kubernetes deployment YAML showing how to enable JSON logging for a Dapr sidecar\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pythonapp\n  namespace: default\n  labels:\n    app: python\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: python\n  template:\n    metadata:\n      labels:\n        app: python\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"pythonapp\"\n        dapr.io/log-as-json: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Middleware Note Alert Example\nDESCRIPTION: Note about pluggable components implementation differences compared to built-in Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/components-concept.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{% alert title=\"Note\" color=\"primary\" %}} \nSince pluggable components are not required to be written in Go, they follow a different implementation process than built-in Dapr components. For more information on developing built-in components, read [developing new components](https://github.com/dapr/components-contrib/blob/master/docs/developing-component.md).\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Service Invocation Within Same Namespace\nDESCRIPTION: A basic service invocation URL pattern for calling a service within the same namespace, referencing only the app ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/service-invocation-namespaces.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nlocalhost:3500/v1.0/invoke/nodeapp/method/neworder\n```\n\n----------------------------------------\n\nTITLE: Implementing OPA Policy Result Structure in Go\nDESCRIPTION: This Go code defines the structure of the OPA policy result, which can be either a boolean or an object with allow, status_code, and additional_headers properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-opa.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Result bool\n// or\ntype Result struct {\n  allow bool\n  status_code int\n  additional_headers map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Subscriber Logs\nDESCRIPTION: Commands to switch namespace and check subscriber pod logs\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=namespace-a\nkubectl get pod\nkubectl logs node-subscriber-XYZ node-subscriber\nkubectl logs python-subscriber-XYZ python-subscriber\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding with cURL\nDESCRIPTION: Example of using cURL to invoke a Kafka output binding with custom message and metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/bindings_api.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myKafka \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"message\": \"Hi\"\n        },\n        \"metadata\": {\n          \"key\": \"redis-key-1\"\n        },\n        \"operation\": \"create\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using HTTP API (Bash)\nDESCRIPTION: This snippet shows how to unsubscribe from configuration updates using the Dapr HTTP API with Bash. It makes a simple HTTP request to the unsubscribe endpoint with the store name and subscription ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://localhost:<DAPR_HTTP_PORT>/v1.0/configuration/configstore/<subscription-id>/unsubscribe'\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation from Installer Bundle\nDESCRIPTION: Install Dapr using a local installer bundle for offline/airgap environments\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --from-dir <path-to-installer-bundle-directory>\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application with Resiliency\nDESCRIPTION: This command runs the 'order-processor' service with a Dapr sidecar, specifying the resources path where the resiliency configuration is located.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id order-processor --resources-path ../../../resources/ -- java -jar target/OrderProcessingService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding in Go\nDESCRIPTION: This Go code demonstrates how to use the Dapr SDK to invoke an output binding. It creates a DaprClient and sends 10 messages to the 'checkout' binding at 5-second intervals.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/bindings/howto-bindings.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n//dependencies\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\t\"strconv\"\n\tdapr \"github.com/dapr/go-sdk/client\"\n\n)\n\n//code\nfunc main() {\n\tBINDING_NAME := \"checkout\";\n\tBINDING_OPERATION := \"create\";\n\tfor i := 0; i < 10; i++ {\n\t\ttime.Sleep(5000)\n\t\torderId := rand.Intn(1000-1) + 1\n\t\tclient, err := dapr.NewClient()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer client.Close()\n\t\tctx := context.Background()\n        //Using Dapr SDK to invoke output binding\n\t\tin := &dapr.InvokeBindingRequest{ Name: BINDING_NAME, Operation: BINDING_OPERATION , Data: []byte(strconv.Itoa(orderId))}\n\t\terr = client.InvokeOutputBinding(ctx, in)\n\t\tlog.Println(\"Sending message: \" + strconv.Itoa(orderId))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter Template in YAML\nDESCRIPTION: This code snippet represents the YAML front matter for a Hugo content template. It automatically generates a title by replacing hyphens with spaces and capitalizing words, inserts the current date, and sets the draft status to true by default.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/archetypes/default.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on MacOS\nDESCRIPTION: Installs the latest Darwin Dapr CLI to /usr/local/bin using curl and bash.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/dapr/cli/master/install/install.sh | /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Checking Deployed Pods in Default Namespace\nDESCRIPTION: Verify the deployment of Redis and Zipkin components in the default namespace after installing Dapr with the development flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace default\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr on Kubernetes with Helm using Mariner-based Images\nDESCRIPTION: This Helm command installs or upgrades Dapr on Kubernetes, specifying the use of Mariner-based container images by setting the global.tag option with a '-mariner' suffix.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n  --version={{% dapr-latest-version short=\"true\" %}} \\\n  --namespace dapr-system \\\n  --create-namespace \\\n  --set global.tag={{% dapr-latest-version long=\"true\" %}}-mariner \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Example of a Richer gRPC Error Response\nDESCRIPTION: Illustrates the structure of a richer gRPC error response, which includes additional details such as ErrorInfo, ResourceInfo, and BadRequest information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/grpc-error-codes.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nERROR:\n  Code: InvalidArgument\n  Message: input key/keyPrefix 'bad||keyname' can't contain '||'\n  Details:\n  1)\t{\n    \t  \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n    \t  \"domain\": \"dapr.io\",\n    \t  \"reason\": \"DAPR_STATE_ILLEGAL_KEY\"\n    \t}\n  2)\t{\n    \t  \"@type\": \"type.googleapis.com/google.rpc.ResourceInfo\",\n    \t  \"resourceName\": \"statestore\",\n    \t  \"resourceType\": \"state\"\n    \t}\n  3)\t{\n    \t  \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\n    \t  \"fieldViolations\": [\n    \t    {\n    \t      \"field\": \"bad||keyname\",\n    \t      \"description\": \"input key/keyPrefix 'bad||keyname' can't contain '||'\"\n    \t    }\n    \t  ]\n    \t}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom Storage Class - Helm\nDESCRIPTION: Helm command to install Dapr with a specific storage class configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--set dapr_scheduler.cluster.storageClassName=my-storage-class \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Hosted Pulsar Instance\nDESCRIPTION: Docker command to create a standalone Pulsar instance with exposed ports and mounted volumes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-pulsar.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it \\\n  -p 6650:6650 \\\n  -p 8080:8080 \\\n  --mount source=pulsardata,target=/pulsar/data \\\n  --mount source=pulsarconf,target=/pulsar/conf \\\n  apachepulsar/pulsar:2.5.1 \\\n  bin/pulsar standalone\n```\n\n----------------------------------------\n\nTITLE: Navigating to the checkout service directory\nDESCRIPTION: Command to navigate to the checkout service directory from the root of the Quickstart clone directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd service_invocation/csharp/http/checkout\n```\n\n----------------------------------------\n\nTITLE: Running a gRPC Server with Dapr CLI\nDESCRIPTION: Command for running a gRPC server using the Dapr CLI. This command assigns the app ID 'server' and exposes the server on port 50051.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id server --app-port 50051 -- go run main.go\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Creating Object with Specific Key in Windows\nDESCRIPTION: This bash command illustrates how to use curl to create an object in Alibaba Cloud OSS with a specific key on Windows.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\", \\\"metadata\\\": { \\\"key\\\": \\\"my-key\\\" } }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom Scheduler Storage Size - CLI\nDESCRIPTION: Command to initialize Dapr with increased scheduler storage size (16Gi) using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --set dapr_scheduler.cluster.storageSize=16Gi --set dapr_scheduler.etcdSpaceQuota=16Gi\n```\n\n----------------------------------------\n\nTITLE: Running Checkout Service with Dapr in JavaScript\nDESCRIPTION: This command runs the 'checkout' JavaScript service with a Dapr sidecar, specifying the app ID, resources path, and other configuration options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id checkout --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3500 -- npm start\n```\n\n----------------------------------------\n\nTITLE: Installing New Relic Logging with Helm 2\nDESCRIPTION: Command to install the New Relic Logging Kubernetes plugin using Helm 2, requiring a New Relic license key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/newrelic.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install newrelic/newrelic-logging --name newrelic-logging --set licenseKey=YOUR_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Default Instance Name Setting in RocketMQ Component\nDESCRIPTION: Default value for instanceName field which uses Go's time.Now().String() function to generate a timestamp-based instance name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rocketmq.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntime.Now().String()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Password on Windows\nDESCRIPTION: Commands to retrieve and decode the Redis password from Kubernetes secrets on Windows.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace default redis -o jsonpath=\"{.data.redis-password}\" > encoded.b64\ncertutil -decode encoded.b64 password.txt\n```\n\n----------------------------------------\n\nTITLE: FastAPI Avro Message Consumer\nDESCRIPTION: Python FastAPI implementation for subscribing to and handling Avro-serialized Kafka messages\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, Body, Response, status\nimport json\nimport sys\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\n@router.get('/dapr/subscribe')\ndef subscribe():\n    subscriptions = [{'pubsubname': 'pubsub',\n                      'topic': 'my-topic',\n                      'route': 'my_topic_subscriber',\n                      'metadata': {\n                          'valueSchemaType': 'Avro',\n                      } }]\n    return subscriptions\n\n@router.post('/my_topic_subscriber')\ndef my_topic_subscriber(event_data=Body()):\n    print(event_data, flush=True)\n      return Response(status_code=status.HTTP_200_OK)\n\napp.include_router(router)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using C#\nDESCRIPTION: This snippet demonstrates how to unsubscribe from configuration updates using the Dapr .NET SDK. It creates a Dapr client and calls the UnsubscribeConfiguration method with the store name and subscription ID to stop receiving updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Dapr.Client;\n\nconst string DAPR_CONFIGURATION_STORE = \"configstore\";\nvar client = new DaprClientBuilder().Build();\n\n// Unsubscribe to config updates and exit the app\nasync Task unsubscribe(string subscriptionId)\n{\n  try\n  {\n    await client.UnsubscribeConfiguration(DAPR_CONFIGURATION_STORE, subscriptionId);\n    Console.WriteLine(\"App unsubscribed from config changes\");\n    Environment.Exit(0);\n  }\n  catch (Exception ex)\n  {\n    Console.WriteLine(\"Error unsubscribing from config updates: \" + ex.Message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Dapr Sidecar for Configuration API Access\nDESCRIPTION: Command to start a Dapr sidecar to use with the Configuration API. It runs a Dapr instance with the app ID 'orderprocessing' on HTTP port 3601.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id orderprocessing --dapr-http-port 3601\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Input Binding in Dapr\nDESCRIPTION: This YAML configuration sets up a Cron binding component that triggers an event every 10 seconds. The binding is configured as an input binding, which means it will invoke the specified endpoint in your application based on the schedule.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: cron\n  namespace: quickstarts\nspec:\n  type: bindings.cron\n  version: v1\n  metadata:\n  - name: schedule\n    value: \"@every 10s\" # valid cron schedule\n  - name: direction\n    value: \"input\" # direction of the cron binding\n```\n\n----------------------------------------\n\nTITLE: Enabling URL Obfuscation in API Logs\nDESCRIPTION: Dapr Configuration spec to enable URL obfuscation in HTTP API logs. This helps prevent Personal Identifiable Information (PII) from being accidentally included in API logs, aiding in compliance with privacy regulations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  apiLogging:\n    obfuscateURLs: true\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Kubernetes using Helm\nDESCRIPTION: Commands to add Bitnami repo and install Redis 6.2 on Kubernetes cluster using Helm.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install redis bitnami/redis --set image.tag=6.2\n```\n\n----------------------------------------\n\nTITLE: Redis Host Configuration in Kubernetes\nDESCRIPTION: YAML configuration example for setting the Redis host address in Kubernetes deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisHost\n      value: redis-master:6379\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus without Persistent Volumes for Development\nDESCRIPTION: Helm command to install Prometheus in Kubernetes without persistent volumes, suitable for development environments or Minikube setups.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr-prom prometheus-community/prometheus -n dapr-monitoring\n --set alertmanager.persistence.enabled=false --set pushgateway.persistentVolume.enabled=false --set server.persistentVolume.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr Service with CLI\nDESCRIPTION: Command to restart the order-processor service with Dapr, specifying application ports, IDs, resource paths, and protocols to restore normal operation after a simulated failure.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-port 6001 --app-id order-processor --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3501 -- go run .\n```\n\n----------------------------------------\n\nTITLE: Cloning Components-Contrib Repository in Dapr Codespace\nDESCRIPTION: Commands for cloning the components-contrib repository into a Dapr Codespace and adding it to the workspace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/codespaces.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# If you want to use your fork of dapr/components-contrib, replace this with your fork (e.g. \"yourusername/components-contrib\")\n# Make sure you've forked the repo before doing this\nREPO=dapr/components-contrib\ncd /workspaces\ngh repo clone \"$REPO\" /workspaces/components-contrib\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up a Twilio SendGrid binding component with various email configuration options including from/to addresses, subject, CC/BCC, and dynamic template support.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sendgrid.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: sendgrid\nspec:\n  type: bindings.twilio.sendgrid\n  version: v1\n  metadata:\n  - name: emailFrom\n    value: \"testapp@dapr.io\"\n  - name: emailFromName\n    value: \"test app\"\n  - name: emailTo\n    value: \"dave@dapr.io\"\n  - name: emailToName\n    value: \"dave\"\n  - name: subject\n    value: \"Hello!\"\n  - name: emailCc\n    value: \"jill@dapr.io\"\n  - name: emailBcc\n    value: \"bob@dapr.io\"\n  - name: dynamicTemplateId\n    value: \"d-123456789\"\n  - name: dynamicTemplateData\n    value: '{\"customer\":{\"name\":\"John Smith\"}}'\n  - name: apiKey\n    value: \"YOUR_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Installing New Relic Prometheus Integration with Helm\nDESCRIPTION: Command to install the New Relic Prometheus OpenMetrics Integration using Helm. Requires replacing YOUR_LICENSE_KEY with your actual New Relic license key to authenticate the integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/newrelic.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install nri-prometheus newrelic/nri-prometheus --set licenseKey=YOUR_LICENSE_KEY\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration to Kubernetes\nDESCRIPTION: Command to apply the secret store configuration to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/secret-scope.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f appconfig.yaml`.\n```\n\n----------------------------------------\n\nTITLE: Stopping a Service on Windows\nDESCRIPTION: Command to stop a running service on Windows to simulate a service failure for testing resiliency patterns.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: script\nCODE:\n```\nCTRL + C\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr with Slim Configuration\nDESCRIPTION: Command to initialize Dapr without default configuration files or Docker containers using the --slim flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --slim\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with OpenSSL on macOS\nDESCRIPTION: Commands to generate an Ed25519 key pair using OpenSSL 3 from Homebrew on macOS. Creates private.pem and public.pem files containing the key pair.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$(brew --prefix)/opt/openssl@3/bin/openssl genpkey -algorithm ed25519 -out private.pem\n$(brew --prefix)/opt/openssl@3/bin/openssl pkey -in private.pem -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Using Dapr HTTP API in PowerShell\nDESCRIPTION: Use Invoke-RestMethod in PowerShell to send a GET request to the Dapr sidecar's HTTP endpoint to retrieve a secret from the configured secret store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Uri 'http://localhost:3500/v1.0/secrets/my-secret-store/my-secret'\n```\n\n----------------------------------------\n\nTITLE: Listing Dapr Components Directory on Linux/MacOS\nDESCRIPTION: Command to list contents of the Dapr components directory on Linux or MacOS systems.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nls $HOME/.dapr\n```\n\n----------------------------------------\n\nTITLE: AWS Profile Update Command\nDESCRIPTION: Command to update kubectl configuration with the correct AWS profile for cluster access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws eks --region [your_aws_region] update-kubeconfig --name [your_eks_cluster_name] --profile [your_profile_name]\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription\nDESCRIPTION: Command to set the default Azure subscription for subsequent operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-aks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz account set -s [your_subscription_id]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific State Data in Azure Cosmos DB for Dapr\nDESCRIPTION: These SQL queries demonstrate how to retrieve specific state data and its ETag (version) for a given key and application in the Dapr state store using Azure Cosmos DB.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-cosmosdb-store.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE states.id = 'myapp||balance'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT states._etag FROM states WHERE states.id = 'myapp||balance'\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Ephemeral Storage using Helm\nDESCRIPTION: This Helm command installs or upgrades Dapr with the Scheduler configured to use in-memory storage. It specifies the Dapr version, namespace, and waits for the installation to complete.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--version={{% dapr-latest-version short=\"true\" %}} \\\n--namespace dapr-system \\\n--create-namespace \\\n--set dapr_scheduler.cluster.inMemoryStorage=true \\\n--wait\n```\n\n----------------------------------------\n\nTITLE: Order Processor App Console Output\nDESCRIPTION: This snippet shows the expected console output when running the order processor app. It includes detailed logs of the workflow execution, including HTTP requests, instance creation, activity processing, and order status updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n== APP - order-processor == Starting workflow 571a6e25 purchasing 1 Cars\n== APP - order-processor == info: Microsoft.DurableTask.Client.Grpc.GrpcDurableTaskClient[40]\n== APP - order-processor ==       Scheduling new OrderProcessingWorkflow orchestration with instance ID '571a6e25' and 45 bytes of input data.\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/StartInstance\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/StartInstance\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 3045.9209ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 3046.0945ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 3016.1346ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 3016.3572ms - 200\n== APP - order-processor == info: Microsoft.DurableTask.Client.Grpc.GrpcDurableTaskClient[42]\n== APP - order-processor ==       Waiting for instance '571a6e25' to start.\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/WaitForInstanceStart\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/WaitForInstanceStart\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 2.9095ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 3.0445ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 99.446ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 99.5407ms - 200\n== APP - order-processor == Your workflow has started. Here is the status of the workflow: Running\n== APP - order-processor == info: Microsoft.DurableTask.Client.Grpc.GrpcDurableTaskClient[43]\n== APP - order-processor ==       Waiting for instance '571a6e25' to complete, fail, or terminate.\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/WaitForInstanceCompletion\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/WaitForInstanceCompletion\n== APP - order-processor == info: WorkflowConsoleApp.Activities.NotifyActivity[1985924262]\n== APP - order-processor ==       Presenting notification Notification { Message = Received order 571a6e25 for 1 Cars at $5000 }\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 1.6785ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 1.7869ms - 200\n== APP - order-processor == info: WorkflowConsoleApp.Workflows.OrderProcessingWorkflow[2013970020]\n== APP - order-processor ==       Received request ID '571a6e25' for 1 Cars at $5000\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 1.1947ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 1.3293ms - 200\n== APP - order-processor == info: WorkflowConsoleApp.Activities.VerifyInventoryActivity[1478802116]\n== APP - order-processor ==       Reserving inventory for order request ID '571a6e25' of 1 Cars\n== APP - order-processor == info: WorkflowConsoleApp.Activities.VerifyInventoryActivity[1130866279]\n== APP - order-processor ==       There are: 10 Cars available for purchase\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 1.8534ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 2.0077ms - 200\n== APP - order-processor == info: WorkflowConsoleApp.Workflows.OrderProcessingWorkflow[1162731597]\n== APP - order-processor ==       Checked inventory for request ID 'InventoryRequest { RequestId = 571a6e25, ItemName = Cars, Quantity = 1 }'\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteOrchestratorTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 1.1851ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 1.3742ms - 200\n== APP - order-processor == info: WorkflowConsoleApp.Activities.ProcessPaymentActivity[340284070]\n== APP - order-processor ==       Processing payment: request ID '571a6e25' for 1 Cars at $5000\n== APP - order-processor == info: WorkflowConsoleApp.Activities.ProcessPaymentActivity[1851315765]\n== APP - order-processor ==       Payment for request ID '571a6e25' processed successfully\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[100]\n== APP - order-processor ==       Start processing HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[100]\n== APP - order-processor ==       Sending HTTP request POST http://localhost:37355/TaskHubSidecarService/CompleteActivityTask\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.ClientHandler[101]\n== APP - order-processor ==       Received HTTP response headers after 0.8249ms - 200\n== APP - order-processor == info: System.Net.Http.HttpClient.Default.LogicalHandler[101]\n== APP - order-processor ==       End processing HTTP request after 0.9595ms - 200\n== APP - order-processor == info: WorkflowConsoleApp.Workflows.OrderProcessingWorkflow[340284070]\n== APP - order-processor ==       Processed payment request as there's sufficient inventory to proceed: PaymentRequest { RequestId = 571a6e25, ItemBeingPurchased = Cars, Amount = 1, Currency = 5000 }\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr from Kubernetes Cluster\nDESCRIPTION: Removes Dapr from a Kubernetes cluster. This command targets the Kubernetes environment for uninstallation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-uninstall.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall -k\n```\n\n----------------------------------------\n\nTITLE: Applying Dapr Configuration in Kubernetes\nDESCRIPTION: This Bash command shows how to apply a Dapr configuration file in a Kubernetes environment using kubectl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/preview-features.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f previewConfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying KubeMQ on Kubernetes\nDESCRIPTION: Kubernetes commands for initializing and deploying KubeMQ with authentication key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubemq.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://deploy.kubemq.io/init\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://deploy.kubemq.io/key/<your-key>\n```\n\n----------------------------------------\n\nTITLE: Running a gRPC Client with Dapr CLI\nDESCRIPTION: Command for running a gRPC client using the Dapr CLI. This command assigns the app ID 'client' and configures the Dapr gRPC port to 50007.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id client --dapr-grpc-port 50007 -- go run main.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Version in TOML\nDESCRIPTION: TOML configuration for the Hugo website to set up the preview version with correct base URL, GitHub information, and version menu settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\nbaseURL = \"https://v1-2.docs.dapr.io\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# GitHub Information\ngithub_repo = \"https://github.com/dapr/docs\"\ngithub_project_repo = \"https://github.com/dapr/dapr\"\ngithub_subdir = \"daprdocs\"\ngithub_branch = \"v1.2\"\n\n# Versioning\nversion_menu = \"v1.2 (preview)\"\nversion = \"v1.2\"\narchived_version = false\nurl_latest_version = \"https://docs.dapr.io\"\n\n[[params.versions]]\n  version = \"v1.2 (preview)\"\n  url = \"#\"\n[[params.versions]]\n  version = \"v1.1 (latest)\"\n  url = \"https://docs.dapr.io\"\n[[params.versions]]\n  version = \"v1.0\"\n  url = \"https://v1-0.docs.dapr.io\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dapr Upgrade Command in Bash\nDESCRIPTION: The basic command syntax for upgrading Dapr on supported platforms. This is the fundamental command structure that accepts various flags for customization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr upgrade [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with .NET Core Web API\nDESCRIPTION: Command to run a .NET Core Web API with Dapr, specifying app ID, app port, and Dapr HTTP port.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id dotnetwebapi --app-port 5000 --dapr-http-port 3500 dotnet run\n```\n\n----------------------------------------\n\nTITLE: Creating User Schema for Dapr State Store\nDESCRIPTION: SQL commands to create a new user schema named 'dapr' with necessary privileges for storing state data in Oracle Database.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ncreate user dapr identified by DaprPassword4239 default tablespace users quota unlimited on users;\ngrant create session, create table to dapr;\n```\n\n----------------------------------------\n\nTITLE: Adding Components-Contrib to VS Code Workspace\nDESCRIPTION: Command to add the components-contrib folder to the current VS Code workspace in Codespaces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/codespaces.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncode -a /workspaces/components-contrib\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI in Dev Container Configuration\nDESCRIPTION: JSON configuration for adding Dapr CLI and Docker support to a Dev Container using features. Includes options for both Docker-in-Docker and Docker-outside-of-Docker configurations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/vscode/vscode-remote-dev-containers.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"features\": {\n    // Install the Dapr CLI\n    \"ghcr.io/dapr/cli/dapr-cli:0\": {},\n    // Enable Docker (via Docker-in-Docker)\n    \"ghcr.io/devcontainers/features/docker-in-docker:2\": {},\n    // Alternatively, use Docker-outside-of-Docker (uses Docker in the host)\n    //\"ghcr.io/devcontainers/features/docker-outside-of-docker:1\": {},\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Dapr Workflow\nDESCRIPTION: HTTP endpoint to resume a previously paused workflow instance. Requires the workflow ID in the URL path.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-manage-workflow.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3500/v1.0/workflows/dapr/12345678/resume\n```\n\n----------------------------------------\n\nTITLE: Creating an Index for TTL Expiration Times in SQLite\nDESCRIPTION: SQL query to create an index on the expiration_time column in the state table. This improves performance for TTL-based cleanups in tables with large numbers of records.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-sqlite.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX idx_expiration_time\n  ON state (expiration_time);\n```\n\n----------------------------------------\n\nTITLE: Setting State with Curl Command\nDESCRIPTION: Example of sending a POST request to store state in the Oracle Database state store using curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"nihilus\",\n          \"value\": \"darth\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Connecting to RethinkDB Admin UI\nDESCRIPTION: Shell command to open the RethinkDB admin UI in a web browser. It dynamically obtains the container's IP address using Docker inspect and connects to port 8080.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-rethinkdb.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopen \"http://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' rethinkdb):8080\"\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Timer using cURL\nDESCRIPTION: Example of creating an actor timer using a cURL command. This snippet shows how to make a POST request to create a timer with specific parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/actors/stormtrooper/50/timers/checkRebels \\\n    -H \"Content-Type: application/json\" \\\n-d '{\n      \"data\": \"someData\",\n      \"dueTime\": \"1m\",\n      \"period\": \"20s\",\n      \"callback\": \"myEventHandler\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Getting an Object from AWS S3 using Dapr Binding\nDESCRIPTION: JSON structure for requesting an object from an S3 bucket using the 'get' operation. The operation requires specifying the object key in the metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get\",\n  \"metadata\": {\n    \"key\": \"my-test-file.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Analytics for Dapr with Azure Data Explorer\nDESCRIPTION: Dapr configuration file for setting up log analytics with Azure Data Explorer. This configuration defines the log endpoint, protocol, and authentication details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"dapr.io/v1alpha1\",\n  \"kind\": \"Configuration\",\n  \"metadata\": {\n    \"name\": \"logging\"\n  },\n  \"spec\": {\n    \"tracing\": {\n      \"samplingRate\": \"0\"\n    },\n    \"metrics\": {\n      \"enabled\": false\n    },\n    \"logOptions\": {\n      \"json\": {\n        \"enabled\": true,\n        \"sensitive\": true\n      }\n    },\n    \"logDestination\": {\n      \"endpoint\": \"https://ingest-<adx-cluster-name>.<region>.kusto.windows.net/daprdb\",\n      \"endpoint-type\": \"kusto\",\n      \"authentication\": {\n        \"type\": \"azure\",\n        \"credentials\": {\n          \"cloud\": \"AzureCloud\",\n          \"tenantId\": \"<tenant-id>\",\n          \"clientId\": \"<client-id>\",\n          \"certFile\": \"/var/run/secrets/kubernetes.io/serviceaccount/cert.pem\",\n          \"certData\": \"<cert-data>\"\n        }\n      },\n      \"protocol\": \"json-kusto\",\n      \"destination-metadata\": {\n        \"tableName\": \"daprlog\",\n        \"ingestionEndpoint\": \"https://ingest-<adx-cluster-name>.<region>.kusto.windows.net/\",\n        \"database\": \"daprdb\"\n      },\n      \"batch-size\": 100,\n      \"batch-max-wait-time-ms\": 1000,\n      \"enableBatching\": true,\n      \"minLevel\": \"debug\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Dapr Repository in Components-Contrib Codespace\nDESCRIPTION: Commands for cloning the Dapr repository into a components-contrib Codespace and adding it to the workspace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/codespaces.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# If you want to use your fork of dapr/dapr, replace this with your fork (e.g. \"yourusername/dapr\")\n# Make sure you've forked the repo before doing this\nREPO=dapr/dapr\ncd /workspaces\ngh repo clone \"$REPO\" /workspaces/dapr\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SignalR Binding Component in YAML\nDESCRIPTION: YAML configuration for setting up Azure SignalR binding component with required connection details and optional hub configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/signalr.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\nspec:\n  type: bindings.azure.signalr\n  version: v1\n  metadata:\n  - name: connectionString\n    value: \"Endpoint=https://<your-azure-signalr>.service.signalr.net;AccessKey=<your-access-key>;Version=1.0;\"\n  - name: hub  # Optional\n    value: \"<hub name>\"\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus as a Docker Container for Dapr Metrics\nDESCRIPTION: Docker command to run Prometheus in a container with host networking to connect to Dapr instances. This mounts a local configuration file and sets the web interface to port 8080.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/prometheus.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    --net=host \\\n    -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml \\\n    prom/prometheus --config.file=/etc/prometheus/prometheus.yml --web.listen-address=:8080\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Configuration for Dapr\nDESCRIPTION: Minimum configuration needed to use Consul as a name resolution component in Dapr. This setup enables Consul without any additional customizations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-name-resolution/setup-nr-consul.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"consul\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Priority Using Curl\nDESCRIPTION: Example of publishing a message with priority using HTTP API.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3601/v1.0/publish/order-pub-sub/orders?metadata.priority=3 -H \"Content-Type: application/json\" -d '{\"orderId\": \"100\"}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Containers\nDESCRIPTION: Command to list running Docker containers, used to verify Dapr-related containers are running.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Hugo\nDESCRIPTION: Example of using the YouTube shortcode in Hugo to embed a video directly in the documentation page.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* youtube [VIDEO ID] */>}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr HTTP API (PowerShell)\nDESCRIPTION: PowerShell example demonstrating how to get a configuration item using Dapr's HTTP API. It uses Invoke-RestMethod to retrieve the 'orderId1' configuration item from the 'configstore' configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Uri 'http://localhost:3601/v1.0/configuration/configstore?key=orderId1'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dapr Components Directory in Bash\nDESCRIPTION: Change the current working directory to 'my-components'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-components\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Docker Container\nDESCRIPTION: Command to launch the Zipkin Docker container for viewing workflow trace spans. This step is optional and requires Docker to be installed.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL Docker Container\nDESCRIPTION: Commands to navigate to the database directory and run PostgreSQL in a Docker container using Docker Compose.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd bindings/db\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Go\nDESCRIPTION: Unsubscribes from configuration updates and exits the application using the Dapr Go SDK.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/configuration-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nselect {\ncase <-ctx.Done():\n\terr = client.UnsubscribeConfigurationItems(context.Background(), DAPR_CONFIGURATION_STORE, subscriptionId)\n    //...\n\t{\n\t\tfmt.Println(\"App unsubscribed to config changes\")\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Dapr System Components with Helm\nDESCRIPTION: Example of setting the log level for Dapr system components when deploying with Helm 3.x to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr dapr/dapr --namespace dapr-system --set <COMPONENT>.logLevel=<LEVEL>\n```\n\n----------------------------------------\n\nTITLE: Checkout Service Success Logs\nDESCRIPTION: Log output from the checkout service showing successful order processing after the system has recovered from failure, with sequential order IDs indicating no data loss occurred.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n== APP == Order passed: {\"orderId\": 5}\n== APP == Order passed: {\"orderId\": 6}\n== APP == Order passed: {\"orderId\": 7}\n== APP == Order passed: {\"orderId\": 8}\n== APP == Order passed: {\"orderId\": 9}\n== APP == Order passed: {\"orderId\": 10}\n```\n\n----------------------------------------\n\nTITLE: Restarting Sentry with Config File\nDESCRIPTION: Command to restart the Sentry service with custom credentials path and configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n./sentry --issuer-credentials $HOME/.dapr/certs --trust-domain cluster.local --config=./config.yaml\n```\n\n----------------------------------------\n\nTITLE: Azure Login Command\nDESCRIPTION: Command to authenticate and log into Azure CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-aks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Accessing Redis CLI in Docker\nDESCRIPTION: Command to access the Redis CLI within the Docker container used by Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/get-started-api.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it dapr_redis redis-cli\n```\n\n----------------------------------------\n\nTITLE: Applying Dapr Collector Configuration in Kubernetes\nDESCRIPTION: Command to apply the Dapr collector configuration to a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Handling Input Binding in Java Spring Boot\nDESCRIPTION: Shows how to handle an input binding in a Spring Boot application. The incoming byte[] body is deserialized into a String using DefaultObjectSerializer.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  @PostMapping(path = \"/sample\")\n  public void handleInputBinding(@RequestBody(required = false) byte[] body) {\n      String message = (new DefaultObjectSerializer()).deserialize(body, String.class);\n      System.out.println(message);\n  }\n```\n\n----------------------------------------\n\nTITLE: Dapr Dashboard Command Examples\nDESCRIPTION: Various examples of using the Dapr dashboard command, including local startup, custom port configuration, and Kubernetes integration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-dashboard.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start dashboard locally\ndapr dashboard\n\n# Start dashboard service locally on a specified port\ndapr dashboard -p 9999\n\n# Port forward to dashboard service running in Kubernetes\ndapr dashboard -k\n\n# Port forward to dashboard service running in Kubernetes on all addresses on a specified port\ndapr dashboard -k -p 9999 --address 0.0.0.0\n\n# Port forward to dashboard service running in Kubernetes on a specified port\ndapr dashboard -k -p 9999\n```\n\n----------------------------------------\n\nTITLE: Cloning the Dapr Quickstarts Repository\nDESCRIPTION: Clones the Dapr Quickstarts repository which contains the conversation sample code. This repository includes examples for various Dapr building blocks across different programming languages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Completion to Linux Bash Profile\nDESCRIPTION: Commands to add Dapr completion to bash profile for persistent availability.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion bash > ~/.dapr/completion.bash.inc\\nprintf \"source '$HOME/.dapr/completion.bash.inc'\" >> $HOME/.bash_profile\\nsource $HOME/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Getting AKS Cluster Credentials\nDESCRIPTION: Command to retrieve and configure access credentials for the AKS cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-aks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz aks get-credentials -n [your_aks_cluster_name] -g [your_resource_group]\n```\n\n----------------------------------------\n\nTITLE: Capturing CPU Profile with pprof\nDESCRIPTION: Curl command to capture a CPU profile from the Dapr profiling server. The profile runs for 120 seconds and saves the output to a file named cpu.pprof.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:7777/debug/pprof/profile?seconds=120\" > cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Lock Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about Dapr lock components, setting metadata like type, title, weight, and description.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: docs\ntitle: \"Lock component specs\"\nlinkTitle: \"Locks\"\nweight: 7000\ndescription: The supported locks that interface with Dapr\nno_list: true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Placement Service\nDESCRIPTION: Example of launching the Dapr Actor Placement Service with a specific log level (warning).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./placement --log-level warn\n```\n\n----------------------------------------\n\nTITLE: Actor State Store Configuration\nDESCRIPTION: YAML configuration for setting up Redis as a state store for actors with required metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: statestore\nspec:\n  type: state.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <redis host>\n  - name: redisPassword\n    value: \"\"\n  - name: actorStateStore\n    value: \"true\"\n\n```\n\n----------------------------------------\n\nTITLE: Custom Validity with Service Restart\nDESCRIPTION: Generates new certificates with custom validity and restarts services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --valid-until <no of days> --restart\n```\n\n----------------------------------------\n\nTITLE: Enabling Minikube Dashboard and Ingress Add-ons\nDESCRIPTION: Commands to enable the Minikube dashboard for cluster visualization and the ingress add-on for external access to services running in the cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-minikube.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Enable dashboard\nminikube addons enable dashboard\n\n# Enable ingress\nminikube addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Querying Employees from Specific Organizations\nDESCRIPTION: Demonstrates a query to find all employees from the \"Dev Ops\" and \"Hardware\" organizations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-state-query-api.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filter\": {\n        \"IN\": { \"person.org\": [ \"Dev Ops\", \"Hardware\" ] }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Avro Messages using cURL and Python\nDESCRIPTION: Examples of publishing Avro-serialized messages using HTTP API and Python SDK\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X \"POST\" http://localhost:3500/v1.0/publish/pubsub/my-topic?metadata.rawPayload=true&metadata.valueSchemaType=Avro -H \"Content-Type: application/json\" -d '{\"order_number\": \"345\", \"created_date\": 1704861365986}'\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom dapr.clients import DaprClient\n\nwith DaprClient() as d:\n    req_data = {\n        'order_number': '345',\n        'created_date': 1704861365986\n    }\n    # Create a typed message with content type and body\n    resp = d.publish_event(\n        pubsub_name='pubsub',\n        topic_name='my-topic',\n        data=json.dumps(req_data),\n        publish_metadata={'rawPayload': 'true', 'valueSchemaType': 'Avro'}\n    )\n    # Print the request\n    print(req_data, flush=True)\n```\n\n----------------------------------------\n\nTITLE: Running Redis with Docker for Configuration Storage\nDESCRIPTION: Sets up a Redis instance using Docker to store configuration items. The command runs Redis on port 6379 in detached mode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name my-redis -p 6379:6379 -d redis:6\n```\n\n----------------------------------------\n\nTITLE: Resolving Dapr Init Port Issues on Windows\nDESCRIPTION: Commands to resolve port availability issues during Dapr initialization on Windows by stopping and starting the WinNAT service.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnat stop winnat\ndapr init\nnet start winnat\n```\n\n----------------------------------------\n\nTITLE: Querying Data with MySQL Binding\nDESCRIPTION: JSON request for executing a SELECT query using the MySQL binding. It shows how to use parameterized queries for data retrieval.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"query\",\n  \"metadata\": {\n    \"sql\": \"SELECT * FROM foo WHERE id < $1\",\n    \"params\": \"[3]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with step CLI\nDESCRIPTION: This command uses the step CLI to generate an Ed25519 key pair. It creates both public and private key files in one command, with specific options for key type and curve.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nstep crypto keypair \\\n  public.pem private.pem \\\n  --kty OKP --curve Ed25519 \\\n  --insecure --no-password\n```\n\n----------------------------------------\n\nTITLE: Adding Git Submodule for Translations\nDESCRIPTION: Command for adding a git submodule to support translations in the Dapr documentation repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule add <remote_url> translations/<language_code>\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Buttons in Hugo\nDESCRIPTION: Examples of using the button shortcode with different color options based on Bootstrap color classes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"primary\" */>}}\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"secondary\" */>}}\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"success\" */>}}\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"danger\" */>}}\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"warning\" */>}}\n{{</* button text=\"My Button\" link=\"https://example.com\" color=\"info\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger All-in-One Docker Container\nDESCRIPTION: Command to start the pre-built Jaeger all-in-one image in Docker, exposing the OTLP port 4317 for receiving traces and port 16686 for the Jaeger UI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-jaeger.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name jaeger \\\n  -p 4317:4317  \\\n  -p 16686:16686 \\\n  jaegertracing/all-in-one:1.49\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on MacOS using Homebrew\nDESCRIPTION: Command to install the Dapr CLI on MacOS systems using Homebrew package manager. This installs the CLI from the Dapr tap repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install dapr/tap/dapr-cli\n```\n\n----------------------------------------\n\nTITLE: Azure Monitor Query for Dapr Memory Metrics\nDESCRIPTION: Example KQL query that retrieves 'process_resident_memory_bytes' Prometheus metrics for Dapr system processes. It renders a time chart of memory usage across different Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nInsightsMetrics\n| where Namespace == \"prometheus\" and Name == \"process_resident_memory_bytes\"\n| extend tags=parse_json(Tags)\n| project TimeGenerated, Name, Val, app=tostring(tags['app'])\n| summarize memInBytes=percentile(Val, 99) by bin(TimeGenerated, 1m), app\n| where app startswith \"dapr-\"\n| render timechart\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Stop Command Usage\nDESCRIPTION: Shows the basic syntax for using the Dapr stop command with available flags. The command supports stopping specific applications using the app-id flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-stop.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr stop [flags]\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTelemetry Collector Configuration\nDESCRIPTION: Shell command to apply the OpenTelemetry Collector configuration in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f ./deploy/open-telemetry-collector-generic-datadog.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Host IP Environment Variable\nDESCRIPTION: Command to set the DAPR_HOST_IP environment variable to 127.0.0.1 for resolving timeout/connection errors in local development.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport DAPR_HOST_IP=127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands\nDESCRIPTION: Commands to remove all deployed resources and namespaces\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f deploy/redis.yaml  --namespace namespace-a\nkubectl delete -f deploy/node-subscriber.yaml  --namespace namespace-a\nkubectl delete -f deploy/python-subscriber.yaml  --namespace namespace-a\nkubectl delete -f deploy/react-form.yaml  --namespace namespace-b\nkubectl delete -f deploy/redis.yaml  --namespace namespace-b\nkubectl config set-context --current --namespace=default\nkubectl delete namespace namespace-a\nkubectl delete namespace namespace-b\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Linux using Bash\nDESCRIPTION: Command to install the Dapr CLI on Linux systems using Bash. This downloads and executes the installation script directly from the Dapr GitHub repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Applying Linux Application Deployment\nDESCRIPTION: This command applies the Linux application deployment YAML file to the Kubernetes cluster, creating or updating the deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deploy_linux.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App with Dapr\nDESCRIPTION: Command to start the Node.js application that will be managed by the Dapr sidecar. This is run separately from the daprd command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/configuration/invoke-allowlist.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Installing Kibana\nDESCRIPTION: Helm command to install Kibana in the monitoring namespace\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kibana elastic/kibana --version 7.17.3 -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Dapr Client Sample with Abbreviated Imports\nDESCRIPTION: Python code example showing how to use the Dapr client with imports section that can be abbreviated when displayed in documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#IMPORTS\nimport json\nimport time\n#IMPORTS\n\nfrom dapr.clients import DaprClient\n\nwith DaprClient() as d:\n    req_data = {\n        'id': 1,\n        'message': 'hello world'\n    }\n\n    while True:\n        # Create a typed message with content type and body\n        resp = d.invoke_method(\n            'invoke-receiver',\n            'my-method',\n            data=json.dumps(req_data),\n        )\n\n        # Print the response\n        print(resp.content_type, flush=True)\n        print(resp.text(), flush=True)\n\n        time.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Debug Version with Helm\nDESCRIPTION: Helm command to install the Dapr debug version using the custom values file. It installs Dapr in the dapr-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dapr charts/dapr --namespace dapr-system --values values.yml --wait\n```\n\n----------------------------------------\n\nTITLE: Stop Dapr Multi-App Template\nDESCRIPTION: Commands to stop running Dapr applications using either directory or file path in both environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n# the template file needs to be called `dapr.yaml` by default if a directory path is given\n\ndapr stop -f <dir_path>\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Data Explorer instance using Azure CLI\nDESCRIPTION: Azure CLI command for creating an Azure Data Explorer (Kusto) cluster. This defines the cluster name, resource group, location, and capacity.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz kusto cluster create --name adxDaprCluster --resource-group my-resource-group --location southcentralus --sku name=\"Dev(No SLA)_Standard_D11_v2\" tier=\"Basic\" capacity=1\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the order-processor project folder\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd state_management/go/sdk/order-processor\n```\n\n----------------------------------------\n\nTITLE: Running KubeMQ Broker with Docker\nDESCRIPTION: Docker command to run a KubeMQ broker instance locally with appropriate port mappings and license key configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-kubemq.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 -p 50000:50000 -p 9090:9090 -e KUBEMQ_TOKEN=<your-key> kubemq/kubemq\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Key-Values to a Vault Secret Using CLI\nDESCRIPTION: Shell command to add a secret with multiple key-value pairs to HashiCorp Vault. This demonstrates how to create a complex secret with multiple fields that can be retrieved as a JSON object.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/hashicorp-vault.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv put secret/dapr/mysecret firstKey=aValue secondKey=anotherValue thirdKey=yetAnotherDistinctValue\n```\n\n----------------------------------------\n\nTITLE: Viewing Dapr Placement Service Logs in Kubernetes\nDESCRIPTION: This Bash command retrieves logs from the Dapr Placement Service pods in the dapr-system namespace. It filters pods with the label 'app=dapr-placement-server'. The logs show the startup process of the Placement Service, including version information, log level, metrics server, Raft server, mTLS configuration, and leadership acquisition.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/logs-troubleshooting.md#2025-04-21_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl logs -l app=dapr-placement-server -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Returning HTTP Error JSON in Dapr\nDESCRIPTION: This snippet demonstrates the structure of an HTTP error response in Dapr. It includes an error code and a descriptive error message, returned as JSON when an error is encountered during HTTP calls to the Dapr runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/http-error-codes.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"Requested state key does not exist in state store.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Worker Using Wrangler\nDESCRIPTION: Shell command for deploying the Cloudflare Worker using the Wrangler CLI tool.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-cloudflare-workerskv.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler publish\n```\n\n----------------------------------------\n\nTITLE: Filtering State Data by JSON Property Value in SQL Server\nDESCRIPTION: Filters state data based on a value inside the JSON state using the JSON_VALUE function to query specific properties in the stored JSON data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE JSON_VALUE([Data], '$.color') = 'blue'\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Dapr Conceptual Articles\nDESCRIPTION: This markdown template provides the structure for creating a conceptual article in Dapr documentation. It includes front-matter configuration, section suggestions, and placeholder comments to guide content creation. The template also suggests including diagrams, references to related content, and next steps.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/docs-templates/concept-template.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: #Required; docs\ntitle: #Required; Brief, clear title\nlinkTitle: #Required; Brief title\nweight: #Required; Use the correct weight based on hierarchy\ndescription: #Required; One-sentence description of what to expect in the article\n---\n\n<!--\nRemove all the comments in this template before opening a PR.\n-->\n\n<!-- \nH1: The title in the Hugo front-matter serves as the article's markdown H1. \n-->\n\n<!-- Introductory paragraph  \nRequired. Brief intro that describes the concepts that the article will cover. Link off to the appropriate reference, specs, or how-to guides to provide context. -->\n\n<!-- \nInclude a diagram or image, if possible. \n-->\n\n## <Section 1 H2>\n\n<!-- \nAdd your content here.  \n-->\n\n## <Section 2 H2>\n\n<!-- \nEach H2 step should start with a noun/descriptive word.\n-->\n\n## <Section 3 H2>\n\n<!--\nAdd your content here.\n-->\n\n<!--\nInclude diagrams or images throughout, where applicable.\n-->\n\n## Try out <concept>\n\n<!-- \nIf applicable, include a section with links to the related quickstart, how-to guides, or tutorials. --> \n\n### Quickstarts and tutorials\n\nWant to put the Dapr <topic> API to the test? Walk through the following quickstart and tutorials to see <topic> in action:\n\n| Quickstart/tutorial | Description |\n| ------------------- | ----------- |\n| [<topic> quickstart](link) | Description of the quickstart. |\n| [<topic> tutorial](link) | Description of the tutorial. |\n\n### Start using <topic> directly in your app\n\nWant to skip the quickstarts? Not a problem. You can try out the <topic> building block directly in your application. After [Dapr is installed](link), you can begin using the <topic> API, starting with [the <topic> how-to guide](link).\n\n\n-->\n\n## Next steps\n\n<!--\nLink to related pages and examples. For example, the related API spec, related building blocks, etc.\n-->\n\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Pre-Provisioned SNS/SQS Resources\nDESCRIPTION: AWS IAM policy JSON for scenarios where SNS/SQS resources are pre-provisioned by other tools like Terraform. It includes limited permissions for using existing resources without creating new ones.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-aws-snssqs.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"YOUR_POLICY_NAME\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"sqs:DeleteMessage\",\n        \"sqs:ReceiveMessage\",\n        \"sqs:ChangeMessageVisibility\",\n        \"sqs:GetQueueUrl\",\n        \"sqs:GetQueueAttributes\",\n        \"sns:Publish\",\n        \"sns:ListSubscriptionsByTopic\",\n        \"sns:GetTopicAttributes\"\n\n      ],\n      \"Resource\": [\n        \"arn:aws:sns:AWS_REGION:AWS_ACCOUNT_ID:APP_TOPIC_NAME\",\n        \"arn:aws:sqs:AWS_REGION:AWS_ACCOUNT_ID:APP_ID\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Environment Variables\nDESCRIPTION: Commands to set environment variables for Azure resource group and static website configuration\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_RESOURCE_GROUP=rg-dapr-docs-test\nexport IDENTITY_RESOURCE_GROUP=rg-my-identities\nexport AZURE_STATICWEBSITE_NAME=daprdocs-latest\n```\n\n----------------------------------------\n\nTITLE: Creating Files via SFTP Binding\nDESCRIPTION: JSON request format for creating files through the SFTP binding, specifying the operation type, base64-encoded content, and filename.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/sftp.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"create\",\n  \"data\": \"<YOUR_BASE_64_CONTENT>\",\n  \"metadata\": {\n    \"fileName\": \"<filename>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dapr Components and App to Kubernetes\nDESCRIPTION: Bash commands to deploy Dapr components and the application (including ingress) to Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Deploy Dapr components\nkubectl apply -f eventgrid.yaml\n# Deploy your app and Nginx ingress\nkubectl apply -f dotnetwebapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Placement API Response Format\nDESCRIPTION: Example JSON response from the Placement API showing the structure of placement table data including host list, actor types, and table version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/placement_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hostList\": [{\n            \"name\": \"198.18.0.1:49347\",\n            \"namespace\": \"ns1\",\n            \"appId\": \"actor1\",\n            \"actorTypes\": [\"testActorType1\", \"testActorType3\"],\n            \"updatedAt\": 1690274322325260000\n        },\n        {\n            \"name\": \"198.18.0.2:49347\",\n            \"namespace\": \"ns2\",\n            \"appId\": \"actor2\",\n            \"actorTypes\": [\"testActorType2\"],\n            \"updatedAt\": 1690274322325260000\n        },\n        {\n            \"name\": \"198.18.0.3:49347\",\n            \"namespace\": \"ns2\",\n            \"appId\": \"actor2\",\n            \"actorTypes\": [\"testActorType2\"],\n            \"updatedAt\": 1690274322325260000\n        }\n    ],\n    \"tableVersion\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language in Hugo Config File\nDESCRIPTION: Example TOML configuration for adding a new language to the Hugo config file, specifying title, weight, content directory, and language name.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[languages.<language_code>]\n  title = \"Dapr Docs\"\n  weight = 3\n  contentDir = \"content/<language_code>\"\n  languageName = \"<language_name>\"\n```\n\n----------------------------------------\n\nTITLE: Python Environment Setup Commands\nDESCRIPTION: Terminal commands for setting up the Python development environment, including cloning the repository and installing dependencies.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\ncd ../state_management/python/sdk/order-processor\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Closing MySQL Binding Connection\nDESCRIPTION: JSON request for explicitly closing the MySQL binding connection and returning it to the connection pool.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/mysql.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"close\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Secure Binding on Linux\nDESCRIPTION: Curl command to invoke a secure Dapr binding on Linux. This command sends a GET operation to the specified binding using HTTPS.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{ \"operation\": \"get\" }' \\\n      https://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Dapr Documentation\nDESCRIPTION: HTML code for inserting and resizing images in Dapr documentation pages, with proper naming conventions and alt text.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/images/overview-dapr-overview.png\" width=1000 alt=\"Overview diagram of Dapr and its building blocks\">\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP Tracestate Header Format\nDESCRIPTION: Shows the format of the tracestate header used in HTTP requests to include parent information in a potentially vendor-specific format. This complements the traceparent header for more detailed tracing information.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/w3c-tracing-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntracestate: congo=t61rcWkgMzE\n```\n\n----------------------------------------\n\nTITLE: Placement State API Response Format - JSON\nDESCRIPTION: Example JSON response from the placement state API showing the structure of placement tables, including host list details and table version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/placement.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hostList\": [{\n            \"name\": \"198.18.0.1:49347\",\n            \"namespace\": \"ns1\",\n            \"appId\": \"actor1\",\n            \"actorTypes\": [\"testActorType1\", \"testActorType3\"],\n            \"updatedAt\": 1690274322325260000\n        },\n        {\n            \"name\": \"198.18.0.2:49347\",\n            \"namespace\": \"ns2\",\n            \"appId\": \"actor2\",\n            \"actorTypes\": [\"testActorType2\"],\n            \"updatedAt\": 1690274322325260000\n        },\n        {\n            \"name\": \"198.18.0.3:49347\",\n            \"namespace\": \"ns2\",\n            \"appId\": \"actor2\",\n            \"actorTypes\": [\"testActorType2\"],\n            \"updatedAt\": 1690274322325260000\n        }\n    ],\n    \"tableVersion\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the APP_API_TOKEN environment variable in self-hosted Dapr\nDESCRIPTION: This command sets the APP_API_TOKEN environment variable to authenticate requests between the Dapr sidecar and your application in a self-hosted environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/app-api-token.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport APP_API_TOKEN=<token>\n```\n\n----------------------------------------\n\nTITLE: Generating PDF of Heap Memory Profile\nDESCRIPTION: Command to create a PDF visualization of the heap memory profile from the Dapr profiling endpoint. This helps analyze memory usage patterns and identify potential memory leaks.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof --pdf your-binary-file http://localhost:7777/debug/pprof/heap > heap.pdf\n```\n\n----------------------------------------\n\nTITLE: Verifying Data in PostgreSQL\nDESCRIPTION: Commands to connect to the PostgreSQL database and query the inserted data to verify the binding operation was successful.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/bindings-quickstart.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd bindings/db\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t postgres psql --username postgres  -p 5432 -h localhost --no-password\n```\n\nLANGUAGE: bash\nCODE:\n```\n\\c orders;\n```\n\nLANGUAGE: bash\nCODE:\n```\nselect * from orders;\n```\n\nLANGUAGE: bash\nCODE:\n```\n orderid |  customer  | price\n---------+------------+--------\n       1 | John Smith | 100.32\n       2 | Jane Bond  |   15.4\n       3 | Tony James |  35.56\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Windows without Admin Rights\nDESCRIPTION: Installs the Dapr CLI to an alternate directory specified by DAPR_INSTALL_DIR when administrative rights are not available.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:DAPR_INSTALL_DIR = \"<your_alt_install_dir_path>\"\n$script=iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1; $block=[ScriptBlock]::Create($script); invoke-command -ScriptBlock $block -ArgumentList \"\", \"$Env:DAPR_INSTALL_DIR\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Custom Storage Class - CLI\nDESCRIPTION: Command to initialize Dapr with a specific storage class using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-persisting-scheduler.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --set dapr_scheduler.cluster.storageClassName=my-storage-class\n```\n\n----------------------------------------\n\nTITLE: Homepage Alert Banner HTML\nDESCRIPTION: Alert banner markup that introduces Dapr and provides a get started button\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{% alert title=\"What is Dapr?\" color=\"primary\" %}}\nDapr is a portable, event-driven runtime that makes it easy for any developer to build resilient, \nstateless and stateful applications that run on the cloud and edge and embraces the diversity of \nlanguages and developer frameworks. Leveraging the benefits of a sidecar architecture, Dapr helps \nyou tackle the challenges that come with building microservices and keeps your code platform agnostic. \n{{< button text=\"Get started\" page=\"getting-started\" >}}\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: Finding Kubernetes Pods with Dapr\nDESCRIPTION: Command to list all pods in a Kubernetes cluster. This helps identify the pod containing the Dapr runtime for profiling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Existing Dapr from Kubernetes\nDESCRIPTION: Command to uninstall the existing Dapr installation from the Kubernetes cluster before installing the debug version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall -k\n```\n\n----------------------------------------\n\nTITLE: Building Dapr Debug Binaries for Linux\nDESCRIPTION: Commands to clone the Dapr repository and build debug binaries for Linux. The DEBUG flag is set to 1 to disable compiler optimization.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-dapr-services.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/dapr.git\ncd dapr\nmake release GOOS=linux GOARCH=amd64 DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Navigating to Infrastructure Directory\nDESCRIPTION: Command to change directory to the infrastructure as code folder for Static Web Apps deployment\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd .github/iac/swa\n```\n\n----------------------------------------\n\nTITLE: Creating ResourceQuota for Dapr System Critical Pods\nDESCRIPTION: YAML configuration for creating a ResourceQuota in the dapr-system namespace. This quota allows the use of system-cluster-critical priority class for Dapr control plane pods, ensuring they are not evicted under resource pressure.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-production.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: dapr-system-critical-quota\n  namespace: dapr-system\nspec:\n  scopeSelector:\n    matchExpressions:\n      - operator : In\n        scopeName: PriorityClass\n        values: [system-cluster-critical]\n```\n\n----------------------------------------\n\nTITLE: Kubectl Context Verification\nDESCRIPTION: Command to verify the current kubectl context.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config current-context\n```\n\n----------------------------------------\n\nTITLE: Verifying Dapr Version in Bash\nDESCRIPTION: This command checks the installed version of Dapr, displaying both the CLI and Runtime versions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dapr --version\n\nCLI version: {{% dapr-latest-version short=\"true\" %}}\nRuntime version: {{% dapr-latest-version short=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Conversation Service\nDESCRIPTION: Shows the expected console output when the conversation service is running correctly. The output demonstrates the service receiving an input message and returning a response.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n== APP - conversation == Input sent: What is dapr?\n== APP - conversation == Output response: What is dapr?\n```\n\n----------------------------------------\n\nTITLE: Including HTML Partials for Dapr Component Documentation\nDESCRIPTION: Template code that includes HTML partial files for component descriptions and conversation-specific documentation using Hugo template syntax.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< partial \"components/description.html\" >}}\n\n{{< partial \"components/conversation.html\" >}}\n```\n\n----------------------------------------\n\nTITLE: Redis Delete Operation Request\nDESCRIPTION: JSON request format for deleting a record from Redis using the delete operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"key\": \"key1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting String with RSA Key in Go\nDESCRIPTION: Calls a function to encrypt and decrypt a string using an RSA key in Go.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nencryptDecryptString(client)\n```\n\n----------------------------------------\n\nTITLE: Restarting Dapr Sentry Service\nDESCRIPTION: Command to restart the Dapr Sentry service in Kubernetes, which will generate a new certificate bundle and update the dapr-trust-bundle Kubernetes secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/mtls.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart -n <DAPR_NAMESPACE> deployment/dapr-sentry\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Filename in Local Storage Binding JSON\nDESCRIPTION: JSON structure for specifying a custom filename when creating a file with the Local Storage binding. Shows how to use metadata to override the default UUID generation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/localstorage.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": \"file content\",\n    \"metadata\": {\n        \"fileName\": \"filename.txt\"\n    },\n    \"operation\": \"create\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting State Version/ETag in SQL Server\nDESCRIPTION: Retrieves the version/ETag (stored in RowVersion field) for a specific state key, which is used for optimistic concurrency control in Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [RowVersion] FROM states WHERE [Key] = 'myapp||balance'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Actor State in SQL Server\nDESCRIPTION: Gets a specific state value for an actor by using the complete key pattern including application ID, actor type, actor ID, and state key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE [Key] = 'mypets||cat||leroy||food'\n```\n\n----------------------------------------\n\nTITLE: Using Code-Snippet Shortcode in Hugo\nDESCRIPTION: Example of using the code-snippet shortcode to reference external code files from the static/code directory in Hugo.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* code-snippet file=\"myfile.py\" lang=\"python\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Invalid Error in Java\nDESCRIPTION: This Java code shows how to return an ETag Invalid error in a Dapr pluggable component using Project Reactor. It creates a Status object with an INVALID_ARGUMENT code and includes a BadRequest.FieldViolation detail.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal Status status = Status.newBuilder()\n    .setCode(io.grpc.Status.Code.INVALID_ARGUMENT.value())\n    .setMessage(\"fake-err-msg-for-invalid-etag\")\n    .addDetails(Any.pack(BadRequest.FieldViolation.newBuilder()\n        .setField(\"etag\")\n        .setDescription(\"The ETag field must only contain alphanumeric characters\")\n        .build()))\n    .build();\nreturn Mono.error(StatusProto.toStatusException(status));\n```\n\n----------------------------------------\n\nTITLE: Installing TLS Certificate in Dapr Sidecar (Docker Compose)\nDESCRIPTION: Example of how to mount a TLS certificate to a Dapr sidecar running in a Docker container. The certificate is mounted from the host system and the SSL_CERT_DIR environment variable is set to specify the certificate location.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  my-app:\n    # ...\n  dapr-sidecar:\n    image: \"daprio/daprd:1.8.0\"\n    command: [\n      \"./daprd\",\n     \"-app-id\", \"myapp\",\n     \"-app-port\", \"3000\",\n     ]\n    volumes:\n        - \"./components/:/components\"\n        - \"/tmp/ssl/:/certificates\" # Mount the certificates folder to the sidecar container at /certificates\n    environment:\n      - \"SSL_CERT_DIR=/certificates\" # Set the environment variable to the path of the certificates folder\n    depends_on:\n      - my-app\n```\n\n----------------------------------------\n\nTITLE: Running NATS Server with JetStream in Docker\nDESCRIPTION: Command to run a NATS server with JetStream enabled using Docker. This exposes the server on port 4222 which can be accessed via localhost.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-jetstream.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 4222:4222 nats:latest -js\n```\n\n----------------------------------------\n\nTITLE: Dapr External Tool Configuration with Prompts\nDESCRIPTION: XML configuration for setting up reusable Dapr external tools in IntelliJ with user prompts for ports and parameters.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<toolSet name=\"External Tools\">\n  ...\n  <!-- 1. Reusable entry for apps with app port. -->\n  <tool name=\"dapr with app-port\" description=\"Dapr sidecar\" showInMainMenu=\"false\" showInEditor=\"false\" showInProject=\"false\" showInSearchPopup=\"false\" disabled=\"false\" useConsole=\"true\" showConsoleOnStdOut=\"true\" showConsoleOnStdErr=\"true\" synchronizeAfterRun=\"true\">\n    <exec>\n      <!-- 2. For Linux or MacOS use: /usr/local/bin/dapr -->\n      <option name=\"COMMAND\" value=\"c:\\dapr\\dapr.exe\" />\n      <!-- 3. Prompts user 4 times (in order): app id, app port, Dapr's http port, Dapr's grpc port. -->\n      <option name=\"PARAMETERS\" value=\"run --app-id $Prompt$ --app-port $Prompt$ --dapr-http-port $Prompt$ --dapr-grpc-port $Prompt$\" />\n      <!-- 4. Use the folder where the `components` folder is located -->\n      <option name=\"WORKING_DIRECTORY\" value=\"$ProjectFileDir$\" />\n    </exec>\n  </tool>\n  <!-- 1. Reusable entry for apps without app port. -->\n  <tool name=\"dapr without app-port\" description=\"Dapr sidecar\" showInMainMenu=\"false\" showInEditor=\"false\" showInProject=\"false\" showInSearchPopup=\"false\" disabled=\"false\" useConsole=\"true\" showConsoleOnStdOut=\"true\" showConsoleOnStdErr=\"true\" synchronizeAfterRun=\"true\">\n    <exec>\n      <!-- 2. For Linux or MacOS use: /usr/local/bin/dapr -->\n      <option name=\"COMMAND\" value=\"c:\\dapr\\dapr.exe\" />\n      <!-- 3. Prompts user 3 times (in order): app id, Dapr's http port, Dapr's grpc port. -->\n      <option name=\"PARAMETERS\" value=\"run --app-id $Prompt$ --dapr-http-port $Prompt$ --dapr-grpc-port $Prompt$\" />\n      <!-- 4. Use the folder where the `components` folder is located -->\n      <option name=\"WORKING_DIRECTORY\" value=\"$ProjectFileDir$\" />\n    </exec>\n  </tool>\n  ...\n</toolSet>\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch in Bash\nDESCRIPTION: Commands for creating new branches based on release versions for configuration updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release_v1.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release_v1.1\n```\n\n----------------------------------------\n\nTITLE: Cloning Dapr Quickstarts Repository\nDESCRIPTION: Command to clone the Dapr Quickstarts repository containing the service invocation example code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Ingress Controller with Helm\nDESCRIPTION: Bash commands to add the NGINX ingress repo, update Helm, install the ingress controller with Dapr annotations, and retrieve its public IP.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/eventgrid.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nhelm install nginx-ingress ingress-nginx/ingress-nginx -f ./dapr-annotations.yaml -n default\n# Get the public IP for the ingress controller\nkubectl get svc -l component=controller -o jsonpath='Public IP is: {.items[0].status.loadBalancer.ingress[0].ip}{\"\\n\"}'\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Creating Object with Random UUID in Windows\nDESCRIPTION: This bash command demonstrates how to use curl to create an object in Alibaba Cloud OSS with a randomly generated UUID as the key on Windows.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudoss.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d \"{ \\\"operation\\\": \\\"create\\\", \\\"data\\\": \\\"Hello World\\\" }\" http://localhost:<dapr-port>/v1.0/bindings/<binding-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Mount in Hugo Config File\nDESCRIPTION: Example TOML configuration for mounting translation content in the Hugo module system, specifying source, target, and language.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[[module.mounts]]\n  source = \"../translations/docs-<language_code>/content/<language_code>\"\n  target = \"content\"\n  lang = \"<language_code>\"\n```\n\n----------------------------------------\n\nTITLE: Generating PDF from CPU Profile\nDESCRIPTION: Command to generate a PDF visualization of a CPU profile directly from the profiling endpoint. This creates a visual representation of CPU usage for easier analysis.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof --pdf your-binary-file http://localhost:7777/debug/pprof/profile?seconds=120 > profile.pdf\n```\n\n----------------------------------------\n\nTITLE: Mounting TLS Certificate to Dapr Sidecar in Kubernetes\nDESCRIPTION: Kubernetes deployment YAML that mounts a TLS certificate secret to the Dapr sidecar and sets the SSL_CERT_DIR environment variable. This configuration allows the sidecar to use the certificate for secure communications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: default\n  labels:\n    app: myapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"myapp\"\n        dapr.io/app-port: \"8000\"\n        dapr.io/volume-mounts: \"cert-vol:/certificates\" # Mount the certificates folder to the sidecar container at /certificates\n        dapr.io/env: \"SSL_CERT_DIR=/certificates\" # Set the environment variable to the path of the certificates folder\n    spec:\n      volumes:\n        - name: cert-vol\n          secret:\n            secretName: myapp-cert\n...\n```\n\n----------------------------------------\n\nTITLE: Multi-App Configuration in YAML\nDESCRIPTION: Dapr multi-app configuration file defining the job service and scheduler applications with their respective ports and protocols\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napps:\n  - appDirPath: ./job-service/\n    appID: job-service\n    appPort: 6200\n    daprGRPCPort: 6281\n    appProtocol: grpc\n    command: [\"go\", \"run\", \".\"]\n  - appDirPath: ./job-scheduler/\n    appID: job-scheduler\n    appPort: 6300\n    command: [\"go\", \"run\", \".\"]\n```\n\n----------------------------------------\n\nTITLE: Restoring and building .NET dependencies\nDESCRIPTION: Commands to restore NuGet packages and build the checkout service application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zsh Completion Autoload\nDESCRIPTION: Commands to set up Dapr completion autoload for zsh.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion zsh > \"${fpath[1]}/_dapr\"\\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Using Dapr CLI Help Command\nDESCRIPTION: Shows how to use the Dapr CLI help command to get information about other commands. The command accepts an optional command name parameter and supports the --help/-h flag for additional assistance.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-help.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr help [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Desktop VM Filesystem\nDESCRIPTION: Command to access the Docker Desktop VM's filesystem where the scheduler volume is located when using Docker Desktop.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-persisting-scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Dapr Quickstarts Repository\nDESCRIPTION: Clone the Dapr quickstarts repository to access the actors sample code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/actors-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Sample Output for PFX Certificate Generation\nDESCRIPTION: JSON output example showing the application ID, file path for the certificate, and tenant ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": \"<your-app-id>\",\n  \"fileWithCertAndPrivateKey\": \"<file-path>\",\n  \"password\": null,\n  \"tenant\": \"<your-azure-tenant>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Returning ETag Mismatch Error in .NET\nDESCRIPTION: This C# code demonstrates how to return an ETag Mismatch error in a Dapr pluggable component. It uses the Google.Api.CommonProtos NuGet package to create a BadRequest error with a FailedPrecondition status code.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/develop-pluggable.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar badRequest = new BadRequest();\nvar des = \"The ETag field provided does not match the one in the store\";\nbadRequest.FieldViolations.Add(    \n   new Google.Rpc.BadRequest.Types.FieldViolation\n       {        \n         Field = \"etag\",\n         Description = des\n       });\n\nvar baseStatusCode = Grpc.Core.StatusCode.FailedPrecondition;\nvar status = new Google.Rpc.Status{    \n   Code = (int)baseStatusCode\n};\n\nstatus.Details.Add(Google.Protobuf.WellKnownTypes.Any.Pack(badRequest));\n\nvar metadata = new Metadata();\nmetadata.Add(\"grpc-status-details-bin\", status.ToByteArray());\nthrow new RpcException(new Grpc.Core.Status(baseStatusCode, \"fake-err-msg\"), metadata);\n```\n\n----------------------------------------\n\nTITLE: Configuring Infinite Retry Policy in YAML\nDESCRIPTION: YAML configuration for a constant retry policy named 'retryForever' that will retry indefinitely at 5-second intervals. The -1 value for maxRetries indicates infinite retries.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nretryForever:\n  policy: constant\n  maxInterval: 5s\n  maxRetries: -1 \n```\n\n----------------------------------------\n\nTITLE: IntelliJ Config Path for MacOS\nDESCRIPTION: MacOS path location for IntelliJ configuration files in version 2020.1 and above.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n~/Library/Application\\ Support/JetBrains/IntelliJIdea2020.1/tools/\n```\n\n----------------------------------------\n\nTITLE: Dapr Configuration Reference Table in Markdown\nDESCRIPTION: A markdown table comparing configuration parameters across Dapr runtime environments, including daprd arguments, CLI options, and Kubernetes annotations along with their descriptions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/arguments-annotations-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| daprd | Dapr CLI | CLI shorthand | Kubernetes annotations | Description|\n|----- | ------- | -----------| ----------| ------------ |\n| `--allowed-origins`  | not supported |  | not supported | Allowed HTTP origins (default \"*\") |\n| `--app-id` | `--app-id` | `-i` | `dapr.io/app-id`  | The unique ID of the application. Used for service discovery, state encapsulation and the pub/sub consumer ID |\n```\n\n----------------------------------------\n\nTITLE: Creating a database in Azure Data Explorer cluster\nDESCRIPTION: Azure CLI command for creating a database within the ADX cluster. This creates the database where Dapr logs will be stored.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz kusto database create --cluster-name adxDaprCluster --database-name daprdb --resource-group my-resource-group --read-write-database soft-delete-period=P365D hot-cache-period=P31D location=southcentralus\n```\n\n----------------------------------------\n\nTITLE: Checking Azure Monitor Agents Status in Kubernetes\nDESCRIPTION: Command to verify that Azure Monitor Agents (AMA) are running in the Kubernetes cluster by listing pods in the kube-system namespace.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/azure-monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods -n kube-system\nNAME                                                  READY   STATUS    RESTARTS   AGE\n...\nama-logs-48kpv                                        2/2     Running   0          2d13h\nama-logs-mx24c                                        2/2     Running   0          2d13h\nama-logs-rs-f9bbb9898-vbt6k                           1/1     Running   0          30h\nama-logs-sm2mz                                        2/2     Running   0          2d13h\nama-logs-z7p4c                                        2/2     Running   0          2d13h\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect External State Interaction in Workflows\nDESCRIPTION: Examples of incorrect direct interaction with external state in workflows across different languages. These practices should be avoided as they violate workflow best practices.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-features-concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// DON'T DO THIS!\nstring configuration = Environment.GetEnvironmentVariable(\"MY_CONFIGURATION\")!;\nstring data = await new HttpClient().GetStringAsync(\"https://example.com/api/data\");\n```\n\nLANGUAGE: java\nCODE:\n```\n// DON'T DO THIS!\nString configuration = System.getenv(\"MY_CONFIGURATION\");\n\nHttpRequest request = HttpRequest.newBuilder().uri(new URI(\"https://postman-echo.com/post\")).GET().build();\nHttpResponse<String> response = HttpClient.newBuilder().build().send(request, HttpResponse.BodyHandlers.ofString());\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// DON'T DO THIS!\n// Accessing an Environment Variable (Node.js)\nconst configuration = process.env.MY_CONFIGURATION;\n\nfetch('https://postman-echo.com/get')\n  .then(response => response.text())\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n```\n\nLANGUAGE: go\nCODE:\n```\n// DON'T DO THIS!\nresp, err := http.Get(\"http://example.com/api/data\")\n```\n\n----------------------------------------\n\nTITLE: Renewing Certificates with Service Restart\nDESCRIPTION: Generates new certificates and restarts Dapr control plane services.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-renew-certificate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls renew-certificate -k --restart\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment with Dapr Tracing\nDESCRIPTION: Kubernetes deployment YAML snippet showing how to annotate a container to enable Dapr with the tracing configuration. The 'dapr.io/config: \"appconfig\"' annotation references the tracing configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-appinsights.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      ...\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"MyApp\"\n        dapr.io/app-port: \"8080\"\n        dapr.io/config: \"appconfig\"\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace Environment Variable\nDESCRIPTION: Commands to set the NAMESPACE environment variable for Dapr in different operating systems.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/component-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=production\n# run Dapr as usual\n```\n\nLANGUAGE: powershell\nCODE:\n```\nsetx NAMESPACE \"production\"\n# run Dapr as usual\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Demo with HTML iframes\nDESCRIPTION: HTML markup for embedding two identical YouTube video demonstrations of Dapr's gRPC proxying feature, with responsive container setup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"embed-responsive embed-responsive-16by9\">\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/B_vkXqptpXY?start=69\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/B_vkXqptpXY?start=69\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Encrypted Output\nDESCRIPTION: Sample output returned from an encryption request, showing the encrypted payload as a base64-encoded string of bytes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/cryptography_api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngAAAAABhZfZ0Ywz4dQX8y9J0Zl5v7w6Z7xq4jV3cW9o2l4pQ0YD1LdR0Zk7zIYi4n2Ll7t6f0Z4X7r8x9o6a8GyL0X1m9Q0Z0A==\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Linux without sudo\nDESCRIPTION: Installs the Dapr CLI to an alternate directory specified by DAPR_INSTALL_DIR when sudo access is not available.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | DAPR_INSTALL_DIR=\"$HOME/dapr\" /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Server with Docker\nDESCRIPTION: Command to start a RabbitMQ server locally using Docker container.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3\n```\n\n----------------------------------------\n\nTITLE: Executing Zeebe Topology Operation in JSON\nDESCRIPTION: JSON payload for performing a 'topology' operation with the Zeebe command binding. This operation retrieves the current topology of the Zeebe cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {},\n  \"operation\": \"topology\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying SDK Language Support Table in Markdown\nDESCRIPTION: A markdown table showing the supported languages for Dapr SDKs, including their status and available components (client, server extensions, actor, and workflow).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/sdks/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Status | Client | Server extensions | Actor | Workflow |\n|----------|:------|:----------:|:-----------:|:---------:|:---------:|\n| [.NET]({{< ref dotnet >}}) | Stable | ✔ |  [ASP.NET Core](https://github.com/dapr/dotnet-sdk/tree/master/examples/AspNetCore) | ✔ | ✔ |\n| [Python]({{< ref python >}}) | Stable | ✔ | [gRPC]({{< ref python-grpc.md >}}) <br />[FastAPI]({{< ref python-fastapi.md >}})<br />[Flask]({{< ref python-flask.md >}})| ✔ | ✔ |\n| [Java]({{< ref java >}}) | Stable | ✔ | Spring Boot  <br /> Quarkus| ✔ | ✔ |\n| [Go]({{< ref go >}}) | Stable | ✔ | ✔ | ✔ | ✔ |\n| [PHP]({{< ref php >}}) | Stable | ✔ | ✔ | ✔ | |\n| [JavaScript]({{< ref js >}}) | Stable| ✔ | | ✔ | ✔  |\n| [C++](https://github.com/dapr/cpp-sdk) | In development | ✔ | | |\n| [Rust]({{< ref rust >}}) | In development | ✔ | | ✔ | |\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr Environment with Podman\nDESCRIPTION: This command completely uninstalls Dapr, removing all components and configurations associated with the Podman container runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-with-podman.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall --container-runtime podman --all\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster with gcloud CLI\nDESCRIPTION: Commands to enable container API and create a new GKE cluster using Google Cloud SDK. Requires PROJECT_ID, CLUSTER_NAME, and ZONE environment variables to be set.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-gke.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable container.googleapis.com && \\\n  gcloud container clusters create $CLUSTER_NAME \\\n  --zone $ZONE \\\n  --project $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Fixing Kubernetes Dashboard Permissions\nDESCRIPTION: Command to create a cluster role binding that resolves permission issues with the Kubernetes dashboard by granting admin access to the dashboard service account.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-gke.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding kubernetes-dashboard -n kube-system --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Deployments and Dapr\nDESCRIPTION: These commands remove the Windows and Linux application deployments and uninstall the Dapr Helm chart from the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-hybrid-clusters.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f deploy_linux.yaml\nkubectl delete -f deploy_windows.yaml\nhelm uninstall dapr\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Runtime on Windows\nDESCRIPTION: Command to initialize Dapr runtime binaries on Windows systems.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr init\n```\n\n----------------------------------------\n\nTITLE: Navigating to Service Invocation Example Directory\nDESCRIPTION: Command to change directory to the service invocation example folder for Java or Go.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd service_invocation/java/http\n```\n\n----------------------------------------\n\nTITLE: Building Go Application\nDESCRIPTION: Command to build the Go application\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Example of an HTTP Error Response in JSON Format\nDESCRIPTION: Shows how Dapr translates the gRPC error model to a similar structure in JSON format for HTTP clients, including errorCode, message, and details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/grpc-error-codes.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errorCode\": \"ERR_MALFORMED_REQUEST\",\n    \"message\": \"api error: code = InvalidArgument desc = input key/keyPrefix 'bad||keyname' can't contain '||'\",\n    \"details\": [\n        {\n            \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n            \"domain\": \"dapr.io\",\n            \"metadata\": null,\n            \"reason\": \"DAPR_STATE_ILLEGAL_KEY\"\n        },\n        {\n            \"@type\": \"type.googleapis.com/google.rpc.ResourceInfo\",\n            \"description\": \"\",\n            \"owner\": \"\",\n            \"resource_name\": \"statestore\",\n            \"resource_type\": \"state\"\n        },\n        {\n            \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\n            \"field_violations\": [\n                {\n                    \"field\": \"bad||keyname\",\n                    \"description\": \"api error: code = InvalidArgument desc = input key/keyPrefix 'bad||keyname' can't contain '||'\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zsh Completion Autoload on Linux\nDESCRIPTION: Command to set up Dapr completion autoload for zsh on Linux.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion zsh > \"${fpath[1]}/_dapr\"\n```\n\n----------------------------------------\n\nTITLE: Installing Space Grotesk Font on MacOS\nDESCRIPTION: Command to install the Space Grotesk font on MacOS using Homebrew, which is required for proper text rendering when using the Dapr presentation template.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/presentations.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask font-space-grotesk\n```\n\n----------------------------------------\n\nTITLE: Stopping Service in MacOS Terminal\nDESCRIPTION: Command to stop a running service in MacOS terminal using keyboard shortcut.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: script\nCODE:\n```\nCMD + C\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Cluster Users\nDESCRIPTION: Command to list all users in a Kubernetes cluster for reference when creating role bindings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config get-users\n```\n\n----------------------------------------\n\nTITLE: Basic Version Command Usage - Dapr CLI\nDESCRIPTION: Shows the basic syntax for using the version command in Dapr CLI. The command supports flags for help and output format options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr version [flags]\n```\n\n----------------------------------------\n\nTITLE: Cloning Dapr Quickstarts Repository\nDESCRIPTION: Command to clone the Dapr quickstarts repository containing workflow samples\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Saving State with Dapr HTTP API (name strategy)\nDESCRIPTION: This curl command illustrates saving state using the Dapr HTTP API with the 'name' strategy. The key will be saved as 'redis||darth'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-share-state.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/redis \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"darth\",\n          \"value\": \"nihilus\"\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Process Instance Creation Response in Zeebe\nDESCRIPTION: Response structure returned after creating a process instance, including process definition details and instance key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"processDefinitionKey\": 2251799813685895,\n  \"bpmnProcessId\": \"products-process\",\n  \"version\": 3,\n  \"processInstanceKey\": 2251799813687851,\n  \"variables\": \"{\\\"productId\\\":\\\"some-product-id\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Updates in Dapr using HTTP API (PowerShell)\nDESCRIPTION: This snippet demonstrates how to unsubscribe from configuration updates using the Dapr HTTP API with PowerShell. It uses Invoke-RestMethod to make a request to the unsubscribe endpoint with the store name and subscription ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Uri 'http://localhost:<DAPR_HTTP_PORT>/v1.0/configuration/configstore/<subscription-id>/unsubscribe'\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Reminder with TTL\nDESCRIPTION: Example of how to create a reminder with a period and TTL. This reminder fires immediately, repeats every 3 seconds, and expires after 20 seconds.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"period\":\"PT3S\",\n  \"ttl\":\"20s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Microsoft Entra ID Access to Azure Cosmos DB\nDESCRIPTION: Shell script for assigning the \"Cosmos DB Built-in Data Contributor\" role to a Service Principal. This enables Microsoft Entra ID authentication for the Dapr Cosmos DB state store component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Name of the Resource Group that contains your Cosmos DB\nRESOURCE_GROUP=\"...\"\n# Name of your Cosmos DB account\nACCOUNT_NAME=\"...\"\n# ID of your Service Principal object\nPRINCIPAL_ID=\"...\"\n# ID of the \"Cosmos DB Built-in Data Contributor\" role\n# You can also use the ID of a custom role\nROLE_ID=\"00000000-0000-0000-0000-000000000002\"\n\naz cosmosdb sql role assignment create \\\n  --account-name \"$ACCOUNT_NAME\" \\\n  --resource-group \"$RESOURCE_GROUP\" \\\n  --scope \"/\" \\\n  --principal-id \"$PRINCIPAL_ID\" \\\n  --role-definition-id \"$ROLE_ID\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Quickstart Repository\nDESCRIPTION: Command to clone the Dapr quickstarts repository containing state management samples.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Client Secret Generation\nDESCRIPTION: JSON output example showing the application ID, password (client secret), and tenant ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": \"<your-app-id>\",\n  \"password\": \"<your-password>\",\n  \"tenant\": \"<your-azure-tenant>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Actor Reminder Migration in Dapr Logs\nDESCRIPTION: Log entries that confirm successful migration of actor reminders from state store to the scheduler service. These logs appear when upgrading to Dapr v1.15 with the SchedulerReminders feature enabled.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRunning actor reminder migration from state store to scheduler\n```\n\nLANGUAGE: shell\nCODE:\n```\nMigrated X reminders from state store to scheduler successfully\n```\n\nLANGUAGE: shell\nCODE:\n```\nSkipping migration, no missing scheduler reminders found\n```\n\n----------------------------------------\n\nTITLE: Applying Collector Configuration\nDESCRIPTION: Shell command to apply the collector configuration for tracing setup.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f ./deploy/collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Kubernetes Namespace for Dapr\nDESCRIPTION: Commands to create a Kubernetes namespace named 'namespaceA' and set it as the current context for deploying Dapr applications with namespace isolation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/isolation-concept.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace namespaceA\nkubectl config set-context --current --namespace=namespaceA\n```\n\n----------------------------------------\n\nTITLE: Loading Dapr Completion in Linux Zsh\nDESCRIPTION: Command to load Dapr completion directly into the current zsh shell on Linux.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsource <(dapr completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Scheduler etcd in Kubernetes\nDESCRIPTION: Command to port forward the Dapr scheduler service's embedded etcd instance in Kubernetes to perform backup and restore operations. This exposes port 2379 for etcd client communications.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/dapr-scheduler-server 2379:2379 -n dapr-system\n```\n\n----------------------------------------\n\nTITLE: Building .NET Project Dependencies\nDESCRIPTION: Commands to restore NuGet packages and build the .NET project\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Building the Go Application\nDESCRIPTION: Compiles the Go application and resolves its dependencies. This step ensures all required libraries are available before running the application.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/conversation-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Runtime in Bash\nDESCRIPTION: This command initializes the Dapr runtime after installing the latest CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr init\n```\n\n----------------------------------------\n\nTITLE: Example Actor Payload in JSON\nDESCRIPTION: Sample JSON payload used in the performance testing of Dapr actors. This represents the minimal payload used during the benchmark tests.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/performance-and-scalability/perf-actors-activation.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Stopping all Dapr applications\nDESCRIPTION: Command to stop all applications that were started with the Multi-App Run feature.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/serviceinvocation-quickstart.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndapr stop -f .\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Running Solace Broker\nDESCRIPTION: Command to run a local Solace broker instance using Docker with exposed ports and configuration settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-solace-amqp.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 -p 55554:55555 -p 8008:8008 -p 1883:1883 -p 8000:8000 -p 5672:5672 -p 9000:9000 -p 2222:2222 --shm-size=2g --env username_admin_globalaccesslevel=admin --env username_admin_password=admin --name=solace solace/solace-pubsub-standard\n```\n\n----------------------------------------\n\nTITLE: Installing Zsh Completion on macOS\nDESCRIPTION: Command to install zsh completions package on macOS using Homebrew.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install zsh-completions\n```\n\n----------------------------------------\n\nTITLE: Signing git commits with DCO\nDESCRIPTION: These commands demonstrate how to sign git commits with the Developer Certificate of Origin (DCO) certification, which is required for all contributions to the Dapr project. The example shows both the manual signing format and the automated approach using the -s flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/contributing-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -s -m 'This is my commit message'\n```\n\n----------------------------------------\n\nTITLE: Dapr Documentation Page Metadata in YAML\nDESCRIPTION: YAML frontmatter metadata for a documentation page about retry and back-off resiliency policies in Dapr. Defines the page type, title, navigation link text, weight for ordering, and description.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/policies/retries/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: docs\ntitle: \"Retry and back-off resiliency policies\"\nlinkTitle: \"Retries\"\nweight: 20\ndescription: \"Configure resiliency policies for retries and back-offs\"\n```\n\n----------------------------------------\n\nTITLE: Using the dapr mtls expiry command in bash\nDESCRIPTION: Command syntax for checking the expiry of root Certificate Authority (CA) certificates in Dapr. This command is used to determine when the root CA certificate will expire in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-expiry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls expiry [flags]\n```\n\n----------------------------------------\n\nTITLE: Dapr Resiliency Retry Log Output\nDESCRIPTION: Log output showing Dapr's retry mechanism in action after a service failure. This indicates the system is attempting to recover from the failure.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nINFO[0005] Error processing operation endpoint[order-processor, order-processor:orders]. Retrying...  \n```\n\n----------------------------------------\n\nTITLE: Throwing an Error with Zeebe Command Binding in JSON\nDESCRIPTION: This snippet illustrates how to throw a business error for a job using the Zeebe command binding. It includes parameters for job key, error code, error message, and variables to be set.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"jobKey\": 2251799813686172,\n    \"errorCode\": \"product-fetch-error\",\n    \"errorMessage\": \"The product could not be fetched\",\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    }\n  },\n  \"operation\": \"throw-error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Get Operation Response\nDESCRIPTION: JSON response format when retrieving a record from Redis using the get operation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/redis.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"Hello\": \"World\",\n    \"Lorem\": \"Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Subscription Component in Kubernetes\nDESCRIPTION: Kubernetes command to apply the subscription YAML configuration to the cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f subscription.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on Windows\nDESCRIPTION: Installs a specific version of the Dapr CLI on Windows, allowing for installation of release candidates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -Command \"$script=iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1; $block=[ScriptBlock]::Create($script); invoke-command -ScriptBlock $block -ArgumentList {{% dapr-latest-version cli=\\\"true\\\" %}}\"\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Get Embedding API Request\nDESCRIPTION: JSON request structure for getting embeddings from text input.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/openai.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operation\": \"get-embedding\",\n    \"data\": {\n        \"deploymentId\": \"my-model\",\n        \"message\": \"The capital of France is Paris.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Configurations Command\nDESCRIPTION: Basic usage syntax for the dapr configurations command with flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-configurations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr configurations [flags]\n```\n\n----------------------------------------\n\nTITLE: SDK Documentation Update Commands\nDESCRIPTION: Series of commands to update SDK documentation by pulling latest changes from SDK repositories\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd sdkdocs/go\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Using Code-Snippet with Replace Parameters\nDESCRIPTION: Example of using the code-snippet shortcode with replace parameters to abbreviate portions of code without showing the full implementation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* code-snippet file=\"./contributing-2.py\" lang=\"python\" replace-key-imports=\"#IMPORTS\" replace-value-imports=\"# Import statements\"  */>}}\n```\n\n----------------------------------------\n\nTITLE: Stopping Service in Windows Terminal\nDESCRIPTION: Command to stop a running service in Windows terminal using keyboard shortcut.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: script\nCODE:\n```\nCTRL + C\n```\n\n----------------------------------------\n\nTITLE: Basic Dapr Completion Command Usage\nDESCRIPTION: Basic syntax for using the Dapr completion command with optional flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion [flags]\\ndapr completion [command]\n```\n\n----------------------------------------\n\nTITLE: Dapr Alert Block Example\nDESCRIPTION: Example of a Dapr documentation alert block recommending memory capacity settings for components that return data to the app.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/components-concept.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{% alert title=\"Note\" color=\"primary\" %}} \nFor any component that returns data to the app, it is recommended to set the memory capacity of the Dapr sidecar accordingly (process or container) to avoid potential OOM panics. For example in Docker use the `--memory` option. For Kubernetes, use the `dapr.io/sidecar-memory-limit` annotation. For processes this depends on the OS and/or process orchestration tools.*\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: IntelliJ Config Path for Linux\nDESCRIPTION: Linux path location for IntelliJ configuration files in version 2020.1 and above.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/intellij.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/.config/JetBrains/IntelliJIdea2020.1/tools/\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI using GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use the Dapr tool installer action in a GitHub Actions workflow. It installs the Dapr CLI, allowing for Dapr management commands in the workflow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/github_actions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Dapr tool installer\n  uses: dapr/setup-dapr@v1\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Monitoring Namespace\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for monitoring tools\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/logging/fluentd.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: Displaying Dapr CLI Help Output in Markdown\nDESCRIPTION: This snippet shows the expected output when running the Dapr help command. It includes the Dapr ASCII art logo, usage instructions, available commands, and global flags. This output confirms that the Dapr CLI is properly installed and provides an overview of its functionality.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_17\n\nLANGUAGE: md\nCODE:\n```\n         __\n    ____/ /___ _____  _____\n   / __  / __ '/ __ \\/ ___/\n  / /_/ / /_/ / /_/ / /\n  \\__,_/\\__,_/ .___/_/\n              /_/\n\n===============================\nDistributed Application Runtime\n\nUsage:\n  dapr [command]\n\nAvailable Commands:\n  completion     Generates shell completion scripts\n  components     List all Dapr components. Supported platforms: Kubernetes\n  configurations List all Dapr configurations. Supported platforms: Kubernetes\n  dashboard      Start Dapr dashboard. Supported platforms: Kubernetes and self-hosted\n  help           Help about any command\n  init           Install Dapr on supported hosting platforms. Supported platforms: Kubernetes and self-hosted\n  invoke         Invoke a method on a given Dapr application. Supported platforms: Self-hosted\n  list           List all Dapr instances. Supported platforms: Kubernetes and self-hosted\n  logs           Get Dapr sidecar logs for an application. Supported platforms: Kubernetes\n  mtls           Check if mTLS is enabled. Supported platforms: Kubernetes\n  publish        Publish a pub-sub event. Supported platforms: Self-hosted\n  run            Run Dapr and (optionally) your application side by side. Supported platforms: Self-hosted\n  status         Show the health status of Dapr services. Supported platforms: Kubernetes\n  stop           Stop Dapr instances and their associated apps. . Supported platforms: Self-hosted\n  uninstall      Uninstall Dapr runtime. Supported platforms: Kubernetes and self-hosted\n  upgrade        Upgrades a Dapr control plane installation in a cluster. Supported platforms: Kubernetes\n  version        Print the Dapr runtime and CLI version\n\nFlags:\n  -h, --help      help for dapr\n  -v, --version   version for dapr\n\nUse \"dapr [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Example of using dapr mtls expiry command in Kubernetes\nDESCRIPTION: Example showing how to check the expiry of Certificate Authority certificates in a Kubernetes environment using the Dapr CLI.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/dapr-mtls-expiry.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Check expiry of Kubernetes certs\ndapr mtls expiry\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with No Authentication\nDESCRIPTION: YAML configuration for Kafka pubsub component with authentication disabled. Includes basic broker connection settings and optional parameters like consumer group and client ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: kafka-pubsub-noauth\nspec:\n  type: pubsub.kafka\n  version: v1\n  metadata:\n  - name: brokers\n    value: \"dapr-kafka.myapp.svc.cluster.local:9092\"\n  - name: consumerGroup\n    value: \"group1\"\n  - name: clientID\n    value: \"my-dapr-app-id\"\n  - name: authType\n    value: \"none\"\n  - name: maxMessageBytes\n    value: 1024\n  - name: consumeRetryInterval\n    value: 200ms\n  - name: heartbeatInterval\n    value: 5s\n  - name: sessionTimeout\n    value: 15s\n  - name: version\n    value: 0.10.2.0\n  - name: disableTls\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default API Logging Behavior\nDESCRIPTION: Dapr Configuration spec to enable API logging by default for all Dapr runtimes referencing this configuration. This sets the default behavior for API logging across multiple Dapr instances.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/api-logs-troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  apiLogging:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Client in Rust\nDESCRIPTION: Rust implementation of the Dapr conversation client using the Rust SDK with async/await pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse dapr::client::{ConversationInputBuilder, ConversationRequestBuilder};\nuse std::thread;\nuse std::time::Duration;\n\ntype DaprClient = dapr::Client<dapr::client::TonicClient>;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Sleep to allow for the server to become available\n    thread::sleep(Duration::from_secs(5));\n\n    // Set the Dapr address\n    let address = \"https://127.0.0.1\".to_string();\n\n    let mut client = DaprClient::connect(address).await?;\n\n    let input = ConversationInputBuilder::new(\"Please write a witty haiku about the Dapr distributed programming framework at dapr.io\").build();\n\n    let conversation_component = \"echo\";\n\n    let request =\n        ConversationRequestBuilder::new(conversation_component, vec![input.clone()]).build();\n\n    println!(\"conversation input: {:?}\", input.content);\n\n    let response = client.converse_alpha1(request).await?;\n\n    println!(\"conversation output: {:?}\", response.outputs[0].result);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Zeebe Deploy-Resource Operation (DMN) in JSON\nDESCRIPTION: Example JSON response from a Zeebe 'deploy-resource' operation for a DMN decision, showing deployment key and decision metadata.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": 2251799813685253,\n  \"deployments\": [\n    {\n      \"Metadata\": {\n        \"Decision\": {\n          \"dmnDecisionId\": \"products-approval\",\n          \"dmnDecisionName\": \"Products approval\",\n          \"version\": 1,\n          \"decisionKey\": 2251799813685252,\n          \"dmnDecisionRequirementsId\": \"Definitions_0c98xne\",\n          \"decisionRequirementsKey\": 2251799813685251\n        }\n      }\n    },\n    {\n      \"Metadata\": {\n        \"DecisionRequirements\": {\n          \"dmnDecisionRequirementsId\": \"Definitions_0c98xne\",\n          \"dmnDecisionRequirementsName\": \"DRD\",\n          \"version\": 1,\n          \"decisionRequirementsKey\": 2251799813685251,\n          \"resourceName\": \"products-approval.dmn\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Binding Component in Kubernetes\nDESCRIPTION: Kubectl command for deploying a binding component configuration file in a Kubernetes environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-bindings.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f mybinding.yaml\n```\n\n----------------------------------------\n\nTITLE: Dapr Root Certificate Warning Message\nDESCRIPTION: Example of warning message displayed when the mtls root certificate is approaching expiration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-configurations.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDapr root certificate of your Kubernetes cluster expires in <n> days. Expiry date: <date:time> UTC. \nPlease see docs.dapr.io for certificate renewal instructions to avoid service interruptions.\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr with Helm Command Line Parameters\nDESCRIPTION: Command to install or upgrade Dapr using Helm with command line parameters instead of a values.yaml file. This example shows how to set the hostNetwork parameter to true using the --set flag.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--namespace dapr-system \\\n--create-namespace \\\n--set dapr_sidecar_injector.hostNetwork=true\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dapr in Self-Hosted Mode\nDESCRIPTION: Example of uninstalling Dapr in self-hosted mode. This command removes Dapr from the local environment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndapr uninstall\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Content with Hugo Shortcodes\nDESCRIPTION: Example of using Hugo shortcodes to create tabbed content in Dapr documentation pages.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{< tabs [Tab1] [Tab2]>}}\n\n{{% codetab %}}\n[Content for Tab1]\n{{% /codetab %}}\n\n{{% codetab %}}\n[Content for Tab2]\n{{% /codetab %}}\n\n{{< /tabs >}}\n```\n\n----------------------------------------\n\nTITLE: S3 List Objects Response Format\nDESCRIPTION: JSON response format returned when listing objects in an S3 bucket. It includes details like common prefixes, contents with object metadata, pagination information, and bucket details.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/s3.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"CommonPrefixes\": null,\n\t\"Contents\": [\n\t\t{\n\t\t\t\"ETag\": \"\\\"7e94cc9b0f5226557b05a7c2565dd09f\\\"\",\n\t\t\t\"Key\": \"hpNdFUxruNuwm\",\n\t\t\t\"LastModified\": \"2021-08-16T06:44:14Z\",\n\t\t\t\"Owner\": {\n\t\t\t\t\"DisplayName\": \"owner name\",\n\t\t\t\t\"ID\": \"owner id\"\n\t\t\t},\n\t\t\t\"Size\": 6916,\n\t\t\t\"StorageClass\": \"STANDARD\"\n\t\t}\n\t],\n\t\"Delimiter\": \"\",\n\t\"EncodingType\": null,\n\t\"IsTruncated\": true,\n\t\"Marker\": \"hvlcCQFSOD5TD\",\n\t\"MaxKeys\": 1,\n\t\"Name\": \"mybucketdapr\",\n\t\"NextMarker\": \"hzaUPWjmvyi9W\",\n\t\"Prefix\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Profile on Windows\nDESCRIPTION: Command to create PowerShell profile if it doesn't exist.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nif (!(Test-Path -Path $PROFILE )){ New-Item -Type File -Path $PROFILE -Force }\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for Dapr Documentation\nDESCRIPTION: Markdown links directing users to Dapr's contribution guidelines and bot commands documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing to Dapr docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Password in Dapr Component YAML\nDESCRIPTION: Example of setting the Redis password in the Dapr component configuration file.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: redisPassword\n      value: \"lhDOkwTlp0\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Other Pages with Hugo Shortcodes\nDESCRIPTION: Examples of using Hugo ref and relref shortcodes to link to other pages and sections within the Dapr documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< ref \"folder\" >}}\n\n{{< ref \"page.md\" >}}\n\n{{< ref \"contributing-docs.md#referencing-sections-in-other-pages\" >}}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Getting Actor Reminder\nDESCRIPTION: Example JSON response returned when retrieving an actor's reminder. This shows the timing parameters and data for the reminder.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dueTime\": \"1s\",\n  \"period\": \"5s\",\n  \"data\": \"0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr with Helm Using values.yaml for EKS with Overlay Networks\nDESCRIPTION: Commands to install or upgrade Dapr using Helm with a custom values.yaml file. This example shows how to set the hostNetwork parameter to true, which is necessary for Amazon EKS with overlay networks like Calico.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install dapr dapr/dapr \\\n--namespace dapr-system \\\n--create-namespace \\\n--values values.yaml\n```\n\n----------------------------------------\n\nTITLE: Bash Commands for Environment Setup\nDESCRIPTION: Commands for cloning the quickstart repository and navigating to the jobs directory\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/jobs-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dapr/quickstarts.git\ncd jobs/go/sdk\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Configuration Changes with cURL in Dapr\nDESCRIPTION: Shell command using cURL to unsubscribe from configuration changes using a specific subscription ID in a Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET 'http://localhost:3500/v1.0-alpha1/configuration/mystore/bf3aa454-312d-403c-af95-6dec65058fa2/unsubscribe'\n```\n\n----------------------------------------\n\nTITLE: Root Certificate Warning Message\nDESCRIPTION: Shows the warning message format displayed when the Kubernetes cluster's mtls root certificate is approaching expiration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-components.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDapr root certificate of your Kubernetes cluster expires in <n> days. Expiry date: <date:time> UTC. \nPlease see docs.dapr.io for certificate renewal instructions to avoid service interruptions.\n```\n\n----------------------------------------\n\nTITLE: Creating External Link Button in Hugo\nDESCRIPTION: Example of using the button shortcode to create a button that links to an external URL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* button text=\"My Button\" link=\"https://example.com\" */>}}\n```\n\n----------------------------------------\n\nTITLE: FastAPI Kafka Message Consumer with Headers\nDESCRIPTION: Python FastAPI implementation for subscribing to Kafka topics and handling messages with headers\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-apache-kafka.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, Body, Response, status\nimport json\nimport sys\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\n@router.get('/dapr/subscribe')\ndef subscribe():\n    subscriptions = [{'pubsubname': 'pubsub',\n                      'topic': 'my-topic',\n                      'route': 'my_topic_subscriber',\n                      }]\n    return subscriptions\n\n@router.post('/my_topic_subscriber')\ndef my_topic_subscriber(\n      key: Annotated[str, Header(alias=\"__key\")],\n      offset: Annotated[int, Header(alias=\"__offset\")],\n      event_data=Body()):\n    print(f\"key={key} - offset={offset} - data={event_data}\", flush=True)\n      return Response(status_code=status.HTTP_200_OK)\n\napp.include_router(router)\n```\n\n----------------------------------------\n\nTITLE: Shaping Outbox Pattern Messages with Python in Dapr\nDESCRIPTION: This Python example demonstrates how to use Dapr's state transactions to save one value to the database while publishing a different value to the pub/sub topic. It uses the DaprClient to execute a state transaction with two operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-outbox.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDAPR_STORE_NAME = \"statestore\"\n\nasync def main():\n    client = DaprClient()\n\n    # Define the first state operation to save the value \"2\"\n    op1 = StateItem(\n        key=\"key1\",\n        value=b\"2\"\n    )\n\n    # Define the second state operation to publish the value \"3\" with metadata\n    op2 = StateItem(\n        key=\"key1\",\n        value=b\"3\",\n        options=StateOptions(\n            metadata={\n                \"outbox.projection\": \"true\"\n            }\n        )\n    )\n\n    # Create the list of state operations\n    ops = [op1, op2]\n\n    # Execute the state transaction\n    await client.state.transaction(DAPR_STORE_NAME, operations=ops)\n    print(\"State transaction executed.\")\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Bulk Secret Retrieval\nDESCRIPTION: Example cURL command for retrieving all secrets from a Kubernetes secret store in bulk.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/secrets_api.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/secrets/kubernetes/bulk\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Page Link Button in Hugo\nDESCRIPTION: Example of using the button shortcode to create a button that links to another page within the documentation site.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* button text=\"My Button\" page=\"contributing\" newtab=\"true\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Helm Charts on Kubernetes\nDESCRIPTION: Commands to add and install Grafana Helm charts in the dapr-monitoring namespace\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/grafana.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install grafana grafana/grafana -n dapr-monitoring\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install grafana grafana/grafana -n dapr-monitoring --set persistence.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Merging Changes Between Branches in Bash\nDESCRIPTION: Command to stage a merge from the current release branch to the upmerge branch without automatically committing, allowing for conflict resolution.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit merge --no-ff --no-commit v1.0\n```\n\n----------------------------------------\n\nTITLE: Updating README Version Table in Markdown\nDESCRIPTION: Markdown table update for the README file to reflect the current primary branch and pre-release branch with their respective website URLs.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Branch                                                       | Website                    | Description                                                                                      |\n| ------------------------------------------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------ |\n| [v1.1](https://github.com/dapr/docs) (primary)               | https://docs.dapr.io       | Latest Dapr release documentation. Typo fixes, clarifications, and most documentation goes here. |\n| [v1.2](https://github.com/dapr/docs/tree/v1.2) (pre-release) | https://v1-2.docs.dapr.io/ | Pre-release documentation. Doc updates that are only applicable to v1.2+ go here.                |\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr to VS Code Workspace\nDESCRIPTION: Command to add the Dapr folder to the current VS Code workspace in Codespaces.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/codespaces.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncode -a /workspaces/dapr\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Debugging Dapr App\nDESCRIPTION: This YAML snippet defines a debug configuration for Docker Compose. It modifies the 'nodeapp' service to isolate it and adjusts the 'nodeapp-dapr' service to communicate with the locally debugged app. It exposes necessary ports and sets up appropriate networking for debugging.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debugging-docker-compose.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nodeapp: # Isolate the nodeapp by removing its ports and taking it off the network\n    ports: !reset []\n    networks: !reset\n      - \"\"\n  nodeapp-dapr:\n    command: [\"./daprd\",\n     \"--app-id\", \"nodeapp\",\n     \"--app-port\", \"8080\", # This must match the port that your app is exposed on when debugging in the IDE\n     \"--resources-path\", \"./components\",\n     \"--app-channel-address\", \"host.docker.internal\"] # Make the sidecar look on the host for the App Channel\n    network_mode: !reset \"\" # Reset the network_mode...\n    networks: # ... so that the sidecar can go into the normal network\n      - hello-dapr\n    ports:\n      - \"3500:3500\" # Expose the HTTP port to the host\n      - \"50001:50001\" # Expose the GRPC port to the host (Dapr Worfklows depends upon the GRPC channel)\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for TLS Certificate\nDESCRIPTION: Command to create a Kubernetes secret from a TLS certificate file. This secret can then be mounted to the Dapr sidecar in a Kubernetes deployment.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/http.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic myapp-cert --from-file /tmp/ssl/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI Preview on Windows using winget\nDESCRIPTION: Installs the latest preview release of the Dapr CLI using the winget package manager.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Dapr.CLI.Preview\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Checkout Service\nDESCRIPTION: Commands to navigate to checkout directory, install dependencies and run the service with Dapr sidecar configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-serviceinvo-quickstart.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd service_invocation/java/http/checkout\nmvn clean install\ndapr run --app-id checkout --resources-path ../../../resources/ --app-protocol http --dapr-http-port 3500 -- java -jar target/CheckoutService-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Key Pair with OpenSSL on macOS (Homebrew)\nDESCRIPTION: These commands are specific for macOS users who have installed OpenSSL 3.0 from Homebrew. They generate an Ed25519 key pair using the Homebrew-installed OpenSSL.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$(brew --prefix)/opt/openssl@3/bin/openssl genpkey -algorithm ed25519 -out private.pem\n$(brew --prefix)/opt/openssl@3/bin/openssl pkey -in private.pem -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Releasing a Distributed Lock using Go SDK in Dapr\nDESCRIPTION: Go code demonstrating how to release a lock on a resource using the Dapr Go SDK. The code creates a Dapr client and calls the UnlockAlpha1 method with resource ID and lock owner.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/distributed-lock/howto-use-distributed-lock.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    dapr \"github.com/dapr/go-sdk/client\"\n)\n\nfunc main() {\n    client, err := dapr.NewClient()\n    if err != nil {\n        panic(err)\n    }\n    defer client.Close()\n    \n    resp, err := client.UnlockAlpha1(ctx, \"lockstore\", &UnlockRequest{\n\t\t\tLockOwner:    \"random_id_abc123\",\n\t\t\tResourceID: \"my_file_name\",\n\t\t})\n\n    fmt.Println(resp.Status)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Actor Reminder\nDESCRIPTION: Example of how to retrieve an existing reminder for an actor. This example gets the 'checkRebels' reminder for a 'stormtrooper' actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/actors/stormtrooper/50/reminders/checkRebels \\\n  \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on Windows using PowerShell\nDESCRIPTION: Command to install the Dapr CLI on Windows systems using PowerShell. This downloads and executes the installation script directly from the Dapr GitHub repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -Command \"iwr -useb https://raw.githubusercontent.com/dapr/cli/master/install/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr Completion to PowerShell Profile\nDESCRIPTION: Command to add Dapr completion to PowerShell profile.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndapr completion powershell >> $PROFILE\n```\n\n----------------------------------------\n\nTITLE: Getting Object from Alibaba Cloud Tablestore\nDESCRIPTION: JSON payload for retrieving an object from Alibaba Cloud Tablestore. Specifies the 'delete' operation (likely a typo, should be 'get'), primary keys, and data containing the primary key value to fetch.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloudtablestore.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"primaryKeys\": \"pk1\"\n  },\n  \"data\": {\n    \"pk1\": \"data1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content-Type Header Specification\nDESCRIPTION: Specifies the required Content-Type header for the metadata attribute request.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/metadata_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Content-Type\": \"text/plain\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Echo Conversation Component in YAML\nDESCRIPTION: YAML configuration for setting up the Echo conversation component in Dapr. This component is used for local testing and validation, echoing back input instead of processing through an LLM.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-conversation/local-echo.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: echo\nspec:\n  type: conversation.echo\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Accessing etcd Metrics in Scheduler Service\nDESCRIPTION: Command to view the embedded etcd metrics from the Dapr Scheduler service after port forwarding. This helps monitor the health and performance of the scheduler's etcd database.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/scheduler.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s http://localhost:2379/metrics\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting CRD Upgrade\nDESCRIPTION: Command to fix CustomResourceDefinition compatibility issues during upgrade.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/dapr/dapr/release-{{% dapr-latest-version short=\"true\" %}}/charts/dapr/crds/configuration.yaml\n```\n\n----------------------------------------\n\nTITLE: Delete Blob Operation JSON Structure\nDESCRIPTION: JSON payload structure for deleting a blob from Azure Blob Storage.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/blobstorage.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"delete\",\n  \"metadata\": {\n    \"blobName\": \"myblob\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Topic\nDESCRIPTION: Command to create a Kafka topic with specified partitions and replication factor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/autoscale-keda.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n kafka exec -it kafka-client -- kafka-topics \\\n\t\t--zookeeper kafka-cp-zookeeper-headless:2181 \\\n\t\t--topic demo-topic \\\n\t\t--create \\\n\t\t--partitions 10 \\\n\t\t--replication-factor 3 \\\n\t\t--if-not-exists\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Client in Go\nDESCRIPTION: Go implementation of the Dapr conversation client using the Go SDK with context handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\tdapr \"github.com/dapr/go-sdk/client\"\n\t\"log\"\n)\n\nfunc main() {\n\tclient, err := dapr.NewClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tinput := dapr.ConversationInput{\n\t\tContent: \"Please write a witty haiku about the Dapr distributed programming framework at dapr.io\",\n\t\t// Role:     \"\", // Optional\n\t\t// ScrubPII: false, // Optional\n\t}\n\n\tfmt.Printf(\"conversation input: %s\\n\", input.Content)\n\n\tvar conversationComponent = \"echo\"\n\n\trequest := dapr.NewConversationRequest(conversationComponent, []dapr.ConversationInput{input})\n\n\tresp, err := client.ConverseAlpha1(context.Background(), request)\n\tif err != nil {\n\t\tlog.Fatalf(\"err: %v\", err)\n\t}\n\n\tfmt.Printf(\"conversation output: %s\\n\", resp.Outputs[0].Result)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Site Workflow in YAML\nDESCRIPTION: YAML configuration for the GitHub Actions workflow to deploy the preview version of documentation to the appropriate Azure Static Web App.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nname: Azure Static Web App v1.2\n\non:\n  push:\n    branches:\n      - v1.2\n  pull_request:\n    types: [opened, synchronize, reopened, closed]\n    branches:\n      - v1.2\n\n ...\n\n     with:\n       azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_V1_2 }}\n       repo_token: ${{ secrets.GITHUB_TOKEN }}\n\n ...\n\n     with:\n       azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_V1_2 }}\n       skip_deploy_on_missing_secrets: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Items Using Dapr JavaScript SDK\nDESCRIPTION: JavaScript example showing how to get configuration items from a Dapr configuration store. It uses the DaprClient to connect via gRPC, retrieves configuration items, and displays their values.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommunicationProtocolEnum, DaprClient } from \"@dapr/dapr\";\n\n// JS SDK does not support Configuration API over HTTP protocol yet\nconst protocol = CommunicationProtocolEnum.GRPC;\nconst host = process.env.DAPR_HOST ?? \"localhost\";\nconst port = process.env.DAPR_GRPC_PORT ?? 3500;\n\nconst DAPR_CONFIGURATION_STORE = \"configstore\";\nconst CONFIGURATION_ITEMS = [\"orderId1\", \"orderId2\"];\n\nasync function main() {\n  const client = new DaprClient(host, port, protocol);\n  // Get config items from the config store\n  try {\n    const config = await client.configuration.get(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS);\n    Object.keys(config.items).forEach((key) => {\n      console.log(\"Configuration for \" + key + \":\", JSON.stringify(config.items[key]));\n    });\n  } catch (error) {\n    console.log(\"Could not get config item, err:\" + error);\n    process.exit(1);\n  }\n}\n\nmain().catch((e) => console.error(e));\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Workflow Configuration in YAML\nDESCRIPTION: YAML configuration update for the GitHub Actions workflow to trigger on the correct branch for the new latest version of documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nname: Azure Static Web App Root\n\non:\n  push:\n    branches:\n      - v1.1\n  pull_request:\n    types: [opened, synchronize, reopened, closed]\n    branches:\n      - v1.1\n```\n\n----------------------------------------\n\nTITLE: Complete State Store Options Example\nDESCRIPTION: Example of a state store set request with complete options including etag, concurrency, and consistency settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state/starwars \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n        {\n          \"key\": \"weapon\",\n          \"value\": \"DeathStar\",\n          \"etag\": \"xxxxx\",\n          \"options\": {\n            \"concurrency\": \"first-write\",\n            \"consistency\": \"strong\"\n          }\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Redis Password Configuration in Component YAML\nDESCRIPTION: YAML configuration showing how to specify Redis password in Dapr component configuration.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-locks/redis-lock.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisPassword\n      value: lhDOkwTlp0\n```\n\n----------------------------------------\n\nTITLE: Retrieving DynamoDB Item Using AWS CLI\nDESCRIPTION: AWS CLI command to retrieve an item from DynamoDB table using a composite partition key.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-dynamodb.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naws dynamodb get-item \\\n    --table-name Contracts \\\n    --key '{\"ContractID\":{\"S\":\"contractsprocessing||A12345\"}}'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Configuration Updates in C# with Dapr\nDESCRIPTION: This snippet demonstrates how to subscribe to configuration updates for specific keys using the Dapr C# SDK. It initializes a Dapr client, subscribes to configuration changes, and prints the updates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/configuration/howto-manage-configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Dapr.Client;\n\nconst string DAPR_CONFIGURATION_STORE = \"configstore\";\nvar CONFIGURATION_ITEMS = new List<string> { \"orderId1\", \"orderId2\" };\nvar client = new DaprClientBuilder().Build();\n\n// Subscribe for configuration changes\nSubscribeConfigurationResponse subscribe = await client.SubscribeConfiguration(DAPR_CONFIGURATION_STORE, CONFIGURATION_ITEMS);\n\n// Print configuration changes\nawait foreach (var items in subscribe.Source)\n{\n  // First invocation when app subscribes to config changes only returns subscription id\n  if (items.Keys.Count == 0)\n  {\n    Console.WriteLine(\"App subscribed to config changes with subscription id: \" + subscribe.Id);\n    subscriptionId = subscribe.Id;\n    continue;\n  }\n  var cfg = System.Text.Json.JsonSerializer.Serialize(items);\n  Console.WriteLine(\"Configuration update \" + cfg);\n}\n```\n\n----------------------------------------\n\nTITLE: Actor Store Configuration for MySQL\nDESCRIPTION: Additional YAML configuration to enable MySQL as an actor state store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: actorStateStore\n    value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: RouterChecker Middleware Test Cases (Shell)\nDESCRIPTION: This snippet demonstrates example HTTP request paths that would pass or fail the RouterChecker middleware validation based on the configured regex rule. It shows valid paths that conform to the pattern and invalid paths that would be blocked.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-middleware/middleware-routerchecker.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPASS /v1.0/invoke/demo/method/method\nPASS /v1.0/invoke/demo.default/method/method\nPASS /v1.0/invoke/demo.default/method/01\nPASS /v1.0/invoke/demo.default/method/METHOD\nPASS /v1.0/invoke/demo.default/method/user/info\nPASS /v1.0/invoke/demo.default/method/user_info\nPASS /v1.0/invoke/demo.default/method/user-info\n\nFAIL /v1.0/invoke/demo.default/method/cat password\nFAIL /v1.0/invoke/demo.default/method/\" AND 4210=4210 limit 1\nFAIL /v1.0/invoke/demo.default/method/\"$(curl\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on MacOS\nDESCRIPTION: Installs a specific version of the Dapr CLI on MacOS, allowing for installation of release candidates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/dapr/cli/master/install/install.sh | /bin/bash -s {{% dapr-latest-version cli=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Health Checks in Kubernetes Deployment\nDESCRIPTION: This YAML example shows how to enable and configure app health checks in a Kubernetes deployment using Dapr annotations. It includes all the same health check configuration options that are available in the CLI version.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/resiliency/health-checks/app-health.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\n  labels:\n    app: my-app\nspec:\n  template:\n    metadata:\n      labels:\n        app: my-app\n      annotations:\n        dapr.io/enabled: \"true\"\n        dapr.io/app-id: \"my-app\"\n        dapr.io/app-port: \"7001\"\n        dapr.io/app-protocol: \"http\"\n        dapr.io/enable-app-health-check: \"true\"\n        dapr.io/app-health-check-path: \"/healthz\"\n        dapr.io/app-health-probe-interval: \"3\"\n        dapr.io/app-health-probe-timeout: \"200\"\n        dapr.io/app-health-threshold: \"2\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Bulk Messages with PowerShell HTTP Request to Dapr\nDESCRIPTION: This PowerShell example shows how to use Invoke-RestMethod to make an HTTP POST request to Dapr's bulk publish API. It demonstrates sending multiple messages with different content types.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-bulk.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-RestMethod -Method Post -ContentType 'application/json' -Uri 'http://localhost:3500/v1.0-alpha1/publish/bulk/my-pubsub-name/topic-a' `\n-Body '[\n        {\n            \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  \"first text message\",\n            \"contentType\": \"text/plain\"\n        },\n        {\n            \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n            \"event\":  {\n                \"message\": \"second JSON message\"\n            },\n            \"contentType\": \"application/json\"\n        },\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dapr CLI Version on Linux\nDESCRIPTION: Installs a specific version of the Dapr CLI on Linux, allowing for installation of release candidates.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash -s {{% dapr-latest-version cli=\"true\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuration Subscription Response Format in Dapr\nDESCRIPTION: JSON response format returned when subscribing to configuration changes. The response includes a unique subscription ID that can be used to unsubscribe later.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<unique-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Huawei OBS using JSON\nDESCRIPTION: JSON payload for listing objects in Huawei OBS. Demonstrates the 'list' operation with optional parameters for filtering and limiting results.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/huawei-obs.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"list\",\n  \"data\": {\n    \"maxResults\": 5,\n    \"prefix\": \"dapr-\",\n    \"marker\": \"obstest\",\n    \"delimiter\": \"jpg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr CLI on MacOS using Homebrew\nDESCRIPTION: Installs the Dapr CLI on MacOS using the Homebrew package manager.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew install dapr/tap/dapr-cli\n```\n\n----------------------------------------\n\nTITLE: Getting Bulk State Data with cURL\nDESCRIPTION: Example of retrieving multiple state values in a single request using HTTP POST with curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/state_api.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3500/v1.0/state/myRedisStore/bulk \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n          \"keys\": [ \"key1\", \"key2\" ],\n          \"parallelism\": 10\n      }'\n```\n\n----------------------------------------\n\nTITLE: Loading Dapr Completion in Linux Bash\nDESCRIPTION: Command to load Dapr completion directly into the current bash shell on Linux.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-completion.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource <(dapr completion bash)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Middleware Handler in Go\nDESCRIPTION: Example implementation of a custom middleware handler showing the structure for processing both inbound and outbound logic around the main request handler. The implementation demonstrates the middleware chain pattern using http.Handler.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/develop-middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *customMiddleware) GetHandler(metadata middleware.Metadata) (func(next http.Handler) http.Handler, error) {\n  var err error\n  return func(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n      // Inbound logic\n      // ...\n\n      // Call the next handler\n      next.ServeHTTP(w, r)\n\n      // Outbound logic\n      // ...\n    }\n  }, err\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Scheduler in Standalone Mode\nDESCRIPTION: Docker Compose configuration for running the Dapr scheduler in standalone mode with high availability. This example configures a three-node etcd cluster with exposed ports for management operations.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/concepts/dapr-services/scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscheduler-1:\n    image: \"diagrid/dapr/scheduler:dev110-linux-arm64\"\n    command: [\"./scheduler\",\n      \"--etcd-data-dir\", \"/var/run/dapr/scheduler\",\n      \"--replica-count\", \"3\",\n      \"--id\",\"scheduler-1\",\n      \"--initial-cluster\", \"scheduler-1=http://scheduler-1:2380,scheduler-0=http://scheduler-0:2380,scheduler-2=http://scheduler-2:2380\",\n      \"--etcd-client-ports\", \"scheduler-0=2379,scheduler-1=2379,scheduler-2=2379\",\n      \"--etcd-client-http-ports\", \"scheduler-0=2330,scheduler-1=2330,scheduler-2=2330\",\n      \"--log-level=debug\"\n    ]\n    ports:\n      - 2379:2379\n    volumes:\n      - ./dapr_scheduler/1:/var/run/dapr/scheduler\n    networks:\n      - network\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Key Vault Component in Kubernetes\nDESCRIPTION: Command to apply the Azure Key Vault component configuration in a Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/authenticating-azure.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f azurekeyvault.yaml\n```\n\n----------------------------------------\n\nTITLE: Dapr Configuration Subscribe API Example\nDESCRIPTION: Example curl command for subscribing to configuration changes using Dapr's HTTP API with PostgreSQL notification channel.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-configuration-stores/postgresql-configuration-store.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -l 'http://<host>:<dapr-http-port>/configuration/mypostgresql/subscribe?key=<keyname1>&key=<keyname2>&metadata.pgNotifyChannel=<channel name>'\n```\n\n----------------------------------------\n\nTITLE: Modifying Kubernetes Deployment for Dapr Debug Mode\nDESCRIPTION: This YAML diff shows the modification needed in a Kubernetes deployment file to enable debug mode for the Dapr sidecar. It adds the 'dapr.io/enable-debug' annotation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/debugging/debug-k8s/debug-daprd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndiff --git a/hello-kubernetes/deploy/node.yaml b/hello-kubernetes/deploy/node.yaml\nindex 23185a6..6cdb0ae 100644\n--- a/hello-kubernetes/deploy/node.yaml\n+++ b/hello-kubernetes/deploy/node.yaml\n@@ -33,6 +33,7 @@ spec:\n         dapr.io/enabled: \"true\"\n         dapr.io/app-id: \"nodeapp\"\n         dapr.io/app-port: \"3000\"\n+        dapr.io/enable-debug: \"true\"\n     spec:\n       containers:\n       - name: node\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes DNS Name Resolution in Dapr Configuration CRD\nDESCRIPTION: This YAML snippet demonstrates how to configure Kubernetes DNS name resolution in a Dapr Configuration Custom Resource Definition (CRD). It shows the structure for setting the name resolution component to 'kubernetes' and specifying additional configuration options.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-name-resolution/nr-kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  nameResolution:\n    component: \"kubernetes\"\n    configuration:\n      clusterDomain: \"cluster.local\"  # Mutually exclusive with the template field\n      template: \"{{.ID}}-{{.Data.region}}.internal:{{.Port}}\" # Mutually exclusive with the clusterDomain field\n```\n\n----------------------------------------\n\nTITLE: Default Consume Timestamp Format in RocketMQ Component\nDESCRIPTION: Default value for consumeTimestamp field which backtracks consumption time by 30 minutes, using Go's time formatting pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rocketmq.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntime.Now().Add(time.Minute * (-30)).Format(\"20060102150405\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis PubSub Component\nDESCRIPTION: YAML configuration for Redis PubSub component with namespace-specific hostname\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: \"redisHost\"\n    value: \"redis-master.namespace-a.svc:6379\"\n  - name: \"redisPassword\"\n    value: \"YOUR_PASSWORD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Pub/Sub Component for Dapr\nDESCRIPTION: YAML configuration for the Redis pub/sub component in Dapr. It includes settings for both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/configure-state-pubsub.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\n  namespace: default\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: <REPLACE WITH HOSTNAME>\n  - name: redisPassword\n    secretKeyRef:\n      name: redis\n      key: redis-password\n # uncomment below for connecting to redis cache instances over TLS (ex - Azure Redis Cache)\n  # - name: enableTLS\n  #   value: true \n```\n\n----------------------------------------\n\nTITLE: In-Progress Workflow Status Response\nDESCRIPTION: Example JSON response showing the status of a running workflow, including creation time, status, and input properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"instanceID\": \"12345678\",\n  \"workflowName\": \"OrderProcessingWorkflow\",\n  \"createdAt\": \"2023-05-03T23:22:11.143069826Z\",\n  \"lastUpdatedAt\": \"2023-05-03T23:22:22.460025267Z\",\n  \"runtimeStatus\": \"RUNNING\",\n  \"properties\": {\n    \"dapr.workflow.custom_status\": \"\",\n    \"dapr.workflow.input\": \"{\\\"Name\\\":\\\"Paperclips\\\",\\\"Quantity\\\":1,\\\"TotalCost\\\":9.95}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Grafana Installation\nDESCRIPTION: Command to check if Grafana and related pods are running in the dapr-monitoring namespace\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/metrics/grafana.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n dapr-monitoring\n```\n\n----------------------------------------\n\nTITLE: GitHub CLI Authentication in Codespaces\nDESCRIPTION: Commands to authenticate with GitHub CLI in Codespaces environment. This is required before cloning repositories.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/codespaces.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Run this command and follow the prompts\n# Most users should accept the default choices\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster with Resource Allocation\nDESCRIPTION: Command to start a Minikube cluster with allocated resources of 4 CPUs and 4GB of memory. This ensures sufficient resources for running Dapr components.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-minikube.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --cpus=4 --memory=4096\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Client in .NET\nDESCRIPTION: C# implementation of the Dapr conversation client using the .NET SDK with async conversation handling.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/conversation/howto-conversation-layer.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Dapr.AI.Conversation;\nusing Dapr.AI.Conversation.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddDaprConversationClient();\n\nvar app = builder.Build();\n\nvar conversationClient = app.Services.GetRequiredService<DaprConversationClient>();\nvar response = await conversationClient.ConverseAsync(\"conversation\",\n    new List<DaprConversationInput>\n    {\n        new DaprConversationInput(\n            \"Please write a witty haiku about the Dapr distributed programming framework at dapr.io\",\n            DaprConversationRole.Generic)\n    });\n\nConsole.WriteLine(\"Received the following from the LLM:\");\nforeach (var resp in response.Outputs)\n{\n    Console.WriteLine($\"\\t{resp.Result}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Completed Workflow Status Response\nDESCRIPTION: Example JSON response showing the status of a completed workflow, including completion time and output data.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/workflow-patterns.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"instanceID\": \"12345678\",\n  \"workflowName\": \"OrderProcessingWorkflow\",\n  \"createdAt\": \"2023-05-03T23:30:11.381146313Z\",\n  \"lastUpdatedAt\": \"2023-05-03T23:30:52.923870615Z\",\n  \"runtimeStatus\": \"COMPLETED\",\n  \"properties\": {\n    \"dapr.workflow.custom_status\": \"\",\n    \"dapr.workflow.input\": \"{\\\"Name\\\":\\\"Paperclips\\\",\\\"Quantity\\\":1,\\\"TotalCost\\\":9.95}\",\n    \"dapr.workflow.output\": \"{\\\"Processed\\\":true}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Cosmos DB Indexing Policy in Terraform\nDESCRIPTION: The default Terraform configuration for Cosmos DB SQL container indexing. This setup indexes all fields inside a document, which can slow down write operations in write-heavy systems.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-cosmosdb.md#2025-04-21_snippet_6\n\nLANGUAGE: tf\nCODE:\n```\nindexing_policy {\n  indexing_mode = \"consistent\"\n\n  included_path {\n    path = \"/*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Connection Error During Dapr CLI Initialization\nDESCRIPTION: Shows an error message that appears when Dapr CLI cannot connect to Docker during initialization. This error typically occurs when Docker is not installed, not running, or the default Docker socket is not accessible.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n⌛  Making the jump to hyperspace...\n❌  could not connect to docker. docker may not be installed or running\n```\n\n----------------------------------------\n\nTITLE: JavaScript Workflow Activity Context Implementation\nDESCRIPTION: Implements the WorkflowActivityContext class in TypeScript/JavaScript that provides core workflow activity functionality including instance and activity ID management.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/workflow/howto-author-workflow.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class WorkflowActivityContext {\n  private readonly _innerContext: ActivityContext;\n  constructor(innerContext: ActivityContext) {\n    if (!innerContext) {\n      throw new Error(\"ActivityContext cannot be undefined\");\n    }\n    this._innerContext = innerContext;\n  }\n\n  public getWorkflowInstanceId(): string {\n    return this._innerContext.orchestrationId;\n  }\n\n  public getWorkflowActivityId(): number {\n    return this._innerContext.taskId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling in Dapr Standalone Mode\nDESCRIPTION: Command to enable profiling when running a Dapr application in standalone mode. The --enable-profiling flag activates profiling and --profile-port specifies the port to use (optional, Dapr will pick an available port if not provided).\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --enable-profiling --profile-port 7777 python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Pluggable Components SDKs\nDESCRIPTION: This snippet defines a markdown table listing available programming languages for Dapr pluggable components SDKs and their current development status. It includes links to language-specific documentation.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/pluggable-components/pluggable-components-sdks/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Status |\n|----------|:------:|\n| [Go]({{< ref pluggable-components-go >}}) | In development |\n| [.NET]({{< ref pluggable-components-dotnet >}}) | In development |\n```\n\n----------------------------------------\n\nTITLE: Adding Dapr metadata in Python gRPC client\nDESCRIPTION: Python code example showing how to add Dapr metadata for service invocation when using gRPC. This metadata is used to specify the target app ID for service discovery.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmetadata = (('dapr-app-id', 'server'),)\nresponse = stub.SayHello(request={ name: 'Darth Revan' }, metadata=metadata)\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Application\nDESCRIPTION: Command to run the order-processor service with Dapr sidecar\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/statemanagement-quickstart.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id order-processor --resources-path ../../../resources -- go run .\n```\n\n----------------------------------------\n\nTITLE: Retrieving kubectl Credentials\nDESCRIPTION: Command to get credentials for kubectl access to the GKE cluster. Requires PROJECT_ID, CLUSTER_NAME, and ZONE environment variables.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-gke.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters get-credentials $CLUSTER_NAME \\\n    --zone $ZONE \\\n    --project $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation with Alternative Container Runtime\nDESCRIPTION: Install Dapr using a different container runtime like podman\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-init.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --container-runtime podman\n```\n\n----------------------------------------\n\nTITLE: Deleting State using Dapr HTTP API in Bash\nDESCRIPTION: This snippet shows how to delete state using the Dapr HTTP API with a curl command in Bash. It sends a DELETE request to delete the state item with the key 'order_1' from the 'statestore'.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/howto-get-save-state.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'http://localhost:3601/v1.0/state/statestore/order_1'\n```\n\n----------------------------------------\n\nTITLE: Denying Access to All Secrets in Kubernetes Secret Store\nDESCRIPTION: Configuration to deny access to all secrets in both default Kubernetes secret store and a custom secret store. This YAML configuration needs to be applied to the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/secrets-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: appconfig\nspec:\n  secrets:\n    scopes:\n      - storeName: kubernetes\n        defaultAccess: deny\n      - storeName: mycustomsecreststore\n        defaultAccess: deny\n```\n\n----------------------------------------\n\nTITLE: Invoking Output Binding with Dapr Client in Java\nDESCRIPTION: Demonstrates how to invoke an output binding named 'sample' with a message 'My Message' using DaprClient. The message is serialized to byte[] before sending.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/sdk-serialization.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    DaprClient client = (new DaprClientBuilder()).build();\n    client.invokeBinding(\"sample\", \"My Message\").block();\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Process Instance in Zeebe\nDESCRIPTION: Creates a new process instance with synchronous execution using withResult flag and timeout settings.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/zeebe-command.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bpmnProcessId\": \"products-process\",\n    \"variables\": {\n      \"productId\": \"some-product-id\",\n      \"productName\": \"some-product-name\",\n      \"productKey\": \"some-product-key\"\n    },\n    \"withResult\": true,\n    \"requestTimeout\": \"30s\",\n    \"fetchVariables\": [\"productId\"]\n  },\n  \"operation\": \"create-instance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Returning to the SDK Directory\nDESCRIPTION: Command to navigate back to the sdk directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login\nDESCRIPTION: Command to log into Azure Developer CLI using Dapr Azure subscription\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nazd login\n```\n\n----------------------------------------\n\nTITLE: Executing Order Processor App with Dapr\nDESCRIPTION: This command runs the order processor app alongside a Dapr sidecar using Multi-App Run. It starts the 'order-processor' app with a unique workflow ID and executes the workflow activities.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pipeline for Client Credentials Grant in YAML\nDESCRIPTION: This YAML configuration creates a custom pipeline using Dapr configuration to utilize the OAuth middleware for the Client Credentials Grant flow.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/security/oauth.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dapr.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: pipeline\n  namespace: default\nspec:\n  httpPipeline:\n    handlers:\n    - name: myComponent\n      type: middleware.http.oauth2clientcredentials\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapr Middleware Interface in Go\nDESCRIPTION: Definition of the core middleware interface that must be implemented by custom middleware components. The interface requires a GetHandler method that returns an HTTP handler function and an error.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/develop-components/develop-middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Middleware interface {\n  GetHandler(metadata middleware.Metadata) (func(next http.Handler) http.Handler, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Dapr Profiling Port in Kubernetes\nDESCRIPTION: Kubectl command to establish port forwarding from local port 7777 to the Dapr profiling port in a Kubernetes pod. This enables connecting to the profiling server from the local machine.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/profiling-debugging.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward divideapp-6dddf7dc74-6sq4 7777:7777\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Container Logs in Kubernetes\nDESCRIPTION: Command to view the logs of an application container within a Kubernetes pod. This helps diagnose issues with the application itself, rather than the Dapr sidecar.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/troubleshooting/common_issues.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs <pod-name> <name-of-your-container>\n```\n\n----------------------------------------\n\nTITLE: Example of retrieving logs from a specific pod in Kubernetes\nDESCRIPTION: Example showing how to use the Dapr logs command to get logs from a specific application pod in a custom namespace in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-logs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get logs of sample app from target pod in custom namespace\ndapr logs -k --app-id sample --pod-name target --namespace custom\n```\n\n----------------------------------------\n\nTITLE: Installing Dapr Python SDK Dependencies\nDESCRIPTION: Command to install the required Python dependencies for the Dapr SDK using pip.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Container Using redis-cli\nDESCRIPTION: Command to connect to a Redis container using redis-cli through Docker. This allows direct interaction with the Redis state store used by Dapr.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --link <name of the Redis container> redis redis-cli -h <name of the Redis container>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Priority Queue Subscription in JavaScript\nDESCRIPTION: JavaScript/Node.js code example for setting up a priority queue subscription programmatically.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-rabbitmq.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst app = express()\napp.use(bodyParser.json({ type: 'application/*+json' }));\n\nconst port = 3000\n\napp.get('/dapr/subscribe', (req, res) => {\n  res.json([\n    {\n      pubsubname: \"pubsub\",\n      topic: \"checkout\",\n      routes: {\n        default: '/orders'\n      },\n      metadata: {\n        maxPriority: '3'\n      }\n    }\n  ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Running Couchbase Locally with Docker\nDESCRIPTION: Docker command to run Couchbase locally for development purposes. Exposes necessary ports for client access.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-couchbase.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name db -p 8091-8094:8091-8094 -p 11210:11210 couchbase\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter in YAML\nDESCRIPTION: Example of the required front matter for a Dapr documentation page, including title, link title, weight, and description.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: docs\ntitle: \"Service invocation overview\"\nlinkTitle: \"Overview\"\nweight: 10\ndescription: \"A quick overview of Dapr service invocation and how to use it to invoke services within your application\"\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the IDE support documentation page, defining metadata like page type, title, weight, and description.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/ides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: docs\ntitle: \"IDE support\"\nlinkTitle: \"IDE support\"\nweight: 200\ndescription: \"Support for common Integrated Development Environments (IDEs)\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running Dapr with Resource Path in Java\nDESCRIPTION: Command to run a Java application with Dapr, specifying the application ID and the path to component resources.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/subscription-methods.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --resources-path ./myComponents -- mvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Deploying Resources to Namespace A\nDESCRIPTION: Commands to deploy Redis, Node subscriber, and Python subscriber to namespace-a\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deploy/redis.yaml\nkubectl apply -f deploy/node-subscriber.yaml\nkubectl apply -f deploy/python-subscriber.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kafka Deployment Status\nDESCRIPTION: Shell commands to verify the status of Kafka deployment components in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/autoscale-keda.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl rollout status deployment.apps/kafka-cp-control-center -n kafka\nkubectl rollout status deployment.apps/kafka-cp-ksql-server -n kafka\nkubectl rollout status statefulset.apps/kafka-cp-kafka -n kafka\nkubectl rollout status statefulset.apps/kafka-cp-zookeeper -n kafka\n```\n\n----------------------------------------\n\nTITLE: Listing State Keys by Application ID in Redis\nDESCRIPTION: Command to retrieve all state keys associated with a specific Dapr application. This example lists keys for an application named \"myapp\".\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-redis-store.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nKEYS myapp*\n```\n\n----------------------------------------\n\nTITLE: Encrypting String with RSA Key in JavaScript\nDESCRIPTION: Encrypts a plaintext string using an RSA key stored in the local storage component.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/cryptography-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst encrypted = await client.crypto.encrypt(plaintext, {\n  componentName: \"localstorage\",\n  keyName: \"rsa-private-key.pem\",\n  keyWrapAlgorithm: \"RSA\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar in Non-PowerShell Environments\nDESCRIPTION: Launch a Dapr sidecar that listens on port 3500 for an application named 'myapp'. This command is for non-PowerShell environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --dapr-http-port 3500 --resources-path .\n```\n\n----------------------------------------\n\nTITLE: Restarting Redis Container to Remove Fault\nDESCRIPTION: This command restarts the Redis container, removing the simulated fault and allowing the application to recover.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/resiliency/resiliency-state-quickstart.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker start dapr_redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Host in Dapr Component YAML\nDESCRIPTION: Example of setting the Redis host in the Dapr component configuration file for Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-pubsub/setup-redis-pubsub.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    metadata:\n    - name: redisHost\n      value: redis-master:6379\n```\n\n----------------------------------------\n\nTITLE: Configuring Archived Version in TOML\nDESCRIPTION: TOML configuration for the Hugo website to mark a version as archived and update version dropdown menu with correct links.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nversion_menu = \"v1.0\"\nversion = \"v1.0\"\narchived_version = true\nurl_latest_version = \"https://docs.dapr.io\"\n\n[[params.versions]]\n  version = \"v1.2 (preview)\"\n  url = \"v1-2.docs.dapr.io\"\n[[params.versions]]\n  version = \"v1.1 (latest)\"\n  url = \"#\"\n[[params.versions]]\n  version = \"v1.0\"\n  url = \"https://v1-0.docs.dapr.io\"\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Multi-App Workflow\nDESCRIPTION: Command to start the order processor app alongside a Dapr sidecar using Multi-App Run feature from the javascript/sdk directory.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndapr run -f .\n```\n\n----------------------------------------\n\nTITLE: Example of a Standard gRPC Error Response\nDESCRIPTION: Demonstrates the structure of a standard gRPC error response, which includes an error code and message.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/error-codes/grpc-error-codes.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERROR:\n  Code: InvalidArgument\n  Message: input key/keyPrefix 'bad||keyname' can't contain '||'\n```\n\n----------------------------------------\n\nTITLE: Querying State Keys by Application ID in SQL Server\nDESCRIPTION: Lists all state keys associated with a specific application ID by using a LIKE query with the application prefix pattern.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/state-management/query-state-store/query-sqlserver-store.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM states WHERE [Key] LIKE 'myapp||%'\n```\n\n----------------------------------------\n\nTITLE: Invoking FQDN URL Endpoint\nDESCRIPTION: Example of using curl to invoke a non-Dapr endpoint using FQDN URL through Dapr's service invocation API\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-non-dapr-endpoints.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3602/v1.0/invoke/orderprocessor/method/checkout\n```\n\n----------------------------------------\n\nTITLE: Invoking Named HTTPEndpoint Resource\nDESCRIPTION: Example of using curl to invoke a named HTTPEndpoint resource through Dapr's service invocation API\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/howto-invoke-non-dapr-endpoints.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3500/v1.0/invoke/palpatine/method/order66\n```\n\n----------------------------------------\n\nTITLE: Generating Client Secret for Microsoft Entra ID Application\nDESCRIPTION: Azure CLI command to create a client secret for the application, valid for 2 years.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\naz ad app credential reset \\\n  --id \"${APP_ID}\" \\\n  --years 2\n```\n\n----------------------------------------\n\nTITLE: Execute Dapr Multi-App Template with File Path\nDESCRIPTION: CLI commands to run the Multi-App template using a specific YAML file path for both self-hosted and Kubernetes environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/multi-app-dapr-run/multi-app-template.md#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndapr run -f ./path/to/<your-preferred-file-name>.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Dapr Tracing Configuration\nDESCRIPTION: Command to apply the Dapr configuration YAML file that enables tracing and configures the OpenTelemetry Collector as the tracing exporter.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/observability/tracing/otel-collector/open-telemetry-collector-appinsights.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Configuration for APNS Private Key\nDESCRIPTION: YAML configuration for storing the APNS private key as a Kubernetes secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/apns.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n    name: apns-secrets\nstringData:\n    private-key: |\n        -----BEGIN PRIVATE KEY-----\n        KEY-DATA-GOES-HERE\n        -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr with gRPC in Self-hosted Mode\nDESCRIPTION: Command to run Dapr in self-hosted mode using gRPC protocol on port 5005.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/local-development/gRPC-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-protocol grpc --app-port 5005 node app.js\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Order Processor Directory\nDESCRIPTION: Commands to navigate to the order-processor directory within the cloned repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/quickstarts/workflow-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd workflows/python/sdk/order-processor\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Example with Specific Video ID\nDESCRIPTION: Example of embedding a specific YouTube video using its ID in the shortcode.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/contributing-docs.md#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n{{</* youtube dQw4w9WgXcQ */>}}\n```\n\n----------------------------------------\n\nTITLE: Accessing KubeMQ Dashboard in Kubernetes\nDESCRIPTION: Commands for accessing the KubeMQ dashboard through port forwarding in Kubernetes.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/kubemq.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubemqctl get dashboard\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/kubemq-cluster-api -n kubemq 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Dapr Installation Command\nDESCRIPTION: Command to initialize Dapr on the Kubernetes cluster.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/cluster/setup-eks.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr Without Docker\nDESCRIPTION: Command to initialize Dapr in slim mode without container dependencies\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/self-hosted/self-hosted-no-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr init --slim\n```\n\n----------------------------------------\n\nTITLE: Restart Application Deployment\nDESCRIPTION: Command to restart application deployments to update the Dapr runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-upgrade.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deploy/<DEPLOYMENT-NAME>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Annotation for Secret Store Configuration\nDESCRIPTION: YAML annotation to apply the secret store configuration to a Kubernetes pod.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/secrets/secrets-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndapr.io/config: appconfig\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Multiple Key-Value Secrets\nDESCRIPTION: Example JSON response when retrieving a secret with multiple key-values from HashiCorp Vault. The response contains all key-value pairs defined in the secret.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-secret-stores/hashicorp-vault.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"firstKey\": \"aValue\",\n  \"secondKey\": \"anotherValue\",\n  \"thirdKey\": \"yetAnotherDistinctValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dapr Version\nDESCRIPTION: Command to check the installed versions of Dapr CLI and runtime.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-selfhost.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndapr --version\n```\n\n----------------------------------------\n\nTITLE: Basic Dashboard CLI Usage\nDESCRIPTION: Basic command syntax for using the Dapr dashboard CLI command.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr dashboard [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Managed Identity Credentials in JSON\nDESCRIPTION: This JSON snippet shows the structure of credentials returned after assigning a system-managed identity to an Azure resource. It includes the principalId, tenantId, and type of identity.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-mi.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"principalId\": \"<object-id>\",\n    \"tenantId\": \"<tenant-id>\",\n    \"type\": \"SystemAssigned\",\n    \"userAssignedIdentities\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using the mtls command in Dapr CLI\nDESCRIPTION: Basic usage syntax for the Dapr mtls command, including general command format and options for flags.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/cli/dapr-mtls/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndapr mtls [flags]\ndapr mtls [command]\n```\n\n----------------------------------------\n\nTITLE: Disabling mTLS for Dapr Installation\nDESCRIPTION: Initialize Dapr without mTLS (mutual TLS) enabled for sidecar-to-sidecar communication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/hosting/kubernetes/kubernetes-deploy.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndapr init -k --enable-mtls=false\n```\n\n----------------------------------------\n\nTITLE: Getting DingTalk Message Using POST Request\nDESCRIPTION: Example of retrieving a message from DingTalk using the get operation via curl command. Demonstrates the same payload structure but with a different operation type.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/alicloud-dingtalk.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/bindings/myDingTalk \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"msgtype\": \"text\",\n          \"text\": {\n            \"content\": \"Hi\"\n          }\n        },\n        \"operation\": \"get\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Getting Service IP Address\nDESCRIPTION: Command to retrieve service information across all namespaces\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/operations/components/setup-pubsub/pubsub-namespaces.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get service -A\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Entra ID Application with Azure CLI\nDESCRIPTION: Shell commands to create a Microsoft Entra ID application and store its ID.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/integrations/Azure/azure-authentication/howto-aad.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Friendly name for the application / Service Principal\nAPP_NAME=\"dapr-application\"\n\n# Create the app\nAPP_ID=$(az ad app create --display-name \"${APP_NAME}\"  | jq -r .appId)\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Blob Storage Variables for Authentication\nDESCRIPTION: Bash commands for setting up variables needed for Microsoft Entra ID authentication with Azure Blob Storage. These variables will be used in subsequent commands to assign proper roles and permissions.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-azure-blobstorage.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSERVICE_PRINCIPAL_ID=\"[your_service_principal_object_id]\"\n```\n\n----------------------------------------\n\nTITLE: External Service Invocation with Authentication Using curl\nDESCRIPTION: A curl command example demonstrating how to invoke a method on a service in a different namespace from an external DNS address with API token authentication.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/service-invocation/service-invocation-namespaces.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -d '{ \"message\": \"hello\" }' \\\n     -H \"Content-type: application/json\" \\\n     -H \"dapr-api-token: ${API_TOKEN}\" \\\n     https://api.demo.dapr.team/v1.0/invoke/myapp.production/method/ping\n```\n\n----------------------------------------\n\nTITLE: Verifying Dapr CLI Installation using Help Command in Bash\nDESCRIPTION: This command runs the Dapr CLI with the help flag to display available commands and options. It's used to verify that the Dapr CLI is correctly installed and accessible from the command line.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/install-dapr-cli.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndapr -h\n```\n\n----------------------------------------\n\nTITLE: Accessing Oracle Database Container Shell\nDESCRIPTION: Commands to access the shell of the running Oracle Database Docker container and start the SQL*Plus client as the SYS user.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container id> /bin/bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nsqlplus sys/TheSuperSecret1509! as sysdba\n```\n\n----------------------------------------\n\nTITLE: Deleting Actor Timer using cURL\nDESCRIPTION: Example of deleting an actor timer using a cURL command. This snippet demonstrates how to make a DELETE request to remove a specific timer for an actor.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/actors_api.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:3500/v1.0/actors/stormtrooper/50/timers/checkRebels \\\n  -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Upmerge Branch in Bash\nDESCRIPTION: Command to create a new branch for upmerging changes from the current release to the upcoming release branch.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/maintainer-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b upmerge_MM-DD\n```\n\n----------------------------------------\n\nTITLE: Setting State with TTL Using Curl\nDESCRIPTION: Example of setting state with a Time To Live (TTL) value of 120 seconds using curl.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-state-stores/setup-oracledatabase.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:3500/v1.0/state \\\n  -H \"Content-Type: application/json\"\n  -d '[\n        {\n          \"key\": \"temporary\",\n          \"value\": \"ephemeral\",\n          \"metadata\": {\"ttlInSeconds\": \"120\"}}\n        }\n      ]'\n```\n\n----------------------------------------\n\nTITLE: Successful Unsubscribe Response Format in Dapr\nDESCRIPTION: JSON response format returned when successfully unsubscribing from configuration changes in a Dapr configuration store.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/api/configuration_api.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Worker Code Using cURL\nDESCRIPTION: Shell command for downloading the pre-compiled Worker code from the Dapr GitHub repository.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/reference/components-reference/supported-bindings/cloudflare-queues.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Set this to the version of Dapr that you're using\nDAPR_VERSION=\"release-1.12\"\ncurl -LfO \"https://raw.githubusercontent.com/dapr/components-contrib/${DAPR_VERSION}/internal/component/cloudflare/workers/code/worker.js\"\n```\n\n----------------------------------------\n\nTITLE: Template Structure for Dapr Quickstart Guide Documentation\nDESCRIPTION: A markdown template showing the recommended structure for creating a Dapr quickstart guide. Includes front-matter configuration, section organization, and guidance notes for contributors through HTML comments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/contributing/docs-contrib/docs-templates/quickstart-template.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: #Required; docs\ntitle: #Required; \"Quickstart: Brief, clear title\"\nlinkTitle: #Required; This will display in the docs table of contents\nweight: #Required; Use the correct weight based on hierarchy\ndescription: #Required; One-sentence description of what to expect in the article\n---\n\n<!--\nRemove all the comments in this template before opening a PR.\n-->\n\n<!-- \nH1: The title in the Hugo front-matter serves as the article's markdown H1. \n-->\n\n<!-- Introductory paragraph  \nRequired. Light intro that briefly describes what the quickstart will cover. Link off to the appropriate concept or overview docs to provide context. -->\n\n<!-- \nInclude a diagram or image, if possible. \n-->\n\n<!-- \nMake sure the quickstart includes examples for multiple programming languages. \n-->\n\n## Pre-requisites\n\n<!--\nMake sure the reader is prepared for a successful quickstart walk through by listing what they may need.\n-->\n\n## Step 1: Set up the environment\n\n<!-- \nLink to the quickstart sample for the reader to clone. \n-->\n\n## Step 2: <action or task>\n\n<!-- \nEach H2 step should start with a verb/action word.\n-->\n\n<!--\nInclude code snippets where possible. \n-->\n\n## Tell us what you think!\n\nWe're continuously working to improve our Quickstart examples and value your feedback. Did you find this quickstart helpful? Do you have suggestions for improvement?\n\nJoin the discussion in our [discord channel](https://discord.gg/22ZtJrNe).\n\n<!-- Since Dapr is an open community of contributors, make sure to provide a link to the discord discussion to welcome feedback.\n-->\n\n## Next steps\n\n<!--\nLink to related pages and examples. For example, the building block overview, the HTTP version of an SDK quickstart sample, etc.\n-->\n\n<!--\nUse the button shortcode to direct readers to more in-depth, related scenarios, like the Dapr tutorials.\n-->\n\n```\n\n----------------------------------------\n\nTITLE: Running Dapr Sidecar in PowerShell\nDESCRIPTION: Launch a Dapr sidecar that listens on port 3500 for an application named 'myapp'. This command is specific to PowerShell environments.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/getting-started/tutorials/get-started-component.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndapr run --app-id myapp --dapr-http-port 3500 --resources-path ../\n```\n\n----------------------------------------\n\nTITLE: CloudEvent JSON Structure Example in Dapr Pub/Sub\nDESCRIPTION: An example of a Dapr-generated CloudEvent JSON structure for a publish operation to the 'orders' topic. It includes W3C trace information, data content serialized as JSON, and standard CloudEvents properties.\nSOURCE: https://github.com/dapr/docs/blob/v1.15/daprdocs/content/en/developing-applications/building-blocks/pubsub/pubsub-cloudevents.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"orders\",\n  \"pubsubname\": \"order_pub_sub\",\n  \"traceid\": \"00-113ad9c4e42b27583ae98ba698d54255-e3743e35ff56f219-01\",\n  \"tracestate\": \"\",\n  \"data\": {\n    \"orderId\": 1\n  },\n  \"id\": \"5929aaac-a5e2-4ca1-859c-edfe73f11565\",\n  \"specversion\": \"1.0\",\n  \"datacontenttype\": \"application/json; charset=utf-8\",\n  \"source\": \"checkout\",\n  \"type\": \"com.dapr.event.sent\",\n  \"time\": \"2020-09-23T06:23:21Z\",\n  \"traceparent\": \"00-113ad9c4e42b27583ae98ba698d54255-e3743e35ff56f219-01\"\n}\n```"
  }
]