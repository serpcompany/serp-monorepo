[
  {
    "owner": "phpoffice",
    "repo": "phpspreadsheet",
    "content": "TITLE: Setting Cell Values in PhpSpreadsheet with setCellValue() - PHP\nDESCRIPTION: This snippet demonstrates how to set cell values in a PhpSpreadsheet worksheet using the `setCellValue()` method. It covers setting string, numeric, boolean, and formula values in cells A1, A2, A3, and A4 respectively. The example utilizes both coordinate notation (e.g., 'A1') and array notation (e.g., [1, 2]) for cell referencing. The formula in A4 concatenates values from other cells based on a boolean condition.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Set cell A1 with a string value\n$spreadsheet->getActiveSheet()->setCellValue('A1', 'PhpSpreadsheet');\n\n// Set cell A2 with a numeric value\n$spreadsheet->getActiveSheet()->setCellValue([1, 2], 12345.6789);\n\n// Set cell A3 with a boolean value\n$spreadsheet->getActiveSheet()->setCellValue(new CellAddress('A3'), TRUE);\n\n// Set cell A4 with a formula\n$spreadsheet->getActiveSheet()->setCellValue(\n    'A4',\n    '=IF(A3, CONCATENATE(A1, \" \", A2), CONCATENATE(A2, \" \", A1))'\n);\n```\n\n----------------------------------------\n\nTITLE: Outputting Excel 2007 to Browser PHP\nDESCRIPTION: This snippet demonstrates how to output an Excel 2007 file directly to a client's web browser using PhpSpreadsheet. It sets the appropriate HTTP headers to force a download and then saves the spreadsheet to php://output using the Xlsx writer. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n// redirect output to client browser\nheader('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\nheader('Content-Disposition: attachment;filename=\"myfile.xlsx\"');\nheader('Cache-Control: max-age=0');\n\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Xlsx');\n$writer->save('php://output');\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Spreadsheet\nDESCRIPTION: This PHP code creates a basic spreadsheet, adds a 'Hello World !' string to cell A1, and saves the spreadsheet as an XLSX file named 'hello world.xlsx'. It demonstrates the core functionality of PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\n$spreadsheet = new Spreadsheet();\n$activeWorksheet = $spreadsheet->getActiveSheet();\n$activeWorksheet->setCellValue('A1', 'Hello World !');\n\n$writer = new Xlsx($spreadsheet);\n$writer->save('hello world.xlsx');\n```\n\n----------------------------------------\n\nTITLE: Reading XLS Spreadsheet PHP\nDESCRIPTION: This code reads an XLS file using PhpSpreadsheet. It creates a new `Xls` reader instance and loads the spreadsheet from the specified file. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xls();\n$spreadsheet = $reader->load(\"05featuredemo.xls\");\n```\n\n----------------------------------------\n\nTITLE: Reading XLSX Spreadsheet PHP\nDESCRIPTION: This snippet demonstrates how to read an XLSX file using PhpSpreadsheet. It instantiates the `Xlsx` reader and loads the spreadsheet from the specified file. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx();\n$spreadsheet = $reader->load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Range of Cell Values to an Array in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to retrieve a range of cell values into a 2-dimensional array using the `rangeToArray()` method. It specifies the range, empty cell value, formula calculation, formatting, and cell indexing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$dataArray = $spreadsheet->getActiveSheet()\n    ->rangeToArray(\n        'C3:E5',     // The worksheet range that we want to retrieve\n        NULL,        // Value that should be returned for empty cells\n        TRUE,        // Should formulas be calculated (the equivalent of getCalculatedValue() for each cell)\n        TRUE,        // Should values be formatted (the equivalent of getFormattedValue() for each cell)\n        TRUE         // Should the array be indexed by cell row and cell column\n    );\n```\n\n----------------------------------------\n\nTITLE: Writing an XLS File - PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to write a PhpSpreadsheet object to an .xls file using the `\\PhpOffice\\PhpSpreadsheet\\Writer\\Xls` writer. It creates a writer instance and then calls the `save` method to write the spreadsheet data to the specified file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xls($spreadsheet);\n$writer->save(\"05featuredemo.xls\");\n```\n\n----------------------------------------\n\nTITLE: Setting Core Spreadsheet Metadata - PHP\nDESCRIPTION: This snippet demonstrates how to set core metadata properties of a spreadsheet, such as creator, last modified by, title, subject, description, keywords, and category. These properties are useful for document management and search.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getProperties()\n    ->setCreator(\"Maarten Balliauw\")\n    ->setLastModifiedBy(\"Mark Baker\")\n    ->setTitle(\"Office 2007 XLSX Test Document\")\n    ->setSubject(\"Office 2007 XLSX Test Document\")\n    ->setDescription(\n        \"Test document for Office 2007 XLSX, generated using PHP classes.\"\n    )\n    ->setKeywords(\"office 2007 openxml php\")\n    ->setCategory(\"Test result file\");\n```\n\n----------------------------------------\n\nTITLE: Using AdvancedValueBinder for Automatic Formatting\nDESCRIPTION: This snippet shows how to use the AdvancedValueBinder to automatically convert string values to numbers and apply appropriate format masks. It demonstrates both setting the value binder globally for the spreadsheet and setting it for a specific cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Old method using static property\nCell::setValueBinder(new AdvancedValueBinder());\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet->setValueBinder(new AdvancedValueBinder());\n\n// Set Cell C21 using a formatted string value\n$worksheet->getCell('C20')->setValue('€ -12345.6789');\n\n// The Cell value is a float of -12345.6789\nvar_dump($worksheet->getCell('C20')->getValue());\n// The format code is \"[$€]#,##0.00_-\"\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n// The formatted value is  \"€-12,345.68 \"\nvar_dump($worksheet->getCell('C20')->getFormattedValue());\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Set Cell C21 using a formatted string value, but using a Value Binder\n$worksheet->getCell('C20')->setValue('€ -12345.6789', new AdvancedValueBinder());\n\n// The Cell value is a float of -12345.6789\nvar_dump($worksheet->getCell('C20')->getValue());\n// The format code is \"[$€]#,##0.00_-\"\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n// The formatted value is  \"€-12,345.68 \"\nvar_dump($worksheet->getCell('C20')->getFormattedValue());\n```\n\n----------------------------------------\n\nTITLE: Setting a Range of Cells from an Array in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to set a range of cell values using the `fromArray()` method, passing a 2-dimensional array to populate multiple rows and columns. The top-left coordinate of the range can be specified.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$arrayData = [\n    [NULL, 2010, 2011, 2012],\n    ['Q1',   12,   15,   21],\n    ['Q2',   56,   73,   86],\n    ['Q3',   52,   61,   69],\n    ['Q4',   30,   32,    0],\n];\n$spreadsheet->getActiveSheet()\n    ->fromArray(\n        $arrayData,  // The data to set\n        NULL,        // Array values with this value will not be set\n        'C3'         // Top left coordinate of the worksheet range where\n                     //    we want to set these values (default is A1)\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cell Value in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to retrieve the raw, unformatted value of a cell using `getCell()` and `getValue()` methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Get the value from cell A1\n$cellValue = $spreadsheet->getActiveSheet()->getCell('A1')->getValue();\n```\n\n----------------------------------------\n\nTITLE: Writing Spreadsheet with IOFactory PHP\nDESCRIPTION: This code creates a writer instance using `IOFactory::createWriter()` for a given spreadsheet object and file format, then saves the spreadsheet to the specified file. It requires a `$spreadsheet` object and the desired file format (e.g., \"Xlsx\").\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, \"Xlsx\");\n$writer->save(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable URL PHP\nDESCRIPTION: This code demonstrates how to make a cell a clickable URL in PhpSpreadsheet. It first sets the cell's value to the URL text and then sets the hyperlink property of the cell to the actual URL using the `setUrl()` method. It also shows how to create a hyperlink to another worksheet/cell within the same spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('E26', 'www.phpexcel.net');\n$spreadsheet->getActiveSheet()->getCell('E26')->getHyperlink()->setUrl('https://www.example.com');\n```\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('E26', 'www.phpexcel.net');\n$spreadsheet->getActiveSheet()->getCell('E26')->getHyperlink()->setUrl(\"sheet://'Sheetname'!A1\");\n```\n\n----------------------------------------\n\nTITLE: Load and Modify Excel Template\nDESCRIPTION: This code demonstrates how to load an Excel template file, modify cell values, and save the modified spreadsheet as a new Excel file. It loads the template, gets the active worksheet, sets values in cells A1 and A2, and then saves the spreadsheet as \"write.xls\" using the Xls writer.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load('template.xlsx');\n\n$worksheet = $spreadsheet->getActiveSheet();\n\n$worksheet->getCell('A1')->setValue('John');\n$worksheet->getCell('A2')->setValue('Smith');\n\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Xls');\n$writer->save('write.xls');\n```\n\n----------------------------------------\n\nTITLE: Formatting Cell with Font, Alignment, and Border - PHP\nDESCRIPTION: This snippet demonstrates how to format a specific cell (B2) in a PhpSpreadsheet worksheet. It sets the font color to red, aligns the text to the right, applies thick borders on all sides, and sets the fill color to red using individual style setters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_RED);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_RIGHT);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getBorders()->getTop()->setBorderStyle(\\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THICK);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getBorders()->getBottom()->setBorderStyle(\\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THICK);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getBorders()->getLeft()->setBorderStyle(\\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THICK);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getBorders()->getRight()->setBorderStyle(\\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THICK);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID);\n$spreadsheet->getActiveSheet()->getStyle('B2')\n    ->getFill()->getStartColor()->setARGB('FFFF0000');\n```\n\n----------------------------------------\n\nTITLE: Reading a CSV File - PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to read a CSV file (.csv) using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv` reader. It instantiates the reader and uses the load method to load the spreadsheet data from the specified .csv file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$spreadsheet = $reader->load('sample.csv');\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Value using getCell() and setValue() - PHP\nDESCRIPTION: This snippet shows how to retrieve a cell object using `getCell()` and then set its value using the `setValue()` method. If the cell doesn't already exist, PhpSpreadsheet will create it. It demonstrates an alternative approach to setting cell values compared to using `setCellValue()` directly.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->getCell('B8')\n    ->setValue('Some value');\n```\n\n----------------------------------------\n\nTITLE: Creating a New Spreadsheet (PhpSpreadsheet)\nDESCRIPTION: Creates a new, empty Spreadsheet object. This object represents a workbook with a single default worksheet. No parameters are required for instantiation.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/creating-spreadsheet.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/** Create a new Spreadsheet Object **/\n$spreadsheet = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formatted Cell Value in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to retrieve the formatted value of a cell (with formatting applied) using `getCell()` and `getFormattedValue()` methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Get the value from cell A6\n$cellValue = $spreadsheet->getActiveSheet()->getCell('A6')->getFormattedValue();\n```\n\n----------------------------------------\n\nTITLE: Setting a Sum Formula (PHP)\nDESCRIPTION: This code demonstrates setting a formula to calculate the sum of values in a specified range of cells (D2 to D6). The SUM function is used to add up the values in the range, and the result is displayed in cell D7.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('D7','=SUM($D$2:$D6');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calculated Cell Value in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to retrieve the calculated value of a cell containing a formula using `getCell()` and `getCalculatedValue()` methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Get the value from cell A4\n$cellValue = $spreadsheet->getActiveSheet()->getCell('A4')->getCalculatedValue();\n```\n\n----------------------------------------\n\nTITLE: Reading XLSX Spreadsheet (Data Only) PHP\nDESCRIPTION: This code reads an XLSX file, loading only the data and ignoring styling and data validation. It sets the `readDataOnly` option to `true` on the reader. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx();\n$reader->setReadDataOnly(true);\n$spreadsheet = $reader->load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Worksheet by Name - PhpSpreadsheet\nDESCRIPTION: Retrieves a worksheet from the PhpSpreadsheet object by its name. This snippet demonstrates how to access a sheet named 'Worksheet 1'.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve the worksheet called 'Worksheet 1'\n$spreadsheet->getSheetByName('Worksheet 1');\n```\n\n----------------------------------------\n\nTITLE: Reading CSV String - PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to read CSV data directly from a string using `loadSpreadsheetFromString` method of the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv` reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$spreadsheet = $reader->loadSpreadsheetFromString($data);\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced Value Binder in PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set the `AdvancedValueBinder` in PhpSpreadsheet. This value binder automatically converts percentages, numbers in scientific format, and dates entered as strings to the correct format, also setting the cell's style information. The code also sets values in specific cells and shows the automatic data conversion by the AdvancedValueBinder. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Older method using static property\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n// Create new Spreadsheet object\n$spreadsheet = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n$spreadsheet->setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n\n// ...\n// Add some data, resembling some different data types\n$spreadsheet->getActiveSheet()->setCellValue('A4', 'Percentage value:');\n// Converts the string value to 0.1 and sets percentage cell style\n$spreadsheet->getActiveSheet()->setCellValue('B4', '10%');\n\n$spreadsheet->getActiveSheet()->setCellValue('A5', 'Date/time value:');\n// Converts the string value to an Excel datestamp and sets the date format cell style\n$spreadsheet->getActiveSheet()->setCellValue('B5', '21 December 1983');\n```\n\n----------------------------------------\n\nTITLE: Setting String Value Binder with Options in PhpSpreadsheet\nDESCRIPTION: This example demonstrates the usage of `StringValueBinder` in PhpSpreadsheet, which preserves all content as strings. The snippet configures the binder to prevent numeric, boolean, null, and formula conversions. It also suppresses 'number stored as text' indicators. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// Set value binder\n$stringValueBinder = new \\PhpOffice\\PhpSpreadsheet\\Cell\\StringValueBinder();\n$stringValueBinder->setNumericConversion(false)\n    ->setSetIgnoredErrors(true) // suppresses \"number stored as text\" indicators\n    ->setBooleanConversion(false)\n    ->setNullConversion(false)\n    ->setFormulaConversion(false);\n// Older method using static property\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setValueBinder( $stringValueBinder );\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n$spreadsheet->setValueBinder( $stringValueBinder );\n```\n\n----------------------------------------\n\nTITLE: Looping through cells using indexes in PhpSpreadsheet\nDESCRIPTION: This snippet iterates through all cells in a worksheet using row and column indexes (1-based), retrieving and displaying the value of each cell within an HTML table. It uses the `getHighestDataRow()` and `getHighestDataColumn()` methods to determine the boundaries of the data in the worksheet, and `columnIndexFromString()` to convert the column letter to its numeric index. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$reader->setReadDataOnly(TRUE);\n$spreadsheet = $reader->load(\"test.xlsx\");\n\n$worksheet = $spreadsheet->getActiveSheet();\n// Get the highest row and column numbers referenced in the worksheet\n$highestRow = $worksheet->getHighestDataRow(); // e.g. 10\n$highestColumn = $worksheet->getHighestDataColumn(); // e.g 'F'\n$highestColumnIndex = \\PhpOffice\\PhpSpreadsheet\\Cell\\Coordinate::columnIndexFromString($highestColumn); // e.g. 5\n\necho '<table>' . \"\\n\";\nfor ($row = 1; $row <= $highestRow; ++$row) {\n    echo '<tr>' . PHP_EOL;\n    for ($col = 1; $col <= $highestColumnIndex; ++$col) {\n        $value = $worksheet->getCell([$col, $row])->getValue();\n        echo '<td>' . $value . '</td>' . PHP_EOL;\n    }\n    echo '</tr>' . PHP_EOL;\n}\necho '</table>' . PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Writing a CSV File - PHP\nDESCRIPTION: This code snippet demonstrates how to write a PhpSpreadsheet spreadsheet object to a CSV file. It creates a CSV writer instance and saves the spreadsheet to the specified file. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with Auto-Type Resolution (IOFactory) PHP\nDESCRIPTION: This code demonstrates how to load a spreadsheet file using PhpSpreadsheet's IOFactory with automatic file type resolution.  The `load()` method determines the file type based on the file extension or content and uses the appropriate reader. It requires PhpSpreadsheet to be installed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Enable Worksheet Protection in PhpSpreadsheet (PHP)\nDESCRIPTION: This snippet demonstrates how to enable worksheet protection features in PhpSpreadsheet, such as cell range protection and prohibiting deleting rows.  It uses the `getProtection()` method to access the protection settings and then calls `setSheet(true)` to enable worksheet security.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/faq.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Column Width in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set the width of a column using PhpSpreadsheet. It sets the width of column 'D' to 12. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(12);\n```\n\n----------------------------------------\n\nTITLE: Setting Data Validation (List) in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set data validation for a cell using PhpSpreadsheet to only allow an item picked from a list of data. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$validation = $spreadsheet->getActiveSheet()->getCell('B5')\n    ->getDataValidation();\n$validation->setType( \\PhpOffice\\PhpSpreadsheet\\Cell\\DataValidation::TYPE_LIST );\n$validation->setErrorStyle( \\PhpOffice\\PhpSpreadsheet\\Cell\\DataValidation::STYLE_INFORMATION );\n$validation->setAllowBlank(false);\n$validation->setShowInputMessage(true);\n$validation->setShowErrorMessage(true);\n$validation->setShowDropDown(true);\n$validation->setErrorTitle('Input error');\n$validation->setError('Value is not in list.');\n$validation->setPromptTitle('Pick from list');\n$validation->setPrompt('Please pick a value from the drop-down list.');\n$validation->setFormula1('\"Item A,Item B,Item C\"');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conditional Formatting Rule\nDESCRIPTION: This code snippet demonstrates how to create a conditional formatting rule to highlight cells in the range A1:A10 that contain values greater than 80. It uses the `Conditional` class to set the condition type, operator type, and formatting style, and then applies the conditional style to the specified cell range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$conditional = new \\PhpOffice\\PhpSpreadsheet\\Style\\Conditional();\n$conditional->setConditionType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::CONDITION_CELLIS);\n$conditional->setOperatorType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::OPERATOR_GREATERTHAN);\n$conditional->addCondition(80);\n$conditional->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_DARKGREEN);\n$conditional->getStyle()->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID);\n$conditional->getStyle()->getFill()->getStartColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_GREEN);\n\n$conditionalStyles = $spreadsheet->getActiveSheet()->getStyle('A1:A10')->getConditionalStyles();\n$conditionalStyles[] = $conditional;\n\n$spreadsheet->getActiveSheet()->getStyle('A1:A10')->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Worksheets by Name with PhpSpreadsheet\nDESCRIPTION: This snippet illustrates how to load only specific worksheets from a spreadsheet file by specifying their names. This allows you to selectively read only the necessary data. The `setLoadSheetsOnly()` method accepts either a single sheet name or an array of sheet names.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xls';\n$inputFileName = './sampleData/example1.xls';\n$sheetname = 'Data Sheet #2';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader of which WorkSheets we want to load  **/\n$reader->setLoadSheetsOnly($sheetname);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Setting Date and Time Values - PHP\nDESCRIPTION: This snippet shows how to set a date and time value in a cell. It involves converting a PHP timestamp to an Excel timestamp using `\\PhpOffice\\PhpSpreadsheet\\Shared\\Date::PHPToExcel()` and then setting the appropriate number format mask to display the value as a human-readable date/time. It uses the FORMAT_DATE_DATETIME constant for the desired formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Get the current date/time and convert to an Excel date/time\n$dateTimeNow = time();\n$excelDateValue = \\PhpOffice\\PhpSpreadsheet\\Shared\\Date::PHPToExcel( $dateTimeNow );\n// Set cell A6 with the Excel date/time value\n$spreadsheet->getActiveSheet()->setCellValue(\n    'A6',\n    $excelDateValue\n);\n// Set the number format mask so that the excel timestamp will be displayed as a human-readable date/time\n$spreadsheet->getActiveSheet()->getStyle('A6')\n    ->getNumberFormat()\n    ->setFormatCode(\n        \\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_DATE_DATETIME\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating a New Worksheet - PhpSpreadsheet\nDESCRIPTION: Adds a new worksheet to the PhpSpreadsheet object. The new worksheet will be created as the last sheet, with a unique default name.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->createSheet();\n```\n\n----------------------------------------\n\nTITLE: Writing UTF-8 CSV files with BOM - PHP\nDESCRIPTION: This code snippet demonstrates how to enable the BOM (Byte Order Mark) file header when writing UTF-8 CSV files. This is necessary for Excel to correctly interpret characters outside the ASCII range. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setUseBOM(true);\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Array Formulas in PhpSpreadsheet (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable array formula support in PhpSpreadsheet using either the preferred instance method or the less preferred static method. This is a necessary step before using array formulas in your spreadsheet calculations. The instance variable always takes precedence if initialized.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// preferred method\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::getInstance($spreadsheet)\n    ->setInstanceArrayReturnType(\n        \\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::RETURN_ARRAY_AS_ARRAY);\n// or less preferred\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::setArrayReturnType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::RETURN_ARRAY_AS_ARRAY);\n```\n\n----------------------------------------\n\nTITLE: Creating Reader with IOFactory::createReader()\nDESCRIPTION: This snippet shows how to create a reader object using `IOFactory::createReader()` by specifying the file type.  This is a more flexible approach than instantiating the reader directly. It requires `$inputFileType` and `$inputFileName` to be set.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Xls';\n//    $inputFileType = 'Xlsx';\n//    $inputFileType = 'Xml';\n//    $inputFileType = 'Ods';\n//    $inputFileType = 'Slk';\n//    $inputFileType = 'Gnumeric';\n//    $inputFileType = 'Csv';\n$inputFileName = './sampleData/example1.xls';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Reading Formatted Numbers from CSV - PHP\nDESCRIPTION: This example illustrates how to handle formatted numbers in CSV files using PhpSpreadsheet. It enables the `castFormattedNumberToNumeric()` method to convert numbers with thousands separators or non-standard decimal separators to numeric values based on the server's locale settings.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Csv';\n$inputFileName = './sampleData/example1.de.csv';\n\n/** It may be necessary to call setlocale() first if this is not your default locale  **/\n// setlocale(LC_ALL, 'de_DE.UTF-8', 'deu_deu');\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Enable loading numeric values formatted with German , decimal separator and . thousands separator  **/\n$reader->castFormattedNumberToNumeric(true);\n\n/**  Load the file to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Flags\nDESCRIPTION: This snippet shows how to set reader flags using the `setFlags()` method to control how data is loaded, such as ignoring empty cells or loading charts. It uses bitwise OR to combine multiple flags. This method uses an `$inputFileName` and `$inputFileType` variables.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Xlsx';\n$inputFileName = './sampleData/example1.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/** Set additional flags before the call to load() */\n$reader->setFlags(IReader::IGNORE_EMPTY_CELLS | IReader::LOAD_WITH_CHARTS);\n$reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Iterating over Rows and Cells with Iterators in PHP\nDESCRIPTION: This snippet illustrates how to use PhpSpreadsheet's built-in iterators to loop through rows and columns in a worksheet directly. This provides more flexibility, allowing access to the Cell object itself, including its value, style, and merge status.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$rowIterator = $worksheet->getRowIterator();\nforeach ($rowIterator as $row) {\n    $columnIterator = $row->getCellIterator();\n    foreach ($columnIterator as $cell) {\n        // Do something with the cell here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal and Thousands Separators Globally - PHP\nDESCRIPTION: This code snippet demonstrates how to set the decimal and thousands separators as global options. These settings affect not only CSV exports, but also HTML and PDF. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper::setDecimalSeparator('.');\n\\PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper::setThousandsSeparator(',');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper::setDecimalSeparator(',');\n\\PhpOffice\\PhpSpreadsheet\\Shared\\StringHelper::setThousandsSeparator('.');\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Formulas PHP\nDESCRIPTION: This code demonstrates how to set the locale for formulas in PhpSpreadsheet. It uses the `setLocale()` method to set the locale, and if the specified locale is not available, it reverts to the default English settings. The code also demonstrates how to translate formulas to and from the defined locale using `translateFormulaToLocale()` and `translateFormulaToEnglish()`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$locale = 'ru';\n$validLocale = \\PhpOffice\\PhpSpreadsheet\\Settings::setLocale($locale);\nif (!$validLocale) {\n    echo 'Unable to set locale to '.$locale.\" - reverting to en_us<br />\\n\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$formula = $spreadsheet->getActiveSheet()->getCell('B8')->getValue();\n$translatedFormula = \\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::getInstance()->translateFormulaToLocale($formula);\n```\n\nLANGUAGE: php\nCODE:\n```\n$formula = '=ДНЕЙ360(ДАТА(2010;2;5);ДАТА(2010;12;31);ИСТИНА)';\n```\n\nLANGUAGE: php\nCODE:\n```\n$internalFormula = \\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::getInstance()->translateFormulaToEnglish($formula);\n$spreadsheet->getActiveSheet()->setCellValue('B8',$internalFormula);\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Second Conditional Formatting Rule\nDESCRIPTION: This code snippet demonstrates how to add a second conditional formatting rule to highlight values that are less than 10 in the A1:A10 range. Similar to the first example, it uses the `Conditional` class, but this time with the `OPERATOR_LESSTHAN` operator and a different color.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$conditional2 = new \\PhpOffice\\PhpSpreadsheet\\Style\\Conditional();\n$conditional2->setConditionType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::CONDITION_CELLIS);\n$conditional2->setOperatorType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::OPERATOR_LESSTHAN);\n$conditional2->addCondition(10);\n$conditional2->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_DARKRED);\n$conditional2->getStyle()->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID);\n$conditional2->getStyle()->getFill()->getStartColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_RED);\n\n$conditionalStyles = $spreadsheet->getActiveSheet()->getStyle('A1:A10')->getConditionalStyles();\n$conditionalStyles[] = $conditional2;\n\n$spreadsheet->getActiveSheet()->getStyle('A1:A10')->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Reading CSV into an existing Spreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to read a CSV file and import its data into an existing PhpSpreadsheet spreadsheet object. It sets the delimiter, enclosure, and sheet index for the CSV reader. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$reader->setDelimiter(';');\n$reader->setEnclosure('\"');\n$reader->setSheetIndex(5);\n\n$reader->loadIntoExisting(\"05featuredemo.csv\", $spreadsheet);\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet File with Specific Readers\nDESCRIPTION: This snippet shows how to load a spreadsheet file by specifying an array of reader types to test against.  This is useful when the file extension is misleading. It requires `$inputFileName` and `$testAgainstFormats` to be defined.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n$testAgainstFormats = [\n    \\PhpOffice\\PhpSpreadsheet\\IOFactory::READER_XLS,\n    \\PhpOffice\\PhpSpreadsheet\\IOFactory::READER_HTML,\n];\n\n/** Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName, 0, $testAgainstFormats);\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Size for Column Width\nDESCRIPTION: Configuring PhpSpreadsheet to automatically adjust column width based on content.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Formatting with Expressions\nDESCRIPTION: This code snippet demonstrates how to use the Expression Wizard to create conditional formatting based on Excel formulas. It applies different styles based on whether a cell contains an odd or even number, demonstrating the use of ISODD and ISEVEN functions.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'A2:C11';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\Expression $expressionWizard */\n$expressionWizard = $wizardFactory->newRule(Wizard::EXPRESSION);\n\n$expressionWizard->expression('ISODD(A1)')\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $expressionWizard->getConditional();\n\n$expressionWizard->expression('ISEVEN(A1)')\n    ->setStyle($yellowStyle);\n$conditionalStyles[] = $expressionWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($expressionWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Write a Specific Worksheet to PDF\nDESCRIPTION: This code demonstrates how to specify which worksheet to write to a PDF file by setting the sheet index. The `setSheetIndex()` method is used to select the desired sheet before saving to PDF.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$writer->setSheetIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Adding a Worksheet with Title - PhpSpreadsheet\nDESCRIPTION: Creates a new worksheet with a specified title and adds it to the PhpSpreadsheet object at a specific index. Requires the \\PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet class. The index determines the position of the new worksheet, and other sheets are shifted accordingly.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Create a new worksheet called \"My Data\"\n$myWorkSheet = new \\PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet($spreadsheet, 'My Data');\n\n// Attach the \"My Data\" worksheet as the first worksheet in the Spreadsheet object\n$spreadsheet->addSheet($myWorkSheet, 0);\n```\n\n----------------------------------------\n\nTITLE: Combining Named Ranges and Formulae for Timesheet\nDESCRIPTION: This code demonstrates how to combine named ranges and named formulae to create a dynamic timesheet. It defines CHARGE_RATE as an absolute cell reference and HOURS_PER_DAY as a relative cell reference. It also defines DAILY_CHARGE and COLUMN_TOTALS as named formulae.  It populates the timesheet with sample data, calculates daily charges, and calculates the total charge.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/defined-names.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Set up some basic data for a timesheet\n$worksheet\n    ->setCellValue('A1', 'Charge Rate/hour:')\n    ->setCellValue('B1', '7.50')\n    ->setCellValue('A3', 'Date')\n    ->setCellValue('B3', 'Hours')\n    ->setCellValue('C3', 'Charge');\n\n// Define named ranges\n// CHARGE_RATE is an absolute cell reference that always points to cell B1\n$spreadsheet->addNamedRange(new NamedRange('CHARGE_RATE', $worksheet, '=$B$1'));\n// HOURS_PER_DAY is a relative cell reference that always points to column B, but to a cell in the row where it is used\n$spreadsheet->addNamedRange(new NamedRange('HOURS_PER_DAY', $worksheet, '=$B1'));\n// Set up the formula for calculating the daily charge\n$spreadsheet->addNamedFormula(new NamedFormula('DAILY_CHARGE', null, '=HOURS_PER_DAY*CHARGE_RATE'));\n// Set up the formula for calculating the column totals\n$spreadsheet->addNamedFormula(new NamedFormula('COLUMN_TOTALS', null, '=SUM(COLUMN_DATA_VALUES)'));\n\n\n$workHours = [\n    '2020-0-06' => 7.5,\n    '2020-0-07' => 7.25,\n    '2020-0-08' => 6.5,\n    '2020-0-09' => 7.0,\n    '2020-0-10' => 5.5,\n];\n\n// Populate the Timesheet\n$startRow = 4;\n$row = $startRow;\nforeach ($workHours as $date => $hours) {\n    $worksheet\n        ->setCellValue(\"A{$row}\", $date)\n        ->setCellValue(\"B{$row}\", $hours)\n        ->setCellValue(\"C{$row}\", '=DAILY_CHARGE');\n    ++$row;\n}\n$endRow = $row - 1;\n\n// COLUMN_TOTAL is another relative cell reference that always points to the same range of rows but to cell in the column where it is used\n$spreadsheet->addNamedRange(new NamedRange('COLUMN_DATA_VALUES', $worksheet, \"=A\\${$startRow}:A\\${$endRow}\"));\n\n++$row;\n$worksheet\n    ->setCellValue(\"B{$row}\", '=COLUMN_TOTALS')\n    ->setCellValue(\"C{$row}\", '=COLUMN_TOTALS');\n\necho sprintf(\n    'Worked %.2f hours at a rate of %.2f - Charge to the client is %.2f',\n    $worksheet->getCell(\"B{$row}\")->getCalculatedValue(),\n    $worksheet->getCell('B1')->getValue(),\n    $worksheet->getCell(\"C{$row}\")->getCalculatedValue()\n), PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Copying a Worksheet within the same workbook - PhpSpreadsheet\nDESCRIPTION: Copies a worksheet within the same workbook by cloning the existing sheet and adding it as a new sheet. The title of the cloned worksheet must be unique.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$clonedWorksheet = clone $spreadsheet->getSheetByName('Worksheet 1');\n$clonedWorksheet->setTitle('Copy of Worksheet 1'); // must be unique\n$spreadsheet->addSheet($clonedWorksheet);\n```\n\n----------------------------------------\n\nTITLE: Writing Formula to Cell (PHP)\nDESCRIPTION: Writes a formula to a cell. The formula must start with '='. Formulas are stored in English format internally.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('B8','=IF(C4>500,\"profit\",\"loss\")');\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Writing Options - PHP\nDESCRIPTION: This code snippet demonstrates how to set various options for the CSV writer, such as delimiter, enclosure, line ending, and sheet index. These options allow you to customize the CSV output to match specific requirements. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setDelimiter(';');\n$writer->setEnclosure('\"');\n$writer->setLineEnding(\"\\r\\n\");\n$writer->setSheetIndex(0);\n\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Reading Only Data Values with PhpSpreadsheet Reader\nDESCRIPTION: This code snippet demonstrates how to configure the PhpSpreadsheet reader to read only the data values and formulae from a spreadsheet file, ignoring any cell formatting information. This can be useful when only the cell values are needed and formatting is not important. The `setReadDataOnly(true)` method is used.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xls';\n$inputFileName = './sampleData/example1.xls';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell data  **/\n$reader->setReadDataOnly(true);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format Mask for Leading Zeros in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to use a number format mask to display a numeric value with leading zeros. It sets the cell value as a number and then applies a format mask to control its presentation.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Set cell A9 with a numeric value\n$spreadsheet->getActiveSheet()->setCellValue('A9', 1513789642);\n// Set a number format mask to display the value as 11 digits with leading zeroes\n$spreadsheet->getActiveSheet()->getStyle('A9')\n    ->getNumberFormat()\n    ->setFormatCode(\n        '00000000000'\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting a Row's Height in PHP\nDESCRIPTION: This snippet demonstrates how to set a row's height in a PhpSpreadsheet using the `getRowDimension()` and `setRowHeight()` methods. The height is measured in points by default.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension('10')->setRowHeight(100);\n```\n\n----------------------------------------\n\nTITLE: Inserting New Rows with Formula Adjustment PHP\nDESCRIPTION: This snippet demonstrates how to insert new rows before a specified row number, and how the formula in other cells adjusts automatically to reflect the insertion. The first argument is the starting row index and the second argument is the number of rows to insert.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->insertNewRowBefore(7, 2);\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with TextValue Wizard (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a conditional formatting rule using the `TextValue` Wizard to check if a cell contains specific text. It showcases a simpler approach compared to manually creating the conditional rule. The snippet checks if the cell contains \"LL\" and applies a green style.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'A14:B16';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\TextValue $textWizard */\n$textWizard = $wizardFactory->newRule(Wizard::TEXT_VALUE);\n\n$textWizard->contains('LL')\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $textWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($textWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Options - PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to set options for the CSV reader, such as input encoding, delimiter, enclosure and sheet index, using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv` reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$reader->setInputEncoding('CP1252');\n$reader->setDelimiter(';');\n$reader->setEnclosure('');\n$reader->setSheetIndex(0);\n\n$spreadsheet = $reader->load(\"sample.csv\");\n```\n\n----------------------------------------\n\nTITLE: Calculating a Formula in a Cell PHP\nDESCRIPTION: This snippet demonstrates how to calculate the value of a formula in a specific cell using the `getCalculatedValue()` method. This method evaluates the formula and returns the result. If the cell does not contain a formula, it simply returns the cell's value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('E11')->getCalculatedValue();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Width PHP\nDESCRIPTION: This snippet sets the default column width for all columns in the active worksheet.  The `setWidth()` method is used to specify the desired width. The default unit of measure is the number of characters that will be displayed in the default font. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_112\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getDefaultColumnDimension()->setWidth(12);\n```\n\n----------------------------------------\n\nTITLE: Read Specific Cells with Custom Filter - PhpSpreadsheet\nDESCRIPTION: This code defines a custom read filter that implements the `\\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter` interface.  The `readCell` method determines whether a cell should be read based on its row number. In this case, it reads row 1 and rows 20 to 30. Then it loads the spreadsheet with the filter.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass MyReadFilter implements \\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter {\n\n    public function readCell($columnAddress, $row, $worksheetName = '') {\n        // Read title row and rows 20 - 30\n        if ($row == 1 || ($row >= 20 && $row <= 30)) {\n            return true;\n        }\n        return false;\n    }\n}\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xls();\n$reader->setReadFilter( new MyReadFilter() );\n$spreadsheet = $reader->load(\"06largescale.xls\");\n```\n\n----------------------------------------\n\nTITLE: Applying AutoFilter in PHP\nDESCRIPTION: This code snippet retrieves the active sheet's auto-filter and explicitly applies the filter to show or hide rows based on the filter criteria. This is required because PhpSpreadsheet does not automatically apply the filter when it is set or changed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$autoFilter = $spreadsheet->getActiveSheet()->getAutoFilter();\n$autoFilter->showHideRows();\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with Sales Grid Expression\nDESCRIPTION: This code showcases the application of conditional formatting to a sales grid using an expression to highlight sales in the USA region. It uses the Expression Wizard with an Excel formula to identify rows where the region is 'USA' and applies a specific style with USD accounting format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$greenStyleMoney = clone $greenStyle;\n$greenStyleMoney->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_ACCOUNTING_USD);\n\n$cellRange = 'A17:D22';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\Expression $expressionWizard */\n$expressionWizard = $wizardFactory->newRule(Wizard::EXPRESSION);\n\n$expressionWizard->expression('$C1=\"USA\"')\n    ->setStyle($greenStyleMoney);\n$conditionalStyles[] = $expressionWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($expressionWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting Fit to Page Scaling Options PHP\nDESCRIPTION: This code demonstrates how to set the scaling options for fitting a worksheet to a page in PhpSpreadsheet. It shows how to use `setFitToWidth()` and `setFitToHeight()` to control the number of pages the worksheet should fit to horizontally and vertically. Setting `setFitToWidth` or `setFitToHeight` will trigger `setFitToPage(TRUE)`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()->setFitToWidth(1);\n$spreadsheet->getActiveSheet()->getPageSetup()->setFitToHeight(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Images Root for HTML Writing - PHP\nDESCRIPTION: This code snippet shows how to explicitly set the images root for the generated HTML file.  This is useful for specifying the correct path to images when embedding the HTML in a web page. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\n$writer->setImagesRoot('http://www.example.com');\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with Custom Reader Configuration (IOFactory) PHP\nDESCRIPTION: This code snippet shows how to load a spreadsheet file using PhpSpreadsheet's IOFactory, explicitly creating a reader instance to set custom configurations before loading. The `createReaderForFile()` method creates a reader instance. `setReadDataOnly(true)` enables reading only cell data and ignoring styling and data validation.  Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReaderForFile(\"05featuredemo.xlsx\");\n$reader->setReadDataOnly(true);\n$reader->load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Writing CSV Files with Varying Numbers of Columns - PHP\nDESCRIPTION: This code snippet demonstrates how to enable variable columns when writing a CSV file. This allows each row to have a different number of columns, which differs from Excel's default behavior. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setVariableColumns(true);\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Setting a Basic Cell Value Formula (PHP)\nDESCRIPTION: This snippet shows how to set a simple formula in a cell using PhpSpreadsheet. The formula calculates the product of values in cells B2 and C2. This is a fundamental operation for performing calculations within a spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('D2','=$B2*$C2');\n```\n\n----------------------------------------\n\nTITLE: Set Orientation\nDESCRIPTION: This shows how to set the orientation for all pages in the PDF file, overriding the worksheet's default settings, using the `setOrientation()` method.  The orientation is set to landscape.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$writer->setOrientation(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::ORIENTATION_LANDSCAPE);\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Hyperlink URL in PHP\nDESCRIPTION: Sets the URL of a hyperlink associated with a cell in PhpSpreadsheet. This setter method is used to define the target URL of the hyperlink attached to a cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$cell->getHyperlink()->setUrl($url)\n```\n\n----------------------------------------\n\nTITLE: Setting custom cache implementation\nDESCRIPTION: This code snippet demonstrates how to set a custom PSR-16 cache implementation for PhpSpreadsheet.  It requires creating an instance of your custom cache and then using the `setCache` method to configure PhpSpreadsheet to use it. The cache must be PSR-16 compliant.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = new MyCustomPsr16Implementation();\n\n\\PhpOffice\\PhpSpreadsheet\\Settings::setCache($cache);\n```\n\n----------------------------------------\n\nTITLE: Overriding Value Binder for Individual Cells in PhpSpreadsheet\nDESCRIPTION: This code shows how to override the default value binder for specific cells using the `setValue()` method. It first sets an `AdvancedValueBinder` as the default and then uses a `StringValueBinder` when setting the value of cell 'A2', ensuring that the value is stored as a string. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet = new Spreadsheet();\n// Old method using static property\nCell::setValueBinder(new AdvancedValueBinder());\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet->setValueBinder(new AdvancedValueBinder());\n\n$value = '12.5%';\n\n$cell = $spreadsheet->getActiveSheet()->getCell('A1');\n// Value will be set as a number 0.125 with a format mask '0.00%'\n$cell->setValue($value); // Using the Advanced Value Binder\n\n$cell = $spreadsheet->getActiveSheet()->getCell('A2');\n// Value will be set as a string '12.5%' with a format mask 'General'\n$cell->setValue($value, new StringValueBinder()); // Overriding the Advanced Value Binder\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis cache\nDESCRIPTION: This code configures PhpSpreadsheet to use Redis for cell caching. It initializes a Redis client, connects to the Redis server, creates a Redis cache pool, and then creates a SimpleCacheBridge to adapt it to the PSR-16 interface. Finally, it sets the cache on the PhpSpreadsheet settings.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$client = new \\Redis();\n$client->connect('127.0.0.1', 6379);\n$pool = new \\Cache\\Adapter\\Redis\\RedisCachePool($client);\n$simpleCache = new \\Cache\\Bridge\\SimpleCache\\SimpleCacheBridge($pool);\n\n\\PhpOffice\\PhpSpreadsheet\\Settings::setCache($simpleCache);\n```\n\n----------------------------------------\n\nTITLE: Getting Calculated Cell Value (PHP)\nDESCRIPTION: Gets the calculated value of a cell containing a formula. This requires the calculation engine to be enabled.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$value = $spreadsheet->getActiveSheet()->getCell('B8')->getCalculatedValue();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Font Style - PHP\nDESCRIPTION: This snippet demonstrates how to set the default font style for an entire PhpSpreadsheet workbook. It sets the default font name to Arial and the default font size to 8.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getDefaultStyle()->getFont()->setName('Arial');\n$spreadsheet->getDefaultStyle()->getFont()->setSize(8);\n```\n\n----------------------------------------\n\nTITLE: Reading a Cell's Formatting Mask with PhpSpreadsheet\nDESCRIPTION: This snippet shows how to retrieve the format mask applied to a cell using PhpSpreadsheet. It uses the getStyle()->getNumberFormat()->getFormatCode() methods to access the format code for a specified cell, providing information about how the cell's value is displayed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump($worksheet->getCell('C4')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n\nvar_dump($worksheet->getCell('H4')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Enclosure Requirement - PHP\nDESCRIPTION: This code snippet shows how to configure the CSV writer to only use the enclosure character when it's required. By default, all CSV fields are wrapped in the enclosure character. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setEnclosureRequired(false);\n\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Manual Conditional Formatting (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a conditional formatting rule manually, without using the Wizard, for string comparison using `CONDITION_CONTAINSTEXT`. It highlights the necessary steps, including setting the condition type, operator type, text attribute, and condition formula. The example checks if the cell value contains \"LL\".\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'A14:B16';\n$conditionalStyles = [];\n$conditional = new Conditional();\n// Remember to use the correct Condition Type\n$conditional->setConditionType(Conditional::CONDITION_CONTAINSTEXT);\n// Remember to use the correct Operator Type\n$conditional->setOperatorType(Conditional::OPERATOR_CONTAINSTEXT);\n// Remember to set the text attribute\n// Remember to wrap the string literal\n$conditional->setText('\"LL\"');\n// Remember that the condition should be the first element in an array\n// Remember that we need a specific formula for this Conditional \n// Remember to wrap the string literal\n// Remember to use the top-left cell of the range that we want to apply this rule to\n$conditional->setConditions(['NOT(ISERROR(SEARCH(\"LL\",A14)))']);\n$conditional->setStyle($greenStyle);\n\n$conditionalStyles[]\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($cellRange)\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting Password Algorithm for Worksheet Protection\nDESCRIPTION: This snippet shows how to set the hashing algorithm and spin count for password-based worksheet protection in PhpSpreadsheet. It's important to set these before setting the password. Dependencies: PhpSpreadsheet library and the `Protection` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$protection = $spreadsheet->getActiveSheet()->getProtection();\n$protection->setAlgorithm(Protection::ALGORITHM_SHA_512);\n$protection->setSpinCount(20000);\n$protection->setPassword('PhpSpreadsheet');\n```\n\n----------------------------------------\n\nTITLE: TextValue Wizard with Cell Reference (PHP)\nDESCRIPTION: This snippet demonstrates using the `TextValue` Wizard to apply conditional formatting based on whether a cell begins with the value from another cell, specified by cell reference.  It showcases how to use absolute references by pinning column D and row 1 with the `$` symbol, along with `VALUE_TYPE_CELL`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$textWizard->beginsWith('$D$1', Wizard::VALUE_TYPE_CELL)\n    ->setStyle($yellowStyle);\n```\n\n----------------------------------------\n\nTITLE: Generate Excel with Multiple Sheets from HTML\nDESCRIPTION: This example demonstrates how to create an Excel file with multiple worksheets, each populated with data from separate HTML strings. It loads the first HTML string into the spreadsheet, sets the sheet index to 1, and then loads the second HTML string into the spreadsheet.  Finally it saves the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$firstHtmlString = '<table>\n                  <tr>\n                      <td>Hello World</td>\n                  </tr>\n              </table>';\n$secondHtmlString = '<table>\n                  <tr>\n                      <td>Hello World</td>\n                  </tr>\n              </table>';\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Html();\n$spreadsheet = $reader->loadFromString($firstHtmlString);\n$reader->setSheetIndex(1);\n$spreadhseet = $reader->loadFromString($secondHtmlString, $spreadsheet);\n\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Xls');\n$writer->save('write.xls');\n```\n\n----------------------------------------\n\nTITLE: Writing CSV Files with Desired Encoding - PHP\nDESCRIPTION: This code snippet shows how to specify the output encoding for CSV files using PHP's mb_convert_encoding function. This allows you to write CSV files with specific encodings, such as SJIS-WIN. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setUseBOM(false);\n$writer->setOutputEncoding('SJIS-WIN');\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Using Errors Wizard in PHP\nDESCRIPTION: This code demonstrates how to use the Errors wizard to create conditional formatting rules for cells containing errors and those that don't. It creates an Errors wizard instance, sets a style for error cells, retrieves the conditional style, then sets a style for non-error cells and retrieves that conditional style, and applies the styles to the specified cell range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$cellRange = 'C2:C6';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\Errors $errorsWizard */\n$errorsWizard = $wizardFactory->newRule(Wizard::ERRORS);\n\n$errorsWizard->setStyle($redStyle);\n$conditionalStyles[] = $errorsWizard->getConditional();\n\n$errorsWizard->notError()\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $errorsWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($errorsWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Writing Date with Excel Date Value (PHP)\nDESCRIPTION: Writes an Excel date value (number of days since 1900-01-01) to a cell and sets the cell's number format to display it as a date.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Excel-date/time\n$spreadsheet->getActiveSheet()->setCellValue('D1', 39813)\n$spreadsheet->getActiveSheet()->getStyle('D1')\n    ->getNumberFormat()\n    ->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_DATE_YYYYMMDDSLASH);\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Formatting Rule Using Wizard\nDESCRIPTION: This code snippet demonstrates how to create a conditional formatting rule using the `ConditionalFormatting\\Wizard` class to highlight cells in the range A1:A10 that contain values greater than 80. The wizard simplifies the process by handling the operator and condition settings. Dependencies include PhpSpreadsheet version 1.22.0 or later.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$wizardFactory = new \\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard('A1:A10');\n$wizard = $wizardFactory->newRule(\\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard::CELL_VALUE);\n$wizard->greaterThan(80);\n$wizard->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_DARKGREEN);\n$wizard->getStyle()->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID);\n$wizard->getStyle()->getFill()->getStartColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_GREEN);\n\n$conditional = $wizard->getConditional();\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Properties (Fluent)\nDESCRIPTION: This code snippet showcases the fluent interface approach in PhpSpreadsheet. It demonstrates how to chain method calls on the `$spreadsheet->getProperties()` object to set multiple properties in a concise and readable manner. This approach reduces the number of calls to `getProperties()` and improves code maintainability.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/architecture.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()\n    ->setCreator(\"Maarten Balliauw\")\n    ->setLastModifiedBy(\"Maarten Balliauw\")\n    ->setTitle(\"Office 2007 XLSX Test Document\")\n    ->setSubject(\"Office 2007 XLSX Test Document\")\n    ->setDescription(\"Test document for Office 2007 XLSX, generated using PHP classes.\")\n    ->setKeywords(\"office 2007 openxml php\")\n    ->setCategory(\"Test result file\");\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color for a Cell Range - PHP\nDESCRIPTION: This snippet shows how to set the background color to red for a range of cells (B3:B7) in a PhpSpreadsheet worksheet. It uses the `getStyle()` method with a cell range parameter to apply the fill color to all cells within the range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('B3:B7')->getFill()\n    ->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID)\n    ->getStartColor()->setARGB('FFFF0000');\n```\n\n----------------------------------------\n\nTITLE: Getting Calculated Value from Array Formula (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve the calculated value of a cell within an array formula's spillage range. If returning arrays has been enabled, `getCalculatedValue` will return an array when appropriate, and will populate the spill range. If returning arrays has not been enabled, PhpSpreadsheet will return the single value from the topmost leftmost cell, and will leave other cells unchanged.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n// Will return integer 1, the value for that cell within the array\n$a1result = $spreadsheet->getActiveSheet()->getCell('A1')->getCalculatedValue();\n```\n\n----------------------------------------\n\nTITLE: Writing XLSX Spreadsheet (Disable Formula Pre-calculation) PHP\nDESCRIPTION: This code writes a spreadsheet to an XLSX file, disabling formula pre-calculation. Setting `setPreCalculateFormulas(false)` prevents the writer from pre-calculating formulas, which can improve performance for large spreadsheets. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx($spreadsheet);\n$writer->setPreCalculateFormulas(false);\n$writer->save(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Reading Cell Formula (PHP)\nDESCRIPTION: Reads the formula from a cell. The returned value will be the formula string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$formula = $spreadsheet->getActiveSheet()->getCell('B8')->getValue();\n```\n\n----------------------------------------\n\nTITLE: Writing a Spreadsheet to HTML - PHP\nDESCRIPTION: This code snippet shows how to write a PhpSpreadsheet spreadsheet object to an HTML file.  By default, only the first worksheet is written. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\n\n$writer->save(\"05featuredemo.htm\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Table Formatting in HtmlWriter (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable conditional formatting, which is required for table formatting, when using the HtmlWriter in PHPOffice PhpSpreadsheet. It instantiates the HtmlWriter with a Spreadsheet object and then sets the conditional formatting option to true. This allows tables to be rendered correctly when writing to HTML.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/tables.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n        $writer = new HtmlWriter($spreadsheet);\n        $writer->setConditionalFormatting(true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reader and Loading a File\nDESCRIPTION: This code snippet demonstrates how to create a specific reader object (e.g., Xls, Xlsx) and then use it to load a spreadsheet file.  This method is useful when the file type is known. It requires the `$inputFileName` variable to be set.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n\n/** Create a new Xls Reader  **/\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xls();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xml();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Ods();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Slk();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Gnumeric();\n//    $reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n/** Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Writing String Starting with '=' (PHP)\nDESCRIPTION: Writes a string that begins with an '=' character to a cell. The `setCellValueExplicit()` method must be used with the `TYPE_STRING` data type to prevent it from being interpreted as a formula.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->setCellValueExplicit(\n        'B8',\n        '=IF(C4>500,\"profit\",\"loss\")',\n        \\PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_STRING\n    );\n```\n\n----------------------------------------\n\nTITLE: Changing Cell Range for Conditional Formatting\nDESCRIPTION: This example shows how to apply the same conditional formatting rule to multiple different cell ranges by using the `setCellRange()` method between calls to `getConditional()`. This avoids duplicating the entire conditional formatting setup.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$wizardFactory = new Wizard();\n/** @var Wizard\\CellValue $wizard */\n$wizard = $wizardFactory->newRule(Wizard::CELL_VALUE);\n\n// Apply the wizard conditional to cell range A2:A10\n$cellRange = 'A2:A10';\n$conditionalStyles = [];\n$wizard->between('$B1', Wizard::VALUE_TYPE_CELL)\n    ->and('$C1', Wizard::VALUE_TYPE_CELL)\n    ->setStyle($greenStyle);\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($wizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n\n// Apply the same wizard conditional to cell range E2:E10\n$cellRange = 'E2:E10';\n$wizard->setCellRange($cellRange);\n$conditionalStyles = [];\n$wizard->between('$B1', Wizard::VALUE_TYPE_CELL)\n    ->and('$C1', Wizard::VALUE_TYPE_CELL)\n    ->setStyle($greenStyle);\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($wizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Merging Cells in PHP\nDESCRIPTION: This snippet demonstrates how to merge cells in a PhpSpreadsheet using the `mergeCells()` method. It merges the specified range of cells into a single cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_93\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->mergeCells('A18:E22');\n```\n\n----------------------------------------\n\nTITLE: Writing XLSX Spreadsheet (Office 2003 Compatibility) PHP\nDESCRIPTION: This code enables Office 2003 compatibility when writing an XLSX file. This can address compatibility issues with older versions of Excel. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    $writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx($spreadsheet);\n    $writer->setOffice2003Compatibility(true);\n    $writer->save(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Skipping Empty Cells with Cell Iterator in PHP\nDESCRIPTION: This code snippet demonstrates how to configure the Cell Iterator to only return cells that contain a value, skipping empty cells. The `setIterateOnlyExistingCells(true)` method is called on the Cell Iterator to enable this behavior.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$rowIterator = $worksheet->getRowIterator(1, $maxDataRow);\nforeach ($rowIterator as $row) {\n    $columnIterator = $row->getCellIterator();\n    $columnIterator->setIterateOnlyExistingCells(true);\n    foreach ($columnIterator as $cell) {\n        // Do something with the cell here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet Protection in PHP\nDESCRIPTION: Sets the protection settings for a worksheet to prevent editing. This setter method enables sheet protection, restricting modifications to the sheet's content.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n$sheet->getProtection()->setSheet(true)\n```\n\n----------------------------------------\n\nTITLE: Enable Conditional Formatting in HtmlWriter - PHP\nDESCRIPTION: This code snippet demonstrates how to enable conditional formatting when using the HtmlWriter in PHPSpreadsheet. It initializes the HtmlWriter and then sets the 'conditionalFormatting' option to true, which ensures that conditional formatting rules are applied when the spreadsheet is written to HTML.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$writer = new HtmlWriter($spreadsheet);\n$writer->setConditionalFormatting(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Security with PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set worksheet-level security using PhpSpreadsheet. It sets a password for the sheet and configures permissions for sorting, inserting rows, and formatting cells. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$protection = $spreadsheet->getActiveSheet()->getProtection();\n$protection->setPassword('PhpSpreadsheet');\n$protection->setSheet(true);\n$protection->setSort(false);\n$protection->setInsertRows(false);\n$protection->setFormatCells(false);\n```\n\n----------------------------------------\n\nTITLE: Matching Blanks with Simple Filter PHP\nDESCRIPTION: Creates a simple filter rule to select blank cells in a column. This filters the column to only show rows where the value in that column is empty.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        ''\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcache cache\nDESCRIPTION: This code configures PhpSpreadsheet to use Memcache for cell caching. It initializes a Memcache client, connects to the Memcache server, creates a Memcache cache pool, and then creates a SimpleCacheBridge to adapt it to the PSR-16 interface. Finally, it sets the cache on the PhpSpreadsheet settings.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$client = new \\Memcache();\n$client->connect('localhost', 11211);\n$pool = new \\Cache\\Adapter\\Memcache\\MemcacheCachePool($client);\n$simpleCache = new \\Cache\\Bridge\\SimpleCache\\SimpleCacheBridge($pool);\n\n\\PhpOffice\\PhpSpreadsheet\\Settings::setCache($simpleCache);\n```\n\n----------------------------------------\n\nTITLE: Setting Row Height with Units in PHP\nDESCRIPTION: This snippet sets a row's height in a PhpSpreadsheet specifying the unit of measure (UoM).  The `setRowHeight()` method accepts the height value and a string representing the UoM (e.g., 'pt', 'px', 'in', 'cm', 'mm').\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension('10')->setRowHeight(100, 'pt');\n```\n\n----------------------------------------\n\nTITLE: Writing All Worksheets to HTML - PHP\nDESCRIPTION: This code snippet shows how to write all worksheets to a single HTML file. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n$writer->writeAllSheets();\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Worksheet duplicateStyleArray to PhpSpreadsheet getStyle applyFromArray\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->duplicateStyleArray()` to PhpSpreadsheet's `$worksheet->getStyle($range)->applyFromArray($styles, $advanced)`. The old method duplicated a style array across a range, while the new method retrieves the style for a range and applies the style array to it.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$worksheet->duplicateStyleArray($styles, $range, $advanced);\n\n// After\n$worksheet->getStyle($range)->applyFromArray($styles, $advanced);\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Styles Using Style Array - PHP\nDESCRIPTION: This snippet demonstrates how to apply multiple styles to a cell (A3) using a style array. It sets the font to bold, the horizontal alignment to right, the top border to thin, and applies a gradient fill with specified colors.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$styleArray = [\n    'font' => [\n        'bold' => true,\n    ],\n    'alignment' => [\n        'horizontal' => \\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_RIGHT,\n    ],\n    'borders' => [\n        'top' => [\n            'borderStyle' => \\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THIN,\n        ],\n    ],\n    'fill' => [\n        'fillType' => \\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_GRADIENT_LINEAR,\n        'rotation' => 90,\n        'startColor' => [\n            'argb' => 'FFA0A0A0',\n        ],\n        'endColor' => [\n            'argb' => 'FFFFFFFF',\n        ],\n    ],\n];\n\n$spreadsheet->getActiveSheet()->getStyle('A3')->applyFromArray($styleArray);\n```\n\n----------------------------------------\n\nTITLE: Applying Data Validation to Cell Ranges\nDESCRIPTION: Applying existing validation rules to a range of cells. Compatible with PhpSpreadsheet release 3 and below.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$validation->setSqref('B5:B1048576');\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with Multiple Comparisons\nDESCRIPTION: This code demonstrates applying conditional formatting based on multiple criteria using the AND() function within an Excel expression. It highlights sales in the USA region during Q4 by combining two conditions in a single expression.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$expressionWizard->expression('AND($C1=\"USA\",$D1=\"Q4\")')\n    ->setStyle($greenStyleMoney);\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Sheets from XLSX PHP\nDESCRIPTION: This code reads an XLSX file, loading only the sheets with the specified names. It sets the `loadSheetsOnly` option on the reader with an array of sheet names. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx();\n$reader->setLoadSheetsOnly([\"Sheet 1\", \"My special sheet\"]);\n$spreadsheet = $reader->load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Reading Cell Values in PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to read cell values in PhpSpreadsheet using getValue(), getCalculatedValue(), and getFormattedValue(). It showcases the differences in the returned values depending on the method used, especially when dealing with formulas and number formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump($worksheet->getCell('C4')->getValue());\nvar_dump($worksheet->getCell('C4')->getCalculatedValue());\nvar_dump($worksheet->getCell('C4')->getFormattedValue());\n\nvar_dump($worksheet->getCell('H4')->getValue());\nvar_dump($worksheet->getCell('H4')->getCalculatedValue());\nvar_dump($worksheet->getCell('H4')->getFormattedValue());\n```\n\n----------------------------------------\n\nTITLE: Reading an ODS File - PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to read an Open/Libre Office .ods file using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Ods` reader. It instantiates the reader and uses the load method to load the spreadsheet data from the specified .ods file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Ods();\n$spreadsheet = $reader->load(\"05featuredemo.ods\");\n```\n\n----------------------------------------\n\nTITLE: Setting an Array Formula for Maximum Difference (PHP)\nDESCRIPTION: This snippet illustrates setting an array formula to find the maximum difference between two ranges of cells (B2:B6 and C2:C6). The MAX function is used to determine the highest difference, providing insight into the largest increase between corresponding values in the two ranges.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('F1','=MAX(B2:B6-C2:C6)');\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Modified Date/Time in PHP\nDESCRIPTION: Sets the 'Modified' property (last modified date and time) for the spreadsheet object in PhpSpreadsheet. This setter method updates the last modified timestamp of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setModified()\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel setCellValue to PhpSpreadsheet getCell setValue\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->setCellValue('A1', 'value', true)` to PhpSpreadsheet's `$worksheet->getCell('A1')->setValue('value')`.  Setting cell values now requires explicitly getting the cell object first and then setting its value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$cell = $worksheet->setCellValue('A1', 'value', true);\n\n// After\n$cell = $worksheet->getCell('A1')->setValue('value');\n```\n\n----------------------------------------\n\nTITLE: Setting Data Validation (Range) in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set data validation for a cell using PhpSpreadsheet to only allow numbers between 10 and 20.  Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$validation = $spreadsheet->getActiveSheet()->getCell('B3')\n    ->getDataValidation();\n$validation->setType( \\PhpOffice\\PhpSpreadsheet\\Cell\\DataValidation::TYPE_WHOLE );\n$validation->setErrorStyle( \\PhpOffice\\PhpSpreadsheet\\Cell\\DataValidation::STYLE_STOP );\n$validation->setAllowBlank(true);\n$validation->setShowInputMessage(true);\n$validation->setShowErrorMessage(true);\n$validation->setErrorTitle('Input error');\n$validation->setError('Number is not allowed!');\n$validation->setPromptTitle('Allowed input');\n$validation->setPrompt('Only numbers between 10 and 20 are allowed.');\n$validation->setFormula1(10);\n$validation->setFormula2(20);\n```\n\n----------------------------------------\n\nTITLE: Applying Autofilter to Range - PHP\nDESCRIPTION: This snippet demonstrates applying an autofilter to a range of cells in PhpSpreadsheet. It requires the PhpSpreadsheet library and sets up filtering options for the specified range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setAutoFilter('A1:C9');\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Sheet State PHP\nDESCRIPTION: This snippet sets the sheet state to hidden. The available sheet states are `SHEETSTATE_VISIBLE`, `SHEETSTATE_HIDDEN`, and `SHEETSTATE_VERYHIDDEN`. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_120\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->setSheetState(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet::SHEETSTATE_HIDDEN);\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Creation Date/Time in PHP\nDESCRIPTION: Retrieves the 'Created' property (creation date and time) from the spreadsheet object in PhpSpreadsheet. This getter method obtains the timestamp of when the spreadsheet was initially created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCreated()\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with Absolute Cell Reference (PHP)\nDESCRIPTION: This code snippet demonstrates how to apply conditional formatting based on the value of an absolute cell reference using the `CellValue` Wizard in PhpSpreadsheet. The value type `VALUE_TYPE_CELL` is used to specify that the value is a cell reference, and the cell reference is pinned with the `$` symbol to make it absolute. It uses cell H9 for comparison.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$wizard->equals('$H$9', Wizard::VALUE_TYPE_CELL);\n```\n\n----------------------------------------\n\nTITLE: Returning Null for Non-Existent Cells in PHP\nDESCRIPTION: This example shows how to configure the Cell Iterator to return a null value instead of creating a new cell if a cell does not exist in the Cell Collection. This can help to reduce memory consumption. The `setIfNotExists(CellIterator::IF_NOT_EXISTS_RETURN_NULL)` method configures the behavior of the Cell Iterator.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$rowIterator = $worksheet->getRowIterator(1, $maxDataRow);\nforeach ($rowIterator as $row) {\n    $columnIterator = $row->getCellIterator();\n    $columnIterator->setIfNotExists(CellIterator::IF_NOT_EXISTS_RETURN_NULL);\n    foreach ($columnIterator as $cell) {\n        if ($cell !== null) {\n            // Do something with the cell here.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Value Binder with Csv Reader in PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set the Advanced Value Binder for a PhpSpreadsheet reader, specifically when reading a CSV file.  The Value Binder automatically identifies data types like dates, times, and booleans.  Dependencies include PhpSpreadsheet and a CSV file as input.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Csv';\n$inputFileName = './sampleData/example1.tsv';\n\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n$reader->setDelimiter(\"\\t\");\n\n/**  Tell PhpSpreadsheet that we want to use the Advanced Value Binder  **/\n// Old method using static property\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n// Preferred method using dynamic property since 3.4.0\n$reader::setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Adding Image to Header - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to add an image to the header of a worksheet using PhpSpreadsheet.  It creates a `HeaderFooterDrawing` object, sets its properties (name, path, height), and then adds it to the header using `addImage()`. The image is placed in the left section of the header.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$drawing = new \\PhpOffice\\PhpSpreadsheet\\Worksheet\\HeaderFooterDrawing();\n$drawing->setName('PhpSpreadsheet logo');\n$drawing->setPath('./images/PhpSpreadsheet_logo.png');\n$drawing->setHeight(36);\n$spreadsheet->getActiveSheet()->getHeaderFooter()->addImage($drawing, \\PhpOffice\\PhpSpreadsheet\\Worksheet\\HeaderFooter::IMAGE_HEADER_LEFT);\n```\n\n----------------------------------------\n\nTITLE: Adding Rich Text to a Cell (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to add rich text to a cell in PhpSpreadsheet. It instantiates a `RichText` object, adds plain text and styled text runs (using `createTextRun`), sets font properties like bold, italic, and color for the styled text, and then sets the `RichText` object as the value of a cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n$richText = new \\PhpOffice\\PhpSpreadsheet\\RichText\\RichText();\n$richText->createText('This invoice is ');\n$payable = $richText->createTextRun('payable within thirty days after the end of the month');\n$payable->getFont()->setBold(true);\n$payable->getFont()->setItalic(true);\n$payable->getFont()->setColor( new \\PhpOffice\\PhpSpreadsheet\\Style\\Color( \\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_DARKGREEN ) );\n$richText->createText(', unless specified otherwise on the invoice.');\n$spreadsheet->getActiveSheet()->getCell('A18')->setValue($richText);\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format with Custom Code - PHP\nDESCRIPTION: This snippet demonstrates how to set the number format for cell A1 using a custom format code to display comma-separated numbers with two decimal places. This achieves the same result as using the predefined format code.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('A1')->getNumberFormat()\n    ->setFormatCode('#,##0.00');\n```\n\n----------------------------------------\n\nTITLE: Using Wizard Factory to create Conditional Formatting Rules - PHP\nDESCRIPTION: This code snippet shows how to use the Wizard Factory to create a new conditional formatting rule for a specified cell range. It instantiates the Wizard Factory with the range 'C3:E5' and then uses the `newRule()` method to create a CellValue wizard, which allows defining conditions based on cell values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$wizardFactory = new \\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard('C3:E5');\n$wizard = $wizardFactory->newRule(\\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard::CELL_VALUE);\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding a Column in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set the visibility of a column using PhpSpreadsheet. It shows column 'C' and hides column 'D'. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('C')->setVisible(true);\n$spreadsheet->getActiveSheet()->getColumnDimension('D')->setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: Collapsing Multiple Rows in PHP\nDESCRIPTION: This snippet demonstrates how to collapse a range of rows in a PhpSpreadsheet within a loop.  It sets the outline level and visibility for each row in the specified range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_91\n\nLANGUAGE: php\nCODE:\n```\nfor ($i = 51; $i <= 80; $i++) {\n    $spreadsheet->getActiveSheet()->setCellValue('A' . $i, \"FName $i\");\n    $spreadsheet->getActiveSheet()->setCellValue('B' . $i, \"LName $i\");\n    $spreadsheet->getActiveSheet()->setCellValue('C' . $i, \"PhoneNo $i\");\n    $spreadsheet->getActiveSheet()->setCellValue('D' . $i, \"FaxNo $i\");\n    $spreadsheet->getActiveSheet()->setCellValue('E' . $i, true);\n    $spreadsheet->getActiveSheet()->getRowDimension($i)->setOutlineLevel(1);\n    $spreadsheet->getActiveSheet()->getRowDimension($i)->setVisible(false);\n}\n\n$spreadsheet->getActiveSheet()->getRowDimension(81)->setCollapsed(true);\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Modified Date/Time in PHP\nDESCRIPTION: Retrieves the 'Modified' property (last modified date and time) from the spreadsheet object in PhpSpreadsheet. This getter method obtains the timestamp of when the spreadsheet was last modified.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getModified()\n```\n\n----------------------------------------\n\nTITLE: Calculating DATEDIF with PHP Timestamps - PHP\nDESCRIPTION: This example calculates the difference between two dates represented as PHP timestamps using the DATEDIF function.  It directly calls the DATEDIF function with different unit parameters (d, m, y, ym, yd, md) to determine the difference in days, months, years, and other combinations. It uses the `call_user_func_array` to call the function statically.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$date1 = 1193317015; // PHP timestamp for 25-Oct-2007\n$date2 = 1449579415; // PHP timestamp for 8-Dec-2015\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'd']\n);\n// $retVal = 2966\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'm']\n);\n// $retVal = 97\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'y']\n);\n// $retVal = 8\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'ym']\n);\n// $retVal = 1\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'yd']\n);\n// $retVal = 44\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEDIF'],\n    [$date1, $date2, 'md']\n);\n// $retVal = 13\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Sheets from XLS PHP\nDESCRIPTION: This code reads an XLS file, loading only the sheets with the specified names. It sets the `loadSheetsOnly` option on the reader with an array of sheet names. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xls();\n$reader->setLoadSheetsOnly([\"Sheet 1\", \"My special sheet\"]);\n$spreadsheet = $reader->load(\"05featuredemo.xls\");\n```\n\n----------------------------------------\n\nTITLE: Setting AutoFilter in PHP\nDESCRIPTION: Sets the AutoFilter for a worksheet.  This setter method defines the range and criteria for the autofilter applied to the sheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n$sheet->setAutoFilter()\n```\n\n----------------------------------------\n\nTITLE: Setting Page Orientation and Size PHP\nDESCRIPTION: This code demonstrates how to set the page orientation (landscape or portrait) and paper size for a worksheet in PhpSpreadsheet. It uses the `getPageSetup()` method to access the page setup options and then sets the `setOrientation()` and `setPaperSize()` properties using constants from the `PageSetup` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()\n    ->setOrientation(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::ORIENTATION_LANDSCAPE);\n$spreadsheet->getActiveSheet()->getPageSetup()\n    ->setPaperSize(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::PAPERSIZE_A4);\n```\n\nLANGUAGE: php\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::setPaperSizeDefault(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::PAPERSIZE_A4\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::setOrientationDefault(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\PageSetup::ORIENTATION_LANDSCAPE\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Duplicates/Unique Conditional Formatting\nDESCRIPTION: This code demonstrates how to use the Duplicates Wizard to create conditional formatting rules that highlight duplicate or unique values in a cell range. It creates two conditional styles, one for duplicates and one for unique values, and applies them to a specified cell range using predefined styles.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'A2:E6';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\Duplicats $duplicatesWizard */\n$duplicatesWizard = $wizardFactory->newRule(Wizard::DUPLICATES);\n\n$duplicatesWizard->setStyle($redStyle);\n$conditionalStyles[] = $duplicatesWizard->getConditional();\n\n$duplicatesWizard->unique()\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $duplicatesWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($duplicatesWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Description Property in PHP\nDESCRIPTION: Sets the 'Description' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new description to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setDescription()\n```\n\n----------------------------------------\n\nTITLE: Reading Header and Footer from Excel File - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to load an existing Excel file (`test.xlsx`) and read the values of the odd/even headers and footers using PhpSpreadsheet. It uses `IOFactory::load()` to load the spreadsheet, then accesses the header/footer settings and uses `getOddFooter()`, `getEvenFooter()`, `getOddHeader()`, and `getEvenHeader()` to retrieve the content.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load('test.xlsx');\n$worksheet = $spreadsheet->getActiveSheet();\n\nvar_dump($worksheet->getHeaderFooter()->getOddFooter());\nvar_dump($worksheet->getHeaderFooter()->getEvenFooter());\nvar_dump($worksheet->getHeaderFooter()->getOddHeader());\nvar_dump($worksheet->getHeaderFooter()->getEvenHeader());\n```\n\n----------------------------------------\n\nTITLE: Setting Currency Format with Currency Wizard in PHP\nDESCRIPTION: This snippet demonstrates how to use the Currency Wizard in PhpSpreadsheet to set the format code for a cell. It sets the cell value and then applies a currency format code with the Euro symbol, 2 decimal places, a thousands separator, trailing symbol, and symbol with spacing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Currency Wizard to build the Format Mask\n$currencyMask = new Currency(\n    '€',\n    2,\n    Number::WITH_THOUSANDS_SEPARATOR,\n    Currency::TRAILING_SYMBOL,\n    Currency::SYMBOL_WITH_SPACING\n);\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($currencyMask);\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // #,##0.00 €\nvar_dump($worksheet->getCell('C20')->getFormattedValue()); // -12,345.68 €\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Filter Rules PHP\nDESCRIPTION: Creates filter rules for a column. The column will be filtered by values that match the specified values ('France' OR 'Germany'). For Simple Filters, you can create as many rules as you want. Simple filters are always treated as being joined by an OR condition.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        'France'\n    );\n\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        'Germany'\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Language/Locale - PHP\nDESCRIPTION: This snippet shows how to set the locale for PhpSpreadsheet, enabling localization features. It attempts to set the locale to Brazilian Portuguese (pt_br) and provides a fallback to American English (en_us) if the specified or related language files are not available.  The function returns a boolean to indicate success.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/settings.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$locale = 'pt_br';\n$validLocale = \\PhpOffice\\PhpSpreadsheet\\Settings::setLocale($locale);\nif (!$validLocale) {\n    echo 'Unable to set locale to ' . $locale . \" - reverting to en_us\" . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting equals condition with string literal - PHP\nDESCRIPTION: This code snippet shows how to set an 'equals' condition with a string literal value using the CellValue wizard. It illustrates how the wizard handles string values and ensures they are correctly quoted when creating the conditional format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$wizard->equals('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with Charts - PhpSpreadsheet\nDESCRIPTION: This code demonstrates how to load a spreadsheet and explicitly include charts using the `setIncludeCharts` method of the reader object. It creates a reader for the specified file and then enables chart loading before loading the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReaderForFile(\"05featuredemo.xlsx\");\n$reader->setIncludeCharts(true);\n$reader->load(\"spreadsheetWithCharts.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Read Specific Cells from XML - PhpSpreadsheet\nDESCRIPTION: This code defines a custom read filter that implements the `\\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter` interface.  The `readCell` method determines whether a cell should be read based on its row number. In this case, it reads row 1 and rows 20 to 30. Then it loads the spreadsheet with the filter using XML reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass MyReadFilter implements \\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter {\n\n    public function readCell($columnAddress, $row, $worksheetName = '') {\n        // Read title row and rows 20 - 30\n        if ($row == 1 || ($row >= 20 && $row <= 30)) {\n            return true;\n        }\n        return false;\n    }\n\n}\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xml();\n$reader->setReadFilter( new MyReadFilter() );\n$spreadsheet = $reader->load(\"06largescale.xml\");\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Row Height Based on Wrapped Text in PHP\nDESCRIPTION: This code snippet demonstrates how to set a row's height dynamically based on the amount of wrapped text in a cell. It calculates the number of lines in the cell using `substr_count` and adjusts the row height accordingly.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension(1)->setRowHeight(\n    14.5 * (substr_count($sheet->getCell('A1')->getValue(), \"\\n\") + 1)\n);\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Worksheets (PHP)\nDESCRIPTION: Demonstrates how to create multiple worksheets and write values to specific cells in each.  Shows how to assign worksheet objects to variables for easy manipulation.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Create a Spreadsheet, with Worksheet Sheet1, which is the Active Worksheet\n$spreadsheet = new Spreadsheet();\n// Assign the Active Worksheet (Sheet1) to $worksheet1\n$worksheet1 = $spreadsheet->getActiveSheet();\n// Create a new Worksheet (Sheet2) and make that the Active Worksheet\n$worksheet2 = $spreadsheet->createSheet();\n\n$worksheet1->setCellValue('A1', 'I am a cell on Sheet1');\n$worksheet2->setCellValue('A1', 'I am a cell on Sheet2');\n```\n\n----------------------------------------\n\nTITLE: Removing Columns in PHP\nDESCRIPTION: This snippet shows how to remove columns from a PhpSpreadsheet starting at a specific column. It uses the `removeColumn()` method with the starting column and the number of columns to remove as parameters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_99\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->removeColumn('C', 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Keywords Property in PHP\nDESCRIPTION: Sets the 'Keywords' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns new keywords to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setKeywords()\n```\n\n----------------------------------------\n\nTITLE: Set Percentage Format with Locale in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to use the Percentage Wizard in PhpSpreadsheet with locale-specific formatting. It initializes the Percentage Wizard with a locale. It then applies the generated format code to a cell and outputs the format code and formatted value. Requires the PHP `Intl` extension.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Percentage;\n\n// Set Cell value\n$worksheet->getCell('C21')->setValue(-12345.67890);\n\n// Set Cell Style using the Percentage Wizard to build the Format Mask for a locale\n$localeCurrencyMask = new Percentage(\n    locale: 'tr_TR'\n);\n$worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($localeCurrencyMask);\n\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // %#,##0.00\nvar_dump($worksheet->getCell('C21')->getFormattedValue()); // %-12,345.68\n```\n\n----------------------------------------\n\nTITLE: DGET Usage in PhpSpreadsheet\nDESCRIPTION: Illustrates the use of the DGET function to extract a single value from a database column that meets specific criteria in PhpSpreadsheet.  It sets up the database and criteria as arrays, populates the worksheet, and then uses DGET to fetch the matching value. The fetched value is stored in the $retVal variable.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=GET(A4:E10,\"Age\",A1:F2)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 14\n```\n\n----------------------------------------\n\nTITLE: Register PDF Writer with Generic Name\nDESCRIPTION: This snippet demonstrates how to register a PDF writer with a generic name ('Pdf'), allowing you to instantiate it without needing to remember the specific library chosen. This promotes flexibility and reduces code dependencies.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$class = \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf::class;\n\\PhpOffice\\PhpSpreadsheet\\IOFactory::registerWriter('Pdf', $class);\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Pdf');\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from a Worksheet (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to extract images from a worksheet in PhpSpreadsheet and save them as individual image files. It iterates through the drawing collection of the active worksheet, checks if each drawing is a `MemoryDrawing`, and extracts the image contents based on the MIME type, saving it to a file. It also handles regular drawings by reading the image file contents.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_106\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing;\n$i = 0;\n\nforeach ($spreadsheet->getActiveSheet()->getDrawingCollection() as $drawing) {\n    if ($drawing instanceof MemoryDrawing) {\n        ob_start();\n        call_user_func(\n            $drawing->getRenderingFunction(),\n            $drawing->getImageResource()\n        );\n        $imageContents = ob_get_contents();\n        ob_end_clean();\n        switch ($drawing->getMimeType()) {\n            case MemoryDrawing::MIMETYPE_PNG :\n                $extension = 'png';\n                break;\n            case MemoryDrawing::MIMETYPE_GIF:\n                $extension = 'gif';\n                break;\n            case MemoryDrawing::MIMETYPE_JPEG :\n                $extension = 'jpg';\n                break;\n        }\n    } else {\n        if ($drawing->getPath()) {\n            // Check if the source is a URL or a file path\n            if ($drawing->getIsURL()) {\n                $imageContents = file_get_contents($drawing->getPath());\n                $filePath = tempnam(sys_get_temp_dir(), 'Drawing');\n                file_put_contents($filePath , $imageContents);\n                $mimeType = mime_content_type($filePath);\n                // You could use the below to find the extension from mime type.\n                // https://gist.github.com/alexcorvi/df8faecb59e86bee93411f6a7967df2c#gistcomment-2722664\n                $extension = File::mime2ext($mimeType);\n                unlink($filePath);            \n            }\n            else {\n                $zipReader = fopen($drawing->getPath(),'r');\n                $imageContents = '';\n                while (!feof($zipReader)) {\n                    $imageContents .= fread($zipReader,1024);\n                }\n                fclose($zipReader);\n                $extension = $drawing->getExtension();            \n            }\n        }\n    }\n    $myFileName = '00_Image_'.++$i.'.'.$extension;\n    file_put_contents($myFileName,$imageContents);\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating Rows at Top - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to repeat specific rows at the top of each printed page using PhpSpreadsheet. It uses the `setRowsToRepeatAtTopByStartAndEnd()` method of the page setup object, specifying the starting and ending row numbers to repeat (1 and 5 in this example).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()->setRowsToRepeatAtTopByStartAndEnd(1, 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet Tab Color PHP\nDESCRIPTION: This snippet sets the color of the sheet tab.  The `setRGB()` method is used to specify the color in hexadecimal format. Requires a PhpSpreadsheet object named `$worksheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_118\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->getTabColor()->setRGB('FF0000');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Properties in PHP\nDESCRIPTION: Sets a user-defined (custom) property for the spreadsheet object. This setter method allows adding or updating custom metadata associated with the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCustomProperty()\n```\n\n----------------------------------------\n\nTITLE: Editing HTML During Save via Callback - PHP\nDESCRIPTION: This code snippet demonstrates how to add a callback function to edit the generated HTML before saving. This allows for customization of the HTML output, such as modifying gridline styles. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\nfunction changeGridlines(string $html): string\n{\n    return str_replace('{border: 1px solid black;}',\n        '{border: 2px dashed red;}',\n        $html);\n}\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\n$writer->setEditHtmlCallback('changeGridlines');\n$writer->save($filename);\n```\n\n----------------------------------------\n\nTITLE: Text Substitute Function PHP\nDESCRIPTION: Maps the Excel SUBSTITUTE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Replace::substitute method replaces occurrences of a specific text string with another text string within a given text.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_101\n\nLANGUAGE: PHP\nCODE:\n```\nSUBSTITUTE               | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Replace::substitute\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Specific Range of Rows and Columns in PHP\nDESCRIPTION: This example demonstrates iterating over a specified range of rows and columns using the Row and Cell Iterators.  It first retrieves the maximum data row and column, then iterates from row 1 to the maximum data row, and from column 'A' to the maximum data column. Empty rows are skipped.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$maxDataRow = $worksheet->getHighestDataRow();\n$maxDataColumn = $worksheet->getHighestDataColumn();\n\n$rowIterator = $worksheet->getRowIterator(1, $maxDataRow);\nforeach ($rowIterator as $row) {\n    if ($row->isEmpty()) { // Ignore empty rows\n        continue;\n    }\n\n    $columnIterator = $row->getCellIterator('A', $maxDataColumn);\n    foreach ($columnIterator as $cell) {\n        // Do something with the cell here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AutoFilter Range PHP\nDESCRIPTION: Sets the AutoFilter range for a worksheet. This enables filtering on the specified range of cells. The range includes the header row and the data rows to be filtered.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setAutoFilter('A1:E20');\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Protection - PHP\nDESCRIPTION: This snippet shows how to enable worksheet protection in PhpSpreadsheet. This prevents users from making changes to the sheet without proper authorization. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Named Formulae in PHP\nDESCRIPTION: This code demonstrates how to add named formulae to a PhpSpreadsheet worksheet. It defines TAX_RATE as a fixed percentage and TAX as a formula that calculates tax based on a named range PRICE. It then sets up some data, defines the PRICE named range, and references the defined formulae in the worksheet cells.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/defined-names.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Add some Named Formulae\n// The first to store our tax rate\n$spreadsheet->addNamedFormula(new NamedFormula('TAX_RATE', $worksheet, '=19%'));\n// The second to calculate the Tax on a Price value (Note that `PRICE` is defined later as a Named Range)\n$spreadsheet->addNamedFormula(new NamedFormula('TAX', $worksheet, '=PRICE*TAX_RATE'));\n\n// Set up some basic data\n$worksheet\n    ->setCellValue('A1', 'Tax Rate:')\n    ->setCellValue('B1', '=TAX_RATE')\n    ->setCellValue('A3', 'Net Price:')\n    ->setCellValue('B3', 19.99)\n    ->setCellValue('A4', 'Tax:')\n    ->setCellValue('A5', 'Price including Tax:');\n\n// Define a named range that we can use in our formulae\n$spreadsheet->addNamedRange(new NamedRange('PRICE', $worksheet, '=$B$3'));\n\n// Reference the defined formulae in worksheet formulae\n$worksheet\n    ->setCellValue('B4', '=TAX')\n    ->setCellValue('B5', '=PRICE+TAX');\n\necho sprintf(\n    'With a Tax Rate of %.2f and a net price of %.2f, Tax is %.2f and the gross price is %.2f',\n    $worksheet->getCell('B1')->getCalculatedValue(),\n    $worksheet->getCell('B3')->getValue(),\n    $worksheet->getCell('B4')->getCalculatedValue(),\n    $worksheet->getCell('B5')->getCalculatedValue()\n), PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Worksheet setDefaultStyle to PhpSpreadsheet getParent getDefaultStyle applyFromArray\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->setDefaultStyle($value)` to PhpSpreadsheet's `$worksheet->getParent()->getDefaultStyle()->applyFromArray(...)`. Setting the default style now involves applying a style array to the spreadsheet's default style.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$worksheet->setDefaultStyle($value);\n\n// After\n$worksheet->getParent()->getDefaultStyle()->applyFromArray([\n    'font' => [\n        'name' => $pValue->getFont()->getName(),\n        'size' => $pValue->getFont()->getSize(),\n    ],\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Saving Spreadsheet with Charts - PhpSpreadsheet\nDESCRIPTION: This example demonstrates saving a spreadsheet with charts included by setting the `IncludeCharts` property to true. It uses the `setIncludeCharts()` method to tell the writer to include charts when saving the file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$writer = IOFactory::createWriter($spreadsheet, 'Xlsx');\n$writer->setIncludeCharts(true);\n$writer->save('mySavedFileWithCharts.xlsx');\n```\n\n----------------------------------------\n\nTITLE: Copying a Worksheet between Workbooks - PhpSpreadsheet\nDESCRIPTION: Copies a worksheet from one workbook to another.  This involves cloning the worksheet and then using the `addExternalSheet()` method to add the cloned sheet to the destination workbook. The title of the cloned worksheet must be unique.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$clonedWorksheet = clone $spreadsheet1->getSheetByName('Worksheet 1');\n$clonedWorksheet->setTitle('Copy of Worksheet 1'); // must be unique\n$spreadsheet1->addSheet($clonedWorksheet);\n$spreadsheet->addExternalSheet($clonedWorksheet);\n```\n\n----------------------------------------\n\nTITLE: Adding an In-Memory Image (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to add an image created using GD functions directly to a worksheet without saving it to disk first in PhpSpreadsheet. It creates a GD image, allocates colors, adds text, instantiates a `MemoryDrawing` object, sets properties like name, description, coordinates, the GD image resource, rendering function, MIME type, and height, and then associates the drawing with the active worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_103\n\nLANGUAGE: php\nCODE:\n```\n//  Use GD to create an in-memory image\n$gdImage = @imagecreatetruecolor(120, 20) or die('Cannot Initialize new GD image stream');\n$textColor = imagecolorallocate($gdImage, 255, 255, 255);\nimagestring($gdImage, 1, 5, 5,  'Created with PhpSpreadsheet', $textColor);\n\n//  Add the In-Memory image to a worksheet\n$drawing = new \\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing();\n$drawing->setName('In-Memory image 1');\n$drawing->setDescription('In-Memory image 1');\n$drawing->setCoordinates('A1');\n$drawing->setImageResource($gdImage);\n$drawing->setRenderingFunction(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing::RENDERING_JPEG\n);\n$drawing->setMimeType(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing::MIMETYPE_DEFAULT);\n$drawing->setHeight(36);\n$drawing->setWorksheet($spreadsheet->getActiveSheet());\n```\n\n----------------------------------------\n\nTITLE: Text Split Function PHP\nDESCRIPTION: Maps the Excel TEXTSPLIT function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::split method splits a text string into an array of substrings based on a specified delimiter.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_107\n\nLANGUAGE: PHP\nCODE:\n```\nTEXTSPLIT                | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::split\n```\n\n----------------------------------------\n\nTITLE: Calculating EOMONTH in PhpSpreadsheet using Function Call\nDESCRIPTION: Demonstrates calculating the last day of the month a certain number of months after a given date using the EOMONTH function in PhpSpreadsheet by directly calling the function. It uses a date string as input and calculates the last day of the month 13 months later.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'EOMONTH'],\n    ['31-Oct-2008', 13]\n);\n// $retVal = 40147.0 (30-Nov-2010)\n```\n\n----------------------------------------\n\nTITLE: Clearing Calculation Cache PHP\nDESCRIPTION: This snippet shows how to clear the calculation cache using `Calculation::getInstance($spreadsheet)->clearCalculationCache()`. This will remove all previously calculated values from the cache, forcing recalculation on the next call to `getCalculatedValue()` for any cell containing a formula.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nCalculation::getInstance($spreadsheet)->clearCalculationCache();\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Delimiter for TSV Files - PHP\nDESCRIPTION: This snippet shows how to set a custom delimiter for reading tab-separated value (TSV) files using PhpSpreadsheet. It initializes a CSV reader and then uses the `setDelimiter()` method to specify the tab character as the delimiter.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Csv';\n$inputFileName = './sampleData/example1.tsv';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Set the delimiter to a TAB character  **/\n$reader->setDelimiter(\"\\t\");\n//    $reader->setDelimiter('|');\n\n/**  Load the file to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Outputting Excel (Xls) to Browser PHP\nDESCRIPTION: This snippet shows how to output an older Excel (Xls) file directly to a client's web browser using PhpSpreadsheet. It sets the appropriate HTTP headers for Xls files to initiate a download and saves the spreadsheet to php://output with the Xls writer. A pre-existing PhpSpreadsheet object `$spreadsheet` is necessary.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_111\n\nLANGUAGE: php\nCODE:\n```\n// redirect output to client browser\nheader('Content-Type: application/vnd.ms-excel');\nheader('Content-Disposition: attachment;filename=\"myfile.xls\"');\nheader('Cache-Control: max-age=0');\n\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Xls');\n$writer->save('php://output');\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Worksheet - PhpSpreadsheet\nDESCRIPTION: Retrieves the currently active worksheet from the PhpSpreadsheet object. This is the sheet that will be active when the workbook is opened in MS Excel (or other appropriate Spreadsheet program).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve the current active worksheet\n$spreadsheet->getActiveSheet();\n```\n\n----------------------------------------\n\nTITLE: Calculating EOMONTH in PhpSpreadsheet using Worksheet\nDESCRIPTION: Illustrates calculating the last day of the month a certain number of months before or after a given date using the EOMONTH function within a PhpSpreadsheet worksheet. It sets up the worksheet with date strings and applies the EOMONTH formula to calculate the resulting dates, then retrieves the calculated values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '1-Jan-2000')\n    ->setCellValue('A3', '14-Feb-2009');\n\n$worksheet->setCellValue('B2', '=EOMONTH(A2,5)')\n    ->setCellValue('B3', '=EOMONTH(A3,-12)');\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL);\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 39629.0 (30-Jun-2008)\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 39507.0 (29-Feb-2008)\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Datatype Explicitly PHP\nDESCRIPTION: This code shows how to explicitly set a cell's datatype in PhpSpreadsheet. It uses the `setValueExplicit()` method of the cell or the `setCellValueExplicit()` method of the worksheet, passing the value and the desired datatype, such as `TYPE_NUMERIC`, from the `DataType` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('A1')\n    ->setValueExplicit(\n        '25',\n        \\PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_NUMERIC\n    );\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with Explicit Reader Type (IOFactory) PHP\nDESCRIPTION: This code demonstrates loading a spreadsheet file using PhpSpreadsheet's IOFactory, specifying the reader type explicitly. `createReader(\"Xlsx\")` creates an XLSX reader instance. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader(\"Xlsx\");\n$spreadsheet = $reader->load(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Write Spreadsheet to PDF\nDESCRIPTION: This example demonstrates how to write a PhpSpreadsheet object to a PDF file using the specified PDF writer. It creates an instance of the `Mpdf` writer and saves the spreadsheet content to a file named \"05featuredemo.pdf\".\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf($spreadsheet);\n$writer->save(\"05featuredemo.pdf\");\n```\n\n----------------------------------------\n\nTITLE: Writing Date with PHP Timestamp (PHP)\nDESCRIPTION: Converts a PHP timestamp (Unix time) to an Excel date value and writes it to a cell, setting the cell's number format to display it as a date.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP-time (Unix time)\n$time = gmmktime(0,0,0,12,31,2008); // int(1230681600)\n$spreadsheet->getActiveSheet()\n    ->setCellValue('D1', \\PhpOffice\\PhpSpreadsheet\\Shared\\Date::PHPToExcel($time));\n$spreadsheet->getActiveSheet()->getStyle('D1')\n    ->getNumberFormat()\n    ->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_DATE_YYYYMMDDSLASH);\n```\n\n----------------------------------------\n\nTITLE: Instantiating CellValue Wizard Directly - PHP\nDESCRIPTION: This code snippet demonstrates how to directly instantiate the CellValue wizard without using the Wizard Factory.  It's crucial to provide the cell range to the constructor when instantiating directly.  This method provides more control but requires knowing the specific wizard class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$wizard = new \\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard\\CellValue('C3:E5');\n```\n\n----------------------------------------\n\nTITLE: Using Formatting Masks in the TEXT() Function\nDESCRIPTION: This snippet demonstrates how to use number formatting masks directly within the Excel TEXT() function in PhpSpreadsheet.  It shows how to format a numeric value based on a format string either defined directly or referenced from another cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->getCell('A1')->setValue(12345.678);\n$worksheet->getCell('B1')\n    ->setValue('#.00\" Surplus\";-#.00\" Deficit\";\"Out of Stock\"');\n$worksheet->getCell('C1')->setValue('=TEXT(A1,B1)');\n\nvar_dump($worksheet->getCell('C1')->getCalculatedValue()); // 12,345.68 Surplus\n\n\n$worksheet->getCell('A2')->setValue(-12345.678);\n$worksheet->getCell('C2')\n    ->setValue('=TEXT(A2,\"#,##0.00\"\" Surplus\"\";-#,##0.00\"\" Deficit\"\";\"\"Out of Stock\"\"\")');\n\nvar_dump($worksheet->getCell('C2')->getCalculatedValue()); // -12,345.68 Deficit\n```\n\n----------------------------------------\n\nTITLE: Setting the Return Date Type PHP\nDESCRIPTION: This snippet demonstrates how to set the return date type for Excel functions that return date values. It uses the `\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType()` method, which accepts a constant representing the desired date type: `RETURNDATE_PHP_NUMERIC`, `RETURNDATE_PHP_OBJECT`, or `RETURNDATE_EXCEL`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType($returnDateType);\n```\n\n----------------------------------------\n\nTITLE: Using Cross-Worksheet Named Formulae in PHP\nDESCRIPTION: This code creates multiple worksheets within a PhpSpreadsheet, sets up yearly data for each, and defines named formulae that reference values from different worksheets. The NEXT_MONTH formula uses OFFSET and EDATE to dynamically calculate the next month. The GROWTH and PROFIT_GROWTH formulae calculate percentage differences between values in different worksheets. It depends on the Worksheet and Date classes.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/defined-names.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$worksheet = $spreadsheet->setActiveSheetIndex(0);\nsetYearlyData($worksheet,'2019', $data2019);\n$worksheet = $spreadsheet->addSheet(new Worksheet($spreadsheet));\nsetYearlyData($worksheet,'2020', $data2020);\n$worksheet = $spreadsheet->addSheet(new Worksheet($spreadsheet));\nsetYearlyData($worksheet,'2020', [], 'GROWTH');\n\nfunction setYearlyData(Worksheet $worksheet, string $year, $yearlyData, ?string $title = null) {\n    // Set up some basic data\n    $worksheetTitle = $title ?: $year;\n    $worksheet\n        ->setTitle($worksheetTitle)\n        ->setCellValue('A1', 'Month')\n        ->setCellValue('B1', $worksheetTitle  === 'GROWTH' ? 'Growth' : 'Sales')\n        ->setCellValue('C1', $worksheetTitle  === 'GROWTH' ? 'Profit Growth' : 'Margin')\n        ->setCellValue('A2', Date::stringToExcel(\"{$year}-01-01\"));\n    for ($row = 3; $row <= 13; ++$row) {\n        $worksheet->setCellValue(\"A{$row}\", \"=NEXT_MONTH\");\n    }\n\n    if (!empty($yearlyData)) {\n        $worksheet->fromArray($yearlyData, null, 'B2');\n    } else {\n        for ($row = 2; $row <= 13; ++$row) {\n            $worksheet->setCellValue(\"B{$row}\", \"=GROWTH\");\n            $worksheet->setCellValue(\"C{$row}\", \"=PROFIT_GROWTH\");\n        }\n    }\n\n    $worksheet->getStyle('A1:C1')\n        ->getFont()->setBold(true);\n    $worksheet->getStyle('A2:A13')\n        ->getNumberFormat()\n        ->setFormatCode('mmmm');\n    $worksheet->getStyle('B2:C13')\n        ->getNumberFormat()\n        ->setFormatCode($worksheetTitle  === 'GROWTH' ? '0.00%' : '_-€* #,##0_-');\n}\n\n// Add some Named Formulae\n// The first to store our tax rate\n$spreadsheet->addNamedFormula(new NamedFormula('NEXT_MONTH', $worksheet, \"=EDATE(OFFSET(\\$A1,-1,0),1)\"));\n$spreadsheet->addNamedFormula(new NamedFormula('GROWTH', $worksheet, \"=IF('2020'!\\$B1=\\\"\\\",\\\"-\\\",(('2020'!\\$B1/'2019'!\\$B1)-1))\"));\n$spreadsheet->addNamedFormula(new NamedFormula('PROFIT_GROWTH', $worksheet, \"=IF('2020'!\\$C1=\\\"\\\",\\\"-\\\",(('2020'!\\$C1/'2019'!\\$C1)-1))\"));\n\nfor ($row = 2; $row<=7; ++$row) {\n    $month = $worksheet->getCell(\"A{$row}\")->getFormattedValue();\n    $growth = $worksheet->getCell(\"B{$row}\")->getFormattedValue();\n    $profitGrowth = $worksheet->getCell(\"C{$row}\")->getFormattedValue();\n\n    echo \"Growth for {$month} is {$growth}, with a Profit Growth of {$profitGrowth}\", PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Datetime in PhpSpreadsheet using Worksheet\nDESCRIPTION: Demonstrates extracting the hour from a date/time value using the HOUR function within a PhpSpreadsheet worksheet. It sets up the worksheet with date/time strings and applies the HOUR formula to extract the hour component, then retrieves the calculated values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->setCellValue('A1', 'Time String')\n    ->setCellValue('A2', '31-Dec-2008 17:30')\n    ->setCellValue('A3', '14-Feb-2008 4:20 AM')\n    ->setCellValue('A4', '14-Feb-2008 4:20 PM');\n\n$worksheet->setCellValue('B2', '=HOUR(A2)')\n    ->setCellValue('B3', '=HOUR(A3)')\n    ->setCellValue('B4', '=HOUR(A4)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 17\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 4\n\n$retVal = $worksheet->getCell('B4')->getCalculatedValue();\n// $retVal = 16\n```\n\n----------------------------------------\n\nTITLE: Calling SECOND Statically - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to call the SECOND function statically using call_user_func_array. It passes a time string to the function and retrieves the seconds as the return value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'SECOND'],\n    ['09:30:17']\n);\n// $retVal = 17\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Data Validation in PHP\nDESCRIPTION: Retrieves the data validation object associated with a cell in PhpSpreadsheet. This getter method allows access to the data validation rules defined for a specific cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$cell->getDataValidation()\n```\n\n----------------------------------------\n\nTITLE: Text Upper Case Conversion PHP\nDESCRIPTION: Maps the Excel UPPER function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::upper method converts all characters in a text string to uppercase.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_109\n\nLANGUAGE: PHP\nCODE:\n```\nUPPER                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::upper\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Conditional Rule with Wizard\nDESCRIPTION: This code snippet demonstrates the creation of a second conditional formatting rule utilizing the wizard, specifically to highlight cells in the A1:A10 range with values less than 10. It sets the condition and associated formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$wizardFactory = new \\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard('A1:A10');\n$wizard = $wizardFactory->newRule(\\PhpOffice\\PhpSpreadsheet\\Style\\ConditionalFormatting\\Wizard::CELL_VALUE);\n$wizard->lessThan(10);\n$wizard->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_DARKGREEN);\n$wizard->getStyle()->getFill()->setFillType(\\PhpOffice\\PhpSpreadsheet\\Style\\Fill::FILL_SOLID);\n$wizard->getStyle()->getFill()->getStartColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_GREEN);\n\n$conditional = $wizard->getConditional();\n```\n\n----------------------------------------\n\nTITLE: Batch Processing with rangeToArray() and getHighestDataRow() in PHP\nDESCRIPTION: Combines batch processing and getHighestDataRow() to improve memory efficiency. Processes data in smaller chunks but limits the range to actual data cells. The code iterates through rows in batches, processing each row and skipping empty ones.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$startRow = 1;\n$batchSize = 100;\nwhile ($startRow <= $maxDataRow) {\n    $endRow = min($startRow + $batchSize, $maxDataRow);\n    $dataArray = $worksheet->rangeToArray(\"A{$startRow}:{$maxDataColumn}{$endRow}\");\n    $startRow += $batchSize;\n\n    foreach ($dataArray as $row) {\n        // Check for empty rows\n        if (count(array_filter($row, function ($value) {\n                return $value !== null;\n            })) === 0) {\n            continue;   // Ignore empty rows\n        }\n\n        foreach ($row as $cellValue) {\n            // Do something with the cell data here.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Column in PHP\nDESCRIPTION: This snippet shows how to collapse a column in a PhpSpreadsheet.  It requires setting both the `setCollapsed()` and `setVisible(false)` properties for the column dimension. The column will only appear collapsed in Excel 2007 and later if also set to invisible.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('E')->setCollapsed(true);\n$spreadsheet->getActiveSheet()->getColumnDimension('E')->setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: Preserve Null Strings - PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to load null strings when reading a CSV file, using the `setPreserveNullString` method of the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv` reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$reader->setPreserveNullString(true);\n```\n\n----------------------------------------\n\nTITLE: Web Service Function PHP\nDESCRIPTION: Maps the Excel WEBSERVICE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Web\\Service::webService method retrieves data from a web service via HTTP request.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_113\n\nLANGUAGE: PHP\nCODE:\n```\nWEBSERVICE               | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Web\\Service::webService\n```\n\n----------------------------------------\n\nTITLE: Copying a Worksheet between Workbooks (simplified further) - PhpSpreadsheet\nDESCRIPTION: Copies a worksheet from one workbook to another using `addExternalSheet` and `duplicateWorksheetByTitle`, simplified since PhpSpreadsheet 3.9.0.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$clonedWorksheet = $spreadsheet1->duplicateWorksheetByTitle('sheetname');\n$spreadsheet->addExternalSheet($clonedWorksheet);\n```\n\n----------------------------------------\n\nTITLE: Setting Right-to-Left Worksheet PHP\nDESCRIPTION: This snippet shows how to set a worksheet to right-to-left direction, meaning that column A will start on the right side. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_121\n\nLANGUAGE: php\nCODE:\n```\n// right-to-left worksheet\n$spreadsheet->getActiveSheet()->setRightToLeft(true);\n```\n\n----------------------------------------\n\nTITLE: Using DateValue Wizard in PHP\nDESCRIPTION: This code demonstrates how to use the DateValue wizard to create conditional formatting rules based on dates. It creates a DateValue wizard instance, sets the condition to 'last7Days', applies a style, and then applies the conditional style to a cell range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$wizardFactory = new Wizard(\"E2:E19\");\n/** @var Wizard\\DateValue $dateWizard */\n$dateWizard = $wizardFactory->newRule(Wizard::DATES_OCCURRING);\n$conditionalStyles = [];\n\n$dateWizard->last7Days()\n    ->setStyle($yellowStyle);\n\n$conditionalStyles[] = $dateWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($dateWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Zero-Padding Number Format - PHP\nDESCRIPTION: This snippet demonstrates how to apply zero-padding to a number in cell A1. It sets the cell value to 19 and the number format to '0000', which will display the number as '0019' in Excel.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('A1')->setValue(19);\n$spreadsheet->getActiveSheet()->getStyle('A1')->getNumberFormat()\n    ->setFormatCode('0000'); // will show as 0019 in Excel\n```\n\n----------------------------------------\n\nTITLE: Guessing Encoding with Fallback - PhpSpreadsheet\nDESCRIPTION: This code sets the input encoding to `GUESS_ENCODING` to let PhpSpreadsheet guess the encoding, with a fallback to 'ISO-8859-2' if the encoding cannot be determined.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$reader->setInputEncoding(\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv::GUESS_ENCODING);\n$reader->setFallbackEncoding('ISO-8859-2');  // default CP1252 without this statement\n$reader->setDelimiter(';');\n$reader->setEnclosure('');\n$reader->setSheetIndex(0);\n\n$spreadsheet = $reader->load('sample.csv');\n```\n\n----------------------------------------\n\nTITLE: Configuring APCu cache\nDESCRIPTION: This code configures PhpSpreadsheet to use APCu for cell caching. It initializes an APCu cache pool and then creates a SimpleCacheBridge to adapt it to the PSR-16 interface. Finally, it sets the cache on the PhpSpreadsheet settings.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$pool = new \\Cache\\Adapter\\Apcu\\ApcuCachePool();\n$simpleCache = new \\Cache\\Bridge\\SimpleCache\\SimpleCacheBridge($pool);\n\n\\PhpOffice\\PhpSpreadsheet\\Settings::setCache($simpleCache);\n```\n\n----------------------------------------\n\nTITLE: Adjusting AutoFilter Range to Max Row PHP\nDESCRIPTION: Adjusts the AutoFilter range so that the end row matches the last row containing data in the worksheet. This ensures that the AutoFilter includes all relevant data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->getAutoFilter()->setRangeToMaxRow();\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Parts Independently - PHP\nDESCRIPTION: This code snippet demonstrates how to generate specific parts of the HTML code independently, such as the header, styles, sheet data, and footer. This allows you to embed the generated HTML in an existing website. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\n$hdr = $writer->generateHTMLHeader();\n$sty = $writer->generateStyles(false); // do not write <style> and </style>\n$newstyle = <<<EOF\n<style type='text/css'>\n$sty\nbody {\n    background-color: yellow;\n}\n</style>\nEOF;\necho preg_replace('@</head>@', \"$newstyle\\n</head>\", $hdr);\necho $writer->generateSheetData();\necho $writer->generateHTMLFooter();\n```\n\n----------------------------------------\n\nTITLE: DCOUNT Function Example in PhpSpreadsheet (PHP)\nDESCRIPTION: This code snippet provides an example of using the DCOUNT function in PhpSpreadsheet. It sets up a database and criteria, then counts the number of Apple trees with a height greater than 10 and less than 16, and Pear trees. The result is then retrieved from the worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DCOUNT(A4:E10,\"Height\",A1:B3)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n\n// $retVal = 3\n```\n\n----------------------------------------\n\nTITLE: Setting AutoFilter to Whole Worksheet PHP\nDESCRIPTION: Sets the AutoFilter range to cover the entire worksheet. This automatically calculates the worksheet dimensions to determine the full range to apply the AutoFilter.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setAutoFilter(\n    $spreadsheet->getActiveSheet()\n        ->calculateWorksheetDimension()\n);\n```\n\n----------------------------------------\n\nTITLE: Setting between condition using CellValue Wizard - PHP\nDESCRIPTION: This code demonstrates setting a 'between' condition using the CellValue wizard, illustrating the fluent interface with the 'and()' method to specify the range. Providing a second value using 'and()' is mandatory for a 'between()' or 'notBetween()' range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$wizard->between(-10)->and(10);\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with Formula (PHP)\nDESCRIPTION: This snippet shows how to use an Excel formula as a condition in conditional formatting with PhpSpreadsheet. It concatenates values from columns A and B using the `CONCATENATE` function and applies a yellow style if the condition is met.  The formula is defined relative to the top-left cell of the range and adjusts automatically.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'C26:C28';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\CellValue $cellWizard */\n$cellWizard = $wizardFactory->newRule(Wizard::CELL_VALUE);\n\n$cellWizard->equals('CONCATENATE($A1,\" \",$B1)', Wizard::VALUE_TYPE_FORMULA)\n    ->setStyle($yellowStyle);\n$conditionalStyles[] = $cellWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($cellWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting Column Width with Unit of Measure\nDESCRIPTION: Setting column width using different unit of measures. This is an example to set the column width to 120 points.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(120, 'pt');\n```\n\n----------------------------------------\n\nTITLE: Using Blanks Wizard in PHP\nDESCRIPTION: This code demonstrates how to use the Blanks wizard to create conditional formatting rules for blank and non-blank cells. It creates a Blanks wizard instance, sets a style for blank cells, retrieves the conditional style, then sets a style for non-blank cells and retrieves that conditional style, finally applying the styles to the specified cell range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$cellRange = 'A2:B3';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\Blanks $blanksWizard */\n$blanksWizard = $wizardFactory->newRule(Wizard::BLANKS);\n\n$blanksWizard->setStyle($redStyle);\n$conditionalStyles[] = $blanksWizard->getConditional();\n\n$blanksWizard->notBlank()\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $blanksWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($blanksWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Applying Style Array to a Cell Range - PHP\nDESCRIPTION: This snippet demonstrates how to apply a predefined style array to a range of cells (B3:B7). It reuses the `$styleArray` defined in the previous example to apply the same styles to the cell range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('B3:B7')->applyFromArray($styleArray);\n```\n\n----------------------------------------\n\nTITLE: Calculating EDATE in PhpSpreadsheet using Worksheet\nDESCRIPTION: Illustrates calculating a date a certain number of months before or after a given date using the EDATE function within a PhpSpreadsheet worksheet. It sets up the worksheet with date strings and applies the EDATE formula to calculate the resulting dates, then retrieves the calculated values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '1-Jan-2008')\n    ->setCellValue('A3', '29-Feb-2008');\n\n$worksheet->setCellValue('B2', '=EDATE(A2,5)')\n    ->setCellValue('B3', '=EDATE(A3,-12)');\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 39600.0 (1-Jun-2008)\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 39141.0 (28-Feb-2007)\n```\n\n----------------------------------------\n\nTITLE: Setting Date/Time Calculation Type in PhpSpreadsheet (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure PhpSpreadsheet to return date and time values as float types when using the `getCalculatedValue` method. This helps to avoid potential issues when dealing with date/time values that may be stored as either integer or float depending on the number format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// All fields with Date, Time, or DateTime styles returned as float.\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setCalculateDateTimeType(\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::CALCULATE_DATE_TIME_FLOAT);\n// All fields with Time or DateTime styles returned as float.\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setCalculateDateTimeType(\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::CALCULATE_TIME_FLOAT);\n// Default - fields with Date, Time, or DateTime styles returned as they had been stored.\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setCalculateDateTimeType(\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::CALCULATE_DATE_TIME_ASIS);\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Conditional Styles - PHP\nDESCRIPTION: This example demonstrates applying multiple conditional styles to a cell range based on different conditions (equals, greaterThan, lessThan).  It uses the Wizard Factory and CellValue Wizard to define each rule and then applies these styles to the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$cellRange = 'A2:E5';\n$conditionalStyles = [];\n$wizardFactory = new Wizard($cellRange);\n/** @var Wizard\\CellValue $cellWizard */\n$cellWizard = $wizardFactory->newRule(Wizard::CELL_VALUE);\n\n$cellWizard->equals(0)\n    ->setStyle($yellowStyle);\n$conditionalStyles[] = $cellWizard->getConditional();\n\n$cellWizard->greaterThan(0)\n    ->setStyle($greenStyle);\n$conditionalStyles[] = $cellWizard->getConditional();\n\n$cellWizard->lessThan(0)\n    ->setStyle($redStyle);\n$conditionalStyles[] = $cellWizard->getConditional();\n\n$spreadsheet->getActiveSheet()\n    ->getStyle($cellWizard->getCellRange())\n    ->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Specifying Print Area - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to specify the printing area of a worksheet using PhpSpreadsheet. It uses the `setPrintArea()` method of the page setup object, specifying the range of cells to include in the printing area (e.g., 'A1:E5').\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()->setPrintArea('A1:E5');\n```\n\n----------------------------------------\n\nTITLE: Using DATEDIF Function in Worksheet - PHP\nDESCRIPTION: This example shows how to use the DATEDIF function within a worksheet to calculate the difference between two dates in various units. It sets up the start and end dates in columns B and C, then uses the DATEDIF function in column D to calculate the difference in days, months, years, months excluding years, days excluding years, and days excluding years and months.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Year')\n    ->setCellValue('A2', 'Month')\n    ->setCellValue('A3', 'Day');\n\n$worksheet->setCellValue('B1', 2001)\n    ->setCellValue('C1', 2009)\n    ->setCellValue('B2', 7)\n    ->setCellValue('C2', 12)\n    ->setCellValue('B3', 1)\n    ->setCellValue('C3', 31);\n\n$worksheet->setCellValue('D1', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"d\")')\n    ->setCellValue('D2', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"m\")')\n    ->setCellValue('D3', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"y\")')\n    ->setCellValue('D4', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"ym\")')\n    ->setCellValue('D5', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"yd\")')\n    ->setCellValue('D6', '=DATEDIF(DATE(B1,B2,B3),DATE(C1,C2,C3),\"md\")');\n\n$retVal = $worksheet->getCell('D1')->getCalculatedValue();\n// $retVal = 3105\n\n$retVal = $worksheet->getCell('D2')->getCalculatedValue();\n// $retVal = 101\n\n$retVal = $worksheet->getCell('D3')->getCalculatedValue();\n// $retVal = 8\n\n$retVal = $worksheet->getCell('D4')->getCalculatedValue();\n// $retVal = 5\n\n$retVal = $worksheet->getCell('D5')->getCalculatedValue();\n// $retVal = 183\n\n$retVal = $worksheet->getCell('D6')->getCalculatedValue();\n// $retVal = 30\n```\n\n----------------------------------------\n\nTITLE: Run a Sample from Command Line\nDESCRIPTION: This command executes a PhpSpreadsheet sample file directly from the command line. It's a way to test and run the examples without using a web server.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp vendor/phpoffice/phpspreadsheet/samples/Basic/01_Simple.php\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format with Number Wizard in PHP\nDESCRIPTION: This snippet demonstrates how to use the Number Wizard in PhpSpreadsheet to set the format code for a cell. It sets the cell value and then applies a format code with 3 decimal places and a thousands separator using the Number Wizard.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Number Wizard to build the Format Mask\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode((string) new Number(3, Number::WITH_THOUSANDS_SEPARATOR));\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // \"#,##0.000\"\nvar_dump($worksheet->getCell('C20')->getFormattedValue()); // \"-12,345.679\"\n```\n\n----------------------------------------\n\nTITLE: Setting Drawing Properties (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to set various properties of a drawing object in PhpSpreadsheet, such as name, description, path to the image file, coordinates within the worksheet, offset, rotation, and shadow effects. These properties control the placement and appearance of the drawing within the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$drawing->setName('Paid');\n$drawing->setDescription('Paid');\n$drawing->setPath('./images/paid.png');\n$drawing->setCoordinates('B15');\n$drawing->setOffsetX(110);\n$drawing->setRotation(25);\n$drawing->getShadow()->setVisible(true);\n$drawing->getShadow()->setDirection(45);\n```\n\n----------------------------------------\n\nTITLE: Grouping/Outlining a Row in PHP\nDESCRIPTION: This snippet demonstrates how to group/outline a specific row in a PhpSpreadsheet. It uses the `getRowDimension()` method to target the row and `setOutlineLevel()` to define the outline level.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension('5')->setOutlineLevel(1);\n```\n\n----------------------------------------\n\nTITLE: Calling MONTHOFYEAR Statically - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to call the MONTHOFYEAR function statically using call_user_func_array. It passes a date string to the function and retrieves the month number as the return value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'MONTHOFYEAR'],\n    ['14-July-2008']\n);\n// $retVal = 7\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Conditional getCondition to PhpSpreadsheet getConditions\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$conditional->getCondition()` to PhpSpreadsheet's `$conditional->getConditions()[0]`. In PhpSpreadsheet, conditional formatting conditions are stored in an array, so you need to access the first element.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$conditional->getCondition();\n\n// After\n$conditional->getConditions()[0];\n```\n\n----------------------------------------\n\nTITLE: Text Extract Right Functions PHP\nDESCRIPTION: Maps the Excel RIGHT and RIGHTB functions to the same PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::right method extracts a specified number of characters from the end (right) of a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_99\n\nLANGUAGE: PHP\nCODE:\n```\nRIGHT                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::right\nRIGHTB                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::right\n```\n\n----------------------------------------\n\nTITLE: Set Accounting Format with Wizard in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to use the Accounting Wizard in PhpSpreadsheet to set the format mask for a cell. It initializes the Accounting Wizard with currency symbol, decimal places, and options for thousands separator and symbol placement. It then applies the generated format code to a cell and outputs the format code and formatted value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Accounting;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Accounting Wizard to build the Format Mask\n$currencyMask = new Accounting(\n    '€',\n    2,\n    Number::WITH_THOUSANDS_SEPARATOR,\n    Currency::TRAILING_SYMBOL,\n    Currency::SYMBOL_WITH_SPACING\n);\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($currencyMask);\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // _-#,##0.00 €*_-\nvar_dump($worksheet->getCell('C20')->getFormattedValue()); //  -12,345.68 €\n```\n\n----------------------------------------\n\nTITLE: Setting Row Print Break - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to set a print break on a specific row using PhpSpreadsheet. It uses the `setBreak()` method of the worksheet object, specifying the cell ('A10' in this example) where the break should occur, and the break type (`BREAK_ROW`).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setBreak('A10', \\PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet::BREAK_ROW);\n```\n\n----------------------------------------\n\nTITLE: Converting Conditional to Wizard\nDESCRIPTION: Demonstrates converting an existing `Conditional` object to a `Wizard` object to allow manipulation using the Wizard's methods. This is useful for modifying existing conditional formatting rules.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$wizard = Wizard\\CellValue::fromConditional($conditional, '$A$3:$E$8');\n$wizard->greaterThan(12.5);\n\n$newConditional = $wizard->getConditional();\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute from Datetime in PhpSpreadsheet using Worksheet\nDESCRIPTION: Demonstrates extracting the minute from a date/time value using the MINUTE function within a PhpSpreadsheet worksheet. It sets up the worksheet with date/time strings and applies the MINUTE formula to extract the minute component, then retrieves the calculated values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->setCellValue('A1', 'Time String')\n    ->setCellValue('A2', '31-Dec-2008 17:30')\n    ->setCellValue('A3', '14-Feb-2008 4:20 AM')\n    ->setCellValue('A4', '14-Feb-2008 4:45 PM');\n\n$worksheet->setCellValue('B2', '=MINUTE(A2)')\n    ->setCellValue('B3', '=MINUTE(A3)')\n    ->setCellValue('B4', '=MINUTE(A4)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 30\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 20\n\n$retVal = $worksheet->getCell('B4')->getCalculatedValue();\n// $retVal = 45\n```\n\n----------------------------------------\n\nTITLE: Calling WEEKDAY Statically - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to call the WEEKDAY function statically using call_user_func_array. It passes a date string to the function and retrieves the weekday as the return value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'WEEKDAY'],\n    ['14-July-2008']\n);\n// $retVal = 7\n```\n\n----------------------------------------\n\nTITLE: Looping Through Cells Using Iterators in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to loop through all cells in a worksheet using iterators. It iterates through rows and then cells within each row, displaying their values in an HTML table.  It also demonstrates setting the `setIterateOnlyExistingCells` property.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$reader->setReadDataOnly(TRUE);\n$spreadsheet = $reader->load(\"test.xlsx\");\n\n$worksheet = $spreadsheet->getActiveSheet();\n\necho '<table>' . PHP_EOL;\nforeach ($worksheet->getRowIterator() as $row) {\n    echo '<tr>' . PHP_EOL;\n    $cellIterator = $row->getCellIterator();\n    $cellIterator->setIterateOnlyExistingCells(FALSE); // This loops through all cells,\n                                                       //    even if a cell value is not set.\n                                                       // For 'TRUE', we loop through cells\n                                                       //    only when their value is set.\n                                                       // If this method is not called,\n                                                       //    the default value is 'false'.\n    foreach ($cellIterator as $cell) {\n        echo '<td>' .\n             $cell->getValue() .\n             '</td>' . PHP_EOL;\n    }\n    echo '</tr>' . PHP_EOL;\n}\necho '</table>' . PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Writing XLSX Spreadsheet PHP\nDESCRIPTION: This code writes a PhpSpreadsheet spreadsheet object to an XLSX file. It creates a new `Xlsx` writer instance, passing the `$spreadsheet` object as an argument, and then saves the spreadsheet to the specified file. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx($spreadsheet);\n$writer->save(\"05featuredemo.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Setting Value Binder (AdvancedValueBinder) (PHP)\nDESCRIPTION: Sets the value binder to AdvancedValueBinder which can handle date and time values in various formats.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// MySQL-like timestamp '2008-12-31' or date string\n// Old method using static property\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet->setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n```\n\n----------------------------------------\n\nTITLE: Ignoring Empty Cells using PhpSpreadsheet Reader\nDESCRIPTION: This code snippet demonstrates how to configure the PhpSpreadsheet reader to ignore empty cells when loading a spreadsheet. This can help reduce memory usage when dealing with large spreadsheets containing many empty cells. The `setReadEmptyCells(false)` method is used to achieve this.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xls';\n$inputFileName = './sampleData/example1.xls';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we only want to load cell's that contain actual content  **/\n$reader->setReadEmptyCells(false);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: COUNTIF/COUNTIFS Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel COUNTIF and COUNTIFS functions to the PhpSpreadsheet implementation using Conditional class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::COUNTIF\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::COUNTIFS\n```\n\n----------------------------------------\n\nTITLE: Setting DateGroup Filter Type PHP\nDESCRIPTION: Sets the filter type for a column to 'DateGroup Filter'. DateGroup filters allow filtering by date components such as year, month, and day. DateGroup filters are still applied as a Standard Filter type.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$columnFilter->setFilterType(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_FILTERTYPE_FILTER\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying Reader with IOFactory::identify()\nDESCRIPTION: This code snippet demonstrates using `IOFactory::identify()` to determine the file type before creating a reader. This is useful when the file type is unknown. It requires `$inputFileName` to be set.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n\n/**\n * Identify the type of $inputFileName.\n * See below for a possible improvement for release 4.1.0+.\n */\n$inputFileType = \\PhpOffice\\PhpSpreadsheet\\IOFactory::identify($inputFileName);\n/**  Create a new Reader of the type that has been identified  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Setting a Row of Cells from a 1-D Array in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to set a single row of cells using the `fromArray()` method with a 1-dimensional array. The array values are treated as a single row.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$rowArray = ['Value1', 'Value2', 'Value3', 'Value4'];\n$spreadsheet->getActiveSheet()\n    ->fromArray(\n        $rowArray,   // The data to set\n        NULL,        // Array values with this value will not be set\n        'C3'         // Top left coordinate of the worksheet range where\n                     //    we want to set these values (default is A1)\n    );\n```\n\n----------------------------------------\n\nTITLE: Disabling Formula Pre-Calculation for HTML Writing - PHP\nDESCRIPTION: This code snippet shows how to disable formula pre-calculation when writing an HTML file.  Pre-calculation can be slow on large spreadsheets. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet);\n$writer->setPreCalculateFormulas(false);\n\n$writer->save(\"05featuredemo.htm\");\n```\n\n----------------------------------------\n\nTITLE: Applying Thick Red Border Outline - PHP\nDESCRIPTION: This snippet demonstrates how to apply a thick red border outline around a range of cells (B2:G8) using a style array. It sets the `borderStyle` to `BORDER_THICK` and the `color` to red ('FFFF0000').\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$styleArray = [\n    'borders' => [\n        'outline' => [\n            'borderStyle' => \\PhpOffice\\PhpSpreadsheet\\Style\\Border::BORDER_THICK,\n            'color' => ['argb' => 'FFFF0000'],\n        ],\n    ],\n];\n\n$worksheet->getStyle('B2:G8')->applyFromArray($styleArray);\n```\n\n----------------------------------------\n\nTITLE: Setting and Calculating Month Values in Cells - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set date values in cells and calculate the month using the MONTH function. It sets date strings in column A and then uses the MONTH function in column B to extract the month number. The calculated values are then retrieved using getCalculatedValue().\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String');\n$worksheet->setCellValue('A2', '31-Dec-2008');\n$worksheet->setCellValue('A3', '14-Feb-2008');\n\n$worksheet->setCellValue('B2', '=MONTH(A2)');\n$worksheet->setCellValue('B3', '=MONTH(A3)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 12\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 2\n```\n\n----------------------------------------\n\nTITLE: Set Join Condition for Custom Filter in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to set the join condition to AND for custom filter rules. It uses the `AUTOFILTER_COLUMN_JOIN_AND` constant from the `PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column` class to combine the rules with an AND operator.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->setJoin(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_COLUMN_JOIN_AND\n);\n```\n\n----------------------------------------\n\nTITLE: Identifying Reader Against Specific Formats\nDESCRIPTION: This code shows using `IOFactory::identify()` with an array of formats to check against, useful for limiting the file type identification.  It requires `$inputFileName` and `$testAgainstFormats` to be defined.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n$testAgainstFormats = [\n    \\PhpOffice\\PhpSpreadsheet\\IOFactory::READER_XLS,\n    \\PhpOffice\\PhpSpreadsheet\\IOFactory::READER_HTML,\n];\n\n/**  Identify the type of $inputFileName  **/\n$inputFileType = \\PhpOffice\\PhpSpreadsheet\\IOFactory::identify($inputFileName, $testAgainstFormats);\n```\n\n----------------------------------------\n\nTITLE: Creating Defined Names using helper method\nDESCRIPTION: This code snippet demonstrates the use of the DefinedName::createInstance() helper method for creating defined names in PhpSpreadsheet. It identifies whether the value expression is a Range or a Formula, and instantiate the appropriate class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/defined-names.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->spreadsheet->addDefinedName(\n    DefinedName::createInstance('FOO', $this->spreadsheet->getSheetByName('Sheet #2'), '=16%', true)\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Active Sheet by Index (PHP)\nDESCRIPTION: Sets the active worksheet by its index (position in the worksheet tab bar). The index starts at 0 for the first worksheet, 1 for the second, and so on.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$activeWorksheet = $spreadsheet->setActiveSheetIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Spreadsheet and Getting Active Worksheet (PHP)\nDESCRIPTION: Initializes a new Spreadsheet object and retrieves the active worksheet. The active worksheet is the default 'Sheet1' when a new spreadsheet is created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet = new Spreadsheet();\n$activeWorksheet = $spreadsheet->getActiveSheet();\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with Charts using LOAD_WITH_CHARTS - PhpSpreadsheet\nDESCRIPTION: This snippet illustrates loading a spreadsheet with charts using the `LOAD_WITH_CHARTS` constant. It shows an alternative way to tell the reader to include charts during the load operation, simplifying the process into a single line.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReaderForFile(\"spreadsheetWithCharts.xlsx\");\n$reader->load(\"spreadsheetWithCharts.xlsx\", $reader::LOAD_WITH_CHARTS);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Margins PHP\nDESCRIPTION: This code demonstrates how to set the page margins for a worksheet in PhpSpreadsheet. It uses the `getPageMargins()` method to access the page margins and then sets the `setTop()`, `setRight()`, `setLeft()`, and `setBottom()` properties to specify the margin values in inches.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageMargins()->setTop(1);\n$spreadsheet->getActiveSheet()->getPageMargins()->setRight(0.75);\n$spreadsheet->getActiveSheet()->getPageMargins()->setLeft(0.75);\n$spreadsheet->getActiveSheet()->getPageMargins()->setBottom(1);\n```\n\n----------------------------------------\n\nTITLE: Set Chart Renderer in PhpSpreadsheet\nDESCRIPTION: This PHP code configures PhpSpreadsheet to use the `MtJpGraphRenderer` class for rendering charts. It's an alternative to the original JpGraph renderer, using a maintained version of the library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nSettings::setChartRenderer(\\PhpOffice\\PhpSpreadsheet\\Chart\\Renderer\\MtJpGraphRenderer::class);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Rows with No Cells using PhpSpreadsheet Reader\nDESCRIPTION: This code snippet shows how to configure the PhpSpreadsheet reader to ignore rows that contain no cells when loading a spreadsheet file. This can be useful for optimizing memory usage, especially when dealing with spreadsheets that have many empty rows. The `setIgnoreRowsWithNoCells(true)` method is used to enable this behavior.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xlsx';\n$inputFileName = './sampleData/example1.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader that we do not want rows with no cells  **/\n$reader->setIgnoreRowsWithNoCells(true);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: AVERAGEIFS Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel AVERAGEIFS function to the PhpSpreadsheet implementation. Calculates the average based on multiple criteria using the Conditional::AVERAGEIFS method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::AVERAGEIFS\n```\n\n----------------------------------------\n\nTITLE: Creating MemoryDrawing from Stream (PhpSpreadsheet)\nDESCRIPTION: This snippet demonstrates creating a MemoryDrawing object from a stream using the `fromStream()` static method.  This is useful when reading images from external data sources like S3 buckets.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n$drawing = MemoryDrawing::fromStream($imageStreamFromS3Bucket);\n```\n\n----------------------------------------\n\nTITLE: Calculating Days360 in PhpSpreadsheet using Function Call\nDESCRIPTION: Demonstrates calculating the number of days between two dates using the DAYS360 function in PhpSpreadsheet by directly calling the function. It uses Excel timestamps for the dates and calculates the difference in days, with and without specifying the European method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$date1 = 37655.0; // Excel timestamp for 25-Oct-2007\n$date2 = 39233.0; // Excel timestamp for 8-Dec-2015\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DAYS360'],\n    [$date1, $date2]\n);\n// $retVal = 1558\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DAYS360'],\n    [$date1, $date2, TRUE]\n);\n// $retVal = 1557\n```\n\n----------------------------------------\n\nTITLE: Configure RectorPHP for PHPExcel to PhpSpreadsheet Migration\nDESCRIPTION: This PHP code configures RectorPHP to use the `PHPOfficeSetList::PHPEXCEL_TO_PHPSPREADSHEET` set, which defines the rules for automatically migrating from PHPExcel to PhpSpreadsheet.  It is used within the `rector.php` configuration file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nuse Rector\\Config\\RectorConfig;\nuse Rector\\PHPOffice\\Set\\PHPOfficeSetList;\n\nreturn static function (RectorConfig $rectorConfig): void {\n    $rectorConfig->sets([\n        PHPOfficeSetList::PHPEXCEL_TO_PHPSPREADSHEET\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Protecting Cell Ranges for Sorting in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to protect specific cell ranges to allow sorting without requiring the sheet password. It demonstrates protecting a column without a password and protecting another column with a password. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$sheet->protectCells('A:A'); // column A can be sorted without password\n$sheet->protectCells('B:B', 'sortpw'); // column B can be sorted if the range password sortpw is supplied\n```\n\n----------------------------------------\n\nTITLE: Copying a Worksheet within the same workbook (simpler) - PhpSpreadsheet\nDESCRIPTION: Starting with PhpSpreadsheet 3.9.0, copies a worksheet within the same workbook using the `duplicateWorksheetByTitle` method, which automatically sets a unique title for the copied sheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$copiedWorksheet = $spreadsheet->duplicateWorksheetByTitle('sheetname');\n```\n\n----------------------------------------\n\nTITLE: Reading an HTML Spreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to read an HTML file into a PhpSpreadsheet spreadsheet object.  Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Html();\n\n$spreadsheet = $reader->load(\"05featuredemo.html\");\n```\n\n----------------------------------------\n\nTITLE: Create Wildcard Custom Filter Rule in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to create a custom filter rule with a wildcard to filter column entries beginning with the letter 'U'. It uses the `AUTOFILTER_COLUMN_RULE_EQUAL` constant and the `AUTOFILTER_RULETYPE_CUSTOMFILTER` constant, setting the rule to 'U*' for 'begins with U'.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        'U*'\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_CUSTOMFILTER\n    );\n```\n\n----------------------------------------\n\nTITLE: Populating Data Model with Cell References from PHPSpreadsheet\nDESCRIPTION: This snippet demonstrates populating a data model from an Excel row in PHPSpreadsheet, leveraging cell references. It modifies the `MonthlySales::fromExcel()` method to selectively include sales values based on non-null values, using the column header array to map column addresses to salesperson names. The `toArray()` method is called with `returnCellRef: true`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass MonthlySales {\n    private function __construct(\n        public readonly string $month,\n        public readonly array $sales,\n    ) {}\n\n    public static function fromExcel(array $values, array $headers): self {\n        $month = array_shift($values);\n        $salesValues = [];\n        foreach ($values as $column => $value) {\n            // Ignore salespeople who have null sales values\n            if ($value !== null) {\n                $salesValues[$headers[$column]] = $value;\n            }\n        }\n        return new self($month, $salesValues);\n    }\n}\n\n$monthlySalesData = new MonthlySalesCollection();\n\n// Read from the header row of the worksheet\n$excelHeaderRow = [\n    'B' => 'Jones',\n    'C' => 'Sorvino',\n    'D' => 'Gupta',\n    'E' => 'Choi'\n];\n\n$dataArray = $worksheet->toArray(formatData: true, returnCellRef: true);\nforeach ($dataArray as $excelDataRow) {\n    // Check for empty rows\n    if (count(array_filter($excelDataRow, function ($value) {\n        return $value !== null;\n    })) === 0) {\n        continue;   // Ignore empty rows\n    }\n\n    $monthlySalesData->add(MonthlySales::fromExcel(\n        $excelDataRow,\n        $excelHeaderRow\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Data Validation for Multiple Cells\nDESCRIPTION: Cloning a data validation ruleset and applying it to multiple cells. Compatible with PhpSpreadsheet release 3 and below.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('B8')->setDataValidation(clone $validation);\n```\n\n----------------------------------------\n\nTITLE: Register PDF Writer Class\nDESCRIPTION: This code snippet registers a PDF writer class with PhpSpreadsheet. It allows you to save spreadsheets as PDF files using a specified PDF rendering library like Dompdf, Mpdf, or Tcpdf. Ensure the selected PDF library is installed before executing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Dompdf, Mpdf or Tcpdf (as appropriate)\n$className = \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Dompdf::class;\nIOFactory::registerWriter('Pdf', $className);\n```\n\n----------------------------------------\n\nTITLE: Identifying Empty Rows with Row Iterator in PHP\nDESCRIPTION: This snippet demonstrates how to use the row iterator to identify and ignore empty rows in a PhpSpreadsheet worksheet. The isEmpty() method checks if a row is empty. The code iterates through each row, and if a row is determined to be empty, it is skipped.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$rowIterator = $worksheet->getRowIterator();\nforeach ($rowIterator as $row) {\n    if ($row->isEmpty()) { // Ignore empty rows\n        continue;\n    }\n\n    $columnIterator = $row->getCellIterator();\n    foreach ($columnIterator as $cell) {\n        // Do something with the cell here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting a Cell - PHP\nDESCRIPTION: This snippet shows how to apply conditional formatting to a cell in PhpSpreadsheet, changing its appearance based on its value. It sets the font color to red if the cell value is less than zero and green if it's zero or more. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$conditional1 = new \\PhpOffice\\PhpSpreadsheet\\Style\\Conditional();\n$conditional1->setConditionType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::CONDITION_CELLIS);\n$conditional1->setOperatorType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::OPERATOR_LESSTHAN);\n$conditional1->addCondition('0');\n$conditional1->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_RED);\n$conditional1->getStyle()->getFont()->setBold(true);\n\n$conditional2 = new \\PhpOffice\\PhpSpreadsheet\\Style\\Conditional();\n$conditional2->setConditionType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::CONDITION_CELLIS);\n$conditional2->setOperatorType(\\PhpOffice\\PhpSpreadsheet\\Style\\Conditional::OPERATOR_GREATERTHANOREQUAL);\n$conditional2->addCondition('0');\n$conditional2->getStyle()->getFont()->getColor()->setARGB(\\PhpOffice\\PhpSpreadsheet\\Style\\Color::COLOR_GREEN);\n$conditional2->getStyle()->getFont()->setBold(true);\n\n$conditionalStyles = $spreadsheet->getActiveSheet()->getStyle('B2')->getConditionalStyles();\n$conditionalStyles[] = $conditional1;\n$conditionalStyles[] = $conditional2;\n\n$spreadsheet->getActiveSheet()->getStyle('B2')->setConditionalStyles($conditionalStyles);\n```\n\n----------------------------------------\n\nTITLE: Setting and Calculating Year Values in Cells - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set date values in cells and calculate the year using the YEAR function. It sets date strings in column A and then uses the YEAR function in column B to extract the year. The calculated values are then retrieved using getCalculatedValue().\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '17-Jul-1982')\n    ->setCellValue('A3', '16-Apr-2009');\n\n$worksheet->setCellValue('B2', '=YEAR(A2)')\n    ->setCellValue('B3', '=YEAR(A3)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 1982\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 2009\n```\n\n----------------------------------------\n\nTITLE: Retrieving Conditional Object from Wizard - PHP\nDESCRIPTION: This code snippet shows how to retrieve the Conditional object from the Wizard after defining the conditions. This object can then be added to an array of conditional styles, which can be applied to a cell range in the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$conditional = $wizard->getConditional();\n$conditionalStyles = [$conditional];\n```\n\nLANGUAGE: php\nCODE:\n```\n$conditionalStyles[] = $wizard->getConditional();\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Zoom Level PHP\nDESCRIPTION: This snippet sets the zoom level of a worksheet using the `setZoomScale()` method.  The zoom level should be within the range of 10 to 400. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_117\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getSheetView()->setZoomScale(75);\n```\n\n----------------------------------------\n\nTITLE: Text Clean Function PHP\nDESCRIPTION: Maps the Excel CLEAN function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Trim::nonPrintable method removes non-printable characters from a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_84\n\nLANGUAGE: PHP\nCODE:\n```\nCLEAN                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Trim::nonPrintable\n```\n\n----------------------------------------\n\nTITLE: Checking if a Cell Contains a Formula PHP\nDESCRIPTION: This snippet shows how to check if a cell contains a formula using the `isFormula()` method. It returns a boolean value, indicating whether the cell contains a formula or a simple value. This allows you to decide whether to call `getCalculatedValue()` to perform an evaluation.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('E11')->isFormula();\n```\n\n----------------------------------------\n\nTITLE: Text Format Function PHP\nDESCRIPTION: Maps the Excel TEXT function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::TEXTFORMAT method formats a value (number, date, etc.) as text using a specified format string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_103\n\nLANGUAGE: PHP\nCODE:\n```\nTEXT                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::TEXTFORMAT\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet for a Drawing (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to associate an existing drawing object with the active worksheet of a PhpSpreadsheet spreadsheet. This effectively adds the drawing to the specified worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_101\n\nLANGUAGE: php\nCODE:\n```\n$drawing->setWorksheet($spreadsheet->getActiveSheet());\n```\n\n----------------------------------------\n\nTITLE: Duplicating Conditional Style - PHP\nDESCRIPTION: This snippet demonstrates how to duplicate a conditional style from one cell to a range of cells in PhpSpreadsheet. This is useful for applying the same formatting rules to multiple cells quickly. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->duplicateConditionalStyle(\n        $spreadsheet->getActiveSheet()->getConditionalStyles('B2'),\n        'B3:B7'\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting a Cell's Formatting Mask in PhpSpreadsheet\nDESCRIPTION: This snippet illustrates how to set a cell's value and format mask using PhpSpreadsheet. It demonstrates how setting a string value doesn't automatically convert it to a number or apply a specific format mask, and how to explicitly change the format mask to a desired currency format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Set Cell C21 using a formatted string value\n$worksheet->getCell('C20')->setValue('€ -1234.567');\n\n// The Cell value should be the string that we set\nvar_dump($worksheet->getCell('C20')->getValue());\n// The Format Mask should be \"General\"\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n// The formatted value should still be the string that we set\nvar_dump($worksheet->getCell('C20')->getFormattedValue());\n\n// Set Cell C21 using a numeric value\n$worksheet->getCell('C21')->setValue('-1234.567');\n\n// The numeric string value should have been converted to a float\nvar_dump($worksheet->getCell('C21')->getValue());\n// The Format Mask should be \"General\"\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode());\nvar_dump($worksheet->getCell('C21')->getFormattedValue());\n\n// Change the Format Mask for C21 to a Currency mask\n$worksheet->getCell('C21')\n        ->getStyle()->getNumberFormat()->setFormatCode('€ #,##0;€ -#,##0');\n\n// The float value should still be the same\nvar_dump($worksheet->getCell('C21')->getValue());\n// The Format Mask should be the new mask that we set\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode());\n// The value should now be formatted as a Currency\nvar_dump($worksheet->getCell('C21')->getFormattedValue());\n```\n\n----------------------------------------\n\nTITLE: Getting AutoFilter Column PHP\nDESCRIPTION: Retrieves the AutoFilter column object for a specific column on the worksheet.  This is necessary to set filter expressions for that column.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$autoFilter = $spreadsheet->getActiveSheet()->getAutoFilter();\n$columnFilter = $autoFilter->getColumn('C');\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Cells from XLSX with Filter PHP\nDESCRIPTION: This code demonstrates how to read specific cells from an XLSX file using a custom read filter. The `MyReadFilter` class implements the `IReadFilter` interface and determines whether to read a cell based on its row and column. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass MyReadFilter implements \\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter {\n\n    public function readCell($columnAddress, $row, $worksheetName = '') {\n        // Read title row and rows 20 - 30\n        if ($row == 1 || ($row >= 20 && $row <= 30)) {\n            return true;\n        }\n        return false;\n    }\n}\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xlsx();\n$reader->setReadFilter( new MyReadFilter() );\n$spreadsheet = $reader->load(\"06largescale.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Applying Advanced Borders - PHP\nDESCRIPTION: This snippet demonstrates how to apply advanced border styles to a range of cells in PhpSpreadsheet. The `$advancedBorders` parameter in `applyFromArray` controls whether the styles are applied to the range as a whole or to individual cells. It requires the PhpSpreadsheet library to be installed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$sheet->setShowGridlines(false);\n$styleArray = [\n    'borders' => [\n        'bottom' => ['borderStyle' => 'hair', 'color' => ['argb' => 'FFFF0000']],\n        'top' => ['borderStyle' => 'hair', 'color' => ['argb' => 'FFFF0000']],\n        'right' => ['borderStyle' => 'hair', 'color' => ['argb' => 'FF00FF00']],\n        'left' => ['borderStyle' => 'hair', 'color' => ['argb' => 'FF00FF00']],\n    ],\n];\n$sheet->getStyle('B2:C3')->applyFromArray($styleArray);\n$sheet->getStyle('B5:C6')->applyFromArray($styleArray, false);\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Load Sheets Only in PHP\nDESCRIPTION: Sets the 'Load Sheets Only' option for the reader object in PhpSpreadsheet.  This setter method defines which worksheets should be loaded and also includes an option to load all sheets.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->setLoadSheetsOnly()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->setLoadAllSheets()\n```\n\n----------------------------------------\n\nTITLE: Guessing CSV Encoding - PhpSpreadsheet\nDESCRIPTION: This code snippet uses the `guessEncoding` method to attempt to detect the encoding of a CSV file, and then sets the input encoding for the CSV reader using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv` reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$encoding = \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv::guessEncoding('sample.csv');\n// or, e.g. $encoding = \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv::guessEncoding(\n//                      'sample.csv', 'ISO-8859-2');\n$reader->setInputEncoding($encoding);\n$reader->setDelimiter(';');\n$reader->setEnclosure('');\n$reader->setSheetIndex(0);\n\n$spreadsheet = $reader->load('sample.csv');\n```\n\n----------------------------------------\n\nTITLE: Removing Rows in PHP\nDESCRIPTION: This snippet shows how to remove rows from a PhpSpreadsheet starting at a specific row number. It uses the `removeRow()` method with the starting row number and the number of rows to remove as parameters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_98\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->removeRow(7, 2);\n```\n\n----------------------------------------\n\nTITLE: Calculating Date with Configuration - PHP\nDESCRIPTION: This example demonstrates how to calculate a date using the DATE function while configuring calculation caching and return date types. It disables calculation caching, sets the return date type to Excel format, calculates the date, then sets the return date type to PHP numeric format and recalculates the date. Finally, it resets the return date type to the original format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// We're going to be calling the same cell calculation multiple times,\n//    and expecting different return values, so disable calculation cacheing\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::getInstance()->setCalculationCacheEnabled(FALSE);\n\n$saveFormat = \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::getReturnDateType();\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATE'],\n    [2008, 12, 31]\n);\n// $retVal = 39813.0\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_PHP_NUMERIC\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATE'],\n    [2008, 12, 31]\n);\n// $retVal = 1230681600\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType($saveFormat);\n```\n\n----------------------------------------\n\nTITLE: HTML Table for PhpSpreadsheet Feature Support\nDESCRIPTION: This HTML table displays the support level for different PhpSpreadsheet features across various file formats like XLS, XLSX, ODS, CSV, HTML, and PDF. The table uses visual cues (green checkmarks, red crosses, orange circles) to indicate full, partial, or no support respectively. The table includes features like Merged Cells, Cell Comments, Cell Validation, AutoFilters, Macros, Form Controls and Security.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 1em;\">http</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><strong>Merged Cells</strong></td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><a href=\"#setGetComment\"><strong>Cell Comments</strong></a></td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: orange;\">●</td>\n        <td style=\"text-align: center; color: orange;\">●</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: orange;\">● <a href=\"#footnote1\"><sup>1</sup></a></td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 1em;\">Rich Text</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 1em;\">Alignment</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 1em;\">Background Image</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><a href=\"#setGetCellValidation\"><strong>Cell Validation</strong></a></td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><a href=\"#setGetAutoFilter\"><strong>AutoFilters</strong></a></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">AutoFilter Expressions</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Filter</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Custom Filter</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">DateGroup Filter</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Dynamic Filter</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Colour Filter</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Icon Filter</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Top 10 Filter</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center;\">N/A</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><a href=\"#setGetMacro\"><strong>Macros</strong></a></td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: orange;\">● <a href=\"#footnote5\"><sup>5</sup</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><strong>Form Controls</strong></td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: orange;\">● <a href=\"#footnote4\"><sup>4</sup</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 0.5em;\"><a href=\"#setGetSecurity\"><strong>Security</strong></a></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Protection (prevent editing)</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: green;\">✔</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <td style=\"padding-left: 2em;\">Encryption (prevent viewing)</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center;\">N/A</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n        <td style=\"text-align: center; color: red;\">✖</td>\n    </tr>\n    <tr>\n        <th></th>\n        <th>XLS</th>\n        <th>XLSX</th>\n        <th>Ods</th>\n        <th>CSV</th>\n        <th>HTML</th>\n        <th>PDF</th>\n    </tr>\n    <tr>\n        <th></th>\n        <th colspan=\"6\">Writers</th>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Index for CSV Writing - PHP\nDESCRIPTION: This code snippet demonstrates how to specify the worksheet index to write to a CSV file. CSV files can only contain one worksheet, so this option allows you to select which sheet to export. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n$writer->setSheetIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Row Height PHP\nDESCRIPTION: This snippet sets the default row height for all rows in the active worksheet using points as the unit of measure.  The `setRowHeight()` method is used to set the height. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);\n```\n\n----------------------------------------\n\nTITLE: Text Character Conversion (CHAR/UNICHAR) PHP\nDESCRIPTION: Maps the Excel CHAR and UNICHAR functions to the same PHP implementation within PhpSpreadsheet. This shows both functions are processed by the \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::character method, which converts a numeric code to its corresponding character.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_83\n\nLANGUAGE: PHP\nCODE:\n```\nCHAR                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::character\nUNICHAR                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::character\n```\n\n----------------------------------------\n\nTITLE: Exporting Cell Style as Array - PHP\nDESCRIPTION: This snippet shows how to export the style of a cell (A3) as an array. This can be useful for inspecting or reusing existing styles.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$styleArray = $spreadsheet->getActiveSheet()->getStyle('A3')->exportArray();\n```\n\n----------------------------------------\n\nTITLE: Using DSTDEV in PhpSpreadsheet\nDESCRIPTION: This code snippet shows how to calculate the estimated standard deviation of a population based on a sample using DSTDEV in PhpSpreadsheet. It defines a database and criteria, loads them into the worksheet, sets up a formula to calculate DSTDEV, and retrieves the calculated value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DSTDEV(A4:E10,\"Yield\",A1:A3)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 2.97\n```\n\n----------------------------------------\n\nTITLE: Run RectorPHP to Process Source Files\nDESCRIPTION: This shell command executes RectorPHP to process the source files located in the `src/` directory, applying the configured migration rules. This automates the process of updating code from PHPExcel to PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nvendor/bin/rector process src\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment - PHP\nDESCRIPTION: This snippet demonstrates how to set the vertical alignment to the top for cells A1:D4 in a PhpSpreadsheet worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('A1:D4')\n    ->getAlignment()->setVertical(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::VERTICAL_TOP);\n```\n\n----------------------------------------\n\nTITLE: Calculating DATEVALUE with Configuration - PHP\nDESCRIPTION: This example demonstrates how to calculate a date value from a date string using the DATEVALUE function while configuring calculation caching and return date types. It disables calculation caching, sets the return date type to Excel format, calculates the date value, then sets the return date type to PHP numeric format and recalculates the date value. Finally, it resets the return date type to the original format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// We're going to be calling the same cell calculation multiple times,\n//    and expecting different return values, so disable calculation cacheing\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Calculation::getInstance()->setCalculationCacheEnabled(FALSE);\n\n$saveFormat = \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::getReturnDateType();\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEVALUE'],\n    ['31-Dec-2008']\n);\n// $retVal = 39813.0\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_PHP_NUMERIC\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DATEVALUE'],\n    ['31-Dec-2008']\n);\n// $retVal = 1230681600\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType($saveFormat);\n```\n\n----------------------------------------\n\nTITLE: Create 'Between' Custom Filter Rule in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to create a 'between' condition by defining two rules with `AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL` and `AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL`. The values are set to -20 and 20 respectively, and the rule type is set to `AUTOFILTER_RULETYPE_CUSTOMFILTER` for both rules.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL,\n        -20\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_CUSTOMFILTER\n    );\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL,\n        20\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_CUSTOMFILTER\n    );\n```\n\n----------------------------------------\n\nTITLE: Text Join Function PHP\nDESCRIPTION: Maps the Excel TEXTJOIN function to its PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::TEXTJOIN method concatenates multiple text strings with a specified delimiter, and can optionally ignore empty strings.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_106\n\nLANGUAGE: PHP\nCODE:\n```\nTEXTJOIN                 | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::TEXTJOIN\n```\n\n----------------------------------------\n\nTITLE: Text Find Functions (Sensitive) PHP\nDESCRIPTION: Maps the Excel FIND and FINDB functions to the same PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::sensitive method performs a case-sensitive search for one text string within another, returning the starting position of the first occurrence.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_89\n\nLANGUAGE: PHP\nCODE:\n```\nFIND                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::sensitive\nFINDB                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::sensitive\n```\n\n----------------------------------------\n\nTITLE: Suppressing Mac Line Ending Detection in CSV Reader - PHP\nDESCRIPTION: This code snippet shows how to disable automatic detection of Mac line endings in the CSV reader. This is useful in cases where you want to avoid the deprecated behavior related to Mac line endings in PHP 8.1 and later. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Csv();\n$reader->setTestAutoDetect(false);\n```\n\n----------------------------------------\n\nTITLE: Set Top Ten Filter Type in PhpSpreadsheet\nDESCRIPTION: This code snippet sets the filter type to `TOPTENFILTER`. It uses the `AUTOFILTER_FILTERTYPE_TOPTENFILTER` constant from the `PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->setFilterType(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_FILTERTYPE_TOPTENFILTER\n);\n```\n\n----------------------------------------\n\nTITLE: Creating DateGroup Filter Rule PHP\nDESCRIPTION: Creates a DateGroup filter rule for a column.  This example filters by year and month (2012 and January, respectively).  The rule type is explicitly set to AUTOFILTER_RULETYPE_DATEGROUP to differentiate from standard simple filters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        [\n            'year' => 2012,\n            'month' => 1\n        ]\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_DATEGROUP\n    );\n```\n\n----------------------------------------\n\nTITLE: Custom TCPDF Implementation\nDESCRIPTION: This snippet shows how to extend the TCPDF library and its corresponding PhpSpreadsheet writer to provide a custom implementation or configuration. This allows developers to modify the default behavior of the PDF generation process.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nclass My_Custom_TCPDF extends TCPDF\n{\n\t// ...\n}\n\nclass My_Custom_TCPDF_Writer extends \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Tcpdf\n{\n\tprotected function createExternalWriterInstance($orientation, $unit, $paperSize)\n\t{\n\t\t$instance = new My_Custom_TCPDF($orientation, $unit, $paperSize);\n\n\t\t// more configuration of $instance\n\n\t\treturn $instance;\n\t}\n}\n\n\\PhpOffice\\PhpSpreadsheet\\IOFactory::registerWriter('Pdf', MY_TCPDF_WRITER::class);\n```\n\n----------------------------------------\n\nTITLE: VLookup Function Implementation\nDESCRIPTION: The VLOOKUP function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\VLookup::lookup method. It performs a vertical lookup by searching for a value in the first column of a range and then returns a value from any cell on the same row of the range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\VLookup::lookup\n```\n\n----------------------------------------\n\nTITLE: Combining Reader Flags - PhpSpreadsheet\nDESCRIPTION: This code demonstrates how to combine multiple reader flags using the `|` operator to load a spreadsheet with specific options, such as reading data only and ignoring empty cells. It shows how to combine multiple feature flags in a single method call, allowing for concise and flexible configuration of reader behavior.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReaderForFile('myExampleFile.xlsx');\n$reader->load(\n    'spreadsheetWithCharts.xlsx',\n    $reader::READ_DATA_ONLY | $reader::IGNORE_EMPTY_CELLS\n);\n```\n\n----------------------------------------\n\nTITLE: Text Exact Comparison PHP\nDESCRIPTION: Maps the Excel EXACT function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::exact method performs a case-sensitive comparison of two text strings, returning TRUE if they are identical and FALSE otherwise.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_88\n\nLANGUAGE: PHP\nCODE:\n```\nEXACT                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::exact\n```\n\n----------------------------------------\n\nTITLE: Getting the Excel Calendar PHP\nDESCRIPTION: This snippet shows how to retrieve the currently configured Excel calendar using the `\\PhpOffice\\PhpSpreadsheet\\Shared\\Date::getExcelCalendar()` method. This function is useful to know whether the Windows 1900 or Mac 1904 calendar is currently being used.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$baseDate = \\PhpOffice\\PhpSpreadsheet\\Shared\\Date::getExcelCalendar();\n```\n\n----------------------------------------\n\nTITLE: Text Extract Before Function PHP\nDESCRIPTION: Maps the Excel TEXTBEFORE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::before method extracts the text before a specific delimiter within a string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_105\n\nLANGUAGE: PHP\nCODE:\n```\nTEXTBEFORE               | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::before\n```\n\n----------------------------------------\n\nTITLE: Hyperlink Function Implementation\nDESCRIPTION: The HYPERLINK function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Hyperlink::set method. This method creates a hyperlink in a cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Hyperlink::set\n```\n\n----------------------------------------\n\nTITLE: Writing Times to Excel with PhpSpreadsheet\nDESCRIPTION: This code shows how to write time values to a PhpSpreadsheet cell by representing them as fractions of a day and applying a number format mask for proper display.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/The Dating Game.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Shared\\Date as SharedDate;\n\n// Create new Spreadsheet object\n$spreadsheet = new Spreadsheet();\n$worksheet = $spreadsheet->getActiveSheet();\n\n// Calculate today's date as an Excel serialized timestamp\n$today = SharedDate::PHPToExcel(new DateTime('today'));\n\n$data = [\n    ['Formatted Time', 'Numeric Value'],\n    ['=C2', 0],\n    ['=C3', 0.25],\n    ['=C4', 0.5],\n    ['=C5', 0.75],\n    ['=C6', $today + 0.5],\n];\n\n// Write our data to the worksheet\n$worksheet->fromArray($data, null, 'B1', true);\n\n// Display values in column B as human-readable dates\n$worksheet->getStyle('B2:B5')->getNumberFormat()->setFormatCode('hh:mm:ss');\n$worksheet->getStyle('B6')->getNumberFormat()->setFormatCode('yyyy-mm-dd hh:mm:ss');\n// Set some additional styling\n$worksheet->getStyle('B1:C1')->getFont()->setBold(true);\n$worksheet->getColumnDimension('B')->setAutoSize(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Properties (Non-Fluent)\nDESCRIPTION: This code snippet demonstrates how to set various properties of a PhpSpreadsheet object using individual method calls. It showcases the non-fluent approach, where each property setting requires a separate call to the `$spreadsheet->getProperties()` method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/architecture.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCreator(\"Maarten Balliauw\");\n$spreadsheet->getProperties()->setLastModifiedBy(\"Maarten Balliauw\");\n$spreadsheet->getProperties()->setTitle(\"Office 2007 XLSX Test Document\");\n$spreadsheet->getProperties()->setSubject(\"Office 2007 XLSX Test Document\");\n$spreadsheet->getProperties()->setDescription(\"Test document for Office 2007 XLSX, generated using PHP classes.\");\n$spreadsheet->getProperties()->setKeywords(\"office 2007 openxml php\");\n$spreadsheet->getProperties()->setCategory(\"Test result file\");\n```\n\n----------------------------------------\n\nTITLE: Read Specific Cells from SYLK - PhpSpreadsheet\nDESCRIPTION: This code defines a custom read filter that implements the `\\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter` interface.  The `readCell` method determines whether a cell should be read based on its row number. In this case, it reads row 1 and rows 20 to 30. Then it loads the spreadsheet with the filter using SLK reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass MyReadFilter implements \\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter {\n\n    public function readCell($columnAddress, $row, $worksheetName = '') {\n        // Read title row and rows 20 - 30\n        if ($row == 1 || ($row >= 20 && $row <= 30)) {\n            return true;\n        }\n        return false;\n    }\n\n}\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Slk();\n$reader->setReadFilter( new MyReadFilter() );\n$spreadsheet = $reader->load(\"06largescale.slk\");\n```\n\n----------------------------------------\n\nTITLE: Populating Data Model from PHPSpreadsheet Row\nDESCRIPTION: This snippet shows how to populate a data model from an Excel row in PHPSpreadsheet. It defines a `MonthlySales` class with a static `fromExcel` method to map row values to object properties. It filters out empty rows and then adds the constructed `MonthlySales` object to a collection.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass MonthlySales {\n    private function __construct(\n        public readonly string $month,\n        public readonly array $sales,\n    ) {}\n\n    public static function fromExcel(array $values, array $headers): self {\n        $month = array_shift($values);\n        return new self($month, array_combine($headers, $values));\n    }\n}\n\n$monthlySalesData = new MonthlySalesCollection();\n\n// Read from the header row of the worksheet\n$excelHeaderRow = ['Jones', 'Sorvino', 'Gupta', 'Choi'];\n\n$dataArray = $worksheet->toArray(formatData: true);\nforeach ($dataArray as $excelDataRow) {\n    // Check for empty rows\n    if (count(array_filter($excelDataRow, function ($value) {\n        return $value !== null;\n    })) === 0) {\n        continue;   // Ignore empty rows\n    }\n\n    $monthlySalesData->add(MonthlySales::fromExcel(\n        $excelDataRow,\n        $excelHeaderRow\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Worksheet Password with PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to verify a worksheet password using PhpSpreadsheet. The `verify` method returns a boolean indicating whether the supplied password is correct. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$protection = $spreadsheet->getActiveSheet()->getProtection();\n$allowed = $protection->verify('my password');\n\nif ($allowed) {\n    doSomething();\n} else {\n    throw new Exception('Incorrect password');\n}\n```\n\n----------------------------------------\n\nTITLE: Example TextGrid Output - PhpSpreadsheet\nDESCRIPTION: This code shows example output from the `TextGrid` class. This example illustrates the formatted plain text output that can be generated from spreadsheet data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n    +-----+------------------+---+----------+\n    | A   | B                | C | D        |\n+---+-----+------------------+---+----------+\n| 1 | 6   | 1900-01-06 00:00 |   | 0.572917 |\n| 2 | 6   | TRUE             |   | 1<>2     |\n| 3 | xyz | xyz              |   |          |\n+---+-----+------------------+---+----------+\n```\n\n----------------------------------------\n\nTITLE: Sort Function Implementation\nDESCRIPTION: The SORT function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Sort::sort method. This method sorts a range of data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Sort::sort\n```\n\n----------------------------------------\n\nTITLE: Setting Constructor Callback - PhpSpreadsheet\nDESCRIPTION: This code defines a constructor callback function that configures the CSV reader with specific default settings, like input encoding, delimiter, and enclosure. It then registers the callback and loads the spreadsheet using `\\PhpSpreadsheet\\IOFactory::load`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction constructorCallback(\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv $reader): void\n{\n    $reader->setInputEncoding(\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv::GUESS_ENCODING);\n    $reader->setFallbackEncoding('ISO-8859-2');\n    $reader->setDelimiter(',');\n    $reader->setEnclosure('\"');\n    // Following represents how Excel behaves better than the default escape character\n    $reader->setEscapeCharacter('');\n}\n\n\\PhpOffice\\PhpSpreadsheet\\Reader\\Csv::setConstructorCallback('constructorCallback');\n$spreadsheet = \\PhpSpreadsheet\\IOFactory::load('sample.csv');\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format Mask with Grouping in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates using a number format mask to display a numeric value with leading zeros and digit grouping. It sets the cell value as a number and applies a more complex format mask for readability.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Set cell A10 with a numeric value\n$spreadsheet->getActiveSheet()->setCellValue('A10', 1513789642);\n// Set a number format mask to display the value as 11 digits with leading zeroes\n$spreadsheet->getActiveSheet()->getStyle('A10')\n    ->getNumberFormat()\n    ->setFormatCode(\n        '0000-000-0000'\n    );\n```\n\n----------------------------------------\n\nTITLE: Text Length Functions PHP\nDESCRIPTION: Maps the Excel LEN and LENB functions to the same PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::length method calculates the length (number of characters) of a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_92\n\nLANGUAGE: PHP\nCODE:\n```\nLEN                      | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::length\nLENB                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::length\n```\n\n----------------------------------------\n\nTITLE: Getting Cell Hyperlink URL in PHP\nDESCRIPTION: Retrieves the URL of a hyperlink associated with a cell in PhpSpreadsheet. This getter method is used to access the target URL of the hyperlink attached to a cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$cell->getHyperlink()->getUrl($url)\n```\n\n----------------------------------------\n\nTITLE: Text Concatenation Functions PHP\nDESCRIPTION: Maps the Excel CONCAT and CONCATENATE functions to their respective PHP implementations within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::CONCATENATE is used for CONCAT and  \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::actualCONCATENATE is used for CONCATENATE, both responsible for joining multiple text strings together.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_86\n\nLANGUAGE: PHP\nCODE:\n```\nCONCAT                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::CONCATENATE\nCONCATENATE              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::actualCONCATENATE\n```\n\n----------------------------------------\n\nTITLE: Iterating Worksheet Data Using toArray() in PHP\nDESCRIPTION: This snippet demonstrates how to load a spreadsheet, convert its active worksheet to an array using the `toArray()` method, and then iterate through the rows and cells of the resulting array. It highlights the basic usage of `toArray()` for accessing spreadsheet data. This method is relatively memory intensive.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Xlsx';\n$inputFileName = __DIR__ . '/../Financial Sample.xlsx';\n\n$reader = IOFactory::createReader($inputFileType);\n$spreadsheet = $reader->load($inputFileName);\n$worksheet = $spreadsheet->getActiveSheet();\n\n$dataArray = $worksheet->toArray();\n\nforeach ($dataArray as $row) {\n    foreach ($row as $cellValue) {\n        // Do something with the cell data here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical STEYX Function PHP\nDESCRIPTION: Maps the Excel STEYX function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::STEYX method calculates the standard error of the predicted y-values in a regression analysis.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_75\n\nLANGUAGE: PHP\nCODE:\n```\nSTEYX                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::STEYX\n```\n\n----------------------------------------\n\nTITLE: Setting Summary Column Position in PHP\nDESCRIPTION: This snippet shows how to set the position of the summary column for grouped/outlined columns in PhpSpreadsheet.  It uses the `setShowSummaryRight()` method to specify whether the summary should be displayed on the right (default) or left.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setShowSummaryRight(false);\n```\n\n----------------------------------------\n\nTITLE: Text Search Functions (Insensitive) PHP\nDESCRIPTION: Maps the Excel SEARCH and SEARCHB functions to the same PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::insensitive method performs a case-insensitive search for one text string within another, returning the starting position of the first occurrence.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_100\n\nLANGUAGE: PHP\nCODE:\n```\nSEARCH                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::insensitive\nSEARCHB                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Search::insensitive\n```\n\n----------------------------------------\n\nTITLE: Statistical Z-Test Functions PHP\nDESCRIPTION: Maps the Excel Z.TEST and ZTEST functions to the same PHP implementation within PhpSpreadsheet. This indicates that both Excel functions are handled by the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::zTest method. This method likely calculates the probability associated with a Z-test.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_81\n\nLANGUAGE: PHP\nCODE:\n```\nZ.TEST                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::zTest\nZTEST                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::zTest\n```\n\n----------------------------------------\n\nTITLE: Text Extract After Function PHP\nDESCRIPTION: Maps the Excel TEXTAFTER function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::after method extracts the text after a specific delimiter within a string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_104\n\nLANGUAGE: PHP\nCODE:\n```\nTEXTAFTER                | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::after\n```\n\n----------------------------------------\n\nTITLE: Setting Wrap Text - PHP\nDESCRIPTION: This snippet shows how to enable text wrapping for cells A1:D4 in a PhpSpreadsheet worksheet, so that text within these cells will wrap to the next line if it exceeds the cell width.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('A1:D4')\n    ->getAlignment()->setWrapText(true);\n```\n\n----------------------------------------\n\nTITLE: Set Accounting Format with Locale in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to use the Accounting Wizard in PhpSpreadsheet with locale-specific formatting. It initializes the Accounting Wizard with a currency symbol and a locale. It then applies the generated format code to a cell and outputs the format code and formatted value. Requires the PHP `Intl` extension.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Accounting;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C21')->setValue(-12345.67890);\n\n// Set Cell Style using the Accounting Wizard to build the Format Mask for a locale\n$localeCurrencyMask = new Accounting(\n    '€',\n    locale: 'nl_NL'\n);\n$worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($localeCurrencyMask);\n\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // [$€-nl-NL] #,##0.00;([$€-nl-NL] #,##0.00)\nvar_dump($worksheet->getCell('C21')->getFormattedValue()); // (€ 12,345.68)\n```\n\n----------------------------------------\n\nTITLE: Set Custom Filter Type in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to set the filter type to CUSTOMFILTER for a column in a PhpSpreadsheet AutoFilter. It utilizes the `AUTOFILTER_FILTERTYPE_CUSTOMFILTER` constant from the `PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->setFilterType(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_FILTERTYPE_CUSTOMFILTER\n);\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel IOFactory addSearchLocation to PhpSpreadsheet registerReader\nDESCRIPTION: This PHP code snippet demonstrates how to migrate from PHPExcel's `PHPExcel_IOFactory::addSearchLocation()` to PhpSpreadsheet's `IOFactory::registerReader()`.  The old method registered a custom location for finding reader classes, whereas the new method registers the reader directly, relying on autoloading.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n\\PHPExcel_IOFactory::addSearchLocation($type, $location, $classname);\n\n// After\n\\PhpOffice\\PhpSpreadsheet\\IOFactory::registerReader($type, $classname);\n```\n\n----------------------------------------\n\nTITLE: Statistical Weibull Distribution Functions PHP\nDESCRIPTION: Maps the Excel WEIBULL and WEIBULL.DIST functions to the same PHP implementation within PhpSpreadsheet. This indicates that both Excel functions are handled by the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Weibull::distribution method. This method likely calculates the Weibull distribution probability.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_80\n\nLANGUAGE: PHP\nCODE:\n```\nWEIBULL                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Weibull::distribution\nWEIBULL.DIST             | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Weibull::distribution\n```\n\n----------------------------------------\n\nTITLE: DataBar of Conditional Formatting - PHP\nDESCRIPTION: This code shows how to add a DataBar conditional format to a cell range in PhpSpreadsheet. DataBars graphically represent data within cells. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$conditional = new Conditional();\n$conditional->setConditionType(Conditional::CONDITION_DATABAR);\n$conditional->setDataBar(new ConditionalDataBar());\n$conditional->getDataBar()\n            ->setMinimumConditionalFormatValueObject(new ConditionalFormatValueObject('num', '2'))\n            ->setMaximumConditionalFormatValueObject(new ConditionalFormatValueObject('max'))\n            ->setColor('FFFF555A');\n$ext = $conditional\n    ->getDataBar()\n    ->setConditionalFormattingRuleExt(new ConditionalFormattingRuleExtension())\n    ->getConditionalFormattingRuleExt();\n    \n$ext->setCfRule('dataBar');\n$ext->setSqref('A1:A5'); // target CellCoordinates\n$ext->setDataBarExt(new ConditionalDataBarExtension());\n$ext->getDataBarExt()\n    ->setMinimumConditionalFormatValueObject(new ConditionalFormatValueObject('num', '2'))\n    ->setMaximumConditionalFormatValueObject(new ConditionalFormatValueObject('autoMax'))\n    ->setMinLength(0)\n    ->setMaxLength(100)\n    ->setBorder(true)\n    ->setDirection('rightToLeft')\n    ->setNegativeBarBorderColorSameAsPositive(false)\n    ->setBorderColor('FFFF555A')\n    ->setNegativeFillColor('FFFF0000')\n    ->setNegativeBorderColor('FFFF0000')\n    ->setAxisColor('FF000000');\n```\n\n----------------------------------------\n\nTITLE: Text Proper Case Conversion PHP\nDESCRIPTION: Maps the Excel PROPER function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::proper method converts a text string to proper case, capitalizing the first letter of each word.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_96\n\nLANGUAGE: PHP\nCODE:\n```\nPROPER                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::proper\n```\n\n----------------------------------------\n\nTITLE: Text Extract Left Functions PHP\nDESCRIPTION: Maps the Excel LEFT and LEFTB functions to the same PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::left method extracts a specified number of characters from the beginning (left) of a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_91\n\nLANGUAGE: PHP\nCODE:\n```\nLEFT                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::left\nLEFTB                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::left\n```\n\n----------------------------------------\n\nTITLE: Calculating Days360 in PhpSpreadsheet using Worksheet\nDESCRIPTION: Demonstrates calculating the number of days between two dates using the DAYS360 function within a PhpSpreadsheet worksheet. It sets up the worksheet with start and end dates, then uses the DAYS360 formula to calculate the difference in days, with and without the European method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$worksheet->setCellValue('B1', 'Start Date')\n    ->setCellValue('C1', 'End Date')\n    ->setCellValue('A2', 'Year')\n    ->setCellValue('A3', 'Month')\n    ->setCellValue('A4', 'Day');\n\n$worksheet->setCellValue('B2', 2003)\n    ->setCellValue('B3', 2)\n    ->setCellValue('B4', 3);\n\n$worksheet->setCellValue('C2', 2007)\n    ->setCellValue('C3', 5)\n    ->setCellValue('C4', 31);\n\n$worksheet->setCellValue('E2', '=DAYS360(DATE(B2,B3,B4),DATE(C2,C3,C4))')\n    ->setCellValue('E4', '=DAYS360(DATE(B2,B3,B4),DATE(C2,C3,C4),FALSE)');\n\n$retVal = $worksheet->getCell('E2')->getCalculatedValue();\n// $retVal = 1558\n\n$retVal = $worksheet->getCell('E4')->getCalculatedValue();\n// $retVal = 1557\n```\n\n----------------------------------------\n\nTITLE: Read Specific Cells from ODS - PhpSpreadsheet\nDESCRIPTION: This code defines a custom read filter that implements the `\\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter` interface.  The `readCell` method determines whether a cell should be read based on its row number. In this case, it reads row 1 and rows 20 to 30. Then it loads the spreadsheet with the filter using ODS reader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass MyReadFilter implements \\PhpOffice\\PhpSpreadsheet\\Reader\\IReadFilter {\n\n    public function readCell($columnAddress, $row, $worksheetName = '') {\n        // Read title row and rows 20 - 30\n        if ($row == 1 || ($row >= 20 && $row <= 30)) {\n            return true;\n        }\n        return false;\n    }\n\n}\n\n$reader = new PhpOffice\\PhpSpreadsheet\\Reader\\Ods();\n$reader->setReadFilter( new MyReadFilter() );\n$spreadsheet = $reader->load(\"06largescale.ods\");\n```\n\n----------------------------------------\n\nTITLE: Grouping/Outlining a Column in PHP\nDESCRIPTION: This snippet demonstrates how to group/outline a specific column in a PhpSpreadsheet. It utilizes the `getColumnDimension()` method to target the desired column and `setOutlineLevel()` to define the outline level.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getColumnDimension('E')->setOutlineLevel(1);\n```\n\n----------------------------------------\n\nTITLE: Setting and Calculating Second Values in Cells - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set time strings in cells and calculate the seconds using the SECOND function. It sets date and time strings in column A and then uses the SECOND function in column B to extract the seconds. The calculated values are then retrieved using getCalculatedValue().\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Time String')\n    ->setCellValue('A2', '31-Dec-2008 17:30:20')\n    ->setCellValue('A3', '14-Feb-2008 4:20 AM')\n    ->setCellValue('A4', '14-Feb-2008 4:45:59 PM');\n\n$worksheet->setCellValue('B2', '=SECOND(A2)')\n    ->setCellValue('B3', '=SECOND(A3)');\n    ->setCellValue('B4', '=SECOND(A4)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 20\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 0\n\n$retVal = $worksheet->getCell('B4')->getCalculatedValue();\n// $retVal = 59\n```\n\n----------------------------------------\n\nTITLE: Statistical Student's t-Distribution Functions PHP\nDESCRIPTION: Maps the Excel T.INV, TINV, and TDIST functions to their PHP implementations in PhpSpreadsheet. These functions calculate the inverse and distribution of the Student's t-distribution.  Specifically, \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StudentT::inverse calculates the inverse, and \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StudentT::distribution calculates the distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_76\n\nLANGUAGE: PHP\nCODE:\n```\nT.INV                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StudentT::inverse\nTDIST                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StudentT::distribution\nTINV                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StudentT::inverse\n```\n\n----------------------------------------\n\nTITLE: Setting Default Row Height with UoM PHP\nDESCRIPTION: This snippet sets the default row height using a specified Unit of Measure (UoM).  Valid units are `pt`, `px`, `pc`, `in`, `cm`, and `mm`. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getDefaultRowDimension()->setRowHeight(100, 'pt');\n```\n\n----------------------------------------\n\nTITLE: Accessing Worksheet by Index - PhpSpreadsheet\nDESCRIPTION: Retrieves a worksheet from the PhpSpreadsheet object by its index position. Note that worksheet indices start at 0. This snippet demonstrates how to access the second sheet in a workbook.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Get the second sheet in the workbook\n// Note that sheets are indexed from 0\n$spreadsheet->getSheet(1);\n```\n\n----------------------------------------\n\nTITLE: CONFIDENCE/CONFIDENCE.NORM Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel CONFIDENCE and CONFIDENCE.NORM functions to the PhpSpreadsheet implementation using Confidence::CONFIDENCE.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Confidence::CONFIDENCE\n```\n\n----------------------------------------\n\nTITLE: Text Lower Case Conversion PHP\nDESCRIPTION: Maps the Excel LOWER function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::lower method converts all characters in a text string to lowercase.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_93\n\nLANGUAGE: PHP\nCODE:\n```\nLOWER                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CaseConvert::lower\n```\n\n----------------------------------------\n\nTITLE: Text Value Conversion PHP\nDESCRIPTION: Maps the Excel VALUE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::VALUE method converts a text string that represents a number to an actual numeric value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_110\n\nLANGUAGE: PHP\nCODE:\n```\nVALUE                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::VALUE\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Range (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to define a named range in PhpSpreadsheet. It adds some sample data to cells, then creates `NamedRange` objects, specifying the name, worksheet, and cell range. These named ranges can then be used in formulas or other parts of the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n// Add some data\n$spreadsheet->setActiveSheetIndex(0);\n$spreadsheet->getActiveSheet()->setCellValue('A1', 'Firstname:');\n$spreadsheet->getActiveSheet()->setCellValue('A2', 'Lastname:');\n$spreadsheet->getActiveSheet()->setCellValue('B1', 'Maarten');\n$spreadsheet->getActiveSheet()->setCellValue('B2', 'Balliauw');\n\n// Define named ranges\n$spreadsheet->addNamedRange( new \\PhpOffice\\PhpSpreadsheet\\NamedRange('PersonFN', $spreadsheet->getActiveSheet(), '$B$1'));\n$spreadsheet->addNamedRange( new \\PhpOffice\\PhpSpreadsheet\\NamedRange('PersonLN', $spreadsheet->getActiveSheet(), '$B$2'));\n```\n\n----------------------------------------\n\nTITLE: Identifying Reader with Return Class Name\nDESCRIPTION: Demonstrates using `IOFactory::identify` to return the fully-qualified class name, available in PhpSpreadsheet 4.1.0 and later. It sets the third parameter to `true` to return the class name instead of file type.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = \\PhpOffice\\PhpSpreadsheet\\IOFactory::identify($inputFileName, null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Data Validation with Overlapping Rules (Release 4+)\nDESCRIPTION: Example showing how to configure data validation where overlapping rules are used to exclude specific cells from a broader validation pattern. Works with PhpSpreadsheet Release 4 and above.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$dv = new DataValidation();\n$dv->setType(DataValidation::TYPE_NONE);\n$sheet->setDataValidation('A5:A7', $dv);\n$dv = new DataValidation();\n$dv->set...(...);\n$sheet->setDataValidation('A:A', $dv);\n$dv = new DataValidation();\n$dv->setType(DataValidation::TYPE_NONE);\n$sheet->setDataValidation('A9', $dv);\n```\n\n----------------------------------------\n\nTITLE: COVAR/COVARIANCE.P Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel COVAR and COVARIANCE.P functions to the PhpSpreadsheet implementation using Trends class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::COVAR\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Print Areas - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to specify multiple printing areas in a single worksheet using PhpSpreadsheet. It uses the `setPrintArea()` method of the page setup object, specifying multiple ranges of cells separated by commas to include in the printing area (e.g., 'A1:E5,G4:M20').\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()->setPrintArea('A1:E5,G4:M20');\n```\n\n----------------------------------------\n\nTITLE: Using DPRODUCT in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to use the DPRODUCT function in PhpSpreadsheet.  It sets up a database and criteria as arrays, loads them into a worksheet, calculates the DPRODUCT using a formula, and retrieves the calculated value. The DPRODUCT function multiplies the values in a column of a database that match specified criteria.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DPRODUCT(A4:E10,\"Yield\",A1:B2)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 140\n```\n\n----------------------------------------\n\nTITLE: Text Value To Text Conversion PHP\nDESCRIPTION: Maps a custom function VALUETOTEXT to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::valueToText method converts a numeric value to a text string, allowing for specific formatting if needed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_111\n\nLANGUAGE: PHP\nCODE:\n```\nVALUETOTEXT              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::valueToText\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Rows in PHP\nDESCRIPTION: This code iterates through the rows of the active sheet and checks the visibility of each row. Only visible rows (i.e., those that match the filter criteria) are processed, allowing selective access to the filtered data. It outputs the row number and values from columns C and D for each visible row.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nforeach ($spreadsheet->getActiveSheet()->getRowIterator() as $row) {\n    if ($spreadsheet->getActiveSheet()\n        ->getRowDimension($row->getRowIndex())->getVisible()) {\n        echo '    Row number - ' , $row->getRowIndex() , ' ';\n        echo $spreadsheet->getActiveSheet()\n            ->getCell(\n                'C'.$row->getRowIndex()\n            )\n            ->getValue(), ' ';\n        echo $spreadsheet->getActiveSheet()\n            ->getCell(\n                'D'.$row->getRowIndex()\n            )->getFormattedValue(), ' ';\n        echo PHP_EOL;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Fixed Formatting PHP\nDESCRIPTION: Maps the Excel FIXED function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::FIXEDFORMAT method formats a number as text with a fixed number of decimal places.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_90\n\nLANGUAGE: PHP\nCODE:\n```\nFIXED                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::FIXEDFORMAT\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Access - Before and After Column Index Change PHP\nDESCRIPTION: This code demonstrates how to update cell access in PhpSpreadsheet after the column indexing change from 0-based to 1-based. It shows the deprecated method using `$column` and `$row` and the updated method using an array of `$column + 1` and `$row` or `$column` and `$row` where column now starts at 1. It also shows how to iterate through the columns.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$cell = $worksheet->getCellByColumnAndRow($column, $row);\n\nfor ($column = 0; $column < $max; ++$column) {\n    $worksheet->setCellValueByColumnAndRow($column, $row, 'value');\n}\n\n// After\n$cell = $worksheet->getCell([$column + 1, $row]);\n\nfor ($column = 1; $column <= $max; ++$column) {\n    $worksheet->setCellValue([$column, $row], 'value');\n}\n```\n\n----------------------------------------\n\nTITLE: Text Array Conversion PHP\nDESCRIPTION: Maps the Excel ARRAYTOTEXT function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::fromArray method converts an array into a text string, likely with customizable delimiters or formatting options.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_82\n\nLANGUAGE: PHP\nCODE:\n```\nARRAYTOTEXT              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::fromArray\n```\n\n----------------------------------------\n\nTITLE: Merging Cells with Content Hide Option in PHP\nDESCRIPTION: This snippet demonstrates merging cells while hiding the original cell contents, a feature available in OpenOffice. The contents are retained and reappear when unmerged. It uses the `Worksheet::MERGE_CELL_CONTENT_HIDE` flag.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->mergeCells('A1:C3', Worksheet::MERGE_CELL_CONTENT_HIDE);\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Masks with Locale-Specific Currency Wizard in PHP\nDESCRIPTION: This code snippet illustrates how to create a composite number format mask using a locale-specific Currency Wizard in PhpSpreadsheet, applying different colors to positive, negative, and zero values. It sets a cell value, constructs a currency mask with the 'nl_NL' locale, splits the generated mask into sections, and recreates a modified mask with color codes. The composite mask is then applied to the cell's number format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Currency Wizard to build the Format Mask\n$currencyMask = new Currency(\n    '€',\n    locale: 'nl_NL'\n);\n\n// Split the generated mask into sections\n// This particular mask already has positive and negative value sections,\n//      but does not have a zero value section\n// Other locales may only have a positive section; or may already have a zero section\n$currencyMaskSections = explode(';', $currencyMask);\n// Recreate the modified mask applying colours to the different sections\n$compositeCurrencyMask = [\n    '[Green]' . $currencyMaskSections[0],\n    '[Red]' . $currencyMaskSections[1] ?? $currencyMaskSections[0],\n    $currencyMaskSections[2] ?? $currencyMaskSections[0],\n];\n\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode(implode(';', $compositeCurrencyMask));\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    // [Green][$€-nl-NL] #,##0.00;[Red][$€-nl-NL] -#,##0.00;[$€-nl-NL] #,##0.00\n    ->getFormatCode());\n```\n\n----------------------------------------\n\nTITLE: Statistical Quartile Function PHP\nDESCRIPTION: Maps the Excel QUARTILE and QUARTILE.INC functions to the same PHP implementation within PhpSpreadsheet. This shows that both functions are processed by the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::QUARTILE method, which likely calculates quartiles based on the input data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_67\n\nLANGUAGE: PHP\nCODE:\n```\nQUARTILE                 | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::QUARTILE\nQUARTILE.INC             | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::QUARTILE\n```\n\n----------------------------------------\n\nTITLE: Using DSTDEVP in PhpSpreadsheet\nDESCRIPTION: This example demonstrates calculating the standard deviation of a population using DSTDEVP in PhpSpreadsheet. Similar to the previous example, it creates a database and criteria, loads them into the worksheet, sets up the DSTDEVP formula, and retrieves the calculated result.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DSTDEVP(A4:E10,\"Yield\",A1:A3)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 2.65\n```\n\n----------------------------------------\n\nTITLE: Text Number Value Conversion PHP\nDESCRIPTION: Maps the Excel NUMBERVALUE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::NUMBERVALUE method converts a text string to a number, using specified decimal and group separators.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_95\n\nLANGUAGE: PHP\nCODE:\n```\nNUMBERVALUE              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::NUMBERVALUE\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Data Only Option in PHP\nDESCRIPTION: Sets the 'Read Data Only' option for the reader object in PhpSpreadsheet. This setter method configures the reader to only read data, ignoring any formatting information in the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->setReadDataOnly()\n```\n\n----------------------------------------\n\nTITLE: Showing/Hiding Print Gridlines - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to show or hide gridlines when printing a worksheet using PhpSpreadsheet. It uses the `setPrintGridlines()` method of the worksheet object, passing `true` to show gridlines or `false` to hide them.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setPrintGridlines(true);\n```\n\n----------------------------------------\n\nTITLE: Writing Newline Character in Cell PHP\nDESCRIPTION: This code demonstrates how to insert a newline character into a cell in PhpSpreadsheet, similar to using ALT+Enter in Microsoft Excel. It sets the cell's value to a string containing `\\n` and enables word wrapping for the cell using `setWrapText(true)`. Alternatively, AdvancedValueBinder can be used to automatically enable wrap text upon encountering a newline character.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('A1')->setValue(\"hello\\nworld\");\n$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Old method using static property\n\\PhpOffice\\PhpSpreadsheet\\Cell\\Cell::setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet->setValueBinder( new \\PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder() );\n\n$spreadsheet->getActiveSheet()->getCell('A1')->setValue(\"hello\\nworld\");\n```\n\n----------------------------------------\n\nTITLE: Looping through cells using coordinates in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to iterate through cells in a PhpSpreadsheet worksheet using cell coordinates (e.g., 'A1', 'B2'). It retrieves cell values and displays them in an HTML table. The loop increments through columns using PHP's \"Perl-style\" character incrementors. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$reader->setReadDataOnly(TRUE);\n$spreadsheet = $reader->load(\"test.xlsx\");\n\n$worksheet = $spreadsheet->getActiveSheet();\n// Get the highest row number and column letter referenced in the worksheet\n$highestRow = $worksheet->getHighestDataRow(); // e.g. 10\n$highestColumn = $worksheet->getHighestDataColumn(); // e.g 'F'\n// Increment the highest column letter\n++$highestColumn;\n\necho '<table>' . \"\\n\";\nfor ($row = 1; $row <= $highestRow; ++$row) {\n    echo '<tr>' . PHP_EOL;\n    for ($col = 'A'; $col != $highestColumn; ++$col) {\n        echo '<td>' .\n             $worksheet->getCell($col . $row)\n                 ->getValue() .\n             '</td>' . PHP_EOL;\n    }\n    echo '</tr>' . PHP_EOL;\n}\necho '</table>' . PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Choose Function Implementation\nDESCRIPTION: The CHOOSE function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Selection::CHOOSE method. This function selects a value from a list of values based on an index.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Selection::CHOOSE\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Read Filter in PHP\nDESCRIPTION: Sets the 'Read Filter' for the reader object in PhpSpreadsheet. This setter method configures which cells the reader will process, based on the filter provided.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->setReadFilter()\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Conditional setCondition to PhpSpreadsheet setConditions\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$conditional->setCondition($value)` to PhpSpreadsheet's `$conditional->setConditions($value)`. In PhpSpreadsheet, conditional formatting conditions are now stored as an array.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$conditional->setCondition($value);\n\n// After\n$conditional->setConditions($value);\n```\n\n----------------------------------------\n\nTITLE: Setting the Excel Calendar PHP\nDESCRIPTION: This snippet demonstrates how to set the Excel calendar used for calculating date values using the `\\PhpOffice\\PhpSpreadsheet\\Shared\\Date::setExcelCalendar()` method. It accepts a constant representing the desired calendar: `CALENDAR_WINDOWS_1900` or `CALENDAR_MAC_1904`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Shared\\Date::setExcelCalendar($baseDate);\n```\n\n----------------------------------------\n\nTITLE: DMIN Usage in PhpSpreadsheet\nDESCRIPTION: Shows how to use the DMIN function in PhpSpreadsheet to get the smallest number in a database column matching given criteria.  It sets up the database and criteria arrays, loads them into a worksheet, and uses DMIN to calculate the minimum value based on the criteria. The result is stored in the $retVal variable.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DMIN(A4:E10,\"Yield\",A1:A3)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 6\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Number Format - PHP\nDESCRIPTION: This snippet demonstrates how to set a conditional number format for cell A1, which displays numbers greater than or equal to 3000 in blue, negative numbers in red, and other numbers with the default formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('A1')->getNumberFormat()\n    ->setFormatCode('[Blue][>=3000]$#,##0;[Red][<0]$#,##0;$#,##0');\n```\n\n----------------------------------------\n\nTITLE: Date/Time Formatting Wizards Example (PHP)\nDESCRIPTION: Demonstrates how to use the Date, Time, and DateTime formatting wizards to create custom number formats for displaying dates and times.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Date as DateWizard;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Time as TimeWizard;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\DateTime as DateTimeWizard;\n\n$spreadsheet->getActiveSheet()->setCellValue('A1', '=NOW()')\n$spreadsheet->getActiveSheet()->setCellValue('A2', '=NOW()')\n$spreadsheet->getActiveSheet()->setCellValue('A3', '=NOW()')\n\n// yyyy-mm-dd\n$dateFormat = new DateWizard(\n    DateWizard::SEPARATOR_DASH,\n    DateWizard::YEAR_FULL,\n    DateWizard::MONTH_NUMBER_LONG,\n    DateWizard::DAY_NUMBER_LONG\n);\n\n$spreadsheet->getActiveSheet()->getStyle('A1')\n    ->getNumberFormat()\n    ->setFormatCode($dateFormat);\n\n// hh:mm\n$timeFormat = new TimeWizard(\n    TimeWizard::SEPARATOR_COLON,\n    TimeWizard::HOURS_LONG,\n    TimeWizard::MINUTES_LONG,\n);\n\n$spreadsheet->getActiveSheet()->getStyle('A2')\n    ->getNumberFormat()\n    ->setFormatCode($timeFormat);\n\n// yyyy-mm-dd hh:mm\n$dateTimeFormat = new DateTimeWizard(' ', $dateFormat, $timeFormat);\n\n$spreadsheet->getActiveSheet()->getStyle('A3')\n    ->getNumberFormat()\n    ->setFormatCode($dateTimeFormat);\n```\n\n----------------------------------------\n\nTITLE: Statistical Skew Function PHP\nDESCRIPTION: Maps the Excel SKEW function to its PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Deviations::skew method calculates the skewness of a dataset, indicating its asymmetry around the mean.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_70\n\nLANGUAGE: PHP\nCODE:\n```\nSKEW                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Deviations::skew\n```\n\n----------------------------------------\n\nTITLE: Set Dynamic Filter Type in PhpSpreadsheet\nDESCRIPTION: This code snippet sets the filter type to `DYNAMICFILTER` for a column. It leverages the `AUTOFILTER_FILTERTYPE_DYNAMICFILTER` constant from the `PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->setFilterType(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_FILTERTYPE_DYNAMICFILTER\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Formula (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to define named formulas in PhpSpreadsheet. It adds some data to cells, then creates `NamedFormula` objects, specifying the name, worksheet, and formula. These named formulas can then be used in other formulas within the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_109\n\nLANGUAGE: php\nCODE:\n```\n// Add some data\n$spreadsheet->setActiveSheetIndex(0);\n$worksheet = $spreadsheet->getActiveSheet();\n$worksheet\n    ->setCellValue('A1', 'Product')\n    ->setCellValue('B1', 'Quantity')\n    ->setCellValue('C1', 'Unit Price')\n    ->setCellValue('D1', 'Price')\n    ->setCellValue('E1', 'VAT')\n    ->setCellValue('F1', 'Total');\n\n// Define named formula\n$spreadsheet->addNamedFormula( new \\PhpOffice\\PhpSpreadsheet\\NamedFormula('GERMAN_VAT_RATE', $worksheet, '=16.0%'));\n$spreadsheet->addNamedFormula( new \\PhpOffice\\PhpSpreadsheet\\NamedFormula('CALCULATED_PRICE', $worksheet, '=$B1*$C1'));\n$spreadsheet->addNamedFormula( new \\PhpOffice\\PhpSpreadsheet\\NamedFormula('GERMAN_VAT', $worksheet, '=$D1*GERMAN_VAT_RATE'));\n$spreadsheet->addNamedFormula( new \\PhpOffice\\PhpSpreadsheet\\NamedFormula('TOTAL_INCLUDING_VAT', $worksheet, '=$D1+$E1'));\n\n$worksheet\n    ->setCellValue('A2', 'Advanced Web Application Architecture')\n    ->setCellValue('B2', 2)\n    ->setCellValue('C2', 23.0)\n    ->setCellValue('D2', '=CALCULATED_PRICE')\n    ->setCellValue('E2', '=GERMAN_VAT')\n    ->setCellValue('F2', '=TOTAL_INCLUDING_VAT');\n$spreadsheet->getActiveSheet()\n    ->setCellValue('A3', 'Object Design Style Guide')\n    ->setCellValue('B3', 5)\n    ->setCellValue('C3', 12.0)\n    ->setCellValue('D3', '=CALCULATED_PRICE')\n    ->setCellValue('E3', '=GERMAN_VAT')\n    ->setCellValue('F3', '=TOTAL_INCLUDING_VAT');\n$spreadsheet->getActiveSheet()\n    ->setCellValue('A4', 'PHP For the Web')\n    ->setCellValue('B4', 3)\n    ->setCellValue('C4', 10.0)\n    ->setCellValue('D4', '=CALCULATED_PRICE')\n    ->setCellValue('E4', '=GERMAN_VAT')\n    ->setCellValue('F4', '=TOTAL_INCLUDING_VAT');\n\n// Use a relative named range to provide the totals for rows 2-4\n$spreadsheet->addNamedRange( new \\PhpOffice\\PhpSpreadsheet\\NamedRange('COLUMN_TOTAL', $worksheet, '=A$2:A$4') );\n\n$spreadsheet->getActiveSheet()\n    ->setCellValue('B6', '=SUBTOTAL(109,COLUMN_TOTAL)')\n    ->setCellValue('D6', '=SUBTOTAL(109,COLUMN_TOTAL)')\n    ->setCellValue('E6', '=SUBTOTAL(109,COLUMN_TOTAL)')\n    ->setCellValue('F6', '=SUBTOTAL(109,COLUMN_TOTAL)');\n```\n\n----------------------------------------\n\nTITLE: Rows Function Implementation\nDESCRIPTION: The ROWS function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::ROWS method. It returns the number of rows in a reference.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::ROWS\n```\n\n----------------------------------------\n\nTITLE: Terminating Iteration on Empty Rows in PHPSpreadsheet\nDESCRIPTION: This code snippet iterates through a spreadsheet array and stops processing when an empty row is encountered. It uses array filtering to identify empty rows and the `break` statement to exit the outer loop, preventing further processing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($dataArray as $row) {\n    // Check for empty rows\n    if (count(array_filter($row, function ($value) {\n        return $value !== null;\n    })) === 0) {\n        break;    // Stop at the first empty row\n    }\n\n    foreach ($row as $cellValue) {\n        // Do something with the cell data here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Print Break - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to set a print break on a specific column using PhpSpreadsheet. It uses the `setBreak()` method of the worksheet object, specifying the cell ('D10' in this example) in the column where the break should occur, and the break type (`BREAK_COLUMN`).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setBreak('D10', \\PhpOffice\\PhpSpreadsheet\\Worksheet\\Worksheet::BREAK_COLUMN);\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting with Relative Cell Reference (PHP)\nDESCRIPTION: This code snippet demonstrates how to apply conditional formatting using relative cell references with the `CellValue` Wizard in PhpSpreadsheet. The comparison is relative to the range `A18:A20`, matching values in column `A` against columns `B` and `C` for each row. The column is pinned, but the row is left unpinned, adjusting automatically to match the defined range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$wizard->between('$B1', Wizard::VALUE_TYPE_CELL)\n    ->and('$C1', Wizard::VALUE_TYPE_CELL)\n    ->setStyle($greenStyle);\n```\n\n----------------------------------------\n\nTITLE: Create Bottom 2 Value Filter Rule in PhpSpreadsheet\nDESCRIPTION: This code snippet creates a rule to filter the lowest 5 values in a column. It uses `AUTOFILTER_COLUMN_RULE_TOPTEN_BY_VALUE` to specify filtering by value and `AUTOFILTER_COLUMN_RULE_TOPTEN_BOTTOM` to select the lowest values. The rule type is set to `AUTOFILTER_RULETYPE_TOPTENFILTER`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_BY_VALUE,\n        5,\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_BOTTOM\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_TOPTENFILTER\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting and Calculating Weekday Values in Cells - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set date values in cells and calculate the weekday using the WEEKDAY function. It sets date strings in column A and then uses the WEEKDAY function in column B with different methods. The calculated values are then retrieved using getCalculatedValue().\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '31-Dec-2008')\n    ->setCellValue('A3', '14-Feb-2008');\n\n$worksheet->setCellValue('B2', '=WEEKDAY(A2)')\n    ->setCellValue('B3', '=WEEKDAY(A3,0)')\n    ->setCellValue('B4', '=WEEKDAY(A3,2)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 12\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 2\n\n$retVal = $worksheet->getCell('B4')->getCalculatedValue();\n// $retVal = 2\n```\n\n----------------------------------------\n\nTITLE: Statistical Permutation Constant PHP\nDESCRIPTION: Defines a constant for permutation calculations within PhpSpreadsheet's statistical functions. This constant is likely used as an argument to a statistical function to specify the type of permutation to perform. The code snippet shows the constant's name and its associated fully qualified class name.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_65\n\nLANGUAGE: PHP\nCODE:\n```\nPERMUTATIONA             | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Permutations::PERMUTATIONA\n```\n\n----------------------------------------\n\nTITLE: Disabling Formula Pre-Calculation for CSV Writing - PHP\nDESCRIPTION: This code snippet shows how to disable formula pre-calculation when writing a CSV file. Pre-calculation can be slow on large spreadsheets, so disabling it can improve performance. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Csv($spreadsheet);\n$writer->setPreCalculateFormulas(false);\n$writer->save(\"05featuredemo.csv\");\n```\n\n----------------------------------------\n\nTITLE: Writing Data as a Plaintext Grid - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to write spreadsheet data as a plaintext grid using the `TextGrid` class. It shows how to convert a sheet to an array, create a `TextGrid` object, and render the grid to a string for output.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n        $array = $sheet->toArray(null, true, true, true);\n        $textGrid = new \\PhpOffice\\PhpSpreadsheet\\Shared\\TextGrid(\n            $array,\n            true, // true for cli, false for html\n            // Starting with release 4.2,\n            // the output format can be tweaked by uncommenting\n            // any of the following 3 optional parameters.\n            // rowDividers: true,\n            // rowHeaders: false,\n            // columnHeaders: false,\n        );\n        $result = $textGrid->render();\n```\n\n----------------------------------------\n\nTITLE: Unmerging Cells in PHP\nDESCRIPTION: This snippet shows how to unmerge previously merged cells in a PhpSpreadsheet using the `unmergeCells()` method. It separates the merged cell range back into individual cells.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_94\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->unmergeCells('A18:E22');\n```\n\n----------------------------------------\n\nTITLE: Setting Reader Flags in load() Method\nDESCRIPTION: This snippet demonstrates how to set reader flags directly within the `load()` method call. It sets the flags IReader::IGNORE_EMPTY_CELLS and IReader::LOAD_WITH_CHARTS.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Xlsx';\n$inputFileName = './sampleData/example1.xlsx';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/** Set additional flags in the call to load() */\n$reader->load($inputFileName, IReader::IGNORE_EMPTY_CELLS | IReader::LOAD_WITH_CHARTS);\n```\n\n----------------------------------------\n\nTITLE: Installing Memcache cache dependencies\nDESCRIPTION: This command shows how to install required packages using composer for using Memcache as cache implementation in PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require cache/simple-cache-bridge cache/memcache-adapter\n```\n\n----------------------------------------\n\nTITLE: Text Dollar Formatting PHP\nDESCRIPTION: Maps the Excel DOLLAR function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::DOLLAR method formats a number as currency using the dollar ($) symbol.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_87\n\nLANGUAGE: PHP\nCODE:\n```\nDOLLAR                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Format::DOLLAR\n```\n\n----------------------------------------\n\nTITLE: Batch Processing with rangeToArray() in PHP\nDESCRIPTION: This code snippet demonstrates how to use rangeToArray() in a loop to process data in batches. It is intended to handle large spreadsheets efficiently, avoiding PHP's memory limits. The code iterates through rows in batches, processing each row and skipping empty ones.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$startRow = 1;\n$batchSize = 100;\nwhile ($startRow <= $maxRow) {\n    $endRow = min($startRow + $batchSize, $maxRow);\n    $dataArray = $worksheet->rangeToArray(\"A{$startRow}:{$maxColumn}{$endRow}\");\n    $startRow += $batchSize;\n\n    foreach ($dataArray as $row) {\n        // Check for empty rows\n        if (count(array_filter($row, function ($value) {\n                return $value !== null;\n            })) === 0) {\n            continue;   // Ignore empty rows\n        }\n\n        foreach ($row as $cellValue) {\n            // Do something with the cell data here.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Function Implementation\nDESCRIPTION: The LOOKUP function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Lookup::lookup method. This performs a lookup for a value in a one-row or one-column range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Lookup::lookup\n```\n\n----------------------------------------\n\nTITLE: Installing APCu cache dependencies\nDESCRIPTION: This command shows how to install required packages using composer for using APCu as cache implementation in PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require cache/simple-cache-bridge cache/apcu-adapter\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Filter Type PHP\nDESCRIPTION: Sets the filter type for a column to 'Simple Filter'. Simple filters are based on equality comparisons.  Excel regards only tests for equal as a standard filter; all others, including tests for not equal, must be supplied as custom filters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$columnFilter->setFilterType(\n    \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column::AUTOFILTER_FILTERTYPE_FILTER\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Git Tag\nDESCRIPTION: This command creates an annotated Git tag for a release version. The `-a` flag indicates that it is an annotated tag, which includes a message.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Hiding a Row in PHP\nDESCRIPTION: This snippet shows how to hide a specific row in a PhpSpreadsheet using the `getRowDimension()` and `setVisible(false)` methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension('10')->setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Document Security with PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to set document-level security using PhpSpreadsheet. It locks the windows and structure of the workbook and sets a password. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$security = $spreadsheet->getSecurity();\n$security->setLockWindows(true);\n$security->setLockStructure(true);\n$security->setWorkbookPassword(\"PhpSpreadsheet\");\n```\n\n----------------------------------------\n\nTITLE: Text Replace Functions PHP\nDESCRIPTION: Maps the Excel REPLACE and REPLACEB functions to the same PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Replace::replace method replaces a portion of a text string with another text string, based on a starting position and length.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_97\n\nLANGUAGE: PHP\nCODE:\n```\nREPLACE                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Replace::replace\nREPLACEB                 | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Replace::replace\n```\n\n----------------------------------------\n\nTITLE: Checking Code Style with Composer\nDESCRIPTION: This command checks the code style of the PhpSpreadsheet project using the defined coding standards. It helps identify any violations of the style guidelines, ensuring consistent code formatting throughout the project.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer style\n```\n\n----------------------------------------\n\nTITLE: Index Function Implementation\nDESCRIPTION: The INDEX function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Matrix::index method. It returns a value or the reference to a value from within a table or range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Matrix::index\n```\n\n----------------------------------------\n\nTITLE: Text Extract Middle Functions PHP\nDESCRIPTION: Maps the Excel MID and MIDB functions to the same PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::mid method extracts a substring from a text string, starting at a specified position and with a specified length.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_94\n\nLANGUAGE: PHP\nCODE:\n```\nMID                      | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::mid\nMIDB                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Extract::mid\n```\n\n----------------------------------------\n\nTITLE: DAVERAGE Function Example in PhpSpreadsheet (PHP)\nDESCRIPTION: This code snippet provides an example of using the DAVERAGE function in PhpSpreadsheet. It sets up a database and criteria, then calculates the average yield for Apple trees with a height greater than 10 and less than 16. The result is then retrieved from the worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DAVERAGE(A4:E10,\"Yield\",A1:B2)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 12\n```\n\n----------------------------------------\n\nTITLE: Setting Number Format with Predefined Code - PHP\nDESCRIPTION: This snippet demonstrates how to set the number format for cell A1 using a predefined format code for comma-separated numbers with two decimal places.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('A1')->getNumberFormat()\n    ->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);\n```\n\n----------------------------------------\n\nTITLE: Web URL Encoding PHP\nDESCRIPTION: Maps the Excel ENCODEURL function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Web\\Service::urlEncode method encodes a URL string, replacing unsafe characters with their percent-encoded equivalents.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_112\n\nLANGUAGE: PHP\nCODE:\n```\nENCODEURL                | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Web\\Service::urlEncode\n```\n\n----------------------------------------\n\nTITLE: Getting the Return Date Type PHP\nDESCRIPTION: This snippet shows how to retrieve the currently configured return date type using the `\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::getReturnDateType()` method. This allows you to determine whether dates will be returned as PHP numeric timestamps, PHP DateTime objects, or Excel timestamps.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$returnDateType = \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::getReturnDateType();\n```\n\n----------------------------------------\n\nTITLE: ChooseRows Function Implementation\nDESCRIPTION: The CHOOSEROWS function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::chooseRows method. This function selects rows from an array.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::chooseRows\n```\n\n----------------------------------------\n\nTITLE: Text Test Function PHP\nDESCRIPTION: Maps the Excel T function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::test method checks if a value is text and returns the text if it is, otherwise it returns an empty string. This function essentially ensures a value is treated as text.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_102\n\nLANGUAGE: PHP\nCODE:\n```\nT                        | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Text::test\n```\n\n----------------------------------------\n\nTITLE: Using getHighestDataRow() and getHighestDataColumn() with rangeToArray() in PHP\nDESCRIPTION: This snippet shows how to use getHighestDataRow() and getHighestDataColumn() methods to define the range for rangeToArray(). By using only the actual range of data, it avoids iterating over potentially large empty rows or columns, improving memory efficiency. The empty row check is still included.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$maxDataRow = $worksheet->getHighestDataRow();\n$maxDataColumn = $worksheet->getHighestDataColumn();\n\n$dataArray = $worksheet->rangeToArray(\"A1:{$maxDataColumn}{$maxDataRow}\");\n\nforeach ($dataArray as $row) {\n    // Check for empty rows\n    if (count(array_filter($row, function ($value) {\n        return $value !== null;\n    })) === 0) {\n        continue;   // Ignore empty rows\n    }\n\n    foreach ($row as $cellValue) {\n        // Do something with the cell data here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer\nDESCRIPTION: This command installs the development dependencies required for working on the PhpSpreadsheet project. It uses Composer, the PHP dependency manager, to fetch and install all necessary packages.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Ignoring Heading Rows in PHP\nDESCRIPTION: This snippet demonstrates how to skip the first two heading rows by starting the row iterator from the third row. The Row Iterator is initialized to start at row 3 and iterate up to the maximum data row.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$rowIterator = $worksheet->getRowIterator(3, $maxDataRow);\n```\n\n----------------------------------------\n\nTITLE: Getting Reader Load Sheets Only in PHP\nDESCRIPTION: Retrieves the 'Load Sheets Only' option from the reader object in PhpSpreadsheet.  This getter method identifies which worksheets are set to be loaded.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->getLoadSheetsOnly()\n```\n\n----------------------------------------\n\nTITLE: Scientific Number Format Wizard in PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to use the Scientific Number Format Wizard in PhpSpreadsheet to format a cell's value in scientific notation. It sets the cell value and then applies a format mask built using the `Scientific` class. The locale parameter allows for locale-specific formatting, though the example shows it doesn't affect the actual format code.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Scientific;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Scientific Wizard to build the Format Mask\n$scientificMask = new Scientific(\n    4,\n);\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($scientificMask);\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // 0.0000E+00\nvar_dump($worksheet->getCell('C20')->getFormattedValue()); //  -1.2346E+4\n\n// Set Cell value\n$worksheet->getCell('C21')->setValue(-12345.67890);\n\n// Set Cell Style using the Scientific Wizard to build the Format Mask for a locale\n$localeScientificMask = new Scientific(\n    3,\n    locale: 'nl_NL'\n);\n$worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($localeScientificMask);\n\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // 0.000E+00\nvar_dump($worksheet->getCell('C21')->getFormattedValue()); // -1.235E+4\n```\n\n----------------------------------------\n\nTITLE: Address Function Implementation\nDESCRIPTION: The ADDRESS function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Address::cell method. This method allows retrieval of the cell address based on row and column numbers.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Address::cell\n```\n\n----------------------------------------\n\nTITLE: Reset Theme Fonts - PHP\nDESCRIPTION: Resets the theme fonts for the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->resetThemeFonts();\n```\n\n----------------------------------------\n\nTITLE: Calculating DAY with Static Call - PHP\nDESCRIPTION: This example demonstrates how to calculate the day of the month from a date string using a static call to the DAYOFMONTH function. It calls the function directly using `call_user_func_array`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'DAYOFMONTH'],\n    ['25-Dec-2008']\n);\n// $retVal = 25\n```\n\n----------------------------------------\n\nTITLE: Centering Page Horizontally/Vertically PHP\nDESCRIPTION: This code demonstrates how to center a page horizontally and/or vertically in PhpSpreadsheet. It uses the `getPageSetup()` method to access the page setup options and then sets the `setHorizontalCentered()` and `setVerticalCentered()` properties to `true` or `false` to enable or disable centering in the respective direction.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getPageSetup()->setHorizontalCentered(true);\n$spreadsheet->getActiveSheet()->getPageSetup()->setVerticalCentered(false);\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet with IOFactory and LOAD_WITH_CHARTS - PhpSpreadsheet\nDESCRIPTION: This code shows loading a spreadsheet using `IOFactory::load()` with the `LOAD_WITH_CHARTS` flag. This method is useful when you don't need to instantiate a specific reader type. The flag ensures that charts are loaded along with the data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load(\"spreadsheetWithCharts.xlsx\", \\PhpOffice\\PhpSpreadsheet\\Reader\\IReader::LOAD_WITH_CHARTS);\n```\n\n----------------------------------------\n\nTITLE: ChooseCols Function Implementation\nDESCRIPTION: The CHOOSECOLS function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::chooseCols method. This function selects columns from an array.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::chooseCols\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Company Property in PHP\nDESCRIPTION: Retrieves the 'Company' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the company associated with the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCompany()\n```\n\n----------------------------------------\n\nTITLE: Set Chart Renderer for JpGraph\nDESCRIPTION: This code configures PhpSpreadsheet to use the JpGraph library for rendering charts.  You need to install either `jpgraph/jpgraph` or `mitoteam/jpgraph` using Composer before using this code. This is necessary to render charts in HTML or PDF files.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// to use jpgraph/jpgraph\nSettings::setChartRenderer(\\PhpOffice\\PhpSpreadsheet\\Chart\\Renderer\\JpGraph::class);\n//or\n// to use mitoteam/jpgraph\nSettings::setChartRenderer(\\PhpOffice\\PhpSpreadsheet\\Chart\\Renderer\\MtJpGraphRenderer::class);\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Title Property in PHP\nDESCRIPTION: Retrieves the 'Title' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the title of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getTitle()\n```\n\n----------------------------------------\n\nTITLE: Checking Cell in Spill Range PHP\nDESCRIPTION: This code checks if a cell is within a spill range after a formula has been calculated. It uses the `isCellInSpillRange()` method to determine if a cell is part of the spill range of a formula like `=SORT{7;5;1}`. It relies on array returns being enabled for accurate results.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$sheet->setCellValue('A1', '=SORT{7;5;1}');\n$sheet->getCell('A1')->getCalculatedValue(); // populates A1-A3\n$sheet->isCellInSpillRange('A2'); // true\n$sheet->isCellInSpillRange('A3'); // true\n$sheet->isCellInSpillRange('A4'); // false\n$sheet->isCellInSpillRange('A1'); // false\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Columns Within a Range Using Row Iterator in PHP\nDESCRIPTION: This snippet shows how to use the isEmpty() method to check if a specified range of columns within a row is empty.  The startColumn and endColumn parameters are used to define the range. This allows ignoring rows that have values in some columns but are otherwise considered empty within a specific range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nif ($row->isEmpty(startColumn: 'B', endColumn: 'E') {\n     // Ignore empty rows where columns B to E are empty values\n     //     even though there is a value in Column A.\n    continue;\n}\n```\n\n----------------------------------------\n\nTITLE: NORM Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel NORM functions to the PhpSpreadsheet implementation using Normal distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Normal::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Normal::inverse\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::inverse\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::cumulative\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Row Definition in PHP\nDESCRIPTION: This snippet shows how to customize the definition of an empty row when using the row iterator. It uses predefined constants to treat null values and empty strings as empty cells. The constants `CellIterator::TREAT_EMPTY_STRING_AS_EMPTY_CELL` and `CellIterator::TREAT_NULL_VALUE_AS_EMPTY_CELL` are combined to define which cells to skip.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nif ($row->isEmpty(\n    CellIterator::TREAT_EMPTY_STRING_AS_EMPTY_CELL |\n    CellIterator::TREAT_NULL_VALUE_AS_EMPTY_CELL)\n    ) { // Ignore empty rows\n    continue;\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical Rank Function PHP\nDESCRIPTION: Maps the Excel RANK and RANK.EQ functions to the same PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::RANK method likely computes the rank of a value within a dataset.  This mapping indicates that both RANK variants are treated identically by PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\nRANK                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::RANK\nRANK.EQ                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::RANK\n```\n\n----------------------------------------\n\nTITLE: Converting Conditional to Wizard with Type Check\nDESCRIPTION: This example shows how to safely convert a `Conditional` object to a `Wizard` using the Wizard Factory's `fromConditional()` method and then checking the type of the returned Wizard object before proceeding. This prevents errors if the conditional is not of the expected type.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$wizard = Wizard::fromConditional($conditional, '$A$3:$E$8');\nif ($wizard instanceof Wizard\\CellValue) {\n    $wizard->greaterThan(12.5);\n\n    $newConditional = $wizard->getConditional();\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Rows in PHP\nDESCRIPTION: This snippet demonstrates how to insert new rows before a specific row number in a PhpSpreadsheet. It uses the `insertNewRowBefore()` method with the row number and the number of rows to insert as parameters.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_97\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->insertNewRowBefore(7, 2);\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Style with Composer\nDESCRIPTION: This command automatically fixes most of the code style issues in the PhpSpreadsheet project. It uses the configured code formatting tools to adjust the code to adhere to the established coding standards.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer fix\n```\n\n----------------------------------------\n\nTITLE: Creating a New Worksheet (PHP)\nDESCRIPTION: Creates a new worksheet in the spreadsheet. The newly created worksheet becomes the active worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$activeWorksheet = $spreadsheet->createSheet();\n```\n\n----------------------------------------\n\nTITLE: Listing Worksheet Information in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to retrieve worksheet information (name, dimensions, and state) from a spreadsheet file without loading the entire file. It uses the `listWorksheetInfo()` method of the reader. Dependencies include PhpSpreadsheet and a valid spreadsheet file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n\n$worksheetData = $reader->listWorksheetInfo($inputFileName);\n\necho '<h3>Worksheet Information</h3>';\necho '<ol>';\nforeach ($worksheetData as $worksheet) {\n    echo '<li>', $worksheet['worksheetName'], '<br />';\n    echo 'Rows: ', $worksheet['totalRows'],\n         ' Columns: ', $worksheet['totalColumns'], '<br />';\n    echo 'Cell Range: A1:',\n         $worksheet['lastColumnLetter'], $worksheet['totalRows'], '<br />';\n    echo 'Sheet state: ', $worksheet['sheetState'];\n    echo '</li>';\n}\necho '</ol>';\n```\n\n----------------------------------------\n\nTITLE: Adding a Drawing to a Worksheet (PhpSpreadsheet)\nDESCRIPTION: This code snippet demonstrates how to add a drawing to a worksheet in PhpSpreadsheet. It instantiates a `Drawing` object, sets properties like name, description, path to the image file, and height, and then associates the drawing with the active worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_100\n\nLANGUAGE: php\nCODE:\n```\n$drawing = new \\PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing();\n$drawing->setName('Logo');\n$drawing->setDescription('Logo');\n$drawing->setPath('./images/officelogo.jpg');\n$drawing->setHeight(36);\n```\n\n----------------------------------------\n\nTITLE: PEARSON Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel PEARSON function to the PhpSpreadsheet implementation using Trends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::CORREL\n```\n\n----------------------------------------\n\nTITLE: Loading Spreadsheet File Using IOFactory\nDESCRIPTION: This code snippet demonstrates how to load a spreadsheet file using the `IOFactory::load()` method, which automatically identifies the file type and loads it into a `Spreadsheet` object. It requires the `$inputFileName` variable to be set to the path of the spreadsheet file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n\n/** Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Reading an Excel 2003 XML File - PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to read an Excel 2003 XML file (.xml) using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Xml` reader. It instantiates the reader, and uses the load method to load the data from the specified XML file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xml();\n$spreadsheet = $reader->load(\"05featuredemo.xml\");\n```\n\n----------------------------------------\n\nTITLE: Setting Formula with ANCHORARRAY (PHP)\nDESCRIPTION: This snippet shows how to use the `ANCHORARRAY` function in a formula to reference the spillage range of an array formula. PhpSpreadsheet supports this internal Excel function as an alternative to the Spill operator.  The code sets the formula and allows MS Excel to render it correctly.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->setCellValue('D1','=SUM(ABS(ANCHORARRAY(A1)))');\n```\n\n----------------------------------------\n\nTITLE: Verifying File Type with IOFactory::identify()\nDESCRIPTION: This snippet demonstrates how to verify if a file is of a specific type using `IOFactory::identify()` and exception handling. It checks if `$inputFileName` is an XLS file and catches an exception if it is not.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n\ntry {\n    /**  Verify that $inputFileName really is an Xls file **/\n    $inputFileType = \\PhpOffice\\PhpSpreadsheet\\IOFactory::identify($inputFileName, [\\PhpOffice\\PhpSpreadsheet\\IOFactory::READER_XLS]);\n} catch (\\PhpOffice\\PhpSpreadsheet\\Reader\\Exception $e) {\n    // File isn't actually an Xls file, even though it has an xls extension \n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Row in PHP\nDESCRIPTION: This snippet shows how to collapse a row in a PhpSpreadsheet. It requires setting both the `setCollapsed()` and `setVisible(false)` properties for the row dimension.  The row will only appear collapsed in Excel 2007 and later if it is also set to invisible.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getRowDimension('5')->setCollapsed(true);\n$spreadsheet->getActiveSheet()->getRowDimension('5')->setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: Column Function Implementation\nDESCRIPTION: The COLUMN function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::COLUMN method.  It returns the column number of a cell reference.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::COLUMN\n```\n\n----------------------------------------\n\nTITLE: Offset Function Implementation\nDESCRIPTION: The OFFSET function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Offset::OFFSET method. It returns a reference to a range that is a specified number of rows and columns from a cell or range of cells.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Offset::OFFSET\n```\n\n----------------------------------------\n\nTITLE: Iterating over Rows with rangeToArrayYieldRows() in PHP\nDESCRIPTION: Demonstrates how to use rangeToArrayYieldRows() to iterate over worksheet rows while minimizing memory usage. This method yields each row as an array. The snippet includes iterating through the resulting row generator and printing some cell values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$rowGenerator = $sheet->rangeToArrayYieldRows(\n    'A1:' . $sheet->getHighestDataColumn() . $sheet->getHighestDataRow(),\n    null,\n    false,\n    false\n);\nforeach ($rowGenerator as $row) {\n    echo $row[0] . ' | ' . $row[1] . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical RSQ Function PHP\nDESCRIPTION: Maps the Excel RSQ function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::RSQ method calculates the R-squared value, which represents the coefficient of determination in a regression model.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_69\n\nLANGUAGE: PHP\nCODE:\n```\nRSQ                      | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::RSQ\n```\n\n----------------------------------------\n\nTITLE: Saving Spreadsheet with Charts using SAVE_WITH_CHARTS - PhpSpreadsheet\nDESCRIPTION: This code demonstrates saving a spreadsheet with charts using the `SAVE_WITH_CHARTS` flag in the `save()` method. It provides an alternative approach to instructing the writer to save charts directly during the save operation, streamlining the process.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$writer = IOFactory::createWriter($spreadsheet, 'Xlsx');\n$writer->save('mySavedFileWithCharts.xlsx', \\PhpOffice\\PhpSpreadsheet\\Writer\\IWriter::SAVE_WITH_CHARTS);\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Worksheet setSharedStyle to PhpSpreadsheet duplicateStyle\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->setSharedStyle($sharedStyle, $range)` to PhpSpreadsheet's `$worksheet->duplicateStyle($sharedStyle, $range)`.  The method for applying a shared style to a range of cells has been renamed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$worksheet->setSharedStyle($sharedStyle, $range);\n\n// After\n$worksheet->duplicateStyle($sharedStyle, $range);\n```\n\n----------------------------------------\n\nTITLE: Loading a Spreadsheet from a File (PhpSpreadsheet)\nDESCRIPTION: Loads a spreadsheet from a file using the IOFactory::load() method. This method automatically detects the file format and reads the spreadsheet data into a Spreadsheet object. The $inputFileName variable specifies the path to the spreadsheet file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/creating-spreadsheet.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileName = './sampleData/example1.xls';\n\n/** Load $inputFileName to a Spreadsheet object **/\n$spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Indirect Function Implementation\nDESCRIPTION: The INDIRECT function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Indirect::INDIRECT method. It returns the reference specified by a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Indirect::INDIRECT\n```\n\n----------------------------------------\n\nTITLE: Creating Worksheets in Workbook PHP\nDESCRIPTION: This snippet demonstrates how to create additional worksheets in a workbook using the `createSheet()` method and set their titles. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_119\n\nLANGUAGE: php\nCODE:\n```\n$worksheet1 = $spreadsheet->createSheet();\n$worksheet1->setTitle('Another sheet');\n```\n\n----------------------------------------\n\nTITLE: HLookup Function Implementation\nDESCRIPTION: The HLOOKUP function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\HLookup::lookup method. It performs a horizontal lookup in the top row of a range and returns a value from a specified row.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\HLookup::lookup\n```\n\n----------------------------------------\n\nTITLE: Getting AutoFilter in PHP\nDESCRIPTION: Retrieves the AutoFilter object associated with a worksheet.  This getter method accesses the autofilter settings applied to the sheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$sheet->getAutoFilter()\n```\n\n----------------------------------------\n\nTITLE: DCOUNTA Usage in PhpSpreadsheet\nDESCRIPTION: Demonstrates the use of the DCOUNTA function in PhpSpreadsheet to count non-blank cells in a database column that match specified criteria.  It defines the database and criteria as arrays, loads them into a worksheet, and then uses DCOUNTA to calculate the count. The result is retrieved and assigned to the $retVal variable.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DCOUNTA(A4:E10,\"Yield\",A1:A3)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n\n// $retVal = 5\n```\n\n----------------------------------------\n\nTITLE: LINEST/LOGEST Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel LINEST and LOGEST functions to the PhpSpreadsheet implementation using Trends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::LINEST\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::LOGEST\n```\n\n----------------------------------------\n\nTITLE: Reading XLS Spreadsheet (Data Only) PHP\nDESCRIPTION: This code reads an XLS file, loading only the data and ignoring styling and data validation, by setting the `readDataOnly` option to `true` on the reader. Requires PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Xls();\n$reader->setReadDataOnly(true);\n$spreadsheet = $reader->load(\"05featuredemo.xls\");\n```\n\n----------------------------------------\n\nTITLE: Creating MemoryDrawing from String (PhpSpreadsheet)\nDESCRIPTION: This snippet demonstrates creating a MemoryDrawing object from a string containing binary image data using the `fromString()` static method. This method is useful for adding images from sources like databases or APIs.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n$drawing = MemoryDrawing::fromString($imageString);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Spreadsheet Properties - PHP\nDESCRIPTION: This snippet shows how to set custom properties for a spreadsheet using PhpSpreadsheet. It includes setting properties with different datatypes, such as string, float, boolean, and date. The `Properties::PROPERTY_TYPE_DATE` constant is used to explicitly define the datatype of the date property.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getProperties()\n    ->setCustomProperty('Editor', 'Mark Baker')\n    ->setCustomProperty('Version', 1.17)\n    ->setCustomProperty('Tested', true)\n    ->setCustomProperty('Test Date', '2021-03-17', Properties::PROPERTY_TYPE_DATE);\n```\n\n----------------------------------------\n\nTITLE: MEDIAN Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MEDIAN function to the PhpSpreadsheet implementation using Averages.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_56\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages::median\n```\n\n----------------------------------------\n\nTITLE: Reading Number Format Code from Template - PHP\nDESCRIPTION: This snippet demonstrates how to read the number format code from a cell (A1) in an existing Excel template file using the PhpSpreadsheet reader. It loads the template and outputs the number format code of the specified cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader('Xlsx');\n$spreadsheet = $reader->load('template.xlsx');\nvar_dump($spreadsheet->getActiveSheet()->getStyle('A1')->getNumberFormat()->getFormatCode());\n```\n\n----------------------------------------\n\nTITLE: Expand Function Implementation\nDESCRIPTION: The EXPAND function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::expand method.  This function expands an array to given dimensions.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::expand\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Font - PHP\nDESCRIPTION: This snippet demonstrates how to set the theme font for the workbook. It sets both the major and minor fonts to Arial, and then applies the minor theme to the default font.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getTheme()\n    ->setThemeFontName('custom')\n    ->setMinorFontValues('Arial', 'Arial', 'Arial', []);\n$spreadsheet->getDefaultStyle()->getFont()->setScheme('minor');\n```\n\n----------------------------------------\n\nTITLE: GEOMEAN Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel GEOMEAN function to the PhpSpreadsheet implementation using Averages\\Mean.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages\\Mean::geometric\n```\n\n----------------------------------------\n\nTITLE: Writing Date with String Input (PHP)\nDESCRIPTION: Writes a date string (e.g., '2008-12-31') to a cell and sets the cell's number format to display it as a date.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->setCellValue('D1', '2008-12-31');\n\n$spreadsheet->getActiveSheet()->getStyle('D1')\n    ->getNumberFormat()\n    ->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_DATE_YYYYMMDDSLASH);\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute from Datetime in PhpSpreadsheet using Function Call\nDESCRIPTION: Demonstrates extracting the minute from a time value using the MINUTE function in PhpSpreadsheet by directly calling the function. It uses a time string as input and extracts the minute component.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'MINUTE'],\n    ['09:30']\n);\n// $retVal = 30\n```\n\n----------------------------------------\n\nTITLE: Text Character Code (CODE/UNICODE) PHP\nDESCRIPTION: Maps the Excel CODE and UNICODE functions to the same PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::code method retrieves the numeric code representing the first character of a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_85\n\nLANGUAGE: PHP\nCODE:\n```\nCODE                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::code\nUNICODE                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\CharacterConvert::code\n```\n\n----------------------------------------\n\nTITLE: Match Function Implementation\nDESCRIPTION: The MATCH function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ExcelMatch::MATCH method. This method searches for a specified item in a range of cells, and then returns the relative position of that item in the range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ExcelMatch::MATCH\n```\n\n----------------------------------------\n\nTITLE: Set 'Stop If True' Conditional Formatting Property\nDESCRIPTION: This code snippet sets the 'stop if true' property on a conditional, preventing further rules from being evaluated once a match is found. This optimizes performance when multiple rules are defined.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$conditional->setStopIfTrue(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Worksheet Index for HTML Writing - PHP\nDESCRIPTION: This code snippet shows how to specify which worksheet to write to an HTML file. This allows you to select which sheet to export. Requires PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n$writer->setSheetIndex(0);\n```\n\n----------------------------------------\n\nTITLE: Statistical Standardize Function PHP\nDESCRIPTION: Maps the Excel STANDARDIZE function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Standardize::execute method standardizes a value by subtracting the mean and dividing by the standard deviation.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_73\n\nLANGUAGE: PHP\nCODE:\n```\nSTANDARDIZE              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Standardize::execute\n```\n\n----------------------------------------\n\nTITLE: MINIFS Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MINIFS function to the PhpSpreadsheet implementation using Conditional.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::MINIFS\n```\n\n----------------------------------------\n\nTITLE: Setting a Column of Cells from a 1-D Array in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates converting a 1-dimensional array into a 2-dimensional array and then using it with `fromArray()` to set a column of cells. `array_chunk` is used to create the necessary structure.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$rowArray = ['Value1', 'Value2', 'Value3', 'Value4'];\n$columnArray = array_chunk($rowArray, 1);\n$spreadsheet->getActiveSheet()\n    ->fromArray(\n        $columnArray,   // The data to set\n        NULL,           // Array values with this value will not be set\n        'C3'            // Top left coordinate of the worksheet range where\n                        //    we want to set these values (default is A1)\n    );\n```\n\n----------------------------------------\n\nTITLE: Filter Function Implementation\nDESCRIPTION: The FILTER function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Filter::filter method. This method filters a range of data based on specified criteria.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Filter::filter\n```\n\n----------------------------------------\n\nTITLE: Setting Summary Row Position in PHP\nDESCRIPTION: This snippet shows how to set the position of the summary row for grouped/outlined rows in PhpSpreadsheet.  It uses the `setShowSummaryBelow()` method to specify whether the summary should be displayed below (default) or above.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->setShowSummaryBelow(false);\n```\n\n----------------------------------------\n\nTITLE: GAUSS Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel GAUSS function to the PhpSpreadsheet implementation using StandardNormal distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\StandardNormal::gauss\n```\n\n----------------------------------------\n\nTITLE: Clearing a Spreadsheet from Memory (PhpSpreadsheet)\nDESCRIPTION: Disconnects worksheets from the Spreadsheet object to break cyclic references and prevent memory leaks when unsetting the object. The disconnectWorksheets() method is called before unsetting the Spreadsheet object.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/creating-spreadsheet.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->disconnectWorksheets();\nunset($spreadsheet);\n```\n\n----------------------------------------\n\nTITLE: Install PhpSpreadsheet with Samples and Documentation\nDESCRIPTION: This command uses Composer to install PhpSpreadsheet, including the documentation and samples. The `--prefer-source` flag ensures that the source code is downloaded, which is necessary for running the examples.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet --prefer-source\n```\n\n----------------------------------------\n\nTITLE: Write All Worksheets to PDF\nDESCRIPTION: This shows how to write all worksheets in a PhpSpreadsheet object to a single PDF file. It uses the `writeAllSheets()` method of the PDF writer to include all sheets in the output.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$writer->writeAllSheets();\n```\n\n----------------------------------------\n\nTITLE: Writing Dates to Excel with PhpSpreadsheet\nDESCRIPTION: This code demonstrates how to write a date to a cell in a PhpSpreadsheet, calculating the serialized Excel datestamp and setting the appropriate number format mask for display.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/The Dating Game.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Shared\\Date as SharedDate;\n\n// Create new Spreadsheet object\n$spreadsheet = new Spreadsheet();\n$worksheet = $spreadsheet->getActiveSheet();\n\n// Calculate today's date as an Excel serialized timestamp\n$today = SharedDate::PHPToExcel(new DateTime('today'));\n\n$data = [\n    ['Formatted Date', 'Numeric Value'],\n    ['=C2', 1],\n    ['=C3', 2],\n    ['=C4', $today],\n];\n\n// Write our data to the worksheet\n$worksheet->fromArray($data, null, 'B1');\n\n// Display values in column B as human-readable dates\n$worksheet->getStyle('B2:B4')->getNumberFormat()->setFormatCode('yyyy-mm-dd');\n// Set some additional styling\n$worksheet->getStyle('B1:C1')->getFont()->setBold(true);\n$worksheet->getColumnDimension('B')->setAutoSize(true);\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Worksheet getSelectedCell to PhpSpreadsheet getSelectedCells\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->getSelectedCell()` to PhpSpreadsheet's `$worksheet->getSelectedCells()`. The method now returns all selected cells instead of only one.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$worksheet->getSelectedCell();\n\n// After\n$worksheet->getSelectedCells();\n```\n\n----------------------------------------\n\nTITLE: FormulaText Function Implementation\nDESCRIPTION: The FORMULATEXT function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Formula::text method. This method returns the formula as a string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Formula::text\n```\n\n----------------------------------------\n\nTITLE: Row Function Implementation\nDESCRIPTION: The ROW function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::ROW method. It returns the row number of a reference.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::ROW\n```\n\n----------------------------------------\n\nTITLE: Generate Excel from HTML Content\nDESCRIPTION: This snippet shows how to generate an Excel file from HTML content using the HTML Reader. It creates a simple HTML table as a string, loads it into a PhpSpreadsheet object using the HTML Reader, and then saves the spreadsheet as an Excel file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$htmlString = '<table>\n                  <tr>\n                      <td>Hello World</td>\n                  </tr>\n                  <tr>\n                      <td>Hello<br />World</td>\n                  </tr>\n                  <tr>\n                      <td>Hello<br>World</td>\n                  </tr>\n              </table>';\n\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Html();\n$spreadsheet = $reader->loadFromString($htmlString);\n\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Xls');\n$writer->save('write.xls'); \n```\n\n----------------------------------------\n\nTITLE: Getting Custom Properties in PHP\nDESCRIPTION: Retrieves user-defined (custom) properties from the spreadsheet. The getter methods allow accessing custom property values, checking if a property is set, and retrieving the property type.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCustomProperties()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->isCustomPropertySet()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCustomPropertyValue()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCustomPropertyType()\n```\n\n----------------------------------------\n\nTITLE: Setting Drawing Hyperlink URL in PHP\nDESCRIPTION: Sets the URL of a hyperlink associated with a drawing object in PhpSpreadsheet. This setter method is used to define the target URL of the hyperlink attached to a drawing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$drawing->setHyperlink()->setUrl($url)\n```\n\n----------------------------------------\n\nTITLE: MIN/MINA Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MIN and MINA functions to the PhpSpreadsheet implementation using Minimum.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Minimum::min\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Minimum::minA\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Detached Cell References - PHP\nDESCRIPTION: This snippet demonstrates the behavior of cell references in PhpSpreadsheet. Assigning a cell to a variable creates a detached reference. Subsequent calls to `getCell()` can modify the link to the collection, leading to unexpected results when accessing the original cell's coordinate. This highlights a potential issue when working with large spreadsheets and memory optimization.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadSheet = new Spreadsheet();\n$workSheet = $spreadSheet->getActiveSheet();\n\n// Set details for the formula that we want to evaluate, together with any data on which it depends\n$workSheet->fromArray(\n    [1, 2, 3],\n    null,\n    'A1'\n);\n\n$cellC1 = $workSheet->getCell('C1');\necho 'Value: ', $cellC1->getValue(), '; Address: ', $cellC1->getCoordinate(), PHP_EOL;\n\n$cellA1 = $workSheet->getCell('A1');\necho 'Value: ', $cellA1->getValue(), '; Address: ', $cellA1->getCoordinate(), PHP_EOL;\n\necho 'Value: ', $cellC1->getValue(), '; Address: ', $cellC1->getCoordinate(), PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Getting Drawing Hyperlink URL in PHP\nDESCRIPTION: Retrieves the URL of a hyperlink associated with a drawing object in PhpSpreadsheet. This getter method is used to access the target URL of the hyperlink attached to a drawing.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n$drawing->getHyperlink()->getUrl()\n```\n\n----------------------------------------\n\nTITLE: Calculating EDATE in PhpSpreadsheet using Function Call\nDESCRIPTION: Demonstrates calculating a date a certain number of months after a given date using the EDATE function in PhpSpreadsheet by directly calling the function. It uses a date string as input and calculates the date 25 months later.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'EDATE'],\n    ['31-Oct-2008', 25]\n);\n// $retVal = 40512.0 (30-Nov-2010)\n```\n\n----------------------------------------\n\nTITLE: Getting Reader Data Only Option in PHP\nDESCRIPTION: Retrieves the 'Read Data Only' option from the reader object in PhpSpreadsheet. This getter method is used to determine if the reader is configured to only read data, excluding formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->getReadDataOnly()\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Creator Property in PHP\nDESCRIPTION: Retrieves the 'Creator' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the name of the creator of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCreator()\n```\n\n----------------------------------------\n\nTITLE: Setting Active Sheet by Name (PHP)\nDESCRIPTION: Sets the active worksheet by its name (title). This allows switching to a specific worksheet within the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$activeWorksheet = $spreadsheet->setActiveSheetIndexByName('Sheet1')\n```\n\n----------------------------------------\n\nTITLE: Take Function Implementation\nDESCRIPTION: The TAKE function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::take method. This function takes specified rows or columns from an array.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::take\n```\n\n----------------------------------------\n\nTITLE: AVEDEV Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel AVEDEV function to the PhpSpreadsheet implementation. Calculates the average deviation using the Averages::averageDeviations method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages::averageDeviations\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Width with UoM PHP\nDESCRIPTION: This snippet demonstrates setting the default column width using a specified Unit of Measure (UoM).  Valid units are `pt`, `px`, `pc`, `in`, `cm`, and `mm`. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_113\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getDefaultColumnDimension()->setWidth(400, 'pt');\n```\n\n----------------------------------------\n\nTITLE: AVERAGEA Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel AVERAGEA function to the PhpSpreadsheet implementation. Calculates the average including text and logical values using the Averages::averageA method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages::averageA\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel DataType dataTypeForValue to PhpSpreadsheet DefaultValueBinder dataTypeForValue\nDESCRIPTION: This PHP code shows how to migrate from PHPExcel's `DataType::dataTypeForValue()` to PhpSpreadsheet's `DefaultValueBinder::dataTypeForValue()`.  The data type detection logic has been moved to the `DefaultValueBinder` class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\nDataType::dataTypeForValue($value);\n\n// After\nDefaultValueBinder::dataTypeForValue($value);\n```\n\n----------------------------------------\n\nTITLE: Instantiate PDF Writer\nDESCRIPTION: This code shows how to instantiate a PDF writer using a specific library name, such as Mpdf. It creates a writer object for converting a PhpSpreadsheet object to a PDF file using the specified library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Mpdf');\n```\n\n----------------------------------------\n\nTITLE: Copying a Worksheet between Workbooks (simplified) - PhpSpreadsheet\nDESCRIPTION: Copies a worksheet from one workbook to another using `addExternalSheet`, simplified since PhpSpreadsheet 3.8.0 by allowing a `null` index and a flag for cloning in `addSheet`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$clonedWorksheet = clone $spreadsheet1->getSheetByName('Worksheet 1');\n$spreadsheet1->addSheet($clonedWorksheet, null, true);\n$spreadsheet->addExternalSheet($clonedWorksheet);\n```\n\n----------------------------------------\n\nTITLE: HARMEAN Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel HARMEAN function to the PhpSpreadsheet implementation using Averages\\Mean.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages\\Mean::harmonic\n```\n\n----------------------------------------\n\nTITLE: Statistical Standard Deviation Functions PHP\nDESCRIPTION: Maps several Excel standard deviation functions to their PHP implementations within PhpSpreadsheet. The functions STDEV, STDEV.S, STDEVA, STDEVP, and STDEVPA are all mapped to the corresponding methods in the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations class, providing different variations of standard deviation calculations.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_74\n\nLANGUAGE: PHP\nCODE:\n```\nSTDEV                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEV\nSTDEV.P                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEVP\nSTDEV.S                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEV\nSTDEVA                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEVA\nSTDEVP                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEVP\nSTDEVPA                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\StandardDeviations::STDEVPA\n```\n\n----------------------------------------\n\nTITLE: Transpose Function Implementation\nDESCRIPTION: The TRANSPOSE function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Matrix::transpose method. It transposes an array (swaps rows and columns).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Matrix::transpose\n```\n\n----------------------------------------\n\nTITLE: CHIDIST/CHIINV/CHISQ Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel CHIDIST, CHIINV and CHISQ functions to the PhpSpreadsheet implementation using ChiSquared distribution functions.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\ChiSquared::distributionRightTail\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\ChiSquared::inverseRightTail\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\ChiSquared::distributionLeftTail\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\ChiSquared::inverseLeftTail\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\ChiSquared::test\n```\n\n----------------------------------------\n\nTITLE: Install RectorPHP for PHPExcel to PhpSpreadsheet Migration\nDESCRIPTION: This shell command installs RectorPHP along with the necessary dependencies for migrating from PHPExcel to PhpSpreadsheet. It adds `rector/rector`, `rector/rector-phpoffice`, and `phpoffice/phpspreadsheet` as development dependencies using composer.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rector/rector:0.15.10 rector/rector-phpoffice phpoffice/phpspreadsheet --dev\n\n# this creates rector.php config\nvendor/bin/rector init\n```\n\n----------------------------------------\n\nTITLE: Instantiate PDF Writer Directly\nDESCRIPTION: This code illustrates how to directly instantiate a specific PDF writer class, such as `Mpdf`, providing a straightforward way to create a writer object for converting a spreadsheet to a PDF file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf($spreadsheet);\n```\n\n----------------------------------------\n\nTITLE: MAX/MAXA Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MAX and MAXA functions to the PhpSpreadsheet implementation using Maximum.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Maximum::max\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Maximum::maxA\n```\n\n----------------------------------------\n\nTITLE: PERMUT Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel PERMUT function to the PhpSpreadsheet implementation using Permutations.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Permutations::PERMUT\n```\n\n----------------------------------------\n\nTITLE: Formatting Timesheet Cells PHP\nDESCRIPTION: This snippet applies specific formatting to cells in the timesheet. It sets the format for dates in column A, durations in column D, and the start date in cell D3. Additional styling, such as bolding and alignment, are also applied.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/The Dating Game.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Display values in column A as human-readable dates\n$worksheet->getStyle(\"A5:A{$row}\")->getNumberFormat()->setFormatCode('dd (ddd)');\n// Display values in column D as human-readable durations\n$worksheet->getStyle(\"D5:D{$totalRow}\")->getNumberFormat()->setFormatCode('[h]:mm');\n\n// Set some additional styling\n$worksheet->getStyle('D3')->getNumberFormat()->setFormatCode('yyyy-mm-dd');\n$worksheet->getStyle('A1')->getFont()->setBold(true);\n$worksheet->getStyle('A3:D4')->getFont()->setBold(true);\n$worksheet->getStyle(\"A5:A{$row}\")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);\n$worksheet->getColumnDimension('D')->setAutoSize(true);\n$worksheet->getStyle(\"E{$totalRow}\")->getFont()->setBold(true);\n```\n\n----------------------------------------\n\nTITLE: FORECAST/FORECAST.LINEAR Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel FORECAST and FORECAST.LINEAR functions to the PhpSpreadsheet implementation using Trends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::FORECAST\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Manager Property in PHP\nDESCRIPTION: Sets the 'Manager' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new manager to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setManager()\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Creator Property in PHP\nDESCRIPTION: Sets the 'Creator' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new creator name to the spreadsheet document's metadata.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCreator()\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Description Property in PHP\nDESCRIPTION: Retrieves the 'Description' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the description of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getDescription()\n```\n\n----------------------------------------\n\nTITLE: Escaping Formulas for String Values - PHP\nDESCRIPTION: This snippet demonstrates how to store a string value that begins with an `=` character without PhpSpreadsheet interpreting it as a formula. This is achieved by setting the `quotePrefix` style property to `true` for the cell. This prevents the formula from being evaluated.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Set cell A4 with a formula\n$spreadsheet->getActiveSheet()->setCellValue(\n    'A4',\n    '=IF(A3, CONCATENATE(A1, \" \", A2), CONCATENATE(A2, \" \", A1))'\n);\n$spreadsheet->getActiveSheet()->getCell('A4')\n    ->getStyle()->setQuotePrefix(true);\n```\n\n----------------------------------------\n\nTITLE: CORREL Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel CORREL function to the PhpSpreadsheet implementation using Trends::CORREL.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::CORREL\n```\n\n----------------------------------------\n\nTITLE: Create Dynamic Filter Rule in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to create a dynamic filter rule for 'yearToDate'. It sets the rule value to an empty string and uses `AUTOFILTER_RULETYPE_DYNAMIC_YEARTODATE` for the dynamic filter category. The rule type is set to `AUTOFILTER_RULETYPE_DYNAMICFILTER`.  A default equal rule is set, but ignored, instead the third argument of `setRule` is used to indicate the filter type.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_EQUAL,\n        '',\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_DYNAMIC_YEARTODATE\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_DYNAMICFILTER\n    );\n```\n\n----------------------------------------\n\nTITLE: F.DIST Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel F.DIST function to the PhpSpreadsheet implementation using F distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\F::distribution\n```\n\n----------------------------------------\n\nTITLE: AVERAGEIF Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel AVERAGEIF function to the PhpSpreadsheet implementation. Calculates the average based on a single criterion using the Conditional::AVERAGEIF method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::AVERAGEIF\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Subject Property in PHP\nDESCRIPTION: Retrieves the 'Subject' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the subject of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getSubject()\n```\n\n----------------------------------------\n\nTITLE: EXPON.DIST/EXPONDIST Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel EXPON.DIST and EXPONDIST functions to the PhpSpreadsheet implementation using Exponential distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Exponential::distribution\n```\n\n----------------------------------------\n\nTITLE: Statistical Variance Functions PHP\nDESCRIPTION: Maps several Excel variance functions to their PHP implementations within PhpSpreadsheet.  The functions VAR, VAR.S, VARA, VARP, and VARPA are mapped to methods in the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances class, covering different types of variance calculations including sample and population variances with and without considering logical values and text.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_79\n\nLANGUAGE: PHP\nCODE:\n```\nVAR                      | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VAR\nVAR.P                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VARP\nVAR.S                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VAR\nVARA                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VARA\nVARP                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VARP\nVARPA                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Variances::VARPA\n```\n\n----------------------------------------\n\nTITLE: Statistical Trend Function PHP\nDESCRIPTION: Maps the Excel TREND function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::TREND method calculates predicted values based on a linear trend, given known x and y values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_77\n\nLANGUAGE: PHP\nCODE:\n```\nTREND                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::TREND\n```\n\n----------------------------------------\n\nTITLE: LARGE Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel LARGE function to the PhpSpreadsheet implementation using Size.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Size::large\n```\n\n----------------------------------------\n\nTITLE: Skipping Empty Rows in PHPSpreadsheet\nDESCRIPTION: This code snippet iterates through an array representing a spreadsheet, checks for empty rows by filtering out null values, and skips empty rows using the `continue` statement. It processes only the non-empty rows, executing the inner loop with the cell data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Looping the Loop.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($dataArray as $row) {\n    // Check for empty rows\n    if (count(array_filter($row, function ($value) {\n        return $value !== null;\n    })) === 0) {\n        continue;   // Ignore empty rows\n    }\n\n    foreach ($row as $cellValue) {\n        // Do something with the cell data here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Keywords Property in PHP\nDESCRIPTION: Retrieves the 'Keywords' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the keywords associated with the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getKeywords()\n```\n\n----------------------------------------\n\nTITLE: DEVSQ Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel DEVSQ function to the PhpSpreadsheet implementation using Deviations::sumSquares.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Deviations::sumSquares\n```\n\n----------------------------------------\n\nTITLE: Text Trim Function PHP\nDESCRIPTION: Maps the Excel TRIM function to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Trim::spaces method removes leading and trailing spaces, as well as multiple spaces between words, from a text string.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_108\n\nLANGUAGE: PHP\nCODE:\n```\nTRIM                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Trim::spaces\n```\n\n----------------------------------------\n\nTITLE: HYPGEOMDIST Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel HYPGEOMDIST function to the PhpSpreadsheet implementation using HyperGeometric distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\HyperGeometric::distribution\n```\n\n----------------------------------------\n\nTITLE: Statistical Slope Function PHP\nDESCRIPTION: Maps the Excel SLOPE function to its PHP implementation within PhpSpreadsheet.  The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::SLOPE method calculates the slope of a linear regression line based on the input data points.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_71\n\nLANGUAGE: PHP\nCODE:\n```\nSLOPE                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::SLOPE\n```\n\n----------------------------------------\n\nTITLE: Getting Comment Background Image in PHP\nDESCRIPTION: Retrieves the background image of a cell comment in PhpSpreadsheet. This getter method is used to access the background image object associated with a cell comment.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n$comment->getBackgroundImage()\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Datetime in PhpSpreadsheet using Function Call\nDESCRIPTION: Demonstrates extracting the hour from a time value using the HOUROFDAY function in PhpSpreadsheet by directly calling the function. It uses a time string as input and extracts the hour component.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'HOUROFDAY'],\n    ['09:30']\n);\n// $retVal = 9\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Modifier Property in PHP\nDESCRIPTION: Retrieves the 'Last Modified By' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the name of the person who last modified the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getLastModifiedBy()\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Data Validation in PHP\nDESCRIPTION: Sets the data validation object for a cell in PhpSpreadsheet. This setter method is used to define data validation rules for a cell, restricting the type of data that can be entered.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\n$cell->setDataValidation()\n```\n\n----------------------------------------\n\nTITLE: Disabling Calculation Cache PHP\nDESCRIPTION: This snippet shows how to disable the calculation cache and flush the current cache using `Calculation::getInstance($spreadsheet)->disableCalculationCache()`. Disabling the cache forces recalculation of formulas even if they have been previously evaluated, which is necessary if the underlying data has changed.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nCalculation::getInstance($spreadsheet)->disableCalculationCache();\n```\n\n----------------------------------------\n\nTITLE: Getting Sheet Protection in PHP\nDESCRIPTION: Retrieves the protection object for a worksheet. This getter method allows access to the protection settings applied to the sheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n$sheet->getProtection()\n```\n\n----------------------------------------\n\nTITLE: MAXIFS Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MAXIFS function to the PhpSpreadsheet implementation using Conditional.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Conditional::MAXIFS\n```\n\n----------------------------------------\n\nTITLE: Reading a SYLK File - PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to read a SYLK file (.slk) using the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Slk` reader. It instantiates the reader and uses the load method to load the spreadsheet data from the specified .slk file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$reader = new \\PhpOffice\\PhpSpreadsheet\\Reader\\Slk();\n$spreadsheet = $reader->load(\"05featuredemo.slk\");\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Subject Property in PHP\nDESCRIPTION: Sets the 'Subject' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new subject to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setSubject()\n```\n\n----------------------------------------\n\nTITLE: Columns Function Implementation\nDESCRIPTION: The COLUMNS function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::COLUMNS method. It returns the number of columns in an array or reference.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\RowColumnInformation::COLUMNS\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Modifier Property in PHP\nDESCRIPTION: Sets the 'Last Modified By' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new modifier name to the spreadsheet document's metadata.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setLastModifiedBy()\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Company Property in PHP\nDESCRIPTION: Sets the 'Company' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new company to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCompany()\n```\n\n----------------------------------------\n\nTITLE: Set 'No Format Set' Conditional Formatting Property\nDESCRIPTION: This code snippet sets the 'no format set' property on a conditional, causing a matched cell to display its original, unconditional format. This is particularly useful when combined with 'stop if true' to conditionally suppress formatting.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$conditional->setNoFormatSet(true);\n```\n\n----------------------------------------\n\nTITLE: Listing Worksheet Names in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to retrieve a list of worksheet names from a spreadsheet file without loading the entire file. It uses the `listWorksheetNames()` method of the reader. Dependencies include PhpSpreadsheet and a valid spreadsheet file.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n\n$worksheetNames = $reader->listWorksheetNames($inputFileName);\n\necho '<h3>Worksheet Names</h3>';\necho '<ol>';\nforeach ($worksheetNames as $worksheetName) {\n    echo '<li>', $worksheetName, '</li>';\n}\necho '</ol>';\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Creation Date/Time in PHP\nDESCRIPTION: Sets the 'Created' property (creation date and time) for the spreadsheet object in PhpSpreadsheet. This setter method updates the creation timestamp of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCreated()\n```\n\n----------------------------------------\n\nTITLE: Setting Macros Code in PHP\nDESCRIPTION: Sets the macro code for the spreadsheet. This setter method embeds or updates the code for macros within the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->setMacrosCode();\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Manager Property in PHP\nDESCRIPTION: Retrieves the 'Manager' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the manager associated with the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getManager()\n```\n\n----------------------------------------\n\nTITLE: Remove PHPExcel Writer\\Xls setTempDir as there is no alternative in PhpSpreadsheet\nDESCRIPTION: This PHP code indicates the removal of PHPExcel's `$writer->setTempDir()` method. There's no direct equivalent in PhpSpreadsheet to configure a temporary directory for the Xls writer.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$writer->setTempDir();\n\n// After, there is no way to set temporary storage directory anymore\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Title Property in PHP\nDESCRIPTION: Sets the 'Title' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new title to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setTitle()\n```\n\n----------------------------------------\n\nTITLE: Getting Spreadsheet Category Property in PHP\nDESCRIPTION: Retrieves the 'Category' property from the spreadsheet object in PhpSpreadsheet. This getter method obtains the category of the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->getCategory()\n```\n\n----------------------------------------\n\nTITLE: Unique Function Implementation\nDESCRIPTION: The UNIQUE function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Unique::unique method. This function returns a list of unique values in a list or range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Unique::unique\n```\n\n----------------------------------------\n\nTITLE: Setting Spreadsheet Category Property in PHP\nDESCRIPTION: Sets the 'Category' property for the spreadsheet object in PhpSpreadsheet. This setter method assigns a new category to the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getProperties()->setCategory()\n```\n\n----------------------------------------\n\nTITLE: Internal Single Function PHP\nDESCRIPTION: Maps the internal Excel function SINGLE to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Internal\\ExcelArrayPseudoFunctions::single method likely extracts a single value from an array or range, possibly handling errors if the input is not a single value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_115\n\nLANGUAGE: PHP\nCODE:\n```\nSINGLE                   | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Internal\\ExcelArrayPseudoFunctions::single\n```\n\n----------------------------------------\n\nTITLE: Install mitoteam/jpgraph via composer\nDESCRIPTION: This shell command installs the `mitoteam/jpgraph` package using Composer. This package provides JpGraph functionality for rendering charts within PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require mitoteam/jpgraph\n```\n\n----------------------------------------\n\nTITLE: Setting a Sequence Formula (PHP)\nDESCRIPTION: This example shows how to set the SEQUENCE function as an array formula.  However, only setting the cell value is not enough; the calculated value must be retrieved to populate the 'spillage' area.  The consequence of not retrieving the calculated value is also demonstrated.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->setCellValue(\n        'A10',\n        '=SEQUENCE(3,3)'\n    );\n// Will return a null, because the formula for A1 hasn't been calculated to populate the spillage area \n$result = $spreadsheet->getActiveSheet()->getCell('C3')->getValue();\n```\n\n----------------------------------------\n\nTITLE: SortBy Function Implementation\nDESCRIPTION: The SORTBY function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Sort::sortBy method. This method sorts a range of data by another range.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\Sort::sortBy\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel Worksheet getDefaultStyle to PhpSpreadsheet getParent getDefaultStyle\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's `$worksheet->getDefaultStyle()` to PhpSpreadsheet's `$worksheet->getParent()->getDefaultStyle()`.  The default style is now accessed through the worksheet's parent (the spreadsheet).\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$worksheet->getDefaultStyle();\n\n// After\n$worksheet->getParent()->getDefaultStyle();\n```\n\n----------------------------------------\n\nTITLE: Internal Anchor Array Function PHP\nDESCRIPTION: Maps the internal Excel function ANCHORARRAY to its PHP implementation within PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Internal\\ExcelArrayPseudoFunctions::anchorArray method likely manipulates or references an array within the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_114\n\nLANGUAGE: PHP\nCODE:\n```\nANCHORARRAY              | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Internal\\ExcelArrayPseudoFunctions::anchorArray\n```\n\n----------------------------------------\n\nTITLE: Installing Redis cache dependencies\nDESCRIPTION: This command shows how to install required packages using composer for using Redis as cache implementation in PhpSpreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/memory_saving.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require cache/simple-cache-bridge cache/redis-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client for WEBSERVICE - PHP\nDESCRIPTION: This snippet configures an HTTP client for use with the `WEBSERVICE` function in PhpSpreadsheet formulae. It uses Guzzle 7 as the HTTP client implementation. This is necessary to make HTTP requests from within spreadsheet formulas. It requires the Guzzle HTTP client and a suitable HTTP request factory.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/settings.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse Http\\Factory\\Guzzle\\RequestFactory;\nuse PhpOffice\\PhpSpreadsheet\\Settings;\n\n$client = new Client();\n$requestFactory = new RequestFactory();\n\nSettings::setHttpClient($client, $requestFactory);\n```\n\n----------------------------------------\n\nTITLE: Standardize keys for styling\nDESCRIPTION: The styling keys have been standardized to use the same casing and wording as the getter and setter methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// Before\n$style = [\n    'numberformat' => [\n        'code' => NumberFormat::FORMAT_CURRENCY_EUR_SIMPLE,\n    ],\n    'font' => [\n        'strike' => true,\n        'superScript' => true,\n        'subScript' => true,\n    ],\n    'alignment' => [\n        'rotation' => 90,\n        'readorder' => Alignment::READORDER_RTL,\n        'wrap' => true,\n    ],\n    'borders' => [\n        'diagonaldirection' => Borders::DIAGONAL_BOTH,\n        'allborders' => [\n            'style' => Border::BORDER_THIN,\n        ],\n    ],\n    'fill' => [\n        'type' => Fill::FILL_GRADIENT_LINEAR,\n        'startcolor' => [\n            'argb' => 'FFA0A0A0',\n        ],\n        'endcolor' => [\n            'argb' => 'FFFFFFFF',\n        ],\n    ],\n];\n\n// After\n$style = [\n    'numberFormat' => [\n        'formatCode' => NumberFormat::FORMAT_CURRENCY_EUR_SIMPLE,\n    ],\n    'font' => [\n        'strikethrough' => true,\n        'superscript' => true,\n        'subscript' => true,\n    ],\n    'alignment' => [\n        'textRotation' => 90,\n        'readOrder' => Alignment::READORDER_RTL,\n        'wrapText' => true,\n    ],\n    'borders' => [\n        'diagonalDirection' => Borders::DIAGONAL_BOTH,\n        'allBorders' => [\n            'borderStyle' => Border::BORDER_THIN,\n        ],\n    ],\n    'fill' => [\n        'fillType' => Fill::FILL_GRADIENT_LINEAR,\n        'startColor' => [\n            'argb' => 'FFA0A0A0',\n        ],\n        'endColor' => [\n            'argb' => 'FFFFFFFF',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: BETA.INV/BETADIST/BETAINV Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel BETA.INV, BETADIST and BETAINV functions to the PhpSpreadsheet implementation using Beta::inverse and Beta::distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Beta::inverse\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Beta::distribution\n```\n\n----------------------------------------\n\nTITLE: Set Worksheet Index for CSV - PhpSpreadsheet\nDESCRIPTION: CSV files can only contain one worksheet. This code snippet shows how to specify the worksheet index to read using the `setSheetIndex` method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$reader->setSheetIndex(0);\n```\n\n----------------------------------------\n\nTITLE: BINOM.DIST/BINOMDIST/BINOM.DIST.RANGE/BINOM.INV/CRITBINOM Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel BINOM.DIST, BINOMDIST, BINOM.DIST.RANGE, BINOM.INV and CRITBINOM functions to the PhpSpreadsheet implementation using Binomial::distribution and Binomial::inverse.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Binomial::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Binomial::range\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Binomial::inverse\n```\n\n----------------------------------------\n\nTITLE: Getting Reader Read Filter in PHP\nDESCRIPTION: Retrieves the 'Read Filter' from the reader object in PhpSpreadsheet. This getter method retrieves the filter object defining which cells should be read.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$reader->getReadFilter()\n```\n\n----------------------------------------\n\nTITLE: NEGBINOMDIST Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel NEGBINOMDIST function to the PhpSpreadsheet implementation using Binomial distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Binomial::negative\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Values with DATE Function - PHP\nDESCRIPTION: This example sets cell values in a worksheet to represent a date, then uses the DATE function to create a date value from these components. It sets the year, month, and day in cells A1, A2, and A3, and B1, B2, and B3 respectively. The DATE function is then used in cell D1 to calculate the date based on the values in B1, B2, and B3.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Year')\n    ->setCellValue('A2', 'Month')\n    ->setCellValue('A3', 'Day');\n\n$worksheet->setCellValue('B1', 2008)\n    ->setCellValue('B2', 12)\n    ->setCellValue('B3', 31);\n\n$worksheet->setCellValue('D1', '=DATE(B1,B2,B3)');\n\n$retVal = $worksheet->getCell('D1')->getCalculatedValue();\n// $retVal = 1230681600\n```\n\n----------------------------------------\n\nTITLE: GAMMA Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel GAMMA functions to the PhpSpreadsheet implementation using Gamma distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Gamma::gamma\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Gamma::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Gamma::inverse\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Gamma::ln\n```\n\n----------------------------------------\n\nTITLE: Install PhpSpreadsheet with Composer\nDESCRIPTION: This command uses Composer to install the PhpSpreadsheet library as a dependency for your project. It downloads the necessary files from Packagist and configures your project's autoloader.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet\n```\n\n----------------------------------------\n\nTITLE: Getting Macros Code in PHP\nDESCRIPTION: Retrieves the macro code associated with the spreadsheet. This getter method accesses the code for macros embedded in the spreadsheet document.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getMacrosCode();\n```\n\n----------------------------------------\n\nTITLE: Start PHP Built-in Web Server\nDESCRIPTION: This command starts the PHP built-in web server, serving files from the specified directory. In this case, it serves the PhpSpreadsheet samples directory, allowing you to access the examples in your web browser.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/index.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp -S localhost:8000 -t vendor/phpoffice/phpspreadsheet/samples\n```\n\n----------------------------------------\n\nTITLE: Setting Comment Background Image in PHP\nDESCRIPTION: Sets the background image of a cell comment in PhpSpreadsheet. This setter method is used to define the background image for a cell comment.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/features-cross-reference.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$comment->setBackgroundImage()\n```\n\n----------------------------------------\n\nTITLE: GROWTH Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel GROWTH function to the PhpSpreadsheet implementation using Trends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::GROWTH\n```\n\n----------------------------------------\n\nTITLE: Timesheet Data Initialization PHP\nDESCRIPTION: This snippet initializes arrays containing project heading, week heading, and timesheet data for a sample timesheet. These arrays will be used to populate the worksheet with data.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/The Dating Game.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// In a real application, we might read this data from a database to build a project timesheet\n$projectHeading = [['Project', 'PhpSpreadsheet - The Dating Game']];\n$weekHeading = [\n    ['Week', '=ISOWEEKNUM(D3)', 'Start Date', '=DATE(2023,1,16)'],\n    ['Day', 'Start Time', 'End Time', 'Hours Worked'],\n];\n\n$timesheetData = [\n    ['2023-01-16', '17:25', '20:15'],\n    ['2023-01-16', '20:50', '23:35'],\n    ['2023-01-17', '18:10', '19:35'],\n    ['2023-01-17', '20:10', '22:15'],\n    ['2023-01-17', '22:35', '23:45'],\n    ['2023-01-18', '09:15', '11:25'],\n];\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Worksheets by Name with PhpSpreadsheet\nDESCRIPTION: This code demonstrates how to load multiple, specific worksheets from a spreadsheet file using an array of sheet names.  This approach is useful when dealing with larger files and only certain worksheets are needed. The `setLoadSheetsOnly()` method is passed an array containing the names of the desired sheets.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xls';\n$inputFileName = './sampleData/example1.xls';\n$sheetnames = ['Data Sheet #1','Data Sheet #3'];\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader of which WorkSheets we want to load  **/\n$reader->setLoadSheetsOnly($sheetnames);\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: INTERCEPT Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel INTERCEPT function to the PhpSpreadsheet implementation using Trends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Trends::INTERCEPT\n```\n\n----------------------------------------\n\nTITLE: LOGINV/LOGNORM.DIST/LOGNORM.INV Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel LOGINV, LOGNORM.DIST and LOGNORM.INV functions to the PhpSpreadsheet implementation using LogNormal distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\LogNormal::inverse\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\LogNormal::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\LogNormal::cumulative\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Security in PhpSpreadsheet\nDESCRIPTION: This snippet shows how to set cell-level security using PhpSpreadsheet. It sets the locked and hidden properties of a cell's style. This only takes effect when the sheet is protected. Dependencies: PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getStyle('B1')\n    ->getProtection()\n    ->setLocked(\\PhpOffice\\PhpSpreadsheet\\Style\\Protection::PROTECTION_UNPROTECTED)\n    ->setHidden(\\PhpOffice\\PhpSpreadsheet\\Style\\Protection::PROTECTION_PROTECTED);\n```\n\n----------------------------------------\n\nTITLE: PERCENTILE Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel PERCENTILE functions to the PhpSpreadsheet implementation using Percentiles.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::PERCENTILE\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Percentiles::PERCENTRANK\n```\n\n----------------------------------------\n\nTITLE: Setting lessThan condition using CellValue Wizard - PHP\nDESCRIPTION: This code snippet demonstrates how to set a 'lessThan' condition using the CellValue wizard. It sets the condition that the cell value must be less than 10 to trigger the conditional formatting. It illustrates how to define a simple conditional rule using the wizard's methods.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/conditional-formatting.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$wizard->lessThan(10);\n```\n\n----------------------------------------\n\nTITLE: Statistical Trim Mean Function PHP\nDESCRIPTION: Maps the Excel TRIMMEAN function to its PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages\\Mean::trim method calculates the trimmed mean of a dataset by excluding a specified percentage of extreme values from both ends.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_78\n\nLANGUAGE: PHP\nCODE:\n```\nTRIMMEAN                 | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages\\Mean::trim\n```\n\n----------------------------------------\n\nTITLE: Drop Function Implementation\nDESCRIPTION: The DROP function is implemented using the \\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::drop method. This function drops specified rows or columns from an array.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\LookupRef\\ChooseRowsEtc::drop\n```\n\n----------------------------------------\n\nTITLE: Setting Locale-Specific Currency Format with Currency Wizard in PHP\nDESCRIPTION: This snippet demonstrates how to use the Currency Wizard with a locale in PhpSpreadsheet to set the format code for a cell. It sets the cell value and then applies a locale-specific currency format code (German locale) with the Euro symbol. The locale argument takes precedence over other formatting options.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C21')->setValue(-12345.67890);\n\n// Set Cell Style using the Currency Wizard to build the Format Mask for a locale\n$localeCurrencyMask = new Currency(\n    '€',\n    locale: 'de_DE'\n);\n$worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode($localeCurrencyMask);\n\nvar_dump($worksheet->getCell('C21')\n    ->getStyle()->getNumberFormat()->getFormatCode()); // #,##0.00 [$€-de-DE]\nvar_dump($worksheet->getCell('C21')->getFormattedValue()); // -12,345.68 €\n```\n\n----------------------------------------\n\nTITLE: AVERAGE Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel AVERAGE function to the PhpSpreadsheet implementation. Calculates the average using the Averages::average method.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages::average\n```\n\n----------------------------------------\n\nTITLE: COUNT Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel COUNT, COUNTA, COUNTBLANK functions to the PhpSpreadsheet implementation using Counts class.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Counts::COUNT\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Counts::COUNTA\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Counts::COUNTBLANK\n```\n\n----------------------------------------\n\nTITLE: Adding a Cell Comment - PHP\nDESCRIPTION: This snippet demonstrates how to add a comment to a cell in PhpSpreadsheet, including setting the author and the comment text. Requires the PhpSpreadsheet library.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()\n    ->getComment('E11')\n    ->setAuthor('Mark Baker');\n$commentRichText = $spreadsheet->getActiveSheet()\n    ->getComment('E11')\n    ->getText()->createTextRun('PhpSpreadsheet:');\n$commentRichText->getFont()->setBold(true);\n$spreadsheet->getActiveSheet()\n    ->getComment('E11')\n    ->getText()->createTextRun(\"\\r\\n\");\n$spreadsheet->getActiveSheet()\n    ->getComment('E11')\n    ->getText()->createTextRun('Total amount on the current invoice, excluding VAT.');\n```\n\n----------------------------------------\n\nTITLE: FISHER/FISHERINV Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel FISHER and FISHERINV functions to the PhpSpreadsheet implementation using Fisher distribution.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Fisher::distribution\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Fisher::inverse\n```\n\n----------------------------------------\n\nTITLE: Re-evaluating AutoFilters in PHP\nDESCRIPTION: This code snippet demonstrates how to re-evaluate all auto-filters in a spreadsheet, either adjusting the filter ranges or not.  This is useful before saving a spreadsheet to ensure that the filters are correctly applied and that the correct rows are hidden or visible.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->reevaluateAutoFilters(false);\n```\n\n----------------------------------------\n\nTITLE: KURT Function in PhpSpreadsheet\nDESCRIPTION: Maps the Excel KURT function to the PhpSpreadsheet implementation using Deviations.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Deviations::kurtosis\n```\n\n----------------------------------------\n\nTITLE: MODE Functions in PhpSpreadsheet\nDESCRIPTION: Maps the Excel MODE and MODE.SNGL functions to the PhpSpreadsheet implementation using Averages.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Averages::mode\n```\n\n----------------------------------------\n\nTITLE: Using DSUM in PhpSpreadsheet\nDESCRIPTION: This code snippet illustrates how to use the DSUM function in PhpSpreadsheet to add numbers in a column of a database that meet specific criteria. The process involves defining the database and criteria, populating the worksheet with these, setting up the DSUM formula, and retrieving the calculated sum.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DMIN(A4:E10,\"Profit\",A1:A2)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 225\n```\n\n----------------------------------------\n\nTITLE: Statistical Poisson Distribution PHP\nDESCRIPTION: Maps the Excel POISSON and POISSON.DIST functions to the same PHP implementation within PhpSpreadsheet.  This indicates that both Excel functions are handled by the \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Poisson::distribution method. This method likely calculates the Poisson distribution probability.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_66\n\nLANGUAGE: PHP\nCODE:\n```\nPOISSON                  | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Poisson::distribution\nPOISSON.DIST             | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Distributions\\Poisson::distribution\n```\n\n----------------------------------------\n\nTITLE: Statistical Small Function PHP\nDESCRIPTION: Maps the Excel SMALL function to its PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Size::small method finds the k-th smallest value in a dataset, where k is a specified parameter.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_72\n\nLANGUAGE: PHP\nCODE:\n```\nSMALL                    | \\PhpOffice\\PhpSpreadsheet\\Calculation\\Statistical\\Size::small\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Collection Cache - PHP\nDESCRIPTION: This snippet demonstrates how to set a custom cache implementation for PhpSpreadsheet to manage cell objects, reducing memory consumption. It requires a PSR-16 compatible cache implementation. The provided implementation `MyCustomPsr16Implementation` should implement `Psr\\SimpleCache\\CacheInterface`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/settings.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = new MyCustomPsr16Implementation();\n\n\\PhpOffice\\PhpSpreadsheet\\Settings::setCache($cache);\n```\n\n----------------------------------------\n\nTITLE: Validating Code Changes with Composer\nDESCRIPTION: This command validates the code changes made in the PhpSpreadsheet project. It performs various checks to ensure that the changes are valid and do not introduce any errors or inconsistencies.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer check\n```\n\n----------------------------------------\n\nTITLE: Setting Odd Header and Footer - PhpSpreadsheet - PHP\nDESCRIPTION: This code snippet demonstrates how to set the odd header and footer of a worksheet using PhpSpreadsheet. It uses the `getHeaderFooter()` method to access the header and footer settings, and then uses the `setOddHeader()` and `setOddFooter()` methods to set the content. The example shows how to include text and properties like the title and page number.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getHeaderFooter()\n    ->setOddHeader('&C&HPlease treat this document as confidential!');\n$spreadsheet->getActiveSheet()->getHeaderFooter()\n    ->setOddFooter('&L&B' . $spreadsheet->getProperties()->getTitle() . '&RPage &P of &N');\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Tags\nDESCRIPTION: This command pushes all tags to the remote repository. The `--tags` option specifies that all tags should be pushed along with the commits.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Comment Character\nDESCRIPTION: This command configures the default comment character in Git. Changing the comment character might be useful in scenarios where default behaviours need to be altered.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.commentChar \";\"\n```\n\n----------------------------------------\n\nTITLE: Adding GD Drawing to Worksheet PHP\nDESCRIPTION: This snippet demonstrates how to generate an image in memory using GD and add it to a PhpSpreadsheet worksheet.  It creates a GD image, allocates a color, writes text to the image, and then adds the image to the worksheet as a MemoryDrawing. Requires a PhpSpreadsheet object named `$spreadsheet` to be pre-created.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_116\n\nLANGUAGE: php\nCODE:\n```\n// Generate an image\n$gdImage = @imagecreatetruecolor(120, 20) or die('Cannot Initialize new GD image stream');\n$textColor = imagecolorallocate($gdImage, 255, 255, 255);\nimagestring($gdImage, 1, 5, 5,  'Created with PhpSpreadsheet', $textColor);\n\n// Add a drawing to the worksheet\n$drawing = new \\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing();\n$drawing->setName('Sample image');\n$drawing->setDescription('Sample image');\n$drawing->setImageResource($gdImage);\n$drawing->setRenderingFunction(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing::RENDERING_JPEG);\n$drawing->setMimeType(\\PhpOffice\\PhpSpreadsheet\\Worksheet\\MemoryDrawing::MIMETYPE_DEFAULT);\n$drawing->setHeight(36);\n$drawing->setWorksheet($spreadsheet->getActiveSheet());\n```\n\n----------------------------------------\n\nTITLE: Migrate from PHPExcel settings for PDF renderer to PhpSpreadsheet IOFactory registerWriter\nDESCRIPTION: This PHP code demonstrates how to migrate from PHPExcel's PDF renderer settings to PhpSpreadsheet's `IOFactory::registerWriter()`.  The configuration of PDF renderers is now handled through direct registration of writer classes.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/migration-from-PHPExcel.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// Before:\n\\PHPExcel_Settings::setPdfRendererName(PHPExcel_Settings::PDF_RENDERER_MPDF);\n\\PHPExcel_Settings::setPdfRenderer($somePath);\n$writer = \\PHPExcel_IOFactory::createWriter($spreadsheet, 'PDF');\n\n// After:\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Mpdf');\n\n// Or alternatively\n\\PhpOffice\\PhpSpreadsheet\\IOFactory::registerWriter('Pdf', \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf::class);\n$writer = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createWriter($spreadsheet, 'Pdf');\n\n// Or alternatively\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf($spreadsheet);\n```\n\n----------------------------------------\n\nTITLE: Adding Identify Method to IO Factory - PHP\nDESCRIPTION: This introduces an `identify()` method to the IO Factory.  The method's purpose is to determine the appropriate reader for a specific file type without fully loading the file's content. It enhances efficiency by avoiding unnecessary resource consumption during file type detection.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/CHANGELOG.PHPExcel.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Loading All Worksheets with PhpSpreadsheet Reader\nDESCRIPTION: This code shows how to reset the reader to load all worksheets in a spreadsheet file, effectively overriding any previous `setLoadSheetsOnly()` settings. The `setLoadAllSheets()` method is used to achieve this default behavior.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$inputFileType = 'Xls';\n$inputFileName = './sampleData/example1.xls';\n\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n/**  Advise the Reader to load all Worksheets  **/\n$reader->setLoadAllSheets();\n/**  Load $inputFileName to a Spreadsheet Object  **/\n$spreadsheet = $reader->load($inputFileName);\n```\n\n----------------------------------------\n\nTITLE: Using DATEVALUE Function in Worksheet - PHP\nDESCRIPTION: This example shows how to use the DATEVALUE function within a worksheet to convert date strings into date values. It sets date strings in column A and then uses the DATEVALUE function in column B to convert these strings into date values. It then sets the return date type to Excel and retrieves the calculated values.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '31-Dec-2008')\n    ->setCellValue('A3', '31/12/2008')\n    ->setCellValue('A4', '12-31-2008');\n\n$worksheet->setCellValue('B2', '=DATEVALUE(A2)')\n    ->setCellValue('B3', '=DATEVALUE(A3)')\n    ->setCellValue('B4', '=DATEVALUE(A4)');\n\n\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::setReturnDateType(\n    \\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions::RETURNDATE_EXCEL\n);\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n\n$retVal = $worksheet->getCell('B4')->getCalculatedValue();\n// $retVal = 39813.0 for all cases\n```\n\n----------------------------------------\n\nTITLE: Setting Value Binder and Writing Data PHP\nDESCRIPTION: This code snippet demonstrates the use of the Advanced Value Binder to automatically convert string date/time values to Excel serialized date/timestamps. It then writes the project heading, week heading, and timesheet data to the worksheet. Excel formulas are set for calculating the duration and total hours worked.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/The Dating Game.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Cell\\Cell;\nuse PhpOffice\\PhpSpreadsheet\\Cell\\AdvancedValueBinder;\nuse PhpOffice\\PhpSpreadsheet\\Style\\Alignment;\n\n// Create new Spreadsheet object\n$spreadsheet = new Spreadsheet();\n$worksheet = $spreadsheet->getActiveSheet();\n// Use the Advanced Value Binder so that our string date/time values will be automatically converted\n//     to Excel serialized date/timestamps\n// Old method using static property\nCell::setValueBinder(new AdvancedValueBinder());\n// Preferred method using dynamic property since 3.4.0\n$spreadsheet->setValueBinder(new AdvancedValueBinder());\n\n// Write our data to the worksheet\n$worksheet->fromArray($projectHeading);\n$worksheet->fromArray($weekHeading, null, 'A3');\n\n// Let Excel calculate the duration for each timesheet entry\n$row = 4;\nforeach ($timesheetData as $timesheetEntry) {\n    ++$row;\n    $worksheet->fromArray($timesheetEntry, null, \"A{$row}\");\n    $worksheet->setCellValue(\"D{$row}\", \"=C{$row} - B{$row}\");\n}\n$totalRow = $row + 2;\n$worksheet->setCellValue(\"D{$totalRow}\", \"=SUM(D4:D{$row})\");\n$worksheet->setCellValue(\"E{$totalRow}\", 'Total Hours');\n```\n\n----------------------------------------\n\nTITLE: Getting Calculated Value to Populate Spillage (PHP)\nDESCRIPTION: This code snippet demonstrates how to trigger the calculation of an array formula and populate its spillage range by retrieving the calculated value of the top-left cell of the array. This ensures that the entire array formula result is calculated and available in the spreadsheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$spreadsheet->getActiveSheet()->getCell('A1')->getCalculatedValue();\n// Will return 9, because the formula for A1 has now been calculated, and the spillage area is populated \n$result = $spreadsheet->getActiveSheet()->getCell('C3')->getValue();\n```\n\n----------------------------------------\n\nTITLE: Setting Data Validation on Multiple Cells (Release 4+)\nDESCRIPTION: Applying validation to multiple cells or ranges simultaneously.  Works with PhpSpreadsheet Release 4 and above.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->getDataValidation('A1:A4 D5 E6:E7')\n    ->set...(...);\n```\n\n----------------------------------------\n\nTITLE: DMAX Usage in PhpSpreadsheet\nDESCRIPTION: Demonstrates how to use the DMAX function to find the largest number in a database column that matches the specified conditions in PhpSpreadsheet.  It defines the database and criteria, writes them to a worksheet, and calculates the maximum value using DMAX.  The result is then assigned to the $retVal variable.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$database = [\n    [ 'Tree',  'Height', 'Age', 'Yield', 'Profit' ],\n    [ 'Apple',  18,       20,    14,      105.00  ],\n    [ 'Pear',   12,       12,    10,       96.00  ],\n    [ 'Cherry', 13,       14,     9,      105.00  ],\n    [ 'Apple',  14,       15,    10,       75.00  ],\n    [ 'Pear',    9,        8,     8,       76.80  ],\n    [ 'Apple',   8,        9,     6,       45.00  ],\n];\n\n$criteria = [\n    [ 'Tree',      'Height', 'Age', 'Yield', 'Profit', 'Height' ],\n    [ '=\"=Apple\"', '>10',    NULL,  NULL,    NULL,     '<16'    ],\n    [ '=\"=Pear\"',  NULL,     NULL,  NULL,    NULL,     NULL     ],\n];\n\n$worksheet->fromArray( $criteria, NULL, 'A1' )\n    ->fromArray( $database, NULL, 'A4' );\n\n$worksheet->setCellValue('A12', '=DMAX(A4:E10,\"Profit\",A1:B2)');\n\n$retVal = $worksheet->getCell('A12')->getCalculatedValue();\n// $retVal = 105\n```\n\n----------------------------------------\n\nTITLE: Reading Large CSV Files in Chunks - PHP\nDESCRIPTION: This code demonstrates how to read a large CSV file in chunks and split it across multiple worksheets using PhpSpreadsheet. It defines a chunk size and a read filter to read the file in blocks, then loads each block into a new worksheet.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$inputFileType = 'Csv';\n$inputFileName = './sampleData/example2.csv';\n\necho 'Loading file ',pathinfo($inputFileName,PATHINFO_BASENAME),' using IOFactory with a defined reader type of ',$inputFileType,'<br />';\n/**  Create a new Reader of the type defined in $inputFileType  **/\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);\n\n/**  Define how many rows we want to read for each \"chunk\"  **/\n$chunkSize = 65530;\n/**  Create a new Instance of our Read Filter  **/\n$chunkFilter = new ChunkReadFilter();\n\n/**  Tell the Reader that we want to use the Read Filter  **/\n/**    and that we want to store it in contiguous rows/columns  **/\n\n$reader->setReadFilter($chunkFilter)\n    ->setContiguous(true);\n\n/**  Instantiate a new Spreadsheet object manually  **/\n$spreadsheet = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n\n/**  Set a sheet index  **/\n$sheet = 0;\n/**  Loop to read our worksheet in \"chunk size\" blocks  **/\n/**  $startRow is set to 2 initially because we always read the headings in row #1  **/\nfor ($startRow = 2; $startRow <= 1000000; $startRow += $chunkSize) {\n    /**  Tell the Read Filter which rows we want to read this loop  **/\n    $chunkFilter->setRows($startRow,$chunkSize);\n\n    /**  Increment the worksheet index pointer for the Reader  **/\n    $reader->setSheetIndex($sheet);\n    /**  Load only the rows that match our filter into a new worksheet  **/\n    $reader->loadIntoExisting($inputFileName,$spreadsheet);\n    /**  Set the worksheet title for the sheet that we've justloaded)  **/\n    /**    and increment the sheet index as well  **/\n    $spreadsheet->getActiveSheet()->setTitle('Country Data #'.(++$sheet));\n}\n```\n\n----------------------------------------\n\nTITLE: Building Composite Currency Masks with Currency Wizard in PHP\nDESCRIPTION: This code snippet demonstrates how to use the Currency Wizard and Number Wizard in PhpSpreadsheet to build a composite number format mask with different colors for positive, negative, and zero values. It sets the cell value, creates a currency mask using the Currency Wizard, and then constructs a composite mask by combining the currency mask with color codes. Finally, it applies the composite mask to the cell's number format.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/Behind the Mask.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Currency;\nuse PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\Number;\n\n// Set Cell value\n$worksheet->getCell('C20')->setValue(-12345.67890);\n\n// Set Cell Style using the Currency Wizard to build the Format Mask\n$currencyMask = new Currency(\n    '€',\n    2,\n    Number::WITH_THOUSANDS_SEPARATOR,\n    Currency::TRAILING_SYMBOL,\n    Currency::SYMBOL_WITH_SPACING\n);\n\n// Build the composite mask applying colours to the different sections\n$compositeCurrencyMask = [\n    '[Green]' . $currencyMask,\n    '[Red]' . $currencyMask,\n    $currencyMask,\n];\n\n$worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->setFormatCode(implode(';', $compositeCurrencyMask));\n\nvar_dump($worksheet->getCell('C20')\n    ->getStyle()->getNumberFormat()\n    ->getFormatCode()); // [Green]#,##0.00 €;[Red]#,##0.00 €;#,##0.00 €\n```\n\n----------------------------------------\n\nTITLE: Handling Reader Exceptions in PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to handle exceptions thrown by the PhpSpreadsheet Reader when loading a spreadsheet file.  It uses a try-catch block to catch the `\\PhpOffice\\PhpSpreadsheet\\Reader\\Exception` and displays an error message if loading fails. The input is the file name.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-files.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$inputFileName = './sampleData/example-1.xls';\n\ntry {\n    /** Load $inputFileName to a Spreadsheet Object  **/\n    $spreadsheet = \\PhpOffice\\PhpSpreadsheet\\IOFactory::load($inputFileName);\n} catch(\\PhpOffice\\PhpSpreadsheet\\Reader\\Exception $e) {\n    die('Error loading file: '.$e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Text Replicate Function PHP\nDESCRIPTION: Maps the Excel REPT function to its PHP implementation in PhpSpreadsheet. The \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::builtinREPT method repeats a text string a specified number of times.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/references/function-list-by-category.md#_snippet_98\n\nLANGUAGE: PHP\nCODE:\n```\nREPT                     | \\PhpOffice\\PhpSpreadsheet\\Calculation\\TextData\\Concatenate::builtinREPT\n```\n\n----------------------------------------\n\nTITLE: Setting String Value with Leading Zeros in PhpSpreadsheet\nDESCRIPTION: This code snippet demonstrates how to set a cell value as a string to preserve leading zeros. It explicitly sets the data type to string to prevent automatic numeric conversion.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/accessing-cells.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Set cell A8 with a numeric value, but tell PhpSpreadsheet it should be treated as a string\n$spreadsheet->getActiveSheet()->setCellValueExplicit(\n    'A8',\n    \"01513789642\",\n    \\PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_STRING\n);\n```\n\n----------------------------------------\n\nTITLE: Using DAY Function in Worksheet - PHP\nDESCRIPTION: This example shows how to use the DAY function within a worksheet to extract the day of the month from a date string. It sets date strings in column A and then uses the DAY function in column B to extract the day. It retrieves the calculated values for each cell.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$worksheet->setCellValue('A1', 'Date String')\n    ->setCellValue('A2', '31-Dec-2008')\n    ->setCellValue('A3', '14-Feb-2008');\n\n$worksheet->setCellValue('B2', '=DAY(A2)')\n    ->setCellValue('B3', '=DAY(A3)');\n\n$retVal = $worksheet->getCell('B2')->getCalculatedValue();\n// $retVal = 31\n\n$retVal = $worksheet->getCell('B3')->getCalculatedValue();\n// $retVal = 14\n```\n\n----------------------------------------\n\nTITLE: Adding Comment with Background Image - PHP\nDESCRIPTION: This code demonstrates adding a comment with a background image to a cell in PhpSpreadsheet. Requires the GD extension and PhpSpreadsheet library. It assumes the image file exists and is accessible at the specified path.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$sheet = $spreadsheet->getActiveSheet();\n$sheet->setCellValue('B5', 'Gibli Chromo');\n// Add png image to comment background\n$drawing = new Drawing();\n$drawing->setName('Gibli Chromo');\n$drawing->setPath('/tmp/gibli_chromo.png');\n$comment = $sheet->getComment('B5');\n$comment->setBackgroundImage($drawing);\n// Set the size of the comment equal to the size of the image \n$comment->setSizeAsBackgroundImage();\n```\n\n----------------------------------------\n\nTITLE: Disable Formula Pre-Calculation\nDESCRIPTION: This snippet demonstrates how to disable formula pre-calculation before saving a spreadsheet to PDF.  This can improve performance for large spreadsheets.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/reading-and-writing-to-file.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Pdf\\Mpdf($spreadsheet);\n$writer->setPreCalculateFormulas(false);\n\n$writer->save(\"05featuredemo.pdf\");\n```\n\n----------------------------------------\n\nTITLE: Create Top 5 Percent Filter Rule in PhpSpreadsheet\nDESCRIPTION: This code snippet creates a rule to filter the top 5 percent of values in a column. It uses `AUTOFILTER_COLUMN_RULE_TOPTEN_PERCENT` to specify the percentage and `AUTOFILTER_COLUMN_RULE_TOPTEN_TOP` for the highest values. The rule type is set to `AUTOFILTER_RULETYPE_TOPTENFILTER`.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/autofilters.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$columnFilter->createRule()\n    ->setRule(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_PERCENT,\n        5,\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_TOP\n    )\n    ->setRuleType(\n        \\PhpOffice\\PhpSpreadsheet\\Worksheet\\AutoFilter\\Column\\Rule::AUTOFILTER_RULETYPE_TOPTENFILTER\n    );\n```\n\n----------------------------------------\n\nTITLE: Removing a Worksheet by Index - PhpSpreadsheet\nDESCRIPTION: Deletes a worksheet from the PhpSpreadsheet object by its index. It first finds the index of the sheet to be removed by its name. Then, it removes it.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/worksheets.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$sheetIndex = $spreadsheet->getIndex(\n    $spreadsheet->getSheetByName('Worksheet 1')\n);\n$spreadsheet->removeSheetByIndex($sheetIndex);\n```\n\n----------------------------------------\n\nTITLE: Calling YEAR Statically - PhpSpreadsheet\nDESCRIPTION: This snippet demonstrates how to call the YEAR function statically using call_user_func_array. It passes a date string to the function and retrieves the year as the return value.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/calculation-engine.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$retVal = call_user_func_array(\n    ['\\PhpOffice\\PhpSpreadsheet\\Calculation\\Functions', 'YEAR'],\n    ['14-July-2001']\n);\n// $retVal = 2001\n```\n\n----------------------------------------\n\nTITLE: Merging Cells with Content Merge Option in PHP\nDESCRIPTION: This snippet demonstrates merging cells and merging the contents of all cells in the range into the top-left cell, a feature available in OpenOffice and LibreOffice. It uses the `Worksheet::MERGE_CELL_CONTENT_MERGE` flag.\nSOURCE: https://github.com/phpoffice/phpspreadsheet/blob/master/docs/topics/recipes.md#_snippet_96\n\nLANGUAGE: php\nCODE:\n```\n$spreadsheet->getActiveSheet()->mergeCells('A1:C3', Worksheet::MERGE_CELL_CONTENT_MERGE);\n```"
  }
]