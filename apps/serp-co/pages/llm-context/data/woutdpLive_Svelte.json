[
  {
    "owner": "woutdp",
    "repo": "live_svelte",
    "content": "TITLE: Modifying Dockerfile for nodejs and npm install - Diff\nDESCRIPTION: This diff shows the changes required to the generated Dockerfile to install nodejs and npm dependencies within the Docker image.  It installs curl to fetch the nodejs installer script, then runs that script to install nodejs, and finally runs `npm install` to install all of the javascript dependencies.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n# ./Dockerfile\n\n...\n\n# install build dependencies\n- RUN apt-get update -y && apt-get install -y build-essential git \\\n+ RUN apt-get update -y && apt-get install -y build-essential git curl \\\n    && apt-get clean && rm -f /var/lib/apt/lists/*_*\n\n+ # install nodejs for build stage\n+ RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs\n\n...\n\nCOPY assets assets\n\n+ # install all npm packages in assets directory\n+ WORKDIR /app/assets\n+ RUN npm install\n\n+ # change back to build dir\n+ WORKDIR /app\n\n...\n\n# start a new build stage so that the final image will only contain\n# the compiled release and other runtime necessities\nFROM ${RUNNER_IMAGE}\n\nRUN apt-get update -y && \\\n-  apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates \\\n+  apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates curl \\\n   && apt-get clean && rm -f /var/lib/apt/lists/*_*\n\n+ # install nodejs for production environment\n+ RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs\n\n...\n```\n\n----------------------------------------\n\nTITLE: LiveView Render with LiveSvelte Sigil Elixir\nDESCRIPTION: This Elixir code defines a LiveView module using the LiveSvelte `~V` sigil. It renders a Svelte component and includes event handling for incrementing a number.  It demonstrates how to use Svelte syntax within a LiveView context. The `phx-click` attribute triggers the \"increment\" event.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ExampleWeb.LiveSigil do\n  use ExampleWeb, :live_view\n\n  def render(assigns) do\n    ~V\"\"\"\n    <script>\n      export let number = 5\n      let other = 1\n\n      $: combined = other + number\n    </script>\n\n    <p>This is number: {number}</p>\n    <p>This is other: {other}</p>\n    <p>This is other + number: {combined}</p>\n\n    <button phx-click=\"increment\">Increment</button>\n    <button on:click={() => other += 1}>Increment</button>\n    \"\"\"\n  end\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, :number, 1)}\n  end\n\n  def handle_event(\"increment\", _value, socket) do\n    {:noreply, assign(socket, :number, socket.assigns.number + 1)}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Svelte component example - Svelte\nDESCRIPTION: This Svelte component demonstrates how to receive props from LiveView and push events back to the server. The component exports `number` and `live`, which are used for data binding and event handling.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_7\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n    // The number prop is reactive,\n    // this means if the server assigns the number, it will update in the frontend\n    export let number = 1\n    // live contains all exported LiveView methods available to the frontend\n    export let live\n\n    function increase() {\n        // This pushes the event over the websocket\n        // The last parameter is optional. It's a callback for when the event is finished.\n        // You could for example set a loading state until the event is finished if it takes a longer time.\n        live.pushEvent(\"set_number\", {number: number + 1}, () => {})\n\n        // Note that we actually never set the number in the frontend!\n        // We ONLY push the event to the server.\n        // This is the E2E reactivity in action!\n        // The number will automatically be updated through the LiveView websocket\n    }\n\n    function decrease() {\n        live.pushEvent(\"set_number\", {number: number - 1}, () => {})\n    }\n</script>\n\n<p>The number is {number}</p>\n<button on:click={increase}>+</button>\n<button on:click={decrease}>-</button>\n```\n\n----------------------------------------\n\nTITLE: LiveView Render with live_json Svelte Component Elixir\nDESCRIPTION: This Elixir code demonstrates how to render a Svelte component using `live_json` props.  It initializes `live_json` with a large JSON object and uses `LiveJson.push_patch` to send updates to the Svelte component efficiently by sending only the diffs. The socket is also passed as an attribute.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_19\n\nLANGUAGE: elixir\nCODE:\n```\ndef render(assigns) do\n  ~H\"\"\"\n    <.svelte name=\"Component\" live_json_props={%{my_prop: @ljmy_prop}} socket={@socket} />\n  \"\"\"\nend\n\ndef mount(_, _, socket) do\n  # Get `my_big_json_object` somehow\n  {:ok, LiveJson.initialize(\"my_prop\", my_big_json_object)}\nend\n\ndef handle_info(%Broadcast{event: \"update\", payload: my_big_json_object}, socket) do\n  {:noreply, LiveJson.push_patch(socket, \"my_prop\", my_big_json_object)}\nend\n```\n\n----------------------------------------\n\nTITLE: Ecto Schema with Jason Encoder Elixir\nDESCRIPTION: This Elixir code defines an Ecto schema and derives the `Jason.Encoder` protocol, excluding the `__meta__` field from the JSON serialization. This prevents serialization errors and ensures that only the relevant data is passed to the LiveSvelte component.  This is important because the `__meta__` field is not serializable.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_22\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Example.Planets.Planet do\n  use Ecto.Schema\n  import Ecto.Changeset\n  @derive {Jason.Encoder, except: [:__meta__]}\n\n  schema \"planets\" do\n    field :diameter, :integer\n    field :mass, :integer\n    field :name, :string\n\n    timestamps()\n  end\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading Heroicons to a specific version using Shell\nDESCRIPTION: This snippet upgrades the Heroicons library to the version specified in the `HERO_VSN` environment variable. It downloads the desired version from the GitHub repository, extracts the optimized icons, and removes the downloaded archive. It assumes `curl`, `tar`, and `rm` are available in the environment.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/example_project/priv/hero_icons/UPGRADE.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport HERO_VSN=\"2.0.16\" ; \\\n  curl -L -o optimized.zip \"https://github.com/tailwindlabs/heroicons/archive/refs/tags/v${HERO_VSN}.zip\" ; \\\n  tar --strip-components=1 -xvf optimized.zip heroicons-${HERO_VSN}/optimized ; \\\n  rm optimized.zip\n```\n\n----------------------------------------\n\nTITLE: Live Navigation Link Example Svelte\nDESCRIPTION: These Svelte snippets show how to create Live Navigation links that navigate between LiveViews without a full page refresh. `data-phx-link` and `data-phx-link-state` attributes are used to trigger push or redirect navigation events. This allows state (like Svelte stores) to persist across LiveView transitions.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"/your-liveview-path\" data-phx-link=\"redirect\" data-phx-link-state=\"push\">Redirect</a>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"/your-liveview-path\" data-phx-link=\"patch\" data-phx-link-state=\"push\">Patch</a>\n```\n\n----------------------------------------\n\nTITLE: LiveView example - Elixir\nDESCRIPTION: This LiveView module demonstrates how to render a Svelte component and handle events pushed from the client.  The `handle_event` function updates the `:number` assign in response to the `set_number` event.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_8\n\nLANGUAGE: Elixir\nCODE:\n```\n# `/lib/app_web/live/live_svelte.ex`\ndefmodule AppWeb.SvelteLive do\n  use AppWeb, :live_view\n\n  def render(assigns) do\n    ~H\"\"\"\n    <.svelte name=\"Example\" props={%{number: @number}} socket={@socket} />\n    \"\"\"\n  end\n\n  def handle_event(\"set_number\", %{\"number\" => number}, socket) do\n    {:noreply, assign(socket, :number, number)}\n  end\n\n  def mount(_params, _session, socket) do\n    {:ok, assign(socket, :number, 5)}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing LiveSvelte in live_view Elixir\nDESCRIPTION: This Elixir code snippet demonstrates how to import the `LiveSvelte` module within the `live_view` function of a Phoenix web application. This enables the use of LiveSvelte's features, such as the `~V` sigil, within LiveView templates.  It modifies the project's web.ex file to include the LiveSvelte import.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndef live_view do\n  quote do\n    use Phoenix.LiveView,\n      layout: {ExampleWeb.Layouts, :app}\n\n    import LiveSvelte\n\n    unquote(html_helpers())\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte and esbuild-svelte versions - JavaScript\nDESCRIPTION: This code snippet shows how to update the versions of `esbuild-svelte` and `svelte` packages in your `package.json` file.  This is a necessary step for migrating to Svelte 5, as LiveSvelte 0.15.0 requires Svelte 5. Make sure to run `npm install` or `yarn install` after updating.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n  // package.json\n \"esbuild-svelte\": \"^0.9.0\",\n \"svelte\": \"^5\",\n```\n\n----------------------------------------\n\nTITLE: Struct Definition with Selective Jason Encoding Elixir\nDESCRIPTION: This Elixir code defines a struct and derives the `Jason.Encoder` protocol, specifying which fields to include in the JSON serialization. This allows for control over which data is exposed to the client, preventing accidental leakage of sensitive information.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_21\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule User do\n  @derive {Jason.Encoder, only: [:name, :age]}\n  defstruct name: \"John\", age: 27, address: \"Main St\"\nend\n```\n\n----------------------------------------\n\nTITLE: Older Neovim Treesitter Config for Svelte Sigil\nDESCRIPTION: This is an alternative Treesitter configuration for older Neovim versions (below v0.9) to enable Svelte syntax highlighting within Elixir sigils, specifically the `~V` sigil. It treats the content within the sigil as Svelte code.  Requires Elixir and Svelte Treesitter parsers to be installed.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_14\n\nLANGUAGE: elixir\nCODE:\n```\n; extends\n\n; Svelte\n(sigil\n  (sigil_name) @_sigil_name\n  (quoted_content) @svelte\n(#eq? @_sigil_name \"V\"))\n```\n\n----------------------------------------\n\nTITLE: Mount Function with Svelte Options Elixir\nDESCRIPTION: This Elixir code shows how to pass Svelte options to a LiveSvelte component through the `mount` function in a LiveView.  The `svelte_opts` assign allows customization of the Svelte component's behavior, such as disabling server-side rendering (SSR) or setting a CSS class.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_15\n\nLANGUAGE: elixir\nCODE:\n```\ndef mount(_params, _session, socket) do\n  {:ok, assign(socket, some_value: 1, svelte_opts: %{ssr: false, class: \"example-class\"})}\nend\n```\n\n----------------------------------------\n\nTITLE: Neovim Treesitter Config for Svelte Sigil\nDESCRIPTION: This Treesitter configuration for Neovim enables syntax highlighting for Svelte code within Elixir sigils. It specifically targets the `~V` sigil and tells Treesitter to treat its content as Svelte code.  Requires the Elixir and Svelte Treesitter parsers to be installed.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\n; extends\n\n; Svelte\n(sigil\n  (sigil_name) @_sigil_name\n  (quoted_content) @injection.content\n (#eq? @_sigil_name \"V\")\n (#set! injection.language \"svelte\"))\n```\n\n----------------------------------------\n\nTITLE: LiveView event pushing with 'live' object\nDESCRIPTION: This snippet describes the change from using `pushEvent` and `pushEventTo` to using `export let live; live.pushEvent();` for interacting with LiveView events.  This allows broader usage of LiveView JS interop.  The example readme provides more context.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Struct Definition with Jason Encoder Elixir\nDESCRIPTION: This Elixir code defines a struct and derives the `Jason.Encoder` protocol for it. This allows the struct to be automatically serialized to JSON when passed as props to a LiveSvelte component. It demonstrates how to handle data serialization between Elixir and JavaScript.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_20\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule User do\n  @derive Jason.Encoder\n  defstruct name: \"John\", age: 27, address: \"Main St\"\nend\n```\n\n----------------------------------------\n\nTITLE: Publishing a hex package - Bash\nDESCRIPTION: This command publishes the current project as a hex package.  Before running this, ensure that assets are built, the version is updated in relevant files (README.md, package.json, mix.exs), and the changelog is updated.  It requires prior authentication with hex.pm.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmix hex.publish\n```\n\n----------------------------------------\n\nTITLE: Building static assets with mix - Bash\nDESCRIPTION: This command builds the static assets of your Phoenix application. This includes compiling the Svelte components using esbuild, and generating the necessary JavaScript and CSS files. The --watch flag allows for automatic rebuilds when changes are detected.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmix assets.build\n```\n\nLANGUAGE: bash\nCODE:\n```\nmix assets.build --watch\n```\n\n----------------------------------------\n\nTITLE: Adding LiveSvelte dependency - Elixir\nDESCRIPTION: This code snippet shows how to add the `live_svelte` dependency to your `mix.exs` file.  This allows you to use the library in your Phoenix project for LiveView components with Svelte.  The path option specifies the location of the `live_svelte` library relative to your project.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_28\n\nLANGUAGE: elixir\nCODE:\n```\n{:live_svelte, path: \"../live_svelte\"},\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring build.js - esbuild upgrade\nDESCRIPTION: This snippet refers to the required reconfiguration of the `build.js` file due to an upgrade to esbuild 0.24.0. Users must update their configuration based on the example provided in `example_project/assets/build.js`. This ensures compatibility with the newer esbuild version.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Generating a Dockerfile - Bash\nDESCRIPTION: This command generates a Dockerfile for deploying a Phoenix application. It automates the process of creating a Docker image that can be used to run your application in a containerized environment.  This is often used in conjunction with deployment platforms like Fly.io.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmix phx.gen.release --docker\n```\n\n----------------------------------------\n\nTITLE: Updating LiveSvelte version - Elixir\nDESCRIPTION: This code snippet shows how to update the `live_svelte` dependency version in your `mix.exs` file. This is a necessary step when upgrading to a new version of the library.  After updating, run `mix deps.get` to fetch the new version.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_36\n\nLANGUAGE: elixir\nCODE:\n```\n# `mix.exs`\n{:live_svelte, \"0.15.0\"}`\n```\n\n----------------------------------------\n\nTITLE: Adding LiveSvelte dependency - JavaScript\nDESCRIPTION: This code snippet shows how to add the `live_svelte` dependency to your `assets/package.json` file. This allows you to import LiveSvelte components in your JavaScript/Svelte code. The file option specifies the location of the `live_svelte` library relative to your `assets` directory.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n\"live_svelte\": \"file:../../live_svelte\",\n```\n\n----------------------------------------\n\nTITLE: SSR build directory update\nDESCRIPTION: This snippet describes the change of the SSR build directory from `priv/static/assets` to `priv/svelte`. This requires updating the `build.js` file by setting `optsServer.outdir` to `outdir: \"../priv/svelte\"`. This change impacts the deployment and organization of server-rendered Svelte components.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: LiveView socket integration\nDESCRIPTION: This entry highlights a breaking change where the `socket` is now a required parameter when rendering Svelte components within a LiveView. This change enforces explicit socket management and improves integration with LiveView's communication mechanisms.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: LiveSvelte Component with Loading Slot Elixir\nDESCRIPTION: This Elixir code shows how to use the `:loading` slot with a LiveSvelte component. The content within the `:loading` slot will be displayed while the Svelte component is loading client-side, useful when SSR is disabled.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_27\n\nLANGUAGE: elixir\nCODE:\n```\n<.svelte name=\"Example\" ssr={false}>\n  <:loading>\n    <p>Until your LiveSvelte component renders client-side, this will be displayed</p>\n  </:loading>\n</.svelte>\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Tag with SSR Option Elixir\nDESCRIPTION: This Elixir snippet shows how to disable SSR for a specific LiveSvelte component using the `<.svelte>` tag and setting the `ssr` property to `false`. This allows for granular control over SSR on a component-by-component basis.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_18\n\nLANGUAGE: elixir\nCODE:\n```\n<.svelte name=\"Example\" ssr={false} />\n```\n\n----------------------------------------\n\nTITLE: Ignore Svelte Build Files in .gitignore\nDESCRIPTION: This `.gitignore` entry instructs Git to ignore the automatically generated Svelte build files created by the `~V` sigil. These files, located in the `/assets/svelte/_build/` directory, are not necessary to include in the repository.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_12\n\nLANGUAGE: gitignore\nCODE:\n```\n# Ignore automatically generated Svelte files by the ~V sigil\n/assets/svelte/_build/\n```\n\n----------------------------------------\n\nTITLE: Compiler options update - dev option\nDESCRIPTION: This snippet describes the update to the `build.js` file to include the `{dev: !deploy, ...}` configuration in `compilerOptions`. This adds a development option to the Svelte compiler, enabling conditional compilation based on the deployment environment.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: LiveSvelte Svelte file to render the slot content Svelte\nDESCRIPTION: This Svelte code shows how to render the slot content passed from the elixir component. Slot content, defined between the opening and closing `<.svelte>` tags, can be rendered within the Svelte component.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let {children}: = $props()\n</script>\n\n<i>Opening</i>\n  {@render children?.()}\n<i>Closing</i>\n```\n\n----------------------------------------\n\nTITLE: Disable SSR Globally in config.exs Elixir\nDESCRIPTION: This Elixir code demonstrates how to disable Server-Side Rendering (SSR) globally for LiveSvelte components by setting the `ssr` option to `false` in the `config.exs` file.  This configuration affects all LiveSvelte components in the application.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :live_svelte,\n  ssr: false\n```\n\n----------------------------------------\n\nTITLE: Fly Launch command - Bash\nDESCRIPTION: This command launches a new application on Fly.io.  It prompts the user for configuration details such as the application name and region. It uses a fly.toml file if one exists, otherwise, will generate one.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nfly launch\n```\n\n----------------------------------------\n\nTITLE: LiveSvelte Svelte file to render the named slot content Svelte\nDESCRIPTION: This Svelte code shows how to render the named slot content passed from the elixir component. Named slot content, defined using `<:slot_name>`, can be rendered within the Svelte component.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let {children, subtitle}: = $props()\n</script>\n\n<i>Opening</i>\n  {@render children()}\n  <h2>{@render subtitle()}</h2>\n<i>Closing</i>\n```\n\n----------------------------------------\n\nTITLE: Rendering Svelte component - Elixir\nDESCRIPTION: Renders a Svelte component within a LiveView template using the `<.svelte>` tag. It takes the component name and props as arguments. The `socket` prop is necessary for reactivity.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_5\n\nLANGUAGE: Elixir\nCODE:\n```\ndef render(assigns) do\n  ~H\"\"\"\n  <.svelte name=\"Example\" props={%{number: @number}} socket={@socket} />\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: LiveSvelte Component with Slot Elixir\nDESCRIPTION: This Elixir code shows how to use slots with a LiveSvelte component. Slot content, defined between the opening and closing `<.svelte>` tags, can be rendered within the Svelte component.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_23\n\nLANGUAGE: elixir\nCODE:\n```\n<.svelte name=\"Example\">\n  <p>Slot content</p>\n</.svelte>\n```\n\n----------------------------------------\n\nTITLE: LiveSvelte Component with Named Slot Elixir\nDESCRIPTION: This Elixir code shows how to use named slots with a LiveSvelte component. Named slot content, defined using `<:slot_name>`, can be rendered within the Svelte component.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_25\n\nLANGUAGE: elixir\nCODE:\n```\n<.svelte name=\"Example\">\n  Main content\n  <:subtitle>\n    <p>Slot content</p>\n  </:subtitle>\n</.svelte>\n```\n\n----------------------------------------\n\nTITLE: Components macro usage - Elixir\nDESCRIPTION: Demonstrates the use of the `LiveSvelte.Components` macro to inject local function defs for Svelte components, providing a JSX-like authoring experience inside Liveviews.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_6\n\nLANGUAGE: Elixir\nCODE:\n```\nuse LiveSvelte.Components\n\ndef render(assigns) do\n  ~H\"\"\"\n  <.Example number={@number} socket={@socket} />\n  \"\"\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adjusting aliases in mix.exs - Elixir\nDESCRIPTION: Adjusts the `setup` and `assets.deploy` aliases in `mix.exs`. This step configures the build process to include LiveSvelte.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_1\n\nLANGUAGE: Elixir\nCODE:\n```\ndefp aliases do\n  [\n    setup: [\"deps.get\", \"ecto.setup\", \"cmd --cd assets npm install\"],\n    ...,\n    \"assets.deploy\": [\"tailwind <app_name> --minify\", \"cmd --cd assets node build.js --deploy\", \"phx.digest\"]\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Importing LiveSvelte in web.ex - Elixir\nDESCRIPTION: Adds `import LiveSvelte` to the `html_helpers/0` function inside `/lib/<app_name>_web.ex`. This makes the LiveSvelte functions available in the LiveView templates.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_3\n\nLANGUAGE: Elixir\nCODE:\n```\n# /lib/<app_name>_web.ex\n\ndefp html_helpers do\n  quote do\n\n    # ...\n\n    import LiveSvelte  # <-- Add this line\n\n    # ...\n\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Phoenix Server\nDESCRIPTION: This command starts the Phoenix endpoint either directly or within an IEx session.  It compiles the application and starts the web server, making it accessible at localhost:4000.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/example_project/README.md#_snippet_1\n\nLANGUAGE: Elixir\nCODE:\n```\nmix phx.server\n```\n\nLANGUAGE: Elixir\nCODE:\n```\niex -S mix phx.server\n```\n\n----------------------------------------\n\nTITLE: Opening Fly app - Bash\nDESCRIPTION: This command opens the deployed application in a web browser using the Fly.io CLI.  It retrieves the application's URL from Fly.io and opens it in the default browser.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nfly apps open\n```\n\n----------------------------------------\n\nTITLE: Tailwind configuration - JavaScript\nDESCRIPTION: Adds `./svelte/**/*.svelte` to the `content` array in the `tailwind.config.js` file. This ensures that Tailwind CSS recognizes and styles the Svelte components.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\ncontent: [\n  ...\n  \"./svelte/**/*.svelte\"\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Running LiveSvelte setup - Bash\nDESCRIPTION: Runs the `mix deps.get` and `mix live_svelte.setup` commands in the terminal. This retrieves dependencies and performs the necessary setup for LiveSvelte.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmix deps.get\nmix live_svelte.setup\n```\n\n----------------------------------------\n\nTITLE: Adding LiveSvelte dependency - Elixir\nDESCRIPTION: Adds the `live_svelte` dependency to the `mix.exs` file in a Phoenix application. This is the first step in installing LiveSvelte.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\ndefp deps do\n  [\n    {:live_svelte, \"~> 0.16.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Phoenix\nDESCRIPTION: This command installs and sets up the necessary dependencies for running a Phoenix server. It is a prerequisite before starting the server.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/example_project/README.md#_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\nmix setup\n```\n\n----------------------------------------\n\nTITLE: Router configuration - Elixir\nDESCRIPTION: Configures the router to route `/svelte` to the `SvelteLive` LiveView.\nSOURCE: https://github.com/woutdp/live_svelte/blob/master/README.md#_snippet_9\n\nLANGUAGE: Elixir\nCODE:\n```\n# `/lib/app_web/router.ex`\nimport Phoenix.LiveView.Router\n\nscope \"/\", AppWeb do\n  ...\n  live \"/svelte\", SvelteLive\n  ...\nend\n```"
  }
]