[
  {
    "owner": "parallax",
    "repo": "jspdf",
    "content": "TITLE: Initialize jsPDF with default settings and add text (ESM)\nDESCRIPTION: Demonstrates basic usage of jsPDF using ES module imports. It initializes a new PDF document with default A4 size, portrait orientation, and millimeters unit, adds 'Hello world!' text at position (10, 10), and saves the document as 'a4.pdf'.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jsPDF } from \"jspdf\";\n\n// Default export is a4 paper, portrait, using millimeters for units\nconst doc = new jsPDF();\n\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\");\n```\n\n----------------------------------------\n\nTITLE: Install jsPDF via npm or yarn\nDESCRIPTION: These shell commands demonstrate how to add jsPDF to your project using either npm or yarn package managers. The `--save` flag adds the dependency to your project's `package.json` file.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install jspdf --save\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add jspdf\n```\n\n----------------------------------------\n\nTITLE: Initialize jsPDF with custom format and add text (ESM)\nDESCRIPTION: Shows how to initialize jsPDF with custom options for orientation, units, and format. This example creates a landscape document with inches as units and a custom size of 4x2 inches, adds text, and saves it as 'two-by-four.pdf'.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Landscape export, 2Ã—4 inches\nconst doc = new jsPDF({\n  orientation: \"landscape\",\n  unit: \"in\",\n  format: [4, 2]\n});\n\ndoc.text(\"Hello world!\", 1, 1);\ndoc.save(\"two-by-four.pdf\");\n```\n\n----------------------------------------\n\nTITLE: Import jsPDF in TypeScript/Modern JS projects\nDESCRIPTION: Standard ES module import syntax for including jsPDF in modern JavaScript or TypeScript projects, compatible with bundlers like Webpack, Rollup, Parcel, or frameworks like Angular, React (Create React App), Vue CLI, etc.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jsPDF } from \"jspdf\";\n```\n\n----------------------------------------\n\nTITLE: Add a custom TTF font for Unicode/UTF-8 support\nDESCRIPTION: Demonstrates how to load a TrueType Font (TTF) file's binary content and add it to the jsPDF instance. This allows using characters outside the standard PDF fonts' ASCII limitation, such as UTF-8 characters, by setting the font via `setFont` before adding text.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst doc = new jsPDF();\n\nconst myFont = ... // load the *.ttf font file as binary string\n\n// add the font to jsPDF\ndoc.addFileToVFS(\"MyFont.ttf\", myFont);\ndoc.addFont(\"MyFont.ttf\", \"MyFont\", \"normal\");\ndoc.setFont(\"MyFont\");\n```\n\n----------------------------------------\n\nTITLE: Initialize jsPDF and add text in Node.js (CJS)\nDESCRIPTION: Example for using jsPDF in a Node.js environment, using the CommonJS `require` syntax. It initializes a PDF document, adds text, and saves the file to the current working directory.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { jsPDF } = require(\"jspdf\"); // will automatically load the node version\n\nconst doc = new jsPDF();\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\"); // will save the file in the current working directory\n```\n\n----------------------------------------\n\nTITLE: Load jsPDF UMD from CDN (cdnjs)\nDESCRIPTION: This HTML script tag loads the jsPDF library from the cdnjs content delivery network using the UMD (Universal Module Definition) format, suitable for direct inclusion in HTML files.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/3.0.1/jspdf.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Load jsPDF UMD from CDN (unpkg)\nDESCRIPTION: This HTML script tag loads the latest version of the jsPDF library from the unpkg content delivery network using the UMD format, also suitable for direct inclusion in HTML files.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hotfixes in jsPDF Constructor\nDESCRIPTION: Demonstrates how to enable specific hotfixes by passing the 'hotfixes' option as an array to the jsPDF constructor. This example enables the 'px_scaling' hotfix which corrects scaling calculations when using 'px' as a unit.\nSOURCE: https://github.com/parallax/jspdf/blob/master/HOTFIX_README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew jsPDF({\n  hotfixes: [\"px_scaling\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Switch to 'advanced' API mode temporarily\nDESCRIPTION: Uses the `advancedAPI` method to execute code within a callback using the API from the yWorks fork, enabling advanced features like transformation matrices, patterns, and FormObjects. The API automatically reverts to the default 'compat' mode after the callback finishes.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndoc.advancedAPI(doc => {\n  // your code\n});\n```\n\n----------------------------------------\n\nTITLE: Switch to 'compat' API mode temporarily\nDESCRIPTION: Uses the `compatAPI` method to execute code within a callback using the API from MrRio's original version, ensuring compatibility with older plugins. The API automatically reverts to the default 'compat' mode after the callback finishes (though it's already the default).\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ndoc.compatAPI(doc => {\n  // your code\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize jsPDF and add text using Global variable\nDESCRIPTION: Shows how to access and use jsPDF when loaded via a simple HTML script tag, where the library is exposed as a global variable (`window.jspdf`). It creates a document, adds text, and saves it.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { jsPDF } = window.jspdf;\n\nconst doc = new jsPDF();\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\");\n```\n\n----------------------------------------\n\nTITLE: Initialize jsPDF and add text using AMD format\nDESCRIPTION: Illustrates how to use jsPDF with Asynchronous Module Definition (AMD) loaders like RequireJS. The library is required asynchronously, and the jsPDF constructor is used to create a document, add text, and save it within the callback.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire([\"jspdf\"], ({ jsPDF }) => {\n  const doc = new jsPDF();\n  doc.text(\"Hello world!\", 10, 10);\n  doc.save(\"a4.pdf\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Webpack externals for optional dependencies\nDESCRIPTION: Example `webpack.config.js` snippet demonstrating how to mark optional jsPDF dependencies (`canvg`, `html2canvas`, `dompurify`) as external. This prevents Webpack from bundling them into separate chunks if your application doesn't use the features that require them.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  // ...\n  externals: {\n    // only define the dependencies you are NOT using as externals!\n    canvg: \"canvg\",\n    html2canvas: \"html2canvas\",\n    dompurify: \"dompurify\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Import jsPDF polyfills using ES Module syntax\nDESCRIPTION: Imports the necessary polyfills required for jsPDF to function in older browsers that lack modern APIs, using standard ES module import syntax. This is the recommended approach when using a bundler.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"jspdf/dist/polyfills.es.js\";\n```\n\n----------------------------------------\n\nTITLE: Load jsPDF polyfills using UMD CDN\nDESCRIPTION: Includes polyfills via an HTML script tag loading the UMD polyfill bundle from cdnjs. This method is simpler for quick tests or small applications but may lead to polyfills being loaded multiple times if other dependencies also include them.\nSOURCE: https://github.com/parallax/jspdf/blob/master/README.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/3.0.1/polyfills.umd.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Run jsPDF tests using npm\nDESCRIPTION: This command executes the test suite for the jsPDF library using npm.  It assumes that the necessary dependencies and test scripts are defined in the `package.json` file.  The tests are likely configured to run using a testing framework like Mocha or Jest.\nSOURCE: https://github.com/parallax/jspdf/blob/master/test/specs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Testing jsPDF - Running Unit Tests\nDESCRIPTION: This command runs only the unit tests for the jsPDF library. It does not include deployment tests. It requires the jsPDF project and its dependencies to be installed. The output indicates the test results, helping to identify any issues or failures.\nSOURCE: https://github.com/parallax/jspdf/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-unit\n```\n\n----------------------------------------\n\nTITLE: Testing jsPDF - Running Local Tests\nDESCRIPTION: This command runs both unit tests and deployment tests for various module formats within the jsPDF project using the files in the dist folder. It ensures that the different module formats function correctly, providing a more comprehensive testing approach. The jsPDF project and its dependencies must be installed before running this test.\nSOURCE: https://github.com/parallax/jspdf/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test-local\n```\n\n----------------------------------------\n\nTITLE: Building jsPDF\nDESCRIPTION: This command builds the jsPDF library by installing dependencies and compiling the files located in the `dist` directory. It fetches all the necessary dependencies from the npm registry and compiles the `dist` files. This command ensures that the jsPDF library is up-to-date and ready for use, preparing the project for further actions like testing or deployment.\nSOURCE: https://github.com/parallax/jspdf/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Run jsPDF tests locally using npm\nDESCRIPTION: This command executes a local test environment for the jsPDF library. It is likely to start a web server to run the tests in a browser environment.  This helps simulate real-world usage and potentially offers interactive debugging capabilities.\nSOURCE: https://github.com/parallax/jspdf/blob/master/test/specs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-local\n```\n\n----------------------------------------\n\nTITLE: Start jsPDF reference PDF server\nDESCRIPTION: This command starts a server that captures rendered jsPDF documents and stores them as reference PDFs. These reference PDFs are used to compare against future test runs ensuring that changes to the library do not introduce regressions. This process relies on a Node.js environment.\nSOURCE: https://github.com/parallax/jspdf/blob/master/test/specs/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode test/utils/reference-server.js\n```\n\n----------------------------------------\n\nTITLE: Versioning project with npm - Shell\nDESCRIPTION: This command uses npm's built-in versioning utility to update the project's version number according to semantic versioning principles. It typically updates the version in package.json and can optionally create a Git tag.\nSOURCE: https://github.com/parallax/jspdf/blob/master/RELEASE.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm version 2.x.y\n```\n\n----------------------------------------\n\nTITLE: Pushing Git tag to origin - Shell\nDESCRIPTION: This command pushes a specific Git tag, which was likely created by the npm version command or manually, to the remote repository named 'origin'. This makes the version tag available remotely.\nSOURCE: https://github.com/parallax/jspdf/blob/master/RELEASE.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin v2.x.y\n```\n\n----------------------------------------\n\nTITLE: Pushing master branch to origin - Shell\nDESCRIPTION: This command pushes the latest commits from the local 'master' branch to the remote repository named 'origin'. This ensures the main branch reflects the state after versioning or other final changes.\nSOURCE: https://github.com/parallax/jspdf/blob/master/RELEASE.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text recommended by the Apache License 2.0 appendix for inclusion in source files. Replace bracketed fields `[yyyy]` and `[name of copyright owner]` with specific project details. This notice should be enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/parallax/jspdf/blob/master/test/reference/fonts/Roboto/LICENSE.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]