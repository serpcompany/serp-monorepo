[
  {
    "owner": "mooncake-labs",
    "repo": "pg_mooncake",
    "content": "TITLE: Create Columnstore Table\nDESCRIPTION: Creates a new table named `user_activity` using the `columnstore` storage engine provided by the pg_mooncake extension.  This table is optimized for analytical queries.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE user_activity(\n  user_id BIGINT,\n  activity_type TEXT,\n  activity_timestamp TIMESTAMP,\n  duration INT\n) USING columnstore;\n```\n\n----------------------------------------\n\nTITLE: Insert Data into Columnstore Table\nDESCRIPTION: Inserts sample data into the `user_activity` columnstore table. This demonstrates how to populate the table with data for analysis.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO user_activity VALUES\n  (1, 'login', '2024-01-01 08:00:00', 120),\n  (2, 'page_view', '2024-01-01 08:05:00', 30),\n  (3, 'logout', '2024-01-01 08:30:00', 60),\n  (4, 'error', '2024-01-01 08:13:00', 60);\n```\n\n----------------------------------------\n\nTITLE: Select Data from Columnstore Table\nDESCRIPTION: Selects all data from the `user_activity` columnstore table. This retrieves the inserted data for verification or further analysis.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from user_activity;\n```\n\n----------------------------------------\n\nTITLE: Create pg_mooncake Extension\nDESCRIPTION: Creates the pg_mooncake extension in the current Postgres database. This makes the extension's functions and features available for use.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pg_mooncake;\n```\n\n----------------------------------------\n\nTITLE: Enable pg_mooncake Extension\nDESCRIPTION: This SQL command enables the pg_mooncake extension in the current PostgreSQL database. It allows users to access and use the extension's functionalities.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pg_mooncake;\n```\n\n----------------------------------------\n\nTITLE: Query Columnstore Table Location\nDESCRIPTION: Queries the `mooncake.columnstore_tables` view to retrieve the location of the columnstore table. This location can then be used to access the underlying Delta Lake or Iceberg table.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mooncake.columnstore_tables;\n```\n\n----------------------------------------\n\nTITLE: Build and Install pg_mooncake\nDESCRIPTION: Builds and installs the pg_mooncake extension. The `make release` command compiles the code, and `make install` installs the extension into the Postgres installation directory. The `-j$(nproc)` flag utilizes all available CPU cores for faster compilation.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake release -j$(nproc)\nmake install\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Server)\nDESCRIPTION: Runs the pg_mooncake Docker image as a server, setting the `POSTGRES_HOST_AUTH_METHOD` environment variable to `trust` for simplified authentication. This command starts the Postgres server with the pg_mooncake extension enabled inside the Docker container.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mooncake-demo -e POSTGRES_HOST_AUTH_METHOD=trust -d mooncakelabs/pg_mooncake\n```\n\n----------------------------------------\n\nTITLE: Docker Image Pull Command\nDESCRIPTION: Pulls the pg_mooncake Docker image from Docker Hub, allowing for quick setup and testing of the extension in a containerized environment. This is the first step for running pg_mooncake using Docker.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mooncakelabs/pg_mooncake\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Client)\nDESCRIPTION: Runs a temporary Docker container as a client to connect to the Postgres server running in the `mooncake-demo` container. The `psql` client is used to interact with the database.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --link mooncake-demo:postgres mooncakelabs/pg_mooncake psql -h postgres -U postgres\n```\n\n----------------------------------------\n\nTITLE: Clone pg_mooncake Repository\nDESCRIPTION: Clones the pg_mooncake repository from GitHub, including all submodules.  This is necessary for building the extension from source.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules https://github.com/Mooncake-Labs/pg_mooncake.git\n```\n\n----------------------------------------\n\nTITLE: Compile and Install pg_mooncake\nDESCRIPTION: These bash commands compile and install the pg_mooncake extension. `git submodule update` initializes and updates Git submodules. `make debug` compiles the extension in debug mode. `make install` installs the extension to the PostgreSQL installation directory.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\nmake debug\nmake install\n```\n\n----------------------------------------\n\nTITLE: Clone Repository in Container Volume\nDESCRIPTION: This command, executed from the Visual Studio Code Command Palette using the Dev Containers extension, clones the pg_mooncake repository into a container volume. It sets up an isolated workspace with all necessary tools for building, testing, and running the extension.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n> Dev Containers: Clone Repository in Container Volume...\n```\n\n----------------------------------------\n\nTITLE: Enable Unstable Extensions in Neon\nDESCRIPTION: Enables the use of unstable extensions in Neon Postgres. This is required to use pg_mooncake in a Neon environment.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/README.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET neon.allow_unstable_extensions='true';\n```\n\n----------------------------------------\n\nTITLE: Example psql Prompt with PID\nDESCRIPTION: This shows an example of the psql prompt, including the process ID (PID) of the PostgreSQL process. This PID is required to attach the debugger to the correct process.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nmooncake (pid: 1219) =#\n```\n\n----------------------------------------\n\nTITLE: Repository URL for Cloning\nDESCRIPTION: This URL is pasted into the prompt after executing the 'Clone Repository in Container Volume...' command. It specifies the location of the pg_mooncake repository on GitHub.\nSOURCE: https://github.com/mooncake-labs/pg_mooncake/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nhttps://github.com/Mooncake-Labs/pg_mooncake\n```"
  }
]