[
  {
    "owner": "xjonathanlei",
    "repo": "starkli",
    "content": "TITLE: Generating Plain Text Private Key with Starkli Console\nDESCRIPTION: This command generates a new random private key and displays it in plain text. It is intended for development use only due to its insecurity and should never be used for production accounts holding significant funds. The generated key can be used via a command-line option or environment variable.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/signers.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nstarkli signer gen-keypair\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted Keystore with Starkli Console\nDESCRIPTION: This command initializes a new encrypted keystore file at the specified path. It requires a password from the user during execution to encrypt the private key, providing a more secure storage method than plain text keys.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/signers.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli signer keystore new /path/to/keystore\n```\n\n----------------------------------------\n\nTITLE: Declaring the Cairo Class on Starknet (Console Command)\nDESCRIPTION: Contains the command to declare the compiled Cairo class on Starknet. Registers the class so that instances can be deployed using its class hash. The `--watch` flag auto-updates the declaration if the artifact changes.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ starkli declare --watch ./target/dev/my_contract_my_contract.sierra.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key from Ledger without Confirmation\nDESCRIPTION: Retrieves the public key for the specified HD path from the Ledger device using `starkli`, bypassing the on-device confirmation step using the `--no-display` flag.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nstarkli ledger get-public-key \"m//starknet'/starkli'/0'/0'/0\" --no-display\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Hash with Ledger using Starkli\nDESCRIPTION: Uses `starkli` to sign a provided raw hash using the private key associated with the specified HD path (`--path`) on the Ledger device. Requires user confirmation on the device. This is intended for specific use cases and not recommended for general transaction signing due to security risks (blind signing).\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nstarkli ledger sign-hash --path \"m//starknet'/starkli'/0'/0'/0\" 0x0111111111111111111111111111111111111111111111111111111111111111\n```\n\n----------------------------------------\n\nTITLE: Querying the Contract Name (Console Command)\nDESCRIPTION: Executes a call to the deployed contract's `name_get` function, retrieving the current name stored in the contract's state. Returns a felt252-encoded string representing the name.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ starkli call 0x06d8e1f3ed72fc87aa896639a0f50a4b9e59adb24de8a42b477957e1a7996e1b name_get\n```\n\n----------------------------------------\n\nTITLE: Using Ledger as Signer for Starkli Invoke Command\nDESCRIPTION: Demonstrates using a Ledger device as a signer for a `starkli invoke` command. The `--ledger-path` option specifies the HD path of the account on the Ledger to use for signing the transaction. User approval on the Ledger device is required. The `-w` flag waits for the transaction confirmation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke --ledger-path \"m//starknet'/starkli'/0'/0'/0\" eth transfer 0x1234 u256:100 -w\n```\n\n----------------------------------------\n\nTITLE: Setting Ledger Path Environment Variable\nDESCRIPTION: Sets the `STARKNET_LEDGER_PATH` environment variable to a specific HD path using the `export` command (common in Bash/Zsh). This allows omitting the `--ledger-path` option in subsequent `starkli` commands that require a Ledger signer within the same shell session.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nexport STARKNET_LEDGER_PATH=\"m//starknet'/starkli'/0'/0'/0\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Cairo contract source code (Source file: lib.cairo)\nDESCRIPTION: Defines a Starknet contract interface, storage, events, constructor, and external functions in Cairo for a simple name management contract. This code forms the core logic of the contract to be compiled and deployed.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// ** ./src/lib.cairo **\n\n#[starknet::interface]\ntrait MyContractInterface<T> {\n    fn name_get(self: @T) -> felt252;\n    fn name_set(ref self: T, name: felt252);\n}\n\n#[starknet::contract]\nmod my_contract {\n    #[storage]\n    struct Storage {\n        name: felt252,\n    }\n\n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        NameChanged: NameChanged,\n    }\n\n    #[derive(Drop, starknet::Event)]\n    struct NameChanged {\n        previous: felt252,\n        current: felt252,\n    }\n\n    #[constructor]\n    fn constructor(ref self: ContractState, name: felt252) {\n        self.name.write(name);\n    }\n\n    #[external(v0)]\n    impl MyContract of super::MyContractInterface<ContractState> {\n        fn name_get(self: @ContractState) -> felt252 {\n            self.name.read()\n        }\n\n        fn name_set(ref self: ContractState, name: felt252) {\n            let previous = self.name.read();\n            self.name.write(name);\n            self.emit(NameChanged { previous, current: name });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Contract Class Using Starkli CLI - Console\nDESCRIPTION: This snippet demonstrates how to declare a contract class file on Starknet using the Starkli CLI. The command assumes the user has set up the required signer and account environment variables. The input path should be the compiled class file (e.g., from starknet-compile or Scarb outputs), and on success, outputs the class hash necessary for subsequent deployments.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/declaring-classes.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli declare /path/to/class/file\n```\n\n----------------------------------------\n\nTITLE: Configuring SCARB toml for Starknet dependency (TOML Configuration)\nDESCRIPTION: Updates the `Scarb.toml` manifest to include a specific version of Starknet dependency and sets the target type to 'starknet-contract', enabling proper compilation and build targeting Starknet-compatible artifacts.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"my_contract\"\nversion = \"0.1.0\"\n\n[dependencies]\nstarknet = \"=2.1.0\"\n\n[[target.starknet-contract]]\n```\n\n----------------------------------------\n\nTITLE: Redeclaring a Contract Class from Another Network Using Starkli - Console\nDESCRIPTION: These commands show how to fetch a contract class by class hash from a specific Starknet network and redeclare it on another network (e.g., from Sepolia to Mainnet) using the Starkli CLI. The first command retrieves the class and writes it to a file, and the second redeclares it. These steps require no manual editing of the JSON output and assume environment variables for signer/account are set. The format may differ from original compiler outputs, but Starkli can handle the redeclaration.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/declaring-classes.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli class-by-hash --network sepolia SOME_CLASS_HASH_HERE > class.json\nstarkli declare --network mainnet ./class.json\n```\n\n----------------------------------------\n\nTITLE: Deploying a Starknet Contract Instance using Starkli CLI\nDESCRIPTION: Deploys a Starknet contract instance using the `starkli deploy` command. Requires the `<CLASS_HASH>` of a previously declared contract class and an optional list of constructor arguments `<CTOR_ARGS>`. This command necessitates a pre-configured signer and account (assumed to be set via environment variables in this example) and internally invokes the Universal Deployer Contract.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/deploying-contracts.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli deploy <CLASS_HASH> <CTOR_ARGS>\n```\n\n----------------------------------------\n\nTITLE: Estimating Transaction Fees Only with Starkli (Console)\nDESCRIPTION: Demonstrates how to estimate the transaction fee without executing it using the `--estimate-only` flag. This command simulates an ETH transfer invocation and outputs the estimated fee, then stops execution. Useful for dry runs or fee checks. Requires Starkli installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/transaction-fees.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer 0x1234 u256:100 --estimate-only\n```\n\n----------------------------------------\n\nTITLE: Creating a new signer with Starkli CLI (Console Command)\nDESCRIPTION: Generates a new cryptographic signer, prompts for password, and saves an encrypted keystore to specified path. Useful for managing transaction signing keys securely and later exporting environment variables for deployment and transaction signing.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ starkli signer keystore new /path/to/key.json\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable for Starknet keystore (Console Command)\nDESCRIPTION: Exports the path to the keystore JSON file, enabling Starkli commands to automatically use the specified signer for signing transactions. Simplifies subsequent CLI usage by avoiding repeated parameter input.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export STARKNET_KEYSTORE=\"/path/to/key.json\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated Contract Name (Console Command)\nDESCRIPTION: Calls the `name_get` function again to verify the stored name has been updated to the new value. Confirming state change demonstrates successful invocation and modification of contract storage.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ starkli call 0x06d8e1f3ed72fc87aa896639a0f50a4b9e59adb24de8a42b477957e1a7996e1b name_get\n```\n\n----------------------------------------\n\nTITLE: Changing Contract State via Name Set (Console Command)\nDESCRIPTION: Invokes the `name_set` function on the deployed contract with a new string argument, updating the stored name. Uses argument resolution for cleaner command syntax and ensures the contract state reflects the change.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ starkli invoke --watch 0x06d8e1f3ed72fc87aa896639a0f50a4b9e59adb24de8a42b477957e1a7996e1b name_set str:starknet\n```\n\n----------------------------------------\n\nTITLE: Setting L1 Gas Manually with Starkli (Console)\nDESCRIPTION: Demonstrates how to manually set the `l1_gas` component for a Starkli transaction using the `--l1-gas` option. This example invokes the `transfer` function on the `eth` contract, sending `100` tokens (u256 format) to address `0x1234` and setting the maximum L1 gas to `50000`. Requires Starkli to be installed and configured.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/transaction-fees.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke --strk eth transfer 0x1234 u256:100 --l1-gas 50000\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract Instance on Starknet (Console Command)\nDESCRIPTION: Deploys a new contract instance using the declared class hash and constructor arguments, such as a string converted to Cairo format. The command provides the deployed contract address upon success, which is used for subsequent interactions.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ starkli deploy --watch 0x0756ea65987892072b836b9a56027230bbe8fbed5e0370cff22778d071a0798e 0x737461726b6c69\n```\n\n----------------------------------------\n\nTITLE: Initializing a Starknet account with Starkli CLI (Console Command)\nDESCRIPTION: Creates a new Starknet account using an existing keystore file. Assumes that the keystore environment variable is set, facilitating account setup without explicitly passing keystore details each time.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ starkli account oz init /path/to/account.json\n```\n\n----------------------------------------\n\nTITLE: Deploying Starknet account (Console Command)\nDESCRIPTION: Deploys the previously initialized account to Starknet network. Prompts the user to fund the account address with ETH before proceeding, ensuring sufficient balance for deployment transactions. Uses environment variable for streamlined commands.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ starkli account deploy /path/to/account.json\n```\n\n----------------------------------------\n\nTITLE: Constructing a basic `starkli invoke` command\nDESCRIPTION: Demonstrates the fundamental syntax for invoking a contract function using Starkli CLI, including specifying the address, selector, and arguments. It notes the prerequisite of signer and account configuration.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke <ADDRESS> <SELECTOR> <ARGS>\n```\n\n----------------------------------------\n\nTITLE: Simplifying invoke commands with address resolution\nDESCRIPTION: Shows how to use argument resolution schemes to replace raw addresses with named entries from the address book and omit redundant scheme prefixes for cleaner commands. Highlights the use of `addr` and scheme omission for simplifying invocation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke addr:eth transfer 0x1234 100 0\n```\n\n----------------------------------------\n\nTITLE: Using scheme omission to further simplify invoke command\nDESCRIPTION: Demonstrates dropping the `addr:` scheme prefix entirely by leveraging scheme omission, making the command more concise while maintaining clarity.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer 0x1234 100 0\n```\n\n----------------------------------------\n\nTITLE: Automating `u256` argument splitting with argument resolution\nDESCRIPTION: Explains how to utilize the `u256` scheme to automatically handle large or complex `u256` values, simplifying input and reducing errors when specifying token amounts.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer 0x1234 u256:100\n```\n\n----------------------------------------\n\nTITLE: Supporting multiple calls with multicall syntax\nDESCRIPTION: Shows how to combine multiple contract calls into a single `invoke` command using `/` as a separator, enabling batch operations like transfer and approval within one transaction.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer 0x1234 u256:100 / eth approve 0x4321 u256:300\n```\n\n----------------------------------------\n\nTITLE: Setting Keystore Path Environment Variable (Shell)\nDESCRIPTION: This command sets the STARKNET_KEYSTORE environment variable to the path of an encrypted keystore file. Starkli commands will then use this keystore automatically unless a command-line signer option is provided. This simplifies command invocation when using a specific keystore repeatedly.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/signers.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport STARKNET_KEYSTORE=\"/path/to/keystore\"\n```\n\n----------------------------------------\n\nTITLE: Example: Transferring ETH using Starkli invoke\nDESCRIPTION: Provides an example command to transfer 100 Wei of ETH to a specified address, illustrating the input of selector and arguments, including the special handling for `u256` types with a third parameter.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/invoking-contracts.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7 transfer 0x1234 100 0\n```\n\n----------------------------------------\n\nTITLE: Network Configuration with Free RPC Vendor - TOML\nDESCRIPTION: Demonstrates how to configure a network that uses a free RPC vendor like Blast in the Starkli profiles file. This configuration specifies the provider type as \"free\" and sets the `vendor` field to the desired free RPC vendor. This approach allows using RPC services without managing API keys directly.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/profiles.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[default.networks.mainnet]\nchain_id = \"SN_MAIN\"\nprovider = { type = \"free\", vendor = \"blast\" }\n```\n\n----------------------------------------\n\nTITLE: Network Configuration with RPC Provider Shorthand - TOML\nDESCRIPTION: Illustrates a network configuration using the RPC provider shorthand in the Starkli profiles file.  This example simplifies the configuration by directly assigning the RPC endpoint URL to the `provider` field.  The Starkli tool automatically interprets this as a `type = \"rpc\"` configuration.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/profiles.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[default.networks.mainnet]\nchain_id = \"SN_MAIN\"\nprovider = \"https://example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key from Ledger using Starkli\nDESCRIPTION: Retrieves the public key corresponding to the specified EIP-2645 hierarchical derivation (HD) path from the connected Ledger device using `starkli`. By default, it prompts for confirmation on the Ledger device display.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nstarkli ledger get-public-key \"m//starknet'/starkli'/0'/0'/0\"\n```\n\n----------------------------------------\n\nTITLE: Network Configuration with RPC Provider - TOML\nDESCRIPTION: Shows how to define a network with a specified chain ID and an RPC provider using the full object configuration in the Starkli profiles file. The configuration includes the provider type as \"rpc\", the RPC endpoint URL, and custom HTTP headers. This example demonstrates how to include API keys or other custom headers for authentication.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/profiles.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[default.networks.mainnet]\nchain_id = \"SN_MAIN\"\nprovider = { type = \"rpc\", url = \"https://example.com/\", headers = [ { name = \"Api-Key\", value = \"xxxx\" } ] }\n```\n\n----------------------------------------\n\nTITLE: RPC Provider Shorthand Configuration - TOML\nDESCRIPTION: Demonstrates the shorthand syntax for defining an RPC provider within the Starkli profiles configuration file. This method simplifies the configuration by directly specifying the RPC URL as the provider value. It is equivalent to the full RPC provider configuration with `type = \"rpc\"` and `url` set to the given URL.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/profiles.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nprovider = \"https://example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Executing Starkli Command with Direct RPC URL\nDESCRIPTION: This command retrieves the current block number from a Starknet node accessible at the specified local JSON-RPC endpoint (`http://localhost:9545/`) by using the `--rpc` command-line flag. This method is suitable for one-off commands or testing specific endpoints.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli block-number --rpc http://localhost:9545/\n```\n\n----------------------------------------\n\nTITLE: Setting L1 Gas Price (FRI) Manually with Starkli (Console)\nDESCRIPTION: Illustrates setting the `l1_gas_price` using the `--l1-gas-price-raw` option, which takes the value in FRI (the smallest unit of STRK, 1 STRK = 10^18 FRI). This command sets the price to 100,000,000,000,000 FRI, equivalent to `0.0001` STRK, demonstrating an alternative input format. Requires Starkli installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/transaction-fees.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke --strk eth transfer 0x1234 u256:100 --l1-gas-price-raw 100000000000000\n```\n\n----------------------------------------\n\nTITLE: Setting RPC URL via Environment Variable (Shell)\nDESCRIPTION: This shell command sets the `STARKNET_RPC` environment variable to a specific JSON-RPC endpoint URL. When this variable is set, Starkli commands invoked subsequently will automatically use this URL as the provider unless overridden by the `--rpc` flag.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport STARKNET_RPC=\"http://localhost:9545/\"\n```\n\n----------------------------------------\n\nTITLE: Executing Starkli Command Using Environment Variable RPC\nDESCRIPTION: This command retrieves the current block number. It implicitly uses the JSON-RPC provider URL defined in the `STARKNET_RPC` environment variable, if set. This simplifies command invocation when working with a fixed RPC endpoint across multiple commands.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nstarkli block-number\n```\n\n----------------------------------------\n\nTITLE: Executing Starkli Command with Predefined Network\nDESCRIPTION: This command retrieves the current block number by connecting to a Starknet network defined in the active Starkli profile using the identifier `mainnet`. The connection details (like the RPC URL) are looked up from the profile configuration associated with this network ID.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nstarkli block-number --network mainnet\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Ledger App via Command Line\nDESCRIPTION: Installs the Starknet Ledger app using the `ledgerctl` tool. Requires the app files (`app.hex`, `app_nanoplus.json`, `starknet_small.gif`) in the execution directory and the `ledgerctl` command to be available. The `-f` flag specifies the manifest file. Note that this method installs an unsigned app and requires user confirmation on the device.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nledgerctl install -f app_nanoplus.json\n```\n\n----------------------------------------\n\nTITLE: Installing starkliup - Shell\nDESCRIPTION: This command downloads and executes the `starkliup` installation script.  `starkliup` is a portable script for managing Starkli installations. The script fetches prebuilt binaries and sets up shell configurations.  Dependencies include `curl` and a compatible shell environment (Linux, macOS, WSL, Android).  The command's output includes installation progress and potential restart instructions.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl https://get.starkli.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined Network via Environment Variable (Shell)\nDESCRIPTION: This shell command sets the `STARKNET_NETWORK` environment variable to a predefined network identifier, `mainnet`. When this variable is set, Starkli commands will use the provider configuration associated with this network ID from the active profile unless overridden by the `--network` flag.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nexport STARKNET_NETWORK=\"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Setting L1 Gas Price (STRK) Manually with Starkli (Console)\nDESCRIPTION: Shows how to manually set the `l1_gas_price` component using the `--l1-gas-price` option, accepting a decimal value in STRK (18 decimals). This example invokes the `transfer` function, setting the L1 gas price to `0.0001` STRK. Requires Starkli installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/transaction-fees.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke --strk eth transfer 0x1234 u256:100 --l1-gas-price 0.0001\n```\n\n----------------------------------------\n\nTITLE: Running starkliup - Shell\nDESCRIPTION: This command runs the `starkliup` utility, which installs or upgrades the `starkli` command-line tool.  `starkliup` automatically downloads the appropriate prebuilt binary for the user's platform.  It also sets up shell completions, so the user doesn't have to do it manually. A shell session restart might be required to finalize the process.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/installation.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nstarkliup\n```\n\n----------------------------------------\n\nTITLE: Installing starkli from source - Shell\nDESCRIPTION: This command uses `cargo` (the Rust package manager) to install `starkli` directly from its source code hosted on GitHub.  This is suitable for installing unreleased features.  It requires Rust to be installed.  The `--locked` flag ensures the use of the dependency versions specified in the `Cargo.lock` file, and the `--git` argument specifies the GitHub repository where the source code is located.  Shell completion setup will need to be done manually after installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo install --locked --git https://github.com/xJonathanLEI/starkli\n```\n\n----------------------------------------\n\nTITLE: Creating a new Scarb project and initializing dependencies (Console Commands)\nDESCRIPTION: Sets up a new Cairo project with Scarb, adds Starknet dependency, and configures the target to produce a contract suitable for Starknet deployment. Prepares the development environment for writing and compiling Cairo contracts.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir my_contract\n$ cd ./my_contract/\n$ scarb init\n```\n\n----------------------------------------\n\nTITLE: Building the Cairo Contract with Scarb (Console Command)\nDESCRIPTION: Compiles the Cairo project source code into a Starknet Sierra artifact, which can be declared and deployed on Starknet. The output artifact is stored in the target directory, ready for declaration.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/tutorials/starkli-101.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ scarb build\n```\n\n----------------------------------------\n\nTITLE: Invoking Contract with Ledger via Environment Variable\nDESCRIPTION: Executes a `starkli invoke` command, implicitly using the Ledger device specified by the `STARKNET_LEDGER_PATH` environment variable as the signer. Requires user approval on the Ledger device. The `-w` flag waits for transaction confirmation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer 0x1234 u256:100 -w\n```\n\n----------------------------------------\n\nTITLE: Checking Starknet Ledger App Version with Starkli\nDESCRIPTION: Uses the `starkli` command-line tool to query and display the version of the Starknet application running on the connected Ledger device. The Starknet app must be launched on the device for this command to succeed.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/ledger.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli ledger app-version\n```\n\n----------------------------------------\n\nTITLE: Executing Starkli Command Using Environment Variable Network\nDESCRIPTION: This command retrieves the current block number. It implicitly uses the predefined network identifier defined in the `STARKNET_NETWORK` environment variable, if set. The provider configuration for this network ID is then loaded from the active Starkli profile.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nstarkli block-number\n```\n\n----------------------------------------\n\nTITLE: Installing Starkli using starkliup\nDESCRIPTION: This snippet shows the command to install starkliup, which is used to manage Starkli installation and updates. It fetches the installation script and executes it using `sh`. No prior Rust installation is needed.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://get.starkli.sh | sh\n```\n\n----------------------------------------\n\nTITLE: EIP-2645 HD Path Format Specification (Code Example)\nDESCRIPTION: Illustrates the standardized structure of EIP-2645 HD paths used by Ledger wallets for Starknet, showing the six hierarchical levels: purpose (always 2645'), layer, application, two Ethereum address indices, and an account index. Each element is a 31-bit unsigned number, typically hardened (apostrophe). This format underpins key derivation consistency and compatibility across EIP-2645 compliant applications.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/eip-2645-hd-paths.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nm/2645'/layer'/application'/eth_address_1'/eth_address_2'/index\n```\n\n----------------------------------------\n\nTITLE: Displaying an EIP-2645 HD Path Example in Console\nDESCRIPTION: Shows the usage of the Starkli CLI command `starkli eip2645 echo` to convert a user-friendly Starkli path format into a fully expanded, universally accepted EIP-2645 HD path. This snippet demonstrates how to handle HD paths that use named components for layer and application levels, which Starkli converts into the required numeric hash format. Dependencies include the Starkli CLI tool. Input is a simplified HD path representation and output is the fully expanded HD path.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/eip-2645-hd-paths.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli eip2645 echo \"m//starknet'/starkli'/0'/0'/5\"\n```\n\n----------------------------------------\n\nTITLE: Example of Starkli Extended EIP-2645 HD Path with Non-Numeric Strings\nDESCRIPTION: Demonstrates the use of the Starkli extension enabling users to specify human-readable strings instead of numeric hashes for the layer and application segments of the EIP-2645 path. Starkli automatically converts these strings into corresponding numeric hashes, facilitating easier path management. This example shows a path using 'starknet' and 'starkli' as string values in place of numeric layer and application IDs.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/eip-2645-hd-paths.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nm/2645'/starknet'/starkli'/0'/0'/0\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Completions with Starkli\nDESCRIPTION: This command generates the shell completion file for a specified shell. The output is printed to standard output, which can then be redirected to a file for installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/shell-completions.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli completions <SHELL>\n```\n\n----------------------------------------\n\nTITLE: Updating/Installing Starkli with starkliup\nDESCRIPTION: This snippet demonstrates how to use starkliup to install or update the Starkli tool. Executing this command downloads and installs the prebuilt Starkli binaries.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstarkliup\n```\n\n----------------------------------------\n\nTITLE: Generating Fish Shell Completions\nDESCRIPTION: This command generates the shell completion file specifically for the Fish shell. The output can be piped to the appropriate Fish completions directory for installation.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/shell-completions.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli completions fish\n```\n\n----------------------------------------\n\nTITLE: Checking Supported RPC Version with Starkli\nDESCRIPTION: This command-line instruction uses the verbose version flag (`-vV`) to output the specific JSON-RPC specification version that the installed `starkli` binary is compatible with. This is useful for ensuring compatibility with network endpoints.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/providers.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli -vV\n```\n\n----------------------------------------\n\nTITLE: Starkli Shorthand Notation for EIP-2645 HD Paths Omitting Purpose Level\nDESCRIPTION: Shows a Starkli-specific shorthand notation for EIP-2645 HD paths that omits the mandatory `2645'` purpose level by leaving the first-level empty. This is supported because Starkli only works with EIP-2645 paths and assumes the initial purpose level, simplifying user input without losing standard compliance after expansion. This syntax is unique to Starkli and not valid in other HD wallet software.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/eip-2645-hd-paths.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nm//starknet'/starkli'/0'/0'/0\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Schemes with Starkli Invoke Command\nDESCRIPTION: Example of explicitly using the 'addr' and 'selector' schemes with the starkli invoke command to specify an ETH token address and transfer function selector.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/argument-resolution.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke addr:eth selector:transfer ...\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Schemes with Starkli Invoke Command\nDESCRIPTION: Simplified example showing how scheme prefixes can be omitted when they're implicitly expected by the command context, making the command more concise.\nSOURCE: https://github.com/xjonathanlei/starkli/blob/master/book/src/argument-resolution.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstarkli invoke eth transfer ...\n```"
  }
]