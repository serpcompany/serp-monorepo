[
  {
    "owner": "obsidianmd",
    "repo": "obsidian-api",
    "content": "TITLE: Registering DOM Events with Obsidian Plugin in JavaScript\nDESCRIPTION: Illustrates how to register DOM events on persistent page elements such as window or document using the registerDomEvent method. This automatically cleans up the event listener when the plugin is unloaded, avoiding manual deregistration. The snippet registers a 'click' event with a callback on a specified element.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.registerDomEvent(element, 'click', callback);\n```\n\n----------------------------------------\n\nTITLE: Registering Obsidian App Events in JavaScript\nDESCRIPTION: Shows how to register event listeners on Obsidian 'App' and other event interfaces using the plugin's registerEvent method. This ensures that event handlers are automatically detached when the plugin unloads, preventing memory leaks. The example demonstrates subscribing to a generic event called 'event-name' with a callback. Requires access to the 'app' event emitter instance.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.registerEvent(app.on('event-name', callback));\n```\n\n----------------------------------------\n\nTITLE: Registering Intervals in Obsidian Plugins via JavaScript\nDESCRIPTION: Demonstrates how to use the registerInterval helper method to register intervals (setInterval). This ensures the interval timer is cleared automatically when the plugin unloads, which helps prevent orphaned timers and potential performance issues. Example shows registering a generic callback to run every 1000 milliseconds.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.registerInterval(setInterval(callback, 1000));\n```\n\n----------------------------------------\n\nTITLE: Migrating from prepareQuery to prepareFuzzySearch\nDESCRIPTION: This snippet shows how to update your plugin code from using the deprecated `prepareQuery` and `fuzzySearch` functions to the new `prepareFuzzySearch` function. The old functions are replaced by a single fuzzy search function.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Old\nlet pq: PreparedQuery = prepareQuery(q);\n...\nfuzzySearch(pq, text);\n\n\n// New\nlet fuzzy = prepareFuzzySearch(q);\n...\nfuzzy(text);\n```\n\n----------------------------------------\n\nTITLE: Accessing Editor/File through activeEditor\nDESCRIPTION: This TypeScript snippet demonstrates accessing the editor or file from the `activeEditor` property of the workspace, suitable for handling both Markdown and Canvas views.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet { activeEditor } = app.workspace;\nif (activeEditor) {\n    let editor = activeEditor.editor;\n    let file = activeEditor.file;\n}\n```\n\n----------------------------------------\n\nTITLE: Using processFrontMatter for Metadata Manipulation\nDESCRIPTION: This snippet shows how to use `processFrontMatter` to atomically modify the frontmatter of a note, including adding and deleting key-value pairs.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.fileManager.processFrontMatter(file, (frontmatter) => {\n    frontmatter[\"key1\"] = value;\n    delete frontmatter[\"key2\"];\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Callout and Canvas Theme\nDESCRIPTION: This CSS code defines variables for customizing the appearance of callouts and canvas elements within Obsidian, with different themes.\nSOURCE: https://github.com/obsidianmd/obsidian-api/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n    --callout-bug: var(--color-red-rgb);\n    --callout-default: var(--color-blue-rgb);\n    --callout-error: var(--color-red-rgb);\n    --callout-example: var(--color-purple-rgb);\n    --callout-fail: var(--color-red-rgb);\n    --callout-important: var(--color-cyan-rgb);\n    --callout-info: var(--color-blue-rgb);\n    --callout-question: var(--color-yellow-rgb);\n    --callout-success: var(--color-green-rgb);\n    --callout-summary: var(--color-cyan-rgb);\n    --callout-tip: var(--color-cyan-rgb);\n    --callout-todo: var(--color-blue-rgb);\n    --callout-warning: var(--color-orange-rgb);\n    --callout-quote: 158, 158, 158;\n}\n.theme-light {\n    --color-red-rgb: 228, 55, 75;\n    --color-red: #E4374B;\n\n    --color-orange-rgb: 217, 108, 0;\n    --color-orange: #d96c00;\n\n    --color-yellow-rgb: 189, 142, 55;\n    --color-yellow: #BD8E37;\n\n    --color-green-rgb: 12, 181, 79;\n    --color-green: #0cb54f;\n\n    --color-cyan-rgb: 45, 183, 181;\n    --color-cyan: #2db7b5;\n\n    --color-blue-rgb: 8, 109, 221;\n    --color-blue: #086DDD;\n\n    --color-purple-rgb: 135, 107, 224;\n    --color-purple: #876be0;\n\n    --color-pink-rgb: 195, 43, 116;\n    --color-pink: #C32B74;\n}\n.theme-dark {\n    --color-red-rgb: 251, 70, 76;\n    --color-red: #fb464c;\n\n    --color-orange-rgb: 233, 151, 63;\n    --color-orange: #E9973F;\n\n    --color-yellow-rgb: 224, 222, 113;\n    --color-yellow: #E0DE71;\n\n    --color-green-rgb: 68, 207, 110;\n    --color-green: #44CF6E;\n\n    --color-cyan-rgb: 83, 223, 221;\n    --color-cyan: #53DFDD;\n\n    --color-blue-rgb: 2, 122, 255;\n    --color-blue: #027aff;\n\n    --color-purple-rgb: 168, 130, 255;\n    --color-purple: #a882ff;\n\n    --color-pink-rgb: 250, 153, 205;\n    --color-pink: #FA99CD;\n}\n```"
  }
]