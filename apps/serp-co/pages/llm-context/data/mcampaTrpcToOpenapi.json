[
  {
    "owner": "mcampa",
    "repo": "trpc-to-openapi",
    "content": "TITLE: Defining a tRPC Procedure with OpenAPI Metadata in TypeScript\nDESCRIPTION: Defines a tRPC router with a procedure 'sayHello' that exposes a GET endpoint '/say-hello'. The procedure specifies input/output schemas using Zod and returns a greeting message. OpenAPI metadata such as HTTP method and path are attached via the 'meta' method.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appRouter = t.router({\n  sayHello: t.procedure\n    .meta({ openapi: { method: 'GET', path: '/say-hello' } })\n    .input(z.object({ name: z.string() }))\n    .output(z.object({ greeting: z.string() }))\n    .query(({ input }) => {\n      return { greeting: `Hello ${input.name}!` };\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: tRPC Router Defining GET Endpoint with Path and Query Parameters in TypeScript\nDESCRIPTION: Defines a tRPC GET procedure using OpenAPI metadata with a path parameter 'name' embedded in the URL path and a query parameter 'greeting'. The input schema expects these parameters and the query returns a greeting message combining both inputs.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Router\nexport const appRouter = t.router({\n  sayHello: t.procedure\n    .meta({ openapi: { method: 'GET', path: '/say-hello/{name}' /* ðŸ‘ˆ */ } })\n    .input(z.object({ name: z.string() /* ðŸ‘ˆ */, greeting: z.string() }))\n    .output(z.object({ greeting: z.string() }))\n    .query(({ input }) => {\n      return { greeting: `${input.greeting} ${input.name}!` };\n    });\n});\n\n// Client\nconst res = await fetch('http://localhost:3000/say-hello/Lily?greeting=Hello' /* ðŸ‘ˆ */, {\n  method: 'GET',\n});\nconst body = await res.json(); /* { greeting: 'Hello Lily!' } */\n```\n\n----------------------------------------\n\nTITLE: tRPC Router Defining POST Endpoint with Path Parameter and Request Body in TypeScript\nDESCRIPTION: Defines a tRPC mutation procedure with OpenAPI metadata specifying POST method and a path parameter 'name'. The input includes the path parameter and an additional 'greeting' field from the JSON body. The mutation returns a composite greeting response. The client example shows how to fetch this endpoint with appropriate headers and JSON body.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Router\nexport const appRouter = t.router({\n  sayHello: t.procedure\n    .meta({ openapi: { method: 'POST', path: '/say-hello/{name}' /* ðŸ‘ˆ */ } })\n    .input(z.object({ name: z.string() /* ðŸ‘ˆ */, greeting: z.string() }))\n    .output(z.object({ greeting: z.string() }))\n    .mutation(({ input }) => {\n      return { greeting: `${input.greeting} ${input.name}!` };\n    });\n});\n\n// Client\nconst res = await fetch('http://localhost:3000/say-hello/Lily' /* ðŸ‘ˆ */, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ greeting: 'Hello' }),\n});\nconst body = await res.json(); /* { greeting: 'Hello Lily!' } */\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorized Endpoint and Context in tRPC with OpenAPI Metadata in TypeScript\nDESCRIPTION: Demonstrates how to implement authentication and authorization for tRPC endpoints by adding 'protect: true' in OpenAPI metadata. Defines a user context that extracts user details from the Authorization header in the request. The procedure will throw an 'UNAUTHORIZED' error if authentication fails, otherwise returns a greeting for the authenticated user.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TRPCError, initTRPC } from '@trpc/server';\nimport { OpenApiMeta } from 'trpc-to-openapi';\n\ntype User = { id: string; name: string };\n\nconst users: User[] = [\n  {\n    id: 'usr_123',\n    name: 'Lily',\n  },\n];\n\nexport type Context = { user: User | null };\n\nexport const createContext = async ({ req, res }): Promise<Context> => {\n  let user: User | null = null;\n  if (req.headers.authorization) {\n    const userId = req.headers.authorization.split(' ')[1];\n    user = users.find((_user) => _user.id === userId);\n  }\n  return { user };\n};\n\nconst t = initTRPC.context<Context>().meta<OpenApiMeta>().create();\n\nexport const appRouter = t.router({\n  sayHello: t.procedure\n    .meta({ openapi: { method: 'GET', path: '/say-hello', protect: true /* ðŸ‘ˆ */ } })\n    .input(z.void()) // no input expected\n    .output(z.object({ greeting: z.string() }))\n    .query(({ input, ctx }) => {\n      if (!ctx.user) {\n        throw new TRPCError({ message: 'User not found', code: 'UNAUTHORIZED' });\n      }\n      return { greeting: `Hello ${ctx.user.name}!` };\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Document from tRPC Router in TypeScript\nDESCRIPTION: Illustrates how to generate an OpenAPI document from the existing tRPC router 'appRouter' using the 'generateOpenApiDocument' function from 'trpc-to-openapi'. The function accepts metadata such as the API title, version, and base URL. This document can then be consumed by tools that understand OpenAPI specs.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateOpenApiDocument } from 'trpc-to-openapi';\n\nimport { appRouter } from '../appRouter';\n\n/* ðŸ‘‡ */\nexport const openApiDocument = generateOpenApiDocument(appRouter, {\n  title: 'tRPC OpenAPI',\n  version: '1.0.0',\n  baseUrl: 'http://localhost:3000',\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenAPI Endpoint with Query Parameters in TypeScript\nDESCRIPTION: Shows a client-side example fetching the 'say-hello' OpenAPI endpoint via HTTP GET request with query parameters. The response is parsed as JSON and demonstrates successful invocation of the RESTful tRPC endpoint.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\nconst res = await fetch('http://localhost:3000/say-hello?name=Lily', { method: 'GET' });\nconst body = await res.json(); /* { greeting: 'Hello Lily!' } */\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server with OpenAPI Handler using Node:HTTP in TypeScript\nDESCRIPTION: Sets up a basic HTTP server using Node's built-in 'http' module and attaches an OpenAPI HTTP handler generated by 'createOpenApiHttpHandler' from 'trpc-to-openapi'. The handler serves API requests defined by 'appRouter'. The server listens on port 3000.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { createOpenApiHttpHandler } from 'trpc-to-openapi';\n\nimport { appRouter } from '../appRouter';\n\nconst server = http.createServer(createOpenApiHttpHandler({ router: appRouter })); /* ðŸ‘ˆ */\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Middleware for tRPC OpenAPI Endpoint in TypeScript\nDESCRIPTION: Illustrates how to integrate tRPC routers with an Express server by attaching two middlewares: one for native tRPC endpoints and another for the OpenAPI REST endpoints. This example configures the application to serve endpoints under '/api/trpc' and '/api' paths respectively.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createExpressMiddleware } from '@trpc/server/adapters/express';\nimport express from 'express';\nimport { createOpenApiExpressMiddleware } from 'trpc-to-openapi';\n\nimport { appRouter } from '../appRouter';\n\nconst app = express();\n\napp.use('/api/trpc', createExpressMiddleware({ router: appRouter }));\napp.use('/api', createOpenApiExpressMiddleware({ router: appRouter })); /* ðŸ‘ˆ */\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Initializing tRPC Instance with OpenApiMeta in TypeScript\nDESCRIPTION: Demonstrates how to create a tRPC instance enhanced with OpenApiMeta metadata to enable OpenAPI support on procedures. It uses the '@trpc/server' package's initTRPC function with meta typing.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initTRPC } from '@trpc/server';\nimport { OpenApiMeta } from 'trpc-to-openapi';\n\nconst t = initTRPC.meta<OpenApiMeta>().create(); /* ðŸ‘ˆ */\n```\n\n----------------------------------------\n\nTITLE: Next.js API Route with trpc-to-openapi (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Next.js API route using the `createOpenApiNextHandler` from the `trpc-to-openapi` library. It imports the `appRouter` from the server and sets it up as the handler for the API route. The handler takes the router as its configuration.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/[...trpc].ts\nimport { createOpenApiNextHandler } from 'trpc-to-openapi';\n\nimport { appRouter } from '../../server/appRouter';\n\nexport default createOpenApiNextHandler({ router: appRouter });\n```\n\n----------------------------------------\n\nTITLE: Fastify Integration with trpc-to-openapi (TypeScript)\nDESCRIPTION: This snippet illustrates how to integrate `trpc-to-openapi` with Fastify, a fast and low overhead web framework for Node.js. It registers both `fastifyTRPCPlugin` and `fastifyTRPCOpenApiPlugin` with the Fastify instance, using the application's tRPC router. This makes your tRPC API available via Fastify, and also exposes the OpenAPI definition using trpc-to-openapi.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fastifyTRPCPlugin } from '@trpc/server/adapters/fastify';\nimport Fastify from 'fastify';\nimport { fastifyTRPCOpenApiPlugin } from 'trpc-to-openapi';\n\nimport { appRouter } from './router';\n\nconst fastify = Fastify();\n\nasync function main() {\n  await fastify.register(fastifyTRPCPlugin, { router: appRouter });\n  await fastify.register(fastifyTRPCOpenApiPlugin, { router: appRouter }); /* ðŸ‘ˆ */\n\n  await fastify.listen({ port: 3000 });\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router OpenAPI Fetch Handler Setup in TypeScript\nDESCRIPTION: Demonstrates using the 'createOpenApiFetchHandler' from 'trpc-to-openapi' to handle HTTP methods dynamically in a Next.js app router environment. It imports the tRPC router and context creation functions to enable OpenAPI compliant HTTP request handling within Next.js server route handlers.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/[...trpc]/route.ts\nimport { appRouter } from '~/server/api/root';\nimport { createContext } from '~/server/api/trpc';\nimport { type NextRequest } from 'next/server';\nimport { createOpenApiFetchHandler } from 'trpc-to-openapi';\n\nexport const dynamic = 'force-dynamic';\n\nconst handler = (req: NextRequest) => {\n  // Handle incoming OpenAPI requests\n  return createOpenApiFetchHandler({\n    endpoint: '/',\n    router: appRouter,\n    createContext: () => createContext(req),\n    req,\n  });\n};\n\nexport {\n  handler as GET,\n  handler as POST,\n  handler as PUT,\n  handler as PATCH,\n  handler as DELETE,\n  handler as OPTIONS,\n  handler as HEAD,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies, Building, and Running Next.js (Bash)\nDESCRIPTION: This snippet details the commands necessary to install project dependencies using npm, build the project, and run the Next.js development server within the `with-nextjs` workspace. Before executing these commands, ensure your current working directory is the project's root. The `npm install` command installs all project dependencies. The `npm run build` command builds the project, and the `npm run dev -w with-nextjs` starts the Next.js development server within the specified workspace.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-nextjs-appdir/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run dev -w with-nextjs\n```\n\n----------------------------------------\n\nTITLE: Commands for Installing, Building, and Running the trpc-to-openapi Project with Next.js\nDESCRIPTION: A set of terminal commands to initialize the project, compile source code, and start the development server in a workspace with Next.js support. Dependencies are managed via npm, and the commands assume the current working directory is at the project root.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-nextjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run dev -w with-nextjs\n```\n\n----------------------------------------\n\nTITLE: Install, Build, and Run with-express\nDESCRIPTION: This snippet installs dependencies, builds the entire project, and then starts the development server for the `with-express` package using `npm`.  It assumes the working directory is the root of the `trpc-to-openapi` project. This allows for rapid development and testing of changes within the `with-express` environment.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-express/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run dev -w with-express\n```\n\n----------------------------------------\n\nTITLE: Installing, Building, and Running the `with-fastify` Example (Bash)\nDESCRIPTION: This sequence of shell commands first installs all necessary project dependencies using npm, then builds the `trpc-to-openapi` library, and finally starts the development server specifically for the `with-fastify` workspace example. These commands should be executed from the root directory of the `/trpc-to-openapi` project.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-fastify/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run dev -w with-fastify\n```\n\n----------------------------------------\n\nTITLE: Running the Nuxt.js Example Project (Shell)\nDESCRIPTION: Installs dependencies for the entire `trpc-to-openapi` monorepo using `npm install`, builds the core library with `npm run build`, and then starts the Nuxt.js example (`with-nuxtjs`) in development mode using `npm run dev -w with-nuxtjs`. Assumes the current working directory is the project root (`/trpc-to-openapi`).\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-nuxtjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnpm run dev -w with-nuxtjs\n```\n\n----------------------------------------\n\nTITLE: Installing tRPC and trpc-to-openapi Dependencies via NPM - Bash\nDESCRIPTION: This Bash snippet demonstrates the installation of two primary dependencies: @trpc/server (with the next tag) and trpc-to-openapi (forced to major version zero) using npm. These libraries are prerequisites for enabling a tRPC v10 router with OpenAPI interop support. The commands are intended to be run in a project directory prior to further configuration or coding.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/examples/with-interop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @trpc/server@next\nnpm install trpc-to-openapi@0 --force\n```\n\n----------------------------------------\n\nTITLE: Installing trpc-to-openapi Package with Bash\nDESCRIPTION: Shows the commands to install the 'trpc-to-openapi' package using npm or yarn package managers. This is the prerequisite installation step to enable OpenAPI support for tRPC procedures.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install trpc-to-openapi\n# yarn\nyarn add trpc-to-openapi\n```\n\n----------------------------------------\n\nTITLE: Client Fetch Call with Authorization Header for Protected tRPC Endpoint in TypeScript\nDESCRIPTION: Shows how to call a protected GET endpoint with an Authorization Bearer token header to authenticate a user. The response returns a greeting for the authorized user.\nSOURCE: https://github.com/mcampa/trpc-to-openapi/blob/master/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await fetch('http://localhost:3000/say-hello', {\n  method: 'GET',\n  headers: { Authorization: 'Bearer usr_123' } /* ðŸ‘ˆ */,\n});\nconst body = await res.json(); /* { greeting: 'Hello Lily!' } */\n```"
  }
]