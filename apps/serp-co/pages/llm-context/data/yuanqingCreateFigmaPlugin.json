[
  {
    "owner": "yuanqing",
    "repo": "create-figma-plugin",
    "content": "TITLE: Configuring a Figma Plugin in package.json\nDESCRIPTION: JSON configuration for a Figma plugin in package.json, specifying the editor type, plugin name, main entry point, and UI implementation file.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"editorType\": [\n      \"figma\"\n    ],\n    // ...\n    \"name\": \"Rectangles\",\n    \"main\": \"src/main.ts\",\n    \"ui\": \"src/ui.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Figma Plugin with Main Entry Point\nDESCRIPTION: A simple configuration example showing how to specify a plugin's ID, name, and main entry point file in the package.json file.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"806532458729477508\",\n    \"name\": \"Draw Mask Under Selection\",\n    \"main\": \"src/main.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Scripts Configuration in package.json\nDESCRIPTION: NPM script configuration for building and watching a Figma plugin/widget using the build-figma-plugin CLI with TypeScript support and minification.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"build-figma-plugin --typecheck --minify\",\n    \"watch\": \"build-figma-plugin --typecheck --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a New Figma Plugin with NPX\nDESCRIPTION: Command to initialize a new Figma plugin project using the create-figma-plugin tool, which will prompt the user to select from available templates.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npx --yes create-figma-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Commands in Figma Plugin Menu\nDESCRIPTION: JSON configuration for specifying multiple commands in a Figma plugin's sub-menu, including regular and parameter commands with separators.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"837846252158418235\",\n    \"name\": \"Flatten Selection to Bitmap\",\n    \"menu\": [\n        {\n          \"name\": \"Flatten Selection to Bitmap\",\n          \"main\": \"src/flatten-selection-to-bitmap/main.ts\",\n          \"ui\": \"src/flatten-selection-to-bitmap/ui.ts\"\n        },\n        \"-\",\n        {\n          \"name\": \"Settings\",\n          \"main\": \"src/settings/main.ts\",\n          \"parameters\": [\n            {\n              \"key\": \"resolution\",\n              \"description\": \"Enter a bitmap resolution\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma Plugin with UI Implementation\nDESCRIPTION: Configuration example showing how to specify both the main entry point and UI implementation for a Figma plugin.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"767379335945775056\",\n    \"name\": \"Draw Slice Over Selection\",\n    \"main\": \"src/main.ts\",\n    \"ui\": \"src/ui.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma Plugin with Multiple Commands in Sub-menu\nDESCRIPTION: Configuration example showing how to specify multiple commands in a plugin's sub-menu, including a separator and a command with parameters.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"837846252158418235\",\n    \"name\": \"Flatten Selection to Bitmap\",\n    \"menu\": [\n      {\n        \"name\": \"Flatten Selection to Bitmap\",\n        \"main\": \"src/flatten-selection-to-bitmap/main.ts\",\n        \"ui\": \"src/flatten-selection-to-bitmap/ui.ts\"\n      },\n      \"-\",\n      {\n        \"name\": \"Settings\",\n        \"main\": \"src/settings/main.ts\",\n        \"parameters\": [\n          {\n            \"key\": \"resolution\",\n            \"description\": \"Enter a bitmap resolution\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a FigJam Widget in package.json\nDESCRIPTION: JSON configuration specific to a FigJam widget in package.json, setting the editor type to figjam, enabling the containsWidget flag, and specifying the entry points.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"editorType\": [\n      \"figjam\"\n    ],\n    \"containsWidget\": true,\n    // ...\n    \"name\": \"Notepad\",\n    \"main\": \"src/main.tsx\",\n    \"ui\": \"src/ui.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma Plugin with Relaunch Buttons\nDESCRIPTION: Configuration example showing how to specify relaunch button commands for a Figma plugin, along with menu commands.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"786286754606650597\",\n    \"name\": \"Organize Layers\",\n    \"menu\": [\n      {\n        \"name\": \"Organize Layers\",\n        \"main\": \"src/organize-layers/main.ts\",\n        \"ui\": \"src/organize-layers/ui.tsx\"\n      },\n      \"-\",\n      {\n        \"name\": \"Reset Plugin\",\n        \"main\": \"src/reset-plugin/main.ts\"\n      }\n    ],\n    \"relaunchButtons\": {\n      \"organizeLayers\": {\n        \"name\": \"Organize Layers\",\n        \"main\": \"src/organize-layers/main.ts\",\n        \"ui\": \"src/organize-layers/ui.tsx\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in package.json\nDESCRIPTION: Configuration settings in package.json for the Figma plugin\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"name\": \"Hello World\",\n    \"main\": \"src/main.ts\",\n    \"ui\": \"src/ui.tsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for Create Figma Plugin JSON Schema\nDESCRIPTION: This JSON configuration enables autocomplete and inline validation for the plugin configuration in package.json using Create Figma Plugin's JSON schema. It should be placed in a .vscode/settings.json file in your project.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \"package.json\"\n      ],\n      \"url\": \"https://yuanqing.github.io/create-figma-plugin/figma-plugin.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Figma Plugin with NPM\nDESCRIPTION: Command to build a Figma plugin/widget using the configured NPM script, which generates the manifest.json file and JavaScript bundles.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Node Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing node utility functions that help manipulate and traverse Figma nodes, manage selection, handle positioning, and perform various node-related operations.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  areSiblingNodes,\n  collapseLayer,\n  computeBoundingBox,\n  computeMaximumBounds,\n  computeSiblingNodes,\n  deduplicateNodes,\n  getAbsolutePosition,\n  getDocumentComponents,\n  getNodeIndexPath,\n  getParentNode,\n  getSceneNodeById,\n  getSelectedNodesOrAllNodes,\n  insertAfterNode,\n  insertBeforeNode,\n  isLocked,\n  isVisible,\n  isWithinInstanceNode,\n  loadFontsAsync,\n  setAbsolutePosition,\n  setRelaunchButton,\n  sortNodesByCanonicalOrder,\n  sortNodesByName,\n  traverseNode,\n  traverseNodeAsync,\n  unsetRelaunchButton,\n  updateNodesSortOrder\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Data Communication Between Main and UI Contexts in TypeScript\nDESCRIPTION: Demonstrates how to pass data between a Figma plugin's main and UI contexts using event handlers and emitters from @create-figma-plugin/utilities.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  once,\n  // ...\n} from '@create-figma-plugin/utilities'\n\nexport default function () {\n  function handleSubmit (data) {\n    console.log(data) //=> { greeting: 'Hello, World!' }\n  }\n  once('SUBMIT', handleSubmit)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, Button } from '@create-figma-plugin/ui'\nimport {\n  emit,\n  // ...\n} from '@create-figma-plugin/utilities'\nimport { h } from 'preact'\n\nfunction Plugin () {\n  // ...\n  function handleClick () {\n    const data = { greeting: 'Hello, World!' }\n    emit('SUBMIT', data)\n  }\n  return (\n    // ...\n    <Button onClick={handleClick}>Submit</Button>\n    // ...\n  )\n}\n\nexport default render(Plugin)\n```\n\n----------------------------------------\n\nTITLE: Implementing Relaunch Buttons in Figma Plugin\nDESCRIPTION: Configuration and implementation of relaunch buttons in a Figma plugin, including JSON configuration and TypeScript implementation.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figma-plugin\": {\n    \"id\": \"786286754606650597\",\n    \"name\": \"Organize Layers\",\n    \"menu\": [\n      {\n        \"name\": \"Organize Layers\",\n        \"main\": \"src/organize-layers/main.ts\",\n        \"ui\": \"src/organize-layers/ui.tsx\"\n      },\n      \"-\",\n      {\n        \"name\": \"Reset Plugin\",\n        \"main\": \"src/reset-plugin/main.ts\"\n      }\n    ],\n    \"relaunchButtons\": {\n      \"organizeLayers\": {\n        \"name\": \"Organize Layers\",\n        \"main\": \"src/organize-layers/main.ts\",\n        \"ui\": \"src/organize-layers/ui.tsx\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  setRelaunchButton,\n  // ...\n} from '@create-figma-plugin/utilities'\n\nexport default async function () {\n  setRelaunchButton(figma.currentPage, 'organizeLayers')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Figma Plugin Main Entry Point\nDESCRIPTION: Main entry point file showing how to initialize and show the plugin UI with data\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/main.ts\n\nimport { showUI } from '@create-figma-plugin/utilities'\n\nexport default function () {\n  const options = { width: 240, height: 120 }\n  const data = { greeting: 'Hello, World!' }\n  showUI(options, data)\n}\n```\n\n----------------------------------------\n\nTITLE: Preact UI Component Implementation\nDESCRIPTION: Implementation of the plugin UI using Preact components from @create-figma-plugin/ui\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/ui.tsx\n\nimport { render, Container, Text, VerticalSpace } from '@create-figma-plugin/ui'\nimport { h } from 'preact'\n\nfunction Plugin (props: { greeting: string }) {\n  return (\n    <Container space='medium'>\n      <VerticalSpace space='medium' />\n      <Text>{props.greeting}</Text>\n      <VerticalSpace space='medium' />\n    </Container>\n  )\n}\n\nexport default render(Plugin)\n```\n\n----------------------------------------\n\nTITLE: Importing Image Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing image utility functions that help with creating and manipulating canvas elements, image elements, and image paints for Figma plugins.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createCanvasElementFromBlobAsync,\n  createCanvasElementFromBytesAsync,\n  createCanvasElementFromImageElement,\n  createImageElementFromBlobAsync,\n  createImageElementFromBytesAsync,\n  createImagePaint,\n  readBytesFromCanvasElementAsync\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Importing Settings Utilities in TypeScript\nDESCRIPTION: Imports functions for loading and saving plugin/widget settings that are stored locally on the user's computer.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  loadSettingsAsync,\n  saveSettingsAsync\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Importing Function Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing the ensureMinimumTime utility function, which creates an async function that will run for at least a minimum specified time.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ensureMinimumTime } from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Importing Color Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing color utility functions from the @create-figma-plugin/utilities library. These functions help with converting between different color formats and validating hex colors.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  convertHexColorToRgbColor,\n  convertNamedColorToHexColor,\n  convertRgbColorToHexColor,\n  isValidHexColor\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Using onValueChange Prop in v1 Components\nDESCRIPTION: Demonstrates how to use the new onValueChange prop available in v1 components as an alternative to the onChange prop, with a Checkbox component example.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst [value, setValue] = useState(false)\nfunction handleChange(newValue: boolean, name: undefined | string) {\n  console.log(newValue) //=> either `true` or `false`\n  console.log(name)     //=> 'foo'\n  setValue(newValue)\n}\n// ...\n<Checkbox name=\"foo\" onValueChange={handleValueChange} value={value}>\n  Text\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Importing Event Handling Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing event handling utilities from @create-figma-plugin/utilities. These functions facilitate communication between the main plugin context and the UI context.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  emit,\n  on,\n  once\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Importing Object Manipulation Functions in TypeScript\nDESCRIPTION: This code snippet demonstrates the import of various utility functions for object manipulation, including cloning, comparison, and array operations for Figma plugin development.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  cloneObject,\n  compareObjects,\n  compareStringArrays,\n  deduplicateArray,\n  extractAttributes\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Importing UI Utilities in TypeScript\nDESCRIPTION: Imports the showUI function used to render the plugin/widget UI in a modal within the Figma interface.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showUI } from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable UI Window in Figma Plugin (TSX)\nDESCRIPTION: This code snippet demonstrates how to use the useWindowResize hook from @create-figma-plugin/ui to make the plugin UI window resizable. It sets up an event listener for window resize events and emits a RESIZE_WINDOW event with the new window size.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/ui.tsx\n\nimport { render, useWindowResize } from '@create-figma-plugin/ui'\nimport { emit } from '@create-figma-plugin/utilities'\nimport { h } from 'preact'\n\nfunction Plugin () {\n  // ...\n  function onWindowResize(windowSize: { width: number; height: number }) {\n    emit('RESIZE_WINDOW', windowSize)\n  }\n  useWindowResize(onWindowResize, {\n    minWidth: 120,\n    minHeight: 120,\n    maxWidth: 320,\n    maxHeight: 320\n  })\n  // ...\n}\n\nexport default render(Plugin)\n```\n\n----------------------------------------\n\nTITLE: Handling Window Resize in Figma Plugin Main Context (TypeScript)\nDESCRIPTION: This snippet shows how to handle the RESIZE_WINDOW event in the main context of a Figma plugin. It registers an event listener that calls figma.ui.resize with the new window dimensions when the event is received.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// src/main.ts\n\nimport { on, showUI } from '@create-figma-plugin/utilities'\n\nexport default function () {\n  // ...\n  on('RESIZE_WINDOW', function (windowSize: { width: number; height: number }) {\n    const { width, height } = windowSize\n    figma.ui.resize(width, height)\n  })\n  // ...\n  showUI({\n    width: 240,\n    height: 240\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filterable Lists for Plugins and Widgets in JavaScript\nDESCRIPTION: JavaScript function that creates interactive filtering functionality for lists of plugins and widgets. It allows users to toggle between viewing all items or only open-source ones by adding click event listeners to filter buttons and controlling visibility through attributes.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/reference-plugins-and-widgets.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ACTIVE_CLASS_NAME = 'plugin-filter--active'\nconst DATA_ATTRIBUTE_NAME = 'data-open-source'\nconst HIDDEN_ATTRIBUTE = 'aria-hidden'\nfunction createFilterableList (parentElement) {\n  const filterAllButtonElement = parentElement.querySelector('.plugin-filter--all')\n  const filterOpenSourceButtonElement = parentElement.querySelector('.plugin-filter--open-source')\n  const pluginsParentElement = parentElement.children[0]\n  const pluginElements = [].slice.call(parentElement.querySelector('ul').children)\n  filterAllButtonElement.addEventListener('click', function () {\n    filterAllButtonElement.classList.add(ACTIVE_CLASS_NAME)\n    filterOpenSourceButtonElement.classList.remove(ACTIVE_CLASS_NAME)\n    for (const plugin of pluginElements) {\n      plugin.removeAttribute(HIDDEN_ATTRIBUTE)\n    }\n  })\n  filterOpenSourceButtonElement.addEventListener('click', function () {\n    filterAllButtonElement.classList.remove(ACTIVE_CLASS_NAME)\n    filterOpenSourceButtonElement.classList.add(ACTIVE_CLASS_NAME)\n    for (const plugin of pluginElements) {\n      if (plugin.getAttribute(DATA_ATTRIBUTE_NAME) === '1') {\n        plugin.removeAttribute(HIDDEN_ATTRIBUTE)\n      } else {\n        plugin.setAttribute(HIDDEN_ATTRIBUTE, 'true')\n      }\n    }\n  })\n}\ncreateFilterableList(document.querySelector('.plugins'))\ncreateFilterableList(document.querySelector('.widgets'))\n```\n\n----------------------------------------\n\nTITLE: Using Image Assets in Figma Plugin UI\nDESCRIPTION: Implementation of image asset handling in a Figma plugin UI, including TypeScript type definitions for image imports.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from '@create-figma-plugin/ui'\nimport { h } from 'preact'\n\nimport image from './image.png'\n\nfunction Plugin () {\n  // ...\n  return (\n    // ...\n    <img src={image} />\n    // ...\n  )\n}\n\nexport default render(Plugin)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.gif' {\n  const content: string\n  export default content\n}\ndeclare module '*.jpg' {\n  const content: string\n  export default content\n}\ndeclare module '*.png' {\n  const content: string\n  export default content\n}\ndeclare module '*.svg' {\n  const content: string\n  export default content\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Command to install the required UI dependencies for Figma plugin development\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @create-figma-plugin/ui preact\n```\n\n----------------------------------------\n\nTITLE: Watching for Code Changes in Figma Plugin Development\nDESCRIPTION: Command to start a watch process that automatically rebuilds the plugin when code changes are detected.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-rectangles/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Module Implementation\nDESCRIPTION: Example of using CSS Modules with proper variable usage\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles.css */\n\n.container {\n  background-color: var(--figma-color-bg-secondary);\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration\nDESCRIPTION: Tailwind CSS configuration file setup for Figma plugin\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./src/**/*.{ts,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n  darkMode: ['class', '.figma-dark']\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Monetization Utilities for Figma Plugin Development\nDESCRIPTION: Example of importing monetization utilities that help track plugin usage counts both per document and globally across all documents.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getDocumentUseCount,\n  getTotalUseCountAsync,\n  incrementDocumentUseCount,\n  incrementTotalUseCountAsync,\n  resetDocumentUseCount,\n  resetTotalUseCountAsync\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: VSCode JSON Schema Configuration for package.json\nDESCRIPTION: JSON configuration for Visual Studio Code that enables autocomplete and inline validation of plugin configuration in package.json using the Create Figma Plugin JSON schema.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \"package.json\"\n      ],\n      \"url\": \"https://yuanqing.github.io/create-figma-plugin/figma-plugin.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Numeric Evaluation Functions in TypeScript\nDESCRIPTION: This snippet shows how to import functions for evaluating numeric expressions and validating numeric inputs in a Figma plugin.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  evaluateNumericExpression,\n  isValidNumericInput\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Plugin Properties in package.json\nDESCRIPTION: Example showing how the package.json JSON schema was refined to better support Figma plugin configuration options like editorType, menu, parameters, capabilities, permissions, and networkAccess.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editorType\": \"slides\",\n  \"menu\": [\n    \"-\"\n  ],\n  \"capabilities\": [],\n  \"permissions\": [],\n  \"networkAccess\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Checkbox Component from Pre-v1 to v1\nDESCRIPTION: Demonstrates how to migrate code using the Checkbox component from pre-v1 to v1 syntax. Shows the change in the onChange handler signature from accepting state directly to handling events.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Before `v1`\n\nconst [state, setState] = useState({ foo: false })\n// ...\n<Checkbox name=\"foo\" onChange={setState} value={state.foo}>\n  Text\n</Checkbox>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// `v1`\n\nconst [value, setValue] = useState(false)\nfunction handleChange(event: JSX.TargetedEvent<HTMLInputElement>) {\n  const newValue = event.currentTarget.checked\n  console.log(newValue) //=> either `true` or `false`\n  setValue(newValue)\n}\n// ...\n<Checkbox onChange={handleChange} value={value}>\n  Text\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Installing @create-figma-plugin/utilities with npm\nDESCRIPTION: Command to install the @create-figma-plugin/utilities package via npm. This library provides utility functions for common Figma/FigJam plugin and widget operations.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @create-figma-plugin/utilities\n```\n\n----------------------------------------\n\nTITLE: Component Type Definition for Dropdown in UI Library\nDESCRIPTION: Example of a breaking change in the Dropdown component API, showing the removal of name prop and Value type parameter, along with changes to option separator definition from object to string literal.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Old implementation\ninterface DropdownProps<Value extends string> {\n  name: string;\n  value: Value;\n  onValueChange: (newValue: Value, name: string) => void;\n}\ntype DropdownOptionSeparator = { separator: true };\n\n// New implementation\ninterface DropdownProps {\n  value: null | string;\n  onValueChange: (newValue: null | string) => void;\n}\ntype DropdownOptionSeparator = \"-\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signatures for TextboxNumeric Component\nDESCRIPTION: Function signatures for the new onInput, onValueInput, and onNumericValueInput props in the TextboxNumeric component. Shows parameter types and return values for event handling functions.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nonInput: (event: JSX.TargetedEvent<HTMLInputElement>) => void\nonValueInput: (newValue: string, name?: string) => void\nonNumericValueInput: (newValue: null | number, name?: string) => void\n```\n\n----------------------------------------\n\nTITLE: Importing String Formatting Utilities in TypeScript\nDESCRIPTION: Imports functions for formatting messages with prefixes and handling pluralization of strings.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/utilities.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  formatErrorMessage,\n  formatSuccessMessage,\n  formatWarningMessage,\n  pluralize\n} from '@create-figma-plugin/utilities'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Type Parameters for Utility Functions\nDESCRIPTION: Type parameter definition for node sorting and manipulation utilities that enables working with specific SceneNode types rather than generic SceneNodes.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<Node extends SceneNode>\n```\n\n----------------------------------------\n\nTITLE: Updating Build and Watch Scripts in package.json\nDESCRIPTION: Update instructions for package.json scripts to enable typecheck and minify flags with the build-figma-plugin command in version 1.0.0.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    ...\n    \"scripts\": {\n-     \"build\": \"build-figma-plugin\",\n+     \"build\": \"build-figma-plugin --typecheck --minify\",\n-     \"watch\": \"build-figma-plugin --watch\",\n+     \"watch\": \"build-figma-plugin --typecheck --watch\",\n      ...\n    },\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Figma Plugin with npm\nDESCRIPTION: Command to build the Figma plugin, generating a manifest.json file and JavaScript bundles in the build/ directory.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-resizable/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Building Figma Plugin with npm\nDESCRIPTION: Command to build the Figma plugin, generating a manifest.json file and JavaScript bundles in the build/ directory.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/react-editor/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Updated tsconfig.json Configuration for esbuild\nDESCRIPTION: Updated TypeScript configuration for working with the esbuild-powered build system in version 1.0.0, including important compiler options like isolatedModules and jsx settings.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"lib\": [\"DOM\", \"ES2020\"],\n    \"module\": \"ES2020\",\n    \"moduleResolution\": \"Node\",\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Figma Widget with npm\nDESCRIPTION: Command to build the Figma widget, which generates a manifest.json file and JavaScript bundles in the build directory.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/widget/notepad/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Customizing esbuild Configuration for Figma Plugin (JavaScript)\nDESCRIPTION: This code demonstrates how to customize the esbuild configuration for a Figma plugin's main bundle. It exports a function that receives the original build options and returns modified options.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// build-figma-plugin.main.js\n\nmodule.exports = function (buildOptions) {\n  // ...\n  return {\n    ...buildOptions,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic React Import Swapping in Figma Plugin Build (JavaScript)\nDESCRIPTION: This snippet shows how to disable the automatic swapping of React imports with Preact/compat in the Figma plugin build process. It filters out the preact-compat plugin from the build options.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// build-figma-plugin.ui.js\n\nmodule.exports = function (buildOptions) {\n  return {\n    ...buildOptions,\n    plugins: buildOptions.plugins.filter(function (plugin) {\n      return plugin.name !== 'preact-compat'\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing manifest.json for Figma Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to modify the manifest.json file for a Figma plugin before it is output by the build process. It exports a function that receives the original manifest object and returns a modified version.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/recipes.md#2025-04-20_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// build-figma-plugin.manifest.js\n\nmodule.exports = function (manifest) {\n  // ...\n  return {\n    ...manifest,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom UI Implementation\nDESCRIPTION: Basic example of implementing custom UI without using @create-figma-plugin/ui\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/ui.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/ui.ts\n\nexport default function (rootNode: HTMLElement, data: { greeting: string }) {\n  rootNode.innerHTML = `<p>${data.greeting}</p>` //=> <p>Hello, World!</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes During Development\nDESCRIPTION: Command to run the watch script that automatically rebuilds the plugin/widget when code changes are detected, facilitating faster development.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/website/docs/quick-start.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Building a Figma Plugin with NPM\nDESCRIPTION: Commands to build the Figma plugin project. The build command generates a manifest.json file and JavaScript bundles in the build directory, while the watch command enables automatic rebuilding on code changes.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-tailwindcss/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Figma Plugin Development\nDESCRIPTION: Command to watch for code changes and automatically rebuild the plugin during development, enabling a more efficient workflow for Figma plugin developers.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-tailwindcss/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Create Figma Plugin Project in Bash\nDESCRIPTION: This snippet shows the commands to clone the Create Figma Plugin repository, switch to the 'next' branch, and install dependencies.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/yuanqing/create-figma-plugin\n$ cd create-figma-plugin\n$ git checkout --track origin/next\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Building a Figma Plugin with npm\nDESCRIPTION: Command to build the Figma plugin project, which generates a manifest.json file and JavaScript bundles in the build directory.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/hello-world/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Figma Plugin Development\nDESCRIPTION: Command to start a watch process that automatically rebuilds the plugin when code changes are detected.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/hello-world/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Building the Figma Plugin with npm\nDESCRIPTION: Command to build the Figma plugin, which generates a manifest.json file and JavaScript bundles in the build directory.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-rectangles/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Watching and Rebuilding Figma Plugin\nDESCRIPTION: Command to watch for code changes and automatically rebuild the Figma plugin, useful for development.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/preact-resizable/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Watching and Rebuilding Figma Plugin\nDESCRIPTION: Command to watch for code changes and automatically rebuild the Figma plugin, useful during development.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/plugin/react-editor/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Watching for Code Changes in Figma Widget Development\nDESCRIPTION: Command to watch for code changes and automatically rebuild the widget, useful during active development.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/packages/create-figma-plugin/templates/widget/notepad/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: CSS Module Import Example\nDESCRIPTION: Example demonstrating fix for CSS module path resolution in Windows environments\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Example for CSS module imports in Windows\nimport styles from './styles.css'\n```\n\n----------------------------------------\n\nTITLE: Building Create Figma Plugin Project in Bash\nDESCRIPTION: This command builds the entire Create Figma Plugin project.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for Local Testing in Bash\nDESCRIPTION: This snippet demonstrates how to create symlinks to the local copy of the project in an existing plugin/widget for testing changes.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -a\ncreate-figma-plugin  my-project\n$ sh create-figma-plugin/scripts/symlink.sh create-figma-plugin my-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings Example\nDESCRIPTION: Example of escaping build configuration file paths containing spaces using exclamation prefix for global CSS imports\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage mentioned in 1.5.0:\n// Adding '!' prefix for global CSS imports \nimport '!/path/to/global.css'\n```\n\n----------------------------------------\n\nTITLE: Building Plugin/Widget for Testing in Bash\nDESCRIPTION: These commands show how to navigate to the plugin/widget directory and build it for testing with the local changes.\nSOURCE: https://github.com/yuanqing/create-figma-plugin/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project\n$ npm run build\n```"
  }
]