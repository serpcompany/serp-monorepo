[
  {
    "owner": "konvajs",
    "repo": "site",
    "content": "TITLE: Installing react-konva and konva packages\nDESCRIPTION: Command to install react-konva and konva packages using npm. These are required dependencies for using react-konva in a project.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-konva konva --save\n```\n\n----------------------------------------\n\nTITLE: Installing Konva via npm\nDESCRIPTION: This snippet shows how to install Konva using npm, the Node.js package manager. It's a simple command that adds Konva to your project dependencies.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install konva\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Konva Plugin\nDESCRIPTION: Basic setup code to import and use VueKonva plugin in a Vue.js application\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport VueKonva from 'vue-konva';\n\nconst app = createApp(App);\napp.use(VueKonva);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Events with Vanilla Konva.js\nDESCRIPTION: Creates an interactive canvas with a triangle and circle that respond to mouse events using vanilla Konva.js. The code sets up event handlers for mouseover, mouseout, mousedown, and mouseup events, displaying the event type and coordinates in a text element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Binding_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst text = new Konva.Text({\nx: 10,\ny: 10,\nfontFamily: 'Calibri',\nfontSize: 24,\ntext: '',\nfill: 'black',\n});\n\nconst triangle = new Konva.RegularPolygon({\nx: 80,\ny: 120,\nsides: 3,\nradius: 80,\nfill: '#00D2FF',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nconst circle = new Konva.Circle({\nx: 230,\ny: 100,\nradius: 60,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nfunction writeMessage(message) {\ntext.text(message);\n}\n\ntriangle.on('mouseout', () => {\nwriteMessage('Mouseout triangle');\n});\n\ntriangle.on('mousemove', () => {\nconst mousePos = stage.getPointerPosition();\nwriteMessage('x: ' + mousePos.x + ', y: ' + mousePos.y);\n});\n\ncircle.on('mouseover', () => {\nwriteMessage('Mouseover circle');\n});\ncircle.on('mouseout', () => {\nwriteMessage('Mouseout circle');\n});\ncircle.on('mousedown', () => {\nwriteMessage('Mousedown circle');\n});\ncircle.on('mouseup', () => {\nwriteMessage('Mouseup circle');\n});\n\nlayer.add(triangle);\nlayer.add(circle);\nlayer.add(text);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Animation with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a circular animation using Konva in vanilla JavaScript. It sets up a stage, layer, and rectangle, then animates the rectangle in a circular motion using Konva.Animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Create_an_Animation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 50,\nheight: 50,\nfill: 'green',\n});\nlayer.add(rect);\n\nconst anim = new Konva.Animation(function(frame) {\nconst time = frame.time;\nconst timeDiff = frame.timeDiff;\nconst frameRate = frame.frameRate;\n\n// Example: move rectangle in a circle\nconst radius = 50;\nconst x = radius * Math.cos(frame.time * 2 * Math.PI / 2000) + 100;\nconst y = radius * Math.sin(frame.time * 2 * Math.PI / 2000) + 100;\nrect.position({ x, y });\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Draggable Canvas Implementation - Vanilla JavaScript\nDESCRIPTION: Creates a viewport-sized draggable canvas with content that extends beyond visible area. Implements drag-and-drop navigation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n  draggable: true,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\nfunction generateNode() {\n  return new Konva.Circle({\n    x: WIDTH * Math.random(),\n    y: HEIGHT * Math.random(),\n    radius: 50,\n    fill: 'red',\n    stroke: 'black',\n  });\n}\n\nfor (let i = 0; i < NUMBER; i++) {\n  layer.add(generateNode());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Star Spinner with Vanilla Konva.js\nDESCRIPTION: This code creates an interactive star that can be spun with mouse movement using Konva.js. It implements physics for angular velocity and friction, allowing the star to slow down naturally when not being controlled by the user, and tracking the mouse position to update rotation when being controlled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Star_Spinner.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// disable degree mode to use radians\nKonva.angleDeg = false;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst animatedLayer = new Konva.Layer();\n\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  outerRadius: 80,\n  innerRadius: 40,\n  stroke: '#005500',\n  fill: '#b5ff88',\n  strokeWidth: 4,\n  numPoints: 5,\n  lineJoin: 'round',\n  shadowOffsetX: 5,\n  shadowOffsetY: 5,\n  shadowBlur: 10,\n  shadowColor: 'black',\n  shadowOpacity: 0.5,\n  opacity: 0.8,\n});\n\n// custom properties\nstar.lastRotation = 0;\nstar.angularVelocity = 6;\nstar.controlled = false;\n\nstar.on('mousedown touchstart', function () {\n  this.angularVelocity = 0;\n  this.controlled = true;\n});\n\nanimatedLayer.add(star);\n\n// add center point\nconst center = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 3,\n  fill: '#555',\n});\n\nanimatedLayer.add(center);\n\n// add listeners to container\nstage.on('mouseup touchend', function () {\n  star.controlled = false;\n});\n\nstage.on('mousemove touchmove', function () {\n  if (star.controlled) {\n    const mousePos = stage.getPointerPosition();\n    const x = star.x() - mousePos.x;\n    const y = star.y() - mousePos.y;\n    star.rotation(0.5 * Math.PI + Math.atan(y / x));\n\n    if (mousePos.x <= stage.width() / 2) {\n      star.rotate(Math.PI);\n    }\n  }\n});\n\nstage.add(animatedLayer);\n\n// animation\nfunction animate(frame) {\n  // 20% slow down per second\n  const angularFriction = 0.2;\n  const angularVelocityChange =\n    (star.angularVelocity * frame.timeDiff * (1 - angularFriction)) / 1000;\n  star.angularVelocity -= angularVelocityChange;\n\n  if (star.controlled) {\n    star.angularVelocity =\n      ((star.rotation() - star.lastRotation) * 1000) / frame.timeDiff;\n  } else {\n    star.rotate((frame.timeDiff * star.angularVelocity) / 1000);\n  }\n\n  star.lastRotation = star.rotation();\n}\n\nconst anim = new Konva.Animation(animate, animatedLayer);\n\n// wait one second and then spin the star\nsetTimeout(function () {\n  anim.start();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-touch Scale Shape with Vanilla JavaScript and KonvaJS\nDESCRIPTION: Creates a stage with draggable triangle and circle shapes that can be scaled using multi-touch gestures. Implements touch event handling for pinch-to-zoom functionality and shape activation through tapping.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Shape.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nKonva.hitOnDragEnabled = true;\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nlet lastDist = 0;\nlet startScale = 1;\nlet activeShape = null;\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n  draggable: true,\n  x: width / 2,\n  y: height / 2,\n  offset: {\n    x: width / 2,\n    y: height / 2,\n  },\n});\n\n// ... rest of the vanilla implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Gradient Animation with Vanilla KonvaJS\nDESCRIPTION: Creates an interactive circle with gradient animation using vanilla KonvaJS. The animation combines scaling tweens with dynamic gradient color stop updates triggered by click/tap events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Complex_Tweening.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst circle = new Konva.Circle({\nx: width / 2,\ny: height / 2,\nradius: 70,\nfillLinearGradientStartPoint: { x: -50, y: -50 },\nfillLinearGradientEndPoint: { x: 50, y: 50 },\nfillLinearGradientColorStops: [0, 'red', 1, 'yellow'],\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true,\n});\n\nlayer.add(circle);\nstage.add(layer);\n\ncircle.on('click tap', () => {\n// using regular Konva tween\nconst tween = new Konva.Tween({\nnode: circle,\nduration: 1,\nscaleX: 1.5,\nscaleY: 1.5,\neasing: Konva.Easings.EaseInOut,\nonFinish: () => {\n// scale back with another tween\nconst tween2 = new Konva.Tween({\nnode: circle,\nduration: 1,\nscaleX: 1,\nscaleY: 1,\neasing: Konva.Easings.BounceEaseOut,\n});\ntween2.play();\n},\n});\ntween.play();\n\n// manually update gradient\nlet ratio = 0;\nconst anim = new Konva.Animation((frame) => {\nratio += frame.timeDiff / 1000;\nif (ratio > 1) {\nratio = 0;\n}\ncircle.fillLinearGradientColorStops([\n0,\n'red',\nratio,\n'yellow',\n1,\n'blue',\n]);\n}, layer);\nanim.start();\nsetTimeout(() => anim.stop(), 2000);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Konva stage, add text nodes with different easing functions, and animate them using Konva.Tween. It also includes a button to trigger the animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Easings.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst easings = [\n'Linear',\n'EaseIn',\n'EaseOut',\n'EaseInOut',\n'BackEaseIn',\n'BackEaseOut',\n'BackEaseInOut',\n'ElasticEaseIn',\n'ElasticEaseOut',\n'ElasticEaseInOut',\n'BounceEaseIn',\n'BounceEaseOut',\n'BounceEaseInOut',\n'StrongEaseIn',\n'StrongEaseOut',\n'StrongEaseInOut',\n];\n\nconst tweens = [];\n\neasings.forEach((easing, i) => {\nconst text = new Konva.Text({\nx: 50,\ny: 30 + i * 25,\ntext: easing,\nfontSize: 16,\nfontFamily: 'Calibri',\nfill: 'black',\n});\nlayer.add(text);\n\ntweens.push(\nnew Konva.Tween({\nnode: text,\nduration: 2,\nx: width - 200,\neasing: Konva.Easings[easing],\n})\n);\n});\n\nstage.add(layer);\n\n// create button\nconst button = document.createElement('button');\nbutton.textContent = 'Play';\nbutton.style.position = 'absolute';\nbutton.style.top = '0px';\nbutton.style.left = '0px';\nbutton.addEventListener('click', () => {\ntweens.forEach((tween) => {\ntween.reset();\ntween.play();\n});\n});\ndocument.body.appendChild(button);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Events with React in Konva.js\nDESCRIPTION: This snippet shows how to create a Konva.js stage with a triangle that responds to pointer events using React components. It uses hooks to manage state and refs for accessing the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Pointer_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Text } from 'react-konva';\nimport { useState, useRef } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const stageRef = useRef();\n\n  const handlePointerMove = () => {\n    const pos = stageRef.current.getPointerPosition();\n    setMessage(`x: ${pos.x}, y: ${pos.y}`);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight} ref={stageRef}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <RegularPolygon\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          sides={3}\n          radius={80}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onPointermove={handlePointerMove}\n          onPointerout={() => setMessage('')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Rectangles with React-Konva Transformer\nDESCRIPTION: A complete React component implementation showing how to create resizable and draggable rectangles using Konva. The code includes a Rectangle component with transform capabilities, state management for selection, and event handling for drag and resize operations. Implements size limits and maintains aspect ratio during transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Transformer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          flipEnabled={false}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (Math.abs(newBox.width) < 5 || Math.abs(newBox.height) < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst initialRectangles = [\n  {\n    x: 10,\n    y: 10,\n    width: 100,\n    height: 100,\n    fill: 'red',\n    id: 'rect1',\n  },\n  {\n    x: 150,\n    y: 150,\n    width: 100,\n    height: 100,\n    fill: 'green',\n    id: 'rect2',\n  },\n];\n\nconst App = () => {\n  const [rectangles, setRectangles] = React.useState(initialRectangles);\n  const [selectedId, selectShape] = React.useState(null);\n\n  const checkDeselect = (e) => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={checkDeselect}\n      onTouchStart={checkDeselect}\n    >\n      <Layer>\n        {rectangles.map((rect, i) => {\n          return (\n            <Rectangle\n              key={i}\n              shapeProps={rect}\n              isSelected={rect.id === selectedId}\n              onSelect={() => {\n                selectShape(rect.id);\n              }}\n              onChange={(newAttrs) => {\n                const rects = rectangles.slice();\n                rects[i] = newAttrs;\n                setRectangles(rects);\n              }}\n            />\n          );\n        })}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Forcing Transformer Update with Vanilla JavaScript in Konva\nDESCRIPTION: This snippet shows how to manually update a Konva.Transformer when text content changes inside a group. The example creates a group containing text and a rectangle, then demonstrates forcing an update after changing the text content.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/10_Force_Update.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst group = new Konva.Group({\nx: 50,\ny: 50,\ndraggable: true,\n});\nlayer.add(group);\n\nconst text = new Konva.Text({\ntext: 'Some text here',\nfontSize: 24,\n});\ngroup.add(text);\n\nconst rect = new Konva.Rect({\nwidth: text.width(),\nheight: text.height(),\nfill: 'yellow',\n});\ngroup.add(rect);\n\n// add the shape to the layer\nrect.moveToBottom();\n\nconst tr = new Konva.Transformer({\nnodes: [group],\npadding: 5,\n// enable only one anchor\nenabledAnchors: ['middle-left', 'middle-right'],\n});\nlayer.add(tr);\n\nconst button = document.createElement('button');\nbutton.innerHTML = 'Change text';\ndocument.body.appendChild(button);\nbutton.addEventListener('click', () => {\ntext.text('Something else is here');\nrect.width(text.width());\n// we need to update transformer manually\ntr.forceUpdate();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Stars with React-Konva Events\nDESCRIPTION: Creates an interactive canvas with draggable star shapes using React-Konva. The component handles drag events to create visual feedback during interactions, including shadow and scale effects. Uses React useState for state management and implements dragstart/dragend event handlers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Star, Text } from 'react-konva';\n\nfunction generateShapes() {\n  return [...Array(10)].map((_, i) => ({\n    id: i.toString(),\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    rotation: Math.random() * 180,\n    isDragging: false,\n  }));\n}\n\nconst App = () => {\n  const [stars, setStars] = React.useState(generateShapes());\n\n  const handleDragStart = (e) => {\n    const id = e.target.id();\n    setStars(\n      stars.map((star) => {\n        return {\n          ...star,\n          isDragging: star.id === id,\n        };\n      })\n    );\n  };\n\n  const handleDragEnd = (e) => {\n    setStars(\n      stars.map((star) => {\n        return {\n          ...star,\n          isDragging: false,\n        };\n      })\n    );\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text text=\"Try to drag a star\" />\n        {stars.map((star) => (\n          <Star\n            key={star.id}\n            id={star.id}\n            x={star.x}\n            y={star.y}\n            numPoints={5}\n            innerRadius={20}\n            outerRadius={40}\n            fill=\"#89b717\"\n            opacity={0.8}\n            draggable\n            rotation={star.rotation}\n            shadowColor=\"black\"\n            shadowBlur={10}\n            shadowOpacity={0.6}\n            shadowOffsetX={star.isDragging ? 10 : 5}\n            shadowOffsetY={star.isDragging ? 10 : 5}\n            scaleX={star.isDragging ? 1.2 : 1}\n            scaleY={star.isDragging ? 1.2 : 1}\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Easing Animation with React and react-konva\nDESCRIPTION: This snippet shows how to implement a basic linear animation using react-konva in a React application. It creates a circle component and animates its horizontal position on click using Konva.Tween.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Linear_Easing.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const circleRef = useRef();\n\n  const handleClick = () => {\n    const tween = new Konva.Tween({\n      node: circleRef.current,\n      duration: 1,\n      x: window.innerWidth - 100,\n      easing: Konva.Easings.Linear,\n    });\n    tween.play();\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle\n          ref={circleRef}\n          x={100}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onClick={handleClick}\n          onTap={handleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance in Vanilla Konva.js\nDESCRIPTION: This example demonstrates performance optimization techniques in Konva.js including layer separation for background, main content and drag operations, shape caching, disabled listening on non-interactive elements, and optimized dragging by moving shapes between layers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create stage with good performance settings\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\n// Create layers with performance optimizations\nconst backgroundLayer = new Konva.Layer({ listening: false });\nconst mainLayer = new Konva.Layer();\nconst dragLayer = new Konva.Layer();\n\nstage.add(backgroundLayer);\nstage.add(mainLayer);\nstage.add(dragLayer);\n\n// Create a shape with caching\nconst star = new Konva.Star({\n  x: 200,\n  y: 200,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true,\n  perfectDrawEnabled: false, // performance optimization\n});\n\n// Cache the shape for better performance\nstar.cache();\n\n// Optimize dragging performance\nstar.on('dragstart', () => {\n  star.moveTo(dragLayer);\n});\n\nstar.on('dragend', () => {\n  star.moveTo(mainLayer);\n});\n\n// Create background with listening disabled\nconst rect = new Konva.Rect({\n  x: 0,\n  y: 0,\n  width: stage.width(),\n  height: stage.height(),\n  fill: 'lightgray',\n  listening: false,\n});\n\nbackgroundLayer.add(rect);\nmainLayer.add(star);\n```\n\n----------------------------------------\n\nTITLE: Creating Physics-based Ball Animation with KonvaJS\nDESCRIPTION: Implements a physics simulator with gravity, collision detection, and curve interactions using KonvaJS. Features include vector mathematics for collision calculations, bounce physics with energy loss, and interactive ball dragging. The code creates a stage with separate layers for a curved surface and an animated ball that responds to user input and environmental physics.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Physics_Simulator.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\n/*\n * Vector math functions\n */\nfunction dot(a, b) {\n  return a.x * b.x + a.y * b.y;\n}\nfunction magnitude(a) {\n  return Math.sqrt(a.x * a.x + a.y * a.y);\n}\nfunction normalize(a) {\n  var mag = magnitude(a);\n\n  if (mag === 0) {\n    return {\n      x: 0,\n      y: 0,\n    };\n  } else {\n    return {\n      x: a.x / mag,\n      y: a.y / mag,\n    };\n  }\n}\nfunction add(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y,\n  };\n}\nfunction angleBetween(a, b) {\n  return Math.acos(dot(a, b) / (magnitude(a) * magnitude(b)));\n}\nfunction rotate(a, angle) {\n  var ca = Math.cos(angle);\n  var sa = Math.sin(angle);\n  var rx = a.x * ca - a.y * sa;\n  var ry = a.x * sa + a.y * ca;\n  return {\n    x: rx * -1,\n    y: ry * -1,\n  };\n}\nfunction invert(a) {\n  return {\n    x: a.x * -1,\n    y: a.y * -1,\n  };\n}\n/*\n * this cross product function has been simplified by\n * setting x and y to zero because vectors a and b\n * lie in the canvas plane\n */\nfunction cross(a, b) {\n  return {\n    x: 0,\n    y: 0,\n    z: a.x * b.y - b.x * a.y,\n  };\n}\nfunction getNormal(curve, ball) {\n  var curveLayer = curve.getLayer();\n  var context = curveLayer.getContext();\n  var testRadius = 20;\n  // pixels\n  var totalX = 0;\n  var totalY = 0;\n  var x = ball.x();\n  var y = ball.y();\n  /*\n   * check various points around the center point\n   * to determine the normal vector\n   */\n  for (var n = 0; n < 20; n++) {\n    var angle = (n * 2 * Math.PI) / 20;\n    var offsetX = testRadius * Math.cos(angle);\n    var offsetY = testRadius * Math.sin(angle);\n    var testX = x + offsetX;\n    var testY = y + offsetY;\n    if (!context._context.isPointInPath(testX, testY)) {\n      totalX += offsetX;\n      totalY += offsetY;\n    }\n  }\n\n  var normal;\n\n  if (totalX === 0 && totalY === 0) {\n    normal = {\n      x: 0,\n      y: -1,\n    };\n  } else {\n    normal = {\n      x: totalX,\n      y: totalY,\n    };\n  }\n\n  return normalize(normal);\n}\nfunction handleCurveCollision(ball, curve) {\n  var curveLayer = curve.getLayer();\n  var x = ball.x();\n  var y = ball.y();\n\n  var curveDamper = 0.05;\n  // 5% energy loss\n  if (curveLayer.getIntersection({ x: x, y: y })) {\n    var normal = getNormal(curve, ball);\n    if (normal !== null) {\n      var angleToNormal = angleBetween(normal, invert(ball.velocity));\n      var crossProduct = cross(normal, ball.velocity);\n      var polarity = crossProduct.z > 0 ? 1 : -1;\n      var collisonAngle = polarity * angleToNormal * 2;\n      var collisionVector = rotate(ball.velocity, collisonAngle);\n\n      ball.velocity.x = collisionVector.x;\n      ball.velocity.y = collisionVector.y;\n      ball.velocity.x *= 1 - curveDamper;\n      ball.velocity.y *= 1 - curveDamper;\n\n      x += normal.x;\n      if (ball.velocity.y > 0.1) {\n        y += normal.y;\n      } else {\n        y += normal.y / 10;\n      }\n      ball.x(x).y(y);\n    }\n\n    tween.finish();\n  }\n}\nfunction updateBall(frame) {\n  var timeDiff = frame.timeDiff;\n  var stage = ball.getStage();\n  var height = stage.height();\n  var width = stage.width();\n  var x = ball.x();\n  var y = ball.y();\n  var radius = ball.radius();\n\n  tween.reverse();\n\n  // physics variables\n  var gravity = 10;\n  // px / second^2\n  var speedIncrementFromGravityEachFrame = (gravity * timeDiff) / 1000;\n  var collisionDamper = 0.2;\n  // 20% energy loss\n  var floorFriction = 5;\n  // px / second^2\n  var floorFrictionSpeedReduction = (floorFriction * timeDiff) / 1000;\n\n  // if ball is being dragged and dropped\n  if (ball.isDragging()) {\n    var mousePos = stage.getPointerPosition();\n\n    if (mousePos) {\n      var mouseX = mousePos.x;\n      var mouseY = mousePos.y;\n\n      var c = 0.06 * timeDiff;\n      ball.velocity = {\n        x: c * (mouseX - ball.lastMouseX),\n        y: c * (mouseY - ball.lastMouseY),\n      };\n\n      ball.lastMouseX = mouseX;\n      ball.lastMouseY = mouseY;\n    }\n  } else {\n    // gravity\n    ball.velocity.y += speedIncrementFromGravityEachFrame;\n    x += ball.velocity.x;\n    y += ball.velocity.y;\n\n    // ceiling condition\n    if (y < radius) {\n      y = radius;\n      ball.velocity.y *= -1;\n      ball.velocity.y *= 1 - collisionDamper;\n    }\n\n    // floor condition\n    if (y > height - radius) {\n      y = height - radius;\n      ball.velocity.y *= -1;\n      ball.velocity.y *= 1 - collisionDamper;\n    }\n\n    // floor friction\n    if (y == height - radius) {\n      if (ball.velocity.x > 0.1) {\n        ball.velocity.y -= floorFrictionSpeedReduction;\n      } else if (ball.velocity.x < -0.1) {\n        ball.velocity.x += floorFrictionSpeedReduction;\n      } else {\n        ball.velocity.x = 0;\n      }\n    }\n\n    // right wall condition\n    if (x > width - radius) {\n      x = width - radius;\n      ball.velocity.x *= -1;\n      ball.velocity.x *= 1 - collisionDamper;\n    }\n\n    // left wall condition\n    if (x < radius) {\n      x = radius;\n      ball.velocity.x *= -1;\n      ball.velocity.x *= 1 - collisionDamper;\n    }\n\n    ball.position({ x: x, y: y });\n\n    /*\n     * if the ball comes into contact with the\n     * curve, then bounce it in the direction of the\n     * curve's surface normal\n     */\n    var collision = handleCurveCollision(ball, curve);\n  }\n}\n\n// create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n// create separate layers for curve and ball\nconst curveLayer = new Konva.Layer();\nconst ballLayer = new Konva.Layer();\n\n// create curve with original bezier curve\nconst curve = new Konva.Shape({\n  sceneFunc: function (context) {\n    context.beginPath();\n    context.moveTo(40, height);\n    context.bezierCurveTo(\n      width * 0.2,\n      -1 * height * 0.5,\n      width * 0.7,\n      height * 1.3,\n      width,\n      height * 0.5\n    );\n    context.lineTo(width, height);\n    context.lineTo(40, height);\n    context.closePath();\n    context.fillShape(this);\n  },\n  fill: '#8dbdff',\n});\n\ncurveLayer.add(curve);\n\n// create ball with original styling\nconst ball = new Konva.Circle({\n  x: 190,\n  y: 20,\n  radius: 20,\n  fill: 'blue',\n  draggable: true,\n  opacity: 0.8,\n});\n\nball.velocity = {\n  x: 0,\n  y: 0,\n};\n\n// add original event handlers\nball.on('dragstart', function () {\n  ball.velocity = {\n    x: 0,\n    y: 0,\n  };\n  anim.start();\n});\n\nball.on('mousedown', function () {\n  anim.stop();\n});\n\nball.on('mouseover', function () {\n  document.body.style.cursor = 'pointer';\n});\n\nball.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n\nballLayer.add(ball);\n\n// add layers to stage in correct order\nstage.add(curveLayer);\nstage.add(ballLayer);\n\n// add tween with original styling\nconst tween = new Konva.Tween({\n  node: ball,\n  fill: 'red',\n  duration: 0.3,\n  easing: Konva.Easings.EaseOut,\n});\n\n// add animation\nconst anim = new Konva.Animation(function (frame) {\n  updateBall(frame);\n}, ballLayer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Save/Load and Undo/Redo in Vanilla JavaScript with Konva.js\nDESCRIPTION: This code snippet demonstrates how to implement save/load functionality and undo/redo operations in a vanilla JavaScript application using Konva.js. It creates a canvas with draggable images that can have filters applied, and allows adding new images, undoing, and redoing actions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Initial state\nlet state = {\n  images: [\n    { x: 50, y: 50, filter: 'none' },\n    { x: 150, y: 50, filter: 'blur' }\n  ]\n};\n\n// History for undo/redo\nconst history = [JSON.stringify(state)];\nlet historyStep = 0;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create UI buttons\nconst addButton = document.createElement('button');\naddButton.textContent = 'Add Image';\ndocument.body.appendChild(addButton);\n\nconst undoButton = document.createElement('button');\nundoButton.textContent = 'Undo';\ndocument.body.appendChild(undoButton);\n\nconst redoButton = document.createElement('button');\nredoButton.textContent = 'Redo';\ndocument.body.appendChild(redoButton);\n\n// Load image\nconst imageObj = new Image();\nimageObj.src = '/assets/lion.png';\n\nfunction createImage(imageConfig) {\n  const image = new Konva.Image({\n    image: imageObj,\n    x: imageConfig.x,\n    y: imageConfig.y,\n    width: 100,\n    height: 100,\n    draggable: true\n  });\n\n  if (imageConfig.filter === 'blur') {\n    image.filters([Konva.Filters.Blur]);\n    image.blurRadius(10);\n  }\n\n  return image;\n}\n\nfunction create(state) {\n  layer.destroyChildren();\n  \n  state.images.forEach(imgConfig => {\n    const image = createImage(imgConfig);\n    \n    image.on('dragend', () => {\n      const pos = image.position();\n      const index = layer.children.indexOf(image);\n      state.images[index] = {\n        ...state.images[index],\n        x: pos.x,\n        y: pos.y\n      };\n      saveHistory();\n    });\n\n    image.on('click', () => {\n      const index = layer.children.indexOf(image);\n      state.images[index] = {\n        ...state.images[index],\n        filter: state.images[index].filter === 'none' ? 'blur' : 'none'\n      };\n      saveHistory();\n      create(state);\n    });\n\n    layer.add(image);\n  });\n}\n\nfunction saveHistory() {\n  historyStep++;\n  history.length = historyStep;\n  history.push(JSON.stringify(state));\n}\n\naddButton.addEventListener('click', () => {\n  state.images.push({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    filter: 'none'\n  });\n  saveHistory();\n  create(state);\n});\n\nundoButton.addEventListener('click', () => {\n  if (historyStep === 0) return;\n  historyStep--;\n  state = JSON.parse(history[historyStep]);\n  create(state);\n});\n\nredoButton.addEventListener('click', () => {\n  if (historyStep === history.length - 1) return;\n  historyStep++;\n  state = JSON.parse(history[historyStep]);\n  create(state);\n});\n\nimageObj.onload = () => {\n  create(state);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Stage with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates a draggable canvas stage using Konva.js with a centered red circle and instructional text. The stage is made draggable by setting the draggable property to true in the stage configuration.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/05_Drag_a_Stage.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n  draggable: true\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create circle\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\n// create text\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  text: 'Drag the stage anywhere',\n  fontSize: 20,\n  fontFamily: 'Calibri',\n  fill: 'black'\n});\n\nlayer.add(circle);\nlayer.add(text);\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Performance Drag and Drop with 10,000 Shapes in React\nDESCRIPTION: Creates a stress test with 10,000 randomly positioned and colored circles using Konva.js with React integration. Uses refs to directly manipulate layers for optimal performance, moving circles to a dedicated drag layer during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Stress_Test.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\nconst SHAPE_COUNT = 10000;\n\nconst App = () => {\n  // State to hold all the circles data\n  const [circles, setCircles] = useState([]);\n  \n  // Refs to layers\n  const mainLayerRef = useRef(null);\n  const dragLayerRef = useRef(null);\n  \n  // Initialize circles data\n  useEffect(() => {\n    const circlesData = [];\n    \n    // Create 10,000 circles\n    for (let i = 0; i < SHAPE_COUNT; i++) {\n      circlesData.push({\n        id: i,\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        radius: 6,\n        fill: COLORS[i % COLORS.length]\n      });\n    }\n    \n    setCircles(circlesData);\n  }, []);\n  \n  // This is not the typical \"React way\" of managing components.\n  // In a more React-friendly approach, we would update state and let React handle the DOM.\n  // However, for this performance demo, we're directly manipulating the nodes\n  // to match the vanilla JS implementation.\n  const handleDragStart = (e) => {\n    const target = e.target;\n    \n    // Move the circle to the drag layer\n    target.moveTo(dragLayerRef.current);\n  };\n  \n  const handleDragEnd = (e) => {\n    const target = e.target;\n    \n    // Move the circle back to the main layer\n    target.moveTo(mainLayerRef.current);\n  };\n  \n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      {/* Main layer for all circles */}\n      <Layer ref={mainLayerRef}>\n        {circles.map(circle => (\n          <Circle\n            key={circle.id}\n            id={circle.id}\n            x={circle.x}\n            y={circle.y}\n            radius={circle.radius}\n            fill={circle.fill}\n            draggable\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        ))}\n      </Layer>\n      \n      {/* Empty drag layer that will receive circles during drag */}\n      <Layer ref={dragLayerRef} />\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Text Component with React and Konva\nDESCRIPTION: This React implementation creates an editable text component using Konva. It uses a TextEditor component with HTML textarea injected into the canvas when editing. The component maintains state for the text content, editing status, and text width, and handles events for double-clicking, text changes, and transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Editable_Text.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Transformer } from 'react-konva';\nimport { Html } from 'react-konva-utils';\nimport { useEffect, useRef, useState, useCallback } from 'react';\n\nKonva._fixTextRendering = true;\n\nconst TextEditor = ({ textNode, onClose, onChange }) => {\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    if (!textareaRef.current) return;\n\n    const textarea = textareaRef.current;\n    const stage = textNode.getStage();\n    const textPosition = textNode.position();\n    const stageBox = stage.container().getBoundingClientRect();\n    const areaPosition = {\n      x: textPosition.x,\n      y: textPosition.y,\n    };\n\n    // Match styles with the text node\n    textarea.value = textNode.text();\n    textarea.style.position = 'absolute';\n    textarea.style.top = `${areaPosition.y}px`;\n    textarea.style.left = `${areaPosition.x}px`;\n    textarea.style.width = `${textNode.width() - textNode.padding() * 2}px`;\n    textarea.style.height = `${textNode.height() - textNode.padding() * 2 + 5}px`;\n    textarea.style.fontSize = `${textNode.fontSize()}px`;\n    textarea.style.border = 'none';\n    textarea.style.padding = '0px';\n    textarea.style.margin = '0px';\n    textarea.style.overflow = 'hidden';\n    textarea.style.background = 'none';\n    textarea.style.outline = 'none';\n    textarea.style.resize = 'none';\n    textarea.style.lineHeight = textNode.lineHeight();\n    textarea.style.fontFamily = textNode.fontFamily();\n    textarea.style.transformOrigin = 'left top';\n    textarea.style.textAlign = textNode.align();\n    textarea.style.color = textNode.fill();\n\n    const rotation = textNode.rotation();\n    let transform = '';\n    if (rotation) {\n      transform += `rotateZ(${rotation}deg)`;\n    }\n    textarea.style.transform = transform;\n\n    textarea.style.height = 'auto';\n    textarea.style.height = `${textarea.scrollHeight + 3}px`;\n\n    textarea.focus();\n\n    const handleOutsideClick = (e) => {\n      if (e.target !== textarea) {\n        onChange(textarea.value);\n        onClose();\n      }\n    };\n\n    // Add event listeners\n    const handleKeyDown = (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        onChange(textarea.value);\n        onClose();\n      }\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    const handleInput = () => {\n      const scale = textNode.getAbsoluteScale().x;\n      textarea.style.width = `${textNode.width() * scale}px`;\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight + textNode.fontSize()}px`;\n    };\n\n    textarea.addEventListener('keydown', handleKeyDown);\n    textarea.addEventListener('input', handleInput);\n    setTimeout(() => {\n      window.addEventListener('click', handleOutsideClick);\n    });\n\n    return () => {\n      textarea.removeEventListener('keydown', handleKeyDown);\n      textarea.removeEventListener('input', handleInput);\n      window.removeEventListener('click', handleOutsideClick);\n    };\n  }, [textNode, onChange, onClose]);\n\n  return (\n    <Html>\n      <textarea\n        ref={textareaRef}\n        style={{\n          minHeight: '1em',\n          position: 'absolute',\n        }}\n      />\n    </Html>\n  );\n};\n\nconst EditableText = () => {\n  const [text, setText] = useState('Some text here');\n  const [isEditing, setIsEditing] = useState(false);\n  const [textWidth, setTextWidth] = useState(200);\n  const textRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    if (trRef.current && textRef.current) {\n      trRef.current.nodes([textRef.current]);\n    }\n  }, [isEditing]);\n\n  const handleTextDblClick = useCallback(() => {\n    setIsEditing(true);\n  }, []);\n\n  const handleTextChange = useCallback((newText) => {\n    setText(newText);\n  }, []);\n\n  const handleTransform = useCallback((e) => {\n    const node = textRef.current;\n    const scaleX = node.scaleX();\n    const newWidth = node.width() * scaleX;\n    setTextWidth(newWidth);\n    node.setAttrs({\n      width: newWidth,\n      scaleX: 1,\n    });\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          ref={textRef}\n          text={text}\n          x={50}\n          y={80}\n          fontSize={20}\n          draggable\n          width={textWidth}\n          onDblClick={handleTextDblClick}\n          onDblTap={handleTextDblClick}\n          onTransform={handleTransform}\n          visible={!isEditing}\n        />\n        {isEditing && (\n          <TextEditor\n            textNode={textRef.current}\n            onChange={handleTextChange}\n            onClose={() => setIsEditing(false)}\n          />\n        )}\n        {!isEditing && (\n          <Transformer\n            ref={trRef}\n            enabledAnchors={['middle-left', 'middle-right']}\n            boundBoxFunc={(oldBox, newBox) => ({\n              ...newBox,\n              width: Math.max(30, newBox.width),\n            })}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default EditableText;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Text Editor with Canvas Rendering using Konva and Quill\nDESCRIPTION: This code demonstrates how to create a rich text editor that renders formatted text on canvas using Konva.js. It utilizes Quill for text editing, html2canvas for DOM-to-image conversion, and Konva for canvas manipulation. The implementation includes dynamic updates and drag functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Rich_Text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// First we need to load Quill and html2canvas\nconst loadScript = (src) => {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = src;\n    script.onload = resolve;\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n};\n\nconst loadCSS = (href) => {\n  const link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = href;\n  document.head.appendChild(link);\n};\n\n// Create editor container\nconst editorContainer = document.createElement('div');\neditorContainer.id = 'editor-container';\neditorContainer.style.height = '80px';\neditorContainer.innerHTML = `\n  That is <u>some</u> <span style=\"color: red\"> styled text</span> on\n  <strong>canvas</strong>!\n  <h2>What do you think about it?</h2>\n`;\ndocument.body.appendChild(editorContainer);\n\n// Load dependencies\nPromise.all([\n  loadScript('https://cdn.quilljs.com/1.3.6/quill.js'),\n  loadScript('https://html2canvas.hertzen.com/dist/html2canvas.min.js'),\n]).then(() => {\n  loadCSS('https://cdn.quilljs.com/1.3.6/quill.snow.css');\n\n  const quill = new Quill('#editor-container', {\n    modules: {\n      toolbar: [\n        [{ header: [1, 2, false] }],\n        ['bold', 'italic', 'underline'],\n        ['image', 'code-block'],\n      ],\n    },\n    placeholder: 'Compose an epic...',\n    theme: 'snow',\n  });\n\n  const stage = new Konva.Stage({\n    container: 'container',\n    width: window.innerWidth,\n    height: 200,\n  });\n\n  const layer = new Konva.Layer();\n  stage.add(layer);\n\n  const shape = new Konva.Image({\n    x: 10,\n    y: 10,\n    draggable: true,\n    stroke: 'red',\n    scaleX: 1 / window.devicePixelRatio,\n    scaleY: 1 / window.devicePixelRatio,\n  });\n  layer.add(shape);\n\n  function renderText() {\n    // convert DOM into image\n    html2canvas(document.querySelector('.ql-editor'), {\n      backgroundColor: 'rgba(0,0,0,0)',\n    }).then((canvas) => {\n      // show it inside Konva.Image\n      shape.image(canvas);\n    });\n  }\n\n  // batch updates, so we don't render text too frequently\n  let timeout = null;\n  function requestTextUpdate() {\n    if (timeout) {\n      return;\n    }\n    timeout = setTimeout(function () {\n      timeout = null;\n      renderText();\n    }, 500);\n  }\n\n  // render text on all changes\n  quill.on('text-change', requestTextUpdate);\n  // make initial rendering\n  renderText();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with Canvas API in Vue.js\nDESCRIPTION: This code demonstrates how to implement free drawing functionality with direct Canvas API access in a Vue.js application. It creates an offscreen canvas and uses v-image to display the drawings on the stage. The implementation supports both brush and eraser tools, handling mouse and touch events with Vue's event system.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <select v-model=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <v-stage\n      :config=\"stageConfig\"\n      @mousedown=\"handleMouseDown\"\n      @mousemove=\"handleMouseMove\"\n      @mouseup=\"handleMouseUp\"\n      @touchstart=\"handleMouseDown\"\n      @touchmove=\"handleMouseMove\"\n      @touchend=\"handleMouseUp\"\n    >\n      <v-layer ref=\"layerRef\">\n        <v-image\n          ref=\"imageRef\"\n          :config=\"imageConfig\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst tool = ref('brush');\nconst isDrawing = ref(false);\nconst lastPos = ref(null);\nconst imageRef = ref(null);\nconst layerRef = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight - 25\n};\n\n// create canvas element\nconst canvas = document.createElement('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight - 25;\n\n// get context\nconst context = canvas.getContext('2d');\ncontext.strokeStyle = '#df4b26';\ncontext.lineJoin = 'round';\ncontext.lineWidth = 5;\n\nconst imageConfig = {\n  image: canvas,\n  x: 0,\n  y: 0\n};\n\nconst handleMouseDown = (e) => {\n  isDrawing.value = true;\n  lastPos.value = e.target.getStage().getPointerPosition();\n};\n\nconst handleMouseUp = () => {\n  isDrawing.value = false;\n};\n\nconst handleMouseMove = (e) => {\n  if (!isDrawing.value) {\n    return;\n  }\n\n  const ctx = context;\n  const image = imageRef.value.getNode();\n  const stage = e.target.getStage();\n\n  ctx.globalCompositeOperation = tool.value === 'eraser' ? 'destination-out' : 'source-over';\n  ctx.beginPath();\n\n  const localPos = {\n    x: lastPos.value.x - image.x(),\n    y: lastPos.value.y - image.y(),\n  };\n  ctx.moveTo(localPos.x, localPos.y);\n\n  const pos = stage.getPointerPosition();\n  const newLocalPos = {\n    x: pos.x - image.x(),\n    y: pos.y - image.y(),\n  };\n  ctx.lineTo(newLocalPos.x, newLocalPos.y);\n  ctx.closePath();\n  ctx.stroke();\n\n  lastPos.value = pos;\n  layerRef.value.getNode().batchDraw();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Designer with React and react-konva\nDESCRIPTION: React implementation of the window frame designer using react-konva components. Utilizes React hooks for state management and window sizing. Includes custom reducers for dimension management and overlay input handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Group, Line, Rect, Shape, Label, Tag, Text } from 'react-konva';\nimport { useState, useEffect, useRef, useCallback, useMemo, useReducer } from 'react';\n\n// Constants\nconst MIN_DIMENSION = 100;\nconst MAX_DIMENSION = 5000;\nconst DEFAULT_WIDTH = 1000;\nconst DEFAULT_HEIGHT = 2000;\nconst PADDING = 70;\n\n// ... rest of React implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hit Detection with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code demonstrates how to create custom hit regions for a star and line using hitFunc and hitStrokeWidth properties in Konva.js. It also includes functionality to toggle the hit canvas visibility for debugging purposes, and event handlers to display interaction messages.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Custom_Hit_Region.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  text: '',\n  fontSize: 24,\n});\nlayer.add(text);\n\nconst star = new Konva.Star({\n  x: stage.width() / 4,\n  y: stage.height() / 2,\n  numPoints: 5,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\n// custom hit function\nstar.hitFunc(function (context) {\n  context.beginPath();\n  context.arc(0, 0, 70, 0, Math.PI * 2, true);\n  context.closePath();\n  context.fillStrokeShape(this);\n});\n\nconst line = new Konva.Line({\n  x: stage.width() * 0.6,\n  y: stage.height() / 2,\n  points: [-50, -50, 50, 50],\n  stroke: 'black',\n  strokeWidth: 2,\n  hitStrokeWidth: 20,\n});\n\nconst button = document.createElement('button');\nbutton.innerHTML = 'Toggle hit canvas';\ndocument.body.appendChild(button);\nlet showHit = false;\n\nbutton.addEventListener('click', () => {\n  showHit = !showHit;\n  if (showHit) {\n    stage.container().style.border = '2px solid black';\n    stage.container().style.height = stage.height() + 'px';\n    stage.container().appendChild(layer.hitCanvas._canvas);\n    layer.hitCanvas._canvas.style.position = 'absolute';\n    layer.hitCanvas._canvas.style.top = 0;\n    layer.hitCanvas._canvas.style.left = 0;\n  } else {\n    layer.hitCanvas._canvas.remove();\n  }\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\nstar.on('mouseover mouseout mousedown mouseup', function (evt) {\n  writeMessage(evt.type + ' star');\n});\n\nline.on('mouseover mouseout mousedown mouseup', function (evt) {\n  writeMessage(evt.type + ' line');\n});\n\nlayer.add(star);\nlayer.add(line);\n```\n\n----------------------------------------\n\nTITLE: Applying RGB Filter to Image with React in Konva.js\nDESCRIPTION: This code shows how to implement an RGB filter on an image using React with react-konva. It sets up a draggable image with interactive sliders for adjusting red, green, and blue color values. The implementation uses React hooks (useState, useEffect, useRef) and the useImage hook for loading images.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/RGB.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [red, setRed] = useState(100);\n  const [green, setGreen] = useState(100);\n  const [blue, setBlue] = useState(100);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.RGB]}\n            red={red}\n            green={green}\n            blue={blue}\n          />\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <div>\n          Red\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            value={red}\n            onChange={(e) => setRed(parseInt(e.target.value))}\n          />\n        </div>\n        <div>\n          Green\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            value={green}\n            onChange={(e) => setGreen(parseInt(e.target.value))}\n          />\n        </div>\n        <div>\n          Blue\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            value={blue}\n            onChange={(e) => setBlue(parseInt(e.target.value))}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code creates a draggable red circle on an HTML5 canvas using Konva.js. It initializes a Konva stage and layer, adds a circle with draggable property set to true, and implements cursor styling on mouse hover events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/01_Drag_and_Drop.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true,\n});\n\n// add cursor styling\ncircle.on('mouseover', function () {\n  document.body.style.cursor = 'pointer';\n});\ncircle.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Displaying Video on Canvas with Vanilla JavaScript in Konva.js\nDESCRIPTION: This example creates a draggable video element on a Konva.js canvas with play/pause controls. It uses Konva.Animation to continuously update the layer when the video is playing, sets up buttons to control playback, and handles video loading states with text feedback.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Video_On_Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create buttons\nconst playButton = document.createElement('button');\nplayButton.textContent = 'Play';\nplayButton.id = 'play';\ndocument.body.appendChild(playButton);\n\nconst pauseButton = document.createElement('button');\npauseButton.textContent = 'Pause';\npauseButton.id = 'pause';\ndocument.body.appendChild(pauseButton);\n\nconst width = window.innerWidth;\nconst height = 300;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst video = document.createElement('video');\nvideo.src =\n  'https://upload.wikimedia.org/wikipedia/commons/transcoded/c/c4/Physicsworks.ogv/Physicsworks.ogv.240p.vp9.webm';\n\nconst image = new Konva.Image({\n  image: video,\n  draggable: true,\n  x: 50,\n  y: 20,\n});\nlayer.add(image);\n\nconst text = new Konva.Text({\n  text: 'Loading video...',\n  width: stage.width(),\n  height: stage.height(),\n  align: 'center',\n  verticalAlign: 'middle',\n});\nlayer.add(text);\n\nconst anim = new Konva.Animation(function () {\n  // do nothing, animation just needs to update the layer\n}, layer);\n\n// update Konva.Image size when meta is loaded\nvideo.addEventListener('loadedmetadata', function () {\n  text.text('Press PLAY...');\n  image.width(video.videoWidth);\n  image.height(video.videoHeight);\n});\n\ndocument.getElementById('play').addEventListener('click', function () {\n  text.destroy();\n  video.play();\n  anim.start();\n});\ndocument.getElementById('pause').addEventListener('click', function () {\n  video.pause();\n  anim.stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Stage to Data URL - React Implementation\nDESCRIPTION: React version of the Konva stage export functionality using react-konva. Uses hooks for state management and refs to access the stage instance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Stage_Data_URL.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useRef, useState } from 'react';\n\nconst App = () => {\n  const stageRef = useRef(null);\n  const [position, setPosition] = useState({ x: 100, y: 100 });\n\n  const handleExport = () => {\n    // get data URL with default settings\n    const dataURL = stageRef.current.toDataURL();\n    \n    // open in new window\n    const win = window.open();\n    win.document.write(`<img src=\"${dataURL}\" alt=\"Stage\"/>`);\n    \n    // you can also save with different settings\n    const jpegURL = stageRef.current.toDataURL({\n      mimeType: 'image/jpeg',\n      quality: 0.8\n    });\n    console.log('JPEG URL:', jpegURL);\n  };\n\n  const handleDragEnd = (e) => {\n    setPosition({\n      x: e.target.x(),\n      y: e.target.y()\n    });\n  };\n\n  return (\n    <div>\n      <button onClick={handleExport} style={{ marginBottom: '10px' }}>\n        Save as Image\n      </button>\n      <Stage width={400} height={400} ref={stageRef}>\n        <Layer>\n          <Rect\n            x={position.x}\n            y={position.y}\n            width={100}\n            height={100}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n            draggable\n            onDragEnd={handleDragEnd}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing animated rectangles with React-Konva and react-spring\nDESCRIPTION: This code demonstrates how to use the react-spring library to animate a Konva rectangle. The animation toggles between two states when the rectangle is clicked, animating the position, shadow blur, color, width and height properties smoothly. The example uses React hooks and the Spring component from react-spring/konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Complex_Animations.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Stage, Layer, Text } from 'react-konva';\nimport { Spring, animated } from '@react-spring/konva';\n\nconst ColoredRect = () => {\n  const [flag, setFlag] = React.useState(false);\n  const handleClick = () => setFlag(prev => !prev);\n\n  return (\n    <Spring\n      native\n      from={{ x: 0, shadowBlur: 0, fill: 'rgb(10,50,19)' }}\n      to={{\n        x: flag ? 150 : 50,\n        shadowBlur: flag ? 25 : 5,\n        fill: flag ? 'seagreen' : 'hotpink',\n        width: flag ? 300 : 50,\n        height: flag ? 300 : 50,\n      }}\n    >\n      {(props) => (\n        <animated.Rect {...props} y={50} onClick={handleClick} />\n      )}\n    </Spring>\n  );\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Text text=\"Try clicking the rectangle\" />\n          <ColoredRect />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Delegation with Konva in React\nDESCRIPTION: This snippet shows how to use event delegation with Konva in a React component. It creates a stage with a layer containing a text element and a star shape. The layer has a click event handler that updates the text based on the clicked shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Event_Delegation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleLayerClick = (e) => {\n    const shape = e.target;\n    setMessage('click on ' + shape.getClassName());\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer onClick={handleLayerClick}>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <Star\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          numPoints={5}\n          innerRadius={40}\n          outerRadius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Vue KonvaJS Rectangle Selection Component\nDESCRIPTION: Vue implementation of a multi-selection rectangle component using KonvaJS and Vue-Konva. Features draggable rectangles, transformer for resizing, and selection rectangle with full mouse event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/01_Basic_demo.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage\n    :config=\"stageSize\"\n    @mousedown=\"handleMouseDown\"\n    @mousemove=\"handleMouseMove\"\n    @mouseup=\"handleMouseUp\"\n    @click=\"handleStageClick\"\n    ref=\"stageRef\"\n  >\n    <v-layer ref=\"layerRef\">\n      <v-rect\n        v-for=\"(rect, i) in rectangles\"\n        :key=\"i\"\n        :config=\"{\n          ...rect,\n          name: 'rect', // Important to match vanilla version's logic\n          draggable: true\n        }\"\n        @dragend=\"(e) => handleDragEnd(e, i)\"\n        @transformend=\"(e) => handleTransformEnd(e, i)\"\n        ref=\"rectRefs\"\n      />\n      <v-transformer\n        ref=\"transformerRef\"\n        :config=\"{\n          boundBoxFunc: (oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          },\n        }\"\n      />\n      <v-rect\n        v-if=\"selectionRectangle.visible\"\n        :config=\"{\n          x: Math.min(selectionRectangle.x1, selectionRectangle.x2),\n          y: Math.min(selectionRectangle.y1, selectionRectangle.y2),\n          width: Math.abs(selectionRectangle.x2 - selectionRectangle.x1),\n          height: Math.abs(selectionRectangle.y2 - selectionRectangle.y1),\n          fill: 'rgba(0,0,255,0.5)'\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Event Handling in React with react-konva\nDESCRIPTION: A React implementation of multi-event handling using react-konva components. Uses useState to manage the message state and individual event handler props for the Circle component to handle mouseover, mousedown, and mouseup events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Multi_Event.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleMultiEvent = (e) => {\n    setMessage('event: ' + e.type);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseover={handleMultiEvent}\n          onMousedown={handleMultiEvent}\n          onMouseup={handleMultiEvent}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelate Filter to Images with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to load an image, apply a pixelate filter, and create an interactive slider to control the pixel size. It utilizes Konva.js to handle the canvas operations and caching required for filter application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Pixelate.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Pixelate]);\n  image.pixelSize(8);\n\n  // create slider\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '20px';\n  container.style.left = '20px';\n  \n  const text = document.createElement('span');\n  text.textContent = 'Pixel Size: ';\n  container.appendChild(text);\n  \n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '2';\n  slider.max = '32';\n  slider.step = '1';\n  slider.value = image.pixelSize();\n  slider.style.width = '200px';\n  \n  slider.addEventListener('input', (e) => {\n    const value = parseInt(e.target.value);\n    image.pixelSize(value);\n  });\n  \n  container.appendChild(slider);\n  document.body.appendChild(container);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Building Arrow Shapes with Vue-Konva\nDESCRIPTION: This snippet illustrates how to create an arrow shape using Vue-Konva components. It uses a template approach with v-stage, v-layer, and v-arrow components, separating the configuration objects in the script section.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arrow.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-arrow :config=\"arrowConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst arrowConfig = {\n  x: window.innerWidth / 4,\n  y: window.innerHeight / 4,\n  points: [0, 0, 100, 100],\n  pointerLength: 20,\n  pointerWidth: 20,\n  fill: 'black',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Image Filters with React and KonvaJS\nDESCRIPTION: React implementation of image filters using react-konva. Creates reusable filter control components and manages filter states with React hooks. Includes blur, brightness, and contrast filters with interactive controls.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Multiple_Filters.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst FilterControl = ({ name, min, max, step, filters, setFilters }) => {\n  const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n  return (\n    <div style={{ marginBottom: '10px' }}>\n      <input\n        type=\"checkbox\"\n        id={name}\n        checked={filters[name].active}\n        onChange={(e) => {\n          setFilters({\n            ...filters,\n            [name]: { ...filters[name], active: e.target.checked },\n          });\n        }}\n      />\n      <label htmlFor={name}> {capitalizedName}: </label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={filters[name].value}\n        disabled={!filters[name].active}\n        onChange={(e) => {\n          setFilters({\n            ...filters,\n            [name]: { ...filters[name], value: parseFloat(e.target.value) },\n          });\n        }}\n        style={{ width: '200px' }}\n      />\n    </div>\n  );\n};\n\nconst App = () => {\n  const [filters, setFilters] = useState({\n    blur: { active: false, value: 10 },\n    brightness: { active: false, value: 0.3 },\n    contrast: { active: false, value: 50 },\n  });\n\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  const activeFilters = [];\n  if (filters.blur.active) activeFilters.push(Konva.Filters.Blur);\n  if (filters.brightness.active) activeFilters.push(Konva.Filters.Brighten);\n  if (filters.contrast.active) activeFilters.push(Konva.Filters.Contrast);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {image && (\n            <Image\n              ref={imageRef}\n              x={50}\n              y={50}\n              image={image}\n              draggable\n              filters={activeFilters}\n              blurRadius={filters.blur.value}\n              brightness={filters.brightness.value}\n              contrast={filters.contrast.value}\n            />\n          )}\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <FilterControl name=\"blur\" min={0} max={40} step={1} filters={filters} setFilters={setFilters} />\n        <FilterControl name=\"brightness\" min={-1} max={1} step={0.1} filters={filters} setFilters={setFilters} />\n        <FilterControl name=\"contrast\" min={-100} max={100} step={1} filters={filters} setFilters={setFilters} />\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Relative Mouse Position in React Konva\nDESCRIPTION: This React implementation uses Konva.js to handle relative mouse positioning within nested transformations. It maintains a state array of circles and adds new ones at the relative position within a transformed group when the canvas is clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Relative_Pointer_Position.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Stage, Layer, Group, Text, Circle } from 'react-konva';\n\nconst App = () => {\n  const [circles, setCircles] = useState([]);\n  \n  const handleStageClick = (e) => {\n    // Get the group reference from konva tree\n    const group = e.target.getStage().findOne('Group');\n    if (!group) return;\n    \n    // Get position relative to the group\n    const pos = group.getRelativePointerPosition();\n    \n    // Add new circle\n    setCircles([\n      ...circles,\n      {\n        x: pos.x,\n        y: pos.y,\n        radius: 20,\n        fill: 'red',\n        id: Date.now().toString()\n      }\n    ]);\n  };\n\n  return (\n    <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      x={20}\n      y={50}\n      onClick={handleStageClick}\n    >\n      <Layer\n        scaleX={1.2}\n        scaleY={0.8}\n        rotation={5}\n      >\n        <Group\n          x={30}\n          rotation={10}\n          scaleX={1.5}\n        >\n          <Text \n            text=\"Click on the canvas to draw a circle\" \n            fontSize={20}\n          />\n          {circles.map((circle) => (\n            <Circle\n              key={circle.id}\n              x={circle.x}\n              y={circle.y}\n              radius={circle.radius}\n              fill={circle.fill}\n            />\n          ))}\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with Vanilla JavaScript and Konva\nDESCRIPTION: This code demonstrates a basic free drawing tool implementation using Vanilla JavaScript and Konva. It creates a canvas with brush and eraser modes, tracking mouse/touch movements to create line segments. The implementation handles both mousedown/mouseup and touchstart/touchend events for cross-device compatibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create tool select\nconst select = document.createElement('select');\nselect.innerHTML = `\n  <option value=\"brush\">Brush</option>\n  <option value=\"eraser\">Eraser</option>\n`;\ndocument.body.appendChild(select);\n\nconst width = window.innerWidth;\nconst height = window.innerHeight - 25;\n\n// first we need Konva core things: stage and layer\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nlet isPaint = false;\nlet mode = 'brush';\nlet lastLine;\n\nstage.on('mousedown touchstart', function (e) {\n  isPaint = true;\n  const pos = stage.getPointerPosition();\n  lastLine = new Konva.Line({\n    stroke: '#df4b26',\n    strokeWidth: 5,\n    globalCompositeOperation:\n      mode === 'brush' ? 'source-over' : 'destination-out',\n    // round cap for smoother lines\n    lineCap: 'round',\n    lineJoin: 'round',\n    // add point twice, so we have some drawings even on a simple click\n    points: [pos.x, pos.y, pos.x, pos.y],\n  });\n  layer.add(lastLine);\n});\n\nstage.on('mouseup touchend', function () {\n  isPaint = false;\n});\n\n// and core function - drawing\nstage.on('mousemove touchmove', function (e) {\n  if (!isPaint) {\n    return;\n  }\n\n  // prevent scrolling on touch devices\n  e.evt.preventDefault();\n\n  const pos = stage.getPointerPosition();\n  const newPoints = lastLine.points().concat([pos.x, pos.y]);\n  lastLine.points(newPoints);\n});\n\nselect.addEventListener('change', function () {\n  mode = select.value;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handling with Svelte-Konva\nDESCRIPTION: A basic example showing how to set up a stage, layer, and rectangle in Svelte-Konva while attaching a click event handler to the rectangle. The handler receives the event details and displays an alert.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Events.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { Stage, Layer, Rect } from 'svelte-konva';\n\n  function handleClick(e) {\n    const konvaEvent = e.detail;\n    window.alert(`Clicked on rectangle: ${konvaEvent.type}`);\n  }\n</script>\n\n<Stage config={{ width: window.innerWidth, height: window.innerHeight }}>\n  <Layer>\n    <Rect\n      config={{ x: 100, y: 100, width: 400, height: 200, fill: 'blue' }}\n      on:pointerclick={handleClick}\n    />\n  </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan and Pinch Zoom in React with react-konva\nDESCRIPTION: This snippet demonstrates how to implement pan and pinch zoom functionality for a Konva stage using React and react-konva. It uses React hooks to manage state and handle touch events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Stage.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Circle } from 'react-konva';\nimport { useState, useEffect, useCallback } from 'react';\n\n// by default Konva prevent some events when node is dragging\n// it improve the performance and work well for 95% of cases\n// we need to enable all events on Konva, even when we are dragging a node\n// so it triggers touchmove correctly\nwindow.Konva.hitOnDragEnabled = true;\n\nconst App = () => {\n  const [stagePos, setStagePos] = useState({ x: 0, y: 0 });\n  const [stageScale, setStageScale] = useState({ x: 1, y: 1 });\n  const [lastCenter, setLastCenter] = useState(null);\n  const [lastDist, setLastDist] = useState(0);\n  const [dragStopped, setDragStopped] = useState(false);\n\n  const getDistance = (p1, p2) => {\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n  };\n\n  const getCenter = (p1, p2) => {\n    return {\n      x: (p1.x + p2.x) / 2,\n      y: (p1.y + p2.y) / 2,\n    };\n  };\n\n  const handleTouchMove = useCallback((e) => {\n    e.evt.preventDefault();\n    const touch1 = e.evt.touches[0];\n    const touch2 = e.evt.touches[1];\n    const stage = e.target.getStage();\n\n    // we need to restore dragging, if it was cancelled by multi-touch\n    if (touch1 && !touch2 && !stage.isDragging() && dragStopped) {\n      stage.startDrag();\n      setDragStopped(false);\n    }\n\n    if (touch1 && touch2) {\n      // if the stage was under Konva's drag&drop\n      // we need to stop it, and implement our own pan logic with two pointers\n      if (stage.isDragging()) {\n        stage.stopDrag();\n        setDragStopped(true);\n      }\n\n      const p1 = {\n        x: touch1.clientX,\n        y: touch1.clientY,\n      };\n      const p2 = {\n        x: touch2.clientX,\n        y: touch2.clientY,\n      };\n\n      if (!lastCenter) {\n        setLastCenter(getCenter(p1, p2));\n        return;\n      }\n      const newCenter = getCenter(p1, p2);\n\n      const dist = getDistance(p1, p2);\n\n      if (!lastDist) {\n        setLastDist(dist);\n        return;\n      }\n\n      // local coordinates of center point\n      const pointTo = {\n        x: (newCenter.x - stagePos.x) / stageScale.x,\n        y: (newCenter.y - stagePos.y) / stageScale.x,\n      };\n\n      const scale = stageScale.x * (dist / lastDist);\n\n      setStageScale({ x: scale, y: scale });\n\n      // calculate new position of the stage\n      const dx = newCenter.x - lastCenter.x;\n      const dy = newCenter.y - lastCenter.y;\n\n      setStagePos({\n        x: newCenter.x - pointTo.x * scale + dx,\n        y: newCenter.y - pointTo.y * scale + dy,\n      });\n\n      setLastDist(dist);\n      setLastCenter(newCenter);\n    }\n  }, [dragStopped, lastCenter, lastDist, stagePos, stageScale]);\n\n  const handleTouchEnd = () => {\n    setLastDist(0);\n    setLastCenter(null);\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      draggable\n      x={stagePos.x}\n      y={stagePos.y}\n      scaleX={stageScale.x}\n      scaleY={stageScale.y}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <Layer>\n        <RegularPolygon\n          x={190}\n          y={window.innerHeight / 2}\n          sides={3}\n          radius={80}\n          fill=\"green\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        <Circle\n          x={380}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transformer Updates in React with Konva\nDESCRIPTION: This React example demonstrates updating a Transformer when text content changes. It uses React hooks (useState, useRef, useEffect) to manage state and references, showing how to handle the transformer update implicitly through React's re-rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/10_Force_Update.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Rect, Group, Transformer } from 'react-konva';\nimport { useState, useRef, useEffect } from 'react';\n\nconst App = () => {\n  const [text, setText] = useState('Some text here');\n  const groupRef = useRef();\n  const trRef = useRef();\n\n  const handleClick = () => {\n    setText('Something else is here');\n  };\n\n  useEffect(() => {\n    if (trRef.current) {\n      trRef.current.nodes([groupRef.current]);\n    }\n  }, []);\n\n  return (\n    <>\n      <button onClick={handleClick}>Change text</button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Group\n            x={50}\n            y={50}\n            draggable\n            ref={groupRef}\n          >\n            <Rect\n              width={text.length * 10}\n              height={30}\n              fill=\"yellow\"\n            />\n            <Text\n              text={text}\n              fontSize={24}\n            />\n          </Group>\n          <Transformer\n            ref={trRef}\n            padding={5}\n            enabledAnchors={['middle-left', 'middle-right']}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG with Konva and canvg in Vue\nDESCRIPTION: This Vue component renders an SVG image using both native Konva.Image and the canvg library. It uses the useImage composable for native rendering and dynamically loads the canvg library to render the SVG to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/SVG_On_Canvas.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-image\n        v-if=\"nativeImage\"\n        :config=\"{\n          image: nativeImage,\n          width: 150,\n          height: 150\n        }\"\n      />\n      <v-image\n        v-if=\"canvgImage\"\n        :config=\"{\n          image: canvgImage,\n          x: 200,\n          width: 150,\n          height: 150\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst SOURCE = 'https://konvajs.org/assets/tiger.svg';\nconst [nativeImage] = useImage(SOURCE);\nconst canvgImage = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nonMounted(() => {\n  // Load canvg library and render SVG\n  const script = document.createElement('script');\n  script.src = 'https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js';\n  script.onload = () => {\n    const canvas = document.createElement('canvas');\n    canvg(canvas, SOURCE, {\n      renderCallback: function () {\n        canvgImage.value = canvas;\n      },\n    });\n  };\n  document.head.appendChild(script);\n\n  return () => {\n    script.remove();\n  };\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Calculating Scroll Positions for Custom Scrollbars in JavaScript\nDESCRIPTION: This snippet calculates the positions of custom vertical and horizontal scrollbars based on the current scroll position and available screen space. It adjusts the scrollbar positions relative to the canvas size and window dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst availableHeight = window.innerHeight - PADDING * 2 - 100;\nconst vy = (y / (-HEIGHT + window.innerHeight)) * availableHeight + PADDING;\n\nconst availableWidth = window.innerWidth - PADDING * 2 - 100;\nconst hx = (x / (-WIDTH + window.innerWidth)) * availableWidth + PADDING;\n\nscrollBars.value = {\n  vertical: { x: window.innerWidth - PADDING - 10, y: vy },\n  horizontal: { x: hx, y: window.innerHeight - PADDING - 10 }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Emboss Filter with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to load an image, apply an emboss filter using Konva.js, and create interactive sliders to control the filter properties. It uses the Konva.Filters.Emboss filter with adjustable strength, white level, blend, and direction parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Emboss.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Emboss]);\n  image.embossStrength(0.5);\n  image.embossWhiteLevel(0.5);\n  image.embossDirection('top-left');\n  image.embossBlend(0.5);\n\n  // create sliders\n  const strengthSlider = document.createElement('input');\n  strengthSlider.type = 'range';\n  strengthSlider.min = '0';\n  strengthSlider.max = '1';\n  strengthSlider.step = '0.1';\n  strengthSlider.value = image.embossStrength();\n  strengthSlider.style.position = 'absolute';\n  strengthSlider.style.top = '20px';\n  strengthSlider.style.left = '20px';\n\n  const whiteLevelSlider = document.createElement('input');\n  whiteLevelSlider.type = 'range';\n  whiteLevelSlider.min = '0';\n  whiteLevelSlider.max = '1';\n  whiteLevelSlider.step = '0.1';\n  whiteLevelSlider.value = image.embossWhiteLevel();\n  whiteLevelSlider.style.position = 'absolute';\n  whiteLevelSlider.style.top = '45px';\n  whiteLevelSlider.style.left = '20px';\n\n  const blendSlider = document.createElement('input');\n  blendSlider.type = 'range';\n  blendSlider.min = '0';\n  blendSlider.max = '1';\n  blendSlider.step = '0.1';\n  blendSlider.value = image.embossBlend();\n  blendSlider.style.position = 'absolute';\n  blendSlider.style.top = '70px';\n  blendSlider.style.left = '20px';\n\n  // add labels\n  const strengthLabel = document.createElement('div');\n  strengthLabel.textContent = 'Strength';\n  strengthLabel.style.position = 'absolute';\n  strengthLabel.style.top = '20px';\n  strengthLabel.style.left = '200px';\n\n  const whiteLevelLabel = document.createElement('div');\n  whiteLevelLabel.textContent = 'White Level';\n  whiteLevelLabel.style.position = 'absolute';\n  whiteLevelLabel.style.top = '45px';\n  whiteLevelLabel.style.left = '200px';\n\n  const blendLabel = document.createElement('div');\n  blendLabel.textContent = 'Blend';\n  blendLabel.style.position = 'absolute';\n  blendLabel.style.top = '70px';\n  blendLabel.style.left = '200px';\n\n  // add event listeners\n  strengthSlider.addEventListener('input', (e) => {\n    image.embossStrength(parseFloat(e.target.value));\n  });\n\n  whiteLevelSlider.addEventListener('input', (e) => {\n    image.embossWhiteLevel(parseFloat(e.target.value));\n  });\n\n  blendSlider.addEventListener('input', (e) => {\n    image.embossBlend(parseFloat(e.target.value));\n  });\n\n  // add elements to the page\n  document.body.appendChild(strengthSlider);\n  document.body.appendChild(whiteLevelSlider);\n  document.body.appendChild(blendSlider);\n  document.body.appendChild(strengthLabel);\n  document.body.appendChild(whiteLevelLabel);\n  document.body.appendChild(blendLabel);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Expanding Images on Hover with Vue.js and Konva.js\nDESCRIPTION: This snippet demonstrates how to create expandable and draggable images using Vue.js with vue-konva. It uses Vue's Composition API to manage the state of loaded images and hover effects, creating a reactive implementation of the image expansion functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Expand_Images_on_Hover.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer ref=\"layerRef\">\n      <v-image\n        v-for=\"(img, index) in images\"\n        :key=\"index\"\n        :config=\"getImageConfig(img, index)\"\n        @mouseenter=\"handleMouseEnter(index)\"\n        @mouseleave=\"handleMouseLeave(index)\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst layerRef = ref(null);\nconst hoveredIndex = ref(null);\nconst loadedImages = ref({});\n\n// Define image data\nconst images = ref([\n  {\n    src: 'https://konvajs.org/assets/darth-vader.jpg',\n    x: 110,\n    y: 88,\n    width: 200,\n    height: 137,\n    offsetX: 100,\n    offsetY: 68,\n    loaded: false\n  },\n  {\n    src: 'https://konvajs.org/assets/yoda.jpg',\n    x: 290,\n    y: 70,\n    width: 93,\n    height: 104,\n    offsetX: 46,\n    offsetY: 52,\n    loaded: false\n  }\n]);\n\n// Load images\nonMounted(() => {\n  images.value.forEach((img, index) => {\n    const imageObj = new Image();\n    imageObj.onload = () => {\n      loadedImages.value = {\n        ...loadedImages.value,\n        [index]: imageObj\n      };\n    };\n    imageObj.src = img.src;\n  });\n});\n\n// Get configuration for each image\nconst getImageConfig = (img, index) => {\n  const isHovered = hoveredIndex.value === index;\n  const scale = isHovered ? 1.2 : 1;\n  \n  return {\n    image: loadedImages.value[index],\n    x: img.x,\n    y: img.y,\n    width: img.width,\n    height: img.height,\n    offsetX: img.offsetX,\n    offsetY: img.offsetY,\n    scaleX: scale,\n    scaleY: scale,\n    draggable: true\n  };\n};\n\n// Mouse event handlers\nconst handleMouseEnter = (index) => {\n  hoveredIndex.value = index;\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseLeave = () => {\n  hoveredIndex.value = null;\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing 20,000 Interactive Nodes with React-Konva\nDESCRIPTION: This React implementation creates 20,000 interactive circles using React-Konva. It uses React hooks (useState, useEffect, useRef, useMemo, useCallback) for efficient state management and performance optimization through component memoization, preventing unnecessary re-renders when handling a large number of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef, useMemo, useCallback, memo } from 'react';\nimport { Stage, Layer, Circle, Label, Tag, Text } from 'react-konva';\n\nconst CirclesLayer = ({ nodes, onMouseOver, onMouseMove, onMouseOut, onMouseDown, onMouseUp }) => {\n  // Only re-render when the nodes array reference changes\n  return (\n    <Layer>\n      {nodes.map(node => (\n        <Circle\n          key={node.id}\n          x={node.x}\n          y={node.y}\n          radius={4}\n          fill={node.color}\n          onMouseOver={e => onMouseOver(e, node)}\n          onMouseMove={onMouseMove}\n          onMouseOut={onMouseOut}\n          onDragMove={onMouseMove}\n          onMouseDown={e => onMouseDown(e, node)}\n          onMouseUp={e => onMouseUp(e, node)}\n          draggable\n        />\n      ))}\n    </Layer>\n  );\n};\n\n// Memoize the CirclesLayer component to prevent unnecessary re-renders\nconst MemoizedCirclesLayer = memo(CirclesLayer);\n\nconst TooltipLayer = ({ tooltip }) => (\n  <Layer>\n    <Label\n      x={tooltip.x}\n      y={tooltip.y}\n      opacity={0.75}\n      visible={tooltip.visible}\n    >\n      <Tag\n        fill=\"black\"\n        pointerDirection=\"down\"\n        pointerWidth={10}\n        pointerHeight={10}\n        lineJoin=\"round\"\n        shadowColor=\"black\"\n        shadowBlur={10}\n        shadowOffsetX={10}\n        shadowOffsetY={10}\n        shadowOpacity={0.2}\n      />\n      <Text\n        text={tooltip.text}\n        fontFamily=\"Calibri\"\n        fontSize={18}\n        padding={5}\n        fill=\"white\"\n      />\n    </Label>\n  </Layer>\n);\n\n// Memoize the TooltipLayer to only re-render when tooltip props change\nconst MemoizedTooltipLayer = memo(TooltipLayer);\n\nconst App = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  // Create refs for the layers\n  const dragLayerRef = useRef(null);\n  \n  // State for tooltip\n  const [tooltip, setTooltip] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    text: ''\n  });\n  \n  // State for nodes data - using useMemo to ensure it doesn't regenerate on re-renders\n  const nodes = useMemo(() => {\n    const colors = ['red', 'orange', 'cyan', 'green', 'blue', 'purple'];\n    const data = [];\n    \n    for (let n = 0; n < 20000; n++) {\n      const x = Math.random() * width;\n      const y = height + Math.random() * 200 - 100 + (height / width) * -1 * x;\n      data.push({\n        x,\n        y,\n        id: n,\n        color: colors[Math.round(Math.random() * 5)],\n      });\n    }\n    \n    return data;\n  }, [width, height]);\n  \n  // Event handlers - wrap in useCallback to prevent recreating functions on each render\n  const handleMouseOver = useCallback((e, node) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    setTooltip({\n      visible: true,\n      x: pos.x,\n      y: pos.y - 5,\n      text: `node: ${node.id}, color: ${node.color}`\n    });\n  }, []);\n  \n  const handleMouseMove = useCallback((e) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    setTooltip(prev => ({\n      ...prev,\n      x: pos.x,\n      y: pos.y - 5\n    }));\n  }, []);\n  \n  const handleMouseOut = useCallback(() => {\n    setTooltip(prev => ({\n      ...prev,\n      visible: false\n    }));\n  }, []);\n  \n  const handleMouseDown = useCallback((e, node) => {\n    // For drag handling if needed\n  }, []);\n  \n  const handleMouseUp = useCallback((e, node) => {\n    // For drag handling if needed\n  }, []);\n  \n  return (\n    <Stage width={width} height={height}>\n      {/* Render single layer for all circles */}\n      <MemoizedCirclesLayer \n        nodes={nodes}\n        onMouseOver={handleMouseOver}\n        onMouseMove={handleMouseMove}\n        onMouseOut={handleMouseOut}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      />\n      \n      {/* Drag layer - if needed */}\n      <Layer ref={dragLayerRef} />\n      \n      {/* Tooltip layer */}\n      <MemoizedTooltipLayer tooltip={tooltip} />\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncing Bunnies Animation with React and Konva.js\nDESCRIPTION: This React component creates a performance test using Konva.js to animate bouncing bunnies. It uses hooks for state management and refs for direct node manipulation to optimize performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Stage, FastLayer, Image } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst BunnyMark = () => {\n  // Constants\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const GRAVITY = 0.75;\n  const START_COUNT = 100;\n  const ADD_AMOUNT = 10;\n  \n  // State and refs\n  const [count, setCount] = useState(0);\n  const [isAdding, setIsAdding] = useState(false);\n  const layerRef = useRef(null);\n  const bunniesRef = useRef([]);\n  const bunnyNodesRef = useRef([]); // Store references to the actual Konva nodes\n  const [bunnyImage] = useImage('https://konvajs.org/assets/bunny.png');\n  \n  // Create a bunny with position and velocity\n  const createBunny = (x, y) => ({\n    x,\n    y,\n    speedX: Math.random() * 10,\n    speedY: Math.random() * 10 - 5\n  });\n  \n  // Store references to Konva image nodes\n  const storeNodeRef = (index, node) => {\n    if (node) {\n      bunnyNodesRef.current[index] = node;\n    }\n  };\n  \n  // Initialize bunnies when image loads\n  useEffect(() => {\n    if (!bunnyImage) return;\n    \n    const initialBunnies = Array(START_COUNT).fill(0).map(() => createBunny(\n      Math.random() * width,\n      Math.random() * height\n    ));\n    \n    bunniesRef.current = initialBunnies;\n    bunnyNodesRef.current = new Array(START_COUNT);\n    setCount(START_COUNT);\n  }, [bunnyImage]);\n  \n  // Animation loop\n  useEffect(() => {\n    if (!bunnyImage) return;\n    \n    let animationFrameId;\n    \n    const update = () => {\n      // Add more bunnies if needed\n      if (isAdding) {\n        const currentLength = bunniesRef.current.length;\n        const newBunnies = Array(ADD_AMOUNT).fill(0).map(() => \n          createBunny(\n            Math.random() * width,\n            Math.random() * height\n          )\n        );\n        \n        bunniesRef.current = [...bunniesRef.current, ...newBunnies];\n        // Extend the nodes array to accommodate new bunnies\n        bunnyNodesRef.current = [...bunnyNodesRef.current, ...new Array(ADD_AMOUNT)];\n        setCount(prevCount => prevCount + ADD_AMOUNT);\n      }\n      \n      // Update all bunnies - DIRECT NODE MANIPULATION FOR PERFORMANCE\n      // This avoids expensive React re-renders for position updates\n      bunniesRef.current.forEach((bunny, i) => {\n        // Update data model\n        bunny.x += bunny.speedX;\n        bunny.y += bunny.speedY;\n        bunny.speedY += GRAVITY;\n        \n        // Bounce off edges\n        if (bunny.x > width - bunnyImage.width) {\n          bunny.speedX *= -1;\n          bunny.x = width - bunnyImage.width;\n        } else if (bunny.x < 0) {\n          bunny.speedX *= -1;\n          bunny.x = 0;\n        }\n        \n        if (bunny.y > height - bunnyImage.height) {\n          bunny.speedY *= -0.85;\n          bunny.y = height - bunnyImage.height;\n          if (Math.random() > 0.5) {\n            bunny.speedY -= Math.random() * 6;\n          }\n        } else if (bunny.y < 0) {\n          bunny.speedY = 0;\n          bunny.y = 0;\n        }\n        \n        // Direct node update if we have a reference (much faster than React updates)\n        const node = bunnyNodesRef.current[i];\n        if (node) {\n          node.x(bunny.x);\n          node.y(bunny.y);\n        }\n      });\n      \n      // Batch draw the layer once instead of updating each node individually\n      if (layerRef.current) {\n        layerRef.current.getLayer().batchDraw();\n      }\n      \n      animationFrameId = requestAnimationFrame(update);\n    };\n    \n    update();\n    \n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [isAdding, bunnyImage]);\n  \n  // Handle mouse/touch events\n  const handleDown = () => setIsAdding(true);\n  const handleUp = () => setIsAdding(false);\n  \n  if (!bunnyImage) return <div>Loading bunny image...</div>;\n  \n  return (\n    <>\n      \n      <Stage\n        width={width}\n        height={height}\n        onMouseDown={handleDown}\n        onMouseUp={handleUp}\n        onTouchStart={handleDown}\n        onTouchEnd={handleUp}\n      >\n        <FastLayer ref={layerRef}>\n          {bunniesRef.current.map((bunny, i) => (\n            <Image\n              key={i}\n              ref={(node) => storeNodeRef(i, node)}\n              image={bunnyImage}\n              x={bunny.x}\n              y={bunny.y}\n              transformsEnabled=\"position\"\n              perfectDrawEnabled={false}\n            />\n          ))}\n        </FastLayer>\n      </Stage>\n      <div \n        style={{\n          position: 'absolute',\n          top: '50px',\n          backgroundColor: 'white',\n          fontSize: '12px',\n          padding: '5px'\n        }}\n      >\n        {count} BUNNIES\n      </div>\n    </>\n  );\n};\n\nexport default BunnyMark;\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Shapes with react-konva in React\nDESCRIPTION: This example demonstrates how to use react-konva to render various shapes on a canvas in a React application. It creates a Stage containing a Layer with Text, Rectangle, Circle, and Line shapes, each with different styling properties including fill colors, shadows, and gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Shapes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text text=\"Some text on canvas\" fontSize={15} />\n        <Rect\n          x={20}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"red\"\n          shadowBlur={10}\n        />\n        <Circle x={200} y={100} radius={50} fill=\"green\" />\n        <Line\n          x={20}\n          y={200}\n          points={[0, 0, 100, 0, 100, 100]}\n          tension={0.5}\n          closed\n          stroke=\"black\"\n          fillLinearGradientStartPoint={{ x: -50, y: -50 }}\n          fillLinearGradientEndPoint={{ x: 50, y: 50 }}\n          fillLinearGradientColorStops={[0, 'red', 1, 'yellow']}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan and Pinch Zoom in Vanilla JavaScript with Konva\nDESCRIPTION: This snippet shows how to enable pan and pinch zoom for a Konva stage using vanilla JavaScript. It handles touch events to calculate scale and position changes based on multi-touch gestures.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Stage.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// by default Konva prevent some events when node is dragging\n// it improve the performance and work well for 95% of cases\n// we need to enable all events on Konva, even when we are dragging a node\n// so it triggers touchmove correctly\nKonva.hitOnDragEnabled = true;\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n  draggable: true,\n});\n\nconst layer = new Konva.Layer();\n\nconst triangle = new Konva.RegularPolygon({\n  x: 190,\n  y: stage.height() / 2,\n  sides: 3,\n  radius: 80,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nconst circle = new Konva.Circle({\n  x: 380,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCenter(p1, p2) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\n\nlet lastCenter = null;\nlet lastDist = 0;\nlet dragStopped = false;\n\nstage.on('touchmove', function (e) {\n  e.evt.preventDefault();\n  const touch1 = e.evt.touches[0];\n  const touch2 = e.evt.touches[1];\n\n  // we need to restore dragging, if it was cancelled by multi-touch\n  if (touch1 && !touch2 && !stage.isDragging() && dragStopped) {\n    stage.startDrag();\n    dragStopped = false;\n  }\n\n  if (touch1 && touch2) {\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (stage.isDragging()) {\n      dragStopped = true;\n      stage.stopDrag();\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!lastCenter) {\n      lastCenter = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!lastDist) {\n      lastDist = dist;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x: (newCenter.x - stage.x()) / stage.scaleX(),\n      y: (newCenter.y - stage.y()) / stage.scaleX(),\n    };\n\n    const scale = stage.scaleX() * (dist / lastDist);\n\n    stage.scaleX(scale);\n    stage.scaleY(scale);\n\n    // calculate new position of the stage\n    const dx = newCenter.x - lastCenter.x;\n    const dy = newCenter.y - lastCenter.y;\n\n    const newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    stage.position(newPos);\n\n    lastDist = dist;\n    lastCenter = newCenter;\n  }\n});\n\nstage.on('touchend', function () {\n  lastDist = 0;\n  lastCenter = null;\n});\n\nlayer.add(triangle);\nlayer.add(circle);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Using Native 2D Canvas with React-Konva\nDESCRIPTION: React implementation that creates a canvas with 2D drawing operations in a useMemo hook, then uses it as the source for a Konva Image component. The component handles position state management for dragging functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Native_Context_Access.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useMemo, useState } from 'react';\n\nconst App = () => {\n  const [position, setPosition] = useState({ x: 50, y: 50 });\n\n  const canvas = useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 200;\n    canvas.height = 150;\n    const ctx = canvas.getContext('2d');\n\n    // make manual drawings\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(5, 5, canvas.width - 10, canvas.height / 2);\n    ctx.fillStyle = 'red';\n    ctx.beginPath();\n    ctx.arc(100, 75, 50, 0, 2 * Math.PI);\n    ctx.fill();\n\n    return canvas;\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Image\n          x={position.x}\n          y={position.y}\n          image={canvas}\n          draggable\n          onDragEnd={(e) => {\n            setPosition({\n              x: e.target.x(),\n              y: e.target.y(),\n            });\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo/Redo for Draggable Rectangle in React with Konva\nDESCRIPTION: This code snippet creates a React component that renders a Konva stage with a draggable rectangle. It implements undo/redo functionality using React hooks to manage state and history. The component includes undo and redo buttons, and updates the history when the rectangle is dragged.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Undo-Redo.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\n\n\nconst App = () => {\n  const [position, setPosition] = React.useState({ x: 20, y: 20 });\n  // We use refs to keep history to avoid unnecessary re-renders\n  const history = React.useRef([{ x: 20, y: 20 }]);\n  const historyStep = React.useRef(0);\n\n  const handleUndo = () => {\n    if (historyStep.current === 0) {\n      return;\n    }\n    historyStep.current -= 1;\n    const previous = history.current[historyStep.current];\n    setPosition(previous);\n  };\n\n  const handleRedo = () => {\n    if (historyStep.current === history.current.length - 1) {\n      return;\n    }\n    historyStep.current += 1;\n    const next = history.current[historyStep.current];\n    setPosition(next);\n  };\n\n  const handleDragEnd = (e) => {\n    // Remove all states after current step\n    history.current = history.current.slice(0, historyStep.current + 1);\n    const pos = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n    // Push the new state\n    history.current = history.current.concat([pos]);\n    historyStep.current += 1;\n    setPosition(pos);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text text=\"undo\" onClick={handleUndo} />\n        <Text text=\"redo\" x={40} onClick={handleRedo} />\n        <Rect\n          x={position.x}\n          y={position.y}\n          width={50}\n          height={50}\n          fill=\"black\"\n          draggable\n          onDragEnd={handleDragEnd}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Lines with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create different types of lines using Konva.js in vanilla JavaScript. It shows how to initialize a Konva stage, create a layer, and add three different styled lines: a solid red line with rounded caps, a dashed green line, and a blue line with custom dash patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Simple_Line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst redLine = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round'\n});\n\n// line segments with a length of 33px with a gap of 10px\nconst greenLine = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'green',\n  strokeWidth: 2,\n  lineJoin: 'round',\n  dash: [33, 10]\n});\n\n// line segments with a length of 29px with a gap of 20px\n// followed by a dot (0.001px) and another gap of 20px\nconst blueLine = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'blue',\n  strokeWidth: 10,\n  lineCap: 'round',\n  lineJoin: 'round',\n  dash: [29, 20, 0.001, 20]\n});\n\nredLine.move({ x: 0, y: 5 });\ngreenLine.move({ x: 0, y: 55 });\nblueLine.move({ x: 0, y: 105 });\n\nlayer.add(redLine, greenLine, blueLine);\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Movement for Tooltip in Konva.js\nDESCRIPTION: Updates the tooltip position when the mouse moves across the canvas. The tooltip follows the cursor position while maintaining a small vertical offset for better visibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleMouseMove(e) {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  \n  if (tooltip.visible) {\n    tooltip.x = pos.x;\n    tooltip.y = pos.y - 5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG with Konva and canvg in React\nDESCRIPTION: This React component renders an SVG image using both native Konva.Image and the canvg library. It uses the useImage hook for native rendering and dynamically loads the canvg library to render the SVG to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/SVG_On_Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst SOURCE = 'https://konvajs.org/assets/tiger.svg';\n\nconst App = () => {\n  const [nativeImage] = useImage(SOURCE);\n  const [canvgImage, setCanvgImage] = React.useState(null);\n\n  React.useEffect(() => {\n    // Load canvg library and render SVG\n    const script = document.createElement('script');\n    script.src = 'https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js';\n    script.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvg(canvas, SOURCE, {\n        renderCallback: function () {\n          setCanvgImage(canvas);\n        },\n      });\n    };\n    document.head.appendChild(script);\n\n    return () => {\n      script.remove();\n    };\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {nativeImage && (\n          <Image\n            image={nativeImage}\n            width={150}\n            height={150}\n          />\n        )}\n        {canvgImage && (\n          <Image\n            image={canvgImage}\n            x={200}\n            width={150}\n            height={150}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Konva.js Web Worker with Event Proxy\nDESCRIPTION: Complete implementation showing how to run Konva.js in a Web Worker using OffscreenCanvas. Includes main thread setup, worker code with bunny animation, and event proxy system for handling interactions. Features canvas creation, shape rendering, and DOM event forwarding.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Web_Worker.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nconst workerCode = `\n// load konva framework\nimportScripts('https://unpkg.com/konva@9/konva.min.js');\n\n// monkeypatch Konva for offscreen canvas usage\nKonva.Util.createCanvasElement = () => {\n  const canvas = new OffscreenCanvas(1, 1);\n  canvas.style = {};\n  return canvas;\n};\n\n// now we can create our canvas content\nvar stage = new Konva.Stage({\n  width: 200,\n  height: 200,\n});\n\nvar layer = new Konva.Layer();\nstage.add(layer);\n\nvar topGroup = new Konva.Group();\nlayer.add(topGroup);\n\n// counter will show number of bunnies\nvar counter = new Konva.Text({\n  x: 5,\n  y: 35,\n});\ntopGroup.add(counter);\n\n// \"add more bunnies\" button\nvar button = new Konva.Label({\n  x: 5,\n  y: 5,\n  opacity: 0.75,\n});\ntopGroup.add(button);\n\nbutton.add(\n  new Konva.Tag({\n    fill: 'black',\n  })\n);\n\nbutton.add(\n  new Konva.Text({\n    text: 'Push me to add bunnies',\n    fontFamily: 'Calibri',\n    fontSize: 18,\n    padding: 5,\n    fill: 'white',\n  })\n);\n\n// draggable circle to show interactivity\nvar circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 20,\n  fill: 'red',\n  draggable: true,\n});\ntopGroup.add(circle);\n\nself.onmessage = function (evt) {\n  // when canvas is passes we can start our worker\n  if (evt.data.canvas) {\n    var canvas = evt.data.canvas;\n    stage.setSize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    const ctx = canvas.getContext('2d');\n\n    layer.on('draw', () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(layer.getCanvas()._canvas, 0, 0);\n    });\n  }\n  // emulate some drag&drop events\n  if (evt.data.eventName === 'mouseup') {\n    Konva.DD._endDragBefore(evt.data.event);\n  }\n  if (evt.data.eventName === 'touchend') {\n    Konva.DD._endDragBefore(evt.data.event);\n  }\n  if (evt.data.eventName === 'mousemove') {\n    Konva.DD._drag(evt.data.event);\n  }\n  if (evt.data.eventName === 'touchmove') {\n    Konva.DD._drag(evt.data.event);\n  }\n  if (evt.data.eventName === 'mouseup') {\n    Konva.DD._endDragAfter(evt.data.event);\n  }\n  if (evt.data.eventName === 'touchend') {\n    Konva.DD._endDragAfter(evt.data.event);\n  }\n\n  // pass incoming events into the stage\n  if (evt.data.eventName) {\n    const event = evt.data.eventName.replace('mouse', 'pointer');\n    stage['_' + event](evt.data.event);\n  }\n};\n\nfunction requestAnimationFrame(cb) {\n  setTimeout(cb, 16);\n}\n\nasync function runBunnies() {\n  const imgBlob = await fetch('https://konvajs.org/assets/bunny.png').then(\n    (r) => r.blob()\n  );\n  const img = await createImageBitmap(imgBlob);\n\n  var bunnys = [];\n  var gravity = 0.75;\n\n  var startBunnyCount = 100;\n  var isAdding = false;\n  var count = 0;\n  var amount = 10;\n\n  button.on('mousedown', function () {\n    isAdding = true;\n  });\n\n  button.on('mouseup', function () {\n    isAdding = false;\n  });\n\n  for (var i = 0; i < startBunnyCount; i++) {\n    var bunny = new Konva.Image({\n      image: img,\n      transformsEnabled: 'position',\n      x: 10,\n      y: 10,\n      listening: false,\n    });\n\n    bunny.speedX = Math.random() * 10;\n    bunny.speedY = Math.random() * 10 - 5;\n\n    bunnys.push(bunny);\n    counter.text('Bunnies number: ' + bunnys.length);\n    layer.add(bunny);\n  }\n  topGroup.moveToTop();\n\n  function update() {\n    var maxX = stage.width() - 10;\n    var minX = 0;\n    var maxY = stage.height() - 10;\n    var minY = 0;\n    if (isAdding) {\n      for (var i = 0; i < amount; i++) {\n        var bunny = new Konva.Image({\n          image: img,\n          transformsEnabled: 'position',\n          x: 0,\n          y: 0,\n          listening: false,\n        });\n        bunny.speedX = Math.random() * 10;\n        bunny.speedY = Math.random() * 10 - 5;\n        bunnys.push(bunny);\n        layer.add(bunny);\n        counter.text('Bunnies number: ' + bunnys.length);\n        count++;\n      }\n      topGroup.moveToTop();\n    }\n\n    for (var i = 0; i < bunnys.length; i++) {\n      var bunny = bunnys[i];\n      bunny.setX(bunny.getX() + bunny.speedX);\n      bunny.setY(bunny.getY() + bunny.speedY);\n      bunny.speedY += gravity;\n      if (bunny.getX() > maxX - img.width) {\n        bunny.speedX *= -1;\n        bunny.setX(maxX - img.width);\n      } else if (bunny.getX() < minX) {\n        bunny.speedX *= -1;\n        bunny.setX(minX);\n      }\n\n      if (bunny.getY() > maxY - img.height) {\n        bunny.speedY *= -0.85;\n        bunny.setY(maxY - img.height);\n        if (Math.random() > 0.5) {\n          bunny.speedY -= Math.random() * 6;\n        }\n      } else if (bunny.getY() < minY) {\n        bunny.speedY = 0;\n        bunny.setY(minY);\n      }\n    }\n    layer.drawScene();\n    requestAnimationFrame(update);\n  }\n  update();\n}\n\nrunBunnies();\n`;\n\n// Create a blob from the worker code\nconst blob = new Blob([workerCode], { type: 'application/javascript' });\nconst worker = new Worker(URL.createObjectURL(blob));\n\nconst canvas = document.createElement('canvas');\ndocument.body.appendChild(canvas);\ncanvas.style.border = '1px solid black';\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\n// transfer control of the canvas to the worker\nconst offscreen = canvas.transferControlToOffscreen();\nworker.postMessage({ canvas: offscreen }, [offscreen]);\n\n// proxy all events\nconst events = [\n  'mousedown',\n  'mouseup',\n  'mousemove',\n  'mouseenter',\n  'mouseleave',\n  // 'click',\n  // 'dblclick',\n  'touchstart',\n  'touchend',\n  'touchmove',\n];\n\nevents.forEach((eventName) => {\n  canvas.addEventListener(eventName, (event) => {\n    worker.postMessage({\n      eventName,\n      event: {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        type: event.type,\n        button: event.button,\n      },\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates an interactive canvas with circle shapes and custom context menu using vanilla JavaScript and Konva.js. Features include creating circles on double-click, showing a context menu on right-click with pulse and delete options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Context_Menu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create a div to use as a context menu\nconst menuNode = document.createElement('div');\nmenuNode.id = 'menu';\nmenuNode.style.display = 'none';\nmenuNode.style.position = 'absolute';\nmenuNode.style.width = '60px';\nmenuNode.style.backgroundColor = 'white';\nmenuNode.style.boxShadow = '0 0 5px grey';\nmenuNode.style.borderRadius = '3px';\n\n// Create buttons for the menu\nconst pulseButton = document.createElement('button');\npulseButton.textContent = 'Pulse';\npulseButton.style.width = '100%';\npulseButton.style.backgroundColor = 'white';\npulseButton.style.border = 'none';\npulseButton.style.margin = '0';\npulseButton.style.padding = '10px';\n\nconst deleteButton = document.createElement('button');\ndeleteButton.textContent = 'Delete';\ndeleteButton.style.width = '100%';\ndeleteButton.style.backgroundColor = 'white';\ndeleteButton.style.border = 'none';\ndeleteButton.style.margin = '0';\ndeleteButton.style.padding = '10px';\n\n// Add hover effects\npulseButton.addEventListener('mouseover', () => {\n  pulseButton.style.backgroundColor = 'lightgray';\n});\npulseButton.addEventListener('mouseout', () => {\n  pulseButton.style.backgroundColor = 'white';\n});\n\ndeleteButton.addEventListener('mouseover', () => {\n  deleteButton.style.backgroundColor = 'lightgray';\n});\ndeleteButton.addEventListener('mouseout', () => {\n  deleteButton.style.backgroundColor = 'white';\n});\n\n// Add buttons to menu\nmenuNode.appendChild(pulseButton);\nmenuNode.appendChild(deleteButton);\ndocument.body.appendChild(menuNode);\n\n// Set up the stage\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// add default shape\nconst shape = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 50,\n  fill: 'red',\n  shadowBlur: 10,\n});\nlayer.add(shape);\n\nlet currentShape;\n\n// Setup the menu functionality\npulseButton.addEventListener('click', () => {\n  currentShape.to({\n    scaleX: 2,\n    scaleY: 2,\n    onFinish: () => {\n      currentShape.to({ scaleX: 1, scaleY: 1 });\n    },\n  });\n});\n\ndeleteButton.addEventListener('click', () => {\n  currentShape.destroy();\n});\n\n// Hide menu on document click\nwindow.addEventListener('click', () => {\n  menuNode.style.display = 'none';\n});\n\n// Add double click event to create new shapes\nstage.on('dblclick dbltap', function () {\n  // add a new shape\n  const newShape = new Konva.Circle({\n    x: stage.getPointerPosition().x,\n    y: stage.getPointerPosition().y,\n    radius: 10 + Math.random() * 30,\n    fill: Konva.Util.getRandomColor(),\n    shadowBlur: 10,\n  });\n  layer.add(newShape);\n});\n\n// Add context menu event\nstage.on('contextmenu', function (e) {\n  // prevent default behavior\n  e.evt.preventDefault();\n  if (e.target === stage) {\n    // if we are on empty place of the stage we will do nothing\n    return;\n  }\n  currentShape = e.target;\n  // show menu\n  menuNode.style.display = 'initial';\n  const containerRect = stage.container().getBoundingClientRect();\n  menuNode.style.top =\n    containerRect.top + stage.getPointerPosition().y + 4 + 'px';\n  menuNode.style.left =\n    containerRect.left + stage.getPointerPosition().x + 4 + 'px';\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Text with Konva Transformer in Vue.js\nDESCRIPTION: This snippet demonstrates how to implement text resizing in a Vue.js application using vue-konva. It uses Vue's composition API with ref, computed, and onMounted hooks to manage the text element's properties and handle transformation events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/11_Resize_Text.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"textConfig\"\n        @transform=\"handleTransform\"\n        ref=\"textRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textWidth = ref(200);\n\nconst textConfig = computed(() => ({\n  x: 50,\n  y: 50,\n  text: 'Hello from Konva! Try to resize me.',\n  fontSize: 24,\n  draggable: true,\n  width: textWidth.value\n}));\n\nconst transformerConfig = {\n  enabledAnchors: ['middle-left', 'middle-right']\n};\n\nconst textRef = ref(null);\nconst transformerRef = ref(null);\n\nconst handleTransform = () => {\n  const node = textRef.value.getNode();\n  textWidth.value = node.width() * node.scaleX();\n  node.scaleX(1);\n};\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([textRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Event Binding in Konva.js\nDESCRIPTION: This snippet demonstrates how to bind event handlers to nodes in Konva.js. It covers various event types (click, touch, etc.), event propagation control, namespace usage, and accessing event properties including getting native events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Shape Transformation with Vanilla Konva.js\nDESCRIPTION: This example demonstrates how to stop transforming a shape when its width exceeds 200 pixels using vanilla Konva.js. The code creates a rectangular shape with a transformer and adds an event listener for the transform event to check the width and stop transformation when needed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/09_Stop_Transform.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\n});\nlayer.add(tr);\n\nrect.on('transform', function () {\nconst width = rect.width() * rect.scaleX();\nif (width > 200) {\ntr.stopTransform();\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Drag and Resize with Vue-Konva (Partial)\nDESCRIPTION: This is a partial Vue implementation for Konva.js boundary limitations. The code shows the template structure but is incomplete in the script section. It demonstrates how to structure the component with v-stage, v-layer, and other Vue-Konva components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-rect\n        v-for=\"(rect, i) in rectangles\"\n        :key=\"i\"\n        :config=\"rect\"\n        @dragmove=\"handleRectDragMove\"\n      />\n      <v-transformer\n        ref=\"transformerRef\"\n        :config=\"transformerConfig\"\n        @dragmove=\"handleTransformerDragMove\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      stageConfig: {\n        width: window.innerWidth,\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Listening on Shapes in Konva.js\nDESCRIPTION: Turns off event listening for individual shapes to improve performance when these shapes don't need to respond to user interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nshape.listening(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with Canvas API in Vanilla JavaScript\nDESCRIPTION: This code implements free drawing functionality using direct Canvas API access in vanilla JavaScript. It creates an offscreen canvas and uses Konva.Image to display the drawings on the stage. The implementation supports both brush and eraser modes, with mouse and touch events for drawing operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create tool select\nconst select = document.createElement('select');\nselect.innerHTML = `\n  <option value=\"brush\">Brush</option>\n  <option value=\"eraser\">Eraser</option>\n`;\ndocument.body.appendChild(select);\n\nconst width = window.innerWidth;\nconst height = window.innerHeight - 25;\n\n// first we need Konva core things: stage and layer\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// then we are going to draw into special canvas element\nconst canvas = document.createElement('canvas');\ncanvas.width = stage.width();\ncanvas.height = stage.height();\n\n// created canvas we can add to layer as \"Konva.Image\" element\nconst image = new Konva.Image({\n  image: canvas,\n  x: 0,\n  y: 0,\n});\nlayer.add(image);\n\n// Good. Now we need to get access to context element\nconst context = canvas.getContext('2d');\ncontext.strokeStyle = '#df4b26';\ncontext.lineJoin = 'round';\ncontext.lineWidth = 5;\n\nlet isPaint = false;\nlet lastPointerPosition;\nlet mode = 'brush';\n\n// now we need to bind some events\n// we need to start drawing on mousedown\n// and stop drawing on mouseup\nimage.on('mousedown touchstart', function () {\n  isPaint = true;\n  lastPointerPosition = stage.getPointerPosition();\n});\n\nstage.on('mouseup touchend', function () {\n  isPaint = false;\n});\n\n// and core function - drawing\nstage.on('mousemove touchmove', function () {\n  if (!isPaint) {\n    return;\n  }\n\n  if (mode === 'brush') {\n    context.globalCompositeOperation = 'source-over';\n  }\n  if (mode === 'eraser') {\n    context.globalCompositeOperation = 'destination-out';\n  }\n  context.beginPath();\n\n  const localPos = {\n    x: lastPointerPosition.x - image.x(),\n    y: lastPointerPosition.y - image.y(),\n  };\n  context.moveTo(localPos.x, localPos.y);\n  const pos = stage.getPointerPosition();\n  const newLocalPos = {\n    x: pos.x - image.x(),\n    y: pos.y - image.y(),\n  };\n  context.lineTo(newLocalPos.x, newLocalPos.y);\n  context.closePath();\n  context.stroke();\n\n  lastPointerPosition = pos;\n  // redraw manually\n  layer.batchDraw();\n});\n\nselect.addEventListener('change', function () {\n  mode = select.value;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing Canvas Component with React and Konva\nDESCRIPTION: A React component that implements a drawing canvas with pen and eraser tools using Konva.js. Features include vector-based line storage, mouse/touch event handling, smooth lines with tension, and tool selection. Uses React.useRef for performance optimization and maintains drawing state in React.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Free_Drawing.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Line, Text } from 'react-konva';\n\nconst App = () => {\n  const [tool, setTool] = React.useState('pen');\n  const [lines, setLines] = React.useState([]);\n  const isDrawing = React.useRef(false);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <div>\n      <select\n        value={tool}\n        onChange={(e) => {\n          setTool(e.target.value);\n        }}\n      >\n        <option value=\"pen\">Pen</option>\n        <option value=\"eraser\">Eraser</option>\n      </select>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n      >\n        <Layer>\n          <Text text=\"Just start drawing\" x={5} y={30} />\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke=\"#df4b26\"\n              strokeWidth={5}\n              tension={0.5}\n              lineCap=\"round\"\n              lineJoin=\"round\"\n              globalCompositeOperation={\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\n              }\n            />\n          ))}        \n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Custom Font Implementation with Vue and Konva\nDESCRIPTION: This Vue component demonstrates how to load and apply a custom font to Konva Text nodes in a Vue application. It uses reactive refs to track text configuration and the onMounted lifecycle hook to handle font loading with the CSS Font Loading API.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Custom_Font.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-text :config=\"debugTextConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = ref({\n  x: 50,\n  y: 50,\n  fontSize: 40,\n  text: 'A text with custom font.',\n  width: 250,\n  fontFamily: 'Arial'\n});\n\nconst debugTextConfig = ref({\n  x: 50,\n  y: 0,\n  fontSize: 16,\n  text: 'Loading font...',\n  fill: 'green'\n});\n\nonMounted(() => {\n  // Load font using a regular stylesheet link (more reliable)\n  const fontLink = document.createElement('link');\n  fontLink.href = 'https://fonts.googleapis.com/css2?family=Kavivanar&display=swap';\n  fontLink.rel = 'stylesheet';\n  document.head.appendChild(fontLink);\n  \n  // Use the document.fonts.ready promise to detect when fonts are loaded\n  document.fonts.ready.then(() => {\n    // Check if our font is loaded\n    if (document.fonts.check('1em Kavivanar')) {\n      debugTextConfig.value.text = 'Font loaded successfully!';\n      textConfig.value.fontFamily = 'Kavivanar';\n    } else {\n      // Fallback - try with a small delay\n      setTimeout(() => {\n        debugTextConfig.value.text = 'Using fallback timer - attempting to set font now';\n        textConfig.value.fontFamily = 'Kavivanar';\n      }, 500);\n    }\n  }).catch(err => {\n    debugTextConfig.value.text = 'Error loading font: ' + err.message;\n    debugTextConfig.value.fill = 'red';\n    console.error('Font loading failed:', err);\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Wheel of Fortune Game with Konva and HTML5 Canvas\nDESCRIPTION: A complete implementation of a Wheel of Fortune game using Konva.js. The code creates a spinning wheel with random colored wedges and rewards, handles user interaction for spinning, applies angular friction to slow the wheel, and displays the final prize when the wheel stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Wheel_of_Fortune.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nKonva.angleDeg = false;\nlet angularVelocity = 6;\nconst angularVelocities = [];\nlet lastRotation = 0;\nlet controlled = false;\nconst numWedges = 25;\nconst angularFriction = 0.2;\nlet target, activeWedge, stage, layer, wheel, pointer;\nlet finished = false;\n\nfunction getAverageAngularVelocity() {\n  const total = angularVelocities.reduce((sum, vel) => sum + vel, 0);\n  return angularVelocities.length ? total / angularVelocities.length : 0;\n}\n\nfunction purifyColor(color) {\n  const randIndex = Math.round(Math.random() * 3);\n  color[randIndex] = 0;\n  return color;\n}\n\nfunction getRandomColor() {\n  const r = 100 + Math.round(Math.random() * 55);\n  const g = 100 + Math.round(Math.random() * 55);\n  const b = 100 + Math.round(Math.random() * 55);\n  return purifyColor([r, g, b]);\n}\n\nfunction getRandomReward() {\n  const mainDigit = Math.round(Math.random() * 9);\n  return mainDigit + '\\n0\\n0';\n}\n\nfunction addWedge(n) {\n  const s = getRandomColor();\n  const reward = getRandomReward();\n  const [r, g, b] = s;\n  const angle = (2 * Math.PI) / numWedges;\n\n  const endColor = `rgb(${r},${g},${b})`;\n  const startColor = `rgb(${r + 100},${g + 100},${b + 100})`;\n\n  const wedge = new Konva.Group({\n    rotation: (2 * n * Math.PI) / numWedges,\n  });\n\n  const wedgeBackground = new Konva.Wedge({\n    radius: 400,\n    angle: angle,\n    fillRadialGradientStartPoint: 0,\n    fillRadialGradientStartRadius: 0,\n    fillRadialGradientEndPoint: 0,\n    fillRadialGradientEndRadius: 400,\n    fillRadialGradientColorStops: [0, startColor, 1, endColor],\n    fill: '#64e9f8',\n    fillPriority: 'radial-gradient',\n    stroke: '#ccc',\n    strokeWidth: 2,\n  });\n\n  wedge.add(wedgeBackground);\n\n  const text = new Konva.Text({\n    text: reward,\n    fontFamily: 'Calibri',\n    fontSize: 50,\n    fill: 'white',\n    align: 'center',\n    stroke: 'yellow',\n    strokeWidth: 1,\n    rotation: (Math.PI + angle) / 2,\n    x: 380,\n    y: 30,\n    listening: false,\n  });\n\n  wedge.add(text);\n  text.cache();\n\n  wedge.startRotation = wedge.rotation();\n  wheel.add(wedge);\n}\n\nfunction animate(frame) {\n  // handle wheel spin\n  const angularVelocityChange =\n    (angularVelocity * frame.timeDiff * (1 - angularFriction)) / 1000;\n  angularVelocity -= angularVelocityChange;\n\n  // activate / deactivate wedges based on point intersection\n  const shape = stage.getIntersection({\n    x: stage.width() / 2,\n    y: 100,\n  });\n\n  if (controlled) {\n    if (angularVelocities.length > 10) {\n      angularVelocities.shift();\n    }\n\n    angularVelocities.push(\n      ((wheel.rotation() - lastRotation) * 1000) / frame.timeDiff\n    );\n  } else {\n    const diff = (frame.timeDiff * angularVelocity) / 1000;\n    if (diff > 0.0001) {\n      wheel.rotate(diff);\n    } else if (!finished && !controlled) {\n      if (shape) {\n        const text = shape.getParent().findOne('Text').text();\n        const price = text.split('\\n').join('');\n        alert('Your price is ' + price);\n      }\n      finished = true;\n    }\n  }\n  lastRotation = wheel.rotation();\n\n  if (shape && (!activeWedge || shape._id !== activeWedge._id)) {\n    pointer.y(20);\n\n    new Konva.Tween({\n      node: pointer,\n      duration: 0.3,\n      y: 30,\n      easing: Konva.Easings.ElasticEaseOut,\n    }).play();\n\n    if (activeWedge) {\n      activeWedge.fillPriority('radial-gradient');\n    }\n    shape.fillPriority('fill');\n    activeWedge = shape;\n  }\n}\n\nstage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: 400,\n});\n\nlayer = new Konva.Layer();\nwheel = new Konva.Group({\n  x: stage.width() / 2,\n  y: 410,\n});\n\nfor (let n = 0; n < numWedges; n++) {\n  addWedge(n);\n}\n\npointer = new Konva.Wedge({\n  fillRadialGradientStartPoint: 0,\n  fillRadialGradientStartRadius: 0,\n  fillRadialGradientEndPoint: 0,\n  fillRadialGradientEndRadius: 30,\n  fillRadialGradientColorStops: [0, 'white', 1, 'red'],\n  stroke: 'white',\n  strokeWidth: 2,\n  lineJoin: 'round',\n  angle: 1,\n  radius: 30,\n  x: stage.width() / 2,\n  y: 33,\n  rotation: -90,\n  shadowColor: 'black',\n  shadowOffsetX: 3,\n  shadowOffsetY: 3,\n  shadowBlur: 2,\n  shadowOpacity: 0.5,\n});\n\n// add components to the stage\nlayer.add(wheel);\nlayer.add(pointer);\nstage.add(layer);\n\n// bind events\nwheel.on('mousedown touchstart', function (evt) {\n  angularVelocity = 0;\n  controlled = true;\n  target = evt.target;\n  finished = false;\n});\n\nstage.on('mouseup touchend', function () {\n  controlled = false;\n  angularVelocity = getAverageAngularVelocity() * 5;\n\n  if (angularVelocity > 20) {\n    angularVelocity = 20;\n  } else if (angularVelocity < -20) {\n    angularVelocity = -20;\n  }\n\n  angularVelocities.length = 0;\n});\n\nstage.on('mousemove touchmove', function () {\n  const mousePos = stage.getPointerPosition();\n  if (controlled && mousePos && target) {\n    const x = mousePos.x - wheel.getX();\n    const y = mousePos.y - wheel.getY();\n    const atan = Math.atan(y / x);\n    const rotation = x >= 0 ? atan : atan + Math.PI;\n\n    wheel.rotation(rotation);\n  }\n});\n\n// create animation\nconst anim = new Konva.Animation(animate, layer);\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Creating Stage Preview by Cloning in Vanilla JavaScript with Konva.js\nDESCRIPTION: This code demonstrates how to create a small preview of a Konva stage by cloning the original layer. It dynamically updates the preview when shapes are dragged or new shapes are added via double-click. The example creates a separate preview container positioned in the top-right corner with a scaled-down version of the main canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create preview container\nconst preview = document.createElement('div');\npreview.id = 'preview';\npreview.style.position = 'absolute';\npreview.style.top = '2px';\npreview.style.right = '2px';\npreview.style.border = '1px solid grey';\npreview.style.backgroundColor = 'lightgrey';\ndocument.body.appendChild(preview);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// generate random shapes\nfor (let i = 0; i < 10; i++) {\n  const shape = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: Math.random() * 30 + 5,\n    fill: Konva.Util.getRandomColor(),\n    draggable: true,\n    // each shape MUST have unique name\n    // so we can easily update the preview clone by name\n    name: 'shape-' + i,\n  });\n  layer.add(shape);\n}\n\n// create smaller preview stage\nconst previewStage = new Konva.Stage({\n  container: 'preview',\n  width: window.innerWidth / 4,\n  height: window.innerHeight / 4,\n  scaleX: 1 / 4,\n  scaleY: 1 / 4,\n});\n\n// clone original layer, and disable all events on it\nlet previewLayer = layer.clone({ listening: false });\npreviewStage.add(previewLayer);\n\nfunction updatePreview() {\n  // we just need to update ALL nodes in the preview\n  layer.children.forEach((shape) => {\n    // find cloned node\n    const clone = previewLayer.findOne('.' + shape.name());\n    // update its position from the original\n    clone.position(shape.position());\n  });\n}\n\nstage.on('dragmove', updatePreview);\n\n// add new shapes on double click or double tap\nstage.on('dblclick dbltap', () => {\n  const shape = new Konva.Circle({\n    x: stage.getPointerPosition().x,\n    y: stage.getPointerPosition().y,\n    radius: Math.random() * 30 + 5,\n    fill: Konva.Util.getRandomColor(),\n    draggable: true,\n    name: 'shape-' + layer.children.length,\n  });\n  layer.add(shape);\n\n  // remove all layer\n  previewLayer.destroy();\n  // generate new one\n  previewLayer = layer.clone({ listening: false });\n  previewStage.add(previewLayer);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu with Vue and Konva.js\nDESCRIPTION: Creates an interactive canvas with circle shapes and custom context menu using Vue.js and Konva.js. Features template-based rendering of shapes and menu, with reactive state management for shape manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Context_Menu.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div style=\"position: relative\">\n    <v-stage\n      ref=\"stageRef\"\n      :config=\"stageConfig\"\n      @dblclick=\"handleDblClick\"\n      @contextmenu=\"handleContextMenu\"\n    >\n      <v-layer>\n        <v-circle\n          v-for=\"circle in circles\"\n          :key=\"circle.id\"\n          :config=\"{\n            id: circle.id,\n            x: circle.x,\n            y: circle.y,\n            radius: circle.radius,\n            fill: circle.fill,\n            shadowBlur: circle.shadowBlur,\n            scaleX: circle.scaleX || 1,\n            scaleY: circle.scaleY || 1,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    \n    <!-- Context Menu -->\n    <div\n      v-if=\"showMenu\"\n      :style=\"{\n        position: 'absolute',\n        top: menuPosition.y + 'px',\n        left: menuPosition.x + 'px',\n        width: '60px',\n        backgroundColor: 'white',\n        boxShadow: '0 0 5px grey',\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with Canvas API in React\nDESCRIPTION: This code demonstrates how to implement free drawing functionality with direct Canvas API access in a React application using react-konva. It creates an offscreen canvas managed with React.useMemo and uses Konva.Image to display the drawings. The implementation handles brush and eraser modes with mouse and touch events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\n\nconst App = () => {\n  const [tool, setTool] = React.useState('brush');\n  const isDrawing = React.useRef(false);\n  const imageRef = React.useRef(null);\n  const lastPos = React.useRef(null);\n\n  const { canvas, context } = React.useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight - 25;\n    const context = canvas.getContext('2d');\n    context.strokeStyle = '#df4b26';\n    context.lineJoin = 'round';\n    context.lineWidth = 5;\n    return { canvas, context };\n  }, []);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    lastPos.current = e.target.getStage().getPointerPosition();\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isDrawing.current) {\n      return;\n    }\n\n    const image = imageRef.current;\n    const stage = e.target.getStage();\n\n    context.globalCompositeOperation = tool === 'eraser' ? 'destination-out' : 'source-over';\n    context.beginPath();\n\n    const localPos = {\n      x: lastPos.current.x - image.x(),\n      y: lastPos.current.y - image.y(),\n    };\n    context.moveTo(localPos.x, localPos.y);\n\n    const pos = stage.getPointerPosition();\n    const newLocalPos = {\n      x: pos.x - image.x(),\n      y: pos.y - image.y(),\n    };\n    context.lineTo(newLocalPos.x, newLocalPos.y);\n    context.closePath();\n    context.stroke();\n\n    lastPos.current = pos;\n    image.getLayer().batchDraw();\n  };\n\n  return (\n    <>\n      <select\n        value={tool}\n        onChange={(e) => {\n          setTool(e.target.value);\n        }}\n      >\n        <option value=\"brush\">Brush</option>\n        <option value=\"eraser\">Eraser</option>\n      </select>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight - 25}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n      >\n        <Layer>\n          <Image\n            ref={imageRef}\n            image={canvas}\n            x={0}\n            y={0}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Save/Load and Undo/Redo in React with react-konva\nDESCRIPTION: This code snippet shows how to implement save/load functionality and undo/redo operations in a React application using react-konva. It creates a canvas with draggable images that can have filters applied, and allows adding new images, undoing, and redoing actions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\n\nconst App = () => {\n  const [images, setImages] = useState([\n    { x: 50, y: 50, filter: 'none' },\n    { x: 150, y: 50, filter: 'blur' }\n  ]);\n  const [history, setHistory] = useState([]);\n  const [historyStep, setHistoryStep] = useState(0);\n  const imageObj = useRef(null);\n\n  useEffect(() => {\n    imageObj.current = new window.Image();\n    imageObj.current.src = '/assets/lion.png';\n    imageObj.current.onload = () => {\n      setHistory([JSON.stringify(images)]);\n    };\n  }, []);\n\n  const handleDragEnd = (index, e) => {\n    const newImages = [...images];\n    newImages[index] = {\n      ...newImages[index],\n      x: e.target.x(),\n      y: e.target.y()\n    };\n    setImages(newImages);\n    saveHistory(newImages);\n  };\n\n  const handleClick = (index) => {\n    const newImages = [...images];\n    newImages[index] = {\n      ...newImages[index],\n      filter: newImages[index].filter === 'none' ? 'blur' : 'none'\n    };\n    setImages(newImages);\n    saveHistory(newImages);\n  };\n\n  const saveHistory = (newImages) => {\n    const newHistory = history.slice(0, historyStep + 1);\n    newHistory.push(JSON.stringify(newImages));\n    setHistory(newHistory);\n    setHistoryStep(newHistory.length - 1);\n  };\n\n  const handleAdd = () => {\n    const newImages = [...images, {\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      filter: 'none'\n    }];\n    setImages(newImages);\n    saveHistory(newImages);\n  };\n\n  const handleUndo = () => {\n    if (historyStep === 0) return;\n    const newStep = historyStep - 1;\n    setHistoryStep(newStep);\n    setImages(JSON.parse(history[newStep]));\n  };\n\n  const handleRedo = () => {\n    if (historyStep === history.length - 1) return;\n    const newStep = historyStep + 1;\n    setHistoryStep(newStep);\n    setImages(JSON.parse(history[newStep]));\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: '10px' }}>\n        <button onClick={handleAdd}>Add Image</button>\n        <button onClick={handleUndo}>Undo</button>\n        <button onClick={handleRedo}>Redo</button>\n      </div>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {imageObj.current && images.map((img, i) => (\n            <Image\n              key={i}\n              image={imageObj.current}\n              x={img.x}\n              y={img.y}\n              width={100}\n              height={100}\n              draggable\n              filters={img.filter === 'blur' ? [Konva.Filters.Blur] : []}\n              blurRadius={img.filter === 'blur' ? 10 : 0}\n              onDragEnd={(e) => handleDragEnd(i, e)}\n              onClick={() => handleClick(i)}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Changing Shape Colors on Click with React-Konva\nDESCRIPTION: Implementation of color-changing shapes using React and React-Konva. This example uses React state hooks to manage the colors of triangle and circle components, updating the state on click events to trigger re-renders with new colors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Shape_Color_on_Click.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Circle } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [triangleColor, setTriangleColor] = useState('#00D2FF');\n  const [circleColor, setCircleColor] = useState('red');\n\n  const handleTriangleClick = () => {\n    setTriangleColor(triangleColor === 'yellow' ? '#00D2FF' : 'yellow');\n  };\n\n  const handleCircleClick = () => {\n    setCircleColor(circleColor === 'red' ? '#00d00f' : 'red');\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <RegularPolygon\n          x={80}\n          y={120}\n          sides={3}\n          radius={50}\n          fill={triangleColor}\n          stroke=\"black\"\n          strokeWidth={4}\n          onClick={handleTriangleClick}\n        />\n        <Circle\n          x={180}\n          y={120}\n          radius={50}\n          fill={circleColor}\n          stroke=\"black\"\n          strokeWidth={4}\n          onClick={handleCircleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Regular Polygon with Vanilla Konva.js\nDESCRIPTION: This snippet shows how to create a hexagon using Konva.js. It creates a stage, adds a layer, and then adds a regular polygon with 6 sides, configuring its position, radius, fill color, stroke color and stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/RegularPolygon.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst hexagon = new Konva.RegularPolygon({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  sides: 6,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(hexagon);\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Easing Animation with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create a basic linear animation using Konva.js in vanilla JavaScript. It sets up a stage with a circle shape and animates the circle's horizontal position on click using Konva.Tween.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Linear_Easing.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst circle = new Konva.Circle({\nx: 100,\ny: height / 2,\nradius: 70,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nlayer.add(circle);\nstage.add(layer);\n\ncircle.on('click tap', () => {\n// simple tween\nconst tween = new Konva.Tween({\nnode: circle,\nduration: 1,\nx: width - 100,\neasing: Konva.Easings.Linear,\n});\ntween.play();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stage Preview in React with Konva\nDESCRIPTION: This React implementation creates a stage preview using React Konva components. It maintains a state of shapes that are rendered both in the main stage and in a scaled-down preview stage. The preview updates automatically when shapes are dragged or new shapes are added through double-clicking, using React's state management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst App = () => {\n  const [shapes, setShapes] = React.useState(() =>\n    Array.from({ length: 10 }, (_, i) => ({\n      id: i,\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      radius: Math.random() * 30 + 5,\n      fill: getRandomColor(),\n    }))\n  );\n\n  const handleDragMove = (e, id) => {\n    const { x, y } = e.target.position();\n    setShapes(shapes.map(shape => \n      shape.id === id ? { ...shape, x, y } : shape\n    ));\n  };\n\n  const handleDblClick = (e) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    const newShape = {\n      id: shapes.length,\n      x: pos.x,\n      y: pos.y,\n      radius: Math.random() * 30 + 5,\n      fill: getRandomColor(),\n    };\n    setShapes([...shapes, newShape]);\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onDblClick={handleDblClick}\n        onTap={handleDblClick}\n      >\n        <Layer>\n          {shapes.map(shape => (\n            <Circle\n              key={shape.id}\n              {...shape}\n              draggable\n              onDragMove={(e) => handleDragMove(e, shape.id)}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <div\n        style={{\n          position: 'absolute',\n          top: '2px',\n          right: '2px',\n          border: '1px solid grey',\n          backgroundColor: 'lightgrey',\n        }}\n      >\n        <Stage\n          width={window.innerWidth / 4}\n          height={window.innerHeight / 4}\n          scaleX={1/4}\n          scaleY={1/4}\n        >\n          <Layer>\n            {shapes.map(shape => (\n              <Circle\n                key={shape.id}\n                {...shape}\n                listening={false}\n              />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated GIF with Vue and KonvaJS\nDESCRIPTION: Vue 3 component implementation for displaying animated GIFs on Konva canvas using gifler. Uses Vue's composition API with refs and lifecycle hooks for managing the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/GIF_On_Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-image\n        :config=\"{ image: canvas }\"\n        ref=\"imageRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nconst canvas = document.createElement('canvas');\nconst imageRef = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nonMounted(() => {\n  const script = document.createElement('script');\n  script.src = 'https://unpkg.com/gifler@0.1.0/gifler.min.js';\n  \n  script.onload = () => {\n    function onDrawFrame(ctx, frame) {\n      canvas.width = frame.width;\n      canvas.height = frame.height;\n      ctx.drawImage(frame.buffer, 0, 0);\n      imageRef.value.getNode().getLayer().batchDraw();\n    }\n\n    gifler('https://konvajs.org/assets/yoda.gif').frames(canvas, onDrawFrame);\n  };\n\n  document.head.appendChild(script);\n  \n  return () => script.remove();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop with React in Konva.js\nDESCRIPTION: This React component creates a draggable red circle using react-konva. It uses useState to track the circle's position and updates the state on drag end. The component also implements cursor styling on mouse enter and leave events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/01_Drag_and_Drop.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [position, setPosition] = useState({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle\n          x={position.x}\n          y={position.y}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          draggable\n          onMouseEnter={(e) => {\n            document.body.style.cursor = 'pointer';\n          }}\n          onMouseLeave={(e) => {\n            document.body.style.cursor = 'default';\n          }}\n          onDragEnd={(e) => {\n            setPosition({\n              x: e.target.x(),\n              y: e.target.y()\n            });\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Constraints in Vanilla Konva.js\nDESCRIPTION: A complete implementation demonstrating horizontal-only and vertical-only drag constraints using Konva.js. Two text objects are created, one restricted to horizontal movement by fixing its Y position, and the other restricted to vertical movement by fixing its X position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/07_Simple_Drag_Bounds.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst horizontalText = new Konva.Text({\n  x: 50,\n  y: 50,\n  text: 'Drag me horizontally',\n  fontSize: 16,\n  draggable: true,\n  fill: 'black',\n});\n\nhorizontalText.on('dragmove', function () {\n  // horizontal only\n  this.y(50);\n});\n\nconst verticalText = new Konva.Text({\n  x: 200,\n  y: 50,\n  text: 'Drag me vertically',\n  fontSize: 16,\n  draggable: true,\n  fill: 'black',\n});\n\nverticalText.on('dragmove', function () {\n  // vertical only\n  this.x(200);\n});\n\nlayer.add(horizontalText);\nlayer.add(verticalText);\n```\n\n----------------------------------------\n\nTITLE: Event Binding for Konva Nodes in JavaScript\nDESCRIPTION: Illustrates how to bind various events to a Konva node, including mouse events, touch events, and custom events. Shows examples of event handling, event propagation control, and event delegation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop for Images in React Konva Canvas\nDESCRIPTION: This React component demonstrates how to implement drag and drop functionality for images onto a Konva canvas. It uses the HTML5 drag and drop API to capture images, then positions them on the canvas where they were dropped. Each dropped image becomes draggable within the canvas, and is centered at its drop position using offset properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Drop_Image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image';\n\nconst URLImage = ({ image }) => {\n  const [img] = useImage(image.src);\n  return (\n    <Image\n      image={img}\n      x={image.x}\n      y={image.y}\n      // I will use offset to set origin to the center of the image\n      offsetX={img ? img.width / 2 : 0}\n      offsetY={img ? img.height / 2 : 0}\n      draggable\n    />\n  );\n};\n\nconst App = () => {\n  const dragUrl = React.useRef();\n  const stageRef = React.useRef();\n  const [images, setImages] = React.useState([]);\n  return (\n    <div>\n      Try to drag and drop the image into the stage:\n      <br />\n      <img\n        alt=\"lion\"\n        src=\"https://konvajs.org/assets/lion.png\"\n        draggable=\"true\"\n        onDragStart={(e) => {\n          dragUrl.current = e.target.src;\n        }}\n      />\n      <div\n        onDrop={(e) => {\n          e.preventDefault();\n          // register event position\n          stageRef.current.setPointersPositions(e);\n          // add image\n          setImages(\n            images.concat([\n              {\n                ...stageRef.current.getPointerPosition(),\n                src: dragUrl.current,\n              },\n            ])\n          );\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        <Stage\n          width={window.innerWidth}\n          height={window.innerHeight}\n          style={{ border: '1px solid grey' }}\n          ref={stageRef}\n        >\n          <Layer>\n            {images.map((image) => {\n              return <URLImage image={image} />;\n            })}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React KonvaJS Rectangle Selection Component\nDESCRIPTION: React implementation of a multi-selection rectangle component using KonvaJS. Includes draggable rectangles, transformer for resizing, and selection rectangle functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/01_Basic_demo.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nkey={rect.id}\n            id={rect.id}\n            x={rect.x}\n            y={rect.y}\n            width={rect.width}\n            height={rect.height}\n            fill={rect.fill}\n            name={rect.name}\n            draggable\n            ref={node => {\n              if (node) {\n                rectRefs.current.set(rect.id, node);\n              }\n            }}\n            onDragEnd={handleDragEnd}\n          />\n        ))}\n        \n        {/* Single transformer for all selected shapes */}\n        <Transformer\n          ref={transformerRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // Limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n          onTransformEnd={handleTransformEnd}\n        />\n        \n        {/* Selection rectangle */}\n        {selectionRectangle.visible && (\n          <Rect\n            x={Math.min(selectionRectangle.x1, selectionRectangle.x2)}\n            y={Math.min(selectionRectangle.y1, selectionRectangle.y2)}\n            width={Math.abs(selectionRectangle.x2 - selectionRectangle.x1)}\n            height={Math.abs(selectionRectangle.y2 - selectionRectangle.y1)}\n            fill=\"rgba(0,0,255,0.5)\"\n          />\n        )}\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Image Preview in Vue with vue-konva\nDESCRIPTION: This Vue.js implementation demonstrates creating a scaled preview of a Konva canvas. It uses vue-konva to create and manage interactive shapes on the stage, and generates a smaller preview image using toDataURL with reduced pixel ratio for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div style=\"position: relative\">\n    <v-stage\n      ref=\"stageRef\"\n      :config=\"stageConfig\"\n      @dblclick=\"handleDblClick\"\n      @tap=\"handleDblClick\"\n    >\n      <v-layer>\n        <v-circle\n          v-for=\"shape in shapes\"\n          :key=\"shape.id\"\n          :config=\"{\n            ...shape,\n            draggable: true\n          }\"\n          @dragend=\"(e) => handleDragEnd(e, shape.id)\"\n        />\n      </v-layer>\n    </v-stage>\n    <img\n      :src=\"previewUrl\"\n      alt=\"preview\"\n      style=\"position: absolute; top: 2px; right: 2px; border: 1px solid grey; background-color: lightgrey\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst shapes = ref(\n  Array.from({ length: 10 }, (_, i) => ({\n    id: i,\n    x: Math.random() * stageConfig.width,\n    y: Math.random() * stageConfig.height,\n    radius: Math.random() * 30 + 5,\n    fill: getRandomColor(),\n  }))\n);\n\nconst previewUrl = ref('');\nconst stageRef = ref(null);\n\nconst updatePreview = () => {\n  if (!stageRef.value) return;\n  const scale = 1 / 4;\n  const url = stageRef.value.getNode().toDataURL({ pixelRatio: scale });\n  previewUrl.value = url;\n};\n\nconst handleDragEnd = (e, id) => {\n  const { x, y } = e.target.position();\n  shapes.value = shapes.value.map(shape =>\n    shape.id === id ? { ...shape, x, y } : shape\n  );\n  updatePreview();\n};\n\nconst handleDblClick = (e) => {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  const newShape = {\n    id: shapes.value.length,\n    x: pos.x,\n    y: pos.y,\n    radius: Math.random() * 30 + 5,\n    fill: getRandomColor(),\n  };\n  shapes.value.push(newShape);\n  updatePreview();\n};\n\nonMounted(() => {\n  updatePreview();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Shapes with Vanilla JavaScript and Konva\nDESCRIPTION: This code demonstrates how to create an arc shape using vanilla JavaScript with Konva. It initializes a stage and layer, then creates an arc with specific dimensions, position, angle, and styling properties before adding it to the layer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arc.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst arc = new Konva.Arc({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  innerRadius: 40,\n  outerRadius: 70,\n  angle: 60,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(arc);\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes for Performance in Konva.js\nDESCRIPTION: Examples of how to cache a node to improve drawing performance, apply filters, or create more accurate hit regions. Caching converts a shape into an image, which can significantly improve rendering speed for complex shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Filled Shapes with Vanilla JavaScript and Konva\nDESCRIPTION: This code demonstrates how to create interactive pentagon shapes with different fill types (color, pattern, linear gradient, radial gradient) using Konva in vanilla JavaScript. The shapes change their fill properties on mouseover and can be dragged around the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/01-Fill.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nfunction loadImages(sources, callback) {\n  var images = {};\n  var loadedImages = 0;\n  var numImages = 0;\n  // get num of sources\n  for (var src in sources) {\n    numImages++;\n  }\n  for (var src in sources) {\n    images[src] = new Image();\n    images[src].onload = function () {\n      if (++loadedImages >= numImages) {\n        callback(images);\n      }\n    };\n    images[src].src = sources[src];\n  }\n}\nfunction draw(images) {\n  var width = window.innerWidth;\n  var height = window.innerHeight;\n\n  var stage = new Konva.Stage({\n    container: 'container',\n    width: width,\n    height: height,\n  });\n  var layer = new Konva.Layer();\n\n  var colorPentagon = new Konva.RegularPolygon({\n    x: 80,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fill: 'red',\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable: true,\n  });\n\n  var patternPentagon = new Konva.RegularPolygon({\n    x: 220,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fillPatternImage: images.darthVader,\n    fillPatternOffset: { x: -220, y: 70 },\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable: true,\n  });\n\n  var linearGradPentagon = new Konva.RegularPolygon({\n    x: 360,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fillLinearGradientStartPoint: { x: -50, y: -50 },\n    fillLinearGradientEndPoint: { x: 50, y: 50 },\n    fillLinearGradientColorStops: [0, 'red', 1, 'yellow'],\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable: true,\n  });\n\n  var radialGradPentagon = new Konva.RegularPolygon({\n    x: 500,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fillRadialGradientStartPoint: { x: 0, y: 0 },\n    fillRadialGradientStartRadius: 0,\n    fillRadialGradientEndPoint: { x: 0, y: 0 },\n    fillRadialGradientEndRadius: 70,\n    fillRadialGradientColorStops: [0, 'red', 0.5, 'yellow', 1, 'blue'],\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable: true,\n  });\n\n  /*\n    * bind listeners\n    */\n  colorPentagon.on('mouseover touchstart', function () {\n    this.fill('blue');\n  });\n\n  colorPentagon.on('mouseout touchend', function () {\n    this.fill('red');\n  });\n\n  patternPentagon.on('mouseover touchstart', function () {\n    this.fillPatternImage(images.yoda);\n    this.fillPatternOffset({ x: -100, y: 70 });\n  });\n\n  patternPentagon.on('mouseout touchend', function () {\n    this.fillPatternImage(images.darthVader);\n    this.fillPatternOffset({ x: -220, y: 70 });\n  });\n\n  linearGradPentagon.on('mouseover touchstart', function () {\n    this.fillLinearGradientStartPoint({ x: -50 });\n    this.fillLinearGradientEndPoint({ x: 50 });\n    this.fillLinearGradientColorStops([0, 'green', 1, 'yellow']);\n  });\n\n  linearGradPentagon.on('mouseout touchend', function () {\n    // set multiple properties at once with setAttrs\n    this.setAttrs({\n      fillLinearGradientStartPoint: { x: -50, y: -50 },\n      fillLinearGradientEndPoint: { x: 50, y: 50 },\n      fillLinearGradientColorStops: [0, 'red', 1, 'yellow'],\n    });\n  });\n\n  radialGradPentagon.on('mouseover touchstart', function () {\n    this.fillRadialGradientColorStops([\n      0,\n      'red',\n      0.5,\n      'yellow',\n      1,\n      'green',\n    ]);\n  });\n\n  radialGradPentagon.on('mouseout touchend', function () {\n    // set multiple properties at once with setAttrs\n    this.setAttrs({\n      fillRadialGradientStartPoint: 0,\n      fillRadialGradientStartRadius: 0,\n      fillRadialGradientEndPoint: 0,\n      fillRadialGradientEndRadius: 70,\n      fillRadialGradientColorStops: [0, 'red', 0.5, 'yellow', 1, 'blue'],\n    });\n  });\n\n  layer.add(colorPentagon);\n  layer.add(patternPentagon);\n  layer.add(linearGradPentagon);\n  layer.add(radialGradPentagon);\n  stage.add(layer);\n}\nvar sources = {\n  darthVader: 'https://konvajs.org/assets/darth-vader.jpg',\n  yoda: 'https://konvajs.org/assets/yoda.jpg',\n};\n\nloadImages(sources, function (images) {\n  draw(images);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline Line with Vue-Konva\nDESCRIPTION: This code demonstrates implementing a spline line using Vue-Konva components. It sets up a template with v-stage, v-layer, and v-line components, with configuration defined in the script section. The tension property is used to create the curve effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Spline.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line :config=\"lineConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst lineConfig = {\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  tension: 1\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: React Implementation of DOM to Canvas Drag & Drop with Konva\nDESCRIPTION: React component implementation using react-konva for drag and drop functionality. Manages state for dropped images and handles image loading with proper sizing calculations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drop_DOM_Element.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst DragItem = ({ src, onDragStart }) => {\n  return (\n    <img \n      src={src} \n      draggable={true}\n      style={{ height: '100px', margin: '5px' }}\n      onDragStart={() => onDragStart(src)} \n    />\n  );\n};\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n  const [dragImageSrc, setDragImageSrc] = useState('');\n  const stageRef = useRef(null);\n  \n  const handleDragStart = (src) => {\n    setDragImageSrc(src);\n  };\n  \n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n  \n  const handleDrop = (e) => {\n    e.preventDefault();\n    \n    if (!dragImageSrc || !stageRef.current) return;\n    \n    const stage = stageRef.current;\n    stage.setPointersPositions(e);\n    const position = stage.getPointerPosition();\n    \n    setImages([\n      ...images,\n      {\n        src: dragImageSrc,\n        x: position.x,\n        y: position.y,\n        id: Date.now().toString()\n      }\n    ]);\n  };\n  \n  return (\n    <div>\n      <p>Drag&drop yoda into the grey area.</p>\n      <div style={{ marginBottom: '10px' }}>\n        <DragItem \n          src=\"https://konvajs.org/assets/yoda.jpg\" \n          onDragStart={handleDragStart} \n        />\n        <DragItem \n          src=\"https://konvajs.org/assets/darth-vader.jpg\" \n          onDragStart={handleDragStart} \n        />\n      </div>\n      \n      <div \n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.1)' }}\n      >\n        <Stage\n          width={window.innerWidth}\n          height={window.innerHeight - 150}\n          ref={stageRef}\n        >\n          <Layer>\n            {images.map((img) => (\n              <KonvaImage\n                key={img.id}\n                src={img.src}\n                x={img.x}\n                y={img.y}\n                draggable\n              />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Canvas in React with react-konva\nDESCRIPTION: A React implementation of a responsive canvas using react-konva. It uses useState and useEffect hooks to manage the stage dimensions and scale, and a ref to track the container element. The stage and all shapes scale proportionally when the window is resized.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Responsive_Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: react\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Circle, Rect, Text } from 'react-konva';\n\nconst App = () => {\n  // Define virtual size for our scene\n  const sceneWidth = 1000;\n  const sceneHeight = 1000;\n  \n  // State to track current scale and dimensions\n  const [stageSize, setStageSize] = useState({\n    width: sceneWidth,\n    height: sceneHeight,\n    scale: 1\n  });\n  \n  // Reference to parent container\n  const containerRef = useRef(null);\n  \n  // Function to handle resize\n  const updateSize = () => {\n    if (!containerRef.current) return;\n    \n    // Get container width\n    const containerWidth = containerRef.current.offsetWidth;\n    \n    // Calculate scale\n    const scale = containerWidth / sceneWidth;\n    \n    // Update state with new dimensions\n    setStageSize({\n      width: sceneWidth * scale,\n      height: sceneHeight * scale,\n      scale: scale\n    });\n  };\n  \n  // Update on mount and when window resizes\n  useEffect(() => {\n    updateSize();\n    window.addEventListener('resize', updateSize);\n    \n    return () => {\n      window.removeEventListener('resize', updateSize);\n    };\n  }, []);\n  \n  return (\n    <div \n      ref={containerRef} \n      style={{ width: '100%', height: '100%' }}\n    >\n      <Stage \n        width={stageSize.width} \n        height={stageSize.height}\n        scaleX={stageSize.scale}\n        scaleY={stageSize.scale}\n      >\n        <Layer>\n          <Circle\n            radius={50}\n            fill=\"red\"\n            x={sceneWidth / 2}\n            y={sceneHeight / 2}\n          />\n          <Rect\n            fill=\"green\"\n            x={sceneWidth - 100}\n            y={sceneHeight - 100}\n            width={100}\n            height={100}\n          />\n          <Text\n            x={20}\n            y={20}\n            text=\"Try resizing your browser window\"\n            fontSize={20}\n            fontFamily=\"Arial\"\n            fill=\"black\"\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Resizing Text with Konva Transformer in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to resize text on canvas using Konva.js in vanilla JavaScript. It creates a draggable text element with a Transformer attached to it. During transformation, it resets the scale of the text and adjusts the width accordingly to ensure proper resizing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/11_Resize_Text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\nx: 50,\ny: 50,\ntext: 'Hello from Konva! Try to resize me.',\nfontSize: 24,\ndraggable: true,\nwidth: 200,\n});\nlayer.add(text);\n\nconst tr = new Konva.Transformer({\nnodes: [text],\n// enable only one anchor to see better what is happening\n// we are changing width only\nenabledAnchors: ['middle-left', 'middle-right'],\n});\nlayer.add(tr);\n\ntext.on('transform', function () {\n// reset scale on transform\ntext.setAttrs({\nwidth: text.width() * text.scaleX(),\nscaleX: 1,\n});\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Nodes in Konva.js\nDESCRIPTION: Demonstrates how to apply visual filters to a cached node. Multiple filters can be applied sequentially to create complex visual effects on rendered elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Up Handler for Drag and Drop in Konva.js\nDESCRIPTION: Handles the end of drag operations in Konva. When the mouse button is released, the shape is moved back to its original layer and the reference to that layer is cleared.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleStageMouseUp(e) {\n  // Get the target shape\n  const shape = e.target;\n  // Only process if it's not the stage itself\n  if (shape && shape !== e.target.getStage()) {\n    // Move back to original layer if we have that reference\n    if (shape._originalLayer) {\n      shape.moveTo(shape._originalLayer);\n      // Clear the reference\n      shape._originalLayer = null;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Drag and Resize with Vanilla Konva.js\nDESCRIPTION: This implementation uses vanilla Konva.js to restrict dragging and resizing of shapes within the canvas boundaries. It includes helper functions for calculating bounding boxes and corners to properly handle rotated shapes, and implements boundary checks during transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Helper functions for calculating bounding boxes\nfunction getCorner(pivotX, pivotY, diffX, diffY, angle) {\n  const distance = Math.sqrt(diffX * diffX + diffY * diffY);\n\n  // Find angle from pivot to corner\n  angle += Math.atan2(diffY, diffX);\n\n  // Get new x and y coordinates\n  const x = pivotX + distance * Math.cos(angle);\n  const y = pivotY + distance * Math.sin(angle);\n\n  return { x, y };\n}\n\n// Calculate client rect accounting for rotation\nfunction getClientRect(rotatedBox) {\n  const { x, y, width, height } = rotatedBox;\n  const rad = rotatedBox.rotation;\n\n  const p1 = getCorner(x, y, 0, 0, rad);\n  const p2 = getCorner(x, y, width, 0, rad);\n  const p3 = getCorner(x, y, width, height, rad);\n  const p4 = getCorner(x, y, 0, height, rad);\n\n  const minX = Math.min(p1.x, p2.x, p3.x, p4.x);\n  const minY = Math.min(p1.y, p2.y, p3.y, p4.y);\n  const maxX = Math.max(p1.x, p2.x, p3.x, p4.x);\n  const maxY = Math.max(p1.y, p2.y, p3.y, p4.y);\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n\n// Calculate total bounding box of multiple shapes\nfunction getTotalBox(boxes) {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  boxes.forEach((box) => {\n    minX = Math.min(minX, box.x);\n    minY = Math.min(minY, box.y);\n    maxX = Math.max(maxX, box.x + box.width);\n    maxY = Math.max(maxY, box.y + box.height);\n  });\n  \n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n\n// Set up the stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create first shape (red rectangle)\nconst shape1 = new Konva.Rect({\n  x: stage.width() / 2 - 60,\n  y: stage.height() / 2 - 60,\n  width: 50,\n  height: 50,\n  fill: 'red',\n  draggable: true,\n});\nlayer.add(shape1);\n\n// Create second shape (green rectangle)\nconst shape2 = shape1.clone({\n  x: stage.width() / 2 + 10,\n  y: stage.height() / 2 + 10,\n  fill: 'green',\n});\nlayer.add(shape2);\n\n// Add transformer that includes both shapes\nconst tr = new Konva.Transformer({\n  nodes: [shape1, shape2],\n  // Set boundary function for resize operations\n  boundBoxFunc: (oldBox, newBox) => {\n    // Calculate the actual bounding box of the transformed shape\n    const box = getClientRect(newBox);\n    \n    // Check if the new box is outside the stage boundaries\n    const isOut =\n      box.x < 0 ||\n      box.y < 0 ||\n      box.x + box.width > stage.width() ||\n      box.y + box.height > stage.height();\n\n    // If outside boundaries, keep the old box\n    if (isOut) {\n      return oldBox;\n    }\n    \n    // If within boundaries, allow the transformation\n    return newBox;\n  },\n});\nlayer.add(tr);\n\n// Handle drag events to keep shapes within the stage\ntr.on('dragmove', () => {\n  // Get client rects for all selected nodes\n  const boxes = tr.nodes().map((node) => node.getClientRect());\n  \n  // Get the total bounding box of all shapes\n  const box = getTotalBox(boxes);\n  \n  // Keep shapes within stage boundaries\n  tr.nodes().forEach((shape) => {\n    const absPos = shape.getAbsolutePosition();\n    \n    // Calculate shape position relative to group bounding box\n    const offsetX = box.x - absPos.x;\n    const offsetY = box.y - absPos.y;\n\n    // Adjust position if outside boundaries\n    const newAbsPos = { ...absPos };\n    \n    if (box.x < 0) {\n      newAbsPos.x = -offsetX;\n    }\n    if (box.y < 0) {\n      newAbsPos.y = -offsetY;\n    }\n    if (box.x + box.width > stage.width()) {\n      newAbsPos.x = stage.width() - box.width - offsetX;\n    }\n    if (box.y + box.height > stage.height()) {\n      newAbsPos.y = stage.height() - box.height - offsetY;\n    }\n    \n    shape.setAbsolutePosition(newAbsPos);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties with Tween in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to animate node properties using the to() method. This is a shorter way to create a Konva.Tween for property animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Shape Transformation with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code snippet demonstrates how to implement shape selection, resizing, and rotation in HTML5 Canvas using Konva.js. It creates a stage with two draggable rectangles, adds a transformer for resizing/rotating, and implements rectangular selection area functionality. It handles both individual selection and multi-selection with modifier keys.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/01_Basic_demo.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create rectangle\nconst rect1 = new Konva.Rect({\nx: 60,\ny: 60,\nwidth: 100,\nheight: 90,\nfill: 'red',\nname: 'rect',\ndraggable: true,\n});\nlayer.add(rect1);\n\nconst rect2 = new Konva.Rect({\nx: 250,\ny: 100,\nwidth: 150,\nheight: 90,\nfill: 'green',\nname: 'rect',\ndraggable: true,\n});\nlayer.add(rect2);\n\n// create transformer\nconst tr = new Konva.Transformer();\nlayer.add(tr);\n\n// add a new feature, lets add ability to draw selection rectangle\nlet selectionRectangle = new Konva.Rect({\nfill: 'rgba(0,0,255,0.5)',\nvisible: false,\n});\nlayer.add(selectionRectangle);\n\nlet x1, y1, x2, y2;\nstage.on('mousedown touchstart', (e) => {\n// do nothing if we mousedown on any shape\nif (e.target !== stage) {\nreturn;\n}\nx1 = stage.getPointerPosition().x;\ny1 = stage.getPointerPosition().y;\nx2 = stage.getPointerPosition().x;\ny2 = stage.getPointerPosition().y;\n\nselectionRectangle.visible(true);\nselectionRectangle.width(0);\nselectionRectangle.height(0);\n});\n\nstage.on('mousemove touchmove', () => {\n// do nothing if we didn't start selection\nif (!selectionRectangle.visible()) {\nreturn;\n}\nx2 = stage.getPointerPosition().x;\ny2 = stage.getPointerPosition().y;\n\nselectionRectangle.setAttrs({\nx: Math.min(x1, x2),\ny: Math.min(y1, y2),\nwidth: Math.abs(x2 - x1),\nheight: Math.abs(y2 - y1),\n});\n});\n\nstage.on('mouseup touchend', () => {\n// do nothing if we didn't start selection\nif (!selectionRectangle.visible()) {\nreturn;\n}\n// update visibility in timeout, so we can check it in click event\nsetTimeout(() => {\nselectionRectangle.visible(false);\n});\n\nvar shapes = stage.find('.rect');\nvar box = selectionRectangle.getClientRect();\nvar selected = shapes.filter((shape) =>\nKonva.Util.haveIntersection(box, shape.getClientRect())\n);\ntr.nodes(selected);\n});\n\n// clicks should select/deselect shapes\nstage.on('click tap', function (e) {\n// if we are selecting with rect, do nothing\nif (selectionRectangle.visible()) {\nreturn;\n}\n\n// if click on empty area - remove all selections\nif (e.target === stage) {\ntr.nodes([]);\nreturn;\n}\n\n// do nothing if clicked NOT on our rectangles\nif (!e.target.hasName('rect')) {\nreturn;\n}\n\n// do we pressed shift or ctrl?\nconst metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\nconst isSelected = tr.nodes().indexOf(e.target) >= 0;\n\nif (!metaPressed && !isSelected) {\n// if no key pressed and the node is not selected\n// select just one\ntr.nodes([e.target]);\n} else if (metaPressed && isSelected) {\n// if we pressed keys and node was selected\n// we need to remove it from selection:\nconst nodes = tr.nodes().slice(); // use slice to have new copy of array\n// remove node from array\nnodes.splice(nodes.indexOf(e.target), 1);\ntr.nodes(nodes);\n} else if (metaPressed && !isSelected) {\n// add the node into selection\nconst nodes = tr.nodes().concat([e.target]);\ntr.nodes(nodes);\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Clipping in Vue with Vue-Konva\nDESCRIPTION: This Vue component uses vue-konva to implement a clipping region. It defines a group with a rectangular clip property and renders 20 randomly positioned and sized green circles within it. Only portions of the circles that fall within the clipping region will be displayed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Regions.mdx#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group :config=\"groupConfig\">\n        <v-circle\n          v-for=\"(blob, i) in blobs\"\n          :key=\"i\"\n          :config=\"blob\"\n        />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst groupConfig = {\n  clip: {\n    x: 100,\n    y: 20,\n    width: 200,\n    height: 200,\n  }\n};\n\nconst blobs = Array.from({ length: 20 }, () => ({\n  x: Math.random() * window.innerWidth,\n  y: Math.random() * window.innerHeight,\n  radius: Math.random() * 50,\n  fill: 'green',\n  opacity: 0.8\n}));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tween Controls with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code demonstrates how to create and control a tween animation in Konva.js using vanilla JavaScript. It creates a red circle that animates across the screen with buttons to play, pause, reverse, reset, finish, and seek to specific positions in the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst circle = new Konva.Circle({\nx: 100,\ny: height / 2,\nradius: 70,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nlayer.add(circle);\nstage.add(layer);\n\nconst tween = new Konva.Tween({\nnode: circle,\nduration: 2,\nx: width - 100,\neasing: Konva.Easings.EaseInOut,\n});\n\n// create buttons\nconst controls = ['play', 'pause', 'reverse', 'reset', 'finish'];\ncontrols.forEach(control => {\nconst button = document.createElement('button');\nbutton.textContent = control;\nbutton.addEventListener('click', () => {\ntween[control]();\n});\ndocument.body.appendChild(button);\n});\n\n// seek control\nconst seekBtn = document.createElement('button');\nseekBtn.textContent = 'Seek to 50%';\nseekBtn.addEventListener('click', () => {\ntween.seek(1); // seek to 1 second\n});\ndocument.body.appendChild(seekBtn);\n```\n\n----------------------------------------\n\nTITLE: Implementing Elastic Stars with React-Konva\nDESCRIPTION: React implementation of draggable stars using react-konva. Uses React hooks to manage state and handle drag events, creating stars with elastic animations and shadow effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Elastic_Stars.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Stage, Layer, Star } from 'react-konva';\n\nconst App = () => {\n  const [stars, setStars] = useState([]);\n  \n  useEffect(() => {\n    const initialStars = [];\n    for (let n = 0; n < 10; n++) {\n      const scale = Math.random();\n      initialStars.push({\n        id: n.toString(),\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        numPoints: 5,\n        innerRadius: 30,\n        outerRadius: 50,\n        fill: '#89b717',\n        opacity: 0.8,\n        rotation: Math.random() * 180,\n        shadowColor: 'black',\n        shadowBlur: 10,\n        shadowOffset: {\n          x: 5,\n          y: 5,\n        },\n        shadowOpacity: 0.6,\n        scale: {\n          x: scale,\n          y: scale,\n        },\n        startScale: scale\n      });\n    }\n    setStars(initialStars);\n  }, []);\n  \n  const handleDragStart = (e) => {\n    const index = stars.findIndex(star => star.id === e.target.attrs.id);\n    \n    if (index === -1) return;\n    \n    const newStars = [...stars];\n    newStars[index] = {\n      ...newStars[index],\n      shadowOffset: {\n        x: 15,\n        y: 15,\n      },\n      scale: {\n        x: newStars[index].startScale * 1.2,\n        y: newStars[index].startScale * 1.2,\n      }\n    };\n    \n    setStars(newStars);\n  };\n  \n  const handleDragEnd = (e) => {\n    const index = stars.findIndex(star => star.id === e.target.attrs.id);\n    \n    if (index === -1) return;\n    \n    const newStars = [...stars];\n    newStars[index] = {\n      ...newStars[index],\n      shadowOffset: {\n        x: 5,\n        y: 5,\n      },\n      scale: {\n        x: newStars[index].startScale,\n        y: newStars[index].startScale,\n      }\n    };\n    \n    setStars(newStars);\n  };\n  \n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {stars.map(star => (\n          <Star\n            key={star.id}\n            id={star.id}\n            x={star.x}\n            y={star.y}\n            numPoints={star.numPoints}\n            innerRadius={star.innerRadius}\n            outerRadius={star.outerRadius}\n            fill={star.fill}\n            opacity={star.opacity}\n            rotation={star.rotation}\n            shadowColor={star.shadowColor}\n            shadowBlur={star.shadowBlur}\n            shadowOffset={star.shadowOffset}\n            shadowOpacity={star.shadowOpacity}\n            scale={star.scale}\n            draggable\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by Name with Vue-Konva\nDESCRIPTION: This Vue.js implementation demonstrates selecting shapes by name using Vue-Konva. It creates a stage with predefined configurations for circles and a rectangle, then uses the onMounted lifecycle hook with a ref to access the Konva node, find shapes with the '.myCircle' name, and animate them.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Name.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-circle :config=\"circle1Config\" />\n      <v-circle :config=\"circle2Config\" />\n      <v-rect :config=\"rectConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circle1Config = {\n  x: 50,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'red',\n  name: 'myCircle'\n};\n\nconst circle2Config = {\n  x: 150,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'green',\n  name: 'myCircle'\n};\n\nconst rectConfig = {\n  x: 250,\n  y: window.innerHeight / 2 - 25,\n  width: 50,\n  height: 50,\n  fill: 'blue',\n  name: 'myRect'\n};\n\nconst layerRef = ref(null);\n\nonMounted(() => {\n  // find all circles by name and animate them\n  const circles = layerRef.value.getNode().find('.myCircle');\n  circles.forEach(circle => {\n    circle.to({\n      duration: 1,\n      rotation: 360,\n      easing: Konva.Easings.EaseInOut\n    });\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Border Filter for Alpha Channel Images in Konva.js\nDESCRIPTION: This JavaScript snippet demonstrates how to implement a custom filter in Konva.js that creates a border around non-transparent parts of an image. The filter uses shadow effects to detect edges and then replaces transparent/blurred pixels with a solid border color, creating a contour effect that follows the shape of the image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Border.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Define variables for our custom filter\nlet canvas = document.createElement('canvas');\nlet tempCanvas = document.createElement('canvas');\n\n// Make all pixels opaque 100% (except pixels that are 100% transparent)\nfunction removeTransparency(canvas) {\n  const ctx = canvas.getContext('2d');\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const nPixels = imageData.data.length;\n  \n  for (let i = 3; i < nPixels; i += 4) {\n    if (imageData.data[i] > 0) {\n      imageData.data[i] = 255;\n    }\n  }\n  \n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.putImageData(imageData, 0, 0);\n  return canvas;\n}\n\n// Define our custom Border filter\nfunction Border(imageData) {\n  const nPixels = imageData.data.length;\n  const size = this.getAttr('borderSize') || 0;\n\n  // Set correct dimensions for canvases\n  canvas.width = imageData.width;\n  canvas.height = imageData.height;\n\n  tempCanvas.width = imageData.width;\n  tempCanvas.height = imageData.height;\n\n  // Draw original shape into temp canvas\n  tempCanvas.getContext('2d').putImageData(imageData, 0, 0);\n\n  // Remove alpha channel because it will affect shadow (transparent shapes have smaller shadow)\n  removeTransparency(tempCanvas);\n\n  const ctx = canvas.getContext('2d');\n  const color = this.getAttr('borderColor') || 'black';\n\n  // Use shadow as border\n  ctx.save();\n  ctx.shadowColor = color;\n  ctx.shadowBlur = size;\n  ctx.drawImage(tempCanvas, 0, 0);\n  ctx.restore();\n\n  // Get image data of [original image + shadow]\n  const tempImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n  const SMOOTH_MIN_THRESHOLD = 3;\n  const SMOOTH_MAX_THRESHOLD = 10;\n\n  let val, hasValue;\n  const offset = 3;\n\n  for (let i = 3; i < nPixels; i += 4) {\n    // Skip opaque pixels\n    if (imageData.data[i] === 255) {\n      continue;\n    }\n\n    val = tempImageData.data[i];\n    hasValue = val !== 0;\n    if (!hasValue) {\n      continue;\n    }\n    \n    if (val > SMOOTH_MAX_THRESHOLD) {\n      val = 255;\n    } else if (val < SMOOTH_MIN_THRESHOLD) {\n      val = 0;\n    } else {\n      val = ((val - SMOOTH_MIN_THRESHOLD) / (SMOOTH_MAX_THRESHOLD - SMOOTH_MIN_THRESHOLD)) * 255;\n    }\n    tempImageData.data[i] = val;\n  }\n\n  // Draw resulting image (original + shadow without opacity) into canvas\n  ctx.putImageData(tempImageData, 0, 0);\n\n  // Fill whole image with color (after that shadow is colored)\n  ctx.save();\n  ctx.globalCompositeOperation = 'source-in';\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n\n  // Copy colored shadow into original imageData\n  const newImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n  const indexesToProcess = [];\n  for (let i = 3; i < nPixels; i += 4) {\n    const hasTransparentOnTop = imageData.data[i - imageData.width * 4 * offset] === 0;\n    const hasTransparentOnTopRight = imageData.data[i - (imageData.width * 4 + 4) * offset] === 0;\n    const hasTransparentOnTopLeft = imageData.data[i - (imageData.width * 4 - 4) * offset] === 0;\n    const hasTransparentOnRight = imageData.data[i + 4 * offset] === 0;\n    const hasTransparentOnLeft = imageData.data[i - 4 * offset] === 0;\n    const hasTransparentOnBottom = imageData.data[i + imageData.width * 4 * offset] === 0;\n    const hasTransparentOnBottomRight = imageData.data[i + (imageData.width * 4 + 4) * offset] === 0;\n    const hasTransparentOnBottomLeft = imageData.data[i + (imageData.width * 4 - 4) * offset] === 0;\n    \n    const hasTransparentAround =\n      hasTransparentOnTop ||\n      hasTransparentOnRight ||\n      hasTransparentOnLeft ||\n      hasTransparentOnBottom ||\n      hasTransparentOnTopRight ||\n      hasTransparentOnTopLeft ||\n      hasTransparentOnBottomRight ||\n      hasTransparentOnBottomLeft;\n\n    // Skip pixels presented in original image\n    if (imageData.data[i] === 255 || (imageData.data[i] && !hasTransparentAround)) {\n      continue;\n    }\n    \n    if (!newImageData.data[i]) {\n      // Skip transparent pixels\n      continue;\n    }\n    \n    indexesToProcess.push(i);\n  }\n\n  for (let index = 0; index < indexesToProcess.length; index += 1) {\n    const i = indexesToProcess[index];\n    const alpha = imageData.data[i] / 255;\n\n    imageData.data[i] = newImageData.data[i];\n    imageData.data[i - 1] = newImageData.data[i - 1] * (1 - alpha) + imageData.data[i - 1] * alpha;\n    imageData.data[i - 2] = newImageData.data[i - 2] * (1 - alpha) + imageData.data[i - 2] * alpha;\n    imageData.data[i - 3] = newImageData.data[i - 3] * (1 - alpha) + imageData.data[i - 3] * alpha;\n  }\n}\n\n// Load image and apply filter\nKonva.Image.fromURL('https://konvajs.org/assets/lion.png', function (image) {\n  layer.add(image);\n  image.setAttrs({\n    x: 80,\n    y: 30,\n    borderSize: 5,\n    borderColor: 'red',\n  });\n\n  image.filters([Border]);\n  image.cache();\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes for Performance in KonvaJS\nDESCRIPTION: Method to cache a node to improve drawing performance, apply filters, or create more accurate hit regions. Various configuration options allow for customizing the cache behavior and size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Canvas as Image in React with Konva\nDESCRIPTION: This code snippet demonstrates how to export a Konva stage as an image in a React application. It uses the useRef hook to access the stage, and provides a download function to save the exported image. The example includes a button to trigger the export and a stage with four rectangles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Canvas_Export.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Fragment } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\n// function from https://stackoverflow.com/a/15832662/512042\nfunction downloadURI(uri, name) {\n  var link = document.createElement('a');\n  link.download = name;\n  link.href = uri;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nconst App = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  const stageRef = React.useRef(null);\n\n  const handleExport = () => {\n    const uri = stageRef.current.toDataURL();\n    console.log(uri);\n    // we also can save uri as file\n    downloadURI(uri, 'stage.png');\n  };\n\n  return (\n    <Fragment>\n      <button onClick={handleExport}>Click here to export stage as image</button>\n      <Stage width={width} height={height} ref={stageRef}>\n        <Layer>\n          <Rect x={0} y={0} width={80} height={80} fill=\"red\" />\n          <Rect x={width - 80} y={0} width={80} height={80} fill=\"red\" />\n          <Rect\n            x={width - 80}\n            y={height - 80}\n            width={80}\n            height={80}\n            fill=\"red\"\n          />\n          <Rect x={0} y={height - 80} width={80} height={80} fill=\"red\" />\n        </Layer>\n      </Stage>\n    </Fragment>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Brighten Filter on Image with React-Konva\nDESCRIPTION: This React component uses react-konva to create a stage with an image that has a brighten filter applied. It includes a slider input for adjusting the brightness in real-time. The component utilizes hooks like useState, useEffect, and useRef for state management and DOM manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Brighten.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [brightness, setBrightness] = useState(0.3);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Brighten]}\n            brightness={brightness}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"-1\"\n        max=\"1\"\n        step=\"0.1\"\n        value={brightness}\n        onChange={(e) => setBrightness(parseFloat(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection with React-Konva\nDESCRIPTION: This snippet shows how to implement collision detection using React-Konva components. It uses React state to manage shapes and their properties, calculates bounding boxes for rotated rectangles, and updates the fill color of intersecting shapes during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Collision_Detection.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Rect } from 'react-konva';\nimport { useState } from 'react';\n\nconst createInitialShapes = () => {\n  const shapes = [];\n  for (let i = 0; i < 10; i++) {\n    const width = 30 + Math.random() * 30;\n    const height = 30 + Math.random() * 30;\n    const rotation = 360 * Math.random();\n\n    // calculate bounding box for rotated rectangle\n    const radians = (rotation * Math.PI) / 180;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n\n    // calculate corners of the rectangle\n    const corners = [\n      { x: 0, y: 0 },\n      { x: width, y: 0 },\n      { x: width, y: height },\n      { x: 0, y: height }\n    ].map(point => ({\n      x: point.x * cos - point.y * sin,\n      y: point.x * sin + point.y * cos\n    }));\n\n    // find bounding box dimensions\n    const minX = Math.min(...corners.map(p => p.x));\n    const maxX = Math.max(...corners.map(p => p.x));\n    const minY = Math.min(...corners.map(p => p.y));\n    const maxY = Math.max(...corners.map(p => p.y));\n\n    shapes.push({\n      id: i,\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      rotation,\n      width,\n      height,\n      fill: 'grey',\n      box: {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n      }\n    });\n  }\n  return shapes;\n};\n\nconst haveIntersection = (r1, r2) => {\n  return !(\n    r2.x > r1.x + r1.width ||\n    r2.x + r2.width < r1.x ||\n    r2.y > r1.y + r1.height ||\n    r2.y + r2.height < r1.y\n  );\n};\n\nconst App = () => {\n  const [shapes, setShapes] = useState(createInitialShapes());\n\n  const handleDragMove = (e, id) => {\n    const target = e.target;\n    const targetRect = target.getClientRect();\n    \n    setShapes(shapes.map(shape => {\n      if (shape.id === id) {\n        return shape;\n      }\n      const shapeGroup = target.parent.parent.findOne(`#group-${shape.id}`);\n      if (!shapeGroup) return shape;\n      \n      const isIntersecting = haveIntersection(\n        shapeGroup.getClientRect(),\n        targetRect\n      );\n      \n      return {\n        ...shape,\n        fill: isIntersecting ? 'red' : 'grey'\n      };\n    }));\n  };\n\n  const handleDragEnd = (e, id) => {\n    setShapes(shapes.map(shape => \n      shape.id === id\n        ? { ...shape, x: e.target.x(), y: e.target.y() }\n        : shape\n    ));\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {shapes.map((shape) => (\n          <Group\n            key={shape.id}\n            id={`group-${shape.id}`}\n            x={shape.x}\n            y={shape.y}\n            draggable\n            onDragMove={(e) => handleDragMove(e, shape.id)}\n            onDragEnd={(e) => handleDragEnd(e, shape.id)}\n          >\n            <Rect\n              width={shape.width}\n              height={shape.height}\n              fill={shape.fill}\n              rotation={shape.rotation}\n              name=\"fillShape\"\n            />\n            <Rect\n              x={shape.box.x}\n              y={shape.box.y}\n              width={shape.box.width}\n              height={shape.box.height}\n              stroke=\"red\"\n              strokeWidth={1}\n            />\n          </Group>\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer-Relative Zooming with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create a stage with a circle and implement zooming that scales relative to the mouse pointer position. It handles wheel events, prevents default scrolling behavior, and calculates new scale and position values based on pointer location for a natural zooming experience.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zooming_Relative_To_Pointer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 50,\n  fill: 'green',\n});\nlayer.add(circle);\n\nconst scaleBy = 1.01;\nstage.on('wheel', (e) => {\n  // stop default scrolling\n  e.evt.preventDefault();\n\n  const oldScale = stage.scaleX();\n  const pointer = stage.getPointerPosition();\n\n  const mousePointTo = {\n    x: (pointer.x - stage.x()) / oldScale,\n    y: (pointer.y - stage.y()) / oldScale,\n  };\n\n  // how to scale? Zoom in? Or zoom out?\n  let direction = e.evt.deltaY > 0 ? 1 : -1;\n\n  // when we zoom on trackpad, e.evt.ctrlKey is true\n  // in that case lets revert direction\n  if (e.evt.ctrlKey) {\n    direction = -direction;\n  }\n\n  const newScale = direction > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n  stage.scale({ x: newScale, y: newScale });\n\n  const newPos = {\n    x: pointer.x - mousePointTo.x * newScale,\n    y: pointer.y - mousePointTo.y * newScale,\n  };\n  stage.position(newPos);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Wedge Shape\nDESCRIPTION: Creates a new wedge shape instance with the specified configuration parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Wedge(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Blend Mode with Vue-Konva\nDESCRIPTION: This example demonstrates how to use Vue-Konva to create a canvas with blend mode effects. It configures a stage with a green text element that has a shadow and a draggable red rectangle that uses the 'xor' blend mode.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/08-Blend_Mode.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-rect :config=\"rectConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = {\n  text: 'Text Shadow!',\n  fontFamily: 'Calibri',\n  fontSize: 40,\n  x: 20,\n  y: 20,\n  fill: 'green',\n  shadowColor: 'white',\n  shadowOffset: { x: 10, y: 10 }\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  draggable: true,\n  globalCompositeOperation: 'xor'\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hit Detection with React-Konva\nDESCRIPTION: This React implementation demonstrates custom hit detection in Konva.js using the hitFunc prop for a Star component and hitStrokeWidth prop for a Line component. It includes state management for displaying interaction messages and a toggle for hit canvas visibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Custom_Hit_Region.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star, Line, Text } from 'react-konva';\nimport { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [showHit, setShowHit] = useState(false);\n\n  const handleStarEvent = (evt) => {\n    setMessage(evt.type + ' star');\n  };\n\n  const handleLineEvent = (evt) => {\n    setMessage(evt.type + ' line');\n  };\n\n  useEffect(() => {\n    const stage = document.querySelector('.konvajs-content');\n    if (showHit) {\n      const hitCanvas = stage.querySelector('canvas:last-child');\n      stage.style.border = '2px solid black';\n      hitCanvas.style.position = 'absolute';\n      hitCanvas.style.top = '0';\n      hitCanvas.style.left = '0';\n    }\n  }, [showHit]);\n\n  return (\n    <>\n      <button onClick={() => setShowHit(!showHit)}>Toggle hit canvas</button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Text x={10} y={10} text={message} fontSize={24} />\n          <Star\n            x={window.innerWidth / 4}\n            y={window.innerHeight / 2}\n            numPoints={5}\n            innerRadius={40}\n            outerRadius={70}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n            hitFunc={(context, shape) => {\n              context.beginPath();\n              context.arc(0, 0, 70, 0, Math.PI * 2, true);\n              context.closePath();\n              context.fillStrokeShape(shape);\n            }}\n            onMouseover={handleStarEvent}\n            onMouseout={handleStarEvent}\n            onMousedown={handleStarEvent}\n            onMouseup={handleStarEvent}\n          />\n          <Line\n            x={window.innerWidth * 0.6}\n            y={window.innerHeight / 2}\n            points={[-50, -50, 50, 50]}\n            stroke=\"black\"\n            strokeWidth={2}\n            hitStrokeWidth={20}\n            onMouseover={handleLineEvent}\n            onMouseout={handleLineEvent}\n            onMousedown={handleLineEvent}\n            onMouseup={handleLineEvent}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering 10,000 Shapes with Tooltips in React using react-konva\nDESCRIPTION: This React implementation uses react-konva to render 10,000 circles with tooltips. It utilizes React's useMemo hook to optimize the creation of circles, and useState to manage the tooltip properties. The tooltip updates dynamically as the user hovers over different circles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/10000_Shapes_with_Tooltip.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle, Text } from 'react-konva';\n\nconst App = () => {\n  const [tooltipProps, setTooltipProps] = React.useState({\n    text: '',\n    visible: false,\n    x: 0,\n    y: 0\n  });\n\n  const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\n  const circles = React.useMemo(() => {\n    const items = [];\n    let colorIndex = 0;\n    \n    for (let i = 0; i < 10000; i++) {\n      const color = colors[colorIndex++];\n      if (colorIndex >= colors.length) {\n        colorIndex = 0;\n      }\n      \n      items.push({\n        id: i,\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        color\n      });\n    }\n    return items;\n  }, []);\n\n  const handleMouseMove = (e) => {\n    const mousePos = e.target.getStage().getPointerPosition();\n    setTooltipProps({\n      text: `node: ${e.target.name()}, color: ${e.target.attrs.fill}`,\n      visible: true,\n      x: mousePos.x + 5,\n      y: mousePos.y + 5\n    });\n  };\n\n  const handleMouseOut = () => {\n    setTooltipProps(prev => ({ ...prev, visible: false }));\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer onMouseMove={handleMouseMove} onMouseOut={handleMouseOut}>\n        {circles.map(({ id, x, y, color }) => (\n          <Circle\n            key={id}\n            x={x}\n            y={y}\n            radius={3}\n            fill={color}\n            name={id.toString()}\n          />\n        ))}\n      </Layer>\n      <Layer>\n        <Text\n          {...tooltipProps}\n          fontFamily=\"Calibri\"\n          fontSize={12}\n          padding={5}\n          fill=\"black\"\n          opacity={0.75}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Drawing with Vanilla JavaScript in Konva\nDESCRIPTION: This snippet demonstrates how to use Konva's batchDraw() method to optimize performance when rotating a rectangle on mousemove events. It disables auto draw for demonstration purposes and sets up a stage with a rectangle that rotates as the mouse moves across the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Batch_Draw.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// For demo purposes, disable auto draw\nKonva.autoDrawEnabled = false;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: stage.width() / 2 - 50,\n  y: stage.height() / 2 - 25,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nlayer.add(rect);\n\nstage.on('mousemove', () => {\n  // rotate rectangle on mouse move\n  rect.rotate(5);\n  // use batchDraw instead of draw for better performance\n  layer.batchDraw();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Inner Radius of Konva.Star\nDESCRIPTION: Methods to get or set the inner radius of a star shape in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get inner radius\nvar innerRadius = star.innerRadius();\n\n// set inner radius\nstar.innerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers in KonvaJS\nDESCRIPTION: Shows how to bind events to KonvaJS nodes using the on() method, including examples of handling clicks, touches, and accessing event properties like target, currentTarget, and the native event object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Group with React-Konva\nDESCRIPTION: This snippet demonstrates how to implement a draggable group with colored rectangles using React-Konva. It uses React hooks and components from react-konva to create a stage, layer, and group. Mouse events are handled to change the cursor style.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/03_Drag_a_Group.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Rect, Text } from 'react-konva';\n\nconst App = () => {\n  const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\n  const handleMouseOver = () => {\n    document.body.style.cursor = 'move';\n  };\n\n  const handleMouseOut = () => {\n    document.body.style.cursor = 'default';\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group\n          draggable\n          onMouseEnter={handleMouseOver}\n          onMouseLeave={handleMouseOut}\n        >\n          {colors.map((color, i) => (\n            <Rect\n              key={color}\n              x={i * 30 + 10}\n              y={i * 18 + 40}\n              width={100}\n              height={50}\n              name={color}\n              fill={color}\n              stroke=\"black\"\n              strokeWidth={4}\n            />\n          ))}\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Outer Radius of Konva.Star\nDESCRIPTION: Methods to get or set the outer radius of a star shape in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get inner radius\nvar outerRadius = star.outerRadius();\n\n// set inner radius\nstar.outerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Creating Oscillating Blobs with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates how to implement interactive, animated blobs using vue-konva in a Vue 3 component. It utilizes the Composition API to manage reactive state and lifecycle hooks, creating draggable blobs with random positions, colors, and opacities, and applying a sinusoidal animation to their tension property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Quantum_Squiggle.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line\n        v-for=\"(blob, i) in blobs\"\n        :key=\"i\"\n        :config=\"{\n          points: blob.points,\n          fill: blob.fill,\n          stroke: 'black',\n          strokeWidth: 2,\n          tension: tension,\n          opacity: blob.opacity,\n          draggable: true,\n          closed: true,\n          x: blob.x,\n          y: blob.y\n        }\"\n        @dragend=\"handleDragEnd($event, i)\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst blobs = ref([]);\nconst tension = ref(0);\n\nonMounted(() => {\n  // Generate initial blobs\n  blobs.value = COLORS.map(color => {\n    const points = [];\n    for (let i = 0; i < 5; i++) {\n      points.push(window.innerWidth * Math.random());\n      points.push(window.innerHeight * Math.random());\n    }\n    return {\n      points,\n      fill: color,\n      opacity: Math.random(),\n      x: 0,\n      y: 0\n    };\n  });\n\n  const period = 2000;\n  const centerTension = 0;\n  const amplitude = 1;\n\n  const interval = setInterval(() => {\n    const time = new Date().getTime();\n    tension.value =\n      amplitude * Math.sin((time * 2 * Math.PI) / period) + centerTension;\n  }, 1000 / 60);\n\n  onUnmounted(() => clearInterval(interval));\n});\n\nconst handleDragEnd = (e, index) => {\n  const newBlobs = [...blobs.value];\n  newBlobs[index] = {\n    ...newBlobs[index],\n    x: e.target.x(),\n    y: e.target.y()\n  };\n  blobs.value = newBlobs;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Region\nDESCRIPTION: Methods to set and get the clipping region for a container. Clipping restricts the visible area of all child nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with React and Konva\nDESCRIPTION: This React implementation of free drawing uses React Konva components to create brush and eraser functionality. It manages drawing state with React hooks, keeping track of all lines in a state array. The component handles mouse and touch events to create smooth drawing experience across devices.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst App = () => {\n  const [tool, setTool] = React.useState('brush');\n  const [lines, setLines] = React.useState([]);\n  const isDrawing = React.useRef(false);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, { tool, points: [pos.x, pos.y] }]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    \n    // To draw line\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <>\n      <select\n        value={tool}\n        onChange={(e) => {\n          setTool(e.target.value);\n        }}\n      >\n        <option value=\"brush\">Brush</option>\n        <option value=\"eraser\">Eraser</option>\n      </select>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight - 25}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchMove={handleMouseMove}\n        onTouchEnd={handleMouseUp}\n      >\n        <Layer>\n          {lines.map((line, i) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke=\"#df4b26\"\n              strokeWidth={5}\n              tension={0.5}\n              lineCap=\"round\"\n              lineJoin=\"round\"\n              globalCompositeOperation={\n                line.tool === 'eraser' ? 'destination-out' : 'source-over'\n              }\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering 20,000 Interactive Nodes with Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to create 20,000 interactive circle nodes using vanilla Konva.js. It sets up multiple layers for the circles, tooltips, and drag handling, and implements efficient event delegation by attaching event handlers to the stage rather than individual nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create stage\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n// function to add a node to layer\nfunction addNode(obj, layer) {\n  const node = new Konva.Circle({\n    x: obj.x,\n    y: obj.y,\n    radius: 4,\n    fill: obj.color,\n    id: obj.id,\n  });\n\n  layer.add(node);\n}\n\n// Create a single layer for all circles\nconst circlesLayer = new Konva.Layer();\nconst tooltipLayer = new Konva.Layer();\nconst dragLayer = new Konva.Layer();\n\n// create tooltip\nconst tooltip = new Konva.Label({\n  opacity: 0.75,\n  visible: false,\n  listening: false,\n});\n\ntooltip.add(\n  new Konva.Tag({\n    fill: 'black',\n    pointerDirection: 'down',\n    pointerWidth: 10,\n    pointerHeight: 10,\n    lineJoin: 'round',\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowOpacity: 0.2,\n  })\n);\n\ntooltip.add(\n  new Konva.Text({\n    text: '',\n    fontFamily: 'Calibri',\n    fontSize: 18,\n    padding: 5,\n    fill: 'white',\n  })\n);\n\ntooltipLayer.add(tooltip);\n\n// build data\nconst data = [];\nconst colors = ['red', 'orange', 'cyan', 'green', 'blue', 'purple'];\n\nfor (let n = 0; n < 20000; n++) {\n  const x = Math.random() * width;\n  const y = height + Math.random() * 200 - 100 + (height / width) * -1 * x;\n  data.push({\n    x: x,\n    y: y,\n    id: n.toString(),\n    color: colors[Math.round(Math.random() * 5)],\n  });\n}\n\n// Add all nodes to a single layer\nfor (let n = 0; n < data.length; n++) {\n  addNode(data[n], circlesLayer);\n}\n\n// Add all layers to stage\nstage.add(circlesLayer);\nstage.add(dragLayer);\nstage.add(tooltipLayer);\n\n// handle events\nlet originalLayer;\n\nstage.on('mouseover mousemove dragmove', function (evt) {\n  const node = evt.target;\n  if (node === stage) {\n    return;\n  }\n  if (node) {\n    // update tooltip\n    const mousePos = node.getStage().getPointerPosition();\n    tooltip.position({\n      x: mousePos.x,\n      y: mousePos.y - 5,\n    });\n    tooltip\n      .getText()\n      .text('node: ' + node.id() + ', color: ' + node.fill());\n    tooltip.show();\n  }\n});\n\nstage.on('mouseout', function (evt) {\n  tooltip.hide();\n});\n\nstage.on('mousedown', function (evt) {\n  const shape = evt.target;\n  if (shape) {\n    originalLayer = shape.getLayer();\n    shape.moveTo(dragLayer);\n    // manually trigger drag and drop\n    shape.startDrag();\n  }\n});\n\nstage.on('mouseup', function (evt) {\n  const shape = evt.target;\n  if (shape) {\n    shape.moveTo(originalLayer);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering 10,000 Shapes with Tooltips in Vanilla JavaScript using Konva\nDESCRIPTION: This code creates a Konva canvas with 10,000 colored circles placed at random positions. It implements a tooltip that follows the mouse and displays information about the circle being hovered over. Two layers are used: one for the circles and another for the tooltip.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/10000_Shapes_with_Tooltip.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst circlesLayer = new Konva.Layer();\nconst tooltipLayer = new Konva.Layer();\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\nlet colorIndex = 0;\n\nfor (let i = 0; i < 10000; i++) {\n  const color = colors[colorIndex++];\n  if (colorIndex >= colors.length) {\n    colorIndex = 0;\n  }\n\n  const randX = Math.random() * stage.width();\n  const randY = Math.random() * stage.height();\n  const circle = new Konva.Circle({\n    x: randX,\n    y: randY,\n    radius: 3,\n    fill: color,\n    name: i.toString(),\n  });\n\n  circlesLayer.add(circle);\n}\n\nconst tooltip = new Konva.Text({\n  text: '',\n  fontFamily: 'Calibri',\n  fontSize: 12,\n  padding: 5,\n  visible: false,\n  fill: 'black',\n  opacity: 0.75,\n});\n\ntooltipLayer.add(tooltip);\nstage.add(circlesLayer);\nstage.add(tooltipLayer);\n\ncirclesLayer.on('mousemove', (e) => {\n  const mousePos = stage.getPointerPosition();\n  tooltip.position({\n    x: mousePos.x + 5,\n    y: mousePos.y + 5,\n  });\n  tooltip.text('node: ' + e.target.name() + ', color: ' + e.target.fill());\n  tooltip.show();\n});\n\ncirclesLayer.on('mouseout', () => {\n  tooltip.hide();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangles with React-Konva\nDESCRIPTION: Shows how to create rectangles using React-Konva components. Implements the same three rectangles as the vanilla version but using React components and JSX syntax.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Rect.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={20}\n          y={20}\n          width={100}\n          height={50}\n          fill=\"green\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        <Rect\n          x={150}\n          y={40}\n          width={100}\n          height={50}\n          fill=\"red\"\n          shadowBlur={10}\n          cornerRadius={10}\n        />\n        <Rect\n          x={50}\n          y={120}\n          width={100}\n          height={100}\n          fill=\"blue\"\n          cornerRadius={[0, 10, 20, 30]}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Large Canvas Implementation - Vanilla JavaScript\nDESCRIPTION: Creates a large 3000x3000 canvas with randomly positioned circles using vanilla JavaScript and KonvaJS. Implements basic scrolling through native scrollbars.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: WIDTH,\n  height: HEIGHT,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nfunction generateNode() {\n  return new Konva.Circle({\n    x: WIDTH * Math.random(),\n    y: HEIGHT * Math.random(),\n    radius: 50,\n    fill: 'red',\n    stroke: 'black',\n  });\n}\n\nfor (let i = 0; i < NUMBER; i++) {\n  layer.add(generateNode());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Scaling with Aspect Ratio Preservation in React Konva\nDESCRIPTION: React implementation of the image scaling technique using Konva.js. Uses React hooks to manage state for position and size, and calculates crop values based on the selected position. The component includes a dropdown for position selection and a transformer for image resizing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image, Transformer } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst positions = [\n  'left-top', 'center-top', 'right-top', '--',\n  'left-middle', 'center-middle', 'right-middle', '--',\n  'left-bottom', 'center-bottom', 'right-bottom'\n];\n\nfunction getCrop(image, size, clipPosition = 'center-middle') {\n  const width = size.width;\n  const height = size.height;\n  const aspectRatio = width / height;\n\n  let newWidth;\n  let newHeight;\n\n  const imageRatio = image.width / image.height;\n\n  if (aspectRatio >= imageRatio) {\n    newWidth = image.width;\n    newHeight = image.width / aspectRatio;\n  } else {\n    newWidth = image.height * aspectRatio;\n    newHeight = image.height;\n  }\n\n  let x = 0;\n  let y = 0;\n  if (clipPosition === 'left-top') {\n    x = 0;\n    y = 0;\n  } else if (clipPosition === 'left-middle') {\n    x = 0;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'left-bottom') {\n    x = 0;\n    y = image.height - newHeight;\n  } else if (clipPosition === 'center-top') {\n    x = (image.width - newWidth) / 2;\n    y = 0;\n  } else if (clipPosition === 'center-middle') {\n    x = (image.width - newWidth) / 2;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'center-bottom') {\n    x = (image.width - newWidth) / 2;\n    y = image.height - newHeight;\n  } else if (clipPosition === 'right-top') {\n    x = image.width - newWidth;\n    y = 0;\n  } else if (clipPosition === 'right-middle') {\n    x = image.width - newWidth;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'right-bottom') {\n    x = image.width - newWidth;\n    y = image.height - newHeight;\n  }\n\n  return {\n    cropX: x,\n    cropY: y,\n    cropWidth: newWidth,\n    cropHeight: newHeight,\n  };\n}\n\nconst App = () => {\n  const [position, setPosition] = React.useState('center-middle');\n  const [size, setSize] = React.useState({ width: 300, height: 100 });\n  const imageRef = React.useRef(null);\n  const trRef = React.useRef(null);\n  \n  const [image] = useImage('https://konvajs.org/assets/darth-vader.jpg');\n\n  const handleTransform = () => {\n    const node = imageRef.current;\n    const scaleX = node.scaleX();\n    const scaleY = node.scaleY();\n\n    node.scaleX(1);\n    node.scaleY(1);\n    setSize({\n      width: Math.max(5, node.width() * scaleX),\n      height: Math.max(5, node.height() * scaleY),\n    });\n  };\n\n  const crop = React.useMemo(() => {\n    if (!image) return null;\n    return getCrop(image, size, position);\n  }, [image, size, position]);\n\n  React.useEffect(() => {\n    if (image && imageRef.current && trRef.current) {\n      trRef.current.nodes([imageRef.current]);\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {image && (\n            <Image\n              ref={imageRef}\n              image={image}\n              x={80}\n              y={100}\n              width={size.width}\n              height={size.height}\n              {...crop}\n              draggable\n              onTransform={handleTransform}\n            />\n          )}\n          <Transformer\n            ref={trRef}\n            boundBoxFunc={(oldBox, newBox) => {\n              if (Math.abs(newBox.width) < 10 || Math.abs(newBox.height) < 10) {\n                return oldBox;\n              }\n              return newBox;\n            }}\n          />\n        </Layer>\n      </Stage>\n      <select\n        style={{ position: 'absolute', top: '4px', left: '4px' }}\n        value={position}\n        onChange={(e) => setPosition(e.target.value)}\n      >\n        {positions.map((pos) => (\n          <option key={pos} value={pos}>\n            {pos}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tango Animation with React and Konva\nDESCRIPTION: React implementation of the Shape Tango animation using react-konva. This version uses React state to manage the shapes, and includes functionality for creating random shapes, making them draggable, and animating them with the Konva.to() method when a button is clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tango.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\nconst NUM_SHAPES = 10;\n\nconst getRandomColor = () => COLORS[Math.floor(Math.random() * COLORS.length)];\n\nconst getRandomShapeProps = (width, height) => {\n  const radius = Math.random() * 100 + 20;\n  return {\n    x: Math.random() * width,\n    y: Math.random() * height,\n    sides: Math.ceil(Math.random() * 5 + 3),\n    radius,\n    fill: getRandomColor(),\n    opacity: (radius - 20) / 100,\n  };\n};\n\nconst App = () => {\n  const [shapes, setShapes] = React.useState([]);\n  const stageRef = React.useRef();\n\n  React.useEffect(() => {\n    const initialShapes = Array.from({ length: NUM_SHAPES }, () =>\n      getRandomShapeProps(window.innerWidth, window.innerHeight)\n    );\n    setShapes(initialShapes);\n  }, []);\n\n  const handleDragEnd = (e, index) => {\n    const newShapes = [...shapes];\n    newShapes[index] = {\n      ...newShapes[index],\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n    setShapes(newShapes);\n  };\n\n  const handleTango = () => {\n    const layer = stageRef.current.findOne('Layer');\n    const shapeNodes = layer.find('RegularPolygon');\n\n    shapeNodes.forEach((node, i) => {\n      const radius = Math.random() * 100 + 20;\n      const newProps = {\n        duration: 1,\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        rotation: Math.random() * 360,\n        radius: radius,\n        opacity: (radius - 20) / 100,\n        easing: Konva.Easings.EaseInOut,\n        fill: getRandomColor(),\n      };\n\n      node.to(newProps);\n\n      // Update state after animation\n      setTimeout(() => {\n        setShapes(prev => {\n          const newShapes = [...prev];\n          newShapes[i] = { ...newShapes[i], ...newProps };\n          return newShapes;\n        });\n      }, 1000);\n    });\n  };\n\n  return (\n    <>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        ref={stageRef}\n      >\n        <Layer>\n          {shapes.map((shape, i) => (\n            <RegularPolygon\n              key={i}\n              {...shape}\n              draggable\n              onDragEnd={(e) => handleDragEnd(e, i)}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <button\n        onClick={handleTango}\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          padding: '10px',\n        }}\n      >\n        Tango!\n      </button>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Desktop and Mobile Events with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create event handlers that work for both desktop and mobile applications using Konva.js. It creates a circle that responds to mousedown/touchstart and mouseup/touchend events by displaying a message. This implementation uses vanilla JavaScript with Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Desktop_and_Mobile.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\n// desktop and mobile events\ncircle.on('mousedown touchstart', function () {\n  writeMessage('Mousedown or touchstart');\n});\n\ncircle.on('mouseup touchend', function () {\n  writeMessage('Mouseup or touchend');\n});\n\nlayer.add(circle);\nlayer.add(text);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scrollbars with React-Konva\nDESCRIPTION: This snippet shows how to create custom scrollbars for a large canvas using React-Konva. It manages state for node positions, scrollbar positions, and viewport coordinates, while implementing handlers for scrollbar dragging and mouse wheel events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle, Rect } from 'react-konva';\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\nconst PADDING = 5;\n\nconst App = () => {\n  const [nodes] = React.useState(() => \n    Array(NUMBER).fill().map(() => ({\n      x: WIDTH * Math.random(),\n      y: HEIGHT * Math.random(),\n    }))\n  );\n  const [position, setPosition] = React.useState({ x: 0, y: 0 });\n  const [scrollBars, setScrollBars] = React.useState(() => ({\n    vertical: { x: window.innerWidth - PADDING - 10, y: PADDING },\n    horizontal: { x: PADDING, y: window.innerHeight - PADDING - 10 }\n  }));\n\n  const handleVerticalDrag = (e) => {\n    const pos = e.target.position();\n    const availableHeight = window.innerHeight - PADDING * 2 - 100;\n    const delta = (pos.y - PADDING) / availableHeight;\n    \n    setPosition(prev => ({ ...prev, y: -(HEIGHT - window.innerHeight) * delta }));\n    setScrollBars(prev => ({ ...prev, vertical: pos }));\n  };\n\n  const handleHorizontalDrag = (e) => {\n    const pos = e.target.position();\n    const availableWidth = window.innerWidth - PADDING * 2 - 100;\n    const delta = (pos.x - PADDING) / availableWidth;\n    \n    setPosition(prev => ({ ...prev, x: -(WIDTH - window.innerWidth) * delta }));\n    setScrollBars(prev => ({ ...prev, horizontal: pos }));\n  };\n\n  const handleWheel = (e) => {\n    e.evt.preventDefault();\n    const dx = e.evt.deltaX;\n    const dy = e.evt.deltaY;\n\n    const minX = -(WIDTH - window.innerWidth);\n    const maxX = 0;\n    const x = Math.max(minX, Math.min(position.x - dx, maxX));\n\n    const minY = -(HEIGHT - window.innerHeight);\n    const maxY = 0;\n    const y = Math.max(minY, Math.min(position.y - dy, maxY));\n\n    setPosition({ x, y });\n\n    const availableHeight = window.innerHeight - PADDING * 2 - 100;\n    const vy = (y / (-HEIGHT + window.innerHeight)) * availableHeight + PADDING;\n\n    const availableWidth = window.innerWidth - PADDING * 2 - 100;\n    const hx = (x / (-WIDTH + window.innerWidth)) * availableWidth + PADDING;\n\n    setScrollBars({\n      vertical: { x: window.innerWidth - PADDING - 10, y: vy },\n      horizontal: { x: hx, y: window.innerHeight - PADDING - 10 }\n    });\n  };\n\n  return (\n    <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      onWheel={handleWheel}\n    >\n      <Layer x={position.x} y={position.y}>\n        {nodes.map((node, i) => (\n          <Circle\n            key={i}\n            x={node.x}\n            y={node.y}\n            radius={50}\n            fill=\"red\"\n            stroke=\"black\"\n          />\n        ))}\n      </Layer>\n      <Layer>\n        <Rect\n          width={10}\n          height={100}\n          fill=\"grey\"\n          opacity={0.8}\n          x={scrollBars.vertical.x}\n          y={scrollBars.vertical.y}\n          draggable\n          onDragMove={handleVerticalDrag}\n          dragBoundFunc={(pos) => ({\n            x: window.innerWidth - PADDING - 10,\n            y: Math.max(\n              Math.min(pos.y, window.innerHeight - 100 - PADDING),\n              PADDING\n            ),\n          })}\n        />\n        <Rect\n          width={100}\n          height={10}\n          fill=\"grey\"\n          opacity={0.8}\n          x={scrollBars.horizontal.x}\n          y={scrollBars.horizontal.y}\n          draggable\n          onDragMove={handleHorizontalDrag}\n          dragBoundFunc={(pos) => ({\n            x: Math.max(\n              Math.min(pos.x, window.innerWidth - 100 - PADDING),\n              PADDING\n            ),\n            y: window.innerHeight - PADDING - 10,\n          })}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Vanilla JS Complex Connected Objects\nDESCRIPTION: Advanced implementation using vanilla JavaScript showing multiple connected circles with arrows and state management\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Connected_Objects.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// function to generate a list of \"targets\" (circles)\nfunction generateTargets() {\n  const number = 10;\n  const result = [];\n  while (result.length < number) {\n    result.push({\n      id: 'target-' + result.length,\n      x: stage.width() * Math.random(),\n      y: stage.height() * Math.random(),\n    });\n  }\n  return result;\n}\n\nconst targets = generateTargets();\n\n// function to generate arrows between targets\nfunction generateConnectors() {\n  const number = 10;\n  const result = [];\n  while (result.length < number) {\n    const from = 'target-' + Math.floor(Math.random() * targets.length);\n    const to = 'target-' + Math.floor(Math.random() * targets.length);\n    if (from === to) {\n      continue;\n    }\n    result.push({\n      id: 'connector-' + result.length,\n      from: from,\n      to: to,\n    });\n  }\n  return result;\n}\n\nfunction getConnectorPoints(from, to) {\n  const dx = to.x - from.x;\n  const dy = to.y - from.y;\n  let angle = Math.atan2(-dy, dx);\n\n  const radius = 50;\n\n  return [\n    from.x + -radius * Math.cos(angle + Math.PI),\n    from.y + radius * Math.sin(angle + Math.PI),\n    to.x + -radius * Math.cos(angle),\n    to.y + radius * Math.sin(angle),\n  ];\n}\n\nconst connectors = generateConnectors();\n\n// update all objects on the canvas from the state of the app\nfunction updateObjects() {\n  targets.forEach((target) => {\n    const node = layer.findOne('#' + target.id);\n    node.x(target.x);\n    node.y(target.y);\n  });\n  connectors.forEach((connect) => {\n    const line = layer.findOne('#' + connect.id);\n    const fromNode = layer.findOne('#' + connect.from);\n    const toNode = layer.findOne('#' + connect.to);\n\n    const points = getConnectorPoints(\n      fromNode.position(),\n      toNode.position()\n    );\n    line.points(points);\n  });\n}\n\n// generate nodes for the app\nconnectors.forEach((connect) => {\n  const line = new Konva.Arrow({\n    stroke: 'black',\n    id: connect.id,\n    fill: 'black',\n  });\n  layer.add(line);\n});\n\ntargets.forEach((target) => {\n  const node = new Konva.Circle({\n    id: target.id,\n    fill: Konva.Util.getRandomColor(),\n    radius: 20 + Math.random() * 20,\n    shadowBlur: 10,\n    draggable: true,\n  });\n  layer.add(node);\n\n  node.on('dragmove', () => {\n    // mutate the state\n    target.x = node.x();\n    target.y = node.y();\n\n    // update nodes from the new state\n    updateObjects();\n  });\n});\n\nupdateObjects();\n```\n\n----------------------------------------\n\nTITLE: Expanding Images on Hover with React and Konva.js\nDESCRIPTION: This snippet shows how to implement expandable and draggable images using React with react-konva. It creates a reusable ImageWithHover component and uses React hooks to manage the hover state and image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Expand_Images_on_Hover.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst ImageWithHover = ({ src, x, y, width, height, offsetX, offsetY }) => {\n  const [image] = useImage(src);\n  const [isHovered, setIsHovered] = useState(false);\n  \n  const scale = isHovered ? 1.2 : 1;\n  \n  return (\n    <Image\n      image={image}\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      scaleX={scale}\n      scaleY={scale}\n      draggable\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <ImageWithHover\n          src=\"https://konvajs.org/assets/darth-vader.jpg\"\n          x={110}\n          y={88}\n          width={200}\n          height={137}\n          offsetX={100}\n          offsetY={68}\n        />\n        <ImageWithHover\n          src=\"https://konvajs.org/assets/yoda.jpg\"\n          x={290}\n          y={70}\n          width={93}\n          height={104}\n          offsetX={46}\n          offsetY={52}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop for Multiple Shapes using React and react-konva\nDESCRIPTION: This React component creates a Konva stage with multiple draggable rectangles. It uses react-konva to integrate Konva.js with React, managing the state of the shapes and handling drag events, cursor changes, and shape removal on double-click or double-tap.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Multiple_Shapes.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst App = () => {\n  const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n  \n  // Initialize boxes with proper IDs and positions\n  const initialBoxes = colors.map((color, i) => ({\n    id: i.toString(),\n    x: i * 30 + 50,\n    y: i * 18 + 40,\n    width: 100,\n    height: 50,\n    fill: color,\n    stroke: 'black',\n    strokeWidth: 4\n  }));\n  \n  const [boxes, setBoxes] = useState(initialBoxes);\n  \n  const handleDragStart = (e) => {\n    // Move the dragged box to the end of the array to simulate moveToTop\n    const id = e.target.id();\n    const box = boxes.find(b => b.id === id);\n    const filteredBoxes = boxes.filter(b => b.id !== id);\n    setBoxes([...filteredBoxes, box]);\n  };\n  \n  const handleDragMove = (e) => {\n    // Update the position of the box\n    const id = e.target.id();\n    const newBoxes = boxes.map(box => {\n      if (box.id === id) {\n        return {\n          ...box,\n          x: e.target.x(),\n          y: e.target.y()\n        };\n      }\n      return box;\n    });\n    setBoxes(newBoxes);\n  };\n  \n  const handleDoubleClick = (id) => {\n    // Remove the box on double click\n    setBoxes(boxes.filter(box => box.id !== id));\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {boxes.map((box) => (\n          <Rect\n            key={box.id}\n            id={box.id}\n            x={box.x}\n            y={box.y}\n            width={box.width}\n            height={box.height}\n            fill={box.fill}\n            stroke={box.stroke}\n            strokeWidth={box.strokeWidth}\n            draggable\n            onDragStart={handleDragStart}\n            onDragMove={handleDragMove}\n            onDblClick={() => handleDoubleClick(box.id)}\n            onDblTap={() => handleDoubleClick(box.id)}\n            onMouseOver={(e) => {\n              document.body.style.cursor = 'pointer';\n            }}\n            onMouseOut={(e) => {\n              document.body.style.cursor = 'default';\n            }}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Events with React and Konva\nDESCRIPTION: This snippet shows how to create a draggable text element and handle drag events using React with react-konva. It uses React hooks to manage the status state and updates it based on drag events. The component renders a Stage with a Layer containing two Text nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/06_Drag_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [status, setStatus] = useState('');\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={40}\n          y={40}\n          text=\"Draggable Text\"\n          fontSize={20}\n          draggable\n          width={200}\n          onDragStart={() => setStatus('drag started')}\n          onDragEnd={() => setStatus('drag ended')}\n          onDragMove={() => setStatus('dragging')}\n        />\n        <Text\n          x={40}\n          y={100}\n          text={status}\n          fontSize={16}\n          width={200}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Drawing with React in Konva\nDESCRIPTION: This code demonstrates using Konva's batchDraw() method in a React component. It creates a rotating rectangle that responds to mousemove events while using refs to access the Konva nodes. The example shows how to handle efficient redraws within the React lifecycle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Batch_Draw.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\n// For demo purposes, disable auto draw\nKonva.autoDrawEnabled = false;\n\nconst App = () => {\n  const rectRef = useRef(null);\n  const layerRef = useRef(null);\n\n  useEffect(() => {\n    const stage = rectRef.current.getStage();\n    \n    stage.on('mousemove', () => {\n      // rotate rectangle on mouse move\n      rectRef.current.rotate(5);\n      // use batchDraw instead of draw for better performance\n      layerRef.current.getLayer().batchDraw();\n    });\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer ref={layerRef}>\n        <Rect\n          ref={rectRef}\n          x={window.innerWidth / 2 - 50}\n          y={window.innerHeight / 2 - 25}\n          width={100}\n          height={50}\n          fill=\"green\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Events with Vue-Konva\nDESCRIPTION: Vue 3 implementation of the shape events using vue-konva components. Uses the Composition API with ref() for reactive state management and template-based event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Binding_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" ref=\"stageRef\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-regular-polygon\n        :config=\"triangleConfig\"\n        @mouseout=\"writeMessage('Mouseout triangle')\"\n        @mousemove=\"handleTriangleMouseMove\"\n      />\n      <v-circle\n        :config=\"circleConfig\"\n        @mouseover=\"writeMessage('Mouseover circle')\"\n        @mouseout=\"writeMessage('Mouseout circle')\"\n        @mousedown=\"writeMessage('Mousedown circle')\"\n        @mouseup=\"writeMessage('Mouseup circle')\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageRef = ref(null);\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = {\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message,\n  fill: 'black'\n};\n\nconst triangleConfig = {\n  x: 80,\n  y: 120,\n  sides: 3,\n  radius: 80,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst circleConfig = {\n  x: 230,\n  y: 100,\n  radius: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst writeMessage = (text) => {\n  message.value = text;\n};\n\nconst handleTriangleMouseMove = () => {\n  const mousePos = stageRef.value.getNode().getPointerPosition();\n  writeMessage('x: ' + mousePos.x + ', y: ' + mousePos.y);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Path in Konva with Vue.js\nDESCRIPTION: This snippet demonstrates how to create a custom path shape using Konva.js with Vue.js. It uses the Vue Konva integration to create a green path with specific SVG path data and scaling, using a declarative template approach.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Path.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-path :config=\"pathConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst pathConfig = {\n  x: 50,\n  y: 50,\n  data: 'M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z',\n  fill: 'green',\n  scale: {\n    x: 2,\n    y: 2\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Width\nDESCRIPTION: Methods to control the width of a container's clipping region, defining how wide the visible area will be.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animals on the Beach Game with React and react-konva\nDESCRIPTION: A React implementation of the Animals on the Beach game using react-konva. This version uses functional components with hooks for state management, splitting the functionality into reusable components like Animal, AnimalOutline, and Background.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Stage, Layer, Image, Text } from 'react-konva';\nimport useImage from 'use-image';\n\nconst Animal = ({ name, startX, startY, outline, onScore }) => {\n  const [pos, setPos] = useState({ x: startX, y: startY });\n  const [isDraggable, setIsDraggable] = useState(true);\n  const [inRightPlace, setInRightPlace] = useState(false);\n  \n  const [image] = useImage(`https://konvajs.org/assets/${name}.png`);\n  const [glowImage] = useImage(`https://konvajs.org/assets/${name}-glow.png`);\n\n  const isNearOutline = (pos, outline) => {\n    const { x, y } = pos;\n    return (\n      x > outline.x - 20 &&\n      x < outline.x + 20 &&\n      y > outline.y - 20 &&\n      y < outline.y + 20\n    );\n  };\n\n  if (!image || !glowImage) return null;\n\n  return (\n    <Image\n      image={image}\n      x={pos.x}\n      y={pos.y}\n      draggable={isDraggable}\n      onDragStart={(e) => e.target.moveToTop()}\n      onDragEnd={(e) => {\n        const newPos = { x: e.target.x(), y: e.target.y() };\n        setPos(newPos);\n        \n        if (!inRightPlace && isNearOutline(newPos, outline)) {\n          setPos({ x: outline.x, y: outline.y });\n          setInRightPlace(true);\n          setIsDraggable(false);\n          onScore();\n        }\n      }}\n      onMouseOver={(e) => {\n        e.target.image(glowImage);\n        const stage = e.target.getStage();\n        stage.container().style.cursor = 'pointer';\n      }}\n      onMouseOut={(e) => {\n        e.target.image(image);\n        const stage = e.target.getStage();\n        stage.container().style.cursor = 'default';\n      }}\n      onDragMove={(e) => {\n        const stage = e.target.getStage();\n        stage.container().style.cursor = 'pointer';\n      }}\n    />\n  );\n};\n\nconst AnimalOutline = ({ name, x, y }) => {\n  const [image] = useImage(`https://konvajs.org/assets/${name}-black.png`);\n  return image ? <Image image={image} x={x} y={y} /> : null;\n};\n\nconst Background = () => {\n  const [image] = useImage('https://konvajs.org/assets/beach.png');\n  return image ? <Image image={image} width={578} height={530} /> : null;\n};\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  \n  const animals = {\n    snake: { x: 10, y: 70, outline: { x: 275, y: 350 } },\n    giraffe: { x: 90, y: 70, outline: { x: 390, y: 250 } },\n    monkey: { x: 275, y: 70, outline: { x: 300, y: 420 } },\n    lion: { x: 400, y: 70, outline: { x: 100, y: 390 } }\n  };\n\n  return (\n    <Stage width={578} height={530}>\n      <Layer>\n        <Background />\n        <Text\n          text={score >= 4 ? 'You win! Enjoy your booty!' : 'Ahoy! Put the animals on the beach!'}\n          x={578 / 2}\n          y={40}\n          fontSize={20}\n          fontFamily=\"Calibri\"\n          fill=\"white\"\n          align=\"center\"\n          offsetX={200}\n        />\n      </Layer>\n      <Layer>\n        {Object.entries(animals).map(([name, pos]) => (\n          <AnimalOutline\n            key={`${name}_outline`}\n            name={name}\n            x={pos.outline.x}\n            y={pos.outline.y}\n          />\n        ))}\n        {Object.entries(animals).map(([name, pos]) => (\n          <Animal\n            key={name}\n            name={name}\n            startX={pos.x}\n            startY={pos.y}\n            outline={pos.outline}\n            onScore={() => setScore(s => s + 1)}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale Animation with React Konva\nDESCRIPTION: This snippet shows how to implement scaling animations using React with react-konva. It uses React hooks (useRef, useEffect, useState) to manage the animation and component state. The animation applies different scaling behaviors to three draggable hexagons, demonstrating various transform techniques.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Scaling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\nimport { useEffect, useRef, useState } from 'react';\n\nconst App = () => {\n  const blueHexRef = useRef(null);\n  const yellowHexRef = useRef(null);\n  const redHexRef = useRef(null);\n\n  const [positions, setPositions] = useState({\n    blue: { x: 50, y: 50 },\n    yellow: { x: 150, y: 50 },\n    red: { x: 250, y: 50 }\n  });\n\n  useEffect(() => {\n    const period = 2000;\n    const anim = new Konva.Animation((frame) => {\n      const scale = Math.sin(frame.time * 2 * Math.PI / period) + 2;\n\n      // blue hex - scale x and y\n      blueHexRef.current.scale({ x: scale, y: scale });\n\n      // yellow hex - scale y only\n      yellowHexRef.current.scaleY(scale);\n\n      // red hex - scale x only\n      redHexRef.current.scaleX(scale);\n    }, blueHexRef.current.getLayer());\n\n    anim.start();\n\n    return () => {\n      anim.stop();\n    };\n  }, []);\n\n  const handleDragEnd = (e, color) => {\n    setPositions(prev => ({\n      ...prev,\n      [color]: { x: e.target.x(), y: e.target.y() }\n    }));\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <RegularPolygon\n          ref={blueHexRef}\n          x={positions.blue.x}\n          y={positions.blue.y}\n          sides={6}\n          radius={20}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          draggable\n          onDragEnd={(e) => handleDragEnd(e, 'blue')}\n        />\n        <RegularPolygon\n          ref={yellowHexRef}\n          x={positions.yellow.x}\n          y={positions.yellow.y}\n          sides={6}\n          radius={20}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n          draggable\n          onDragEnd={(e) => handleDragEnd(e, 'yellow')}\n        />\n        <RegularPolygon\n          ref={redHexRef}\n          x={positions.red.x}\n          y={positions.red.y}\n          sides={6}\n          radius={20}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          draggable\n          onDragEnd={(e) => handleDragEnd(e, 'red')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Animals on the Beach Game with Vanilla JavaScript and Konva.js\nDESCRIPTION: A complete implementation of the Animals on the Beach drag-and-drop game using vanilla JavaScript and Konva.js. The code creates a stage with draggable animal images that need to be placed on their corresponding outline positions. Includes mouse interactions, scoring, and win condition detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: 578,\n  height: 530,\n});\n\nconst background = new Konva.Layer();\nconst animalLayer = new Konva.Layer();\nconst animalShapes = [];\nlet score = 0;\n\n// create and load background image\nconst backgroundImage = new Image();\nbackgroundImage.onload = function() {\n  const backgroundKonvaImage = new Konva.Image({\n    image: backgroundImage,\n    x: 0,\n    y: 0,\n    width: stage.width(),\n    height: stage.height(),\n  });\n  background.add(backgroundKonvaImage);\n  backgroundKonvaImage.moveToBottom();\n};\nbackgroundImage.src = 'https://konvajs.org/assets/beach.png';\n\n// image positions\nconst animals = {\n  snake: {\n    x: 10,\n    y: 70,\n  },\n  giraffe: {\n    x: 90,\n    y: 70,\n  },\n  monkey: {\n    x: 275,\n    y: 70,\n  },\n  lion: {\n    x: 400,\n    y: 70,\n  },\n};\n\nconst outlines = {\n  snake_black: {\n    x: 275,\n    y: 350,\n  },\n  giraffe_black: {\n    x: 390,\n    y: 250,\n  },\n  monkey_black: {\n    x: 300,\n    y: 420,\n  },\n  lion_black: {\n    x: 100,\n    y: 390,\n  },\n};\n\nfunction isNearOutline(animal, outline) {\n  const a = animal;\n  const o = outline;\n  const ax = a.x();\n  const ay = a.y();\n\n  if (ax > o.x - 20 && ax < o.x + 20 && ay > o.y - 20 && ay < o.y + 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// create message text\nconst messageText = new Konva.Text({\n  text: 'Ahoy! Put the animals on the beach!',\n  x: stage.width() / 2,\n  y: 40,\n  fontSize: 20,\n  fontFamily: 'Calibri',\n  fill: 'white',\n  align: 'center',\n  // for center align we need to set offset\n  offsetX: 200,\n});\nbackground.add(messageText);\n\nfunction updateMessage(text) {\n  messageText.text(text);\n}\n\nfunction loadImages(sources, callback) {\n  const assetDir = 'https://konvajs.org/assets/';\n  const images = {};\n  let loadedImages = 0;\n  let numImages = 0;\n  \n  for (const src in sources) {\n    numImages++;\n  }\n  \n  for (const src in sources) {\n    images[src] = new Image();\n    images[src].onload = function () {\n      if (++loadedImages >= numImages) {\n        callback(images);\n      }\n    };\n    images[src].src = assetDir + sources[src];\n  }\n}\n\nfunction initStage(images) {\n  // create draggable animals\n  for (const key in animals) {\n    // anonymous function to induce scope\n    (function () {\n      const privKey = key;\n      const anim = animals[key];\n\n      const animal = new Konva.Image({\n        image: images[key],\n        x: anim.x,\n        y: anim.y,\n        draggable: true,\n      });\n\n      animal.on('dragstart', function () {\n        this.moveToTop();\n      });\n      \n      /*\n       * check if animal is in the right spot and\n       * snap into place if it is\n       */\n      animal.on('dragend', function () {\n        const outline = outlines[privKey + '_black'];\n        if (!animal.inRightPlace && isNearOutline(animal, outline)) {\n          animal.position({\n            x: outline.x,\n            y: outline.y,\n          });\n          animal.inRightPlace = true;\n\n          if (++score >= 4) {\n            const text = 'You win! Enjoy your booty!';\n            updateMessage(text);\n          }\n\n          // disable drag and drop\n          setTimeout(function () {\n            animal.draggable(false);\n          }, 50);\n        }\n      });\n      \n      // make animal glow on mouseover\n      animal.on('mouseover', function () {\n        animal.image(images[privKey + '_glow']);\n        document.body.style.cursor = 'pointer';\n      });\n      \n      // return animal on mouseout\n      animal.on('mouseout', function () {\n        animal.image(images[privKey]);\n        document.body.style.cursor = 'default';\n      });\n\n      animal.on('dragmove', function () {\n        document.body.style.cursor = 'pointer';\n      });\n\n      animalLayer.add(animal);\n      animalShapes.push(animal);\n    })();\n  }\n\n  // create animal outlines\n  for (const key in outlines) {\n    // anonymous function to induce scope\n    (function () {\n      const imageObj = images[key];\n      const out = outlines[key];\n\n      const outline = new Konva.Image({\n        image: imageObj,\n        x: out.x,\n        y: out.y,\n      });\n\n      animalLayer.add(outline);\n    })();\n  }\n\n  stage.add(background);\n  stage.add(animalLayer);\n\n  updateMessage(\n    'Ahoy! Put the animals on the beach!'\n  );\n}\n\nconst sources = {\n  beach: 'beach.png',\n  snake: 'snake.png',\n  snake_glow: 'snake-glow.png',\n  snake_black: 'snake-black.png',\n  lion: 'lion.png',\n  lion_glow: 'lion-glow.png',\n  lion_black: 'lion-black.png',\n  monkey: 'monkey.png',\n  monkey_glow: 'monkey-glow.png',\n  monkey_black: 'monkey-black.png',\n  giraffe: 'giraffe.png',\n  giraffe_glow: 'giraffe-glow.png',\n  giraffe_black: 'giraffe-black.png',\n};\n\n// Demo warning: You'll need local image files for this demo to work\nloadImages(sources, initStage);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting clipHeight in Konva Container\nDESCRIPTION: Example demonstrating how to get and set the clip height for a Konva container. This method controls the height of the clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);\n```\n\n----------------------------------------\n\nTITLE: Reordering Circles on Drag in React-Konva\nDESCRIPTION: This React component demonstrates how to reorder draggable circles in a Konva stage by manipulating the state. When a circle is dragged, it's moved to the top of the render order.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/zIndex.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nfunction generateItems() {\n  const items = [];\n  for (let i = 0; i < 10; i++) {\n    items.push({\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      id: 'node-' + i,\n      color: Konva.Util.getRandomColor(),\n    });\n  }\n  return items;\n}\n\nconst App = () => {\n  const [items, setItems] = React.useState(generateItems());\n\n  const handleDragStart = (e) => {\n    const id = e.target.name();\n    const itemsCopy = items.slice();\n    const item = itemsCopy.find((i) => i.id === id);\n    const index = itemsCopy.indexOf(item);\n    // remove from the list:\n    itemsCopy.splice(index, 1);\n    // add to the top\n    itemsCopy.push(item);\n    setItems(itemsCopy);\n  };\n\n  const onDragEnd = (e) => {\n    const id = e.target.name();\n    const itemsCopy = items.slice();\n    const item = items.find((i) => i.id === id);\n    const index = items.indexOf(item);\n    // update item position\n    itemsCopy[index] = {\n      ...item,\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n    setItems(itemsCopy);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {items.map((item) => (\n          <Circle\n            key={item.id}\n            name={item.id}\n            draggable\n            x={item.x}\n            y={item.y}\n            fill={item.color}\n            radius={50}\n            onDragStart={handleDragStart}\n            onDragEnd={onDragEnd}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Rectangles with React and Konva\nDESCRIPTION: This React implementation of the stress test creates 300 rectangles and animates them using useState for maintaining rectangle properties and useRef for tracking the animation. It uses react-konva components (Stage, Layer, Rect) to render the shapes and Konva.Animation for the rotation updates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animation_Stress_Test.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\nimport Konva from 'konva';\n\nconst App = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  // State for rectangles\n  const [boxes, setBoxes] = useState([]);\n  \n  // Animation ref to keep track of the animation\n  const animRef = useRef(null);\n  const layerRef = useRef(null);\n  \n  // Generate random boxes\n  useEffect(() => {\n    const colors = [\n      'red',\n      'orange',\n      'yellow',\n      'green',\n      'blue',\n      'cyan',\n      'purple',\n    ];\n    \n    const newBoxes = [];\n    let colorIndex = 0;\n    \n    for (let i = 0; i < 300; i++) {\n      const color = colors[colorIndex++];\n      if (colorIndex >= colors.length) {\n        colorIndex = 0;\n      }\n      \n      const randWidth = Math.random() * 100 + 20;\n      const randHeight = Math.random() * 100 + 20;\n      const randX = Math.random() * width - 20;\n      const randY = Math.random() * height - 20;\n      \n      newBoxes.push({\n        id: i,\n        x: randX,\n        y: randY,\n        width: randWidth,\n        height: randHeight,\n        offsetX: randWidth / 2,\n        offsetY: randHeight / 2,\n        fill: color,\n        stroke: 'black',\n        strokeWidth: 4,\n        rotation: 0, // Initial rotation\n      });\n    }\n    \n    setBoxes(newBoxes);\n  }, [width, height]);\n  \n  // Setup animation on mount\n  useEffect(() => {\n    if (layerRef.current && boxes.length > 0) {\n      // Create animation\n      const angularSpeed = 100;\n      \n      animRef.current = new Konva.Animation((frame) => {\n        const angularDiff = (angularSpeed * frame.timeDiff) / 1000;\n        \n        setBoxes(prevBoxes => \n          prevBoxes.map(box => ({\n            ...box,\n            rotation: box.rotation + angularDiff\n          }))\n        );\n      }, layerRef.current.getLayer());\n      \n      // Start animation\n      animRef.current.start();\n      \n      // Cleanup on unmount\n      return () => {\n        if (animRef.current) {\n          animRef.current.stop();\n        }\n      };\n    }\n  }, [boxes.length]);\n  \n  return (\n    <Stage width={width} height={height}>\n      <Layer ref={layerRef} listening={false}>\n        {boxes.map((box) => (\n          <Rect\n            key={box.id}\n            x={box.x}\n            y={box.y}\n            width={box.width}\n            height={box.height}\n            offsetX={box.offsetX}\n            offsetY={box.offsetY}\n            fill={box.fill}\n            stroke={box.stroke}\n            strokeWidth={box.strokeWidth}\n            rotation={box.rotation}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop for Multiple Shapes using Vue and vue-konva\nDESCRIPTION: This Vue component creates a Konva stage with multiple draggable rectangles. It uses vue-konva to integrate Konva.js with Vue, managing the state of the shapes and handling drag events, cursor changes, and shape removal on double-click or double-tap.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Multiple_Shapes.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-rect\n        v-for=\"box in boxes\"\n        :key=\"box.id\"\n        :config=\"box\"\n        @dragstart=\"handleDragStart\"\n        @dragmove=\"handleDragMove\"\n        @mouseover=\"handleMouseOver\"\n        @mouseout=\"handleMouseOut\"\n        @dblclick=\"handleDoubleClick\"\n        @dbltap=\"handleDoubleClick\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\n// Initialize boxes with proper configuration\nconst initialBoxes = colors.map((color, i) => ({\n  id: i.toString(),\n  x: i * 30 + 50,\n  y: i * 18 + 40,\n  width: 100,\n  height: 50,\n  fill: color,\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n}));\n\nconst boxes = ref(initialBoxes);\n\nconst handleDragStart = (e) => {\n  const id = e.target.id();\n  \n  // Move the dragged box to the end of the array to simulate moveToTop\n  const box = boxes.value.find(b => b.id === id);\n  const filteredBoxes = boxes.value.filter(b => b.id !== id);\n  boxes.value = [...filteredBoxes, box];\n};\n\nconst handleDragMove = (e) => {\n  const id = e.target.id();\n  const index = boxes.value.findIndex(b => b.id === id);\n  \n  if (index !== -1) {\n    // Update position\n    const updatedBox = { ...boxes.value[index] };\n    updatedBox.x = e.target.x();\n    updatedBox.y = e.target.y();\n    \n    // Replace the box in the array\n    const newBoxes = [...boxes.value];\n    newBoxes[index] = updatedBox;\n    boxes.value = newBoxes;\n  }\n  \n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseOver = () => {\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseOut = () => {\n  document.body.style.cursor = 'default';\n};\n\nconst handleDoubleClick = (e) => {\n  const id = e.target.id();\n  // Remove the box\n  boxes.value = boxes.value.filter(box => box.id !== id);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Height in Konva\nDESCRIPTION: Example of getting and setting the height of a text area, which accounts for multi-line text, line heights, and padding.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = text.height();\n\n// set height\ntext.height(20);\n\n// set to auto\ntext.height('auto');\ntext.height() // will return calculated height, and not \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resize Limits with Vue-Konva\nDESCRIPTION: Vue 3 implementation of a resizable rectangle with width limit using Vue-Konva. Uses template syntax and composition API with refs to manage the transformer and rectangle nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/07_Resize_Limits.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {\n  boundBoxFunc: (oldBox, newBox) => {\n    // limit resize\n    if (newBox.width > 200) {\n      return oldBox;\n    }\n    return newBox;\n  }\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Canvas Animations with Vue and Konva\nDESCRIPTION: A Vue component that demonstrates two animation techniques in Konva. It creates a draggable green rectangle that scales on drag events using Tween animations, and a red hexagon that moves in a continuous sine wave pattern using Konva.Animation. The component uses Vue 3's composition API with setup script.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Simple_Animations.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage ref=\"stage\" :config=\"stageSize\">\n    <v-layer ref=\"layer\">\n      <v-rect\n        ref=\"rect\"\n        @dragstart=\"changeSize\"\n        @dragend=\"changeSize\"\n        :config=\"{\n          width: 50,\n          height: 50,\n          fill: 'green',\n          draggable: true,\n          x: 100,\n          y: 100\n        }\"\n      />\n      <v-regular-polygon\n        ref=\"hexagon\"\n        :config=\"{\n          x: 200,\n          y: 200,\n          sides: 6,\n          radius: 20,\n          fill: 'red',\n          stroke: 'black',\n          strokeWidth: 4\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst stage = ref(null);\nconst hexagon = ref(null);\n\nconst changeSize = (e) => {\n  // to() is a method of `Konva.Node` instances\n  e.target.to({\n    scaleX: Math.random() + 0.8,\n    scaleY: Math.random() + 0.8,\n    duration: 0.2\n  });\n};\n\nonMounted(() => {\n  const amplitude = 100;\n  const period = 5000; // in ms\n  const centerX = stage.value.getNode().getWidth() / 2;\n  const hexagonNode = hexagon.value.getNode();\n\n  // example of Konva.Animation\n  const anim = new Konva.Animation((frame) => {\n    hexagonNode.setX(\n      amplitude * Math.sin((frame.time * 2 * Math.PI) / period) + centerX\n    );\n  }, hexagonNode.getLayer());\n\n  anim.start();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Geometry Helper Functions\nDESCRIPTION: Utility functions for calculating corner positions and client rectangles for transformed shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngetCorner(pivotX, pivotY, diffX, diffY, angle) {\n  const distance = Math.sqrt(diffX * diffX + diffY * diffY);\n  angle += Math.atan2(diffY, diffX);\n  const x = pivotX + distance * Math.cos(angle);\n  const y = pivotY + distance * Math.sin(angle);\n  return { x, y };\n},\ngetClientRect(rotatedBox) {\n  const { x, y, width, height } = rotatedBox;\n  const rad = rotatedBox.rotation || 0;\n  const p1 = this.getCorner(x, y, 0, 0, rad);\n  const p2 = this.getCorner(x, y, width, 0, rad);\n  const p3 = this.getCorner(x, y, width, height, rad);\n  const p4 = this.getCorner(x, y, 0, height, rad);\n  const minX = Math.min(p1.x, p2.x, p3.x, p4.x);\n  const minY = Math.min(p1.y, p2.y, p3.y, p4.y);\n  const maxX = Math.max(p1.x, p2.x, p3.x, p4.x);\n  const maxY = Math.max(p1.y, p2.y, p3.y, p4.y);\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline Line with Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to create a curved spline line using vanilla Konva.js. It initializes a stage, layer, and line with tension property set to 1 for curvature. The line is styled with red color, rounded caps and joins, and added to the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Spline.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst line = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  tension: 1\n});\n\nlayer.add(line);\n```\n\n----------------------------------------\n\nTITLE: Defining sceneFunc in Konva.js\nDESCRIPTION: Example showing how to get and set a custom scene drawing function that determines how the shape is rendered on the canvas and for hit detection if hitFunc isn't defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Relative Mouse Position in Vue Konva\nDESCRIPTION: This Vue implementation demonstrates how to find relative mouse position in Konva.js with nested transformed elements. It uses Vue's reactivity system to maintain a list of circles that are added at the relative pointer position when the canvas is clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Relative_Pointer_Position.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage \n    :config=\"stageConfig\"\n    @click=\"handleStageClick\"\n  >\n    <v-layer :config=\"layerConfig\">\n      <v-group :config=\"groupConfig\">\n        <v-text :config=\"textConfig\" />\n        <v-circle \n          v-for=\"circle in circles\"\n          :key=\"circle.id\"\n          :config=\"circle\"\n        />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  x: 20,\n  y: 50\n};\n\nconst layerConfig = {\n  scaleX: 1.2,\n  scaleY: 0.8,\n  rotation: 5\n};\n\nconst groupConfig = {\n  x: 30,\n  rotation: 10,\n  scaleX: 1.5\n};\n\nconst textConfig = {\n  text: 'Click on the canvas to draw a circle',\n  fontSize: 20\n};\n\nconst circles = ref([]);\n\nconst handleStageClick = (e) => {\n  // Get the group reference from konva tree\n  const group = e.target.getStage().findOne('Group');\n  if (!group) return;\n  \n  // Get position relative to the group\n  const pos = group.getRelativePointerPosition();\n  \n  // Add new circle\n  circles.value.push({\n    x: pos.x,\n    y: pos.y,\n    radius: 20,\n    fill: 'red',\n    id: Date.now().toString()\n  });\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Video on Canvas with React in Konva.js\nDESCRIPTION: This React implementation displays a video on a Konva.js canvas. It uses React hooks (useState, useEffect, useRef) to manage the video element, control playback animation, handle window resizing, and manage loading states. The video is draggable and maintains proper dimensions from the source.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Video_On_Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image, Text } from 'react-konva';\nimport { useEffect, useRef, useState } from 'react';\n\nconst App = () => {\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: 400,\n  });\n  const [videoElement] = useState(() => {\n    const element = document.createElement('video');\n    element.src =\n      'https://upload.wikimedia.org/wikipedia/commons/transcoded/c/c4/Physicsworks.ogv/Physicsworks.ogv.240p.vp9.webm';\n    return element;\n  });\n  const [videoSize, setVideoSize] = useState({ width: 0, height: 0 });\n  const [status, setStatus] = useState('Loading video...');\n  const animationRef = useRef(null);\n  const layerRef = useRef(null);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: 400,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    const handleMetadata = () => {\n      setStatus('Press PLAY...');\n      setVideoSize({\n        width: videoElement.videoWidth,\n        height: videoElement.videoHeight,\n      });\n    };\n\n    videoElement.addEventListener('loadedmetadata', handleMetadata);\n    return () => videoElement.removeEventListener('loadedmetadata', handleMetadata);\n  }, [videoElement]);\n\n  const handlePlay = () => {\n    setStatus('');\n    videoElement.play();\n    if (layerRef.current) {\n      const anim = new Konva.Animation(() => {}, layerRef.current);\n      animationRef.current = anim;\n      anim.start();\n    }\n  };\n\n  const handlePause = () => {\n    videoElement.pause();\n    if (animationRef.current) {\n      animationRef.current.stop();\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={handlePlay}>Play</button>\n      <button onClick={handlePause}>Pause</button>\n      <Stage width={dimensions.width} height={dimensions.height}>\n        <Layer ref={layerRef}>\n          <Image\n            image={videoElement}\n            x={50}\n            y={20}\n            width={videoSize.width}\n            height={videoSize.height}\n            draggable\n          />\n          {status && (\n            <Text\n              text={status}\n              width={dimensions.width}\n              height={dimensions.height}\n              align=\"center\"\n              verticalAlign=\"middle\"\n            />\n          )}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scene Drawing Function in Konva.js\nDESCRIPTION: Shows how to get and set a custom scene drawing function for Konva shapes. This function is used to draw the shape on canvas and will also be used for the hit area if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Image with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create a draggable image in HTML5 Canvas using vanilla JavaScript and Konva.js. It loads a Yoda image, sets it as draggable, and adds cursor styling on mouse hover events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/02_Drag_an_Image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const yoda = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    width: 106,\n    height: 118,\n    draggable: true,\n  });\n\n  // add cursor styling\n  yoda.on('mouseover', function () {\n    document.body.style.cursor = 'pointer';\n  });\n  yoda.on('mouseout', function () {\n    document.body.style.cursor = 'default';\n  });\n\n  layer.add(yoda);\n};\nimageObj.src = 'https://konvajs.org/assets/yoda.jpg';\n\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas Animation with Konva in React\nDESCRIPTION: This React implementation demonstrates optimized Konva animations using refs and useEffect. It includes shape caching for performance, selective property animation with Konva.Animation, and a toggle button to control animation state. The example animates a star rotation and circle movement in a pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Animation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star, Circle } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\n\nconst App = () => {\n  const [isPlaying, setIsPlaying] = useState(true);\n  const starRef = useRef(null);\n  const circleRef = useRef(null);\n  const animRef = useRef(null);\n\n  useEffect(() => {\n    // Cache the star shape for better performance\n    if (starRef.current) {\n      starRef.current.cache();\n    }\n\n    // Create animation\n    const anim = new Konva.Animation((frame) => {\n      // Rotate star (cached shape)\n      starRef.current.rotation(frame.time * 0.1);\n      \n      // Move circle in a circle pattern\n      circleRef.current.x(100 + Math.cos(frame.time * 0.002) * 50);\n      circleRef.current.y(100 + Math.sin(frame.time * 0.002) * 50);\n    }, starRef.current.getLayer());\n\n    animRef.current = anim;\n    anim.start();\n\n    return () => anim.stop();\n  }, []);\n\n  const toggleAnimation = () => {\n    if (isPlaying) {\n      animRef.current.stop();\n    } else {\n      animRef.current.start();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div>\n      <button\n        onClick={toggleAnimation}\n        style={{ position: 'absolute', top: '10px', left: '10px' }}\n      >\n        {isPlaying ? 'Stop Animation' : 'Start Animation'}\n      </button>\n      \n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Star\n            ref={starRef}\n            x={window.innerWidth / 2}\n            y={window.innerHeight / 2}\n            numPoints={6}\n            innerRadius={40}\n            outerRadius={70}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n          <Circle\n            ref={circleRef}\n            x={100}\n            y={100}\n            radius={20}\n            fill=\"red\"\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Control with Vue and Konva\nDESCRIPTION: Vue 3 implementation of animation control using vue-konva. Uses composition API with ref and lifecycle hooks (onMounted, onUnmounted) for managing animation state. Implements the same sinusoidal animation pattern with start/stop functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Stop_Animation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div style=\"margin-bottom: 10px\">\n      <button @click=\"handleStart\" :disabled=\"isAnimating\">Start Animation</button>\n      <button @click=\"handleStop\" :disabled=\"!isAnimating\">Stop Animation</button>\n    </div>\n    <v-stage :config=\"stageSize\">\n      <v-layer ref=\"layerRef\">\n        <v-circle\n          ref=\"circleRef\"\n          :config=\"circleConfig\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = ref({\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst layerRef = ref(null);\nconst circleRef = ref(null);\nconst isAnimating = ref(false);\nlet anim = null;\n\nconst handleStart = () => {\n  anim.start();\n  isAnimating.value = true;\n};\n\nconst handleStop = () => {\n  anim.stop();\n  isAnimating.value = false;\n};\n\nonMounted(() => {\n  const amplitude = 100;\n  const period = 2000;\n\n  anim = new Konva.Animation((frame) => {\n    circleRef.value.getNode().x(\n      amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n      window.innerWidth / 2\n    );\n  }, layerRef.value.getNode());\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Editing Functionality in Vue.js with Konva\nDESCRIPTION: Defines the component's logic, including state management, lifecycle hooks, and event handlers for text editing and transformation. It uses Vue 3's Composition API and interacts with the Konva.js library for canvas manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Editable_Text.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nKonva._fixTextRendering = true;\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst text = ref('Some text here');\nconst textWidth = ref(200);\nconst isEditing = ref(false);\nconst textNode = ref(null);\nconst transformerNode = ref(null);\n\nonMounted(() => {\n  transformerNode.value.getNode().nodes([textNode.value.getNode()]);\n});\n\nconst handleTextDblClick = () => {\n  const textNodeKonva = textNode.value.getNode();\n  const stage = textNodeKonva.getStage();\n  const textPosition = textNodeKonva.absolutePosition();\n  const stageBox = stage.container().getBoundingClientRect();\n\n  const areaPosition = {\n    x: stageBox.left + textPosition.x,\n    y: stageBox.top + textPosition.y,\n  };\n\n  const textarea = document.createElement('textarea');\n  document.body.appendChild(textarea);\n\n  textarea.value = textNodeKonva.text();\n  textarea.style.position = 'absolute';\n  textarea.style.top = areaPosition.y + 'px';\n  textarea.style.left = areaPosition.x + 'px';\n  textarea.style.width = textNodeKonva.width() - textNodeKonva.padding() * 2 + 'px';\n  textarea.style.height = textNodeKonva.height() - textNodeKonva.padding() * 2 + 5 + 'px';\n  textarea.style.fontSize = textNodeKonva.fontSize() + 'px';\n  textarea.style.border = 'none';\n  textarea.style.padding = '0px';\n  textarea.style.margin = '0px';\n  textarea.style.overflow = 'hidden';\n  textarea.style.background = 'none';\n  textarea.style.outline = 'none';\n  textarea.style.resize = 'none';\n  textarea.style.lineHeight = textNodeKonva.lineHeight();\n  textarea.style.fontFamily = textNodeKonva.fontFamily();\n  textarea.style.transformOrigin = 'left top';\n  textarea.style.textAlign = textNodeKonva.align();\n  textarea.style.color = textNodeKonva.fill();\n\n  const rotation = textNodeKonva.rotation();\n  let transform = '';\n  if (rotation) {\n    transform += 'rotateZ(' + rotation + 'deg)';\n  }\n  textarea.style.transform = transform;\n\n  textarea.style.height = 'auto';\n  textarea.style.height = textarea.scrollHeight + 3 + 'px';\n\n  isEditing.value = true;\n  textarea.focus();\n\n  function removeTextarea() {\n    textarea.parentNode.removeChild(textarea);\n    window.removeEventListener('click', handleOutsideClick);\n    isEditing.value = false;\n  }\n\n  function setTextareaWidth(newWidth) {\n    if (!newWidth) {\n      newWidth = textNodeKonva.placeholder?.length * textNodeKonva.fontSize();\n    }\n    textarea.style.width = newWidth + 'px';\n  }\n\n  textarea.addEventListener('keydown', function (e) {\n    if (e.keyCode === 13 && !e.shiftKey) {\n      text.value = textarea.value;\n      removeTextarea();\n    }\n    if (e.keyCode === 27) {\n      removeTextarea();\n    }\n  });\n\n  textarea.addEventListener('keydown', function () {\n    const scale = textNodeKonva.getAbsoluteScale().x;\n    setTextareaWidth(textNodeKonva.width() * scale);\n    textarea.style.height = 'auto';\n    textarea.style.height = textarea.scrollHeight + textNodeKonva.fontSize() + 'px';\n  });\n\n  function handleOutsideClick(e) {\n    if (e.target !== textarea) {\n      text.value = textarea.value;\n      removeTextarea();\n    }\n  }\n  setTimeout(() => {\n    window.addEventListener('click', handleOutsideClick);\n  });\n};\n\nconst handleTransform = (e) => {\n  const node = textNode.value.getNode();\n  textWidth.value = node.width() * node.scaleX();\n  node.setAttrs({\n    width: node.width() * node.scaleX(),\n    scaleX: 1,\n  });\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Image Preview in Vanilla JavaScript with Konva.js\nDESCRIPTION: This snippet demonstrates how to create a mini preview of a Konva.js canvas using the toDataURL method with reduced pixel ratio. It generates random shapes that can be dragged, and updates the preview only on dragend events for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create preview container\nconst preview = document.createElement('img');\npreview.id = 'preview';\npreview.style.position = 'absolute';\npreview.style.top = '2px';\npreview.style.right = '2px';\npreview.style.border = '1px solid grey';\npreview.style.backgroundColor = 'lightgrey';\ndocument.body.appendChild(preview);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// generate random shapes\nfor (let i = 0; i < 10; i++) {\n  const shape = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: Math.random() * 30 + 5,\n    fill: Konva.Util.getRandomColor(),\n    draggable: true,\n    name: 'shape-' + i,\n  });\n  layer.add(shape);\n}\n\nfunction updatePreview() {\n  const scale = 1 / 4;\n  // use pixelRatio to generate smaller preview\n  const url = stage.toDataURL({ pixelRatio: scale });\n  preview.src = url;\n}\n\n// update preview only on dragend for performance\nstage.on('dragend', updatePreview);\n\n// add new shapes on double click or double tap\nstage.on('dblclick dbltap', () => {\n  const shape = new Konva.Circle({\n    x: stage.getPointerPosition().x,\n    y: stage.getPointerPosition().y,\n    radius: Math.random() * 30 + 5,\n    fill: Konva.Util.getRandomColor(),\n    draggable: true,\n    name: 'shape-' + layer.children.length,\n  });\n  layer.add(shape);\n  updatePreview();\n});\n\n// show initial preview\nupdatePreview();\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated GIF with React and KonvaJS\nDESCRIPTION: React component implementation for displaying animated GIFs on Konva canvas using gifler. Uses refs to manage canvas and image instances, with proper cleanup on unmount.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/GIF_On_Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\n\nconst GifImage = () => {\n  const imageRef = React.useRef(null);\n  const canvasRef = React.useRef(document.createElement('canvas'));\n\n  React.useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://unpkg.com/gifler@0.1.0/gifler.min.js';\n    \n    script.onload = () => {\n      function onDrawFrame(ctx, frame) {\n        canvasRef.current.width = frame.width;\n        canvasRef.current.height = frame.height;\n        ctx.drawImage(frame.buffer, 0, 0);\n        imageRef.current?.getLayer()?.batchDraw();\n      }\n\n      gifler('https://konvajs.org/assets/yoda.gif').frames(canvasRef.current, onDrawFrame);\n    };\n\n    document.head.appendChild(script);\n    return () => script.remove();\n  }, []);\n\n  return (\n    <Image\n      ref={imageRef}\n      image={canvasRef.current}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <GifImage />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization in React-Konva\nDESCRIPTION: This snippet shows how to implement performance optimizations in a React application using react-konva. It includes layer management, shape caching using useRef and useEffect, and conditional rendering to move a draggable star between different layers for optimized drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Star, Rect } from 'react-konva';\nimport { useState, useRef, useEffect } from 'react';\n\nconst App = () => {\n  const [starLayer, setStarLayer] = useState('main');\n  const starRef = useRef(null);\n\n  useEffect(() => {\n    // Cache the shape for better performance\n    if (starRef.current) {\n      starRef.current.cache();\n    }\n  }, []);\n\n  const handleDragStart = () => {\n    setStarLayer('drag');\n  };\n\n  const handleDragEnd = () => {\n    setStarLayer('main');\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer listening={false}>\n        <Rect\n          x={0}\n          y={0}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          fill=\"lightgray\"\n        />\n      </Layer>\n      <Layer>\n        {starLayer === 'main' && (\n          <Star\n            ref={starRef}\n            x={200}\n            y={200}\n            numPoints={6}\n            innerRadius={40}\n            outerRadius={70}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n            draggable\n            perfectDrawEnabled={false}\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        )}\n      </Layer>\n      <Layer>\n        {starLayer === 'drag' && (\n          <Star\n            ref={starRef}\n            x={200}\n            y={200}\n            numPoints={6}\n            innerRadius={40}\n            outerRadius={70}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n            draggable\n            perfectDrawEnabled={false}\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Drag and Drop Bounds with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create two draggable rectangles with different boundaries using Konva.js. The blue rectangle is constrained to stay below y=50, while the yellow rectangle is bound to stay within an imaginary circle. The boundaries are enforced by listening to 'dragmove' events and adjusting positions accordingly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/08_Complex_Drag_and_Drop.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst blueGroup = new Konva.Group({\nx: 30,\ny: 70,\ndraggable: true,\n});\n\n// bound below y=50\nblueGroup.on('dragmove', () => {\nblueGroup.y(Math.max(blueGroup.y(), 50));\n});\n\n// bound inside a circle\nconst yellowGroup = new Konva.Group({\nx: stage.width() / 2,\ny: 70,\ndraggable: true,\n});\n\nyellowGroup.on('dragmove', () => {\nconst x = stage.width() / 2;\nconst y = 70;\nconst radius = 50;\nconst pos = yellowGroup.absolutePosition();\nconst scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));\n\nif (scale < 1) {\nyellowGroup.x(Math.round((pos.x - x) * scale + x));\nyellowGroup.y(Math.round((pos.y - y) * scale + y));\n}\n});\n\nconst blueText = new Konva.Text({\nfontSize: 26,\nfontFamily: 'Calibri',\ntext: 'bound below',\nfill: 'black',\npadding: 10,\nwidth: 150,\nalign: 'center',\n});\n\nconst blueRect = new Konva.Rect({\nwidth: 150,\nheight: 72,\nfill: '#aaf',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nconst yellowText = new Konva.Text({\nfontSize: 26,\nfontFamily: 'Calibri',\ntext: 'bound in circle',\nfill: 'black',\npadding: 10,\nwidth: 150,\nalign: 'center',\n});\n\nconst yellowRect = new Konva.Rect({\nwidth: 150,\nheight:72,\nfill: 'yellow',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nblueGroup.add(blueRect).add(blueText);\nyellowGroup.add(yellowRect).add(yellowText);\n\nlayer.add(blueGroup);\nlayer.add(yellowGroup);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pan and Pinch Zoom in Vue with vue-konva\nDESCRIPTION: This snippet shows how to implement pan and pinch zoom functionality for a Konva stage using Vue 3 and vue-konva. It uses Vue's composition API to manage state and handle touch events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Stage.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage\n    :config=\"stageConfig\"\n    @touchmove=\"handleTouchMove\"\n    @touchend=\"handleTouchEnd\"\n  >\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: 190,\n          y: stageConfig.height / 2,\n          sides: 3,\n          radius: 80,\n          fill: 'green',\n          stroke: 'black',\n          strokeWidth: 4\n        }\"\n      />\n      <v-circle\n        :config=\"{\n          x: 380,\n          y: stageConfig.height / 2,\n          radius: 70,\n          fill: 'red',\n          stroke: 'black',\n          strokeWidth: 4\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\n// by default Konva prevent some events when node is dragging\n// it improve the performance and work well for 95% of cases\n// we need to enable all events on Konva, even when we are dragging a node\n// so it triggers touchmove correctly\nwindow.Konva.hitOnDragEnabled = true;\n\nconst stagePos = ref({ x: 0, y: 0 });\nconst stageScale = ref({ x: 1, y: 1 });\nconst lastCenter = ref(null);\nconst lastDist = ref(0);\nconst dragStopped = ref(false);\n\nconst stageConfig = computed(() => ({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  draggable: true,\n  x: stagePos.value.x,\n  y: stagePos.value.y,\n  scaleX: stageScale.value.x,\n  scaleY: stageScale.value.y\n}));\n\nconst getDistance = (p1, p2) => {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n};\n\nconst getCenter = (p1, p2) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n};\n\nconst handleTouchMove = (e) => {\n  e.evt.preventDefault();\n  const touch1 = e.evt.touches[0];\n  const touch2 = e.evt.touches[1];\n  const stage = e.target.getStage();\n\n  // we need to restore dragging, if it was cancelled by multi-touch\n  if (touch1 && !touch2 && !stage.isDragging() && dragStopped.value) {\n    stage.startDrag();\n    dragStopped.value = false;\n  }\n\n  if (touch1 && touch2) {\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (stage.isDragging()) {\n      stage.stopDrag();\n      dragStopped.value = true;\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!lastCenter.value) {\n      lastCenter.value = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!lastDist.value) {\n      lastDist.value = dist;\n      return;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x: (newCenter.x - stagePos.value.x) / stageScale.value.x,\n      y: (newCenter.y - stagePos.value.y) / stageScale.value.x,\n    };\n\n    const scale = stageScale.value.x * (dist / lastDist.value);\n\n    stageScale.value = { x: scale, y: scale };\n\n    // calculate new position of the stage\n    const dx = newCenter.x - lastCenter.value.x;\n    const dy = newCenter.y - lastCenter.value.y;\n\n    stagePos.value = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    lastDist.value = dist;\n    lastCenter.value = newCenter;\n  }\n};\n\nconst handleTouchEnd = () => {\n  lastDist.value = 0;\n  lastCenter.value = null;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animating Shape Position with React-Konva\nDESCRIPTION: Implements the same sine wave animation for a circle using React-Konva components. Uses React hooks (useEffect and useRef) to manage the animation lifecycle and reference the circle component.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Moving.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const circleRef = useRef(null);\n\n  useEffect(() => {\n    const amplitude = 100;\n    const period = 2000; // in milliseconds\n\n    const anim = new Konva.Animation((frame) => {\n      circleRef.current.x(\n        amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n        window.innerWidth / 2\n      );\n    }, circleRef.current.getLayer());\n\n    anim.start();\n\n    return () => {\n      anim.stop();\n    };\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle\n          ref={circleRef}\n          x={50}\n          y={window.innerHeight / 2}\n          radius={30}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Star Shape with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create a star shape using Konva.js in vanilla JavaScript. It initializes a Konva stage, creates a layer, and adds a star with specific properties such as position, number of points, radii, fill color, and stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Star.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  numPoints: 5,\n  innerRadius: 30,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(star);\n```\n\n----------------------------------------\n\nTITLE: Setting perfectDrawEnabled in Konva.js\nDESCRIPTION: Shows how to get and set the perfectDrawEnabled property to optimize drawing performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Implementing HSV Filter with React and react-konva\nDESCRIPTION: This React component implements HSV filtering on an image using react-konva. It uses hooks to manage the state of hue, saturation, and value parameters, and provides slider controls for each parameter. The useEffect hook ensures the image is cached when loaded.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSV.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [hue, setHue] = useState(0);\n  const [saturation, setSaturation] = useState(0);\n  const [value, setValue] = useState(0);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.HSV]}\n            hue={hue}\n            saturation={saturation}\n            value={value}\n          />\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <div>\n          Hue\n          <input\n            type=\"range\"\n            min=\"-259\"\n            max=\"259\"\n            value={hue}\n            onChange={(e) => setHue(parseInt(e.target.value))}\n          />\n        </div>\n        <div>\n          Saturation\n          <input\n            type=\"range\"\n            min=\"-2\"\n            max=\"10\"\n            step=\"0.1\"\n            value={saturation}\n            onChange={(e) => setSaturation(parseFloat(e.target.value))}\n          />\n        </div>\n        <div>\n          Value\n          <input\n            type=\"range\"\n            min=\"-2\"\n            max=\"2\"\n            step=\"0.1\"\n            value={value}\n            onChange={(e) => setValue(parseFloat(e.target.value))}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Changing Mouse Cursor in React with react-konva\nDESCRIPTION: This React implementation demonstrates two approaches to cursor management: directly manipulating the Stage container's style (SpecialPolygon component) and using React state to control the cursor through the Stage's style prop. Both techniques achieve the same visual result.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/07-Mouse_Cursor.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\nimport { useState } from 'react';\n\n// Separate component for polygon that changes cursor directly\nconst SpecialPolygon = ({ x, y }) => {\n  // We use e.target approach here because this component doesn't have\n  // access to the Stage's cursor state from the parent component\n  const handleMouseOver = (e) => {\n    e.target.getStage().container().style.cursor = 'pointer';\n  };\n\n  const handleMouseOut = (e) => {\n    e.target.getStage().container().style.cursor = 'default';\n  };\n\n  return (\n    <RegularPolygon\n      x={x}\n      y={y}\n      sides={5}\n      radius={30}\n      fill=\"red\"\n      stroke=\"black\"\n      strokeWidth={4}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n    />\n  );\n};\n\nconst App = () => {\n  const [cursor, setCursor] = useState('default');\n\n  return (\n    <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      style={{ cursor }}\n    >\n      <Layer>\n        <SpecialPolygon\n          x={80}\n          y={window.innerHeight / 2}\n        />\n        <RegularPolygon\n          x={180}\n          y={window.innerHeight / 2}\n          sides={5}\n          radius={30}\n          fill=\"green\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseOver={() => setCursor('crosshair')}\n          onMouseOut={() => setCursor('default')}\n        />\n        <RegularPolygon\n          x={280}\n          y={window.innerHeight / 2}\n          sides={5}\n          radius={30}\n          fill=\"blue\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseOver={() => setCursor('move')}\n          onMouseOut={() => setCursor('default')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting dash array in Konva.js Shape\nDESCRIPTION: Example showing how to set dash patterns for strokes, allowing for creation of dashed, dotted, or custom stroke patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrow Shapes with React-Konva\nDESCRIPTION: This snippet shows how to create an arrow shape using React-Konva components. It uses the Stage, Layer, and Arrow components from react-konva to render an arrow with the same properties as the vanilla implementation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arrow.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Arrow } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Arrow\n          x={window.innerWidth / 4}\n          y={window.innerHeight / 4}\n          points={[0, 0, 100, 100]}\n          pointerLength={20}\n          pointerWidth={20}\n          fill=\"black\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Centered Scaling Implementation in React-Konva\nDESCRIPTION: React component implementation of centered scaling using react-konva components. Creates two text nodes with transformers, demonstrating both centered and normal scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/02_Centered_Scaling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Transformer } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={80}\n          text=\"Simple text\"\n          fontSize={30}\n          draggable\n          width={200}\n        />\n        <Transformer centeredScaling />\n        <Text\n          x={50}\n          y={180}\n          text=\"Simple text\"\n          fontSize={30}\n          draggable\n          width={200}\n        />\n        <Transformer />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Tweening Blur Filter on Image with Vue.js and Konva.js\nDESCRIPTION: This snippet demonstrates how to apply and tween a blur filter on an image using Vue.js with vue-konva. It uses the Composition API to set up reactive references and computed properties. The component creates an interactive image that becomes less blurred when hovered over or touched, showcasing the integration of Konva.js features within a Vue.js component.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Tween_Filter.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"image\"\n        :config=\"imageConfig\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n        @touchstart=\"handleMouseEnter\"\n        @touchend=\"handleMouseLeave\"\n        ref=\"imageRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst image = ref(null);\nconst imageRef = ref(null);\nlet tween = null;\n\n// Load image\nconst img = new Image();\nimg.onload = () => {\n  image.value = img;\n};\nimg.src = '/images/lion.png';\n\nconst imageConfig = computed(() => ({\n  x: 50,\n  y: 50,\n  image: image.value,\n  draggable: true\n}));\n\nonMounted(() => {\n  if (!imageRef.value) return;\n\n  const node = imageRef.value.getNode();\n  node.cache();\n  node.filters([Konva.Filters.Blur]);\n  node.blurRadius(10);\n\n  tween = new Konva.Tween({\n    node: node,\n    duration: 0.5,\n    blurRadius: 0,\n    easing: Konva.Easings.EaseInOut,\n  });\n});\n\nconst handleMouseEnter = () => {\n  tween.play();\n};\n\nconst handleMouseLeave = () => {\n  tween.reverse();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component for Dynamic Stroke Color and Width with vue-konva\nDESCRIPTION: This Vue.js component uses vue-konva to create an interactive pentagon. It manages the stroke color, width, and cursor style in the component's data. The stroke properties are updated using methods triggered by mouseenter and mouseleave events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/02-Stroke.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" :style=\"{ cursor: cursor }\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: stageSize.width / 2,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fill: 'red',\n          stroke: strokeColor,\n          strokeWidth: strokeWidth,\n        }\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n      strokeColor: 'black',\n      strokeWidth: 4,\n      cursor: 'default',\n    };\n  },\n  methods: {\n    onMouseEnter() {\n      this.strokeColor = 'blue';\n      this.strokeWidth = 20;\n      this.cursor = 'pointer';\n    },\n    onMouseLeave() {\n      this.strokeColor = 'black';\n      this.strokeWidth = 4;\n      this.cursor = 'default';\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing 20,000 Interactive Nodes with Vue-Konva\nDESCRIPTION: This Vue implementation demonstrates how to render 20,000 interactive circles using Vue-Konva. It uses Vue's reactive system with computed properties and refs for managing state and optimizing performance, along with event handlers for mouseover, mouseout, and drag functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\" @mousedown=\"handleStageMouseDown\" @mouseup=\"handleStageMouseUp\">\n    <v-layer ref=\"circlesLayerRef\">\n      <v-circle\n        v-for=\"node in nodes\"\n        :key=\"node.id\"\n        :config=\"{\n          x: node.x,\n          y: node.y,\n          radius: 4,\n          fill: node.color,\n          id: node.id\n        }\"\n        @mouseover=\"handleMouseOver($event, node)\"\n        @mousemove=\"handleMouseMove\"\n        @mouseout=\"handleMouseOut\"\n        @dragmove=\"handleMouseMove\"\n      />\n    </v-layer>\n    <v-layer ref=\"dragLayerRef\"></v-layer>\n    <v-layer>\n      <v-label\n        :config=\"{\n          x: tooltip.x,\n          y: tooltip.y,\n          opacity: 0.75,\n          visible: tooltip.visible\n        }\"\n      >\n        <v-tag\n          :config=\"{\n            fill: 'black',\n            pointerDirection: 'down',\n            pointerWidth: 10,\n            pointerHeight: 10,\n            lineJoin: 'round',\n            shadowColor: 'black',\n            shadowBlur: 10,\n            shadowOffsetX: 10,\n            shadowOffsetY: 10,\n            shadowOpacity: 0.2\n          }\"\n        />\n        <v-text\n          :config=\"{\n            text: tooltip.text,\n            fontFamily: 'Calibri',\n            fontSize: 18,\n            padding: 5,\n            fill: 'white'\n          }\"\n        />\n      </v-label>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, reactive } from 'vue';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stageConfig = {\n  width: width,\n  height: height\n};\n\n// For tooltip handling\nconst tooltip = reactive({\n  visible: false,\n  x: 0,\n  y: 0,\n  text: ''\n});\n\n// Store all nodes in a single array - not reactive after initial setup\nconst nodes = ref([]);\nconst circlesLayerRef = ref(null);\nconst dragLayerRef = ref(null);\n\n// This key only changes when the nodes data changes, preventing unnecessary re-renders\nconst circlesKey = ref(0);\n\nonMounted(() => {\n  const colors = ['red', 'orange', 'cyan', 'green', 'blue', 'purple'];\n  const data = [];\n  \n  for (let n = 0; n < 20000; n++) {\n    const x = Math.random() * width;\n    const y = height + Math.random() * 200 - 100 + (height / width) * -1 * x;\n    data.push({\n      x: x,\n      y: y,\n      id: n.toString(),\n      color: colors[Math.round(Math.random() * 5)],\n    });\n  }\n  \n  // Set the nodes once and increment the key to trigger a single render\n  nodes.value = data;\n  circlesKey.value++;\n});\n\nfunction handleMouseOver(e, node) {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  \n```\n\n----------------------------------------\n\nTITLE: Implementing Transform Events with React Konva\nDESCRIPTION: This snippet demonstrates how to implement transform events using React Konva components. It uses useRef hooks to reference the rectangle and transformer, connects them in a useEffect hook, and attaches event handlers directly to the React Konva components for transform events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/06_Transform_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n          onTransformStart={() => console.log('rect transform start')}\n          onTransform={() => console.log('rect transforming')}\n          onTransformEnd={() => console.log('rect transform end')}\n        />\n        <Transformer\n          ref={trRef}\n          onTransformStart={() => console.log('transform start')}\n          onTransform={() => console.log('transforming')}\n          onTransformEnd={() => console.log('transform end')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Blur in Konva.js\nDESCRIPTION: Gets or sets the shadow blur amount which controls how soft the shadow appears. Higher values create softer, more diffused shadows.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Caching for Performance in React with react-konva\nDESCRIPTION: This React component uses react-konva to create and compare cached and non-cached complex shapes. It demonstrates how to apply caching and filters to Konva shapes in a React environment, and includes an animation to show the performance difference.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Shape_Caching.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star, Text } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const nonCachedStarRef = useRef(null);\n  const cachedStarRef = useRef(null);\n  const fpsTextRef = useRef(null);\n\n  useEffect(() => {\n    // Add blur filter and cache to the cached star\n    if (cachedStarRef.current) {\n      cachedStarRef.current.cache();\n      cachedStarRef.current.filters([Konva.Filters.Blur]);\n      cachedStarRef.current.blurRadius(5);\n    }\n\n    // Add blur filter to non-cached star\n    if (nonCachedStarRef.current) {\n      nonCachedStarRef.current.filters([Konva.Filters.Blur]);\n      nonCachedStarRef.current.blurRadius(5);\n    }\n\n    const anim = new Konva.Animation((frame) => {\n      // Rotate stars\n      nonCachedStarRef.current.rotation(frame.time * 0.1);\n      cachedStarRef.current.rotation(frame.time * 0.1);\n      \n      // Update FPS counter\n      fpsTextRef.current.text('FPS: ' + frame.frameRate.toFixed(1));\n    }, nonCachedStarRef.current.getLayer());\n\n    anim.start();\n    return () => anim.stop();\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {/* Non-cached complex shape */}\n        <Star\n          ref={nonCachedStarRef}\n          x={100}\n          y={100}\n          numPoints={20}\n          innerRadius={40}\n          outerRadius={70}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        \n        {/* Cached complex shape */}\n        <Star\n          ref={cachedStarRef}\n          x={250}\n          y={100}\n          numPoints={20}\n          innerRadius={40}\n          outerRadius={70}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        \n        {/* Labels */}\n        <Text\n          x={50}\n          y={200}\n          text=\"Non-Cached Shape\"\n          fontSize={16}\n        />\n        <Text\n          x={200}\n          y={200}\n          text=\"Cached Shape\\n(Better Performance)\"\n          fontSize={16}\n        />\n        \n        {/* FPS counter */}\n        <Text\n          ref={fpsTextRef}\n          x={10}\n          y={10}\n          text=\"FPS: 0\"\n          fontSize={16}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Image with Konva.Image in JavaScript\nDESCRIPTION: This snippet demonstrates how to load and display an SVG image using Konva.Image.fromURL method. It's a simple approach that works in most cases but may have cross-browser compatibility issues.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/SVG_On_Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nKonva.Image.fromURL('/image.svg', (image) => {\n  layer.add(image);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow opacity for a shape. Values must be between 0 (transparent) and 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Color in Konva Shape (JavaScript)\nDESCRIPTION: Shows various ways to get and set the shadow color of a Konva Shape, including using color strings, hex values, RGB, and RGBA formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll by Edge Drag with Vue in Konva.js\nDESCRIPTION: This snippet demonstrates the implementation of auto-scrolling in a Vue.js application using vue-konva. It uses Vue's Composition API with setup, ref, computed, and lifecycle hooks to create the scrolling functionality when dragging objects near the stage edges.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scroll_By_Edge_Drag.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage\n    :config=\"stageConfig\"\n    ref=\"stageRef\"\n  >\n    <v-layer>\n      <v-circle\n        v-for=\"(node, i) in nodes\"\n        :key=\"i\"\n        :config=\"{\n          x: node.x,\n          y: node.y,\n          radius: 40,\n          fill: 'red',\n          stroke: 'black',\n          draggable: true,\n          onDragStart: handleDragStart,\n          onDragEnd: handleDragEnd,\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue';\n\nconst NUMBER = 100;\nconst stageRef = ref(null);\nconst stagePos = ref({ x: 0, y: 0 });\nconst nodes = ref([]);\nlet scrollInterval = null;\nlet draggedNode = null;\n\nconst stageConfig = computed(() => ({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  x: stagePos.value.x,\n  y: stagePos.value.y,\n}));\n\nfunction generateNodes() {\n  return Array.from({ length: NUMBER }, () => ({\n    x: window.innerWidth * (Math.random() * 2 - 1),\n    y: window.innerHeight * (Math.random() * 2 - 1),\n  }));\n}\n\nconst handleDragStart = (e) => {\n  draggedNode = e.target;\n  const duration = 1000 / 60;\n  scrollInterval = setInterval(() => {\n    const stage = stageRef.value.getNode();\n    const pos = stage.getPointerPosition();\n    if (!pos) return;\n\n    const offset = 100;\n    let newX = stagePos.value.x;\n    let newY = stagePos.value.y;\n    let moved = false;\n\n    if (pos.x < offset) {\n      newX += 2;\n      draggedNode.x(draggedNode.x() - 2);\n      moved = true;\n    } else if (pos.x > stage.width() - offset) {\n      newX -= 2;\n      draggedNode.x(draggedNode.x() + 2);\n      moved = true;\n    }\n\n    if (pos.y < offset) {\n      newY += 2;\n      draggedNode.y(draggedNode.y() - 2);\n      moved = true;\n    } else if (pos.y > stage.height() - offset) {\n      newY -= 2;\n      draggedNode.y(draggedNode.y() + 2);\n      moved = true;\n    }\n\n    if (moved) {\n      stagePos.value = { x: newX, y: newY };\n    }\n  }, duration);\n};\n\nconst handleDragEnd = () => {\n  draggedNode = null;\n  if (scrollInterval) {\n    clearInterval(scrollInterval);\n    scrollInterval = null;\n  }\n};\n\nonMounted(() => {\n  nodes.value = generateNodes();\n});\n\nonUnmounted(() => {\n  if (scrollInterval) {\n    clearInterval(scrollInterval);\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Filters with React and Konva\nDESCRIPTION: This code snippet demonstrates how to apply filters to Konva nodes using React hooks and Konva components. It includes examples of applying a blur filter to an image and a noise filter to a rectangle. The code also shows how to handle image loading, caching, and updating filters dynamically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Filters.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Rect, Image } from 'react-konva';\nimport useImage from 'use-image';\n\n// Example of functional component with image filter\nconst FilterImage = () => {\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = React.useRef();\n\n  // when image is loaded we need to cache the shape\n  React.useEffect(() => {\n    if (image) {\n      // you many need to reapply cache on some props changes like shadow, stroke, etc.\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <Image\n      ref={imageRef}\n      x={10}\n      y={10}\n      image={image}\n      filters={[Konva.Filters.Blur]}\n      blurRadius={10}\n    />\n  );\n};\n\n// Example of class component with noise filter\n// Try to click on rect to see color updates\nconst FilterRect = () => {\n  const [color, setColor] = React.useState('green');\n  const rectRef = React.useRef();\n\n  React.useEffect(() => {\n    if (rectRef.current) {\n      rectRef.current.cache();\n    }\n  }, []);\n\n  const handleClick = () => {\n    setColor(Konva.Util.getRandomColor());\n    // recache shape when we updated it\n    rectRef.current.cache();\n  };\n\n  return (\n    <Rect\n      filters={[Konva.Filters.Noise]}\n      noise={1}\n      x={200}\n      y={10}\n      width={50}\n      height={50}\n      fill={color}\n      shadowBlur={10}\n      ref={rectRef}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <FilterImage />\n        <FilterRect />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Image Labeling Tool with React and Konva\nDESCRIPTION: JSX code for embedding a CodeSandbox demo that shows the image labeling tool implementation. The iframe includes styling properties to control its appearance on the page, with specific width, height, border settings, and sandbox permissions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Labeling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<iframe \n  src=\"https://codesandbox.io/embed/github/konvajs/site/tree/master/react-demos/image-label-tool?hidenavigation=1&fontsize=10\" \n  style={{\n    width: \"100%\",\n    height: \"500px\",\n    border: 0,\n    borderRadius: \"4px\",\n    overflow: \"hidden\"\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resizing with Ratio Preservation in Vanilla Konva.js\nDESCRIPTION: This example creates a Konva stage with two text objects that can be resized. The first transformer preserves the shape's aspect ratio by default, while the second has keepRatio set to false. Users can still maintain ratio on the second shape by holding the SHIFT key.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/03_Keep_Ratio.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\nx: 50,\ny: 50,\ntext: 'keep ratio by default',\nfontSize: 20,\ndraggable: true,\nwidth: 200,\n});\nlayer.add(text);\n\nconst text2 = new Konva.Text({\nx: 50,\ny: 150,\ntext: 'no ratio, but hold shift to keep ratio',\nfontSize: 20,\ndraggable: true,\nwidth: 200,\n});\nlayer.add(text2);\n\nconst tr = new Konva.Transformer({\nnodes: [text],\n});\nlayer.add(tr);\n\nconst tr2 = new Konva.Transformer({\nnodes: [text2],\nkeepRatio: false,\n});\nlayer.add(tr2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Filled Shapes with React and Konva\nDESCRIPTION: This React implementation uses react-konva to create interactive pentagon shapes with different fill types. It demonstrates the use of React hooks to manage state for fill properties that change on mouse events. The shapes include solid color, pattern/image, linear gradient, and radial gradient fills.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/01-Fill.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\nimport useImage from 'use-image';\n\nconst commonProps = {\n  sides: 5,\n  radius: 70,\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true,\n};\n\nconst ColorPolygon = () => {\n  const [fill, setFill] = React.useState('red');\n  return (\n    <RegularPolygon\n      {...commonProps}\n      x={80}\n      y={window.innerHeight / 2}\n      fill={fill}\n      onMouseEnter={(e) => {\n        setFill('blue');\n        e.target.getStage().container().style.cursor = 'pointer';\n      }}\n      onMouseLeave={(e) => {\n        setFill('red');\n        e.target.getStage().container().style.cursor = 'default';\n      }}\n    />\n  );\n};\n\nconst PatternPolygon = () => {\n  const [darthVader] = useImage('https://konvajs.org/assets/darth-vader.jpg');\n  const [yoda] = useImage('https://konvajs.org/assets/yoda.jpg');\n  const [image, setImage] = React.useState(null);\n  const [offset, setOffset] = React.useState({ x: -220, y: 70 });\n\n  React.useEffect(() => {\n    if (darthVader) {\n      setImage(darthVader);\n    }\n  }, [darthVader]);\n\n  return (\n    <RegularPolygon\n      {...commonProps}\n      x={220}\n      y={window.innerHeight / 2}\n      fillPatternImage={image}\n      fillPatternOffset={offset}\n      onMouseEnter={(e) => {\n        setImage(yoda);\n        setOffset({ x: -100, y: 70 });\n        e.target.getStage().container().style.cursor = 'pointer';\n      }}\n      onMouseLeave={(e) => {\n        setImage(darthVader);\n        setOffset({ x: -220, y: 70 });\n        e.target.getStage().container().style.cursor = 'default';\n      }}\n    />\n  );\n};\n\nconst LinearGradientPolygon = () => {\n  const [colorStops, setColorStops] = React.useState([0, 'red', 1, 'yellow']);\n  return (\n    <RegularPolygon\n      {...commonProps}\n      x={360}\n      y={window.innerHeight / 2}\n      fillLinearGradientStartPoint={{ x: -50, y: -50 }}\n      fillLinearGradientEndPoint={{ x: 50, y: 50 }}\n      fillLinearGradientColorStops={colorStops}\n      onMouseEnter={(e) => {\n        setColorStops([0, 'green', 1, 'yellow']);\n        e.target.getStage().container().style.cursor = 'pointer';\n      }}\n      onMouseLeave={(e) => {\n        setColorStops([0, 'red', 1, 'yellow']);\n        e.target.getStage().container().style.cursor = 'default';\n      }}\n    />\n  );\n};\n\nconst RadialGradientPolygon = () => {\n  const [colorStops, setColorStops] = React.useState([0, 'red', 0.5, 'yellow', 1, 'blue']);\n  return (\n    <RegularPolygon\n      {...commonProps}\n      x={500}\n      y={window.innerHeight / 2}\n      fillRadialGradientStartPoint={{ x: 0, y: 0 }}\n      fillRadialGradientStartRadius={0}\n      fillRadialGradientEndPoint={{ x: 0, y: 0 }}\n      fillRadialGradientEndRadius={70}\n      fillRadialGradientColorStops={colorStops}\n      onMouseEnter={(e) => {\n        setColorStops([0, 'red', 0.5, 'yellow', 1, 'green']);\n        e.target.getStage().container().style.cursor = 'pointer';\n      }}\n      onMouseLeave={(e) => {\n        setColorStops([0, 'red', 0.5, 'yellow', 1, 'blue']);\n        e.target.getStage().container().style.cursor = 'default';\n      }}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <ColorPolygon />\n        <PatternPolygon />\n        <LinearGradientPolygon />\n        <RadialGradientPolygon />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Filter to Image with Konva.js in Vue.js\nDESCRIPTION: This snippet demonstrates how to apply an HSL filter to an image using Konva.js in a Vue.js component. It uses the vue-konva library and Vue 3 composition API to manage state and image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSL.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.HSL],\n            hue: hue,\n            saturation: saturation,\n            luminance: luminance,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div style=\"position: absolute; top: 20px; left: 20px\">\n      <div>\n        Hue\n        <input\n          type=\"range\"\n          min=\"-259\"\n          max=\"259\"\n          :value=\"hue\"\n          @input=\"(e) => hue = parseInt(e.target.value)\"\n        />\n      </div>\n      <div>\n        Saturation\n        <input\n          type=\"range\"\n          min=\"-2\"\n          max=\"10\"\n          step=\"0.1\"\n          :value=\"saturation\"\n          @input=\"(e) => saturation = parseFloat(e.target.value)\"\n        />\n      </div>\n      <div>\n        Luminance\n        <input\n          type=\"range\"\n          min=\"-2\"\n          max=\"2\"\n          step=\"0.1\"\n          :value=\"luminance\"\n          @input=\"(e) => luminance = parseFloat(e.target.value)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst hue = ref(0);\nconst saturation = ref(0);\nconst luminance = ref(0);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Groups in Konva.js with Vanilla JavaScript\nDESCRIPTION: This code creates two groups with transparency: one showing the default behavior where overlapping shapes are visible, and another using caching to make the entire group transparent as a single unit. The example includes draggable rectangles and circles to demonstrate the difference.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Transparent_Group.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n// Stage setup\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// lets create default group with two overlapping shapes\nconst group1 = new Konva.Group({\n  opacity: 0.5,\n  x: 50,\n  y: 50,\n  draggable: true,\n});\ngroup1.add(\n  new Konva.Rect({\n    width: 100,\n    height: 100,\n    fill: 'red',\n  })\n);\ngroup1.add(\n  new Konva.Circle({\n    x: 100,\n    y: 100,\n    radius: 70,\n    fill: 'green',\n  })\n);\nlayer.add(group1);\n\n// lets create the second group\nconst group2 = group1.clone({ x: 250 });\nlayer.add(group2);\n\n// to change opacity behavior we have to cache whole group\ngroup2.cache();\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Border Highlighting with Vanilla JavaScript and Konva.js\nDESCRIPTION: This code demonstrates how to create draggable images with borders that hide on hover using vanilla JavaScript and Konva.js. It loads two Star Wars character images, adds red borders, and implements mouse event handlers to toggle border visibility when hovering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Border_Highlighting.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create Darth Vader image\nconst darthVaderImg = new Konva.Image({\n  x: 20,\n  y: 20,\n  width: 200,\n  height: 137,\n  stroke: 'red',\n  strokeWidth: 10,\n  draggable: true,\n});\nlayer.add(darthVaderImg);\n\n// Create Yoda image\nconst yodaImg = new Konva.Image({\n  x: 240,\n  y: 20,\n  width: 93,\n  height: 104,\n  draggable: true,\n  stroke: 'red',\n  strokeWidth: 10,\n});\nlayer.add(yodaImg);\n\n// Load Darth Vader image\nconst imageObj1 = new Image();\nimageObj1.onload = function () {\n  darthVaderImg.image(imageObj1);\n};\nimageObj1.src = 'https://konvajs.org/assets/darth-vader.jpg';\n\n// Load Yoda image\nconst imageObj2 = new Image();\nimageObj2.onload = function () {\n  yodaImg.image(imageObj2);\n};\nimageObj2.src = 'https://konvajs.org/assets/yoda.jpg';\n\n// Use event delegation to update pointer style and borders\nlayer.on('mouseover', function (evt) {\n  const shape = evt.target;\n  document.body.style.cursor = 'pointer';\n  shape.strokeEnabled(false);\n});\n\nlayer.on('mouseout', function (evt) {\n  const shape = evt.target;\n  document.body.style.cursor = 'default';\n  shape.strokeEnabled(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Rectangle Custom Shape in Konva.js\nDESCRIPTION: Creates a custom rectangle shape using Konva.Shape with a sceneFunc drawing function. The function defines a rectangle path and applies the specified fill style using the fillStrokeShape method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Custom.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rect = new Konva.Shape({\n  x: 10,\n  y: 20,\n  fill: '#00D2FF',\n  width: 100,\n  height: 50,\n  sceneFunc: function (context, shape) {\n    context.beginPath();\n    // don't need to set position of rect, Konva will handle it\n    context.rect(0, 0, shape.getAttr('width'), shape.getAttr('height'));\n    // (!) Konva specific method, it is very important\n    // it will apply all required styles\n    context.fillStrokeShape(shape);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Invert Filter to Image using Konva.js in React\nDESCRIPTION: This React component uses react-konva to create a stage and layer, and applies an invert filter to an image. It utilizes the useImage hook for image loading and useRef for accessing the Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Invert.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useRef, useEffect } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {image && (\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Invert]}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Rotation Snaps with React and Konva\nDESCRIPTION: Creates a draggable rectangle with rotation snap points using React and react-konva. Implements the same snapping functionality using React components and hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Rotation_Snaps.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={50}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          rotationSnaps={[0, 90, 180, 270]}\n          rotationSnapTolerance={30}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Stage Click Events in Vue Konva\nDESCRIPTION: This Vue.js implementation uses Vue Konva to detect clicks on the stage versus on shapes. It uses Vue's reactivity system with refs and computed properties to manage state and update the message based on click events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Stage_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" @click=\"handleStageClick\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-circle :config=\"circleConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  name: 'circle'\n};\n\nconst handleStageClick = (e) => {\n  if (e.target === e.target.getStage()) {\n    message.value = 'clicked on stage';\n    return;\n  }\n  message.value = 'clicked on ' + e.target.name();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Understanding zIndex Behavior in Konva.js\nDESCRIPTION: Demonstrates how zIndex is related to a node's position in its parent's children array. Shows that zIndex cannot be set beyond the parent's available children and verifies that zIndex always equals the node's index in its parent's children array.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/zIndex.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst group = new Konva.Group();\nconst circle = new Konva.Circle({});\ngroup.add(circle);\n\n// it will log 0\nconsole.log(circle.zIndex());\n\n// the next line will not work because the group has only one child\ncircle.zIndex(1);\n\n// still logs 0\nconsole.log(circle.zIndex());\n\n// for any node this equation will be true:\nconsole.log(circle.zIndex() === circle.getParent().children.indexOf(circle));\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Shape Transformation with React-Konva\nDESCRIPTION: This code snippet demonstrates implementing shape selection, resizing, and rotation in React using react-konva. It creates a functional component with state management for selected shapes, implements rectangular selection area, and handles both individual selection and multi-selection with modifier keys. It uses refs to access Konva nodes and properly updates shape properties after transformation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/01_Basic_demo.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\n\nconst initialRectangles = [\n  {\n    x: 60,\n    y: 60,\n    width: 100,\n    height: 90,\n    fill: 'red',\n    id: 'rect1',\n    name: 'rect',\n  },\n  {\n    x: 250,\n    y: 100,\n    width: 150,\n    height: 90,\n    fill: 'green',\n    id: 'rect2',\n    name: 'rect',\n  },\n];\n\nconst App = () => {\n  const [rectangles, setRectangles] = useState(initialRectangles);\n  const [selectedIds, setSelectedIds] = useState([]);\n  const [selectionRectangle, setSelectionRectangle] = useState({\n    visible: false,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n  });\n  \n  const isSelecting = useRef(false);\n  const transformerRef = useRef();\n  const rectRefs = useRef(new Map());\n  \n  // Update transformer when selection changes\n  useEffect(() => {\n    if (selectedIds.length && transformerRef.current) {\n      // Get the nodes from the refs Map\n      const nodes = selectedIds\n        .map(id => rectRefs.current.get(id))\n        .filter(node => node);\n      \n      transformerRef.current.nodes(nodes);\n    } else if (transformerRef.current) {\n      // Clear selection\n      transformerRef.current.nodes([]);\n    }\n  }, [selectedIds]);\n  \n  // Click handler for stage\n  const handleStageClick = (e) => {\n    // If we are selecting with rect, do nothing\n    if (selectionRectangle.visible) {\n      return;\n    }\n\n    // If click on empty area - remove all selections\n    if (e.target === e.target.getStage()) {\n      setSelectedIds([]);\n      return;\n    }\n\n    // Do nothing if clicked NOT on our rectangles\n    if (!e.target.hasName('rect')) {\n      return;\n    }\n\n    const clickedId = e.target.id();\n    \n    // Do we pressed shift or ctrl?\n    const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\n    const isSelected = selectedIds.includes(clickedId);\n\n    if (!metaPressed && !isSelected) {\n      // If no key pressed and the node is not selected\n      // select just one\n      setSelectedIds([clickedId]);\n    } else if (metaPressed && isSelected) {\n      // If we pressed keys and node was selected\n      // we need to remove it from selection\n      setSelectedIds(selectedIds.filter(id => id !== clickedId));\n    } else if (metaPressed && !isSelected) {\n      // Add the node into selection\n      setSelectedIds([...selectedIds, clickedId]);\n    }\n  };\n  \n  const handleMouseDown = (e) => {\n    // Do nothing if we mousedown on any shape\n    if (e.target !== e.target.getStage()) {\n      return;\n    }\n    \n    // Start selection rectangle\n    isSelecting.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setSelectionRectangle({\n      visible: true,\n      x1: pos.x,\n      y1: pos.y,\n      x2: pos.x,\n      y2: pos.y,\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    // Do nothing if we didn't start selection\n    if (!isSelecting.current) {\n      return;\n    }\n    \n    const pos = e.target.getStage().getPointerPosition();\n    setSelectionRectangle({\n      ...selectionRectangle,\n      x2: pos.x,\n      y2: pos.y,\n    });\n  };\n\n  const handleMouseUp = () => {\n    // Do nothing if we didn't start selection\n    if (!isSelecting.current) {\n      return;\n    }\n    isSelecting.current = false;\n    \n    // Update visibility in timeout, so we can check it in click event\n    setTimeout(() => {\n      setSelectionRectangle({\n        ...selectionRectangle,\n        visible: false,\n      });\n    });\n\n    const selBox = {\n      x: Math.min(selectionRectangle.x1, selectionRectangle.x2),\n      y: Math.min(selectionRectangle.y1, selectionRectangle.y2),\n      width: Math.abs(selectionRectangle.x2 - selectionRectangle.x1),\n      height: Math.abs(selectionRectangle.y2 - selectionRectangle.y1),\n    };\n\n    const selected = rectangles.filter(rect => {\n      // Check if rectangle intersects with selection box\n      return Konva.Util.haveIntersection(selBox, {\n        x: rect.x,\n        y: rect.y,\n        width: rect.width,\n        height: rect.height,\n      });\n    });\n    \n    setSelectedIds(selected.map(rect => rect.id));\n  };\n\n  const handleDragEnd = (e) => {\n    const id = e.target.id();\n    const index = rectangles.findIndex(r => r.id === id);\n    \n    if (index !== -1) {\n      const rects = [...rectangles];\n      rects[index] = {\n        ...rects[index],\n        x: e.target.x(),\n        y: e.target.y(),\n      };\n      setRectangles(rects);\n    }\n  };\n\n  const handleTransformEnd = (e) => {\n    // Find which rectangle(s) were transformed\n    const nodes = transformerRef.current.nodes();\n    \n    const newRects = [...rectangles];\n    \n    // Update each transformed node\n    nodes.forEach(node => {\n      const id = node.id();\n      const index = newRects.findIndex(r => r.id === id);\n      \n      if (index !== -1) {\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n        \n        // Reset scale\n        node.scaleX(1);\n        node.scaleY(1);\n        \n        // Update the state with new values\n        newRects[index] = {\n          ...newRects[index],\n          x: node.x(),\n          y: node.y(),\n          width: Math.max(5, node.width() * scaleX),\n          height: Math.max(node.height() * scaleY),\n        };\n      }\n    });\n    \n    setRectangles(newRects);\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={handleMouseDown}\n      onMousemove={handleMouseMove}\n      onMouseup={handleMouseUp}\n      onClick={handleStageClick}\n    >\n      <Layer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Pixel Detection for Image Events in React with Konva\nDESCRIPTION: This React component demonstrates precise image event handling using react-konva. It uses useRef to access and apply drawHitFromCache() to the lion image, enabling event detection only on non-transparent pixels. useEffect ensures the hit region is applied after the image loads.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Image_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image, Text } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const lionRef = useRef();\n  const [monkeyImage] = useImage('https://konvajs.org/assets/monkey.png', 'anonymous');\n  const [lionImage] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\n  useEffect(() => {\n    if (lionImage) {\n    lionRef.current.cache();\n      lionRef.current.drawHitFromCache();\n    }\n  }, [lionImage]);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        {monkeyImage && (\n          <Image\n            x={120}\n            y={50}\n            image={monkeyImage}\n            width={200}\n            height={200}\n            onMouseover={() => setMessage('mouseover monkey (regular image)')}\n            onMouseout={() => setMessage('')}\n          />\n        )}\n        {lionImage && (\n          <Image\n            x={320}\n            y={50}\n            image={lionImage}\n            width={200}\n            height={200}\n            ref={lionRef}\n            onMouseover={() =>\n              setMessage('mouseover lion (with transparent pixels detection)')\n            }\n            onMouseout={() => setMessage('')}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Input Overlay Effect Handler in React\nDESCRIPTION: useEffect implementation for managing an overlay input system that allows direct dimension editing. Handles creation and cleanup of overlay elements, event listeners, and user interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n    if (!overlay) return;\n    \n    // Create overlay elements\n    const wrap = document.createElement('div');\n    wrap.style.position = 'absolute';\n    wrap.style.backgroundColor = 'rgba(0,0,0,0.1)';\n    wrap.style.top = 0;\n    wrap.style.left = 0;\n    wrap.style.width = '100%';\n    wrap.style.height = '100%';\n    wrap.style.zIndex = 999;\n    wrap.setAttribute('aria-modal', 'true');\n    wrap.setAttribute('role', 'dialog');\n    \n    const input = document.createElement('input');\n    input.type = 'number';\n    input.min = MIN_DIMENSION;\n    input.max = MAX_DIMENSION;\n    input.value = overlay.metric === 'width' ? dimensions.width : dimensions.height;\n    input.style.position = 'absolute';\n    input.style.top = `${overlay.position.y + 3}px`;\n    input.style.left = `${overlay.position.x}px`;\n    input.style.width = `${overlay.size.width + 3}px`;\n    input.style.height = `${overlay.size.height + 3}px`;\n    input.setAttribute('aria-label', `Edit ${overlay.metric}`);\n    \n    wrap.appendChild(input);\n    document.body.appendChild(wrap);\n    \n    // Handle input changes\n    const handleChange = () => {\n      const value = input.value;\n      dispatch({\n        type: overlay.metric === 'width' ? 'SET_WIDTH' : 'SET_HEIGHT',\n        payload: value\n      });\n    };\n    \n    // Handle click outside\n    const handleWrapClick = (e) => {\n      if (e.target === wrap) {\n        closeOverlay();\n        document.body.removeChild(wrap);\n      }\n    };\n    \n    // Handle keyboard events\n    const handleKeyUp = (e) => {\n      if (e.key === 'Enter' || e.key === 'Escape') {\n        closeOverlay();\n        document.body.removeChild(wrap);\n      }\n    };\n    \n    input.addEventListener('change', handleChange);\n    input.addEventListener('input', handleChange);\n    wrap.addEventListener('click', handleWrapClick);\n    input.addEventListener('keyup', handleKeyUp);\n    window.addEventListener('keyup', handleKeyUp);\n    \n    // Focus the input\n    input.focus();\n    \n    // Cleanup\n    return () => {\n      input.removeEventListener('change', handleChange);\n      input.removeEventListener('input', handleChange);\n      wrap.removeEventListener('click', handleWrapClick);\n      input.removeEventListener('keyup', handleKeyUp);\n      window.removeEventListener('keyup', handleKeyUp);\n      \n      if (document.body.contains(wrap)) {\n        document.body.removeChild(wrap);\n      }\n    };\n  }, [overlay, dimensions, dispatch, closeOverlay]);\n```\n\n----------------------------------------\n\nTITLE: Resizing Konva Shapes with Preserved Stroke in Vue\nDESCRIPTION: This Vue component creates two resizable Konva rectangles with preserved stroke sizes. It uses the Composition API with refs and onMounted hook to set up the shapes and transformers, demonstrating both stroke preservation methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/12_Ignore_Stroke_On_Transform.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rect1Config\"\n        @transformend=\"handleTransformEnd\"\n        ref=\"rect1Ref\"\n      />\n      <v-transformer\n        :config=\"tr1Config\"\n        ref=\"tr1Ref\"\n      />\n      \n      <v-rect\n        :config=\"rect2Config\"\n        ref=\"rect2Ref\"\n      />\n      <v-transformer\n        :config=\"tr2Config\"\n        ref=\"tr2Ref\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rect1Size = ref({\n  width: 100,\n  height: 100\n});\n\nconst rect1Config = {\n  x: 50,\n  y: 50,\n  width: rect1Size.value.width,\n  height: rect1Size.value.height,\n  fill: '#00ff00',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true\n};\n\nconst rect2Config = {\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: '#ff0000',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true,\n  strokeScaleEnabled: false\n};\n\nconst tr1Config = {};\nconst tr2Config = {\n  ignoreStroke: true\n};\n\nconst rect1Ref = ref(null);\nconst rect2Ref = ref(null);\nconst tr1Ref = ref(null);\nconst tr2Ref = ref(null);\n\nconst handleTransformEnd = () => {\n  const node = rect1Ref.value.getNode();\n  rect1Size.value = {\n    width: node.width() * node.scaleX(),\n    height: node.height() * node.scaleY()\n  };\n  node.scaleX(1);\n  node.scaleY(1);\n};\n\nonMounted(() => {\n  tr1Ref.value.getNode().nodes([rect1Ref.value.getNode()]);\n  tr2Ref.value.getNode().nodes([rect2Ref.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Text with React and KonvaJS\nDESCRIPTION: React component demonstrating drag and drop functionality using KonvaJS. The example shows how to create a draggable text element that changes color while being dragged and updates its position state when dropped. Uses React hooks for state management and Konva events for drag handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Drag_And_Drop.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Text } from 'react-konva';\n\nconst App = () => {\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [position, setPosition] = React.useState({\n    x: 50,\n    y: 50,\n  });\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          text=\"Draggable Text\"\n          x={position.x}\n          y={position.y}\n          draggable\n          fill={isDragging ? 'green' : 'black'}\n          onDragStart={() => {\n            setIsDragging(true);\n          }}\n          onDragEnd={(e) => {\n            setIsDragging(false);\n            setPosition({\n              x: e.target.x(),\n              y: e.target.y(),\n            });\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Image in Konva Shapes\nDESCRIPTION: Gets or sets the fill pattern image which allows using an image as a fill instead of a solid color. Requires loading an image object first.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Touch Events with React and Konva.js\nDESCRIPTION: This React implementation uses react-konva to create mobile touch interactions. It utilizes React hooks (useState and useRef) to manage the displayed message and access the stage. The triangle tracks touch coordinates and the circle responds to touch start and end events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Circle, Text } from 'react-konva';\nimport { useState, useRef } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const stageRef = useRef();\n\n  const handleTriangleTouch = () => {\n    const touchPos = stageRef.current.getPointerPosition();\n    setMessage(`x: ${touchPos.x}, y: ${touchPos.y}`);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight} ref={stageRef}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <RegularPolygon\n          x={80}\n          y={120}\n          sides={3}\n          radius={80}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onTouchmove={handleTriangleTouch}\n        />\n        <Circle\n          x={230}\n          y={100}\n          radius={60}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onTouchstart={() => setMessage('touchstart circle')}\n          onTouchend={() => setMessage('touchend circle')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Image Preview in React with react-konva\nDESCRIPTION: This React implementation creates a scaled preview of the stage using react-konva components. It maintains state for shapes and preview URL, updating the preview when shapes are added or dragged. The preview is generated with a reduced pixel ratio for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst App = () => {\n  const [shapes, setShapes] = React.useState(() =>\n    Array.from({ length: 10 }, (_, i) => ({\n      id: i,\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      radius: Math.random() * 30 + 5,\n      fill: getRandomColor(),\n    }))\n  );\n  const [previewUrl, setPreviewUrl] = React.useState('');\n  const stageRef = React.useRef(null);\n\n  const updatePreview = React.useCallback(() => {\n    if (!stageRef.current) return;\n    const scale = 1 / 4;\n    const url = stageRef.current.toDataURL({ pixelRatio: scale });\n    setPreviewUrl(url);\n  }, []);\n\n  React.useEffect(() => {\n    updatePreview();\n  }, [updatePreview]);\n\n  const handleDragEnd = (e, id) => {\n    const { x, y } = e.target.position();\n    setShapes(shapes.map(shape => \n      shape.id === id ? { ...shape, x, y } : shape\n    ));\n    updatePreview();\n  };\n\n  const handleDblClick = (e) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    const newShape = {\n      id: shapes.length,\n      x: pos.x,\n      y: pos.y,\n      radius: Math.random() * 30 + 5,\n      fill: getRandomColor(),\n    };\n    setShapes([...shapes, newShape]);\n    updatePreview();\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <Stage\n        ref={stageRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onDblClick={handleDblClick}\n        onTap={handleDblClick}\n      >\n        <Layer>\n          {shapes.map(shape => (\n            <Circle\n              key={shape.id}\n              {...shape}\n              draggable\n              onDragEnd={(e) => handleDragEnd(e, shape.id)}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <img\n        src={previewUrl}\n        alt=\"preview\"\n        style={{\n          position: 'absolute',\n          top: '2px',\n          right: '2px',\n          border: '1px solid grey',\n          backgroundColor: 'lightgrey',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Zoom with React and KonvaJS\nDESCRIPTION: React implementation of the zoom functionality using react-konva components. Uses hooks to manage state for scale and position, with event handlers to control zoom behavior on mouse interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zoom_Layer_On_hover.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [image] = useImage('https://konvajs.org/assets/space.jpg');\n  const [scale, setScale] = useState(1);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const handleMouseEnter = () => {\n    setScale(2);\n  };\n\n  const handleMouseMove = (e) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    setPosition({\n      x: -pos.x,\n      y: -pos.y,\n    });\n  };\n\n  const handleMouseLeave = () => {\n    setScale(1);\n    setPosition({ x: 0, y: 0 });\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer\n        scaleX={scale}\n        scaleY={scale}\n        x={position.x}\n        y={position.y}\n        onMouseEnter={handleMouseEnter}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n      >\n        {image && (\n          <Image\n            image={image}\n            width={window.innerWidth}\n            height={window.innerHeight}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Shows how to get and set the start radius for a radial gradient fill. This controls where the inner part of the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Konva.js Performance with Listening False in Vue\nDESCRIPTION: This Vue implementation shows the performance optimization technique using vue-konva. It creates reactive configurations for circles with and without event listeners, demonstrating how to properly set the listening property to false for performance-critical shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Listening_False.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <!-- Circles with event listeners -->\n      <v-circle\n        v-for=\"circle in listeningCircles\"\n        :key=\"circle.id\"\n        :config=\"getListeningCircleConfig(circle)\"\n        @mouseenter=\"handleMouseEnter(circle.id)\"\n        @mouseleave=\"handleMouseLeave\"\n      />\n      \n      <!-- Circles without event listeners -->\n      <v-circle\n        v-for=\"circle in nonListeningCircles\"\n        :key=\"circle.id\"\n        :config=\"getNonListeningCircleConfig(circle)\"\n      />\n      \n      <v-text :config=\"textConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst hoveredId = ref(null);\n\n// Generate circles data\nconst listeningCircles = Array.from({ length: 100 }, (_, i) => ({\n  id: i,\n  x: Math.random() * window.innerWidth,\n  y: Math.random() * window.innerHeight,\n}));\n\nconst nonListeningCircles = Array.from({ length: 1000 }, (_, i) => ({\n  id: i + 100,\n  x: Math.random() * window.innerWidth,\n  y: Math.random() * window.innerHeight,\n}));\n\nconst getListeningCircleConfig = (circle) => ({\n  x: circle.x,\n  y: circle.y,\n  radius: 20,\n  fill: hoveredId.value === circle.id ? 'red' : 'blue',\n  opacity: 0.5,\n});\n\nconst getNonListeningCircleConfig = (circle) => ({\n  x: circle.x,\n  y: circle.y,\n  radius: 20,\n  fill: 'green',\n  opacity: 0.5,\n  listening: false,\n});\n\nconst textConfig = {\n  x: 10,\n  y: 10,\n  text: 'Blue circles (100) have event listeners (hover them)\\nGreen circles (1000) have no listeners (better performance)',\n  fontSize: 16,\n  fill: 'black',\n};\n\nconst handleMouseEnter = (id) => {\n  hoveredId.value = id;\n};\n\nconst handleMouseLeave = () => {\n  hoveredId.value = null;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Path in Konva with React\nDESCRIPTION: This snippet shows how to create a custom path shape in a React application using react-konva. It renders a green path with specific SVG path data and scaling, using React components instead of imperative Konva API calls.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Path.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Path } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Path\n          x={50}\n          y={50}\n          data=\"M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z\"\n          fill=\"green\"\n          scaleX={2}\n          scaleY={2}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Pixel Detection for Image Events in Vue with Konva\nDESCRIPTION: This Vue component implements precise image event handling with vue-konva. It sets up a lion image with transparent pixel detection using watch to monitor when images load, then applies cache() and drawHitFromCache() methods on the next tick to create the precise hit region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Image_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-image\n        v-if=\"monkeyImage\"\n        :config=\"monkeyConfig\"\n        @mouseover=\"handleMonkeyOver\"\n        @mouseout=\"handleMouseOut\"\n        ref=\"monkeyRef\"\n      />\n      <v-image\n        v-if=\"lionImage\"\n        :config=\"lionConfig\"\n        @mouseover=\"handleLionOver\"\n        @mouseout=\"handleMouseOut\"\n        ref=\"lionRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed, nextTick, watch } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst message = ref('');\nconst lionRef = ref(null);\nconst monkeyRef = ref(null);\n\nconst [monkeyImage] = useImage('https://konvajs.org/assets/monkey.png', 'anonymous');\nconst [lionImage] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst monkeyConfig = computed(() => ({\n  x: 120,\n  y: 50,\n  image: monkeyImage.value,\n  width: 200,\n  height: 200\n}));\n\nconst lionConfig = computed(() => ({\n  x: 320,\n  y: 50,\n  image: lionImage.value,\n  width: 200,\n  height: 200\n}));\n\n// watch for image loads to setup hit regions\nwatch([lionImage, monkeyImage], () => {\n  console.log('watch', lionImage, monkeyImage);\n  nextTick(() => {\n    if (lionRef.value) {\n      const node = lionRef.value.getNode();\n      node.cache();\n      node.drawHitFromCache();\n    }\n  });\n});\n\nconst handleMonkeyOver = () => {\n  message.value = 'mouseover monkey (regular image)';\n};\n\nconst handleLionOver = () => {\n  message.value = 'mouseover lion (with transparent pixels detection)';\n};\n\nconst handleMouseOut = () => {\n  message.value = '';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient in Konva.js\nDESCRIPTION: Shows how to get and set the color stops for a linear gradient stroke in a shape. This allows creating complex gradient strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Clipping in Vanilla JavaScript with Konva.js\nDESCRIPTION: This code demonstrates how to create a rectangular clipping region using Konva.js in vanilla JavaScript. It creates a stage, layer, and group with a clip property that defines a rectangular boundary. Random green circles are generated and added to the group, but they will only be visible within the clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Regions.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Konva from 'konva';\n\n// First we need to create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\n// Then create layer\nconst layer = new Konva.Layer();\n\nconst group = new Konva.Group({\n  clip: {\n    x: 100,\n    y: 20,\n    width: 200,\n    height: 200,\n  },\n});\n\nfor (let i = 0; i < 20; i++) {\n  const blob = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: Math.random() * 50,\n    fill: 'green',\n    opacity: 0.8,\n  });\n  group.add(blob);\n}\n\n// add the shape to the layer\nlayer.add(group);\n\n// add the layer to the stage\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Triangle with Line Join in Vue.js\nDESCRIPTION: This snippet demonstrates how to create a triangle shape with vue-konva and change its line join style on mouse hover. It uses Vue 3 Composition API with ref to manage the line join state and v-stage, v-layer, and v-regular-polygon components from vue-konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/05-Line_Join.mdx#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"triangleConfig\"\n        @mouseenter=\"handleMouseEnter\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst currentLineJoin = ref('miter');\n\nconst triangleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  sides: 3,\n  radius: 70,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: A,\n  lineJoin: currentLineJoin.value\n};\n\nconst handleMouseEnter = () => {\n  const lineJoins = ['miter', 'bevel', 'round'];\n  const index = lineJoins.indexOf(currentLineJoin.value);\n  const nextIndex = (index + 1) % lineJoins.length;\n  currentLineJoin.value = lineJoins[nextIndex];\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Emboss Filter in React with Konva.js\nDESCRIPTION: This React component implements an emboss filter on an image using react-konva. It uses React hooks to manage the filter parameters (strength, white level, and blend) and renders interactive sliders to control these values, with the image being cached for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Emboss.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [strength, setStrength] = useState(0.5);\n  const [whiteLevel, setWhiteLevel] = useState(0.5);\n  const [blend, setBlend] = useState(0.5);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      \n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Emboss]}\n            embossStrength={strength}\n            embossWhiteLevel={whiteLevel}\n            embossDirection=\"top-left\"\n            embossBlend={blend}\n          />\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <div>\n          <label>Strength: </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.1\"\n            value={strength}\n            onChange={(e) => setStrength(parseFloat(e.target.value))}\n          />\n        </div>\n        <div style={{ marginTop: '10px' }}>\n          <label>White Level: </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.1\"\n            value={whiteLevel}\n            onChange={(e) => setWhiteLevel(parseFloat(e.target.value))}\n          />\n        </div>\n        <div style={{ marginTop: '10px' }}>\n          <label>Blend: </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.1\"\n            value={blend}\n            onChange={(e) => setBlend(parseFloat(e.target.value))}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Video on Canvas with Vue in Konva.js\nDESCRIPTION: This Vue implementation shows how to render a video on a Konva.js canvas. It uses Vue's composition API with refs to manage state, implements play/pause functionality, and handles video metadata loading. The implementation creates a draggable video image and uses animation to update the canvas continuously during playback.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Video_On_Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handlePlay\">Play</button>\n    <button @click=\"handlePause\">Pause</button>\n    <v-stage :config=\"stageConfig\">\n      <v-layer ref=\"layerRef\">\n        <v-image\n          :config=\"{\n            image: videoElement,\n            x: 50,\n            y: 20,\n            width: videoSize.width,\n            height: videoSize.height,\n            draggable: true,\n          }\"\n        />\n        <v-text\n          v-if=\"status\"\n          :config=\"{\n            text: status,\n            width: stageConfig.width,\n            height: stageConfig.height,\n            align: 'center',\n            verticalAlign: 'middle',\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nexport default {\n  setup() {\n    const width = ref(window.innerWidth);\n    const height = ref(400);\n    const layerRef = ref(null);\n    const status = ref('Loading video...');\n    const animation = ref(null);\n    const videoElement = ref(document.createElement('video'));\n    const videoSize = ref({ width: 0, height: 0 });\n\n    videoElement.value.src =\n      'https://upload.wikimedia.org/wikipedia/commons/transcoded/c/c4/Physicsworks.ogv/Physicsworks.ogv.240p.vp9.webm';\n\n    const stageConfig = {\n      width: width.value,\n      height: height.value,\n    };\n\n    const handleResize = () => {\n      width.value = window.innerWidth;\n    };\n\n    const handleMetadata = () => {\n      status.value = 'Press PLAY...';\n      videoSize.value = {\n        width: videoElement.value.videoWidth,\n        height: videoElement.value.videoHeight,\n      };\n    };\n\n    const handlePlay = () => {\n      status.value = '';\n      videoElement.value.play();\n      if (layerRef.value) {\n        const anim = new Konva.Animation(() => {}, layerRef.value.getNode());\n        animation.value = anim;\n        anim.start();\n      }\n    };\n\n    const handlePause = () => {\n      videoElement.value.pause();\n      if (animation.value) {\n        animation.value.stop();\n      }\n    };\n\n    onMounted(() => {\n      window.addEventListener('resize', handleResize);\n      videoElement.value.addEventListener('loadedmetadata', handleMetadata);\n    });\n\n    onUnmounted(() => {\n      window.removeEventListener('resize', handleResize);\n      videoElement.value.removeEventListener('loadedmetadata', handleMetadata);\n      if (animation.value) {\n        animation.value.stop();\n      }\n    });\n\n    return {\n      stageConfig,\n      layerRef,\n      status,\n      videoElement,\n      videoSize,\n      handlePlay,\n      handlePause,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Lines with Konva in Vue\nDESCRIPTION: This snippet demonstrates how to implement lines using Vue with the vue-konva library. It uses Vue's component-based approach with <v-stage>, <v-layer>, and <v-line> components, and configuration objects to define the same three line styles as the other examples.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Simple_Line.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line :config=\"redLineConfig\" />\n      <v-line :config=\"greenLineConfig\" />\n      <v-line :config=\"blueLineConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst redLineConfig = {\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  y: 5\n};\n\nconst greenLineConfig = {\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'green',\n  strokeWidth: 2,\n  lineJoin: 'round',\n  dash: [33, 10],\n  y: 55\n};\n\nconst blueLineConfig = {\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'blue',\n  strokeWidth: 10,\n  lineCap: 'round',\n  lineJoin: 'round',\n  dash: [29, 20, 0.001, 20],\n  y: 105\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Centered Scaling with Vanilla KonvaJS\nDESCRIPTION: Creates a stage with two text nodes and transformers, one with centered scaling enabled. The texts are draggable and resizable using transformer nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/02_Centered_Scaling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\nx: 50,\ny: 80,\ntext: 'Simple text',\nfontSize: 30,\ndraggable: true,\nwidth: 200,\n});\nlayer.add(text);\n\nconst text2 = new Konva.Text({\nx: 50,\ny: 180,\ntext: 'Simple text',\nfontSize: 30,\ndraggable: true,\nwidth: 200,\n});\nlayer.add(text2);\n\nconst tr = new Konva.Transformer({\nnodes: [text],\ncenteredScaling: true,\n});\nlayer.add(tr);\n\nconst tr2 = new Konva.Transformer({\nnodes: [text2],\n});\nlayer.add(tr2);\n```\n\n----------------------------------------\n\nTITLE: Configuring fillPatternY in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the fillPatternY property of a Konva shape. This property defines the y-coordinate of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of Shape Resize Snapping\nDESCRIPTION: Vue component implementation of shape resize snapping using vue-konva. Shows how to achieve the same snapping functionality using Vue's composition API and template syntax.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Resize_Snaps.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line :config=\"horizontalLineConfig\" />\n      <v-line :config=\"verticalLineConfig\" />\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst horizontalLineConfig = {\n  points: [0, window.innerHeight / 2, window.innerWidth, window.innerHeight / 2],\n  stroke: '#000',\n  strokeWidth: 1,\n  dash: [4, 4]\n};\n\nconst verticalLineConfig = {\n  points: [window.innerWidth / 2, 0, window.innerWidth / 2, window.innerHeight],\n  stroke: '#000',\n  strokeWidth: 1,\n  dash: [4, 4]\n};\n\nconst rectConfig = {\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  draggable: true\n};\n\nconst transformerConfig = {\n  anchorDragBoundFunc: (oldPos, newPos) => {\n    const dist = Math.sqrt(Math.pow(newPos.x - window.innerWidth / 2, 2));\n    if (dist < 10) {\n      return {\n        ...newPos,\n        x: window.innerWidth / 2,\n      };\n    }\n    return newPos;\n  }\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Y Position in Konva\nDESCRIPTION: Gets or sets the y position of the fill pattern. This controls the vertical positioning of the pattern image within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Control with Vanilla JavaScript and Konva\nDESCRIPTION: Creates an animated circle using vanilla JavaScript and Konva.js. Demonstrates how to create animation controls with start/stop buttons and implements a sinusoidal movement pattern. Uses Konva.Animation for smooth animation handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Stop_Animation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\nx: stage.width() / 2,\ny: stage.height() / 2,\nradius: 30,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\nlayer.add(circle);\n\nconst container = document.createElement('div');\ndocument.body.appendChild(container);\ncontainer.style.position = 'absolute';\ncontainer.style.top = '0px';\ncontainer.style.left = '0px';\n\nconst startBtn = document.createElement('button');\nstartBtn.textContent = 'Start Animation';\ncontainer.appendChild(startBtn);\n\nconst stopBtn = document.createElement('button');\nstopBtn.textContent = 'Stop Animation';\ncontainer.appendChild(stopBtn);\n\nconst anim = new Konva.Animation(function(frame) {\ncircle.x(\namplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\nstage.width() / 2\n);\n}, layer);\n\nconst amplitude = 100;\nconst period = 2000;\n\nstartBtn.addEventListener('click', () => anim.start());\nstopBtn.addEventListener('click', () => anim.stop());\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection with Vue-Konva\nDESCRIPTION: This snippet demonstrates how to implement collision detection using Vue-Konva components. It manages shapes using Vue's reactive system, calculates bounding boxes for rotated rectangles, and updates shape colors when collisions are detected during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Collision_Detection.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layer\">\n      <template v-for=\"shape in shapes\" :key=\"shape.id\">\n        <v-group\n          :config=\"{\n            x: shape.x,\n            y: shape.y,\n            draggable: true,\n            id: `group-${shape.id}`\n          }\"\n          @dragmove=\"(e) => handleDragMove(e, shape.id)\"\n          @dragend=\"(e) => handleDragEnd(e, shape.id)\"\n        >\n          <v-rect\n            :config=\"{\n              width: shape.width,\n              height: shape.height,\n              fill: shape.fill,\n              rotation: shape.rotation,\n              name: 'fillShape'\n            }\"\n          />\n          <v-rect\n            :config=\"{\n              x: shape.box.x,\n              y: shape.box.y,\n              width: shape.box.width,\n              height: shape.box.height,\n              stroke: 'red',\n              strokeWidth: 1\n            }\"\n          />\n        </v-group>\n      </template>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst createInitialShapes = () => {\n  const shapes = [];\n  for (let i = 0; i < 10; i++) {\n    const width = 30 + Math.random() * 30;\n    const height = 30 + Math.random() * 30;\n    const rotation = 360 * Math.random();\n\n    // calculate bounding box for rotated rectangle\n    const radians = (rotation * Math.PI) / 180;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n\n    // calculate corners of the rectangle\n    const corners = [\n      { x: 0, y: 0 },\n      { x: width, y: 0 },\n      { x: width, y: height },\n      { x: 0, y: height }\n    ].map(point => ({\n      x: point.x * cos - point.y * sin,\n      y: point.x * sin + point.y * cos\n    }));\n\n    // find bounding box dimensions\n    const minX = Math.min(...corners.map(p => p.x));\n    const maxX = Math.max(...corners.map(p => p.x));\n    const minY = Math.min(...corners.map(p => p.y));\n    const maxY = Math.max(...corners.map(p => p.y));\n\n    shapes.push({\n      id: i,\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      rotation,\n      width,\n      height,\n      fill: 'grey',\n      box: {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n      }\n    });\n  }\n  return shapes;\n};\n\nconst shapes = ref(createInitialShapes());\n\nconst haveIntersection = (r1, r2) => {\n  return !(\n    r2.x > r1.x + r1.width ||\n    r2.x + r2.width < r1.x ||\n    r2.y > r1.y + r1.height ||\n    r2.y + r2.height < r1.y\n  );\n};\n\nconst handleDragMove = (e, id) => {\n  const target = e.target;\n  const layer = target.getLayer();\n  const targetRect = target.getClientRect();\n  \n  shapes.value = shapes.value.map(shape => {\n    if (shape.id === id) {\n      return shape;\n    }\n    const shapeGroup = layer.findOne(`#group-${shape.id}`);\n    if (!shapeGroup) return shape;\n    \n    const isIntersecting = haveIntersection(\n      shapeGroup.getClientRect(),\n      targetRect\n    );\n    \n    return {\n      ...shape,\n      fill: isIntersecting ? 'red' : 'grey'\n    };\n  });\n};\n\nconst handleDragEnd = (e, id) => {\n  shapes.value = shapes.value.map(shape => \n    shape.id === id\n      ? { ...shape, x: e.target.x(), y: e.target.y() }\n      : shape\n  );\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Scaling with Aspect Ratio Preservation in Vanilla Konva.js\nDESCRIPTION: A complete implementation showing how to use crop property in Konva.Image to scale images while preserving aspect ratio. Includes a dropdown for selecting different crop positions, a transformation handler, and the core calculation function for determining crop dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create select element for crop position\nconst select = document.createElement('select');\nselect.style.position = 'absolute';\nselect.style.top = '4px';\nselect.style.left = '4px';\n\nconst positions = [\n  'left-top', 'center-top', 'right-top', '--',\n  'left-middle', 'center-middle', 'right-middle', '--',\n  'left-bottom', 'center-bottom', 'right-bottom'\n];\n\npositions.forEach(pos => {\n  const option = document.createElement('option');\n  option.value = pos;\n  option.text = pos;\n  if (pos === 'center-middle') option.selected = true;\n  select.appendChild(option);\n});\n\ndocument.body.appendChild(select);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// function to calculate crop values from source image, its visible size and a crop strategy\nfunction getCrop(image, size, clipPosition = 'center-middle') {\n  const width = size.width;\n  const height = size.height;\n  const aspectRatio = width / height;\n\n  let newWidth;\n  let newHeight;\n\n  const imageRatio = image.width / image.height;\n\n  if (aspectRatio >= imageRatio) {\n    newWidth = image.width;\n    newHeight = image.width / aspectRatio;\n  } else {\n    newWidth = image.height * aspectRatio;\n    newHeight = image.height;\n  }\n\n  let x = 0;\n  let y = 0;\n  if (clipPosition === 'left-top') {\n    x = 0;\n    y = 0;\n  } else if (clipPosition === 'left-middle') {\n    x = 0;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'left-bottom') {\n    x = 0;\n    y = image.height - newHeight;\n  } else if (clipPosition === 'center-top') {\n    x = (image.width - newWidth) / 2;\n    y = 0;\n  } else if (clipPosition === 'center-middle') {\n    x = (image.width - newWidth) / 2;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'center-bottom') {\n    x = (image.width - newWidth) / 2;\n    y = image.height - newHeight;\n  } else if (clipPosition === 'right-top') {\n    x = image.width - newWidth;\n    y = 0;\n  } else if (clipPosition === 'right-middle') {\n    x = image.width - newWidth;\n    y = (image.height - newHeight) / 2;\n  } else if (clipPosition === 'right-bottom') {\n    x = image.width - newWidth;\n    y = image.height - newHeight;\n  }\n\n  return {\n    cropX: x,\n    cropY: y,\n    cropWidth: newWidth,\n    cropHeight: newHeight,\n  };\n}\n\n// function to apply crop\nfunction applyCrop(img, pos) {\n  img.setAttr('lastCropUsed', pos);\n  const crop = getCrop(\n    img.image(),\n    { width: img.width(), height: img.height() },\n    pos\n  );\n  img.setAttrs(crop);\n}\n\nKonva.Image.fromURL('https://konvajs.org/assets/darth-vader.jpg', (img) => {\n  img.setAttrs({\n    width: 300,\n    height: 100,\n    x: 80,\n    y: 100,\n    name: 'image',\n    draggable: true,\n  });\n  layer.add(img);\n  // apply default center-middle crop\n  applyCrop(img, 'center-middle');\n\n  const tr = new Konva.Transformer({\n    nodes: [img],\n    keepRatio: false,\n    flipEnabled: false,\n    boundBoxFunc: (oldBox, newBox) => {\n      if (Math.abs(newBox.width) < 10 || Math.abs(newBox.height) < 10) {\n        return oldBox;\n      }\n      return newBox;\n    },\n  });\n\n  layer.add(tr);\n\n  img.on('transform', () => {\n    // reset scale on transform\n    img.setAttrs({\n      scaleX: 1,\n      scaleY: 1,\n      width: img.width() * img.scaleX(),\n      height: img.height() * img.scaleY(),\n    });\n    applyCrop(img, img.getAttr('lastCropUsed'));\n  });\n});\n\nselect.addEventListener('change', (e) => {\n  const img = layer.findOne('.image');\n  applyCrop(img, e.target.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Pixelate Filter in Vue with vue-konva\nDESCRIPTION: This snippet demonstrates how to implement a pixelate filter in a Vue.js application using vue-konva. It uses Vue's reactivity system with refs and watchers to handle image loading and applying the filter effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Pixelate.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Pixelate],\n            pixelSize: pixelSize,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"2\"\n      max=\"32\"\n      step=\"1\"\n      :value=\"pixelSize\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst pixelSize = ref(8);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  pixelSize.value = parseInt(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Noise Filter to Images with React in Konva.js\nDESCRIPTION: This snippet shows how to implement a noise filter with a slider control using React and react-konva. It uses hooks like useState, useEffect, and useRef to manage the image state and filter application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Noise.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [noise, setNoise] = useState(0.5);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Noise]}\n            noise={noise}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.1\"\n        value={noise}\n        onChange={(e) => setNoise(parseFloat(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncing Bunnies Animation with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet sets up a Konva stage and layer, loads bunny images, and animates them with physics-based movement. It includes functions for adding bunnies, updating their positions, and handling user interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Set up stage and layer\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.FastLayer();\nstage.add(layer);\n\n// Create stats and counter display\nconst counterDiv = document.createElement('div');\ncounterDiv.style.position = 'absolute';\ncounterDiv.style.top = '50px';\ncounterDiv.style.backgroundColor = 'white';\ncounterDiv.style.fontSize = '12px';\ncounterDiv.style.padding = '5px';\ncounterDiv.innerHTML = '0 BUNNIES';\ndocument.getElementById('container').appendChild(counterDiv);\n\n// Define variables\nconst bunnys = [];\nconst GRAVITY = 0.75;\nconst maxX = width;\nconst minX = 0;\nconst maxY = height;\nconst minY = 0;\nconst startBunnyCount = 100; // Starting with fewer bunnies for better initial performance\nconst amount = 10; // Add this many bunnies at a time\nlet isAdding = false;\nlet count = 0;\nlet wabbitTexture;\n\n// Load the bunny image\nwabbitTexture = new Image();\nwabbitTexture.onload = function() {\n  addBunnies(startBunnyCount);\n  counterDiv.innerHTML = startBunnyCount + ' BUNNIES';\n  count = startBunnyCount;\n  \n  // Start animation loop\n  requestAnimationFrame(update);\n};\nwabbitTexture.src = 'https://konvajs.org/assets/bunny.png';\n\n// Add event listeners\nstage.on('mousedown touchstart', function() {\n  isAdding = true;\n});\n\nstage.on('mouseup touchend', function() {\n  isAdding = false;\n});\n\n// Function to add bunnies\nfunction addBunnies(num) {\n  for (let i = 0; i < num; i++) {\n    const bunny = new Konva.Image({\n      image: wabbitTexture,\n      transformsEnabled: 'position',\n      perfectDrawEnabled: false,\n      x: Math.random() * width,\n      y: Math.random() * height,\n    });\n\n    bunny.speedX = Math.random() * 10;\n    bunny.speedY = Math.random() * 10 - 5;\n\n    bunnys.push(bunny);\n    layer.add(bunny);\n  }\n}\n\n// Animation update function\nfunction update() {\n  // Add more bunnies if mouse is down\n  if (isAdding) {\n    addBunnies(amount);\n    count += amount;\n    counterDiv.innerHTML = count + ' BUNNIES';\n  }\n\n  // Update all bunnies\n  for (let i = 0; i < bunnys.length; i++) {\n    const bunny = bunnys[i];\n    let x = bunny.x();\n    let y = bunny.y();\n\n    x += bunny.speedX;\n    y += bunny.speedY;\n    bunny.speedY += GRAVITY;\n\n    // Bounce off the edges\n    if (x > maxX - wabbitTexture.width) {\n      bunny.speedX *= -1;\n      x = maxX - wabbitTexture.width;\n    } else if (x < minX) {\n      bunny.speedX *= -1;\n      x = minX;\n    }\n\n    if (y > maxY - wabbitTexture.height) {\n      bunny.speedY *= -0.85;\n      y = maxY - wabbitTexture.height;\n      if (Math.random() > 0.5) {\n        bunny.speedY -= Math.random() * 6;\n      }\n    } else if (y < minY) {\n      bunny.speedY = 0;\n      y = minY;\n    }\n\n    bunny.position({ x, y });\n  }\n\n  layer.batchDraw();\n  requestAnimationFrame(update);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kaleidoscope Filter with Vue and KonvaJS\nDESCRIPTION: Vue implementation of a kaleidoscope filter using vue-konva. Uses Vue's composition API with ref and watch for reactivity. Includes slider controls for adjusting sides and angle of the kaleidoscope effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Kaleidoscope.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Kaleidoscope],\n            kaleidoscopePower: sides,\n            kaleidoscopeAngle: angle,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div style=\"position: absolute; top: 20px; left: 20px\">\n      <div>\n        Sides\n        <input\n          type=\"range\"\n          min=\"3\"\n          max=\"20\"\n          step=\"1\"\n          :value=\"sides\"\n          @input=\"(e) => sides = parseInt(e.target.value)\"\n        />\n      </div>\n      <div>\n        Angle\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"360\"\n          step=\"1\"\n          :value=\"angle\"\n          @input=\"(e) => angle = parseInt(e.target.value)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst sides = ref(6);\nconst angle = ref(0);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Stopping Shape Transformation with React Konva\nDESCRIPTION: This example shows how to implement transform stopping in a React application using react-konva. It utilizes React hooks (useRef, useEffect) to reference the shape and transformer components and implements a limit check in the onTransform event handler.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/09_Stop_Transform.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n          onTransform={() => {\n            const node = rectRef.current;\n            const width = node.width() * node.scaleX();\n            if (width > 200) {\n              trRef.current.stopTransform();\n            }\n          }}\n        />\n        <Transformer ref={trRef} />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Canvas to PDF - React Implementation\nDESCRIPTION: React component implementation for exporting Konva canvas to PDF using react-konva and jsPDF. Includes stage creation, shape rendering, and PDF export functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_to_PDF.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport { Stage, Layer, Rect, Text, Arrow, Image } from 'react-konva';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const stageRef = useRef(null);\n  const [darthVaderImage] = useImage('https://konvajs.org/assets/darth-vader.jpg', 'anonymous');\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js';\n    script.integrity = 'sha384-NaWTHo/8YCBYJ59830LTz/P4aQZK1sS0SneOgAvhsIl3zBu8r9RevNg5lHCHAuQ/';\n    script.crossOrigin = 'anonymous';\n    document.head.appendChild(script);\n    \n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n  \n  const handleExport = () => {\n    if (stageRef.current && typeof window.jsPDF !== 'undefined') {\n      const stage = stageRef.current;\n      const pdf = new window.jsPDF('l', 'px', [width, height]);\n      pdf.setTextColor('#000000');\n      \n      stage.find('Text').forEach((text) => {\n        const size = text.fontSize() / 0.75;\n        pdf.setFontSize(size);\n        pdf.text(text.text(), text.x(), text.y(), {\n          baseline: 'top',\n          angle: -text.getAbsoluteRotation(),\n        });\n      });\n\n      pdf.addImage(\n        stage.toDataURL({ pixelRatio: 2 }),\n        0,\n        0,\n        width,\n        height\n      );\n\n      pdf.save('canvas.pdf');\n    } else {\n      console.error('jsPDF library is not loaded or stage is not available');\n      alert('jsPDF library is not loaded. In a real project, you need to include it.');\n    }\n  };\n  \n  return (\n    <div style={{ position: 'relative' }}>\n      <button \n        style={{ position: 'absolute', top: '5px', left: '5px', zIndex: 10 }}\n        onClick={handleExport}\n      >\n        Save as PDF\n      </button>\n      \n      <Stage width={width} height={height} ref={stageRef}>\n        <Layer>\n          <Rect\n            width={width}\n            height={height}\n            fill=\"rgba(200, 200, 200)\"\n          />\n          \n          <Text\n            text=\"This is the Darth Vader\"\n            x={15}\n            y={40}\n            rotation={-10}\n            fontSize={18}\n            filters={[Konva.Filters.Blur]}\n            blurRadius={4}\n          />\n          \n          <Arrow\n            points={[70, 50, 100, 80, 150, 100, 190, 100]}\n            tension={0.5}\n            stroke=\"black\"\n            fill=\"black\"\n          />\n          \n          {darthVaderImage && (\n            <Image\n              image={darthVaderImage}\n              x={200}\n              y={50}\n              scaleX={0.5}\n              scaleY={0.5}\n            />\n          )}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying RGB Filter to Image with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code demonstrates how to load an image, apply an RGB filter, and create interactive sliders to control RGB values using vanilla JavaScript with Konva.js. The image is first cached and then the filter is applied with customizable red, green, and blue component values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/RGB.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.RGB]);\n  image.red(100);\n  image.green(100);\n  image.blue(100);\n\n  // create sliders\n  const createSlider = (label, property) => {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '20px';\n    \n    const text = document.createElement('span');\n    text.textContent = `${label}: `;\n    container.appendChild(text);\n    \n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = '0';\n    slider.max = '255';\n    slider.step = '1';\n    slider.value = image[property]();\n    slider.style.width = '200px';\n    \n    slider.addEventListener('input', (e) => {\n      const value = parseInt(e.target.value);\n      image[property](value);\n    });\n    \n    container.appendChild(slider);\n    return container;\n  };\n\n  const redSlider = createSlider('Red', 'red');\n  redSlider.style.top = '20px';\n  document.body.appendChild(redSlider);\n\n  const greenSlider = createSlider('Green', 'green');\n  greenSlider.style.top = '45px';\n  document.body.appendChild(greenSlider);\n\n  const blueSlider = createSlider('Blue', 'blue');\n  blueSlider.style.top = '70px';\n  document.body.appendChild(blueSlider);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Group with Vue-Konva\nDESCRIPTION: This snippet shows how to create a draggable group with colored rectangles using Vue-Konva. It uses Vue 3 composition API and components from vue-konva to set up a stage, layer, and group. Mouse events are handled to change the cursor style.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/03_Drag_a_Group.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group\n        :config=\"groupConfig\"\n        @mouseenter=\"handleMouseOver\"\n        @mouseleave=\"handleMouseOut\"\n      >\n        <v-rect\n          v-for=\"(color, i) in colors\"\n          :key=\"color\"\n          :config=\"{\n            x: i * 30 + 10,\n            y: i * 18 + 40,\n            fill: color,\n            ...rectConfig\n          }\"\n        />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst groupConfig = {\n  draggable: true\n};\n\nconst rectConfig = {\n  width: 100,\n  height: 50,\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst textConfig = {\n  y: 50,\n  text: 'Draggable group',\n  fontSize: 16,\n  fontFamily: 'Calibri',\n  fill: 'black'\n};\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nconst handleMouseOver = () => {\n  document.body.style.cursor = 'move';\n};\n\nconst handleMouseOut = () => {\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Shape with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code initializes a Konva stage, creates a layer, and adds an ellipse shape to it. The ellipse is positioned at the center of the stage with radiusX of 100 and radiusY of 50, filled with yellow color and outlined with a black stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ellipse.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst ellipse = new Konva.Ellipse({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radiusX: 100,\n  radiusY: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(ellipse);\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Image with React Konva\nDESCRIPTION: This snippet shows how to implement a draggable image in HTML5 Canvas using React with react-konva. It uses the useImage hook to load a Yoda image and creates a draggable Image component with mouse event handlers for cursor styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/02_Drag_an_Image.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [yodaImage] = useImage('https://konvajs.org/assets/yoda.jpg');\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Image\n          x={50}\n          y={50}\n          image={yodaImage}\n          width={106}\n          height={118}\n          draggable\n          onMouseEnter={(e) => {\n            document.body.style.cursor = 'pointer';\n          }}\n          onMouseLeave={(e) => {\n            document.body.style.cursor = 'default';\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Labels with React-Konva\nDESCRIPTION: Shows how to implement the same three label types using React-Konva components. Uses declarative JSX syntax to create labels with Tag and Text components nested within Label components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Label.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Label x={170} y={75} opacity={0.75}>\n          <Tag\n            fill=\"black\"\n            pointerDirection=\"down\"\n            pointerWidth={10}\n            pointerHeight={10}\n            lineJoin=\"round\"\n            shadowColor=\"black\"\n            shadowBlur={10}\n            shadowOffsetX={10}\n            shadowOffsetY={10}\n            shadowOpacity={0.5}\n          />\n          <Text\n            text=\"Tooltip pointing down\"\n            fontFamily=\"Calibri\"\n            fontSize={18}\n            padding={5}\n            fill=\"white\"\n          />\n        </Label>\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Bunny Positions and Handling Collisions in JavaScript\nDESCRIPTION: Implements the main animation loop. It updates bunny positions, applies gravity, handles collisions with stage boundaries, and efficiently updates Konva nodes. It also adds new bunnies if the isAdding flag is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst update = () => {\n  // Add more bunnies if needed\n  if (isAdding.value) {\n    const newBunnies = Array(ADD_AMOUNT)\n      .fill(0)\n      .map(() => \n        createBunny(\n          Math.random() * stageConfig.width,\n          Math.random() * stageConfig.height\n        )\n      );\n    \n    // Update the reactive array only once for the new bunnies\n    bunnies.value.push(...newBunnies);\n    count.value += ADD_AMOUNT;\n  }\n  \n  // Update all bunnies - DIRECT NODE MANIPULATION FOR PERFORMANCE\n  // This avoids expensive Vue reactivity for position updates\n  bunnies.value.forEach((bunny, index) => {\n    // Update data model\n    bunny.x += bunny.speedX;\n    bunny.y += bunny.speedY;\n    bunny.speedY += GRAVITY;\n    \n    // Bounce off edges\n    if (bunny.x > stageConfig.width - bunnyImage.value.width) {\n      bunny.speedX *= -1;\n      bunny.x = stageConfig.width - bunnyImage.value.width;\n    } else if (bunny.x < 0) {\n      bunny.speedX *= -1;\n      bunny.x = 0;\n    }\n    \n    if (bunny.y > stageConfig.height - bunnyImage.value.height) {\n      bunny.speedY *= -0.85;\n      bunny.y = stageConfig.height - bunnyImage.value.height;\n      if (Math.random() > 0.5) {\n        bunny.speedY -= Math.random() * 6;\n      }\n    } else if (bunny.y < 0) {\n      bunny.speedY = 0;\n      bunny.y = 0;\n    }\n    \n    // Direct node update if we have a reference (much faster than Vue reactivity)\n    const node = bunnyNodesMap.value[index];\n    if (node) {\n      // Get the Konva node and update position directly\n      const konvaNode = node.getNode();\n      if (konvaNode) {\n        konvaNode.x(bunny.x);\n        konvaNode.y(bunny.y);\n      }\n    }\n  });\n  \n  // Batch draw the layer once instead of updating each node individually\n  if (layerRef.value) {\n    layerRef.value.getNode().batchDraw();\n  }\n  \n  animationFrameId.value = requestAnimationFrame(update);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shape with Vue-Konva\nDESCRIPTION: This Vue component demonstrates how to draw a custom shape using vue-konva's v-shape component. The shape is defined using canvas drawing commands within the sceneFunc property, which provides access to the canvas context. The example creates a complex shape with lines and a quadratic curve, then fills and strokes it using Konva's fillStrokeShape method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Custom_Shape.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage ref=\"stage\" :config=\"stageSize\">\n    <v-layer>\n      <v-shape :config=\"{\n        width: 260,\n        height: 170,\n        sceneFunc: function(context, shape) {\n          const width = shape.width();\n          const height = shape.height();\n          context.beginPath();\n          context.moveTo(0, 0);\n          context.lineTo(width - 40, height - 90);\n          context.quadraticCurveTo(width - 110, height - 70, width, height);\n          context.closePath();\n\n          // (!) Konva specific method, it is very important\n          context.fillStrokeShape(shape);\n        },\n        fill: '#00D2FF',\n        stroke: 'black',\n        strokeWidth: 4\n      }\"/>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: width,\n        height: height\n      }\n    };\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Configuration in KonvaJS\nDESCRIPTION: Shows how to configure radial gradients including start radius, end radius, and color stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu with React and Konva.js\nDESCRIPTION: Creates an interactive canvas with circle shapes and custom context menu using React and Konva.js. Implements state management for shapes and menu visibility, with features for creating, pulsing, and deleting shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Context_Menu.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst App = () => {\n  const [circles, setCircles] = useState([\n    {\n      id: 'initial-circle',\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      radius: 50,\n      fill: 'red',\n      shadowBlur: 10\n    }\n  ]);\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });\n  const [showMenu, setShowMenu] = useState(false);\n  const [selectedId, setSelectedId] = useState(null);\n  const stageRef = useRef(null);\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  useEffect(() => {\n    const handleWindowClick = () => {\n      setShowMenu(false);\n    };\n    window.addEventListener('click', handleWindowClick);\n    \n    return () => {\n      window.removeEventListener('click', handleWindowClick);\n    };\n  }, []);\n\n  const handleDblClick = (e) => {\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    const newCircle = {\n      id: Date.now().toString(),\n      x: pointerPosition.x,\n      y: pointerPosition.y,\n      radius: 10 + Math.random() * 30,\n      fill: getRandomColor(),\n      shadowBlur: 10\n    };\n    setCircles([...circles, newCircle]);\n  };\n\n  const handleContextMenu = (e) => {\n    e.evt.preventDefault();\n    if (e.target === e.target.getStage()) {\n      return;\n    }\n    \n    const stage = e.target.getStage();\n    const containerRect = stage.container().getBoundingClientRect();\n    const pointerPosition = stage.getPointerPosition();\n    \n    setMenuPosition({\n      x: containerRect.left + pointerPosition.x + 4,\n      y: containerRect.top + pointerPosition.y + 4\n    });\n    \n    setShowMenu(true);\n    setSelectedId(e.target.id());\n    e.cancelBubble = true;\n  };\n\n  const handlePulse = () => {\n    const newCircles = circles.map(circle => {\n      if (circle.id === selectedId) {\n        return {\n          ...circle,\n          scaleX: 2,\n          scaleY: 2,\n          animation: 'pulse'\n        };\n      }\n      return circle;\n    });\n    setCircles(newCircles);\n    \n    setTimeout(() => {\n      const resetCircles = circles.map(circle => {\n        if (circle.id === selectedId) {\n          return {\n            ...circle,\n            scaleX: 1,\n            scaleY: 1,\n            animation: null\n          };\n        }\n        return circle;\n      });\n      setCircles(resetCircles);\n    }, 300);\n  };\n\n  const handleDelete = () => {\n    const newCircles = circles.filter(circle => circle.id !== selectedId);\n    setCircles(newCircles);\n    setShowMenu(false);\n  };\n\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <Stage\n        width={width}\n        height={height}\n        onDblClick={handleDblClick}\n        onContextMenu={handleContextMenu}\n        ref={stageRef}\n      >\n        <Layer>\n          {circles.map((circle) => (\n            <Circle\n              key={circle.id}\n              id={circle.id}\n              x={circle.x}\n              y={circle.y}\n              radius={circle.radius}\n              fill={circle.fill}\n              shadowBlur={circle.shadowBlur}\n              scaleX={circle.scaleX || 1}\n              scaleY={circle.scaleY || 1}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      \n      {showMenu && (\n        <div\n          style={{\n            position: 'absolute',\n            top: menuPosition.y,\n            left: menuPosition.x,\n            width: '60px',\n            backgroundColor: 'white',\n            boxShadow: '0 0 5px grey',\n            borderRadius: '3px',\n            zIndex: 10\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <button\n            style={{\n              width: '100%',\n              backgroundColor: 'white',\n              border: 'none',\n              margin: 0,\n              padding: '10px',\n              cursor: 'pointer'\n            }}\n            onMouseOver={(e) => e.target.style.backgroundColor = 'lightgray'}\n            onMouseOut={(e) => e.target.style.backgroundColor = 'white'}\n            onClick={handlePulse}\n          >\n            Pulse\n          </button>\n          <button\n            style={{\n              width: '100%',\n              backgroundColor: 'white',\n              border: 'none',\n              margin: 0,\n              padding: '10px',\n              cursor: 'pointer'\n            }}\n            onMouseOver={(e) => e.target.style.backgroundColor = 'lightgray'}\n            onMouseOut={(e) => e.target.style.backgroundColor = 'white'}\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Vue.js Implementation of Drag Constraints with Konva\nDESCRIPTION: A Vue.js implementation of horizontal and vertical drag constraints using vue-konva components. The implementation defines configuration objects for stage and text elements, along with handler functions to constrain movement during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/07_Simple_Drag_Bounds.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"horizontalTextConfig\"\n        @dragmove=\"handleHorizontalDragMove\"\n      />\n      <v-text\n        :config=\"verticalTextConfig\"\n        @dragmove=\"handleVerticalDragMove\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst horizontalTextConfig = {\n  x: 50,\n  y: 50,\n  text: 'Drag me horizontally',\n  fontSize: 16,\n  draggable: true,\n  fill: 'black'\n};\n\nconst verticalTextConfig = {\n  x: 200,\n  y: 50,\n  text: 'Drag me vertically',\n  fontSize: 16,\n  draggable: true,\n  fill: 'black'\n};\n\nconst handleHorizontalDragMove = (e) => {\n  e.target.y(50);\n};\n\nconst handleVerticalDragMove = (e) => {\n  e.target.x(200);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop with Vue in Konva.js\nDESCRIPTION: This Vue component implements a draggable red circle using vue-konva. It defines the stage configuration and circle properties, and implements cursor styling handlers for mouse enter and leave events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/01_Drag_and_Drop.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle\n        :config=\"circleConfig\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n};\n\nconst handleMouseEnter = () => {\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseLeave = () => {\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Layering with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates how to create draggable shapes and layer them using vue-konva in a Vue.js application. It uses a reactive reference to control the order of the shapes and provides methods to move the yellow box to the top or bottom.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Layering.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"moveYellowToTop\">Move yellow box to top</button>\n    <button @click=\"moveYellowToBottom\">Move yellow box to bottom</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <template v-if=\"!yellowOnTop\">\n          <v-rect :config=\"redBoxConfig\" />\n        </template>\n        <v-rect :config=\"yellowBoxConfig\" />\n        <template v-if=\"yellowOnTop\">\n          <v-rect :config=\"redBoxConfig\" />\n        </template>\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst yellowOnTop = ref(false);\n\nconst yellowBoxConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n};\n\nconst redBoxConfig = {\n  x: 100,\n  y: 100,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n};\n\nconst moveYellowToTop = () => {\n  yellowOnTop.value = true;\n};\n\nconst moveYellowToBottom = () => {\n  yellowOnTop.value = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Y Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the Y coordinate position of a fill pattern. This controls the vertical positioning of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stroke Color and Width Changes in React with react-konva\nDESCRIPTION: This React component uses react-konva to create an interactive pentagon. It uses useState hooks to manage the stroke color, width, and cursor style. The stroke properties change on mouse enter and leave events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/02-Stroke.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\n\nconst App = () => {\n  const [stroke, setStroke] = useState('black');\n  const [strokeWidth, setStrokeWidth] = useState(4);\n  const [cursor, setCursor] = useState('default');\n\n  const handleMouseEnter = () => {\n    setStroke('blue');\n    setStrokeWidth(20);\n    setCursor('pointer');\n  };\n\n  const handleMouseLeave = () => {\n    setStroke('black');\n    setStrokeWidth(4);\n    setCursor('default');\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight} style={{ cursor: cursor }}>\n      <Layer>\n        <RegularPolygon\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          sides={5}\n          radius={70}\n          fill=\"red\"\n          stroke={stroke}\n          strokeWidth={strokeWidth}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Invert Filter to Image using Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to load an image, create a Konva.Image, and apply an invert filter using Konva.Filters.Invert. It sets up a stage, layer, and handles image loading asynchronously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Invert.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Invert]);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers for Draggable Elements in Vue.js and Konva\nDESCRIPTION: This snippet defines various event handlers for draggable elements in a Vue.js component using Konva.js. It includes functions for drag start, drag end, mouse over, mouse out, and drag move events, managing cursor styles and image changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst handleDragStart = (e) => {\n  isDraggable.value = true;\n  e.target.image(imageList.value[0]);\n};\n\nconst handleDragEnd = (e) => {\n  isDraggable.value = false;\n  const pos = e.target.absolutePosition();\n  if (\n    pos.x > outline.value.x - 20 &&\n    pos.x < outline.value.x + 20 &&\n    pos.y > outline.value.y - 20 &&\n    pos.y < outline.value.y + 20\n  ) {\n    e.target.position({\n      x: outline.value.x,\n      y: outline.value.y\n    });\n    isDraggable.value = false;\n    emit('score');\n  }\n};\n\nconst handleMouseOver = (e) => {\n  e.target.image(glowImage.value);\n  const stage = e.target.getStage();\n  stage.container().style.cursor = 'pointer';\n};\n\nconst handleMouseOut = (e) => {\n  e.target.image(image.value);\n  const stage = e.target.getStage();\n  stage.container().style.cursor = 'default';\n};\n\nconst handleDragMove = (e) => {\n  const stage = e.target.getStage();\n  stage.container().style.cursor = 'pointer';\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Ring Shape with Konva.js in Vue\nDESCRIPTION: This snippet demonstrates how to create a ring shape using Konva.js in a Vue.js application. It uses Vue 3's composition API to define the stage size and ring configuration, and renders the ring using v-stage, v-layer, and v-ring components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ring.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-ring :config=\"ringConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst ringConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with Konva.js in Vue.js\nDESCRIPTION: This Vue.js component creates a Konva stage with text nodes, each assigned a different easing function. It uses ref and onMounted to manage tweens and text references, and includes a button to trigger the animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Easings.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handlePlay\">Play</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-text\n          v-for=\"(easing, i) in easings\"\n          :key=\"i\"\n          :config=\"getTextConfig(easing, i)\"\n          :ref=\"el => textRefs[i] = el\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst easings = [\n  'Linear',\n  'EaseIn',\n  'EaseOut',\n  'EaseInOut',\n  'BackEaseIn',\n  'BackEaseOut',\n  'BackEaseInOut',\n  'ElasticEaseIn',\n  'ElasticEaseOut',\n  'ElasticEaseInOut',\n  'BounceEaseIn',\n  'BounceEaseOut',\n  'BounceEaseInOut',\n  'StrongEaseIn',\n  'StrongEaseOut',\n  'StrongEaseInOut',\n];\n\nconst textRefs = ref([]);\nlet tweens = [];\n\nconst getTextConfig = (easing, i) => ({\n  x: 50,\n  y: 30 + i * 25,\n  text: easing,\n  fontSize: 16,\n  fontFamily: 'Calibri',\n  fill: 'black'\n});\n\nonMounted(() => {\n  tweens = textRefs.value.map((ref, i) => {\n    return new Konva.Tween({\n      node: ref.getNode(),\n      duration: 2,\n      x: window.innerWidth - 200,\n      easing: Konva.Easings[easings[i]]\n    });\n  });\n});\n\nconst handlePlay = () => {\n  tweens.forEach(tween => {\n    tween.reset();\n    tween.play();\n  });\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Dash in Konva.js\nDESCRIPTION: Shows how to get the current dash enabled state and how to enable or disable dashed lines on a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Animation with Konva in React\nDESCRIPTION: This snippet shows how to create a circular animation using Konva in a React component. It uses the useEffect hook to set up and manage the animation, moving a rectangle in a circular pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Create_an_Animation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const rectRef = useRef(null);\n\n  useEffect(() => {\n    const anim = new Konva.Animation((frame) => {\n      const time = frame.time;\n      const timeDiff = frame.timeDiff;\n      const frameRate = frame.frameRate;\n\n      // Example: move rectangle in a circle\n      const radius = 50;\n      const x = radius * Math.cos(frame.time * 2 * Math.PI / 2000) + 100;\n      const y = radius * Math.sin(frame.time * 2 * Math.PI / 2000) + 100;\n      rectRef.current.position({ x, y });\n    }, rectRef.current.getLayer());\n\n    anim.start();\n\n    return () => {\n      anim.stop();\n    };\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          ref={rectRef}\n          x={50}\n          y={50}\n          width={50}\n          height={50}\n          fill=\"green\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Text Elements with Vue-Konva\nDESCRIPTION: This code demonstrates how to implement Konva text elements in a Vue.js application. It shows the configuration object approach using v-stage, v-layer, v-rect, and v-text components with separate config objects for each element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Text.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect :config=\"rectConfig\" />\n      <v-text :config=\"simpleTextConfig\" />\n      <v-text :config=\"complexTextConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst simpleTextConfig = {\n  x: window.innerWidth / 2,\n  y: 15,\n  text: 'Simple Text',\n  fontSize: 30,\n  fontFamily: 'Calibri',\n  fill: 'green',\n  offsetX: 60 // Approximate half width\n};\n\nconst complexTextConfig = {\n  x: 20,\n  y: 60,\n  text: \"COMPLEX TEXT\\n\\nAll the world's a stage, and all the men and women merely players. They have their exits and their entrances.\",\n  fontSize: 18,\n  fontFamily: 'Calibri',\n  fill: '#555',\n  width: 300,\n  padding: 20,\n  align: 'center'\n};\n\nconst rectConfig = {\n  x: 20,\n  y: 60,\n  stroke: '#555',\n  strokeWidth: 5,\n  fill: '#ddd',\n  width: 300,\n  height: 200, // Approximate height\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffsetX: 10,\n  shadowOffsetY: 10,\n  shadowOpacity: 0.2,\n  cornerRadius: 10\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Stage as High Quality Image in Vue\nDESCRIPTION: This Vue component creates a Konva stage with a circle and text, and provides a button to export the stage as a high-quality image. It uses the ref attribute to access the stage and the toDataURL() method with increased pixelRatio.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/High-Quality-Export.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handleExport\" style=\"margin-bottom: 10px\">\n      Save as High Quality Image\n    </button>\n    <v-stage ref=\"stageRef\" :config=\"stageSize\">\n      <v-layer>\n        <v-circle :config=\"circleConfig\" />\n        <v-text :config=\"textConfig\" />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: 400,\n  height: 400\n};\n\nconst circleConfig = {\n  x: 200,\n  y: 200,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst textConfig = {\n  x: 150,\n  y: 190,\n  text: 'High Quality Export',\n  fontSize: 20,\n  fill: 'white'\n};\n\nconst stageRef = ref(null);\n\nconst handleExport = () => {\n  const dataURL = stageRef.value.getNode().toDataURL({\n    pixelRatio: 2 // double resolution\n  });\n  \n  const link = document.createElement('a');\n  link.download = 'stage.png';\n  link.href = dataURL;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Stroke in KonvaJS\nDESCRIPTION: Method to get or set whether a shape's stroke is enabled. This allows toggling the stroke visibility without changing the stroke properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Stage with React-Konva\nDESCRIPTION: Creates a draggable canvas stage using React-Konva components. Implements the same functionality as the vanilla version but using React components and JSX syntax.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/05_Drag_a_Stage.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      draggable\n    >\n      <Layer>\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        <Text\n          x={10}\n          y={10}\n          text=\"Drag the stage anywhere\"\n          fontSize={20}\n          fontFamily=\"Calibri\"\n          fill=\"black\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Shape Colors on Click with Vue-Konva\nDESCRIPTION: Implementation of color-changing shapes using Vue 3 and vue-konva. This example uses Vue's reactive refs to manage shape colors and implements click handlers that toggle colors when shapes are clicked, demonstrating Vue's declarative approach to state management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Shape_Color_on_Click.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: 80,\n          y: 120,\n          sides: 3,\n          radius: 50,\n          fill: triangleColor,\n          stroke: 'black',\n          strokeWidth: 4,\n        }\"\n        @click=\"handleTriangleClick\"\n      />\n      <v-circle\n        :config=\"{\n          x: 180,\n          y: 120,\n          radius: 50,\n          fill: circleColor,\n          stroke: 'black',\n          strokeWidth: 4,\n        }\"\n        @click=\"handleCircleClick\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst triangleColor = ref('#00D2FF');\nconst circleColor = ref('red');\n\nconst handleTriangleClick = () => {\n  triangleColor.value = triangleColor.value === 'yellow' ? '#00D2FF' : 'yellow';\n};\n\nconst handleCircleClick = () => {\n  circleColor.value = circleColor.value === 'red' ? '#00d00f' : 'red';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Shadow in KonvaJS\nDESCRIPTION: Method to get or set whether a shape's shadow is enabled. This allows toggling the shadow visibility without changing the shadow properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tooltips with Vanilla KonvaJS\nDESCRIPTION: Creates interactive tooltips for canvas shapes using vanilla KonvaJS. Demonstrates layer management, custom shape creation using sceneFunc, and mouse event handling for tooltip positioning and visibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tooltips.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst shapesLayer = new Konva.Layer();\nconst tooltipLayer = new Konva.Layer();\n\n// Create custom triangle shape\nconst triangle = new Konva.Shape({\n  stroke: 'black',\n  fill: '#00D2FF',\n  strokeWidth: 1,\n  sceneFunc: function (context) {\n    context.beginPath();\n    context.moveTo(120, 50);\n    context.lineTo(250, 80);\n    context.lineTo(150, 170);\n    context.closePath();\n    context.fillStrokeShape(this);\n  },\n});\n\n// Create circle\nconst circle = new Konva.Circle({\n  x: 250,\n  y: stage.height() / 2,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  radius: 70,\n});\n\n// Create tooltip\nconst tooltip = new Konva.Text({\n  text: '',\n  fontFamily: 'Calibri',\n  fontSize: 12,\n  padding: 5,\n  textFill: 'white',\n  fill: 'black',\n  alpha: 0.75,\n  visible: false,\n});\n\n// Add event listeners for triangle\ntriangle.on('mousemove', () => {\n  const mousePos = stage.getPointerPosition();\n  tooltip.position({\n    x: mousePos.x + 5,\n    y: mousePos.y + 5,\n  });\n  tooltip.text('Cyan Triangle');\n  tooltip.show();\n});\n\ntriangle.on('mouseout', () => {\n  tooltip.hide();\n});\n\n// Add event listeners for circle\ncircle.on('mousemove', () => {\n  const mousePos = stage.getPointerPosition();\n  tooltip.position({\n    x: mousePos.x + 5,\n    y: mousePos.y + 5,\n  });\n  tooltip.text('Red Circle');\n  tooltip.show();\n});\n\ncircle.on('mouseout', () => {\n  tooltip.hide();\n});\n\n// Add shapes and tooltip to layers\nshapesLayer.add(triangle);\nshapesLayer.add(circle);\ntooltipLayer.add(tooltip);\n\n// Add layers to stage\nstage.add(shapesLayer);\nstage.add(tooltipLayer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Drawing with Vue and Konva\nDESCRIPTION: This Vue.js implementation creates a free drawing application using Vue Konva components. It leverages Vue's reactive system to maintain the drawing state, providing both brush and eraser tools. The code handles both mouse and touch events to support drawing on various devices.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Free_Drawing.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <select v-model=\"tool\">\n      <option value=\"brush\">Brush</option>\n      <option value=\"eraser\">Eraser</option>\n    </select>\n    <v-stage\n      :config=\"stageConfig\"\n      @mousedown=\"handleMouseDown\"\n      @mousemove=\"handleMouseMove\"\n      @mouseup=\"handleMouseUp\"\n      @touchstart=\"handleMouseDown\"\n      @touchmove=\"handleMouseMove\"\n      @touchend=\"handleMouseUp\"\n    >\n      <v-layer>\n        <v-line\n          v-for=\"(line, i) in lines\"\n          :key=\"i\"\n          :config=\"{\n            points: line.points,\n            stroke: '#df4b26',\n            strokeWidth: 5,\n            tension: 0.5,\n            lineCap: 'round',\n            lineJoin: 'round',\n            globalCompositeOperation:\n              line.tool === 'eraser' ? 'destination-out' : 'source-over'\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst tool = ref('brush');\nconst lines = ref([]);\nconst isDrawing = ref(false);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight - 25\n};\n\nconst handleMouseDown = (e) => {\n  isDrawing.value = true;\n  const pos = e.target.getStage().getPointerPosition();\n  lines.value.push({ tool: tool.value, points: [pos.x, pos.y] });\n};\n\nconst handleMouseMove = (e) => {\n  if (!isDrawing.value) {\n    return;\n  }\n  const stage = e.target.getStage();\n  const point = stage.getPointerPosition();\n  \n  let lastLine = lines.value[lines.value.length - 1];\n  lastLine.points = lastLine.points.concat([point.x, point.y]);\n  lines.value.splice(lines.value.length - 1, 1, { ...lastLine });\n};\n\nconst handleMouseUp = () => {\n  isDrawing.value = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll by Edge Drag with React in Konva.js\nDESCRIPTION: This snippet shows how to implement the auto-scroll feature in a React application using react-konva. It manages state for stage position and nodes, and uses React refs and useCallback to handle the scrolling functionality when dragging objects to the edge.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scroll_By_Edge_Drag.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst NUMBER = 100;\n\nconst generateNodes = (width, height) => {\n  return Array.from({ length: NUMBER }, () => ({\n    x: width * (Math.random() * 2 - 1),\n    y: height * (Math.random() * 2 - 1),\n  }));\n};\n\nconst App = () => {\n  const [stagePos, setStagePos] = React.useState({ x: 0, y: 0 });\n  const [nodes, setNodes] = React.useState([]);\n  const scrollInterval = React.useRef(null);\n  const stageRef = React.useRef(null);\n  const draggedNodeRef = React.useRef(null);\n\n  React.useEffect(() => {\n    setNodes(generateNodes(window.innerWidth, window.innerHeight));\n  }, []);\n\n  const handleDragStart = React.useCallback((e) => {\n    draggedNodeRef.current = e.target;\n    const duration = 1000 / 60;\n    scrollInterval.current = setInterval(() => {\n      const stage = stageRef.current;\n      if (!stage) return;\n\n      const pos = stage.getPointerPosition();\n      if (!pos) return;\n\n      const offset = 100;\n      let newX = stagePos.x;\n      let newY = stagePos.y;\n      let moved = false;\n\n      if (pos.x < offset) {\n        newX += 2;\n        draggedNodeRef.current.x(draggedNodeRef.current.x() - 2);\n        moved = true;\n      } else if (pos.x > stage.width() - offset) {\n        newX -= 2;\n        draggedNodeRef.current.x(draggedNodeRef.current.x() + 2);\n        moved = true;\n      }\n\n      if (pos.y < offset) {\n        newY += 2;\n        draggedNodeRef.current.y(draggedNodeRef.current.y() - 2);\n        moved = true;\n      } else if (pos.y > stage.height() - offset) {\n        newY -= 2;\n        draggedNodeRef.current.y(draggedNodeRef.current.y() + 2);\n        moved = true;\n      }\n\n      if (moved) {\n        setStagePos({ x: stage.x() + newX, y: stage.y() + newY });\n      }\n    }, duration);\n  }, [stagePos]);\n\n  const handleDragEnd = React.useCallback(() => {\n    draggedNodeRef.current = null;\n    if (scrollInterval.current) {\n      clearInterval(scrollInterval.current);\n      scrollInterval.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => {\n      if (scrollInterval.current) {\n        clearInterval(scrollInterval.current);\n      }\n    };\n  }, []);\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      x={stagePos.x}\n      y={stagePos.y}\n      ref={stageRef}\n    >\n      <Layer>\n        {nodes.map((node, i) => (\n          <Circle\n            key={i}\n            x={node.x}\n            y={node.y}\n            radius={40}\n            fill=\"red\"\n            stroke=\"black\"\n            draggable\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Blur Filter in React with react-konva\nDESCRIPTION: This snippet shows how to implement a blur filter on an image using react-konva. It uses useState for managing the blur radius, useImage for loading the image, and useRef with useEffect to cache the image after loading. A slider control allows adjusting the blur radius.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Blur.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [blurRadius, setBlurRadius] = useState(10);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Blur]}\n            blurRadius={blurRadius}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"40\"\n        value={blurRadius}\n        onChange={(e) => setBlurRadius(parseInt(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Rectangles with Vanilla Konva.js\nDESCRIPTION: This code creates 300 rectangles with random properties and animates them by rotating each rectangle. Performance is optimized by setting the layer's 'listening' property to false. The animation uses Konva.Animation to update rotation angles of all shapes based on the elapsed time.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animation_Stress_Test.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nfunction update(layer, frame) {\n  const angularSpeed = 100;\n  const angularDiff = (angularSpeed * frame.timeDiff) / 1000;\n  const shapes = layer.getChildren();\n\n  for (let n = 0; n < shapes.length; n++) {\n    const shape = shapes[n];\n    shape.rotate(angularDiff);\n  }\n}\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n/*\n * setting the listening property to false will improve\n * drawing performance because the rectangles won't have to be\n * drawn onto the hit graph\n */\nconst layer = new Konva.Layer({\n  listening: false,\n});\n\nconst colors = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'cyan',\n  'purple',\n];\nlet colorIndex = 0;\n\nfor (let i = 0; i < 300; i++) {\n  const color = colors[colorIndex++];\n  if (colorIndex >= colors.length) {\n    colorIndex = 0;\n  }\n\n  const randWidth = Math.random() * 100 + 20;\n  const randHeight = Math.random() * 100 + 20;\n  const randX = Math.random() * stage.width() - 20;\n  const randY = Math.random() * stage.height() - 20;\n\n  const box = new Konva.Rect({\n    x: randX,\n    y: randY,\n    offset: {\n      x: randWidth / 2,\n      y: randHeight / 2,\n    },\n    width: randWidth,\n    height: randHeight,\n    fill: color,\n    stroke: 'black',\n    strokeWidth: 4,\n  });\n\n  layer.add(box);\n}\n\nstage.add(layer);\n\nconst anim = new Konva.Animation(function (frame) {\n  update(layer, frame);\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fill and Stroke Order in React Konva\nDESCRIPTION: React implementation showing two Text components with different fill and stroke rendering orders. Uses React-Konva components to create the same visual effect as the vanilla example.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/09-Fill_Stroke_Order.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          text=\"Default shape rendering.\\nfillAfterStrokeEnabled = false\"\n          x={50}\n          y={50}\n          fontSize={40}\n          stroke=\"green\"\n          fill=\"yellow\"\n          strokeWidth={3}\n        />\n        <Text\n          text=\"Reversed rendering order.\\nfillAfterStrokeEnabled = true\"\n          x={50}\n          y={150}\n          fontSize={40}\n          stroke=\"green\"\n          fill=\"yellow\"\n          strokeWidth={3}\n          fillAfterStrokeEnabled={true}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Enhance Filter to Image with Konva.js in React\nDESCRIPTION: This snippet shows how to apply an enhance filter to an image using Konva.js in a React component. It uses the react-konva library and hooks to create a stage, add an image, apply the enhance filter, and use a slider to control the enhance value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Enhance.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [enhance, setEnhance] = useState(0.4);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Enhance]}\n            enhance={enhance}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"-1\"\n        max=\"1\"\n        step=\"0.1\"\n        value={enhance}\n        onChange={(e) => setEnhance(parseFloat(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Sepia Filter in Vue.js with vue-konva\nDESCRIPTION: This code demonstrates how to apply a Sepia filter to an image in a Vue.js application using vue-konva. It uses the useImage composition function to load the image, and watches for the image to load before applying caching with nextTick to ensure the DOM has updated.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Sepia.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"image\"\n        ref=\"imageNode\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: image,\n          draggable: true,\n          filters: [Konva.Filters.Sepia],\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Curve Anchors with Vanilla KonvaJS\nDESCRIPTION: Creates interactive quadratic and Bezier curves with draggable anchor points using vanilla KonvaJS. Includes hover effects, control point visualization, and dynamic curve updates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\n// Create stage and layer\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Function to build anchor point\nfunction buildAnchor(x, y) {\n  const anchor = new Konva.Circle({\n    x: x,\n    y: y,\n    radius: 20,\n    stroke: '#666',\n    fill: '#ddd',\n    strokeWidth: 2,\n    draggable: true,\n  });\n  layer.add(anchor);\n\n  // Add hover styling\n  anchor.on('mouseover', function () {\n    document.body.style.cursor = 'pointer';\n    this.strokeWidth(4);\n  });\n  \n  anchor.on('mouseout', function () {\n    document.body.style.cursor = 'default';\n    this.strokeWidth(2);\n  });\n\n  // Update curves when anchor is moved\n  anchor.on('dragmove', function () {\n    updateDottedLines();\n  });\n\n  return anchor;\n}\n\n// [... rest of the vanilla implementation ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Brighten Filter for Image using Vue-Konva\nDESCRIPTION: This Vue.js component uses vue-konva to create a stage with an image that has a brighten filter applied. It includes a slider input for adjusting the brightness dynamically. The component uses the Composition API with setup script, ref, watch, and nextTick for reactivity and DOM updates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Brighten.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Brighten],\n            brightness: brightness,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"-1\"\n      max=\"1\"\n      step=\"0.1\"\n      :value=\"brightness\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst brightness = ref(0.3);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  brightness.value = parseFloat(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Expanding Images on Hover with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create expandable and draggable images using Konva.js with vanilla JavaScript. It sets up a stage, adds two images, and implements hover effects to scale the images up and down.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Expand_Images_on_Hover.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create Darth Vader image\nconst darthVaderImg = new Konva.Image({\n  x: 110,\n  y: 88,\n  width: 200,\n  height: 137,\n  offset: {\n    x: 100,\n    y: 68,\n  },\n  draggable: true,\n});\nlayer.add(darthVaderImg);\n\n// Create Yoda image\nconst yodaImg = new Konva.Image({\n  x: 290,\n  y: 70,\n  width: 93,\n  height: 104,\n  offset: {\n    x: 46,\n    y: 52,\n  },\n  draggable: true,\n});\nlayer.add(yodaImg);\n\n// Load Darth Vader image\nconst imageObj1 = new Image();\nimageObj1.onload = function () {\n  darthVaderImg.image(imageObj1);\n};\nimageObj1.src = 'https://konvajs.org/assets/darth-vader.jpg';\n\n// Load Yoda image\nconst imageObj2 = new Image();\nimageObj2.onload = function () {\n  yodaImg.image(imageObj2);\n};\nimageObj2.src = 'https://konvajs.org/assets/yoda.jpg';\n\n// Use event delegation to update pointer style and apply scaling\nlayer.on('mouseover', function (evt) {\n  const shape = evt.target;\n  document.body.style.cursor = 'pointer';\n  \n  // Scale up the image on hover\n  shape.to({\n    scaleX: 1.2,\n    scaleY: 1.2,\n    duration: 0.2,\n  });\n});\n\nlayer.on('mouseout', function (evt) {\n  const shape = evt.target;\n  document.body.style.cursor = 'default';\n  \n  // Scale back to normal when mouse leaves\n  shape.to({\n    scaleX: 1,\n    scaleY: 1,\n    duration: 0.2,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer-Relative Zooming with React Konva\nDESCRIPTION: This React implementation uses the react-konva library to create a stage with a circle and implement zooming relative to pointer position. It leverages useRef to access the stage node and handles wheel events to calculate scale and position adjustments based on cursor location.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zooming_Relative_To_Pointer.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const stageRef = useRef(null);\n\n  const handleWheel = (e) => {\n    e.evt.preventDefault();\n\n    const stage = stageRef.current;\n    const oldScale = stage.scaleX();\n    const pointer = stage.getPointerPosition();\n\n    const mousePointTo = {\n      x: (pointer.x - stage.x()) / oldScale,\n      y: (pointer.y - stage.y()) / oldScale,\n    };\n\n    // how to scale? Zoom in? Or zoom out?\n    let direction = e.evt.deltaY > 0 ? 1 : -1;\n\n    // when we zoom on trackpad, e.evt.ctrlKey is true\n    // in that case lets revert direction\n    if (e.evt.ctrlKey) {\n      direction = -direction;\n    }\n\n    const scaleBy = 1.01;\n    const newScale = direction > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n    stage.scale({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n    stage.position(newPos);\n  };\n\n  return (\n    <Stage\n      width={width}\n      height={height}\n      ref={stageRef}\n      onWheel={handleWheel}\n    >\n      <Layer>\n        <Circle\n          x={width / 2}\n          y={height / 2}\n          radius={50}\n          fill=\"green\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tween Controls with React in Konva.js\nDESCRIPTION: This code shows how to implement tween animation controls in a React component using react-konva. It uses useRef to manage the circle and tween references, and creates control buttons that manipulate the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const circleRef = useRef();\n  const tweenRef = useRef();\n\n  useEffect(() => {\n    if (!circleRef.current) return;\n\n    tweenRef.current = new Konva.Tween({\n      node: circleRef.current,\n      duration: 2,\n      x: window.innerWidth - 100,\n      easing: Konva.Easings.EaseInOut,\n    });\n  }, []);\n\n  const controls = ['play', 'pause', 'reverse', 'reset', 'finish'];\n\n  return (\n    <>\n      {controls.map(control => (\n        <button\n          key={control}\n          onClick={() => tweenRef.current[control]()}\n        >\n          {control}\n        </button>\n      ))}\n      <button onClick={() => tweenRef.current.seek(1)}>\n        Seek to 50%\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Circle\n            ref={circleRef}\n            x={100}\n            y={window.innerHeight / 2}\n            radius={70}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Rotation Snaps with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates a draggable rectangle with rotation snap points using vanilla JavaScript and Konva.js. The shape snaps to 0, 90, 180, and 270 degrees with a tolerance of 30 degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Rotation_Snaps.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 50,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\nrotationSnaps: [0, 90, 180, 270],\nrotationSnapTolerance: 30,\n});\nlayer.add(tr);\n```\n\n----------------------------------------\n\nTITLE: Creating Lines with Konva in React\nDESCRIPTION: This snippet shows how to implement lines using the react-konva library, which provides React components for Konva. It demonstrates the declarative approach to create the same three styled lines as in the vanilla version: a solid red line, a dashed green line, and a custom-dashed blue line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Simple_Line.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          points={[5, 70, 140, 23, 250, 60, 300, 20]}\n          stroke=\"red\"\n          strokeWidth={15}\n          lineCap=\"round\"\n          lineJoin=\"round\"\n          y={5}\n        />\n        <Line\n          points={[5, 70, 140, 23, 250, 60, 300, 20]}\n          stroke=\"green\"\n          strokeWidth={2}\n          lineJoin=\"round\"\n          dash={[33, 10]}\n          y={55}\n        />\n        <Line\n          points={[5, 70, 140, 23, 250, 60, 300, 20]}\n          stroke=\"blue\"\n          strokeWidth={10}\n          lineCap=\"round\"\n          lineJoin=\"round\"\n          dash={[29, 20, 0.001, 20]}\n          y={105}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of HSV Filter with vue-konva\nDESCRIPTION: This Vue component demonstrates how to apply an HSV filter to an image using vue-konva. It uses reactive references to manage filter parameters and the useImage composable to load the image. A watcher ensures the image is cached after it's loaded.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSV.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.HSV],\n            hue: hue,\n            saturation: saturation,\n            value: value,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div style=\"position: absolute; top: 20px; left: 20px\">\n      <div>\n        Hue\n        <input\n          type=\"range\"\n          min=\"-259\"\n          max=\"259\"\n          :value=\"hue\"\n          @input=\"(e) => hue = parseInt(e.target.value)\"\n        />\n      </div>\n      <div>\n        Saturation\n        <input\n          type=\"range\"\n          min=\"-2\"\n          max=\"10\"\n          step=\"0.1\"\n          :value=\"saturation\"\n          @input=\"(e) => saturation = parseFloat(e.target.value)\"\n        />\n      </div>\n      <div>\n        Value\n        <input\n          type=\"range\"\n          min=\"-2\"\n          max=\"2\"\n          step=\"0.1\"\n          :value=\"value\"\n          @input=\"(e) => value = parseFloat(e.target.value)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst hue = ref(0);\nconst saturation = ref(0);\nconst value = ref(0);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Animations with React and Konva\nDESCRIPTION: This example demonstrates how to create a draggable rectangle that animates its size when dragged. It uses the node.to() method from Konva to animate scale changes, and React's ref API to access the Konva node instance directly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Simple_Animations.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nclass MyRect extends React.Component {\n  changeSize = () => {\n    // to() is a method of `Konva.Node` instances\n    this.rect.to({\n      scaleX: Math.random() + 0.8,\n      scaleY: Math.random() + 0.8,\n      duration: 0.2,\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        ref={(node) => {\n          this.rect = node;\n        }}\n        width={50}\n        height={50}\n        fill=\"green\"\n        draggable\n        onDragEnd={this.changeSize}\n        onDragStart={this.changeSize}\n      />\n    );\n  }\n}\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <MyRect />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Opacity with Vanilla JavaScript in Konva.js\nDESCRIPTION: This example demonstrates how to create a pentagon shape with Konva.js and dynamically change its opacity on mouse interactions. The shape starts with 0.5 opacity and changes to 1.0 when the mouse hovers over it, then back to 0.5 when the mouse leaves.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/03-Opacity.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n    container: 'container',\n    width: width,\n    height: height,\n});\nvar layer = new Konva.Layer();\n\nvar pentagon = new Konva.RegularPolygon({\n    x: stage.width() / 2,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fill: 'red',\n    stroke: 'black',\n    strokeWidth: 4,\n    opacity: 0.5,\n});\n\npentagon.on('mouseover', function () {\n    this.opacity(1);\n});\n\npentagon.on('mouseout', function () {\n    this.opacity(0.5);\n});\n\n// add the shape to the layer\nlayer.add(pentagon);\n\n// add the layer to the stage\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity in Konva.js\nDESCRIPTION: Shows how to get and set the opacity of a Konva node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Groups with React-Konva\nDESCRIPTION: Shows how to create a draggable group of shapes using React-Konva components. The implementation uses declarative syntax to create a stage, layer, and group containing a circle and rectangle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Groups.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Circle, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group x={50} y={50} draggable>\n          <Circle\n            x={40}\n            y={40}\n            radius={30}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n          <Rect\n            x={80}\n            y={20}\n            width={100}\n            height={50}\n            fill=\"green\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Desktop and Mobile Events with React-Konva\nDESCRIPTION: This example shows how to handle both desktop and mobile events in a React application using React-Konva. It uses React state to manage and display messages when a circle is interacted with. The implementation demonstrates separate event handlers for mousedown/touchstart and mouseup/touchend events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Desktop_and_Mobile.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMousedown={() => setMessage('Mousedown or touchstart')}\n          onTouchstart={() => setMessage('Mousedown or touchstart')}\n          onMouseup={() => setMessage('Mouseup or touchend')}\n          onTouchend={() => setMessage('Mouseup or touchend')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Drag and Drop Bounds with React and react-konva\nDESCRIPTION: This snippet shows how to implement complex drag and drop boundaries using React and react-konva. It creates two draggable groups with different constraints: one bound below a y-coordinate of 50, and another bound within a circular area. The boundary constraints are applied through event handlers that manipulate the position of the dragged elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/08_Complex_Drag_and_Drop.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Rect, Text } from 'react-konva';\n\nconst App = () => {\n  const handleBlueDragMove = (e) => {\n    e.target.y(Math.max(e.target.y(), 50));\n  };\n\n  const handleYellowDragMove = (e) => {\n    const x = window.innerWidth / 2;\n    const y = 70;\n    const radius = 50;\n    const pos = e.target.absolutePosition();\n    const scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));\n\n    if (scale < 1) {\n      e.target.x(Math.round((pos.x - x) * scale + x));\n      e.target.y(Math.round((pos.y - y) * scale + y));\n    }\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group x={30} y={70} draggable onDragMove={handleBlueDragMove}>\n          <Rect\n            width={150}\n            height={72}\n            fill=\"#aaf\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n          <Text\n            text=\"bound below\"\n            fontSize={26}\n            fontFamily=\"Calibri\"\n            fill=\"black\"\n            padding={10}\n            width={150}\n            align=\"center\"\n          />\n        </Group>\n        <Group\n          x={window.innerWidth / 2}\n          y={70}\n          draggable\n          onDragMove={handleYellowDragMove}\n        >\n          <Rect\n            width={150}\n            height={72}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n          <Text\n            text=\"bound in circle\"\n            fontSize={26}\n            fontFamily=\"Calibri\"\n            fill=\"black\"\n            padding={10}\n            width={150}\n            align=\"center\"\n          />\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shape with React-Konva\nDESCRIPTION: This code demonstrates how to create a custom shape using the Shape component from react-konva. It defines a sceneFunc that uses canvas drawing methods to create a custom path. The function utilizes context.fillStrokeShape() which is a Konva-specific method needed to properly fill and stroke the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Custom_Shape.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Shape } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Shape\n          width={260}\n          height={170}\n          sceneFunc={function (context, shape) {\n            const width = shape.width();\n            const height = shape.height();\n            context.beginPath();\n            context.moveTo(0, 0);\n            context.lineTo(width - 40, height - 90);\n            context.quadraticCurveTo(width - 110, height - 70, width, height);\n            context.closePath();\n\n            // (!) Konva specific method, it is very important\n            context.fillStrokeShape(shape);\n          }}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Layering with React and react-konva\nDESCRIPTION: This snippet shows how to create draggable shapes and layer them using react-konva in a React application. It uses state to control the order of the shapes and provides buttons to toggle the yellow box's position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Layering.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [yellowOnTop, setYellowOnTop] = useState(false);\n\n  return (\n    <>\n      <button onClick={() => setYellowOnTop(true)}>\n        Move yellow box to top\n      </button>\n      <button onClick={() => setYellowOnTop(false)}>\n        Move yellow box to bottom\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {!yellowOnTop && (\n            <Rect\n              x={100}\n              y={100}\n              width={100}\n              height={100}\n              fill=\"red\"\n              stroke=\"black\"\n              strokeWidth={4}\n              draggable\n            />\n          )}\n          <Rect\n            x={50}\n            y={50}\n            width={100}\n            height={100}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n            draggable\n          />\n          {yellowOnTop && (\n            <Rect\n              x={100}\n              y={100}\n              width={100}\n              height={100}\n              fill=\"red\"\n              stroke=\"black\"\n              strokeWidth={4}\n              draggable\n            />\n          )}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Node Z-Index in Konva.js\nDESCRIPTION: Example of getting and setting z-index for a Konva node relative to its siblings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by Name with React-Konva\nDESCRIPTION: This React implementation shows how to select shapes by name using React-Konva. It creates a stage with circles and a rectangle, assigns names to them, and uses a useEffect hook with a ref to find and animate only the circle shapes after component mounting.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Name.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle, Rect } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const layerRef = useRef(null);\n  \n  useEffect(() => {\n    // find all circles by name and animate them\n    const circles = layerRef.current.find('.myCircle');\n    circles.forEach(circle => {\n      circle.to({\n        duration: 1,\n        rotation: 360,\n        easing: Konva.Easings.EaseInOut\n      });\n    });\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer ref={layerRef}>\n        <Circle\n          x={50}\n          y={window.innerHeight / 2}\n          radius={30}\n          fill=\"red\"\n          name=\"myCircle\"\n        />\n        <Circle\n          x={150}\n          y={window.innerHeight / 2}\n          radius={30}\n          fill=\"green\"\n          name=\"myCircle\"\n        />\n        <Rect\n          x={250}\n          y={window.innerHeight / 2 - 25}\n          width={50}\n          height={50}\n          fill=\"blue\"\n          name=\"myRect\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization in Vue-Konva\nDESCRIPTION: This example demonstrates Konva.js performance optimization techniques in a Vue 3 application using the Composition API. It implements layer separation, conditional rendering based on drag state, shape caching with refs, and disables listening on non-interactive elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer :config=\"{ listening: false }\">\n      <v-rect :config=\"rectConfig\" />\n    </v-layer>\n    <v-layer>\n      <v-star\n        v-if=\"starLayer === 'main'\"\n        ref=\"starRef\"\n        :config=\"starConfig\"\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n      />\n    </v-layer>\n    <v-layer>\n      <v-star\n        v-if=\"starLayer === 'drag'\"\n        ref=\"starRef\"\n        :config=\"starConfig\"\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 0,\n  y: 0,\n  width: window.innerWidth,\n  height: window.innerHeight,\n  fill: 'lightgray'\n};\n\nconst starConfig = {\n  x: 200,\n  y: 200,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true,\n  perfectDrawEnabled: false\n};\n\nconst starLayer = ref('main');\nconst starRef = ref(null);\n\nonMounted(() => {\n  // Cache the shape for better performance\n  if (starRef.value) {\n    starRef.value.getNode().cache();\n  }\n});\n\nconst handleDragStart = () => {\n  starLayer.value = 'drag';\n};\n\nconst handleDragEnd = () => {\n  starLayer.value = 'main';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Scale of a Konva.js Node\nDESCRIPTION: Shows how to get and set the scale of a node. Scale can be different for x and y dimensions, allowing for non-uniform scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TextPath with React-Konva\nDESCRIPTION: This snippet shows how to create a TextPath component using React with react-konva. It creates a Stage and Layer component, then adds a TextPath with styling properties and path data to render text along a curved path.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/TextPath.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, TextPath } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <TextPath\n          x={0}\n          y={50}\n          fill=\"#333\"\n          fontSize={16}\n          fontFamily=\"Arial\"\n          text=\"All the world's a stage, and all the men and women merely players.\"\n          data=\"M10,10 C0,0 10,150 100,100 S300,150 400,50\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Building Draggable Image with Vue Konva\nDESCRIPTION: This snippet demonstrates how to create a draggable image in HTML5 Canvas using Vue.js with vue-konva. It uses the useImage hook to load a Yoda image and sets up a draggable v-image component with mouse event handlers for cursor styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/02_Drag_an_Image.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"yodaImage\"\n        :config=\"imageConfig\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst [yodaImage] = useImage('https://konvajs.org/assets/yoda.jpg');\n\nconst imageConfig = ref({\n  x: 50,\n  y: 50,\n  image: yodaImage,\n  width: 106,\n  height: 118,\n  draggable: true\n});\n\nconst handleMouseEnter = () => {\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseLeave = () => {\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Solarize Filter to Image with Konva.js (Vanilla JavaScript)\nDESCRIPTION: This code snippet demonstrates how to apply a solarize filter to an image using Konva.js in vanilla JavaScript. It creates a stage, loads an image, applies the filter, and adds a slider to control the threshold value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Solarize.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Solarize]);\n  image.threshold(0.5);\n\n  // create slider\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '20px';\n  container.style.left = '20px';\n  \n  const text = document.createElement('span');\n  text.textContent = 'Threshold: ';\n  container.appendChild(text);\n  \n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '0';\n  slider.max = '1';\n  slider.step = '0.1';\n  slider.value = image.threshold();\n  slider.style.width = '200px';\n  \n  slider.addEventListener('input', (e) => {\n    const value = parseFloat(e.target.value);\n    image.threshold(value);\n  });\n  \n  container.appendChild(slider);\n  document.body.appendChild(container);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Contrast Filter with React and react-konva\nDESCRIPTION: This React implementation uses react-konva to apply a contrast filter to an image. It leverages hooks like useState, useEffect, and useRef to manage the contrast state and handle image caching. The code creates a draggable image with an adjustable contrast slider.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Contrast.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [contrast, setContrast] = useState(50);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Contrast]}\n            contrast={contrast}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"-100\"\n        max=\"100\"\n        value={contrast}\n        onChange={(e) => setContrast(parseInt(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Animating Shape Position with Vue-Konva\nDESCRIPTION: Shows how to animate a circle in a sine wave pattern using Vue-Konva components. Utilizes Vue's composition API with setup script, refs for component references, and lifecycle hooks to manage the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Moving.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-circle\n        ref=\"circleRef\"\n        :config=\"circleConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = ref({\n  x: 50,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst layerRef = ref(null);\nconst circleRef = ref(null);\nlet anim = null;\n\nonMounted(() => {\n  const amplitude = 100;\n  const period = 2000; // in milliseconds\n\n  anim = new Konva.Animation((frame) => {\n    circleRef.value.getNode().x(\n      amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n      window.innerWidth / 2\n    );\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y component of the fill pattern offset. This controls the vertical position of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Vue Connected Objects Implementation\nDESCRIPTION: Vue 3 implementation of connected objects using vue-konva with composition API and reactive state management\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Connected_Objects.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-arrow\n        v-for=\"connector in connectors\"\n        :key=\"connector.id\"\n        :config=\"getArrowConfig(connector)\"\n      />\n      <v-circle\n        v-for=\"target in targets\"\n        :key=\"target.id\"\n        :config=\"getCircleConfig(target)\"\n        @dragmove=\"handleDragMove\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n// Generate initial targets\nconst generateTargets = () => {\n  const number = 10;\n  const result = [];\n  while (result.length < number) {\n    result.push({\n      id: 'target-' + result.length,\n      x: window.innerWidth * Math.random(),\n      y: window.innerHeight * Math.random(),\n      radius: 20 + Math.random() * 20,\n      fill: '#' + Math.floor(Math.random()*16777215).toString(16),\n    });\n  }\n  return result;\n};\n\n// Generate connectors between targets\nconst generateConnectors = (targets) => {\n  const number = 10;\n  const result = [];\n  while (result.length < number) {\n    const from = 'target-' + Math.floor(Math.random() * targets.length);\n    const to = 'target-' + Math.floor(Math.random() * targets.length);\n    if (from === to) {\n      continue;\n    }\n    result.push({\n      id: 'connector-' + result.length,\n      from,\n      to,\n    });\n  }\n  return result;\n};\n\nconst targets = ref([]);\nconst connectors = ref([]);\n\nonMounted(() => {\n  const initialTargets = generateTargets();\n  targets.value = initialTargets;\n  connectors.value = generateConnectors(initialTargets);\n});\n\nconst getConnectorPoints = (from, to) => {\n  const dx = to.x - from.x;\n  const dy = to.y - from.y;\n  let angle = Math.atan2(-dy, dx);\n\n  const radius = 50;\n\n  return [\n    from.x + -radius * Math.cos(angle + Math.PI),\n    from.y + radius * Math.sin(angle + Math.PI),\n    to.x + -radius * Math.cos(angle),\n    to.y + radius * Math.sin(angle),\n  ];\n};\n\nconst getArrowConfig = (connector) => {\n  const fromNode = targets.value.find((t) => t.id === connector.from);\n  const toNode = targets.value.find((t) => t.id === connector.to);\n  if (!fromNode || !toNode) return { points: [0, 0, 0, 0] };\n\n  return {\n    id: connector.id,\n    points: getConnectorPoints(fromNode, toNode),\n    fill: 'black',\n    stroke: 'black',\n  };\n};\n\nconst getCircleConfig = (target) => ({\n  id: target.id,\n  x: target.x,\n  y: target.y,\n  radius: target.radius,\n  fill: target.fill,\n  shadowBlur: 10,\n  draggable: true,\n});\n\nconst handleDragMove = (e) => {\n  const id = e.target.id();\n  targets.value = targets.value.map((target) =>\n    target.id === id\n      ? { ...target, x: e.target.x(), y: e.target.y() }\n      : target\n  );\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting X-Skew in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal skew (skewX) of a Konva node. This affects the horizontal shearing of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Konva Animation Demo in Svelte\nDESCRIPTION: This code snippet embeds an interactive CodeSandbox demo that showcases a simple Konva animation implemented in Svelte. The demo allows users to move a rectangle, demonstrating the animation capabilities of Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Simple_Animations.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe \n  src=\"https://codesandbox.io/p/sandbox/github/konvajs/site/tree/master/svelte-demos/simple_animations?file=/src/App.svelte\" \n  style={{\n    width: \"100%\",\n    height: \"800px\",\n    border: 0,\n    borderRadius: \"4px\",\n    overflow: \"hidden\"\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Building Map Implementation - React with react-konva\nDESCRIPTION: React implementation of the interactive building map using react-konva. Uses React hooks for state management and implements the same functionality as the vanilla version with a more React-centric approach.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Interactive_Building_Map.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Line, Label, Tag, Text, Image } from 'react-konva';\nimport { useState } from 'react';\nimport useImage from 'use-image';\n\nconst getData = () => ({\n  '1st Floor': {\n    color: 'blue',\n    points: [366, 298, 500, 284, 499, 204, 352, 183, 72, 228, 74, 274],\n  },\n  // ... rest of React implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scrollbars with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create custom scrollbars for a large canvas using Vanilla Konva.js. It generates random circles on a large virtual canvas, adds draggable horizontal and vertical scrollbars, and implements wheel event handling for intuitive scrolling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\nfunction generateNode() {\n  return new Konva.Circle({\n    x: WIDTH * Math.random(),\n    y: HEIGHT * Math.random(),\n    radius: 50,\n    fill: 'red',\n    stroke: 'black',\n  });\n}\n\nfor (let i = 0; i < NUMBER; i++) {\n  layer.add(generateNode());\n}\n\n// now draw our bars\nconst scrollLayers = new Konva.Layer();\nstage.add(scrollLayers);\n\nconst PADDING = 5;\n\nconst verticalBar = new Konva.Rect({\n  width: 10,\n  height: 100,\n  fill: 'grey',\n  opacity: 0.8,\n  x: stage.width() - PADDING - 10,\n  y: PADDING,\n  draggable: true,\n  dragBoundFunc: function (pos) {\n    pos.x = stage.width() - PADDING - 10;\n    pos.y = Math.max(\n      Math.min(pos.y, stage.height() - this.height() - PADDING),\n      PADDING\n    );\n    return pos;\n  },\n});\nscrollLayers.add(verticalBar);\n\nverticalBar.on('dragmove', function () {\n  // delta in %\n  const availableHeight =\n    stage.height() - PADDING * 2 - verticalBar.height();\n  const delta = (verticalBar.y() - PADDING) / availableHeight;\n\n  layer.y(-(HEIGHT - stage.height()) * delta);\n});\n\nconst horizontalBar = new Konva.Rect({\n  width: 100,\n  height: 10,\n  fill: 'grey',\n  opacity: 0.8,\n  x: PADDING,\n  y: stage.height() - PADDING - 10,\n  draggable: true,\n  dragBoundFunc: function (pos) {\n    pos.x = Math.max(\n      Math.min(pos.x, stage.width() - this.width() - PADDING),\n      PADDING\n    );\n    pos.y = stage.height() - PADDING - 10;\n\n    return pos;\n  },\n});\nscrollLayers.add(horizontalBar);\n\nhorizontalBar.on('dragmove', function () {\n  // delta in %\n  const availableWidth =\n    stage.width() - PADDING * 2 - horizontalBar.width();\n  const delta = (horizontalBar.x() - PADDING) / availableWidth;\n\n  layer.x(-(WIDTH - stage.width()) * delta);\n});\n\nstage.on('wheel', function (e) {\n  // prevent parent scrolling\n  e.evt.preventDefault();\n  const dx = e.evt.deltaX;\n  const dy = e.evt.deltaY;\n\n  const minX = -(WIDTH - stage.width());\n  const maxX = 0;\n\n  const x = Math.max(minX, Math.min(layer.x() - dx, maxX));\n\n  const minY = -(HEIGHT - stage.height());\n  const maxY = 0;\n\n  const y = Math.max(minY, Math.min(layer.y() - dy, maxY));\n  layer.position({ x, y });\n\n  const availableHeight =\n    stage.height() - PADDING * 2 - verticalBar.height();\n  const vy =\n    (layer.y() / (-HEIGHT + stage.height())) * availableHeight + PADDING;\n  verticalBar.y(vy);\n\n  const availableWidth =\n    stage.width() - PADDING * 2 - horizontalBar.width();\n\n  const hx =\n    (layer.x() / (-WIDTH + stage.width())) * availableWidth + PADDING;\n  horizontalBar.x(hx);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop for Multiple Shapes using Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet creates a Konva stage with multiple draggable rectangles. It handles drag events, cursor changes, and shape removal on double-click or double-tap. The code uses Konva.js to manage the canvas and shape interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Multiple_Shapes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nfor (let i = 0; i < 6; i++) {\n  const box = new Konva.Rect({\n    x: i * 30 + 50,\n    y: i * 18 + 40,\n    fill: colors[i],\n    stroke: 'black',\n    strokeWidth: 4,\n    draggable: true,\n    width: 100,\n    height: 50,\n  });\n\n  box.on('dragstart', function () {\n    this.moveToTop();\n  });\n\n  box.on('dragmove', function () {\n    document.body.style.cursor = 'pointer';\n  });\n  \n  // dblclick to remove box for desktop app\n  // and dbltap to remove box for mobile app\n  box.on('dblclick dbltap', function () {\n    this.destroy();\n  });\n\n  box.on('mouseover', function () {\n    document.body.style.cursor = 'pointer';\n  });\n  \n  box.on('mouseout', function () {\n    document.body.style.cursor = 'default';\n  });\n\n  layer.add(box);\n}\n\n// add the layer to the stage\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Konva Node in JavaScript\nDESCRIPTION: Method to bind various events to a Konva node. Supports mouse, touch, and drag events. Multiple events can be bound at once, and namespaces can be used for event management. The event object provides information about the target, current target, and native browser event.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Events in Vanilla JavaScript with Konva\nDESCRIPTION: Creates a canvas with a movable circle that responds to arrow key inputs using vanilla JavaScript. Uses stage container's tabIndex for focus management and keydown event listener for movement controls.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Keyboard_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\nlayer.add(circle);\n\n// make stage container focusable\nstage.container().tabIndex = 1;\n// focus it\n// also stage will be in focus on its click\nstage.container().focus();\n\nconst DELTA = 4;\n\n// add keyboard events\nstage.container().addEventListener('keydown', (e) => {\n  if (e.keyCode === 37) {\n    circle.x(circle.x() - DELTA);\n  } else if (e.keyCode === 38) {\n    circle.y(circle.y() - DELTA);\n  } else if (e.keyCode === 39) {\n    circle.x(circle.x() + DELTA);\n  } else if (e.keyCode === 40) {\n    circle.y(circle.y() + DELTA);\n  } else {\n    return;\n  }\n  e.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Planets Image Map with Vanilla Konva.js\nDESCRIPTION: This snippet creates an interactive planets image map with mouseover effects using vanilla Konva.js. It initializes a stage with multiple layers, loads a planet image, and creates circular overlays for each planet that show the planet name on mouseover and can be toggled with a checkbox.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Planets_Image_Map.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst planetsLayer = new Konva.Layer();\nconst circlesLayer = new Konva.Layer();\nconst messageLayer = new Konva.Layer();\n\nstage.add(planetsLayer);\nstage.add(circlesLayer);\nstage.add(messageLayer);\n\nconst text = new Konva.Text({\nx: 10,\ny: 10,\nfontFamily: 'Calibri',\nfontSize: 24,\ntext: '',\nfill: 'white',\n});\nmessageLayer.add(text);\n\nfunction writeMessage(message) {\ntext.text(message);\n}\n\nconst planets = {\nMercury: {\nx: 46,\ny: 126,\nradius: 32,\n},\nVenus: {\nx: 179,\ny: 126,\nradius: 79,\n},\nEarth: {\nx: 366,\ny: 127,\nradius: 85,\n},\nMars: {\nx: 515,\ny: 127,\nradius: 45,\n},\n};\n\n// create checkbox\nconst container = document.createElement('div');\ncontainer.style.position = 'absolute';\ncontainer.style.top = '10px';\ncontainer.style.left = '10px';\ncontainer.style.zIndex = '99999';\ncontainer.innerHTML = `  <label style=\"color: white;\">\n    <input type=\"checkbox\" id=\"checkbox\" />\n    Show map overlay\n  </label>`;\ndocument.body.appendChild(container);\n\n// draw shape overlays\nfor (const key in planets) {\nconst planet = planets[key];\nconst planetOverlay = new Konva.Circle({\nx: planet.x,\ny: planet.y,\nradius: planet.radius,\n});\n\nplanetOverlay.on('mouseover', () => {\nwriteMessage(key);\n});\nplanetOverlay.on('mouseout', () => {\nwriteMessage('');\n});\n\ncirclesLayer.add(planetOverlay);\n}\n\nconst checkbox = document.getElementById('checkbox');\ncheckbox.addEventListener('click', () => {\nconst shapes = circlesLayer.getChildren();\nshapes.forEach(shape => {\nconst f = shape.fill();\nshape.fill(f === 'red' ? null : 'red');\n});\n});\n\n// load the image\nKonva.Image.fromURL('https://konvajs.org/assets/planets.png', (planetsImage) => {\nplanetsLayer.add(planetsImage);\n});\n```\n\n----------------------------------------\n\nTITLE: Tweening Blur Filter on Image with React and Konva.js\nDESCRIPTION: This snippet shows how to implement a blur filter tween on an image using React with react-konva. It uses hooks to manage the image state and tween reference. The component creates an interactive image that becomes less blurred when hovered over or touched, demonstrating the integration of Konva.js features within a React component.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Tween_Filter.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useRef, useEffect } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const imageRef = useRef();\n  const [image] = useImage('/images/lion.png');\n  const tweenRef = useRef();\n\n  useEffect(() => {\n    if (!imageRef.current) return;\n\n    const node = imageRef.current;\n    node.cache();\n    node.filters([Konva.Filters.Blur]);\n    node.blurRadius(10);\n\n    tweenRef.current = new Konva.Tween({\n      node: node,\n      duration: 0.5,\n      blurRadius: 0,\n      easing: Konva.Easings.EaseInOut,\n    });\n  }, [image]);\n\n  const handleMouseEnter = () => {\n    tweenRef.current.play();\n  };\n\n  const handleMouseLeave = () => {\n    tweenRef.current.reverse();\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Image\n          ref={imageRef}\n          x={50}\n          y={50}\n          image={image}\n          draggable\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          onTouchStart={handleMouseEnter}\n          onTouchEnd={handleMouseLeave}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Konva Caching Implementation\nDESCRIPTION: A complete Vue component that renders 1000 star shapes using Konva and implements togglable caching to demonstrate performance improvement. The example uses v-stage, v-layer, and v-group components from Vue-Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Cache.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <v-stage ref=\"stage\" :config=\"stageConfig\">\n      <v-layer ref=\"layer\">\n        <v-group ref=\"group\">\n          <v-star\n            v-for=\"item in list\"\n            :key=\"item.id\"\n            :config=\"{\n              x: item.x,\n              y: item.y,\n              rotation: item.rotation,\n              id: item.id,\n              numPoints: 5,\n              innerRadius: 30,\n              outerRadius: 50,\n              fill: '#89b717',\n              opacity: 0.8,\n              shadowColor: 'black',\n              shadowBlur: 10,\n              shadowOpacity: 0.6,\n              scaleX: item.scale,\n              scaleY: item.scale,\n            }\"\n          />\n        </v-group>\n      </v-layer>\n    </v-stage>\n    <div class=\"cache\">\n      <input type=\"checkbox\" @change=\"handleCacheChange\"> cache shapes\n    </div>\n  </div>\n</template>\n\n<script>\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nexport default {\n  data() {\n    return {\n      list: [],\n      dragItemId: null,\n      stageConfig: {\n        width: width,\n        height: height,\n        draggable: true\n      }\n    };\n  },\n  methods: {\n    handleCacheChange(e) {\n      const shouldCache = e.target.checked;\n      if (shouldCache) {\n        this.$refs.group.getNode().cache();\n      } else {\n        this.$refs.group.getNode().clearCache();\n      }\n    }\n  },\n  mounted() {\n    // Generate 300 random stars\n    for (let n = 0; n < 1000; n++) {\n      this.list.push({\n        id: Math.round(Math.random() * 10000).toString(),\n        x: Math.random() * width,\n        y: Math.random() * height,\n        rotation: Math.random() * 180,\n        scale: Math.random()\n      });\n    }\n  }\n};\n</script>\n\n<style>\n.cache {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter to Images using Vue with vue-konva\nDESCRIPTION: This Vue.js implementation demonstrates applying a grayscale filter to an image using vue-konva. It uses the composition API with setup script, refs, watch, and nextTick to handle image loading and caching. The useImage hook from vue-konva is used to load the image with proper cross-origin settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Grayscale.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        ref=\"imageNode\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: image,\n          draggable: true,\n          filters: [Konva.Filters.Grayscale],\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Stage Preview in Vue.js with Konva\nDESCRIPTION: This Vue.js implementation creates a stage preview using Vue Konva components. It uses reactive references to manage shapes that appear in both the main stage and the preview. The preview automatically updates when shapes are dragged or added via double-click, leveraging Vue's reactivity system.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Stage_Preview.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div style=\"position: relative\">\n    <v-stage\n      :config=\"stageConfig\"\n      @dblclick=\"handleDblClick\"\n      @tap=\"handleDblClick\"\n    >\n      <v-layer>\n        <v-circle\n          v-for=\"shape in shapes\"\n          :key=\"shape.id\"\n          :config=\"{\n            ...shape,\n            draggable: true\n          }\"\n          @dragmove=\"(e) => handleDragMove(e, shape.id)\"\n        />\n      </v-layer>\n    </v-stage>\n    <div\n      style=\"position: absolute; top: 2px; right: 2px; border: 1px solid grey; background-color: lightgrey\"\n    >\n      <v-stage :config=\"previewConfig\">\n        <v-layer>\n          <v-circle\n            v-for=\"shape in shapes\"\n            :key=\"shape.id\"\n            :config=\"{\n              ...shape,\n              listening: false\n            }\"\n          />\n        </v-layer>\n      </v-stage>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst previewConfig = {\n  width: window.innerWidth / 4,\n  height: window.innerHeight / 4,\n  scaleX: 1/4,\n  scaleY: 1/4,\n};\n\nconst shapes = ref(\n  Array.from({ length: 10 }, (_, i) => ({\n    id: i,\n    x: Math.random() * stageConfig.width,\n    y: Math.random() * stageConfig.height,\n    radius: Math.random() * 30 + 5,\n    fill: getRandomColor(),\n  }))\n);\n\nconst handleDragMove = (e, id) => {\n  const { x, y } = e.target.position();\n  shapes.value = shapes.value.map(shape =>\n    shape.id === id ? { ...shape, x, y } : shape\n  );\n};\n\nconst handleDblClick = (e) => {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  const newShape = {\n    id: shapes.value.length,\n    x: pos.x,\n    y: pos.y,\n    radius: Math.random() * 30 + 5,\n    fill: getRandomColor(),\n  };\n  shapes.value.push(newShape);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Caching Konva Nodes in Svelte\nDESCRIPTION: To cache a Konva node in a Svelte app, you need to access the node using the 'handle' prop and then call the cache() function on it. This technique improves rendering performance, especially for complex shapes or groups.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Cache.md#2025-04-11_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<SomeKonvaComponent handle={(node) => node.cache()} />\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events with Vanilla JavaScript and Konva\nDESCRIPTION: Demonstrates how to create and fire custom events on a Konva Circle shape using vanilla JavaScript. Creates a circle on a canvas and adds a button to trigger a custom event.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Fire_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\n// add shape event listener\ncircle.on('customEvent', function (evt) {\n  alert('custom event fired');\n});\n\n// add button to trigger custom event\nconst button = document.createElement('button');\nbutton.innerHTML = 'Fire Custom Event';\ndocument.body.appendChild(button);\nbutton.addEventListener('click', () => {\n  // fire custom event\n  circle.fire('customEvent', {\n    bubbles: true,\n  });\n});\n\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag-to-Top Functionality in vue-konva\nDESCRIPTION: This snippet demonstrates how to manage z-index in vue-konva by manipulating the order of elements in an array rather than using explicit zIndex properties. When a circle is dragged, it moves to the top of the visual stack by being moved to the end of the array, following Vue's declarative approach to component ordering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/zIndex.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle\n        v-for=\"item in items\"\n        :key=\"item.id\"\n        :config=\"item\"\n        @dragstart=\"handleDragstart\"\n        @dragend=\"handleDragend\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst items = ref([]);\nconst dragItemId = ref(null);\n\nconst generateItems = () => {\n  const newItems = [];\n  for (let i = 0; i < 10; i++) {\n    newItems.push({\n      x: Math.random() * stageSize.width,\n      y: Math.random() * stageSize.height,\n      radius: 50,\n      id: \"node-\" + i,\n      fill: Konva.Util.getRandomColor(),\n      draggable: true\n    });\n  }\n  return newItems;\n};\n\nconst handleDragstart = (e) => {\n  // save drag element:\n  dragItemId.value = e.target.id();\n  // move current element to the top by rearranging the items array:\n  const item = items.value.find(i => i.id === dragItemId.value);\n  const index = items.value.indexOf(item);\n  items.value.splice(index, 1);\n  items.value.push(item);\n};\n\nconst handleDragend = () => {\n  dragItemId.value = null;\n};\n\nonMounted(() => {\n  items.value = generateItems();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Konva.js Performance with Listening False in Vanilla JavaScript\nDESCRIPTION: This code demonstrates the performance difference by creating 100 blue circles with event listeners (listening=true) and 1000 green circles without event listeners (listening=false). The blue circles change color on hover, while the green circles improve performance by not participating in event detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Listening_False.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create many circles with listening enabled\nfor (let i = 0; i < 100; i++) {\n  const circle = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: 20,\n    fill: 'blue',\n    opacity: 0.5,\n    // Enable event detection (default)\n    listening: true,\n  });\n  \n  // Add hover effect\n  circle.on('mouseover', function() {\n    this.fill('red');\n  });\n  \n  circle.on('mouseout', function() {\n    this.fill('blue');\n  });\n  \n  layer.add(circle);\n}\n\n// Create many circles with listening disabled\nfor (let i = 0; i < 1000; i++) {\n  const circle = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: 20,\n    fill: 'green',\n    opacity: 0.5,\n    // Disable event detection for better performance\n    listening: false,\n  });\n  layer.add(circle);\n}\n\n// Add text explanation\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  text: 'Blue circles (100) have event listeners (hover them)\\nGreen circles (1000) have no listeners (better performance)',\n  fontSize: 16,\n  fill: 'black',\n});\nlayer.add(text);\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Stage as High Quality Image in JavaScript\nDESCRIPTION: This snippet demonstrates how to export a Konva stage as a high-quality image using the toDataURL() method with a pixelRatio of 2. It creates a stage with a circle and text, then provides a button to trigger the export.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/High-Quality-Export.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: 400,\n  height: 400\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create some shapes\nconst circle = new Konva.Circle({\n  x: 200,\n  y: 200,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst text = new Konva.Text({\n  x: 150,\n  y: 190,\n  text: 'High Quality Export',\n  fontSize: 20,\n  fill: 'white'\n});\n\nlayer.add(circle);\nlayer.add(text);\n\n// add button\nconst button = document.createElement('button');\nbutton.textContent = 'Save as High Quality Image';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  // save stage as a high quality image\n  const dataURL = stage.toDataURL({\n    pixelRatio: 2 // double resolution\n  });\n  \n  // create link to download\n  const link = document.createElement('a');\n  link.download = 'stage.png';\n  link.href = dataURL;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Solarize Filter to Image with Konva.js (React)\nDESCRIPTION: This code snippet shows how to apply a solarize filter to an image using Konva.js in a React application. It uses the react-konva library and hooks to manage state and image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Solarize.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [threshold, setThreshold] = useState(0.5);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Solarize]}\n            threshold={threshold}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.1\"\n        value={threshold}\n        onChange={(e) => setThreshold(parseFloat(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the stroke linear gradient start point for a shape, defining where the stroke gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering 10,000 Shapes with Tooltips in Vue using vue-konva\nDESCRIPTION: This Vue implementation uses vue-konva to render 10,000 circles with tooltips. It employs Vue 3's Composition API with ref and computed for reactivity. The code creates a two-layer system where the first layer contains all the circles and the second layer displays the tooltip that follows the mouse cursor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/10000_Shapes_with_Tooltip.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer @mousemove=\"handleMouseMove\" @mouseout=\"handleMouseOut\">\n      <v-circle\n        v-for=\"circle in circles\"\n        :key=\"circle.id\"\n        :config=\"{\n          x: circle.x,\n          y: circle.y,\n          radius: 3,\n          fill: circle.color,\n          name: circle.id.toString()\n        }\"\n      />\n    </v-layer>\n    <v-layer>\n      <v-text\n        :config=\"{\n          ...tooltipProps,\n          fontFamily: 'Calibri',\n          fontSize: 12,\n          padding: 5,\n          fill: 'black',\n          opacity: 0.75,\n          textFill: 'white'\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst tooltipProps = ref({\n  text: '',\n  visible: false,\n  x: 0,\n  y: 0\n});\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\nconst circles = computed(() => {\n  const items = [];\n  let colorIndex = 0;\n  \n  for (let i = 0; i < 10000; i++) {\n    const color = colors[colorIndex++];\n    if (colorIndex >= colors.length) {\n      colorIndex = 0;\n    }\n    \n    items.push({\n      id: i,\n      x: Math.random() * stageSize.width,\n      y: Math.random() * stageSize.height,\n      color\n    });\n  }\n  return items;\n});\n\nconst handleMouseMove = (e) => {\n  const mousePos = e.target.getStage().getPointerPosition();\n  tooltipProps.value = {\n    text: `node: ${e.target.name()}, color: ${e.target.attrs.fill}`,\n    visible: true,\n    x: mousePos.x + 5,\n    y: mousePos.y + 5\n  };\n};\n\nconst handleMouseOut = () => {\n  tooltipProps.value.visible = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Snapping with Konva.js\nDESCRIPTION: This code snippet demonstrates how to create a Konva stage with draggable shapes that snap to each other and to stage edges. It includes functions for calculating snapping guidelines, finding snapping points, and drawing guide lines during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Objects_Snapping.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\nvar GUIDELINE_OFFSET = 5;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nvar layer = new Konva.Layer();\nstage.add(layer);\n\n// first generate random rectangles\nfor (var i = 0; i < 5; i++) {\n  layer.add(\n    new Konva.Rect({\n      x: Math.random() * stage.width(),\n      y: Math.random() * stage.height(),\n      width: 50 + Math.random() * 50,\n      height: 50 + Math.random() * 50,\n      fill: Konva.Util.getRandomColor(),\n      rotation: Math.random() * 360,\n      draggable: true,\n      name: 'object',\n    })\n  );\n}\n\n// were can we snap our objects?\nfunction getLineGuideStops(skipShape) {\n  // we can snap to stage borders and the center of the stage\n  var vertical = [0, stage.width() / 2, stage.width()];\n  var horizontal = [0, stage.height() / 2, stage.height()];\n\n  // and we snap over edges and center of each object on the canvas\n  stage.find('.object').forEach((guideItem) => {\n    if (guideItem === skipShape) {\n      return;\n    }\n    var box = guideItem.getClientRect();\n    // and we can snap to all edges of shapes\n    vertical.push([box.x, box.x + box.width, box.x + box.width / 2]);\n    horizontal.push([box.y, box.y + box.height, box.y + box.height / 2]);\n  });\n  return {\n    vertical: vertical.flat(),\n    horizontal: horizontal.flat(),\n  };\n}\n\n// what points of the object will trigger to snapping?\n// it can be just center of the object\n// but we will enable all edges and center\nfunction getObjectSnappingEdges(node) {\n  var box = node.getClientRect();\n  var absPos = node.absolutePosition();\n\n  return {\n    vertical: [\n      {\n        guide: Math.round(box.x),\n        offset: Math.round(absPos.x - box.x),\n        snap: 'start',\n      },\n      {\n        guide: Math.round(box.x + box.width / 2),\n        offset: Math.round(absPos.x - box.x - box.width / 2),\n        snap: 'center',\n      },\n      {\n        guide: Math.round(box.x + box.width),\n        offset: Math.round(absPos.x - box.x - box.width),\n        snap: 'end',\n      },\n    ],\n    horizontal: [\n      {\n        guide: Math.round(box.y),\n        offset: Math.round(absPos.y - box.y),\n        snap: 'start',\n      },\n      {\n        guide: Math.round(box.y + box.height / 2),\n        offset: Math.round(absPos.y - box.y - box.height / 2),\n        snap: 'center',\n      },\n      {\n        guide: Math.round(box.y + box.height),\n        offset: Math.round(absPos.y - box.y - box.height),\n        snap: 'end',\n      },\n    ],\n  };\n}\n\n// find all snapping possibilities\nfunction getGuides(lineGuideStops, itemBounds) {\n  var resultV = [];\n  var resultH = [];\n\n  lineGuideStops.vertical.forEach((lineGuide) => {\n    itemBounds.vertical.forEach((itemBound) => {\n      var diff = Math.abs(lineGuide - itemBound.guide);\n      // if the distance between guild line and object snap point is close we can consider this for snapping\n      if (diff < GUIDELINE_OFFSET) {\n        resultV.push({\n          lineGuide: lineGuide,\n          diff: diff,\n          snap: itemBound.snap,\n          offset: itemBound.offset,\n        });\n      }\n    });\n  });\n\n  lineGuideStops.horizontal.forEach((lineGuide) => {\n    itemBounds.horizontal.forEach((itemBound) => {\n      var diff = Math.abs(lineGuide - itemBound.guide);\n      if (diff < GUIDELINE_OFFSET) {\n        resultH.push({\n          lineGuide: lineGuide,\n          diff: diff,\n          snap: itemBound.snap,\n          offset: itemBound.offset,\n        });\n      }\n    });\n  });\n\n  var guides = [];\n\n  // find closest snap\n  var minV = resultV.sort((a, b) => a.diff - b.diff)[0];\n  var minH = resultH.sort((a, b) => a.diff - b.diff)[0];\n  if (minV) {\n    guides.push({\n      lineGuide: minV.lineGuide,\n      offset: minV.offset,\n      orientation: 'V',\n      snap: minV.snap,\n    });\n  }\n  if (minH) {\n    guides.push({\n      lineGuide: minH.lineGuide,\n      offset: minH.offset,\n      orientation: 'H',\n      snap: minH.snap,\n    });\n  }\n  return guides;\n}\n\nfunction drawGuides(guides) {\n  guides.forEach((lg) => {\n    if (lg.orientation === 'H') {\n      var line = new Konva.Line({\n        points: [-6000, 0, 6000, 0],\n        stroke: 'rgb(0, 161, 255)',\n        strokeWidth: 1,\n        name: 'guid-line',\n        dash: [4, 6],\n      });\n      layer.add(line);\n      line.absolutePosition({\n        x: 0,\n        y: lg.lineGuide,\n      });\n    } else if (lg.orientation === 'V') {\n      var line = new Konva.Line({\n        points: [0, -6000, 0, 6000],\n        stroke: 'rgb(0, 161, 255)',\n        strokeWidth: 1,\n        name: 'guid-line',\n        dash: [4, 6],\n      });\n      layer.add(line);\n      line.absolutePosition({\n        x: lg.lineGuide,\n        y: 0,\n      });\n    }\n  });\n}\n\nlayer.on('dragmove', function (e) {\n  // clear all previous lines on the screen\n  layer.find('.guid-line').forEach((l) => l.destroy());\n\n  // find possible snapping lines\n  var lineGuideStops = getLineGuideStops(e.target);\n  // find snapping points of current object\n  var itemBounds = getObjectSnappingEdges(e.target);\n\n  // now find where can we snap current object\n  var guides = getGuides(lineGuideStops, itemBounds);\n\n  // do nothing of no snapping\n  if (!guides.length) {\n    return;\n  }\n\n  drawGuides(guides);\n\n  var absPos = e.target.absolutePosition();\n  // now force object position\n  guides.forEach((lg) => {\n    switch (lg.orientation) {\n      case 'V': {\n        absPos.x = lg.lineGuide + lg.offset;\n        break;\n      }\n      case 'H': {\n        absPos.y = lg.lineGuide + lg.offset;\n        break;\n      }\n    }\n  });\n  e.target.absolutePosition(absPos);\n});\n\nlayer.on('dragend', function (e) {\n  // clear all previous lines on the screen\n  layer.find('.guid-line').forEach((l) => l.destroy());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Oscillating Blobs with React and react-konva\nDESCRIPTION: This snippet shows how to create interactive, animated blobs using react-konva in a React component. It uses React hooks to manage state and side effects, creating draggable blobs with random positions, colors, and opacities, and applying a sinusoidal animation to their tension property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Quantum_Squiggle.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useState, useEffect } from 'react';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nconst App = () => {\n  const [blobs, setBlobs] = useState([]);\n  const [tension, setTension] = useState(0);\n\n  useEffect(() => {\n    // Generate initial blobs\n    const newBlobs = COLORS.map((color) => {\n      const points = [];\n      for (let i = 0; i < 5; i++) {\n        points.push(window.innerWidth * Math.random());\n        points.push(window.innerHeight * Math.random());\n      }\n      return {\n        points,\n        fill: color,\n        opacity: Math.random(),\n        x: 0,\n        y: 0\n      };\n    });\n    setBlobs(newBlobs);\n  }, []);\n\n  useEffect(() => {\n    const period = 2000;\n    const centerTension = 0;\n    const amplitude = 1;\n\n    const interval = setInterval(() => {\n      const time = new Date().getTime();\n      setTension(\n        amplitude * Math.sin((time * 2 * Math.PI) / period) + centerTension\n      );\n    }, 1000 / 60);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleDragEnd = (e, index) => {\n    const newBlobs = [...blobs];\n    newBlobs[index] = {\n      ...newBlobs[index],\n      x: e.target.x(),\n      y: e.target.y()\n    };\n    setBlobs(newBlobs);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {blobs.map((blob, i) => (\n          <Line\n            key={i}\n            points={blob.points}\n            fill={blob.fill}\n            stroke=\"black\"\n            strokeWidth={2}\n            tension={tension}\n            opacity={blob.opacity}\n            draggable\n            closed\n            x={blob.x}\n            y={blob.y}\n            onDragEnd={(e) => handleDragEnd(e, i)}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Delegation with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to use event delegation with Konva in vanilla JavaScript. It creates a stage with a layer containing a text element and a star shape. The layer has a click event handler that identifies the clicked shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Event_Delegation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\nlayer.add(text);\n\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  numPoints: 5,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\nlayer.add(star);\n\n// add event delegation\nlayer.on('click', function (evt) {\n  const shape = evt.target;\n  text.text('click on ' + shape.getClassName());\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient Start Point Y in JavaScript\nDESCRIPTION: Shows how to retrieve and set the fill linear gradient start point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position of a Konva.js Node\nDESCRIPTION: Shows how to retrieve the absolute position of a node, either relative to the canvas or to any specified ancestor node. This is useful when you need accurate positioning information in different coordinate systems.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Clipping in React with React-Konva\nDESCRIPTION: This React component uses react-konva to create a clipping region. It generates an array of 20 random circles and renders them within a Group component that has a rectangular clip property defined. The circles are only visible within the boundaries of the clip region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Regions.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Stage, Layer, Group, Circle } from 'react-konva';\n\nconst App = () => {\n  const blobs = Array.from({ length: 20 }, (_, i) => ({\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    radius: Math.random() * 50,\n  }));\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group\n          clip={{\n            x: 100,\n            y: 20,\n            width: 200,\n            height: 200,\n          }}\n        >\n          {blobs.map((blob, i) => (\n            <Circle\n              key={i}\n              x={blob.x}\n              y={blob.y}\n              radius={blob.radius}\n              fill=\"green\"\n              opacity={0.8}\n            />\n          ))}\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer-Relative Zooming with Vue Konva\nDESCRIPTION: This Vue.js implementation uses Vue Konva components to create a stage with a circle that zooms relative to the pointer position. It utilizes Vue's ref and computed APIs to manage stage and circle configurations, along with a wheel event handler that calculates scaling transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zooming_Relative_To_Pointer.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage\n    ref=\"stageRef\"\n    :config=\"stageConfig\"\n    @wheel=\"handleWheel\"\n  >\n    <v-layer>\n      <v-circle :config=\"circleConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\nconst stageRef = ref(null);\n\nconst stageConfig = computed(() => ({\n  width,\n  height,\n}));\n\nconst circleConfig = computed(() => ({\n  x: width / 2,\n  y: height / 2,\n  radius: 50,\n  fill: 'green',\n}));\n\nconst handleWheel = (e) => {\n  e.evt.preventDefault();\n\n  const stage = stageRef.value.getNode();\n  const oldScale = stage.scaleX();\n  const pointer = stage.getPointerPosition();\n\n  const mousePointTo = {\n    x: (pointer.x - stage.x()) / oldScale,\n    y: (pointer.y - stage.y()) / oldScale,\n  };\n\n  // how to scale? Zoom in? Or zoom out?\n  let direction = e.evt.deltaY > 0 ? 1 : -1;\n\n  // when we zoom on trackpad, e.evt.ctrlKey is true\n  // in that case lets revert direction\n  if (e.evt.ctrlKey) {\n    direction = -direction;\n  }\n\n  const scaleBy = 1.01;\n  const newScale = direction > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n  stage.scale({ x: newScale, y: newScale });\n\n  const newPos = {\n    x: pointer.x - mousePointTo.x * newScale,\n    y: pointer.y - mousePointTo.y * newScale,\n  };\n  stage.position(newPos);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Image Transformations in KonvaJS with Vue\nDESCRIPTION: A function that processes transformations on images by extracting scale values, resetting them, and updating size state. It ensures minimal dimensions are maintained and normalizes scaling operations into explicit width/height dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleTransform = () => {\n  const node = imageRef.value.getNode();\n  const scaleX = node.scaleX();\n  const scaleY = node.scaleY();\n\n  node.scaleX(1);\n  node.scaleY(1);\n  size.value = {\n    width: Math.max(5, node.width() * scaleX),\n    height: Math.max(5, node.height() * scaleY),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Linear Gradient Start Point\nDESCRIPTION: Examples demonstrating how to get and set the stroke linear gradient start point coordinates. Takes an object parameter with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting and Animating Shapes by Type in Konva.js (Vue.js)\nDESCRIPTION: This Vue.js component creates a Konva stage with two circles and a rectangle. It uses the onMounted hook to find and animate only the circle shapes after the component mounts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Type.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-circle :config=\"circle1Config\" />\n      <v-circle :config=\"circle2Config\" />\n      <v-rect :config=\"rectConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circle1Config = {\n  x: 50,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'red'\n};\n\nconst circle2Config = {\n  x: 150,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'green'\n};\n\nconst rectConfig = {\n  x: 250,\n  y: window.innerHeight / 2 - 25,\n  width: 50,\n  height: 50,\n  fill: 'blue'\n};\n\nconst layerRef = ref(null);\n\nonMounted(() => {\n  // find all circles by type and animate them\n  const circles = layerRef.value.getNode().find('Circle');\n  circles.forEach(circle => {\n    circle.to({\n      duration: 1,\n      scale: { x: 1.5, y: 1.5 },\n      easing: Konva.Easings.EaseInOut\n    });\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Serializing Konva Stage in Vanilla JavaScript\nDESCRIPTION: This example demonstrates how to create a Konva stage with a circle and serialize it to JSON using the toJSON() method in vanilla JavaScript. It creates a red circle with a black stroke and adds a button that, when clicked, serializes the stage and displays the JSON in the console.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Serialize_a_Stage.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: 400,\n  height: 400\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create a shape\nconst circle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 3\n});\n\nlayer.add(circle);\n\n// add button\nconst button = document.createElement('button');\nbutton.textContent = 'Serialize Stage';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  // serialize the stage\n  const json = stage.toJSON();\n  \n  // show the result\n  console.log(json);\n  alert('Stage serialized! Check the console for the JSON string.');\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Canvas to PDF - Vanilla JavaScript Implementation\nDESCRIPTION: Creates a Konva stage with text, arrow, and image elements, then exports them to PDF using jsPDF. Includes high-quality export with pixelRatio and text selectability features.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_to_PDF.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create a button for PDF export\nconst saveButton = document.createElement('button');\nsaveButton.textContent = 'Save as PDF';\nsaveButton.style.position = 'absolute';\nsaveButton.style.top = '5px';\nsaveButton.style.left = '5px';\ndocument.body.appendChild(saveButton);\n\n// Create a stage\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Add background\nconst back = new Konva.Rect({\n  width: stage.width(),\n  height: stage.height(),\n  fill: 'rgba(200, 200, 200)',\n});\nlayer.add(back);\n\n// Add text with blur effect\nconst text = new Konva.Text({\n  text: 'This is the Darth Vader',\n  x: 15,\n  y: 40,\n  rotation: -10,\n  filters: [Konva.Filters.Blur],\n  blurRadius: 4,\n  fontSize: 18,\n});\ntext.cache();\nlayer.add(text);\n\n// Add arrow\nconst arrow = new Konva.Arrow({\n  points: [70, 50, 100, 80, 150, 100, 190, 100],\n  tension: 0.5,\n  stroke: 'black',\n  fill: 'black',\n});\nlayer.add(arrow);\n\n// Add image\nconst imageUrl = 'https://konvajs.org/assets/darth-vader.jpg';\nKonva.Image.fromURL(\n  imageUrl,\n  function (darthNode) {\n    darthNode.setAttrs({\n      x: 200,\n      y: 50,\n      scaleX: 0.5,\n      scaleY: 0.5,\n    });\n    layer.add(darthNode);\n  },\n  function () {\n    console.error('Failed to load image');\n  }\n);\n\n// Handle PDF export\nsaveButton.addEventListener('click', function () {\n  if (typeof jsPDF !== 'undefined') {\n    const pdf = new jsPDF('l', 'px', [stage.width(), stage.height()]);\n    pdf.setTextColor('#000000');\n    \n    // First add texts\n    stage.find('Text').forEach((text) => {\n      const size = text.fontSize() / 0.75;\n      pdf.setFontSize(size);\n      pdf.text(text.text(), text.x(), text.y(), {\n        baseline: 'top',\n        angle: -text.getAbsoluteRotation(),\n      });\n    });\n\n    pdf.addImage(\n      stage.toDataURL({ pixelRatio: 2 }),\n      0,\n      0,\n      stage.width(),\n      stage.height()\n    );\n\n    pdf.save('canvas.pdf');\n  } else {\n    console.error('jsPDF library is not loaded. Please include it in your project.');\n    alert('jsPDF library is not loaded. In a real project, you need to include it.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited Drag and Resize with React-Konva\nDESCRIPTION: This React implementation uses react-konva to achieve the same boundary limitations for shapes. It uses React hooks to manage shape references and state, and implements similar helper functions to calculate bounding boxes and manage transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\n\n// Helper functions for calculating bounding boxes\nconst getCorner = (pivotX, pivotY, diffX, diffY, angle) => {\n  const distance = Math.sqrt(diffX * diffX + diffY * diffY);\n  angle += Math.atan2(diffY, diffX);\n  const x = pivotX + distance * Math.cos(angle);\n  const y = pivotY + distance * Math.sin(angle);\n  return { x, y };\n};\n\nconst getClientRect = (rotatedBox) => {\n  const { x, y, width, height } = rotatedBox;\n  const rad = rotatedBox.rotation;\n\n  const p1 = getCorner(x, y, 0, 0, rad);\n  const p2 = getCorner(x, y, width, 0, rad);\n  const p3 = getCorner(x, y, width, height, rad);\n  const p4 = getCorner(x, y, 0, height, rad);\n\n  const minX = Math.min(p1.x, p2.x, p3.x, p4.x);\n  const minY = Math.min(p1.y, p2.y, p3.y, p4.y);\n  const maxX = Math.max(p1.x, p2.x, p3.x, p4.x);\n  const maxY = Math.max(p1.y, p2.y, p3.y, p4.y);\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n};\n\nconst getTotalBox = (boxes) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  boxes.forEach((box) => {\n    minX = Math.min(minX, box.x);\n    minY = Math.min(minY, box.y);\n    maxX = Math.max(maxX, box.x + box.width);\n    maxY = Math.max(maxY, box.y + box.height);\n  });\n  \n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n};\n\nconst LimitedDragAndResize = () => {\n  const [stageSize, setStageSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  \n  const [shapes, setShapes] = useState([\n    {\n      id: 'rect1',\n      x: window.innerWidth / 2 - 60,\n      y: window.innerHeight / 2 - 60,\n      width: 50,\n      height: 50,\n      fill: 'red',\n    },\n    {\n      id: 'rect2',\n      x: window.innerWidth / 2 + 10,\n      y: window.innerHeight / 2 + 10,\n      width: 50,\n      height: 50,\n      fill: 'green',\n    }\n  ]);\n  \n  const shapeRefs = useRef(new Map());\n  const trRef = useRef(null);\n  \n  // Set up Transformer after the layer mounts\n  useEffect(() => {\n    if (trRef.current) {\n      const nodes = shapes.map(shape => shapeRefs.current.get(shape.id));\n      trRef.current.nodes(nodes);\n    }\n  }, [shapes]);\n  \n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setStageSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Boundary function for Transformer\n  const boundBoxFunc = (oldBox, newBox) => {\n    const box = getClientRect(newBox);\n    \n    const isOut =\n      box.x < 0 ||\n      box.y < 0 ||\n      box.x + box.width > stageSize.width ||\n      box.y + box.height > stageSize.height;\n      \n    if (isOut) {\n      return oldBox;\n    }\n    \n    return newBox;\n  };\n  \n  // Handle drag for transformer group\n  const handleTransformerDrag = (e) => {\n    if (!trRef.current) return;\n    \n    const nodes = trRef.current.nodes();\n    if (nodes.length === 0) return;\n    \n    const boxes = nodes.map(node => node.getClientRect());\n    const box = getTotalBox(boxes);\n    \n    nodes.forEach(shape => {\n      const absPos = shape.getAbsolutePosition();\n      const offsetX = box.x - absPos.x;\n      const offsetY = box.y - absPos.y;\n      \n      const newAbsPos = { ...absPos };\n      \n      if (box.x < 0) {\n        newAbsPos.x = -offsetX;\n      }\n      if (box.y < 0) {\n        newAbsPos.y = -offsetY;\n      }\n      if (box.x + box.width > stageSize.width) {\n        newAbsPos.x = stageSize.width - box.width - offsetX;\n      }\n      if (box.y + box.height > stageSize.height) {\n        newAbsPos.y = stageSize.height - box.height - offsetY;\n      }\n      \n      shape.setAbsolutePosition(newAbsPos);\n    });\n  };\n  \n  return (\n    <Stage width={stageSize.width} height={stageSize.height}>\n      <Layer>\n        {shapes.map(shape => (\n          <Rect\n            key={shape.id}\n            ref={(node) => {\n              if (node) shapeRefs.current.set(shape.id, node);\n            }}\n            x={shape.x}\n            y={shape.y}\n            width={shape.width}\n            height={shape.height}\n            fill={shape.fill}\n            draggable\n          />\n        ))}\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={boundBoxFunc}\n          onDragMove={handleTransformerDrag}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default LimitedDragAndResize;\n```\n\n----------------------------------------\n\nTITLE: Node Movement in KonvaJS\nDESCRIPTION: Shows how to move nodes relative to their current position and between containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Scrolling Control with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Konva stage with two rectangles: a green one that prevents default scrolling behavior and a red one that allows it. It uses the 'preventDefault' property to control this behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Scrolling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// green rectangle - will prevent scrolling\nconst greenRect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 600,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n});\nlayer.add(greenRect);\n\n// red rectangle - will NOT prevent scrolling\nconst redRect = new Konva.Rect({\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 600,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  preventDefault: false,\n});\nlayer.add(redRect);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Konva.js in JavaScript\nDESCRIPTION: Demonstrates how to find a parent group node using the findAncestors method, which returns an array of all ancestor nodes matching the specified selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to implement four common easing functions (Linear, EaseIn, EaseOut, EaseInOut) using Konva.js in vanilla JavaScript. The code creates rectangles that animate with different easing functions when the user interacts with them via mouse or touch events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Common_Easings.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst easings = ['Linear', 'EaseIn', 'EaseOut', 'EaseInOut'];\nconst boxes = [];\n\neasings.forEach((easing, i) => {\nconst box = new Konva.Rect({\nx: 50,\ny: 50 + i * 80,\nwidth: 100,\nheight: 50,\nfill: '#00D2FF',\nstroke: 'black',\nstrokeWidth: 4,\n});\nlayer.add(box);\nboxes.push(box);\n\nconst text = new Konva.Text({\nx: 160,\ny: 65 + i * 80,\ntext: easing,\nfontSize: 16,\nfontFamily: 'Calibri',\nfill: 'black',\n});\nlayer.add(text);\n\nbox.on('mouseenter touchstart', () => {\nconst tween = new Konva.Tween({\nnode: box,\nduration: 1,\nx: width - 150,\neasing: Konva.Easings[easing],\n}).play();\n});\n\nbox.on('mouseleave touchend', () => {\nconst tween = new Konva.Tween({\nnode: box,\nduration: 1,\nx: 50,\neasing: Konva.Easings[easing],\n}).play();\n});\n});\n\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Stage to Data URL - Vanilla JavaScript\nDESCRIPTION: Demonstrates how to create a draggable rectangle on a Konva stage and export it as a data URL. Includes functionality to save in both PNG (default) and JPEG formats with quality settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Stage_Data_URL.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: 400,\n  height: 400\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create draggable rectangle\nconst rect = new Konva.Rect({\n  x: 100,\n  y: 100,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\nlayer.add(rect);\n\n// add button\nconst button = document.createElement('button');\nbutton.textContent = 'Save as Image';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  // get data URL with default settings\n  const dataURL = stage.toDataURL();\n  \n  // open in new window\n  const win = window.open();\n  win.document.write(`<img src=\"${dataURL}\" alt=\"Stage\"/>`);\n  \n  // you can also save with different settings\n  const jpegURL = stage.toDataURL({\n    mimeType: 'image/jpeg',\n    quality: 0.8\n  });\n  console.log('JPEG URL:', jpegURL);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale Animation with Vue Konva\nDESCRIPTION: This snippet demonstrates how to create scaling animations using Vue with vue-konva. It uses Vue's Composition API with ref, onMounted, and onUnmounted hooks to manage the animation lifecycle. The example creates three hexagons with different scaling behaviors and maintains their positions during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Scaling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-regular-polygon\n        ref=\"blueHexRef\"\n        :config=\"blueHexConfig\"\n        @dragend=\"handleDragEnd('blue', $event)\"\n      />\n      <v-regular-polygon\n        ref=\"yellowHexRef\"\n        :config=\"yellowHexConfig\"\n        @dragend=\"handleDragEnd('yellow', $event)\"\n      />\n      <v-regular-polygon\n        ref=\"redHexRef\"\n        :config=\"redHexConfig\"\n        @dragend=\"handleDragEnd('red', $event)\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst positions = ref({\n  blue: { x: 50, y: 50 },\n  yellow: { x: 150, y: 50 },\n  red: { x: 250, y: 50 }\n});\n\nconst blueHexConfig = ref({\n  x: positions.value.blue.x,\n  y: positions.value.blue.y,\n  sides: 6,\n  radius: 20,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\nconst yellowHexConfig = ref({\n  x: positions.value.yellow.x,\n  y: positions.value.yellow.y,\n  sides: 6,\n  radius: 20,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\nconst redHexConfig = ref({\n  x: positions.value.red.x,\n  y: positions.value.red.y,\n  sides: 6,\n  radius: 20,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\nconst layerRef = ref(null);\nconst blueHexRef = ref(null);\nconst yellowHexRef = ref(null);\nconst redHexRef = ref(null);\nlet anim = null;\n\nconst handleDragEnd = (color, e) => {\n  const newPos = e.target.position();\n  positions.value[color] = { x: newPos.x, y: newPos.y };\n  if (color === 'blue') blueHexConfig.value.x = newPos.x;\n  if (color === 'blue') blueHexConfig.value.y = newPos.y;\n  if (color === 'yellow') yellowHexConfig.value.x = newPos.x;\n  if (color === 'yellow') yellowHexConfig.value.y = newPos.y;\n  if (color === 'red') redHexConfig.value.x = newPos.x;\n  if (color === 'red') redHexConfig.value.y = newPos.y;\n};\n\nonMounted(() => {\n  const period = 2000;\n  anim = new Konva.Animation((frame) => {\n    const scale = Math.sin(frame.time * 2 * Math.PI / period) + 2;\n    \n    // blue hex - scale x and y\n    blueHexRef.value.getNode().scale({ x: scale, y: scale });\n    \n    // yellow hex - scale y only\n    yellowHexRef.value.getNode().scaleY(scale);\n    \n    // red hex - scale x only\n    redHexRef.value.getNode().scaleX(scale);\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter to Images using Vanilla JavaScript with Konva.js\nDESCRIPTION: This code demonstrates how to apply a grayscale filter to an image using Konva.js. It creates a stage, loads an image, adds it to a layer, and applies the Konva.Filters.Grayscale filter after caching the image. The image is also made draggable.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Grayscale.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Grayscale]);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Creating Text Elements with Konva.js in Vanilla JavaScript\nDESCRIPTION: This code demonstrates creating both simple and complex text elements using Konva.js. It shows how to position text, set font properties, align text, and create a background with shadows and rounded corners for complex text elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Simple text\nconst simpleText = new Konva.Text({\n  x: stage.width() / 2,\n  y: 15,\n  text: 'Simple Text',\n  fontSize: 30,\n  fontFamily: 'Calibri',\n  fill: 'green'\n});\n\nsimpleText.offsetX(simpleText.width() / 2);\n\n// Complex text with background\nconst complexText = new Konva.Text({\n  x: 20,\n  y: 60,\n  text: \"COMPLEX TEXT\\n\\nAll the world's a stage, and all the men and women merely players. They have their exits and their entrances.\",\n  fontSize: 18,\n  fontFamily: 'Calibri',\n  fill: '#555',\n  width: 300,\n  padding: 20,\n  align: 'center'\n});\n\nconst rect = new Konva.Rect({\n  x: 20,\n  y: 60,\n  stroke: '#555',\n  strokeWidth: 5,\n  fill: '#ddd',\n  width: 300,\n  height: complexText.height(),\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffsetX: 10,\n  shadowOffsetY: 10,\n  shadowOpacity: 0.2,\n  cornerRadius: 10\n});\n\nlayer.add(rect);\nlayer.add(simpleText);\nlayer.add(complexText);\n```\n\n----------------------------------------\n\nTITLE: Managing Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the scale of a Konva node in both x and y dimensions. Scale values modify the display size of the node without changing its base dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Contrast Filter Component with Vue and vue-konva\nDESCRIPTION: This Vue.js implementation uses vue-konva to create an image with adjustable contrast. It utilizes the Composition API with ref, watch, and nextTick to manage state and ensure proper image caching. The code creates a draggable image with a contrast filter and a slider for adjustment.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Contrast.mdx#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Contrast],\n            contrast: contrast,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"-100\"\n      max=\"100\"\n      :value=\"contrast\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst contrast = ref(50);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  contrast.value = parseInt(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Layering with Vanilla JavaScript and Konva\nDESCRIPTION: This snippet demonstrates how to create draggable shapes and layer them using Konva in vanilla JavaScript. It creates a yellow and a red box, and provides buttons to move the yellow box to the top or bottom of the layer stack.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Layering.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst yellowBox = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true,\n});\n\nconst redBox = new Konva.Rect({\nx: 100,\ny: 100,\nwidth: 100,\nheight: 100,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true,\n});\n\nlayer.add(yellowBox);\nlayer.add(redBox);\nstage.add(layer);\n\n// create buttons\nconst toTopBtn = document.createElement('button');\ntoTopBtn.textContent = 'Move yellow box to top';\ntoTopBtn.addEventListener('click', () => {\nyellowBox.moveToTop();\n});\n\nconst toBottomBtn = document.createElement('button');\ntoBottomBtn.textContent = 'Move yellow box to bottom';\ntoBottomBtn.addEventListener('click', () => {\nyellowBox.moveToBottom();\n});\n\ndocument.body.appendChild(toTopBtn);\ndocument.body.appendChild(toBottomBtn);\n```\n\n----------------------------------------\n\nTITLE: Applying Enhance Filter to Image with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to apply an enhance filter to an image using Konva.js in vanilla JavaScript. It creates a stage, adds an image, applies the enhance filter, and uses a slider to control the enhance value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Enhance.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Enhance]);\n  image.enhance(0.4);\n\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '-1';\n  slider.max = '1';\n  slider.step = '0.1';\n  slider.value = image.enhance();\n\n  slider.style.position = 'absolute';\n  slider.style.top = '20px';\n  slider.style.left = '20px';\n\n  slider.addEventListener('input', (e) => {\n    const value = parseFloat(e.target.value);\n    image.enhance(value);\n  });\n\n  document.body.appendChild(slider);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Rotation Snaps with Vue and Konva\nDESCRIPTION: Creates a draggable rectangle with rotation snap points using Vue 3 and vue-konva. Implements the snapping functionality using Vue components and composition API.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Rotation_Snaps.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {\n  rotationSnaps: [0, 90, 180, 270],\n  rotationSnapTolerance: 30\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multi-touch Scale Shape Implementation with React and KonvaJS\nDESCRIPTION: React implementation of the multi-touch scaling functionality using react-konva. Uses React hooks for state management and implements touch event handlers as effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Shape.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Circle } from 'react-konva';\nimport { useState, useEffect } from 'react';\n\nwindow.Konva.hitOnDragEnabled = true;\n\nconst App = () => {\n  const [activeShape, setActiveShape] = useState(null);\n  const [lastDist, setLastDist] = useState(0);\n  const [shapes, setShapes] = useState({\n    triangle: {\n      scaleX: 1,\n      scaleY: 1,\n      fill: 'green',\n      stroke: 'black'\n    },\n    circle: {\n      scaleX: 1,\n      scaleY: 1,\n      fill: 'red',\n      stroke: 'black'\n    }\n  });\n\n  // ... rest of the React implementation\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Position in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute position of a node, either relative to the canvas or a specific ancestor node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas State Persistence with Vue and Konva\nDESCRIPTION: This code demonstrates how to save and load canvas elements using Vue and Konva. The example allows users to create circles by clicking on the canvas, with the position data stored in localStorage to persist across page reloads. It utilizes Vue's reactivity system to maintain state between the component and the rendered canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Save-Load.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    Click on canvas to create a circle.\n    <a href=\".\">Reload the page</a>. Circles should stay here.\n    <v-stage\n      ref=\"stage\"\n      :config=\"stageSize\"\n      @click=\"handleClick\"\n    >\n      <v-layer ref=\"layer\">\n        <v-circle\n          v-for=\"item in list\"\n          :key=\"item.id\"\n          :config=\"item\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst list = ref([{ x: 100, y: 100, radius: 50, fill: 'blue' }]);\n\nconst handleClick = (evt) => {\n  const stage = evt.target.getStage();\n  const pos = stage.getPointerPosition();\n  list.value.push({\n    radius: 50,\n    fill: 'red',\n    ...pos\n  });\n\n  save();\n};\n\nconst load = () => {\n  const data = localStorage.getItem('storage');\n  if (data) list.value = JSON.parse(data);\n};\n\nconst save = () => {\n  localStorage.setItem('storage', JSON.stringify(list.value));\n};\n\nonMounted(() => {\n  load();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Stage to Data URL - Vue Implementation\nDESCRIPTION: Vue 3 implementation of the Konva stage export functionality using vue-konva. Uses the Composition API with refs for reactive state management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Stage_Data_URL.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handleExport\" style=\"margin-bottom: 10px\">\n      Save as Image\n    </button>\n    <v-stage ref=\"stageRef\" :config=\"stageSize\">\n      <v-layer>\n        <v-rect\n          :config=\"rectConfig\"\n          @dragend=\"handleDragEnd\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: 400,\n  height: 400\n};\n\nconst position = ref({ x: 100, y: 100 });\n\nconst rectConfig = ref({\n  x: position.value.x,\n  y: position.value.y,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\nconst stageRef = ref(null);\n\nconst handleExport = () => {\n  // get data URL with default settings\n  const dataURL = stageRef.value.getNode().toDataURL();\n  \n  // open in new window\n  const win = window.open();\n  win.document.write(`<img src=\"${dataURL}\" alt=\"Stage\"/>`);\n  \n  // you can also save with different settings\n  const jpegURL = stageRef.value.getNode().toDataURL({\n    mimeType: 'image/jpeg',\n    quality: 0.8\n  });\n  console.log('JPEG URL:', jpegURL);\n};\n\nconst handleDragEnd = (e) => {\n  const newPos = e.target.position();\n  position.value = newPos;\n  rectConfig.value.x = newPos.x;\n  rectConfig.value.y = newPos.y;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Map Implementation - Vanilla JavaScript with KonvaJS\nDESCRIPTION: Creates an interactive building map using vanilla JavaScript and KonvaJS. Features include hover effects, tooltips, and multiple floor sections defined by polygon coordinates. Uses layers for background image, shapes, and tooltips.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Interactive_Building_Map.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nfunction getData() {\n  return {\n    '1st Floor': {\n      color: 'blue',\n      points: [366, 298, 500, 284, 499, 204, 352, 183, 72, 228, 74, 274],\n    },\n    '2nd Floor': {\n      color: 'red',\n      points: [72, 228, 73, 193, 340, 96, 498, 154, 498, 191, 341, 171],\n    },\n    '3rd Floor': {\n      color: 'yellow',\n      points: [73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93],\n    },\n    Gym: {\n      color: 'green',\n      points: [498, 283, 503, 146, 560, 136, 576, 144, 576, 278, 500, 283],\n    },\n  };\n}\n\n// ... rest of vanilla implementation\n```\n\n----------------------------------------\n\nTITLE: Draggable Canvas Implementation - React\nDESCRIPTION: React implementation of a draggable canvas using react-konva. Viewport-sized stage with draggable content extending beyond visible area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\nconst App = () => {\n  const [nodes] = React.useState(() => \n    Array(NUMBER).fill().map(() => ({\n      x: WIDTH * Math.random(),\n      y: HEIGHT * Math.random(),\n    }))\n  );\n\n  return (\n    <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      draggable\n    >\n      <Layer>\n        {nodes.map((node, i) => (\n          <Circle\n            key={i}\n            x={node.x}\n            y={node.y}\n            radius={50}\n            fill=\"red\"\n            stroke=\"black\"\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor in Konva.js\nDESCRIPTION: Demonstrates how to find a specific ancestor using a selector with the findAncestor() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Rectangles with Vue and Konva\nDESCRIPTION: This Vue implementation of the animation stress test creates and animates 300 rectangles using Vue's Composition API. It uses ref for reactive state management and the Konva Animation class to update rectangle rotations. The implementation leverages Vue-specific lifecycle hooks (onMounted, onUnmounted) for proper setup and cleanup.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animation_Stress_Test.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer ref=\"layer\" :config=\"{ listening: false }\">\n      <v-rect\n        v-for=\"box in boxes\"\n        :key=\"box.id\"\n        :config=\"box\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted, computed, nextTick } from 'vue';\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stageConfig = {\n  width,\n  height\n};\n\nconst layer = ref(null);\nconst boxes = ref([]);\nlet animation = null;\n\n// Generate boxes with random properties\nonMounted(() => {\n  const colors = [\n    'red',\n    'orange',\n    'yellow',\n    'green',\n    'blue',\n    'cyan',\n    'purple',\n  ];\n  \n  let colorIndex = 0;\n  const newBoxes = [];\n  \n  for (let i = 0; i < 300; i++) {\n    const color = colors[colorIndex++];\n    if (colorIndex >= colors.length) {\n      colorIndex = 0;\n    }\n    \n    const randWidth = Math.random() * 100 + 20;\n    const randHeight = Math.random() * 100 + 20;\n    const randX = Math.random() * width - 20;\n    const randY = Math.random() * height - 20;\n    \n    newBoxes.push({\n      id: i,\n      x: randX,\n      y: randY,\n      width: randWidth,\n      height: randHeight,\n      offset: {\n        x: randWidth / 2,\n        y: randHeight / 2,\n      },\n      fill: color,\n      stroke: 'black',\n      strokeWidth: 4,\n      rotation: 0,\n    });\n  }\n  \n  boxes.value = newBoxes;\n  \n  // Start animation after boxes are created\n  nextTick(() => {\n    if (layer.value) {\n      const angularSpeed = 100;\n      \n      animation = new Konva.Animation((frame) => {\n        const angularDiff = (angularSpeed * frame.timeDiff) / 1000;\n        \n        boxes.value.forEach(box => {\n          box.rotation += angularDiff;\n        });\n      }, layer.value.getNode());\n      \n      animation.start();\n    }\n  });\n});\n\n// Cleanup animation on unmount\nonUnmounted(() => {\n  if (animation) {\n    animation.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Group with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet shows how to create a draggable group containing colored rectangles using Konva in vanilla JavaScript. It sets up a stage, layer, and group, then adds rectangles to the group. Mouse events are used to change the cursor style.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/03_Drag_a_Group.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst group = new Konva.Group({\n  draggable: true,\n});\nlayer.add(group);\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nfor (let i = 0; i < 6; i++) {\n  const box = new Konva.Rect({\n    x: i * 30 + 10,\n    y: i * 18 + 40,\n    width: 100,\n    height: 50,\n    name: colors[i],\n    fill: colors[i],\n    stroke: 'black',\n    strokeWidth: 4,\n  });\n  group.add(box);\n}\n\ngroup.on('mouseover', function () {\n  document.body.style.cursor = 'move';\n});\ngroup.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Performance Drag and Drop with 10,000 Shapes in Vue\nDESCRIPTION: Creates a stress test with 10,000 randomly positioned and colored circles using Konva.js with Vue integration. Uses refs to directly manipulate layer nodes for optimal performance, moving circles between main and drag layers during interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Stress_Test.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <!-- Main layer for all circles -->\n    <v-layer ref=\"mainLayer\">\n      <v-circle\n        v-for=\"circle in circles\"\n        :key=\"circle.id\"\n        :config=\"{\n          id: circle.id,\n          x: circle.x,\n          y: circle.y,\n          radius: 6,\n          fill: circle.fill,\n          draggable: true\n        }\"\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n      />\n    </v-layer>\n    \n    <!-- Empty drag layer that will receive circles during drag -->\n    <v-layer ref=\"dragLayer\" />\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple'];\nconst SHAPE_COUNT = 10000;\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n// Refs for layers\nconst mainLayer = ref(null);\nconst dragLayer = ref(null);\n\n// State for circles\nconst circles = ref([]);\n\n// Initialize circles data\nonMounted(() => {\n  const circlesData = [];\n  \n  // Create 10,000 circles\n  for (let i = 0; i < SHAPE_COUNT; i++) {\n    circlesData.push({\n      id: i,\n      x: Math.random() * stageConfig.width,\n      y: Math.random() * stageConfig.height,\n      radius: 6,\n      fill: COLORS[i % COLORS.length]\n    });\n  }\n  \n  circles.value = circlesData;\n});\n\n// This is not the typical \"Vue way\" of managing components.\n// In a more Vue-friendly approach, we would update state and let Vue handle the DOM.\n// However, for this performance demo, we're directly manipulating the nodes\n// to match the vanilla JS implementation.\nconst handleDragStart = (e) => {\n  const target = e.target;\n  \n  // Move the circle to the drag layer\n  target.moveTo(dragLayer.value.getNode());\n};\n\nconst handleDragEnd = (e) => {\n  const target = e.target;\n  \n  // Move the circle back to the main layer\n  target.moveTo(mainLayer.value.getNode());\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Rule in Konva.js\nDESCRIPTION: Method to get or set the fill rule for a shape (e.g., 'evenodd'). Takes a CanvasFillRule parameter and returns a reference to the Konva.Shape object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Changing Shape Colors on Click with Vanilla Konva.js\nDESCRIPTION: Demonstrates how to change the fill color of shapes when clicked using vanilla JavaScript and Konva.js. The example creates a triangle and circle that toggle between different colors when clicked, implementing event listeners directly on the Konva shape objects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Shape_Color_on_Click.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst triangle = new Konva.RegularPolygon({\n  x: 80,\n  y: 120,\n  sides: 3,\n  radius: 50,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\ntriangle.on('click', function () {\n  const fill = this.fill() === 'yellow' ? '#00D2FF' : 'yellow';\n  this.fill(fill);\n});\n\nlayer.add(triangle);\n\nconst circle = new Konva.Circle({\n  x: 180,\n  y: 120,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\ncircle.on('click', function () {\n  const fill = this.fill() === 'red' ? '#00d00f' : 'red';\n  this.fill(fill);\n});\n\nlayer.add(circle);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva.js\nDESCRIPTION: This snippet demonstrates different ways to cache a node or shape in Konva.js to improve drawing performance, apply filters, or create more accurate hit regions. It shows basic caching, custom bounding box definition, and debugging options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Stage with Vue-Konva\nDESCRIPTION: Creates a draggable canvas stage using Vue-Konva components. Uses Vue's template syntax and setup script to define stage, circle, and text configurations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/05_Drag_a_Stage.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-circle :config=\"circleConfig\" />\n      <v-text :config=\"textConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  draggable: true\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst textConfig = {\n  x: 10,\n  y: 10,\n  text: 'Drag the stage anywhere',\n  fontSize: 20,\n  fontFamily: 'Calibri',\n  fill: 'black'\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva node to an image using the toImage method, which returns a Promise and also accepts a callback function to handle the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Container DOM Element\nDESCRIPTION: Methods to get or set the container DOM element that holds the stage. This allows dynamic changing of the container that wraps the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get container\nvar container = stage.container();\n// set container\nvar container = document.createElement('div');\nbody.appendChild(container);\nstage.container(container);\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Sprites with React and Konva.js\nDESCRIPTION: This snippet shows how to implement animated sprites in a React application using react-konva. It utilizes hooks like useRef and useEffect to manage the sprite instance and control animations, along with the useImage hook to load the sprite sheet.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Sprite.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Sprite } from 'react-konva';\nimport { useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const spriteRef = useRef(null);\n  const [image] = useImage('https://konvajs.org/assets/blob-sprite.png');\n\n  const animations = {\n    idle: [\n      2, 2, 70, 119,      // frame 1\n      71, 2, 74, 119,     // frame 2\n      146, 2, 81, 119,    // frame 3\n      226, 2, 76, 119,    // frame 4\n    ],\n    punch: [\n      2, 138, 74, 122,    // frame 1\n      76, 138, 84, 122,   // frame 2\n      346, 138, 120, 122, // frame 3\n    ],\n  };\n\n  useEffect(() => {\n    if (spriteRef.current) {\n      spriteRef.current.start();\n    }\n  }, [image]);\n\n  const handlePunch = () => {\n    if (spriteRef.current) {\n      const sprite = spriteRef.current;\n      sprite.animation('punch');\n      sprite.on('frameIndexChange.button', function() {\n        if (this.frameIndex() === 2) {\n          setTimeout(() => {\n            sprite.animation('idle');\n            sprite.off('.button');\n          }, 1000 / sprite.frameRate());\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n     \n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Sprite\n            ref={spriteRef}\n            x={50}\n            y={50}\n            image={image}\n            animation=\"idle\"\n            animations={animations}\n            frameRate={7}\n            frameIndex={0}\n          />\n        </Layer>\n      </Stage>\n      <button \n        onClick={handlePunch}\n        style={{ position: 'absolute', top: 0, left: 0 }}\n      >\n        Punch\n      </button>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG with Konva and canvg in Vanilla JavaScript\nDESCRIPTION: This code demonstrates how to render an SVG image both natively and using the canvg library in a Konva stage. It loads the canvg library dynamically, creates a canvas stage, and adds two images to compare the rendering methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/SVG_On_Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Load canvg library\nconst script = document.createElement('script');\nscript.src = 'https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js';\ndocument.head.appendChild(script);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst SOURCE = 'https://konvajs.org/assets/tiger.svg';\n\n// try to draw SVG natively\nKonva.Image.fromURL(SOURCE, (imageNode) => {\n  layer.add(imageNode);\n  imageNode.setAttrs({\n    width: 150,\n    height: 150,\n  });\n});\n\n// draw svg with external library\nscript.onload = () => {\n  const canvas = document.createElement('canvas');\n  canvg(canvas, SOURCE, {\n    renderCallback: function () {\n      const image = new Konva.Image({\n        image: canvas,\n        x: 200,\n        width: 150,\n        height: 150,\n      });\n      layer.add(image);\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Noise Filter with Vue and Konva\nDESCRIPTION: This code demonstrates how to apply a noise filter to a rectangle using Vue and Konva. It shows the necessary component structure, including proper caching in the mounted hook and recaching when properties change during mouse movement. The rectangle changes to a random color when the mouse moves over it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Filters.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage ref=\"stage\" :config=\"stageSize\">\n    <v-layer ref=\"layer\">\n      <v-rect\n        ref=\"rect\"\n        @mousemove=\"handleMouseMove\"\n        :config=\"{\n          filters: filters,\n          noise: 1,\n          x: 10,\n          y: 10,\n          width: 50,\n          height: 50,\n          fill: color,\n          shadowBlur: 10\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nconst width = window.innerWidth;\nconst height = window.innerHeight;\nimport Konva from 'konva';\n\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: width,\n        height: height\n      },\n      color: 'green',\n      filters: [Konva.Filters.Noise]\n    };\n  },\n  methods: {\n    handleMouseMove() {\n      this.color = Konva.Util.getRandomColor();\n      // recache after changing properties\n      const rectNode = this.$refs.rect.getNode();\n      rectNode.cache();\n    }\n  },\n  mounted() {\n    // initial cache\n    const rectNode = this.$refs.rect.getNode();\n    rectNode.cache();\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo/Redo for Draggable Objects with Vue and Konva\nDESCRIPTION: This code demonstrates a Vue.js component that implements undo/redo functionality for a draggable rectangle on a Konva stage. It uses Vue's reactivity system to track position history, with buttons to navigate through previous and next states. The implementation handles edge cases like reaching the beginning or end of the history stack.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Undo-Redo.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"{\n          text: 'undo',\n          x: 10,\n          y: 10\n        }\"\n        @click=\"handleUndo\"\n      />\n      <v-text\n        :config=\"{\n          text: 'redo',\n          x: 50,\n          y: 10\n        }\"\n        @click=\"handleRedo\"\n      />\n      <v-rect\n        :config=\"{\n          x: position.x,\n          y: position.y,\n          width: 50,\n          height: 50,\n          fill: 'black',\n          draggable: true\n        }\"\n        @dragend=\"handleDragEnd\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst position = reactive({ x: 20, y: 20 });\n// We use refs to keep history to avoid unnecessary re-renders\nconst history = ref([{ x: 20, y: 20 }]);\nconst historyStep = ref(0);\n\nconst handleUndo = () => {\n  if (historyStep.value === 0) {\n    return;\n  }\n  historyStep.value -= 1;\n  const previous = history.value[historyStep.value];\n  position.x = previous.x;\n  position.y = previous.y;\n};\n\nconst handleRedo = () => {\n  if (historyStep.value === history.value.length - 1) {\n    return;\n  }\n  historyStep.value += 1;\n  const next = history.value[historyStep.value];\n  position.x = next.x;\n  position.y = next.y;\n};\n\nconst handleDragEnd = (e) => {\n  // Remove all states after current step\n  history.value = history.value.slice(0, historyStep.value + 1);\n  const pos = {\n    x: e.target.x(),\n    y: e.target.y()\n  };\n  // Push the new state\n  history.value = history.value.concat([pos]);\n  historyStep.value += 1;\n  position.x = pos.x;\n  position.y = pos.y;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with Vue-Konva\nDESCRIPTION: This Vue.js implementation demonstrates the same easing functions using Vue-Konva components. It uses Vue 3's Composition API with ref and setup to create interactive rectangles that animate with different easing functions on user interaction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Common_Easings.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <template v-for=\"(easing, i) in easings\" :key=\"i\">\n        <v-rect\n          :config=\"getRectConfig(i)\"\n          @mouseenter=\"handleMouseEnter($event, easing)\"\n          @mouseleave=\"handleMouseLeave($event, easing)\"\n          @touchstart=\"handleMouseEnter($event, easing)\"\n          @touchend=\"handleMouseLeave($event, easing)\"\n          ref=\"rectRefs\"\n        />\n        <v-text :config=\"getTextConfig(easing, i)\" />\n      </template>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst easings = ['Linear', 'EaseIn', 'EaseOut', 'EaseInOut'];\nconst rectRefs = ref([]);\n\nconst getRectConfig = (i) => ({\n  x: 50,\n  y: 50 + i * 80,\n  width: 100,\n  height: 50,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst getTextConfig = (easing, i) => ({\n  x: 160,\n  y: 65 + i * 80,\n  text: easing,\n  fontSize: 16,\n  fontFamily: 'Calibri',\n  fill: 'black'\n});\n\nconst handleMouseEnter = (e, easing) => {\n  new Konva.Tween({\n    node: e.target,\n    duration: 1,\n    x: window.innerWidth - 150,\n    easing: Konva.Easings[easing]\n  }).play();\n};\n\nconst handleMouseLeave = (e, easing) => {\n  new Konva.Tween({\n    node: e.target,\n    duration: 1,\n    x: 50,\n    easing: Konva.Easings[easing]\n  }).play();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the end point for a linear gradient fill in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Konva Shapes with Preserved Stroke in React\nDESCRIPTION: This React component creates two resizable Konva rectangles with preserved stroke sizes. It uses hooks to manage state and refs, and demonstrates both the scale-resetting and stroke-scaling-disabling methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/12_Ignore_Stroke_On_Transform.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect, useState } from 'react';\n\nconst App = () => {\n  const [rect1Size, setRect1Size] = useState({\n    width: 100,\n    height: 100,\n  });\n\n  const rect1Ref = useRef();\n  const rect2Ref = useRef();\n  const tr1Ref = useRef();\n  const tr2Ref = useRef();\n\n  useEffect(() => {\n    tr1Ref.current.nodes([rect1Ref.current]);\n    tr2Ref.current.nodes([rect2Ref.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={rect1Size.width}\n          height={rect1Size.height}\n          fill=\"#00ff00\"\n          stroke=\"black\"\n          strokeWidth={5}\n          draggable\n          ref={rect1Ref}\n          onTransformEnd={(e) => {\n            const node = rect1Ref.current;\n            setRect1Size({\n              width: node.width() * node.scaleX(),\n              height: node.height() * node.scaleY(),\n            });\n            node.scaleX(1);\n            node.scaleY(1);\n          }}\n        />\n        <Transformer ref={tr1Ref} />\n\n        <Rect\n          x={200}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"#ff0000\"\n          stroke=\"black\"\n          strokeWidth={5}\n          draggable\n          strokeScaleEnabled={false}\n          ref={rect2Ref}\n        />\n        <Transformer ref={tr2Ref} ignoreStroke={true} />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Cloning a Konva.js Node\nDESCRIPTION: Shows how to clone a node to create a new instance with identical attributes. Also demonstrates overriding specific properties during cloning to use an existing node as a template.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Names to Konva Nodes in JavaScript\nDESCRIPTION: Shows how to add names to a Konva node. Names work similarly to CSS classes, allowing multiple names to be assigned to a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Zoom with Vanilla KonvaJS\nDESCRIPTION: Creates a stage with a background image that zooms in when hovered over. The zoom follows the mouse position and resets when the mouse leaves. Uses event listeners for mouseenter, mousemove, and mouseleave to control the zoom behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zoom_Layer_On_hover.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = function () {\n  const backgroundImage = new Konva.Image({\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    image: imageObj,\n  });\n  layer.add(backgroundImage);\n};\n\nimageObj.src = 'https://konvajs.org/assets/space.jpg';\n\nconst zoomLevel = 2;\nlayer.on('mouseenter', function () {\n  layer.scale({\n    x: zoomLevel,\n    y: zoomLevel,\n  });\n});\n\nlayer.on('mousemove', function (e) {\n  const pos = stage.getPointerPosition();\n  layer.x(-pos.x);\n  layer.y(-pos.y);\n});\n\nlayer.on('mouseleave', function () {\n  layer.x(0);\n  layer.y(0);\n  layer.scale({\n    x: 1,\n    y: 1,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Mobile Scrolling with Konva in React\nDESCRIPTION: This React component creates a Konva stage with two rectangles: one that prevents default scrolling (green) and another that allows it (red). It uses the 'preventDefault' prop to control this behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Scrolling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={600}\n          fill=\"green\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n        <Rect\n          x={200}\n          y={50}\n          width={100}\n          height={600}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          preventDefault={false}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Finding Single Nodes with findOne Method\nDESCRIPTION: Examples of using the findOne method to select the first matching node by id, name, or using a custom filter function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Cross-Origin Images with Vanilla JavaScript in Konva\nDESCRIPTION: Demonstrates two methods for loading images with CORS support in vanilla JavaScript: using native Image object and Konva's built-in helper method. Both approaches set the crossOrigin attribute to 'Anonymous' to handle CORS.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/posts/Tainted_Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Method 1: native image loading\nconst imageObj = new Image();\nimageObj.onload = () => {\n   const image = new Konva.Image({\n     x: 50,\n     y: 50,\n     image: imageObj\n   });\n   layer.add(image);\n};\nimageObj.crossOrigin = 'Anonymous';\nimageObj.src = url;\n\n// Method 2: using Konva helper method\n// crossOrigin is set automatically to Anonymous\nKonva.Image.fromURL(url, (image) => {\n  image.setAttrs({\n    x: 50,\n    y: 50\n  });\n  layer.add(image);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Filter to Image with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to apply an HSL filter to an image using Konva.js in vanilla JavaScript. It creates a draggable image and adds sliders to control hue, saturation, and luminance values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSL.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.HSL]);\n  \n  // create sliders\n  const createSlider = (label, min, max, defaultValue, property) => {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '20px';\n    \n    const text = document.createElement('span');\n    text.textContent = `${label}: `;\n    container.appendChild(text);\n    \n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = min;\n    slider.max = max;\n    slider.step = '0.1';\n    slider.value = defaultValue;\n    slider.style.width = '200px';\n    \n    slider.addEventListener('input', (e) => {\n      const value = parseFloat(e.target.value);\n      image[property](value);\n    });\n    \n    container.appendChild(slider);\n    return container;\n  };\n\n  const hueSlider = createSlider('Hue', -180, 180, 0, 'hue');\n  hueSlider.style.top = '20px';\n  document.body.appendChild(hueSlider);\n\n  const saturationSlider = createSlider('Saturation', -2, 10, 0, 'saturation');\n  saturationSlider.style.top = '45px';\n  document.body.appendChild(saturationSlider);\n\n  const luminanceSlider = createSlider('Luminance', -2, 2, 0, 'luminance');\n  luminanceSlider.style.top = '70px';\n  document.body.appendChild(luminanceSlider);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Vue Draggable Text Component with KonvaJS\nDESCRIPTION: A Vue component that implements a draggable text element on a canvas using KonvaJS. The text changes color from black to green while being dragged. Uses dragstart and dragend events to track the dragging state.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Drag_And_Drop.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage ref=\"stage\" :config=\"stageSize\">\n    <v-layer ref=\"layer\">\n      <v-text\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n        :config=\"{\n          text: 'Draggable Text',\n          x: 50,\n          y: 50,\n          draggable: true,\n          fill: isDragging ? 'green' : 'black'\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: width,\n        height: height\n      },\n      isDragging: false\n    };\n  },\n  methods: {\n    handleDragStart() {\n      this.isDragging = true;\n    },\n    handleDragEnd() {\n      this.isDragging = false;\n    }\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by Name with Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to select shapes by name using Konva.js. It creates a stage with two circles and a rectangle, each with assigned names, then uses the find() method with the '.myCircle' selector to find and animate only the circle shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Name.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create shapes with names\nconst circle1 = new Konva.Circle({\n  x: 50,\n  y: stage.height() / 2,\n  radius: 30,\n  fill: 'red',\n  name: 'myCircle'\n});\n\nconst circle2 = new Konva.Circle({\n  x: 150,\n  y: stage.height() / 2,\n  radius: 30,\n  fill: 'green',\n  name: 'myCircle'\n});\n\nconst rect = new Konva.Rect({\n  x: 250,\n  y: stage.height() / 2 - 25,\n  width: 50,\n  height: 50,\n  fill: 'blue',\n  name: 'myRect'\n});\n\nlayer.add(circle1);\nlayer.add(circle2);\nlayer.add(rect);\n\n// find all circles by name\nconst circles = layer.find('.myCircle');\ncircles.forEach(circle => {\n  // add animation to circles only\n  circle.to({\n    duration: 1,\n    rotation: 360,\n    easing: Konva.Easings.EaseInOut\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Animated GIF with Vanilla JavaScript and KonvaJS\nDESCRIPTION: Demonstrates loading and rendering an animated GIF on a Konva canvas using the gifler library for GIF parsing. Creates a canvas element to draw GIF frames and uses it as the source for a Konva.Image shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/GIF_On_Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst script = document.createElement('script');\nscript.src = 'https://unpkg.com/gifler@0.1.0/gifler.min.js';\ndocument.head.appendChild(script);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst canvas = document.createElement('canvas');\n\nfunction onDrawFrame(ctx, frame) {\n  canvas.width = frame.width;\n  canvas.height = frame.height;\n  ctx.drawImage(frame.buffer, 0, 0);\n  layer.draw();\n}\n\nscript.onload = () => {\n  gifler('https://konvajs.org/assets/yoda.gif').frames(canvas, onDrawFrame);\n};\n\nconst image = new Konva.Image({\n  image: canvas,\n});\nlayer.add(image);\n```\n\n----------------------------------------\n\nTITLE: Applying Threshold Filter to Image with Konva.js (Vanilla JavaScript)\nDESCRIPTION: This snippet shows how to apply a threshold filter to an image using Konva.js in vanilla JavaScript. It creates a stage, loads an image, applies the threshold filter, and provides a slider for adjusting the threshold value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Threshold.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Threshold]);\n  image.threshold(0.5);\n\n  // create slider\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '20px';\n  container.style.left = '20px';\n  \n  const text = document.createElement('span');\n  text.textContent = 'Threshold: ';\n  container.appendChild(text);\n  \n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '0';\n  slider.max = '1';\n  slider.step = '0.1';\n  slider.value = image.threshold();\n  slider.style.width = '200px';\n  \n  slider.addEventListener('input', (e) => {\n    const value = parseFloat(e.target.value);\n    image.threshold(value);\n  });\n  \n  container.appendChild(slider);\n  document.body.appendChild(container);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Transformer Styling in Vue with vue-konva\nDESCRIPTION: This Vue component creates a Konva stage with a yellow rectangle and a custom-styled transformer. It uses refs to connect the rectangle and transformer, and applies the anchorStyleFunc to customize the appearance of transformer anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/05_Transformer_Complex_Styling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {\n  anchorStyleFunc: (anchor) => {\n    // make all anchors circles\n    anchor.cornerRadius(50);\n    // make all anchors red\n    anchor.fill('red');\n\n    // make right-middle bigger\n    if (anchor.hasName('middle-right')) {\n      anchor.scale({ x: 2, y: 2 });\n    }\n    // make top-left invisible\n    if (anchor.hasName('top-left')) {\n      anchor.scale({ x: 0, y: 0 });\n    }\n  }\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Transformer Styling in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Konva stage with a yellow rectangle and a custom-styled transformer. The anchorStyleFunc is used to modify the appearance of transformer anchors, making them circular, red, and applying specific styles to certain anchor points.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/05_Transformer_Complex_Styling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\nanchorStyleFunc: (anchor) => {\n// make all anchors circles\nanchor.cornerRadius(50);\n// make all anchors red\nanchor.fill('red');\n\n    // make right-middle bigger\n    if (anchor.hasName('middle-right')) {\n      anchor.scale({ x: 2, y: 2 });\n    }\n    // make top-left invisible\n    if (anchor.hasName('top-left')) {\n      anchor.scale({ x: 0, y: 0 });\n    }\n\n},\n});\nlayer.add(tr);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Circle Management with Konva.js and Vue.js\nDESCRIPTION: This Vue.js component creates an interactive canvas using Konva.js. It allows users to create circles, manage them with a context menu, and perform actions like pulsing or deleting. The component uses Vue 3 Composition API with <script setup>.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Context_Menu.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage\n      ref=\"stageRef\"\n      :config=\"stageConfig\"\n      @dblclick=\"handleDblClick\"\n      @contextmenu=\"handleContextMenu\"\n    >\n      <v-layer>\n        <v-circle\n          v-for=\"circle in circles\"\n          :key=\"circle.id\"\n          :config=\"circle\"\n        />\n      </v-layer>\n    </v-stage>\n    <div\n      v-if=\"showMenu\"\n      :style=\"{\n        position: 'absolute',\n        top: menuPosition.y + 'px',\n        left: menuPosition.x + 'px',\n        backgroundColor: 'white',\n        boxShadow: '0 0 5px grey',\n        borderRadius: '3px',\n        zIndex: 10\n      }\"\n      @click.stop\n    >\n      <button\n        :style=\"{\n          width: '100%',\n          backgroundColor: 'white',\n          border: 'none',\n          margin: 0,\n          padding: '10px',\n          cursor: 'pointer'\n        }\"\n        @mouseover=\"e => e.target.style.backgroundColor = 'lightgray'\"\n        @mouseout=\"e => e.target.style.backgroundColor = 'white'\"\n        @click=\"handlePulse\"\n      >\n        Pulse\n      </button>\n      <button\n        :style=\"{\n          width: '100%',\n          backgroundColor: 'white',\n          border: 'none',\n          margin: 0,\n          padding: '10px',\n          cursor: 'pointer'\n        }\"\n        @mouseover=\"e => e.target.style.backgroundColor = 'lightgray'\"\n        @mouseout=\"e => e.target.style.backgroundColor = 'white'\"\n        @click=\"handleDelete\"\n      >\n        Delete\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\nconst stageRef = ref(null);\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n// State for circles and context menu\nconst circles = ref([\n  {\n    id: 'initial-circle',\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2,\n    radius: 50,\n    fill: 'red',\n    shadowBlur: 10\n  }\n]);\nconst menuPosition = ref({ x: 0, y: 0 });\nconst showMenu = ref(false);\nconst selectedId = ref(null);\n\n// Create and cleanup context menu\nonMounted(() => {\n  window.addEventListener('click', handleWindowClick);\n});\n\nonUnmounted(() => {\n  window.removeEventListener('click', handleWindowClick);\n});\n\n// Hide menu on window click\nconst handleWindowClick = () => {\n  showMenu.value = false;\n};\n\n// Handle double click to create a new circle\nconst handleDblClick = (e) => {\n  const stage = e.target.getStage();\n  const pointerPosition = stage.getPointerPosition();\n  const newCircle = {\n    id: Date.now().toString(),\n    x: pointerPosition.x,\n    y: pointerPosition.y,\n    radius: 10 + Math.random() * 30,\n    fill: getRandomColor(),\n    shadowBlur: 10\n  };\n  circles.value.push(newCircle);\n};\n\n// Handle context menu for circles\nconst handleContextMenu = (e) => {\n  e.evt.preventDefault();\n  if (e.target === e.target.getStage()) {\n    return;\n  }\n  \n  const stage = e.target.getStage();\n  const containerRect = stage.container().getBoundingClientRect();\n  const pointerPosition = stage.getPointerPosition();\n  \n  menuPosition.value = {\n    x: containerRect.left + pointerPosition.x + 4,\n    y: containerRect.top + pointerPosition.y + 4\n  };\n  \n  showMenu.value = true;\n  selectedId.value = e.target.id();\n  e.cancelBubble = true;\n};\n\n// Menu action handlers\nconst handlePulse = () => {\n  circles.value = circles.value.map(circle => {\n    if (circle.id === selectedId.value) {\n      return {\n        ...circle,\n        scaleX: 2,\n        scaleY: 2\n      };\n    }\n    return circle;\n  });\n  \n  // Reset scale after animation\n  setTimeout(() => {\n    circles.value = circles.value.map(circle => {\n      if (circle.id === selectedId.value) {\n        return {\n          ...circle,\n          scaleX: 1,\n          scaleY: 1\n        };\n      }\n      return circle;\n    });\n  }, 300);\n};\n\nconst handleDelete = () => {\n  circles.value = circles.value.filter(circle => circle.id !== selectedId.value);\n  showMenu.value = false;\n};\n\n// Utility function for random color\nconst getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Performance Drag and Drop with 10,000 Shapes in Vanilla JavaScript\nDESCRIPTION: Creates a stress test with 10,000 randomly positioned and colored circles using Konva.js. The implementation uses two separate layers - a main layer for all shapes and a dedicated drag layer to ensure smooth movement during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drag_and_Drop_Stress_Test.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\n// Create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n// Create main layer for all shapes\nconst mainLayer = new Konva.Layer();\n\n// Create a dedicated layer for dragging\nconst dragLayer = new Konva.Layer();\n\n// Define colors for random shapes\nconst colors = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'cyan',\n  'purple',\n];\nlet colorIndex = 0;\n\n// Helper function to add a circle to a layer\nfunction addCircle(layer) {\n  const color = colors[colorIndex++];\n  if (colorIndex >= colors.length) {\n    colorIndex = 0;\n  }\n\n  const randX = Math.random() * stage.width();\n  const randY = Math.random() * stage.height();\n  const circle = new Konva.Circle({\n    x: randX,\n    y: randY,\n    radius: 6,\n    fill: color,\n  });\n\n  layer.add(circle);\n}\n\n// Create 10,000 circles on the main layer\nfor (let n = 0; n < 10000; n++) {\n  addCircle(mainLayer);\n}\n\n// Add the main layer and drag layer to the stage\nstage.add(mainLayer);\nstage.add(dragLayer);\n\n// Setup drag and drop behavior\nstage.on('mousedown', function (evt) {\n  const circle = evt.target;\n  \n  // Only handle circle shapes (ignore clicks on empty space)\n  if (!circle || circle.getClassName() !== 'Circle') {\n    return;\n  }\n  \n  // Move the circle to the drag layer\n  circle.moveTo(dragLayer);\n  circle.startDrag();\n});\n\n// When dragging stops, move the circle back to the main layer\nstage.on('mouseup', function (evt) {\n  const circle = evt.target;\n  \n  // Only handle circle shapes\n  if (!circle || circle.getClassName() !== 'Circle') {\n    return;\n  }\n  \n  // Move the circle back to the main layer\n  circle.moveTo(mainLayer);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Border Highlighting with Vue and Konva.js\nDESCRIPTION: This Vue.js implementation uses vue-konva to create draggable images with border highlighting. It manages the images in a reactive array and tracks hover state through a hoveredIndex ref. The component uses dynamic configuration to toggle border visibility on hover.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Border_Highlighting.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer ref=\"layerRef\">\n      <v-image\n        v-for=\"(img, index) in images\"\n        :key=\"index\"\n        :config=\"getImageConfig(img, index)\"\n        @mouseenter=\"handleMouseEnter(index)\"\n        @mouseleave=\"handleMouseLeave(index)\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst layerRef = ref(null);\nconst hoveredIndex = ref(null);\nconst loadedImages = ref({});\n\n// Define image data\nconst images = ref([\n  {\n    src: 'https://konvajs.org/assets/darth-vader.jpg',\n    x: 20,\n    y: 20,\n    width: 200,\n    height: 137\n  },\n  {\n    src: 'https://konvajs.org/assets/yoda.jpg',\n    x: 240,\n    y: 20,\n    width: 93,\n    height: 104\n  }\n]);\n\n// Load images\nonMounted(() => {\n  images.value.forEach((img, index) => {\n    const imageObj = new Image();\n    imageObj.onload = () => {\n      loadedImages.value = {\n        ...loadedImages.value,\n        [index]: imageObj\n      };\n    };\n    imageObj.src = img.src;\n  });\n});\n\n// Get configuration for each image\nconst getImageConfig = (img, index) => {\n  const isHovered = hoveredIndex.value === index;\n  \n  return {\n    image: loadedImages.value[index],\n    x: img.x,\n    y: img.y,\n    width: img.width,\n    height: img.height,\n    stroke: 'red',\n    strokeWidth: 10,\n    strokeEnabled: !isHovered,\n    draggable: true\n  };\n};\n\n// Mouse event handlers\nconst handleMouseEnter = (index) => {\n  hoveredIndex.value = index;\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseLeave = () => {\n  hoveredIndex.value = null;\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Demonstrates how to check if a Konva node has a specific name using the hasName method. This is useful for conditional logic based on node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Applying Mask Filter to Image with Konva.js in Vue.js\nDESCRIPTION: This snippet demonstrates how to use vue-konva to apply a mask filter to an image and create a threshold adjustment slider in a Vue.js component. It uses the composition API with setup script and refs for reactivity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Mask.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Mask],\n            threshold: threshold,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"255\"\n      :value=\"threshold\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst threshold = ref(10);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    // wait for the next DOM update\n    await nextTick();\n    // now the image component is fully updated\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  threshold.value = parseInt(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Node zIndex in Konva.js\nDESCRIPTION: Shows basic usage of the zIndex() method to get and set a node's zIndex in Konva. The examples demonstrate how to retrieve the current zIndex and how to set it to a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/zIndex.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nconst zIndex = shape.zIndex();\n\n// set\nshape.zIndex(1);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Konva.js Performance with Listening False in React\nDESCRIPTION: This React implementation demonstrates the same performance concept using react-konva. It creates 100 blue circles that respond to hover events and 1000 green circles with listening=false for better performance. State management is handled with React hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Listening_False.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [hoveredId, setHoveredId] = useState(null);\n  \n  // Generate circles data\n  const listeningCircles = Array.from({ length: 100 }, (_, i) => ({\n    id: i,\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n  }));\n  \n  const nonListeningCircles = Array.from({ length: 1000 }, (_, i) => ({\n    id: i + 100,\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n  }));\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {/* Circles with event listeners */}\n        {listeningCircles.map((circle) => (\n          <Circle\n            key={circle.id}\n            x={circle.x}\n            y={circle.y}\n            radius={20}\n            fill={hoveredId === circle.id ? 'red' : 'blue'}\n            opacity={0.5}\n            onMouseEnter={() => setHoveredId(circle.id)}\n            onMouseLeave={() => setHoveredId(null)}\n          />\n        ))}\n        \n        {/* Circles without event listeners */}\n        {nonListeningCircles.map((circle) => (\n          <Circle\n            key={circle.id}\n            x={circle.x}\n            y={circle.y}\n            radius={20}\n            fill=\"green\"\n            opacity={0.5}\n            listening={false}\n          />\n        ))}\n        \n        <Text\n          x={10}\n          y={10}\n          text=\"Blue circles (100) have event listeners (hover them)\\nGreen circles (1000) have no listeners (better performance)\"\n          fontSize={16}\n          fill=\"black\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors of a Konva.js Node\nDESCRIPTION: Shows how to find all ancestors (parents and their parents) of a node that match a specific selector. This is useful for traversing the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Konva.js\nDESCRIPTION: Shows how to find all ancestors of a node that match a specific selector. This can be used to traverse up the node hierarchy for specific elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Implementing a RemoveAlpha Filter in Vue with vue-konva\nDESCRIPTION: A Vue.js implementation of the custom RemoveAlpha filter using vue-konva components. This example shows how to apply the filter in a Vue context with refs and watch for image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Custom_Filter.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        ref=\"imageNode\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: image,\n          draggable: true,\n          filters: [Konva.Filters.RemoveAlpha],\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\n// create our custom filter\nKonva.Filters.RemoveAlpha = function (imageData) {\n  const data = imageData.data;\n  for (let i = 0; i < data.length; i += 4) {\n    data[i + 3] = 255; // set alpha to 1\n  }\n};\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Property Animations with Tweens in KonvaJS\nDESCRIPTION: Demonstrates how to animate node properties using the to method, which is a shorter syntax for creating a Konva.Tween object. This example animates a circle's x position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic Shapes with Vue-Konva Components\nDESCRIPTION: This example demonstrates creating various shapes (text, rectangle, circle, and line) with vue-konva. It shows how to configure properties like position, size, color, and special effects like gradients and shadows within a Vue component.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Shapes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"{\n        text: 'Some text on canvas',\n        fontSize: 15\n      }\"/>\n      <v-rect :config=\"{\n        x: 20,\n        y: 50,\n        width: 100,\n        height: 100,\n        fill: 'red',\n        shadowBlur: 10\n      }\"/>\n      <v-circle :config=\"{\n        x: 200,\n        y: 100,\n        radius: 50,\n        fill: 'green'\n      }\"/>\n      <v-line :config=\"{\n        x: 20,\n        y: 200,\n        points: [0, 0, 100, 0, 100, 100],\n        tension: 0.5,\n        closed: true,\n        stroke: 'black',\n        fillLinearGradientStartPoint: { x: -50, y: -50 },\n        fillLinearGradientEndPoint: { x: 50, y: 50 },\n        fillLinearGradientColorStops: [0, 'red', 1, 'yellow']\n      }\"/>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node into an HTML canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Creating Background Component in Vue.js with Konva\nDESCRIPTION: This snippet defines the Background component using Vue.js and Konva. It renders a beach background image with specified dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Background = {\n  template: `<v-image v-if=\"image\" :config=\"imageConfig\" />`,\n  setup() {\n    const [image] = useImage('https://konvajs.org/assets/beach.png');\n    \n    const imageConfig = computed(() => ({\n      image: image.value,\n      width: 578,\n      height: 530\n    }));\n\n    return { image, imageConfig };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position with Konva.js Node\nDESCRIPTION: Demonstrates how to retrieve the absolute position of a node relative to the canvas or a specific ancestor. This helps determine precise positioning within nested structures.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Styling Konva Transformer in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create and style a Konva Transformer using vanilla JavaScript. It sets up a stage, adds a rectangle, and applies a customized transformer with styled border and anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/04_Transformer_Styling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\n// add border\nborderStroke: '#000',\nborderStrokeWidth: 3,\n// add anchors\nanchorFill: '#fff',\nanchorStroke: '#000',\nanchorStrokeWidth: 2,\nanchorSize: 20,\n// make all anchors look like circles\nanchorCornerRadius: 50,\n});\nlayer.add(tr);\n```\n\n----------------------------------------\n\nTITLE: Loading Konva Stage - Vue Implementation\nDESCRIPTION: Implements a Konva stage with a clickable hexagon using Vue 3 composition API. Uses ref for reactive state management and demonstrates Vue-specific component structure.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Complex_Load.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"hexagonConfig\"\n        @click=\"handleClick\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: 578,\n  height: 200\n};\n\nconst hexagonConfig = ref({\n  x: 100,\n  y: 100,\n  sides: 6,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst handleClick = () => {\n  hexagonConfig.value = {\n    ...hexagonConfig.value,\n    fill: Konva.Util.getRandomColor()\n  };\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Destroying a Node in Konva.js\nDESCRIPTION: Demonstrates how to completely remove and destroy a node, including all its children if it's a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Kaleidoscope Power in Konva.js\nDESCRIPTION: Method to get or set the kaleidoscope power for the Konva.Filters.Kaleidoscope filter. It accepts an integer to determine the strength of the kaleidoscope effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nkaleidoscopePower(power)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag, Drop, and Resize Functionality for Images with Konva.js\nDESCRIPTION: This code creates an interactive canvas where images can be dragged and resized using corner anchors. It implements a custom resize functionality by placing anchor points at each corner of the images and updating the image dimensions when these anchors are moved. The implementation includes proper cursor handling and drag behavior management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Resize.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Function to update image size based on anchor movement\nfunction update(activeAnchor) {\n  const group = activeAnchor.getParent();\n\n  const topLeft = group.findOne('.topLeft');\n  const topRight = group.findOne('.topRight');\n  const bottomRight = group.findOne('.bottomRight');\n  const bottomLeft = group.findOne('.bottomLeft');\n  const image = group.findOne('Image');\n\n  const anchorX = activeAnchor.x();\n  const anchorY = activeAnchor.y();\n\n  // Update anchor positions based on which anchor was moved\n  switch (activeAnchor.getName()) {\n    case 'topLeft':\n      topRight.y(anchorY);\n      bottomLeft.x(anchorX);\n      break;\n    case 'topRight':\n      topLeft.y(anchorY);\n      bottomRight.x(anchorX);\n      break;\n    case 'bottomRight':\n      bottomLeft.y(anchorY);\n      topRight.x(anchorX);\n      break;\n    case 'bottomLeft':\n      bottomRight.y(anchorY);\n      topLeft.x(anchorX);\n      break;\n  }\n\n  // Position image at top-left corner\n  image.position(topLeft.position());\n\n  // Update image dimensions\n  const width = topRight.x() - topLeft.x();\n  const height = bottomLeft.y() - topLeft.y();\n  if (width && height) {\n    image.width(width);\n    image.height(height);\n  }\n}\n\n// Function to add resize anchors to a group\nfunction addAnchor(group, x, y, name) {\n  const anchor = new Konva.Circle({\n    x: x,\n    y: y,\n    stroke: '#666',\n    fill: '#ddd',\n    strokeWidth: 2,\n    radius: 8,\n    name: name,\n    draggable: true,\n    dragOnTop: false,\n  });\n\n  // Add event listeners for resize behavior\n  anchor.on('dragmove', function () {\n    update(this);\n  });\n  \n  anchor.on('mousedown touchstart', function () {\n    group.draggable(false);\n    this.moveToTop();\n  });\n  \n  anchor.on('dragend', function () {\n    group.draggable(true);\n  });\n  \n  // Add hover styling\n  anchor.on('mouseover', function () {\n    document.body.style.cursor = 'pointer';\n    this.strokeWidth(4);\n  });\n  \n  anchor.on('mouseout', function () {\n    document.body.style.cursor = 'default';\n    this.strokeWidth(2);\n  });\n\n  group.add(anchor);\n}\n\n// Create Darth Vader Group with Image and anchors\nconst darthVaderImg = new Konva.Image({\n  width: 200,\n  height: 137,\n});\n\nconst darthVaderGroup = new Konva.Group({\n  x: 180,\n  y: 50,\n  draggable: true,\n});\n\nlayer.add(darthVaderGroup);\ndarthVaderGroup.add(darthVaderImg);\n\n// Add anchors at the corners\naddAnchor(darthVaderGroup, 0, 0, 'topLeft');\naddAnchor(darthVaderGroup, 200, 0, 'topRight');\naddAnchor(darthVaderGroup, 200, 137, 'bottomRight');\naddAnchor(darthVaderGroup, 0, 137, 'bottomLeft');\n\n// Create Yoda Group with Image and anchors\nconst yodaImg = new Konva.Image({\n  width: 93,\n  height: 104,\n});\n\nconst yodaGroup = new Konva.Group({\n  x: 20,\n  y: 110,\n  draggable: true,\n});\n\nlayer.add(yodaGroup);\nyodaGroup.add(yodaImg);\n\n// Add anchors at the corners\naddAnchor(yodaGroup, 0, 0, 'topLeft');\naddAnchor(yodaGroup, 93, 0, 'topRight');\naddAnchor(yodaGroup, 93, 104, 'bottomRight');\naddAnchor(yodaGroup, 0, 104, 'bottomLeft');\n\n// Load the images\nconst imageObj1 = new Image();\nimageObj1.onload = function () {\n  darthVaderImg.image(imageObj1);\n};\nimageObj1.src = 'https://konvajs.org/assets/darth-vader.jpg';\n\nconst imageObj2 = new Image();\nimageObj2.onload = function () {\n  yodaImg.image(imageObj2);\n};\nimageObj2.src = 'https://konvajs.org/assets/yoda.jpg';\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Filter to Image with Konva.js in React\nDESCRIPTION: This snippet shows how to apply an HSL filter to an image using Konva.js in a React component. It uses the react-konva library and hooks to manage state and image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSL.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [hue, setHue] = useState(0);\n  const [saturation, setSaturation] = useState(0);\n  const [luminance, setLuminance] = useState(0);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.HSL]}\n            hue={hue}\n            saturation={saturation}\n            luminance={luminance}\n          />\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <div>\n          Hue\n          <input\n            type=\"range\"\n            min=\"-259\"\n            max=\"259\"\n            value={hue}\n            onChange={(e) => setHue(parseInt(e.target.value))}\n          />\n        </div>\n        <div>\n          Saturation\n          <input\n            type=\"range\"\n            min=\"-2\"\n            max=\"10\"\n            step=\"0.1\"\n            value={saturation}\n            onChange={(e) => setSaturation(parseFloat(e.target.value))}\n          />\n        </div>\n        <div>\n          Luminance\n          <input\n            type=\"range\"\n            min=\"-2\"\n            max=\"2\"\n            step=\"0.1\"\n            value={luminance}\n            onChange={(e) => setLuminance(parseFloat(e.target.value))}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Planets Image Map with Vue and Konva\nDESCRIPTION: This snippet demonstrates how to create the same interactive planets image map using Vue.js with vue-konva. It uses Vue's composition API with ref and computed for reactive state management. The application structure mirrors the other implementations with three layers and similar event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Planets_Image_Map.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div :style=\"styles.container\">\n      <label :style=\"styles.label\">\n        <input\n          type=\"checkbox\"\n          :style=\"styles.input\"\n          v-model=\"showOverlay\"\n        />\n        Show map overlay\n      </label>\n    </div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          v-if=\"planetsImage\"\n          :config=\"{ image: planetsImage }\"\n        />\n      </v-layer>\n      <v-layer>\n        <v-circle\n          v-for=\"(planet, name) in planets\"\n          :key=\"name\"\n          :config=\"{\n            x: planet.x,\n            y: planet.y,\n            radius: planet.radius,\n            fill: showOverlay ? 'red' : null,\n          }\"\n          @mouseenter=\"message = name\"\n          @mouseleave=\"message = ''\"\n        />\n      </v-layer>\n      <v-layer>\n        <v-text :config=\"textConfig\" />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst message = ref('');\nconst showOverlay = ref(false);\nconst [planetsImage] = useImage('https://konvajs.org/assets/planets.png');\n\nconst planets = {\n  Mercury: {\n    x: 46,\n    y: 126,\n    radius: 32,\n  },\n  Venus: {\n    x: 179,\n    y: 126,\n    radius: 79,\n  },\n  Earth: {\n    x: 366,\n    y: 127,\n    radius: 85,\n  },\n  Mars: {\n    x: 515,\n    y: 127,\n    radius: 45,\n  },\n};\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst styles = {\n  container: {\n    position: 'absolute',\n    left: '10px',\n    top: '10px',\n    zIndex: 99999,\n  },\n  label: {\n    color: 'white',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '5px',\n    cursor: 'pointer',\n  },\n  input: {\n    cursor: 'pointer',\n  },\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'white',\n}));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Mask Filter to Image with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to load an image, apply a mask filter, and create a slider to adjust the threshold using vanilla JavaScript and Konva.js. It includes setting up a Konva stage, layer, and image, as well as adding event listeners for the slider.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Mask.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Mask]);\n  image.threshold(10);\n\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '0';\n  slider.max = '255';\n  slider.value = image.threshold();\n\n  slider.style.position = 'absolute';\n  slider.style.top = '20px';\n  slider.style.left = '20px';\n\n  slider.addEventListener('input', (e) => {\n    const value = parseInt(e.target.value);\n    image.threshold(value);\n  });\n\n  document.body.appendChild(slider);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tango Animation with Vanilla JavaScript and Konva\nDESCRIPTION: Creates a canvas with randomly generated draggable polygon shapes that animate to random positions when a 'Tango!' button is clicked. The implementation uses Konva's tweening system for smooth animations and demonstrates shape creation, position randomization, and event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tango.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Create button\nconst button = document.createElement('button');\nbutton.textContent = 'Tango!';\nbutton.style.position = 'absolute';\nbutton.style.top = '10px';\nbutton.style.left = '10px';\nbutton.style.padding = '10px';\ndocument.body.appendChild(button);\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\n\nfunction getRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nfunction tango(layer) {\n  layer.getChildren().forEach((shape) => {\n    const radius = Math.random() * 100 + 20;\n    \n    new Konva.Tween({\n      node: shape,\n      duration: 1,\n      x: Math.random() * stage.width(),\n      y: Math.random() * stage.height(),\n      rotation: Math.random() * 360,\n      radius: radius,\n      opacity: (radius - 20) / 100,\n      easing: Konva.Easings.EaseInOut,\n      fill: getRandomColor(),\n    }).play();\n  });\n}\n\n// Create initial shapes\nfor (let n = 0; n < 10; n++) {\n  const radius = Math.random() * 100 + 20;\n  const shape = new Konva.RegularPolygon({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    sides: Math.ceil(Math.random() * 5 + 3),\n    radius: radius,\n    fill: getRandomColor(),\n    opacity: (radius - 20) / 100,\n    draggable: true,\n  });\n\n  layer.add(shape);\n}\n\nbutton.addEventListener('click', () => tango(layer));\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Border Highlighting with React and Konva.js\nDESCRIPTION: This React implementation creates draggable images with hover effects using react-konva. It defines a reusable DraggableImage component that manages its own hover state to toggle border visibility. The component uses react-konva-utils to easily load images.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Image_Border_Highlighting.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useImage } from 'react-konva-utils';\n\nconst DraggableImage = ({ src, x, y, width, height }) => {\n  const [image] = useImage(src);\n  const [isHovered, setIsHovered] = useState(false);\n  \n  return (\n    <Image\n      image={image}\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      stroke=\"red\"\n      strokeWidth={10}\n      strokeEnabled={!isHovered}\n      draggable\n      onMouseEnter={() => {\n        setIsHovered(true);\n        document.body.style.cursor = 'pointer';\n      }}\n      onMouseLeave={() => {\n        setIsHovered(false);\n        document.body.style.cursor = 'default';\n      }}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <DraggableImage\n          src=\"https://konvajs.org/assets/darth-vader.jpg\"\n          x={20}\n          y={20}\n          width={200}\n          height={137}\n        />\n        <DraggableImage\n          src=\"https://konvajs.org/assets/yoda.jpg\"\n          x={240}\n          y={20}\n          width={93}\n          height={104}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Checking if Node is Visible on Screen in Konva.js\nDESCRIPTION: Demonstrates how to determine if a node is currently visible in the user's viewport using the isClientRectOnScreen method, with optional margin parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Selection and Transformation with Konva.js (React)\nDESCRIPTION: This React component implements the same functionality as the vanilla JavaScript version, allowing for shape selection, transformation, and caching using Konva.js within a React application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Resizing_Stress_Test.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\nimport { Stage, Layer, Circle, Group, Transformer, Rect } from 'react-konva';\nimport Konva from 'konva';\n\nconst App = () => {\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapes, setSelectedShapes] = useState([]);\n  const [selectionRect, setSelectionRect] = useState({\n    visible: false,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n  });\n  \n  const groupRef = useRef();\n  const trRef = useRef();\n  const layerRef = useRef();\n  const topLayerRef = useRef();\n  const selectionRectRef = useRef();\n  \n  // Generate initial shapes\n  useEffect(() => {\n    const initialShapes = [];\n    for (let i = 0; i < 10000; i++) {\n      initialShapes.push({\n        id: i,\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        radius: 10,\n        fill: Konva.Util.getRandomColor(),\n        stroke: null,\n        name: 'shape',\n      });\n    }\n    setShapes(initialShapes);\n  }, []);\n\n  useEffect(() => {\n    if (selectedShapes.length > 0 && groupRef.current) {\n      trRef.current.nodes([groupRef.current]);\n      groupRef.current.cache();\n    } else {\n      trRef.current.nodes([]);\n      if (groupRef.current) {\n        groupRef.current.clearCache();\n      }\n    }\n  }, [selectedShapes]);\n\n  const handleMouseDown = (e) => {\n    // do nothing if we mousedown on transformer or on the group\n    const clickedOnTransformer = e.target.getParent() === trRef.current;\n    const clickedOnGroup = e.target.parent === groupRef.current;\n    \n    if (clickedOnTransformer || clickedOnGroup) {\n      return;\n    }\n    \n    const pointerPos = e.target.getStage().getPointerPosition();\n    setSelectionRect({\n      visible: true,\n      x1: pointerPos.x,\n      y1: pointerPos.y,\n      x2: pointerPos.x,\n      y2: pointerPos.y,\n    });\n\n    // move old selection back to original layer\n    if (groupRef.current && selectedShapes.length > 0) {\n      const updatedShapes = [...shapes];\n      const transform = groupRef.current.getAbsoluteTransform();\n      \n      selectedShapes.forEach(selectedShape => {\n        const shapeIndex = updatedShapes.findIndex(s => s.id === selectedShape.id);\n        if (shapeIndex !== -1) {\n          const shape = updatedShapes[shapeIndex];\n          const absPos = transform.point({ x: shape.x, y: shape.y });\n          const scale = transform.decompose().scaleX;\n          \n          updatedShapes[shapeIndex] = {\n            ...shape,\n            x: absPos.x,\n            y: absPos.y,\n            radius: shape.radius * scale,\n            stroke: null\n          };\n        }\n      });\n      \n      setShapes(updatedShapes);\n      setSelectedShapes([]);\n    }\n\n    // reset group transforms\n    if (groupRef.current) {\n      groupRef.current.setAttrs({\n        x: 0,\n        y: 0,\n        scaleX: 1,\n        scaleY: 1,\n        rotation: 0,\n      });\n      groupRef.current.clearCache();\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (!selectionRect.visible) {\n      return;\n    }\n    \n    const pointerPos = e.target.getStage().getPointerPosition();\n    setSelectionRect({\n      ...selectionRect,\n      x2: pointerPos.x,\n      y2: pointerPos.y,\n    });\n  };\n\n  const handleMouseUp = (e) => {\n    if (!selectionRect.visible) {\n      return;\n    }\n    \n    // hide selection rectangle with timeout, so we can check it in click event\n    setTimeout(() => {\n      setSelectionRect({\n        ...selectionRect,\n        visible: false,\n      });\n    });\n\n    var shapes = e.target.getStage().find('.shape');\n    // Create box manually instead of using getClientRect()\n    var box = {\n      x: Math.min(selectionRect.x1, selectionRect.x2),\n      y: Math.min(selectionRect.y1, selectionRect.y2),\n      width: Math.abs(selectionRect.x2 - selectionRect.x1),\n      height: Math.abs(selectionRect.y2 - selectionRect.y1)\n    };\n\n    // remove all children for better performance\n    layerRef.current.removeChildren();\n\n    // then check intersections and add all shape into correct container\n    shapes.forEach((shape) => {\n      var intersected = Konva.Util.haveIntersection(\n        box,\n        shape.getClientRect()\n      );\n      if (intersected) {\n        groupRef.current.add(shape);\n        shape.stroke('blue');\n      } else {\n        layerRef.current.add(shape);\n        shape.stroke(null);\n      }\n    });\n\n    if (groupRef.current.children.length) {\n      trRef.current.nodes([groupRef.current]);\n      groupRef.current.cache();\n    } else {\n      trRef.current.nodes([]);\n      groupRef.current.clearCache();\n    }\n  };\n\n  const handleClick = (e) => {\n    // if we are selecting with rect, do nothing\n    if (selectionRect.visible) {\n      return;\n    }\n\n    // if click on empty area - remove all selections\n    if (e.target === e.target.getStage()) {\n      if (groupRef.current && selectedShapes.length > 0) {\n        const updatedShapes = [...shapes];\n        const transform = groupRef.current.getAbsoluteTransform();\n        \n        selectedShapes.forEach(selectedShape => {\n          const shapeIndex = updatedShapes.findIndex(s => s.id === selectedShape.id);\n          if (shapeIndex !== -1) {\n            const shape = updatedShapes[shapeIndex];\n            const absPos = transform.point({ x: shape.x, y: shape.y });\n            const scale = transform.decompose().scaleX;\n            \n            updatedShapes[shapeIndex] = {\n              ...shape,\n              x: absPos.x,\n              y: absPos.y,\n              radius: shape.radius * scale,\n              stroke: null\n            };\n          }\n        });\n        \n        setShapes(updatedShapes);\n      }\n      \n      setSelectedShapes([]);\n      trRef.current.nodes([]);\n      if (groupRef.current) {\n\n\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva.js for Performance Optimization\nDESCRIPTION: Examples of how to cache Konva.js nodes to improve drawing performance, apply filters, or create more accurate hit regions. Shows various configuration options including custom bounding boxes and debugging borders.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Touch Events with Vanilla JavaScript and Konva.js\nDESCRIPTION: This code demonstrates how to implement mobile touch events using vanilla JavaScript with Konva.js. It creates a stage with a triangle and circle that respond to different touch events. The triangle tracks touch movement coordinates while the circle responds to touchstart and touchend events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\n\nconst triangle = new Konva.RegularPolygon({\n  x: 80,\n  y: 120,\n  sides: 3,\n  radius: 80,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nconst circle = new Konva.Circle({\n  x: 230,\n  y: 100,\n  radius: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\ntriangle.on('touchmove', function () {\n  const touchPos = stage.getPointerPosition();\n  const x = touchPos.x;\n  const y = touchPos.y;\n  writeMessage('x: ' + x + ', y: ' + y);\n});\n\ncircle.on('touchstart', function () {\n  writeMessage('touchstart circle');\n});\ncircle.on('touchend', function () {\n  writeMessage('touchend circle');\n});\n\nlayer.add(triangle);\nlayer.add(circle);\nlayer.add(text);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Drag Constraints with Konva\nDESCRIPTION: A React implementation showing how to constrain draggable text objects to horizontal and vertical movement only. It uses react-konva components and defines separate handler functions for each constraint type.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/07_Simple_Drag_Bounds.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\n\nconst App = () => {\n  const handleHorizontalDragMove = (e) => {\n    e.target.y(50);\n  };\n\n  const handleVerticalDragMove = (e) => {\n    e.target.x(200);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={50}\n          text=\"Drag me horizontally\"\n          fontSize={16}\n          draggable\n          fill=\"black\"\n          onDragMove={handleHorizontalDragMove}\n        />\n        <Text\n          x={200}\n          y={50}\n          text=\"Drag me vertically\"\n          fontSize={16}\n          draggable\n          fill=\"black\"\n          onDragMove={handleVerticalDragMove}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangles with Vue-Konva\nDESCRIPTION: Demonstrates rectangle creation using Vue-Konva components. Uses Vue's template syntax and setup script to configure the same three rectangles with various properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Rect.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect :config=\"rect1Config\" />\n      <v-rect :config=\"rect2Config\" />\n      <v-rect :config=\"rect3Config\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rect1Config = {\n  x: 20,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst rect2Config = {\n  x: 150,\n  y: 40,\n  width: 100,\n  height: 50,\n  fill: 'red',\n  shadowBlur: 10,\n  cornerRadius: 10\n};\n\nconst rect3Config = {\n  x: 50,\n  y: 120,\n  width: 100,\n  height: 100,\n  fill: 'blue',\n  cornerRadius: [0, 10, 20, 30]\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Star Spinner with React and Konva.js\nDESCRIPTION: This React implementation uses react-konva components to create an interactive spinning star. It utilizes refs to manage the animation state and implement physics for the star's rotation, providing smooth movement and deceleration with the same functionality as the vanilla version.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Star_Spinner.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star, Circle } from 'react-konva';\nimport { useEffect, useRef, useState } from 'react';\n\nconst App = () => {\n  const [controlled, setControlled] = useState(false);\n  const starRef = useRef(null);\n  const animRef = useRef(null);\n  const lastRotationRef = useRef(0);\n  const angularVelocityRef = useRef(6);\n\n  useEffect(() => {\n    // disable degree mode to use radians\n    Konva.angleDeg = false;\n\n    // start animation after 1 second\n    const timeout = setTimeout(() => {\n      if (!starRef.current) return;\n\n      const layer = starRef.current.getLayer();\n\n      animRef.current = new Konva.Animation((frame) => {\n        const star = starRef.current;\n        if (!star) return;\n\n        // 20% slow down per second\n        const angularFriction = 0.2;\n        const angularVelocityChange =\n          (angularVelocityRef.current * frame.timeDiff * (1 - angularFriction)) / 1000;\n        angularVelocityRef.current -= angularVelocityChange;\n\n        if (controlled) {\n          const rotation = star.rotation();\n          angularVelocityRef.current =\n            ((rotation - lastRotationRef.current) * 1000) / frame.timeDiff;\n          lastRotationRef.current = rotation;\n        } else {\n          star.rotate((frame.timeDiff * angularVelocityRef.current) / 1000);\n          lastRotationRef.current = star.rotation();\n        }\n      }, layer);\n\n      animRef.current.start();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeout);\n      if (animRef.current) {\n        animRef.current.stop();\n      }\n    };\n  }, [controlled]);\n\n  const handleMouseDown = () => {\n    if (!starRef.current) return;\n    angularVelocityRef.current = 0;\n    lastRotationRef.current = starRef.current.rotation();\n    setControlled(true);\n  };\n\n  const handleMouseUp = () => {\n    if (!starRef.current) return;\n    lastRotationRef.current = starRef.current.rotation();\n    setControlled(false);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!controlled || !starRef.current) return;\n\n    const stage = e.target.getStage();\n    const mousePos = stage.getPointerPosition();\n    const star = starRef.current;\n    const x = star.x() - mousePos.x;\n    const y = star.y() - mousePos.y;\n    star.rotation(0.5 * Math.PI + Math.atan(y / x));\n\n    if (mousePos.x <= stage.width() / 2) {\n      star.rotate(Math.PI);\n    }\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseUp={handleMouseUp}\n      onTouchEnd={handleMouseUp}\n      onMouseMove={handleMouseMove}\n      onTouchMove={handleMouseMove}\n    >\n      <Layer>\n        <Star\n          ref={starRef}\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          outerRadius={80}\n          innerRadius={40}\n          stroke=\"#005500\"\n          fill=\"#b5ff88\"\n          strokeWidth={4}\n          numPoints={5}\n          lineJoin=\"round\"\n          shadowOffsetX={5}\n          shadowOffsetY={5}\n          shadowBlur={10}\n          shadowColor=\"black\"\n          shadowOpacity={0.5}\n          opacity={0.8}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n        />\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={3}\n          fill=\"#555\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Konva.js Node is Visible on Screen\nDESCRIPTION: Demonstrates how to check if a node is currently visible in the user's viewport, with optional margin parameters to expand the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Events in Vue with Konva\nDESCRIPTION: Vue 3 implementation of a movable circle using vue-konva components. Uses Vue's composition API with ref and computed properties for state management and event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Keyboard_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage\n    :config=\"stageSize\"\n    ref=\"stageRef\"\n    @keydown=\"handleKeyDown\"\n  >\n    <v-layer>\n      <v-circle :config=\"circleConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\n\nconst stageRef = ref(null);\nconst position = ref({\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n});\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = computed(() => ({\n  x: position.value.x,\n  y: position.value.y,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n}));\n\nonMounted(() => {\n  const container = stageRef.value.getNode().container();\n  // make it focusable\n  container.tabIndex = 1;\n  // focus it\n  container.focus();\n});\n\nconst handleKeyDown = (e) => {\n  const DELTA = 4;\n  \n  switch (e.keyCode) {\n    case 37: // left\n      position.value.x -= DELTA;\n      break;\n    case 38: // up\n      position.value.y -= DELTA;\n      break;\n    case 39: // right\n      position.value.x += DELTA;\n      break;\n    case 40: // down\n      position.value.y += DELTA;\n      break;\n    default:\n      return;\n  }\n  e.preventDefault();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wedge Shape with Vanilla JavaScript in Konva\nDESCRIPTION: This snippet demonstrates how to create a wedge shape using vanilla JavaScript with Konva. It sets up a stage and layer, then creates a red wedge with a 60-degree angle positioned at the center of the screen with a black stroke and negative rotation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Wedge.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst wedge = new Konva.Wedge({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  angle: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  rotation: -120\n});\n\nlayer.add(wedge);\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll by Edge Drag with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to implement auto-scrolling when dragging objects to the edge of a Konva.js stage using vanilla JavaScript. The code creates a stage with multiple draggable circles and uses an interval to check if a dragged object is near any edge, then scrolls the stage accordingly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scroll_By_Edge_Drag.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst NUMBER = 100;\n\nfunction generateNode() {\n  return new Konva.Circle({\n    x: stage.width() * (Math.random() * 2 - 1),\n    y: stage.height() * (Math.random() * 2 - 1),\n    radius: 40,\n    fill: 'red',\n    stroke: 'black',\n    draggable: true,\n  });\n}\n\nfor (let i = 0; i < NUMBER; i++) {\n  layer.add(generateNode());\n}\n\nlet scrollInterval = null;\n\nstage.on('dragstart', (e) => {\n  const duration = 1000 / 60;\n  scrollInterval = setInterval(() => {\n    const pos = stage.getPointerPosition();\n    const offset = 100;\n    \n    const isNearLeft = pos.x < offset;\n    if (isNearLeft) {\n      stage.x(stage.x() + 2);\n      e.target.x(e.target.x() - 2);\n    }\n    \n    const isNearRight = pos.x > stage.width() - offset;\n    if (isNearRight) {\n      stage.x(stage.x() - 2);\n      e.target.x(e.target.x() + 2);\n    }\n    \n    const isNearTop = pos.y < offset;\n    if (isNearTop) {\n      stage.y(stage.y() + 2);\n      e.target.y(e.target.y() - 2);\n    }\n    \n    const isNearBottom = pos.y > stage.height() - offset;\n    if (isNearBottom) {\n      stage.y(stage.y() - 2);\n      e.target.y(e.target.y() + 2);\n    }\n  }, duration);\n});\n\nstage.on('dragend', () => {\n  clearInterval(scrollInterval);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Pixel Detection for Image Events in Vanilla JavaScript with Konva\nDESCRIPTION: This code creates a canvas with two images (a monkey and a lion) and demonstrates the difference between standard event detection and transparent pixel detection using the drawHitFromCache() method. The lion image uses drawHitFromCache() to only trigger mouseover events on non-transparent pixels.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Image_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\nlayer.add(text);\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\nconst imageObj1 = new Image();\nimageObj1.onload = () => {\n  const monkey = new Konva.Image({\n    x: 120,\n    y: 50,\n    image: imageObj1,\n    width: 200,\n    height: 200,\n  });\n\n  monkey.on('mouseover', function () {\n    writeMessage('mouseover monkey (regular image)');\n  });\n  monkey.on('mouseout', function () {\n    writeMessage('');\n  });\n\n  layer.add(monkey);\n};\nimageObj1.crossOrigin = 'Anonymous';\nimageObj1.src = 'https://konvajs.org/assets/monkey.png';\n\nconst imageObj2 = new Image();\nimageObj2.onload = () => {\n  const lion = new Konva.Image({\n    x: 320,\n    y: 50,\n    image: imageObj2,\n    width: 200,\n    height: 200,\n  });\n\n  // override color detection region\n  lion.on('mouseover', function () {\n    writeMessage('mouseover lion (with transparent pixels detection)');\n  });\n  lion.on('mouseout', function () {\n    writeMessage('');\n  });\n\n  layer.add(lion);\n  lion.cache();\n  lion.drawHitFromCache();\n};\nimageObj2.crossOrigin = 'Anonymous';\nimageObj2.src = 'https://konvajs.org/assets/lion.png';\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Frame Component with React and Konva.js\nDESCRIPTION: A React implementation of a window frame visualization component. It shows a window frame with glass, controls dimensions through inputs, displays measurement arrows, and allows clicking labels to edit dimensions via overlay inputs.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\ncreateOverlay={createOverlay}\n            />\n          </Group>\n        </Layer>\n      </Stage>\n            {/* Input controls */}\n      <DimensionControls \n        dimensions={dimensions} \n        dispatch={dispatch} \n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes on Konva.js Nodes\nDESCRIPTION: Shows how to set multiple attributes at once on a Konva.js node using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Vue.js Implementation of Emboss Filter with Konva.js\nDESCRIPTION: This Vue.js component utilizes vue-konva to apply an emboss filter to an image. It uses Vue's reactive system to handle filter parameters through computed properties and watchers, and renders controls for adjusting the emboss strength, white level, and blend dynamically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Emboss.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    \n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Emboss],\n            embossStrength: embossValues.strength,\n            embossWhiteLevel: embossValues.whiteLevel,\n            embossDirection: 'top-left',\n            embossBlend: embossValues.blend,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div :style=\"{ position: 'absolute', top: '20px', left: '20px' }\">\n      <div v-for=\"control in controls\" :key=\"control.label\" :style=\"{ margin: '10px' }\">\n        <label>{{ control.label }}: </label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          :value=\"control.value\"\n          @input=\"(e) => updateValue(control.prop, parseFloat(e.target.value))\"\n          :style=\"{ width: '200px' }\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nconst embossValues = ref({\n  strength: 0.5,\n  whiteLevel: 0.5,\n  blend: 0.5,\n});\n\nconst controls = computed(() => [\n  { label: 'Strength', prop: 'strength', value: embossValues.value.strength },\n  { label: 'White Level', prop: 'whiteLevel', value: embossValues.value.whiteLevel },\n  { label: 'Blend', prop: 'blend', value: embossValues.value.blend },\n]);\n\nconst updateValue = (prop, value) => {\n  embossValues.value[prop] = value;\n};\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Animation with Konva in Vue 3\nDESCRIPTION: This snippet illustrates how to implement a circular animation using Konva in a Vue 3 component. It uses the Composition API with ref and lifecycle hooks to set up and manage the animation of a rectangle moving in a circle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Create_an_Animation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-rect\n        ref=\"rectRef\"\n        :config=\"rectConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = ref({\n  x: 50,\n  y: 50,\n  width: 50,\n  height: 50,\n  fill: 'green'\n});\n\nconst layerRef = ref(null);\nconst rectRef = ref(null);\nlet anim = null;\n\nonMounted(() => {\n  anim = new Konva.Animation((frame) => {\n    const time = frame.time;\n    const timeDiff = frame.timeDiff;\n    const frameRate = frame.frameRate;\n    \n    // Example: move rectangle in a circle\n    const radius = 50;\n    const x = radius * Math.cos(frame.time * 2 * Math.PI / 2000) + 100;\n    const y = radius * Math.sin(frame.time * 2 * Math.PI / 2000) + 100;\n    rectRef.value.getNode().position({ x, y });\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Kaleidoscope Filter with React and KonvaJS\nDESCRIPTION: React implementation of a kaleidoscope filter using react-konva. Uses hooks for state management and includes slider controls for adjusting the kaleidoscope effect. Demonstrates proper image caching and filter application in a React context.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Kaleidoscope.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [angle, setAngle] = useState(0);\n  const [power, setPower] = useState(3);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Kaleidoscope]}\n            kaleidoscopePower={power}\n            kaleidoscopeAngle={angle}\n          />\n        </Layer>\n      </Stage>\n      <div style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        <div>\n          Power\n          <input\n            type=\"range\"\n            min=\"2\"\n            max=\"8\"\n            step=\"1\"\n            value={power}\n            onChange={(e) => setPower(parseInt(e.target.value))}\n            style={{ width: '200px' }}\n          />\n        </div>\n        <div>\n          Angle\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"360\"\n            step=\"0.1\"\n            value={angle}\n            onChange={(e) => setAngle(parseFloat(e.target.value))}\n            style={{ width: '200px' }}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Spline (Curved Line) with KonvaJS\nDESCRIPTION: Shows how to create curved lines by adding the tension property to the line configuration. The tension parameter controls the curvature of the line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst line = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  tension: 1\n});\n\nlayer.add(line);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Visibility in KonvaJS\nDESCRIPTION: Shows how to check if a node is visible in the viewport, with optional margin parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Caching Konva Node for Performance in JavaScript\nDESCRIPTION: Method to cache a Konva node to improve drawing performance, apply filters, or create more accurate hit regions. For basic shapes, the cache canvas size is automatically detected. Custom shapes require manual bounding box specification.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X Position of a Konva.js Node\nDESCRIPTION: Demonstrates how to get and set just the x coordinate of a node's position. This is a shorthand for setting only the horizontal position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Managing Opacity of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the opacity of a Konva node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Rotating Rectangles with Vue-Konva\nDESCRIPTION: Vue implementation of the rotation animation using vue-konva components. Uses ref, onMounted, and onUnmounted composables to manage component lifecycle and animation. Configuration objects are defined using refs for reactivity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Rotation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-rect\n        ref=\"blueRectRef\"\n        :config=\"blueRectConfig\"\n      />\n      <v-rect\n        ref=\"yellowRectRef\"\n        :config=\"yellowRectConfig\"\n      />\n      <v-rect\n        ref=\"redRectRef\"\n        :config=\"redRectConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst blueRectConfig = ref({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: {\n    x: 0,\n    y: 0,\n  }\n});\n\nconst yellowRectConfig = ref({\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: {\n    x: 50,\n    y: 25,\n  }\n});\n\nconst redRectConfig = ref({\n  x: 350,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: {\n    x: -50,\n    y: 25,\n  }\n});\n\nconst layerRef = ref(null);\nconst blueRectRef = ref(null);\nconst yellowRectRef = ref(null);\nconst redRectRef = ref(null);\nlet anim = null;\n\nonMounted(() => {\n  const angularSpeed = 90;\n  anim = new Konva.Animation((frame) => {\n    const angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n    blueRectRef.value.getNode().rotate(angleDiff);\n    yellowRectRef.value.getNode().rotate(angleDiff);\n    redRectRef.value.getNode().rotate(angleDiff);\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Node ID in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's global ID property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Adding New Images with Random Positioning\nDESCRIPTION: Adds a new image to the canvas with random x and y coordinates. The function creates a copy of the images array, adds a new image object with random positioning and no filter, and saves the updated state to history.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleAdd = () => {\n  const newImages = [...images.value, {\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    filter: 'none'\n  }];\n  images.value = newImages;\n  saveHistory(newImages);\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Noise Filter to Images with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to load an image, apply a noise filter, and create a slider to adjust the noise level using vanilla JavaScript with Konva.js. The code caches the image and applies the Noise filter from Konva.Filters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Noise.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Noise]);\n  image.noise(0.3);\n\n  // create slider\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '20px';\n  container.style.left = '20px';\n  \n  const text = document.createElement('span');\n  text.textContent = 'Noise: ';\n  container.appendChild(text);\n  \n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '0';\n  slider.max = '1';\n  slider.step = '0.1';\n  slider.value = image.noise();\n  slider.style.width = '200px';\n  \n  slider.addEventListener('input', (e) => {\n    const value = parseFloat(e.target.value);\n    image.noise(value);\n  });\n  \n  container.appendChild(slider);\n  document.body.appendChild(container);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Building KonvaJS Stage with Vue Components\nDESCRIPTION: This code demonstrates how to implement a KonvaJS stage using Vue.js components. It creates a canvas with a red circle and leverages Vue's reactivity system to update the circle's color when clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Simple_Load.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle\n        :config=\"circleConfig\"\n        @click=\"handleClick\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: 400,\n  height: 400\n};\n\nconst circleConfig = ref({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 3\n});\n\nconst handleClick = () => {\n  circleConfig.value = {\n    ...circleConfig.value,\n    fill: Konva.Util.getRandomColor()\n  };\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node, which accounts for scaling of all ancestor nodes. Returns an object with x and y scale values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Syncing in svelte-konva\nDESCRIPTION: This snippet demonstrates how to use the staticConfig prop to disable automatic syncing of the config object with Konva's internal state. The Rect component is configured with static properties that won't be updated after drag events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Bindings.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { Stage, Layer, Rect } from 'svelte-konva';\n\n  // x and y values will not be synced with actual position after dragend\n  const config = { x: 100, y: 100, width: 400, height: 200, fill: 'blue', draggable: true };\n</script>\n\n<Stage config={{ width: window.innerWidth, height: window.innerHeight }}>\n  <Layer>\n    <Rect {config} staticConfig />\n  </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Managing Default Browser Behavior in KonvaJS\nDESCRIPTION: Shows how to control whether a shape prevents default browser behavior on pointer events. By default, shapes prevent actions like scrolling during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Measurement Info Component with KonvaJS\nDESCRIPTION: Component that displays measurement information and arrows using KonvaJS shapes. Handles dimension labels and interactive overlays.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nconst MeasurementInfo = ({ width, height, dimensions, createOverlay }) => {\n  const offset = 20;\n  const arrowOffset = offset / 2;\n  const arrowSize = 5;\n  \n  const handleLabelClick = useCallback((metric, e) => {\n    const pos = e.target.getAbsolutePosition();\n    const size = e.target.getSize();\n    createOverlay(metric, pos, size);\n  }, [createOverlay]);\n  \n  return (\n    <Group>\n      <Shape\n        sceneFunc={(ctx, shape) => {\n          ctx.fillStyle = 'grey';\n          ctx.lineWidth = 0.5;\n          \n          ctx.moveTo(0, 0);\n          ctx.lineTo(-offset, 0);\n          \n          ctx.moveTo(0, height);\n          ctx.lineTo(-offset, height);\n          \n          ctx.moveTo(0, height);\n          ctx.lineTo(0, height + offset);\n          \n          ctx.moveTo(width, height);\n          ctx.lineTo(width, height + offset);\n          \n          ctx.stroke();\n        }}\n      />\n      \n      {/* Shape components and labels */}\n    </Group>\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Scale in KonvaJS\nDESCRIPTION: Shows how to get and set the scale of a node in both x and y dimensions, allowing for non-uniform scaling and size adjustments without changing the underlying dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Shape Group with React-Konva\nDESCRIPTION: This code shows how to implement a draggable group containing a circle and rectangle using React with react-konva. The component renders a Stage with a Layer containing the Group with nested Circle and Rect components, maintaining the same positioning as the vanilla JavaScript example.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Group.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Circle, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group x={50} y={50} draggable>\n          <Circle x={0} y={0} radius={30} fill=\"red\" />\n          <Rect x={20} y={20} width={100} height={50} fill=\"green\" />\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Multi-touch Scale Shape Implementation with Vue and KonvaJS\nDESCRIPTION: Vue implementation of the multi-touch scaling functionality using vue-konva. Uses Vue composition API with refs for reactive state management and implements touch event handlers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Shape.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: 190,\n          y: stageSize.height / 2,\n          sides: 3,\n          radius: 80,\n          fill: shapes.triangle.fill,\n          stroke: shapes.triangle.stroke,\n          strokeWidth: 4,\n          draggable: true,\n          name: 'triangle',\n          scaleX: shapes.triangle.scaleX,\n          scaleY: shapes.triangle.scaleY\n        }\"\n        @tap=\"handleTap('triangle')\"\n      />\n      // ... rest of the Vue implementation\n```\n\n----------------------------------------\n\nTITLE: Toggling Event Listening with React-Konva\nDESCRIPTION: This snippet shows how to implement togglable event listening on a Konva shape using React. It uses the React-Konva library and React state to control whether the ellipse listens for mouse events, updating a text message when the mouse interacts with the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Listen_for_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Ellipse, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [listening, setListening] = useState(false);\n\n  return (\n    <>\n      <button onClick={() => setListening(!listening)}>\n        {listening ? 'Stop listening' : 'Listen'}\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Text\n            x={10}\n            y={10}\n            fontFamily=\"Calibri\"\n            fontSize={24}\n            text={message}\n            fill=\"black\"\n          />\n          <Ellipse\n            x={window.innerWidth / 2}\n            y={window.innerHeight / 2}\n            radiusX={100}\n            radiusY={50}\n            fill=\"yellow\"\n            stroke=\"black\"\n            strokeWidth={4}\n            listening={listening}\n            onMouseover={() => setMessage('Mouseover oval')}\n            onMouseout={() => setMessage('')}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Node PreventDefault in KonvaJS\nDESCRIPTION: Examples of getting and setting whether a node prevents default browser behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Moving a Konva.js Node to Another Container\nDESCRIPTION: Demonstrates how to move a node from its current container to a different container. This is useful for transferring nodes between layers or groups.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon with Vanilla Konva.js\nDESCRIPTION: This code snippet demonstrates how to create a closed polygon using the Konva.Line class with vanilla JavaScript. It sets up a stage, adds a layer, and creates a blue polygon with a black stroke by providing an array of x,y coordinate pairs and setting the closed property to true.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Polygon.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst polygon = new Konva.Line({\n  points: [73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true\n});\n\nlayer.add(polygon);\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Shape Group with Vue-Konva\nDESCRIPTION: This code demonstrates how to create a draggable group of shapes using Vue.js with vue-konva. It uses the Vue composition API with setup script to define configuration objects for the stage, group, circle, and rectangle components, which are then referenced in the template.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Group.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group :config=\"groupConfig\">\n        <v-circle :config=\"circleConfig\" />\n        <v-rect :config=\"rectConfig\" />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst groupConfig = {\n  x: 50,\n  y: 50,\n  draggable: true\n};\n\nconst circleConfig = {\n  x: 0,\n  y: 0,\n  radius: 30,\n  fill: 'red'\n};\n\nconst rectConfig = {\n  x: 20,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green'\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Text Elements with React-Konva\nDESCRIPTION: This code shows how to create text elements in a React application using react-konva. It demonstrates the component-based approach to creating a stage with simple text and complex text with a styled background rectangle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Text.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Text, Rect } from 'react-konva';\n\nconst text = `COMPLEX TEXT\n\nAll the world's a stage, and all the men and women merely players. They have their exits and their entrances.`;\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={window.innerWidth / 2}\n          y={15}\n          text=\"Simple Text\"\n          fontSize={30}\n          fontFamily=\"Calibri\"\n          fill=\"green\"\n          offsetX={60} // Approximate half width\n        />\n        <Rect\n          x={20}\n          y={60}\n          stroke=\"#555\"\n          strokeWidth={5}\n          fill=\"#ddd\"\n          width={300}\n          height={200} // Approximate height\n          shadowColor=\"black\"\n          shadowBlur={10}\n          shadowOffsetX={10}\n          shadowOffsetY={10}\n          shadowOpacity={0.2}\n          cornerRadius={10}\n        />\n        <Text\n          x={20}\n          y={60}\n          text={text}\n          fontSize={18}\n          fontFamily=\"Calibri\"\n          fill=\"#555\"\n          width={300}\n          padding={20}\n          align=\"center\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Solarize Filter to Image with Konva.js (Vue)\nDESCRIPTION: This code snippet demonstrates how to apply a solarize filter to an image using Konva.js in a Vue.js application. It uses the vue-konva library and Composition API to manage state and image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Solarize.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Solarize],\n            threshold: threshold,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"1\"\n      step=\"0.1\"\n      :value=\"threshold\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst threshold = ref(0.5);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  threshold.value = parseFloat(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Flipping in React with Konva\nDESCRIPTION: This React component uses react-konva to create flippable text elements. It manages the text properties in state, including scaleX values that control horizontal orientation. A button handler inverts the scaleX values to create the flipping effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Mirror_Canvas_Shape.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\nimport { useState, useRef } from 'react';\n\nconst App = () => {\n  const [texts, setTexts] = useState([\n    {\n      id: 1,\n      text: 'Default text with no offset. Its origin is in top left corner.',\n      x: 180,\n      y: 50,\n      width: 200,\n      align: 'center',\n      scaleX: 1,\n      offsetX: 0\n    },\n    {\n      id: 2,\n      text: 'Text with the origin in its center',\n      x: 270,\n      y: 100,\n      width: 200,\n      align: 'center',\n      scaleX: 1,\n      offsetX: 100 // Half of the width to center it\n    }\n  ]);\n\n  const handleFlip = () => {\n    setTexts(texts.map(text => ({\n      ...text,\n      scaleX: -text.scaleX\n    })));\n  };\n\n  return (\n    <div>\n      \n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {texts.map((text) => (\n            <Text\n              key={text.id}\n              x={text.x}\n              y={text.y}\n              text={text.text}\n              width={text.width}\n              align={text.align}\n              scaleX={text.scaleX}\n              offsetX={text.offsetX}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <button\n        onClick={handleFlip}\n        style={{\n          position: 'absolute',\n          top: '5px',\n          left: '5px'\n        }}\n      >\n        Flip horizontally\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Calculating Image Crop Dimensions in JavaScript\nDESCRIPTION: A function that calculates crop coordinates and dimensions based on a target size and position. It takes image dimensions, desired size, and position ('left-top', 'center-middle', etc.) to determine exact cropping parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  newWidth = image.height * aspectRatio;\n  newHeight = image.height;\n}\n\nlet x = 0;\nlet y = 0;\nif (clipPosition === 'left-top') {\n  x = 0;\n  y = 0;\n} else if (clipPosition === 'left-middle') {\n  x = 0;\n  y = (image.height - newHeight) / 2;\n} else if (clipPosition === 'left-bottom') {\n  x = 0;\n  y = image.height - newHeight;\n} else if (clipPosition === 'center-top') {\n  x = (image.width - newWidth) / 2;\n  y = 0;\n} else if (clipPosition === 'center-middle') {\n  x = (image.width - newWidth) / 2;\n  y = (image.height - newHeight) / 2;\n} else if (clipPosition === 'center-bottom') {\n  x = (image.width - newWidth) / 2;\n  y = image.height - newHeight;\n} else if (clipPosition === 'right-top') {\n  x = image.width - newWidth;\n  y = 0;\n} else if (clipPosition === 'right-middle') {\n  x = image.width - newWidth;\n  y = (image.height - newHeight) / 2;\n} else if (clipPosition === 'right-bottom') {\n  x = image.width - newWidth;\n  y = image.height - newHeight;\n}\n\nreturn {\n  cropX: x,\n  cropY: y,\n  cropWidth: newWidth,\n  cropHeight: newHeight,\n};\n```\n\n----------------------------------------\n\nTITLE: Rotating Rectangles with Vanilla KonvaJS\nDESCRIPTION: Creates a canvas stage with three rectangles (blue, yellow, and red) that rotate continuously around different pivot points using Konva.Animation. The blue rectangle rotates around its top-left corner, yellow around its center, and red around an outside point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Rotation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// blue rectangle - rotate around top-left corner\nconst blueRect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 50,\nfill: '#00D2FF',\nstroke: 'black',\nstrokeWidth: 4,\noffset: {\nx: 0,\ny: 0,\n},\n});\n\n// yellow rectangle - rotate around center\nconst yellowRect = new Konva.Rect({\nx: 200,\ny: 50,\nwidth: 100,\nheight: 50,\nfill: 'yellow',\nstroke: 'black',\nstrokeWidth: 4,\noffset: {\nx: 50,\ny: 25,\n},\n});\n\n// red rectangle - rotate around point outside shape\nconst redRect = new Konva.Rect({\nx: 350,\ny: 50,\nwidth: 100,\nheight: 50,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\noffset: {\nx: -50,\ny: 25,\n},\n});\n\nlayer.add(blueRect);\nlayer.add(yellowRect);\nlayer.add(redRect);\n\nconst angularSpeed = 90;\nconst anim = new Konva.Animation(function(frame) {\nconst angleDiff = (frame.timeDiff * angularSpeed) / 1000;\nblueRect.rotate(angleDiff);\nyellowRect.rotate(angleDiff);\nredRect.rotate(angleDiff);\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Examples showing how to clone nodes with optional property overrides\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Invert Filter to Image using Konva.js in Vue\nDESCRIPTION: This Vue component uses vue-konva to create a stage and layer, and applies an invert filter to an image. It uses the useImage composable for image loading and ref for accessing the Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Invert.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"image\"\n        ref=\"imageNode\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: image,\n          draggable: true,\n          filters: [Konva.Filters.Invert],\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Toggling Image Filters on Click in Konva.js\nDESCRIPTION: Toggles blur filter on and off when an image is clicked. The function creates a copy of the images array, toggles the filter property of the clicked image between 'none' and 'blur', and saves the new state to history.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleClick = (index) => {\n  const newImages = [...images.value];\n  newImages[index] = {\n    ...newImages[index],\n    filter: newImages[index].filter === 'none' ? 'blur' : 'none'\n  };\n  images.value = newImages;\n  saveHistory(newImages);\n};\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events with Vue-Konva\nDESCRIPTION: Demonstrates custom event implementation using Vue 3 with vue-konva components. Uses template refs to access the Konva node and fire events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Fire_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"fireCustomEvent\">Fire Custom Event</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-circle\n          ref=\"circleRef\"\n          :config=\"circleConfig\"\n          @customEvent=\"handleCustomEvent\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst circleRef = ref(null);\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleCustomEvent = () => {\n  alert('custom event fired');\n};\n\nconst fireCustomEvent = () => {\n  circleRef.value.getNode().fire('customEvent', {\n    bubbles: true,\n  });\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying HSV Filter to Images with Vanilla JavaScript and Konva.js\nDESCRIPTION: This code loads an image, applies a HSV filter, and creates interactive sliders to adjust the hue, saturation, and value in real-time. It demonstrates how to cache a node before applying filters and how to create dynamic UI controls for filter manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/HSV.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.HSV]);\n  \n  // create sliders\n  const createSlider = (label, min, max, defaultValue, property) => {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '20px';\n    \n    const text = document.createElement('span');\n    text.textContent = `${label}: `;\n    container.appendChild(text);\n    \n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = min;\n    slider.max = max;\n    slider.step = '0.1';\n    slider.value = defaultValue;\n    slider.style.width = '200px';\n    \n    slider.addEventListener('input', (e) => {\n      const value = parseFloat(e.target.value);\n      image[property](value);\n    });\n    \n    container.appendChild(slider);\n    return container;\n  };\n\n  const hueSlider = createSlider('Hue', -180, 180, 0, 'hue');\n  hueSlider.style.top = '20px';\n  document.body.appendChild(hueSlider);\n\n  const saturationSlider = createSlider('Saturation', -2, 10, 0, 'saturation');\n  saturationSlider.style.top = '45px';\n  document.body.appendChild(saturationSlider);\n\n  const value = createSlider('Value', -2, 2, 0, 'value');\n  value.style.top = '70px';\n  document.body.appendChild(value);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Snaps\nDESCRIPTION: Shows how to configure rotation snap angles for the transformer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar rotationSnaps = transformer.rotationSnaps();\n\n// set\ntransformer.rotationSnaps([0, 90, 180, 270]);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Height\nDESCRIPTION: Methods to set and get the height of the clipping region for a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);\n```\n\n----------------------------------------\n\nTITLE: Converting Nodes to Canvas in Konva.js\nDESCRIPTION: Example showing how to convert a node to a canvas element\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows different ways to fire events on a node, including standard events, custom events with data, and events that bubble through the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Wedge Shape with React-Konva\nDESCRIPTION: This code demonstrates how to create a wedge shape using React with the react-konva library. It creates a component that renders a Stage containing a Layer with a red Wedge component positioned at the center of the screen with specific styling properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Wedge.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Wedge } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Wedge\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          angle={60}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          rotation={-120}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Konva.Stage Instance\nDESCRIPTION: Constructor for creating a new Konva.Stage instance, which serves as the root container for all layers in a Konva.js application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Stage(config)\n```\n\n----------------------------------------\n\nTITLE: Using Native 2D Canvas with Vue-Konva\nDESCRIPTION: Vue implementation that creates a native canvas in the onMounted lifecycle hook, performs 2D context drawing operations, and uses it as the source for a Konva Image component with reactive position handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Native_Context_Access.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        :config=\"{\n          x: position.x,\n          y: position.y,\n          image: canvas,\n          draggable: true,\n        }\"\n        @dragend=\"handleDragEnd\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst position = ref({ x: 50, y: 50 });\nconst canvas = ref(null);\n\nonMounted(() => {\n  const canvasEl = document.createElement('canvas');\n  canvasEl.width = 200;\n  canvasEl.height = 150;\n  const ctx = canvasEl.getContext('2d');\n\n  // make manual drawings\n  ctx.fillStyle = 'blue';\n  ctx.fillRect(5, 5, canvasEl.width - 10, canvasEl.height / 2);\n  ctx.fillStyle = 'red';\n  ctx.beginPath();\n  ctx.arc(100, 75, 50, 0, 2 * Math.PI);\n  ctx.fill();\n\n  canvas.value = canvasEl;\n});\n\nconst handleDragEnd = (e) => {\n  position.value = {\n    x: e.target.x(),\n    y: e.target.y(),\n  };\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Transformer Anchor Position Control\nDESCRIPTION: Example showing how to control anchor position with anchorDragBoundFunc to limit movement along x-axis\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Resize_Snaps.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntransformer.anchorDragBoundFunc(function (oldAbsPos, newAbsPos, event) {\n  return {\n    x: 0,\n    y: newAbsolutePosition.y,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Skew for Konva Nodes\nDESCRIPTION: Shows how to get and set the skew (shear) transformation of a Konva node on both axes simultaneously for creating non-rectangular shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing History Management for Undo/Redo Functionality\nDESCRIPTION: Manages the history state for undo/redo operations. The function takes a new image state, slices the history array to remove any future states that were undone, and adds the new state to the history array.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst saveHistory = (newImages) => {\n  const newHistory = history.value.slice(0, historyStep.value + 1);\n  newHistory.push(JSON.stringify(newImages));\n  history.value = newHistory;\n  historyStep.value = newHistory.length - 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva.js Shape in JavaScript\nDESCRIPTION: Illustrates how to draw a hit graph using the cached scene canvas for a Konva.js Shape. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Skew for Konva Nodes\nDESCRIPTION: Shows how to get and set the vertical skew (shear) transformation of a Konva node using the skewY method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Creating a Star Shape with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates how to create a star shape using vue-konva in a Vue.js application. It uses v-stage, v-layer, and v-star components to render a star with specific configuration properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Star.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-star :config=\"starConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst starConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  numPoints: 5,\n  innerRadius: 30,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Node Offset Y in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's vertical offset position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Partial Implementation of Animals on the Beach Game with Vue and vue-konva\nDESCRIPTION: The beginning of a Vue implementation of the Animals on the Beach game. This snippet shows the Animal component structure which would handle the draggable animal behavior in a Vue.js context.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// Animal.vue component\nconst Animal = {\n  template: `<v-image\n    :config=\"imageConfig\"\n    @dragstart=\"handleDragStart\"\n    @dragend=\"handleDragEnd\"\n    @mouseover=\"handleMouseOver\"\n    @mouseout=\"handleMouseOut\"\n    @dragmove=\"handleDragMove\"\n  />`,\n  props: ['name', 'startX', 'startY', 'outline'],\n  emits: ['score'],\n  setup(props, { emit }) {\n    const pos = ref({ x: props.startX, y: props.startY });\n    const isDraggable = ref(true);\n    const inRightPlace = ref(false);\n    \n    const [image] = useImage(`https://konvajs.org/assets/${props.name}.png`);\n    const [glowImage] = useImage(`https://konvajs.org/assets/${props.name}-glow.png`);\n    \n    const imageConfig = computed(() => ({\n      image: image.value,\n      x: pos.value.x,\n      y: pos.value.y,\n      draggable: isDraggable.value\n    }));\n\n    const isNearOutline = (pos, outline) => {\n      const { x, y } = pos;\n      return (\n        x > outline.x - 20 &&\n        x < outline.x + 20 &&\n        y > outline.y - 20 &&\n        y < outline.y + 20\n      );\n    };\n\n    const handleDragStart = (e) => e.target.moveToTop();\n    \n    const handleDragEnd = (e) => {\n      const newPos = { x: e.target.x(), y: e.target.y() };\n      pos.value = newPos;\n      \n      if (!inRightPlace.value && isNearOutline(newPos, props.outline)) {\n        pos.value = { x: props.outline.x, y: props.outline.y };\n        inRightPlace.value = true;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Filter Function for Konva\nDESCRIPTION: A simple example showing the structure of a filter function that takes ImageData as input and modifies it. This pattern is used to create custom filters in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Custom_Filter.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Filter(imageData) {\n  // do something with image data\n  imageData.data[0] = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Brighten Filter to Image with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to load an image, apply a brighten filter, and create an interactive slider to adjust the brightness using Konva.js in vanilla JavaScript. It uses the Konva.Filters.Brighten filter and sets up event listeners for real-time adjustment.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Brighten.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Brighten]);\n  image.brightness(0.3);\n\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '-1';\n  slider.max = '1';\n  slider.step = '0.1';\n  slider.value = image.brightness();\n\n  slider.style.position = 'absolute';\n  slider.style.top = '20px';\n  slider.style.left = '20px';\n\n  slider.addEventListener('input', (e) => {\n    const value = parseFloat(e.target.value);\n    image.brightness(value);\n  });\n\n  document.body.appendChild(slider);\n};\n\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Moving Shapes Between Containers - Vanilla KonvaJS Implementation\nDESCRIPTION: Creates a stage with two draggable groups (yellow and blue) and a red rectangle that can be moved between them using buttons. Uses the moveTo() method for direct manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Change_Containers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst group1 = new Konva.Group({\nx: 50,\ny: 50,\ndraggable: true,\n});\n\nconst yellow = new Konva.Rect({\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\nstrokeWidth: 4,\n});\ngroup1.add(yellow);\n\nconst group2 = new Konva.Group({\nx: 200,\ny: 50,\ndraggable: true,\n});\n\nconst blue = new Konva.Rect({\nwidth: 100,\nheight: 100,\nfill: 'blue',\nstroke: 'black',\nstrokeWidth: 4,\n});\ngroup2.add(blue);\n\nconst redBox = new Konva.Rect({\nx: 10,\ny: 10,\nwidth: 30,\nheight: 30,\nfill: 'red',\n});\ngroup1.add(redBox);\n\nlayer.add(group1);\nlayer.add(group2);\nstage.add(layer);\n\nconst moveToGroup1Btn = document.createElement('button');\nmoveToGroup1Btn.textContent = 'Move to yellow group';\nmoveToGroup1Btn.addEventListener('click', () => {\nredBox.moveTo(group1);\n});\n\nconst moveToGroup2Btn = document.createElement('button');\nmoveToGroup2Btn.textContent = 'Move to blue group';\nmoveToGroup2Btn.addEventListener('click', () => {\nredBox.moveTo(group2);\n});\n```\n\n----------------------------------------\n\nTITLE: Resizing Text with Konva Transformer in React\nDESCRIPTION: This example shows how to implement text resizing functionality in a React application using react-konva. It uses React hooks (useState, useRef, useEffect) to manage the text width and transformer references, resetting scale and updating width during transformation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/11_Resize_Text.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Transformer } from 'react-konva';\nimport { useRef, useEffect, useState } from 'react';\n\nconst App = () => {\n  const [textWidth, setTextWidth] = useState(200);\n  const textRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([textRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={50}\n          text=\"Hello from Konva! Try to resize me.\"\n          fontSize={24}\n          draggable\n          width={textWidth}\n          ref={textRef}\n          onTransform={() => {\n            const node = textRef.current;\n            setTextWidth(node.width() * node.scaleX());\n            node.scaleX(1);\n          }}\n        />\n        <Transformer\n          ref={trRef}\n          enabledAnchors={['middle-left', 'middle-right']}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Height in KonvaJS\nDESCRIPTION: Shows how to get and set the height of a node. This directly affects the rendered size of the node on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Creating Images with Konva in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to load and display images in Konva using vanilla JavaScript. It shows two methods: the main API where you create an Image object manually and handle the onload event, and the alternative fromURL method that simplifies image loading.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Image.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// main API:\nconst imageObj = new Image();\nimageObj.onload = function () {\n  const yoda = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    width: 106,\n    height: 118\n  });\n\n  layer.add(yoda);\n};\nimageObj.src = 'https://konvajs.org/assets/yoda.jpg';\n\n// alternative API:\nKonva.Image.fromURL('https://konvajs.org/assets/darth-vader.jpg', function (darthNode) {\n  darthNode.setAttrs({\n    x: 200,\n    y: 50,\n    scaleX: 0.5,\n    scaleY: 0.5,\n    cornerRadius: 20\n  });\n  layer.add(darthNode);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Visibility in Konva.js\nDESCRIPTION: Shows how to set and get the visibility state of a node. This allows for showing and hiding elements without removing them from the scene graph.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Applying Enhance Filter to Image with Konva.js in Vue\nDESCRIPTION: This snippet demonstrates how to apply an enhance filter to an image using Konva.js in a Vue component. It uses the vue-konva library and composition API to create a stage, add an image, apply the enhance filter, and use a slider to control the enhance value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Enhance.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Enhance],\n            enhance: enhance,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"-1\"\n      max=\"1\"\n      step=\"0.1\"\n      :value=\"enhance\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst enhance = ref(0.4);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  enhance.value = parseFloat(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Computed Properties for Image Crop Processing\nDESCRIPTION: Vue.js code that loads an image and computes crop values based on the image dimensions, target size, and position settings. It uses a useImage hook to load an external image and a computed property to dynamically recalculate crop dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { image } = useImage('https://konvajs.org/assets/darth-vader.jpg');\n\nconst crop = computed(() => {\n  if (!image.value) return {};\n  return getCrop(image.value, size.value, position.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: This snippet shows how to get the position of the first pointer (mouse or touch) relative to the local coordinates of the current node in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with Konva.js in React\nDESCRIPTION: This React component creates a Konva stage with text nodes, each assigned a different easing function. It uses useRef and useEffect hooks to manage tweens and text references, and includes a button to trigger the animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Easings.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const tweensRef = useRef([]);\n  const textsRef = useRef([]);\n\n  const easings = [\n    'Linear',\n    'EaseIn',\n    'EaseOut',\n    'EaseInOut',\n    'BackEaseIn',\n    'BackEaseOut',\n    'BackEaseInOut',\n    'ElasticEaseIn',\n    'ElasticEaseOut',\n    'ElasticEaseInOut',\n    'BounceEaseIn',\n    'BounceEaseOut',\n    'BounceEaseInOut',\n    'StrongEaseIn',\n    'StrongEaseOut',\n    'StrongEaseInOut',\n  ];\n\n  useEffect(() => {\n    tweensRef.current = textsRef.current.map((text, i) => {\n      return new Konva.Tween({\n        node: text,\n        duration: 2,\n        x: window.innerWidth - 200,\n        easing: Konva.Easings[easings[i]],\n      });\n    });\n  }, []);\n\n  const handlePlay = () => {\n    tweensRef.current.forEach((tween) => {\n      tween.reset();\n      tween.play();\n    });\n  };\n\n  return (\n    <>\n      <button onClick={handlePlay}>Play</button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {easings.map((easing, i) => (\n            <Text\n              key={i}\n              ref={(node) => (textsRef.current[i] = node)}\n              x={50}\n              y={30 + i * 25}\n              text={easing}\n              fontSize={16}\n              fontFamily=\"Calibri\"\n              fill=\"black\"\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Relative Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the position of a Konva node relative to its parent. This is the standard positioning method for nodes within containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipping Functions with Vue.js in Konva.js\nDESCRIPTION: This snippet demonstrates how to use clipping functions in a Vue.js component with vue-konva. It creates a stage with a layer containing a group that has a clipping function. The group contains 20 randomly positioned and sized green circles (blobs).\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Function.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group :config=\"groupConfig\">\n        <v-circle\n          v-for=\"(blob, i) in blobs\"\n          :key=\"i\"\n          :config=\"blob\"\n        />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst groupConfig = {\n  clipFunc: (ctx) => {\n    ctx.beginPath();\n    ctx.arc(200, 120, 50, 0, Math.PI * 2, false);\n    ctx.arc(280, 120, 50, 0, Math.PI * 2, false);\n  }\n};\n\nconst blobs = Array.from({ length: 20 }, () => ({\n  x: Math.random() * window.innerWidth,\n  y: Math.random() * window.innerHeight,\n  radius: Math.random() * 50,\n  fill: 'green',\n  opacity: 0.8\n}));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Strokes in Konva.js\nDESCRIPTION: Shows how to create and configure linear gradient strokes for Konva shapes by setting color stops at different positions along the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Frame Component with Vue 3 and Konva.js\nDESCRIPTION: A Vue 3 implementation using Composition API and Konva.js to create an interactive window frame visualization. It renders a window frame with glass, displays dynamic measurement labels, provides input controls, and allows editing dimensions by clicking on labels.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_6\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n  <div ref=\"containerRef\" style=\"position: relative; width: 100%; height: 100%\">\n    <div :style=\"controlsStyle\">\n      <div :style=\"inputStyle\">\n        Width:\n        <input \n          type=\"number\"\n          v-model=\"dimensions.width\"\n          @input=\"updateCanvas\"\n        />\n      </div>\n      <div :style=\"inputStyle\">\n        Height:\n        <input \n          type=\"number\"\n          v-model=\"dimensions.height\"\n          @input=\"updateCanvas\"\n        />\n      </div>\n    </div>\n    \n    <v-stage :config=\"stageConfig\">\n      <v-layer>\n        <v-group :config=\"mainGroupConfig\">\n          <v-group :config=\"frameScaleConfig\">\n            <v-rect :config=\"glassConfig\" />\n            <v-line\n              v-for=\"(line, i) in frameLines\"\n              :key=\"i\"\n              :config=\"line\"\n            />\n          </v-group>\n          \n          <!-- Info elements -->\n          <v-shape :config=\"linesConfig\" />\n          <v-shape :config=\"leftArrowConfig\" />\n          <v-shape :config=\"bottomArrowConfig\" />\n          \n          <!-- Labels -->\n          <v-label :config=\"heightLabelConfig\" @click=\"handleLabelClick('height', $event)\">\n            <v-tag :config=\"tagConfig\" />\n            <v-text :config=\"heightTextConfig\" />\n          </v-label>\n          \n          <v-label :config=\"widthLabelConfig\" @click=\"handleLabelClick('width', $event)\">\n            <v-tag :config=\"tagConfig\" />\n            <v-text :config=\"widthTextConfig\" />\n          </v-label>\n        </v-group>\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, reactive, onMounted, onBeforeUnmount, watch } from 'vue';\n\nconst containerRef = ref(null);\nconst stageSize = reactive({\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst dimensions = reactive({\n  width: 1000,\n  height: 2000\n});\n\nconst inputOverlay = ref(null);\n\nconst padding = 70;\nconst offset = 20;\nconst arrowOffset = offset / 2;\nconst arrowSize = 5;\n\n// Style objects\nconst inputStyle = {\n  float: 'left',\n  padding: '10px'\n};\n\nconst controlsStyle = {\n  position: 'absolute',\n  top: '4px',\n  left: '4px',\n  zIndex: 100\n};\n\n// Window frame calculations\nconst frameCalculation = computed(() => {\n  const wr = stageSize.width / dimensions.width;\n  const hr = stageSize.height / dimensions.height;\n\n  const ratio = Math.min(wr, hr) * 0.8;\n\n  const frameOnScreenWidth = dimensions.width * ratio;\n  const frameOnScreenHeight = dimensions.height * ratio;\n\n  const x = Math.round(stageSize.width / 2 - frameOnScreenWidth / 2) + 0.5;\n  const y = Math.round(stageSize.height / 2 - frameOnScreenHeight / 2) + 0.5;\n\n  return {\n    scale: ratio,\n    position: { x, y },\n    screenWidth: frameOnScreenWidth,\n    screenHeight: frameOnScreenHeight\n  };\n});\n\n// Stage config\nconst stageConfig = computed(() => ({\n  width: stageSize.width,\n  height: stageSize.height\n}));\n\n// Main group\nconst mainGroupConfig = computed(() => ({\n  x: frameCalculation.value.position.x,\n  y: frameCalculation.value.position.y\n}));\n\n// Frame scale group\nconst frameScaleConfig = computed(() => ({\n  scaleX: frameCalculation.value.scale,\n  scaleY: frameCalculation.value.scale\n}));\n\n// Glass config\nconst glassConfig = computed(() => ({\n  x: padding,\n  y: padding,\n  width: dimensions.width - padding * 2,\n  height: dimensions.height - padding * 2,\n  fill: 'lightblue'\n}));\n\n// Frame lines\nconst frameLines = computed(() => [\n  // Top line\n  {\n    points: [\n      0, 0,\n      dimensions.width, 0,\n      dimensions.width - padding, padding,\n      padding, padding\n    ],\n    fill: 'white',\n    closed: true,\n    stroke: 'black',\n    strokeWidth: 1\n  },\n  // Left line\n  {\n    points: [\n      0, 0,\n      padding, padding,\n      padding, dimensions.height - padding,\n      0, dimensions.height\n    ],\n    fill: 'white',\n    closed: true,\n    stroke: 'black',\n    strokeWidth: 1\n  },\n  // Bottom line\n  {\n    points: [\n      0, dimensions.height,\n      padding, dimensions.height - padding,\n      dimensions.width - padding, dimensions.height - padding,\n      dimensions.width, dimensions.height\n    ],\n    fill: 'white',\n    closed: true,\n    stroke: 'black',\n    strokeWidth: 1\n  },\n  // Right line\n  {\n    points: [\n      dimensions.width, 0,\n      dimensions.width, dimensions.height,\n      dimensions.width - padding, dimensions.height - padding,\n      dimensions.width - padding, padding\n    ],\n    fill: 'white',\n    closed: true,\n    stroke: 'black',\n    strokeWidth: 1\n  }\n]);\n\n// Info elements\nconst linesConfig = computed(() => ({\n  sceneFunc: function(ctx, shape) {\n    const frameWidth = frameCalculation.value.screenWidth;\n    const frameHeight = frameCalculation.value.screenHeight;\n    \n    ctx.fillStyle = 'grey';\n    ctx.lineWidth = 0.5;\n\n    ctx.moveTo(0, 0);\n    ctx.lineTo(-offset, 0);\n\n    ctx.moveTo(0, frameHeight);\n    ctx.lineTo(-offset, frameHeight);\n\n    ctx.moveTo(0, frameHeight);\n    ctx.lineTo(0, frameHeight + offset);\n\n    ctx.moveTo(frameWidth, frameHeight);\n    ctx.lineTo(frameWidth, frameHeight + offset);\n\n    ctx.stroke();\n  }\n}));\n\nconst leftArrowConfig = computed(() => ({\n  sceneFunc: function(ctx, shape) {\n    const frameHeight = frameCalculation.value.screenHeight;\n    \n    // top pointer\n    ctx.moveTo(-arrowOffset - arrowSize, arrowSize);\n    ctx.lineTo(-arrowOffset, 0);\n    ctx.lineTo(-arrowOffset + arrowSize, arrowSize);\n\n    // line\n    ctx.moveTo(-arrowOffset, 0);\n    ctx.lineTo(-arrowOffset, frameHeight);\n\n    // bottom pointer\n    ctx.moveTo(-arrowOffset - arrowSize, frameHeight - arrowSize);\n    ctx.lineTo(-arrowOffset, frameHeight);\n    ctx.lineTo(-arrowOffset + arrowSize, frameHeight - arrowSize);\n\n    ctx.strokeShape(shape);\n  },\n  stroke: 'grey',\n  strokeWidth: 0.5\n}));\n\nconst bottomArrowConfig = computed(() => ({\n  sceneFunc: function(ctx, shape) {\n    const frameWidth = frameCalculation.value.screenWidth;\n    const frameHeight = frameCalculation.value.screenHeight;\n    \n    // translate for bottom arrow\n    ctx.translate(0, frameHeight + arrowOffset);\n    \n    // left pointer\n    ctx.moveTo(arrowSize, -arrowSize);\n    ctx.lineTo(0, 0);\n    ctx.lineTo(arrowSize, arrowSize);\n\n    // line\n    ctx.moveTo(0, 0);\n    ctx.lineTo(frameWidth, 0);\n\n    // right pointer\n    ctx.moveTo(frameWidth - arrowSize, -arrowSize);\n    ctx.lineTo(frameWidth, 0);\n    ctx.lineTo(frameWidth - arrowSize, arrowSize);\n\n    ctx.strokeShape(shape);\n  },\n  stroke: 'grey',\n  strokeWidth: 0.5\n}));\n\n// Label config\nconst tagConfig = {\n  fill: 'white',\n  stroke: 'grey'\n};\n\nconst heightLabelConfig = computed(() => ({\n  x: -arrowOffset - 40,\n  y: frameCalculation.value.screenHeight / 2 - 10\n}));\n\nconst heightTextConfig = computed(() => ({\n  text: `${dimensions.height}mm`,\n  padding: 2,\n  fill: 'black'\n}));\n\nconst widthLabelConfig = computed(() => ({\n  x: frameCalculation.value.screenWidth / 2 - 20,\n  y: frameCalculation.value.screenHeight + arrowOffset\n}));\n\nconst widthTextConfig = computed(() => ({\n  text: `${dimensions.width}mm`,\n  padding: 2,\n  fill: 'black'\n}));\n\n// Event handlers\nconst handleLabelClick = (metric, e) => {\n  const pos = e.target.getAbsolutePosition();\n  const size = { width: 50, height: 20 }; // Approximate size\n  \n  createInputOverlay(metric, pos, size);\n};\n\nconst createInputOverlay = (metric, pos, size) => {\n  // Create overlay\n  const wrap = document.createElement('div');\n  wrap.style.position = 'absolute';\n  wrap.style.backgroundColor = 'rgba(0,0,0,0.1)';\n  wrap.style.top = 0;\n  wrap.style.left = 0;\n  wrap.style.width = '100%';\n  wrap.style.height = '100%';\n  wrap.style.zIndex = 999;\n\n  const input = document.createElement('input');\n  input.type = 'number';\n  input.value = metric === 'width' ? dimensions.width : dimensions.height;\n  input.style.position = 'absolute';\n  input.style.top = `${pos.y + 3}px`;\n  input.style.left = `${pos.x}px`;\n  input.style.width = `${size.width + 3}px`;\n  input.style.height = `${size.height + 3}px`;\n\n  wrap.appendChild(input);\n  document.body.appendChild(wrap);\n\n  const handleChange = () => {\n    const value = parseInt(input.value, 10);\n    dimensions[metric] = value;\n  };\n\n  input.addEventListener('change', handleChange);\n  input.addEventListener('input', handleChange);\n\n  const handleWrapClick = (e) => {\n    if (e.target === wrap) {\n      document.body.removeChild(wrap);\n    }\n  };\n\n  const handleKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      document.body.removeChild(wrap);\n    }\n  };\n\n  wrap.addEventListener('click', handleWrapClick);\n  input.addEventListener('keyup', handleKeyUp);\n\n  input.focus();\n  \n  inputOverlay.value = { wrap, input };\n};\n\n// Window resize handler\nconst handleResize = () => {\n  stageSize.width = window.innerWidth;\n  stageSize.height = window.innerHeight;\n};\n\n// Setup and cleanup\nonMounted(() => {\n  window.addEventListener('resize', handleResize);\n});\n\nonBeforeUnmount(() => {\n  window.removeEventListener('resize', handleResize);\n  \n  // Cleanup any input overlay\n  if (inputOverlay.value) {\n    if (document.body.contains(inputOverlay.value.wrap)) {\n      document.body.removeChild(inputOverlay.value.wrap);\n    }\n  }\n});\n\nconst updateCanvas = () => {\n  // This is handled reactively by Vue\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Selection and Transformation with Konva.js (Vanilla JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a canvas with multiple shapes, implement selection functionality using a rectangle, group selected shapes, and apply transformations. It also showcases caching for improved performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Resizing_Stress_Test.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// first we need to create a stage\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n// layer for all shapes\nvar layer = new Konva.Layer();\nstage.add(layer);\nfor (var i = 0; i < 10000; i++) {\n  var shape = new Konva.Circle({\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    radius: 10,\n    name: 'shape',\n    fill: Konva.Util.getRandomColor(),\n  });\n  layer.add(shape);\n}\n\n// top layer for transforming group\nvar topLayer = new Konva.Layer();\nstage.add(topLayer);\n\nvar group = new Konva.Group({\n  draggable: true,\n});\ntopLayer.add(group);\n\nvar tr = new Konva.Transformer();\ntopLayer.add(tr);\n\n// add a new feature, lets add ability to draw selection rectangle\nvar selectionRectangle = new Konva.Rect({\n  fill: 'rgba(0,0,255,0.5)',\n  visible: false,\n});\ntopLayer.add(selectionRectangle);\n\nvar x1, y1, x2, y2;\nstage.on('mousedown touchstart', (e) => {\n  // do nothing if we mousedown on the transformer\n  if (e.target.getParent() === tr) {\n    return;\n  }\n  // do nothing if we mousedown on the group\n  if (e.target.parent === group) {\n    return;\n  }\n  x1 = stage.getPointerPosition().x;\n  y1 = stage.getPointerPosition().y;\n  x2 = stage.getPointerPosition().x;\n  y2 = stage.getPointerPosition().y;\n\n  selectionRectangle.setAttrs({\n    x: x1,\n    y: y1,\n    width: 0,\n    height: 0,\n    visible: true,\n  });\n\n  // move old selection back to original layer\n  group.children.slice().forEach((shape) => {\n    const transform = shape.getAbsoluteTransform();\n    shape.moveTo(layer);\n    shape.setAttrs(transform.decompose());\n  });\n  // reset group transforms\n  group.setAttrs({\n    x: 0,\n    y: 0,\n    scaleX: 1,\n    scaleY: 1,\n    rotation: 0,\n  });\n  group.clearCache();\n});\n\nstage.on('mousemove touchmove', () => {\n  // do nothing if we didn't start selection\n  if (!selectionRectangle.visible()) {\n    return;\n  }\n  x2 = stage.getPointerPosition().x;\n  y2 = stage.getPointerPosition().y;\n\n  selectionRectangle.setAttrs({\n    x: Math.min(x1, x2),\n    y: Math.min(y1, y2),\n    width: Math.abs(x2 - x1),\n    height: Math.abs(y2 - y1),\n  });\n});\n\nstage.on('mouseup touchend', () => {\n  // no nothing if we didn't start selection\n  if (!selectionRectangle.visible()) {\n    return;\n  }\n  // update visibility in timeout, so we can check it in click event\n  setTimeout(() => {\n    selectionRectangle.visible(false);\n  });\n\n  var shapes = stage.find('.shape');\n  var box = selectionRectangle.getClientRect();\n\n  // remove all children for better performance\n  layer.removeChildren();\n\n  // then check intersections and add all shape into correct container\n  shapes.forEach((shape) => {\n    var intersected = Konva.Util.haveIntersection(\n      box,\n      shape.getClientRect()\n    );\n    if (intersected) {\n      group.add(shape);\n      shape.stroke('blue');\n    } else {\n      layer.add(shape);\n      shape.stroke(null);\n    }\n  });\n\n  if (group.children.length) {\n    tr.nodes([group]);\n    group.cache();\n  } else {\n    tr.nodes([]);\n    group.clearCache();\n  }\n});\n\n// clicks should select/deselect shapes\nstage.on('click tap', function (e) {\n  // if we are selecting with rect, do nothing\n  if (selectionRectangle.visible()) {\n    return;\n  }\n\n  // if click on empty area - remove all selections\n  if (e.target === stage) {\n    tr.nodes([]);\n    return;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Sprites with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to create an animated sprite using the Konva.js library with vanilla JavaScript. It loads a sprite sheet, defines animation sequences for idle and punch actions, and implements a button to trigger the punch animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Sprite.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst animations = {\n  idle: [\n    2, 2, 70, 119,      // frame 1\n    71, 2, 74, 119,     // frame 2\n    146, 2, 81, 119,    // frame 3\n    226, 2, 76, 119,    // frame 4\n  ],\n  punch: [\n    2, 138, 74, 122,    // frame 1\n    76, 138, 84, 122,   // frame 2\n    346, 138, 120, 122, // frame 3\n  ],\n};\n\nconst imageObj = new Image();\nimageObj.onload = function() {\n  const sprite = new Konva.Sprite({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    animation: 'idle',\n    animations: animations,\n    frameRate: 7,\n    frameIndex: 0\n  });\n\n  layer.add(sprite);\n  sprite.start();\n\n  // Add punch button functionality\n  const button = document.createElement('button');\n  button.textContent = 'Punch';\n  button.style.position = 'absolute';\n  button.style.top = '0';\n  button.style.left = '0';\n  document.body.appendChild(button);\n\n  button.addEventListener('click', () => {\n    sprite.animation('punch');\n    sprite.on('frameIndexChange.button', function() {\n      if (this.frameIndex() === 2) {\n        setTimeout(() => {\n          sprite.animation('idle');\n          sprite.off('.button');\n        }, 1000 / sprite.frameRate());\n      }\n    });\n  });\n};\nimageObj.src = 'https://konvajs.org/assets/blob-sprite.png';\n```\n\n----------------------------------------\n\nTITLE: Toggling Shape Visibility with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Konva stage, add a layer and a rectangle shape, and toggle its visibility using 'hide()' and 'show()' methods. It also includes the creation of show/hide buttons.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/06-Hide_and_Show.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: stage.width() / 2 - 50,\n  y: stage.height() / 2 - 25,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n});\nlayer.add(rect);\n\n// update button creation and styling\nconst buttonContainer = document.createElement('div');\nbuttonContainer.style.position = 'absolute';\nbuttonContainer.style.zIndex = 1;\nbuttonContainer.style.padding = '10px';\nbuttonContainer.style.top = '0px';\nbuttonContainer.style.left = '0px';\n\nconst showBtn = document.createElement('button');\nshowBtn.textContent = 'Show';\nshowBtn.onclick = () => rect.show();\nbuttonContainer.appendChild(showBtn);\n\nconst hideBtn = document.createElement('button');\nhideBtn.textContent = 'Hide';\nhideBtn.onclick = () => rect.hide();\nbuttonContainer.appendChild(hideBtn);\n\ndocument.body.appendChild(buttonContainer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bezier Curve Control Lines with KonvaJS\nDESCRIPTION: Creates a configuration for visualizing the control lines of a bezier curve. Shows dashed lines connecting the start, control1, control2, and end points with semi-transparent black stroke to help visualize curve construction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bezierLineConfig = computed(() => ({\n  points: [\n    bezierPoints.start.x, bezierPoints.start.y,\n    bezierPoints.control1.x, bezierPoints.control1.y,\n    bezierPoints.control2.x, bezierPoints.control2.y,\n    bezierPoints.end.x, bezierPoints.end.y\n  ],\n  dash: [10, 10, 0, 10],\n  strokeWidth: 3,\n  stroke: 'black',\n  lineCap: 'round',\n  opacity: 0.3\n}));\n```\n\n----------------------------------------\n\nTITLE: Controlling Opacity in Konva Nodes\nDESCRIPTION: Shows how to get and set the opacity of a Konva node. Opacity values range from 0 (transparent) to 1 (fully opaque), affecting the visual rendering of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Building Shape Groups with Vue-Konva\nDESCRIPTION: Illustrates creating a draggable group of shapes using Vue-Konva components. The implementation uses Vue's template syntax and composition API to define the stage, layer, and group configurations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Groups.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group :config=\"groupConfig\">\n        <v-circle :config=\"circleConfig\" />\n        <v-rect :config=\"rectConfig\" />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst groupConfig = {\n  x: 50,\n  y: 50,\n  draggable: true\n};\n\nconst circleConfig = {\n  x: 40,\n  y: 40,\n  radius: 30,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst rectConfig = {\n  x: 80,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events with React-Konva\nDESCRIPTION: Shows implementation of custom event firing in a React component using react-konva. Uses useRef hook to maintain reference to the circle component for firing events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Fire_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const circleRef = useRef();\n\n  const handleCustomEvent = () => {\n    alert('custom event fired');\n  };\n\n  const fireCustomEvent = () => {\n    circleRef.current.fire('customEvent', {\n      bubbles: true,\n    });\n  };\n\n  return (\n    <>\n      <button onClick={fireCustomEvent}>Fire Custom Event</button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Circle\n            ref={circleRef}\n            x={window.innerWidth / 2}\n            y={window.innerHeight / 2}\n            radius={70}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n            onCustomEvent={handleCustomEvent}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tween Controls with Vue.js in Konva.js\nDESCRIPTION: This code demonstrates implementing tween animation controls in a Vue.js component. It uses the Vue 3 composition API with setup script and refs to create a circle that animates across the screen with control buttons.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/All_Controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <button\n      v-for=\"control in controls\"\n      :key=\"control\"\n      @click=\"handleControl(control)\"\n    >\n      {{ control }}\n    </button>\n    <button @click=\"handleSeek\">Seek to 50%</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-circle\n          :config=\"circleConfig\"\n          ref=\"circleRef\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: 100,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst controls = ['play', 'pause', 'reverse', 'reset', 'finish'];\nconst circleRef = ref(null);\nlet tween = null;\n\nonMounted(() => {\n  tween = new Konva.Tween({\n    node: circleRef.value.getNode(),\n    duration: 2,\n    x: window.innerWidth - 100,\n    easing: Konva.Easings.EaseInOut,\n  });\n});\n\nconst handleControl = (control) => {\n  tween[control]();\n};\n\nconst handleSeek = () => {\n  tween.seek(1);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Node Offset in KonvaJS\nDESCRIPTION: Examples of getting and setting X and Y offset values for a Konva node. Offsets affect the position of the transformation origin.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Lines with KonvaJS\nDESCRIPTION: Demonstrates how to create basic straight lines and dashed lines using KonvaJS. Shows implementation of two lines with different styles - a solid red line and a dashed green line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst redLine = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round'\n});\n\n// dashed line\nconst greenLine = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'green',\n  strokeWidth: 2,\n  lineJoin: 'round',\n  dash: [33, 10]\n});\n\ngreenLine.y(50);\nlayer.add(redLine, greenLine);\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor of a Konva.js Node\nDESCRIPTION: Demonstrates how to find a specific ancestor of a node that matches a given selector. This is useful when you need to reference a particular parent or container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the starting radius for a radial gradient fill in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to get and iterate through all ancestors of a Konva.js node, logging their IDs.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Blob in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a Blob using async/await, which can be useful for saving or uploading the node's visual representation as a file.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blob Shape with Konva.js in React\nDESCRIPTION: This snippet shows how to create a blob shape using Konva.js in a React application. It uses the react-konva library to render a Stage, Layer, and Line component with properties that define the blob shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Blob.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          points={[23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93]}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={5}\n          closed\n          tension={0.3}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Events with Vue and Konva\nDESCRIPTION: This snippet demonstrates how to create a draggable text element and handle drag events using Vue with vue-konva. It uses Vue's composition API to manage the status state and updates it based on drag events. The component template contains a v-stage with a v-layer and two v-text elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/06_Drag_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"textConfig\"\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n        @dragmove=\"handleDragMove\"\n      />\n      <v-text :config=\"statusConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = {\n  x: 40,\n  y: 40,\n  text: 'Draggable Text',\n  fontSize: 20,\n  draggable: true,\n  width: 200\n};\n\nconst status = ref('');\n\nconst statusConfig = {\n  x: 40,\n  y: 100,\n  text: status,\n  fontSize: 16,\n  width: 200\n};\n\nconst handleDragStart = () => {\n  status.value = 'drag started';\n};\n\nconst handleDragEnd = () => {\n  status.value = 'drag ended';\n};\n\nconst handleDragMove = () => {\n  status.value = 'dragging';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using String Selectors to Find Nodes in Containers\nDESCRIPTION: Demonstrates how to use string selectors with find method to locate nodes by id, name, type, or class within containers in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPassing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Blob Shape with Konva.js in Vue\nDESCRIPTION: This snippet illustrates how to create a blob shape using Konva.js in a Vue.js application. It uses Vue-specific Konva components (v-stage, v-layer, v-line) and defines the blob's properties in a separate configuration object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Blob.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line :config=\"blobConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst blobConfig = {\n  points: [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true,\n  tension: 0.3\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Drag and Transform Handlers\nDESCRIPTION: Event handlers for managing rectangle dragging and transformation with boundary constraints.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhandleTransformerDragMove(e) {\n  const transformer = this.$refs.transformerRef.getNode();\n  const nodes = transformer.nodes();\n  if (!nodes.length) return;\n  const boxes = nodes.map(node => node.getClientRect());\n  const box = this.getTotalBox(boxes);\n  nodes.forEach(shape => {\n    const absPos = shape.getAbsolutePosition();\n    const offsetX = box.x - absPos.x;\n    const offsetY = box.y - absPos.y;\n    const newAbsPos = { x: absPos.x, y: absPos.y };\n    if (box.x < 0) {\n      newAbsPos.x = -offsetX;\n    }\n    if (box.y < 0) {\n      newAbsPos.y = -offsetY;\n    }\n    if (box.x + box.width > this.stageConfig.width) {\n      newAbsPos.x = this.stageConfig.width - box.width - offsetX;\n    }\n    if (box.y + box.height > this.stageConfig.height) {\n      newAbsPos.y = this.stageConfig.height - box.height - offsetY;\n    }\n    shape.setAbsolutePosition(newAbsPos);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale X in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get the current scale X value of a node and how to set a new scale X value. This affects the horizontal scaling of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient start point Y in Konva.js\nDESCRIPTION: Shows how to get and set the Y coordinate of the start point for a fill radial gradient in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Default Prevention in KonvaJS\nDESCRIPTION: Shows how to control whether a shape prevents default browser behavior on pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor by Selector in Konva.js\nDESCRIPTION: Demonstrates how to find a specific ancestor node that matches a selector using the findAncestor method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Creating Labels with Vanilla KonvaJS\nDESCRIPTION: Demonstrates creation of three different types of labels using vanilla KonvaJS: a tooltip pointing down with shadow effects, a label pointing left, and a simple label. Each label consists of a Tag for background and pointer, and Text for content.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Label.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\n\n// tooltip pointing down\nconst tooltip = new Konva.Label({\n  x: 170,\n  y: 75,\n  opacity: 0.75\n});\n\ntooltip.add(\n  new Konva.Tag({\n    fill: 'black',\n    pointerDirection: 'down',\n    pointerWidth: 10,\n    pointerHeight: 10,\n    lineJoin: 'round',\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowOpacity: 0.5\n  })\n);\n\ntooltip.add(\n  new Konva.Text({\n    text: 'Tooltip pointing down',\n    fontFamily: 'Calibri',\n    fontSize: 18,\n    padding: 5,\n    fill: 'white'\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva.js Node to Image\nDESCRIPTION: Demonstrates how to convert a node into an image asynchronously. This is useful for caching complex drawings as images to improve performance by avoiding constant redrawing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Namespaced Event Listeners with Konva\nDESCRIPTION: Creates an interactive canvas demonstration with a circle that has multiple click event listeners. Shows how to namespace events with .event1 and .event2 suffixes for selective removal. Includes UI buttons to remove specific listeners.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Remove_by_Name.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\n// add click listeners\ncircle.on('click.event1', function () {\n  alert('first click listener');\n});\n\ncircle.on('click.event2', function () {\n  alert('second click listener');\n});\n\nlayer.add(circle);\n\n// add buttons to remove listeners\nconst button1 = document.createElement('button');\nbutton1.innerHTML = 'Remove first listener';\nbutton1.style.position = 'absolute';\nbutton1.style.top = '0';\nbutton1.style.left = '0';\ndocument.getElementById('container').appendChild(button1);\n\nconst button2 = document.createElement('button');\nbutton2.innerHTML = 'Remove second listener';\nbutton2.style.position = 'absolute';\nbutton2.style.top = '30px';\nbutton2.style.left = '0';\ndocument.getElementById('container').appendChild(button2);\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the vertical offset (offsetY) of a Konva node. This affects the node's vertical pivot point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Demonstrates different ways to fire events on a node, including custom events, events with custom data, and events that bubble up the hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sepia Filter in React with react-konva\nDESCRIPTION: This snippet shows how to implement a Sepia filter for images in a React application using react-konva. It uses the useImage hook to load the image and useRef/useEffect to apply caching once the image is loaded, which is required before applying the Sepia filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Sepia.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useRef, useEffect } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {image && (\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Sepia]}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Shape Group with Vanilla JavaScript in Konva\nDESCRIPTION: This code demonstrates how to create a draggable group containing a circle and rectangle using vanilla JavaScript with Konva.js. The group is positioned at (50,50) on the canvas, with the circle at the group's origin and the rectangle offset at (20,20) within the group.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Group.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst group = new Konva.Group({\n  x: 50,\n  y: 50,\n  draggable: true\n});\n\nconst circle = new Konva.Circle({\n  x: 0,\n  y: 0,\n  radius: 30,\n  fill: 'red'\n});\n\nconst rect = new Konva.Rect({\n  x: 20,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green'\n});\n\ngroup.add(circle);\ngroup.add(rect);\nlayer.add(group);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Delegation with Konva in Vue\nDESCRIPTION: This snippet demonstrates how to use event delegation with Konva in a Vue component. It creates a stage with a layer containing a text element and a star shape. The layer has a click event handler that updates the text based on the clicked shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Event_Delegation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer @click=\"handleLayerClick\">\n      <v-text :config=\"textConfig\" />\n      <v-star :config=\"starConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst starConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  numPoints: 5,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleLayerClick = (e) => {\n  const shape = e.target;\n  message.value = 'click on ' + shape.getClassName();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline Line with React-Konva\nDESCRIPTION: This snippet shows how to implement a spline line using React-Konva components. It uses the Stage, Layer, and Line components to create a curved line with tension property. The same styling as in vanilla example is applied for consistency.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Spline.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          points={[5, 70, 140, 23, 250, 60, 300, 20]}\n          stroke=\"red\"\n          strokeWidth={15}\n          lineCap=\"round\"\n          lineJoin=\"round\"\n          tension={1}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fill and Stroke Order in Vanilla Konva.js\nDESCRIPTION: Example showing two text objects with different fill and stroke rendering orders in Vanilla JavaScript. The first text uses the default rendering (stroke on top) while the second text uses fillAfterStrokeEnabled to put the fill on top of the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/09-Fill_Stroke_Order.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text1 = new Konva.Text({\n  text: 'Default shape rendering.\\nfillAfterStrokeEnabled = false',\n  x: 50,\n  y: 50,\n  fontSize: 40,\n  stroke: 'green',\n  fill: 'yellow',\n  strokeWidth: 3,\n});\nlayer.add(text1);\n\nconst text2 = new Konva.Text({\n  text: 'Reversed rendering order.\\nfillAfterStrokeEnabled = true',\n  x: 50,\n  y: 150,\n  fontSize: 40,\n  stroke: 'green',\n  fill: 'yellow',\n  strokeWidth: 3,\n  fillAfterStrokeEnabled: true,\n});\nlayer.add(text2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Hover Events for Control Points in KonvaJS\nDESCRIPTION: Handles mouse enter and leave events for control points to provide visual feedback. Changes cursor to 'pointer' on hover and tracks the currently hovered point to potentially apply visual styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleMouseEnter = (pointId, e) => {\n  const stage = e.target.getStage();\n  stage.container().style.cursor = 'pointer';\n  hoveredPoint.value = pointId;\n};\n\nconst handleMouseLeave = (pointId, e) => {\n  const stage = e.target.getStage();\n  stage.container().style.cursor = 'default';\n  hoveredPoint.value = null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Canvas in Vanilla JavaScript with Konva.js\nDESCRIPTION: Creates a responsive canvas that scales to fit the browser window width using Konva.js. The code defines a virtual scene size, creates a stage with shapes (circle, rectangle, text), and implements a resize function that adjusts the stage scale based on the container width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Responsive_Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Define virtual size for our scene\n// The real size will be different to fit user's page\nconst sceneWidth = 1000;\nconst sceneHeight = 1000;\n\n// Create stage with initial size\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: sceneWidth,\n  height: sceneHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Add circle in the center\nconst circle = new Konva.Circle({\n  radius: 50,\n  fill: 'red',\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n});\nlayer.add(circle);\n\n// Add rectangle in bottom right of the stage\nconst rect = new Konva.Rect({\n  fill: 'green',\n  x: stage.width() - 100,\n  y: stage.height() - 100,\n  width: 100,\n  height: 100,\n});\nlayer.add(rect);\n\n// Add some text\nconst text = new Konva.Text({\n  x: 20,\n  y: 20,\n  text: 'Try resizing your browser window',\n  fontSize: 20,\n  fontFamily: 'Arial',\n  fill: 'black',\n});\nlayer.add(text);\n\n// Function to make the stage responsive\nfunction fitStageIntoParentContainer() {\n  // Get the container element\n  const container = document.getElementById('container');\n  \n  // Make the container take up the full width\n  container.style.width = '100%';\n  \n  // Get current container width\n  const containerWidth = container.offsetWidth;\n  \n  // Calculate scale based on virtual width vs actual width\n  const scale = containerWidth / sceneWidth;\n  \n  // Set stage dimensions and scale\n  stage.width(sceneWidth * scale);\n  stage.height(sceneHeight * scale);\n  stage.scale({ x: scale, y: scale });\n}\n\n// Initial fit\nfitStageIntoParentContainer();\n\n// Adapt the stage on window resize\nwindow.addEventListener('resize', fitStageIntoParentContainer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Save/Load and Undo/Redo in Vue with vue-konva\nDESCRIPTION: This code snippet demonstrates how to implement save/load functionality and undo/redo operations in a Vue application using vue-konva. It creates a canvas with draggable images that can have filters applied, and allows adding new images, undoing, and redoing actions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <div style=\"margin-bottom: 10px\">\n      <button @click=\"handleAdd\">Add Image</button>\n      <button @click=\"handleUndo\">Undo</button>\n      <button @click=\"handleRedo\">Redo</button>\n    </div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          v-for=\"(img, i) in images\"\n          :key=\"i\"\n          :config=\"getImageConfig(img)\"\n          @dragend=\"handleDragEnd(i, $event)\"\n          @click=\"handleClick(i)\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Boundaries in Konva.js\nDESCRIPTION: Example showing how to set a custom drag bound function that overrides the default drag and drop positioning. This example creates a vertical-only dragging constraint.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor in Konva.js\nDESCRIPTION: Shows how to find a specific ancestor of a Konva.js node that matches a given selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Toggling Event Listening with Vue-Konva\nDESCRIPTION: This snippet demonstrates how to toggle event listening on a Konva shape using Vue.js. It uses the Vue-Konva library with computed properties to control the ellipse's listening state, and displays a message when mouse events occur on the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Listen_for_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"toggleListening\">\n      {{ listening ? 'Stop listening' : 'Listen' }}\n    </button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-text :config=\"textConfig\" />\n        <v-ellipse\n          :config=\"ovalConfig\"\n          @mouseover=\"handleMouseover\"\n          @mouseout=\"handleMouseout\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\nconst listening = ref(false);\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst ovalConfig = computed(() => ({\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radiusX: 100,\n  radiusY: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  listening: listening.value\n}));\n\nconst handleMouseover = () => {\n  message.value = 'Mouseover oval';\n};\n\nconst handleMouseout = () => {\n  message.value = '';\n};\n\nconst toggleListening = () => {\n  listening.value = !listening.value;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Scaling with Aspect Ratio Preservation in Vue Konva\nDESCRIPTION: Vue implementation of the image scaling technique using Vue Konva. Uses Vue's reactive system to manage the crop position and size state. This snippet shows the beginning of a Vue component template and script that includes the core infrastructure for the scaling functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageConfig\">\n      <v-layer>\n        <v-image\n          v-if=\"image\"\n          ref=\"imageRef\"\n          :config=\"{\n            image: image,\n            x: 80,\n            y: 100,\n            width: size.width,\n            height: size.height,\n            draggable: true,\n            ...crop,\n          }\"\n          @transform=\"handleTransform\"\n        />\n        <v-transformer\n          ref=\"transformerRef\"\n          :config=\"{\n            boundBoxFunc: boundBoxFunc\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <select\n      style=\"position: absolute; top: 4px; left: 4px\"\n      v-model=\"position\"\n    >\n      <option\n        v-for=\"pos in positions\"\n        :key=\"pos\"\n        :value=\"pos\"\n      >\n        {{ pos }}\n      </option>\n    </select>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, watch } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst positions = [\n  'left-top', 'center-top', 'right-top', '--',\n  'left-middle', 'center-middle', 'right-middle', '--',\n  'left-bottom', 'center-bottom', 'right-bottom'\n];\n\nconst position = ref('center-middle');\nconst size = ref({ width: 300, height: 100 });\nconst imageRef = ref(null);\nconst transformerRef = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nfunction getCrop(image, size, clipPosition = 'center-middle') {\n  const width = size.width;\n  const height = size.height;\n  const aspectRatio = width / height;\n\n  let newWidth;\n  let newHeight;\n\n  const imageRatio = image.width / image.height;\n\n  if (aspectRatio >= imageRatio) {\n    newWidth = image.width;\n    newHeight = image.width / aspectRatio;\n  } else {\n    newWidth = image.height * aspectRatio;\n    newHeight = image.height;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncing Bunnies Animation with Vue.js and Konva.js\nDESCRIPTION: This Vue.js component sets up a Konva stage for animating bouncing bunnies. It uses reactive references and the composition API to manage state and handle animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    \n    <v-stage\n      :config=\"stageConfig\"\n      @mousedown=\"isAdding = true\"\n      @mouseup=\"isAdding = false\"\n      @touchstart=\"isAdding = true\"\n      @touchend=\"isAdding = false\"\n    >\n      <v-fast-layer ref=\"layerRef\">\n        <v-image\n          v-for=\"(bunny, index) in bunnies\"\n          :key=\"index\"\n          :config=\"{\n            image: bunnyImage,\n            x: bunny.x,\n            y: bunny.y,\n            transformsEnabled: 'position',\n            perfectDrawEnabled: false\n          }\"\n          :ref=\"el => storeNodeRef(index, el)\"\n        />\n      </v-fast-layer>\n    </v-stage>\n    <div \n      style=\"position: absolute; top: 50px; background-color: white; font-size: 12px; padding: 5px;\"\n    >\n      {{ count }} BUNNIES\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, onUnmounted } from 'vue';\n\n// Stage setup with fixed dimensions\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n// Refs\nconst layerRef = ref(null);\nconst bunnyImage = ref(null);\nconst bunnies = ref([]);\nconst count = ref(0);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in KonvaJS\nDESCRIPTION: Shows how to get the absolute position of a node, with an option to specify an ancestor node to calculate the position relative to.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva.js Nodes\nDESCRIPTION: Shows how to set specific attributes on a Konva node using the setAttr method. This is a fundamental operation for modifying node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Getting client rectangle in Konva.js\nDESCRIPTION: Shows how to get the client rectangle (bounding box) of a Konva Node with different configuration options to include or exclude transformations, shadows, and strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Managing Draggable State in KonvaJS\nDESCRIPTION: Shows how to enable or disable drag and drop functionality for a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprite Animations Map\nDESCRIPTION: Demonstrates how to get and set the animations map containing frame coordinates for different animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get animations map\nvar animations = sprite.animations();\n\n// set animations map\nsprite.animations({\n  standing: [\n    // x, y, width, height (6 frames)\n    0, 0, 49, 109,\n    52, 0, 49, 109,\n    105, 0, 49, 109,\n    158, 0, 49, 109,\n    210, 0, 49, 109,\n    262, 0, 49, 109\n  ],\n  kicking: [\n    // x, y, width, height (6 frames)\n    0, 109, 45, 98,\n    45, 109, 45, 98,\n    95, 109, 63, 98,\n    156, 109, 70, 98,\n    229, 109, 60, 98,\n    287, 109, 41, 98\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Gradient Animation with Vue-Konva\nDESCRIPTION: Vue implementation of gradient animation using vue-konva. Uses Vue refs to manage component instances and implements the same animation logic using Vue's composition API.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Complex_Tweening.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <v-circle\n        :config=\"circleConfig\"\n        @click=\"handleClick\"\n        @tap=\"handleClick\"\n        ref=\"circleRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fillLinearGradientStartPoint: { x: -50, y: -50 },\n  fillLinearGradientEndPoint: { x: 50, y: 50 },\n  fillLinearGradientColorStops: [0, 'red', 1, 'yellow'],\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n};\n\nconst circleRef = ref(null);\nconst layerRef = ref(null);\n\nconst handleClick = () => {\n  const circle = circleRef.value.getNode();\n  \n  // using regular Konva tween\n  const tween = new Konva.Tween({\n    node: circle,\n    duration: 1,\n    scaleX: 1.5,\n    scaleY: 1.5,\n    easing: Konva.Easings.EaseInOut,\n    onFinish: () => {\n      // scale back with another tween\n      const tween2 = new Konva.Tween({\n        node: circle,\n        duration: 1,\n        scaleX: 1,\n        scaleY: 1,\n        easing: Konva.Easings.Bounce.EaseOut,\n      });\n      tween2.play();\n    },\n  });\n  tween.play();\n\n  // manually update gradient\n  let ratio = 0;\n  const anim = new Konva.Animation((frame) => {\n    ratio += frame.timeDiff / 1000;\n    if (ratio > 1) {\n      ratio = 0;\n    }\n    circle.fillLinearGradientColorStops([\n      0,\n      'red',\n      ratio,\n      'yellow',\n      1,\n      'blue',\n    ]);\n  }, layerRef.value.getNode());\n  anim.start();\n  setTimeout(() => anim.stop(), 2000);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a Konva node with optional property overrides.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Example of converting a Konva node into an image using the toImage method with a callback function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Konva.js\nDESCRIPTION: Demonstrates how to remove event listeners from a Konva.js node using the 'off' method. It shows examples of removing single, multiple, and namespaced event listeners.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Listening on Layers in Konva.js\nDESCRIPTION: Turns off event listening for an entire layer to reduce computational overhead when shapes in that layer don't need to respond to user interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.listening(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in Konva\nDESCRIPTION: Shows how to get and set the drag distance threshold for a Konva node. This determines how far the pointer must move before dragging starts, which can be set per node or globally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Pointer Position in Konva.js\nDESCRIPTION: Shows how to get relative pointer position for Konva nodes in local coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in Konva.js\nDESCRIPTION: Example of setting an attribute value for a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the rotation of a Konva node in degrees using the rotation method. Positive values rotate clockwise.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Toggling Event Listening with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to toggle event listening on a Konva shape using vanilla JavaScript. It creates an ellipse that can have its event listening capability turned on or off with a button click, and displays a message when the mouse hovers over the ellipse (if listening is enabled).\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Listen_for_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\nlayer.add(text);\n\nconst oval = new Konva.Ellipse({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radiusX: 100,\n  radiusY: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  listening: false,\n});\n\noval.on('mouseover', function () {\n  writeMessage('Mouseover oval');\n});\noval.on('mouseout', function () {\n  writeMessage('');\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\nlayer.add(oval);\n\n// add button to toggle listening\nconst button = document.createElement('button');\nbutton.innerHTML = 'Listen';\ndocument.body.appendChild(button);\nbutton.addEventListener('click', () => {\n  const listening = !oval.listening();\n  oval.listening(listening);\n  button.innerHTML = listening ? 'Stop listening' : 'Listen';\n  layer.drawHit();\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Shape Visibility with Konva.js in React\nDESCRIPTION: This snippet shows how to use Konva.js with React to create a stage, layer, and rectangle shape. It uses React state to control the visibility of the shape and includes show/hide buttons.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/06-Hide_and_Show.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nfunction App() {\n  const [visible, setVisible] = useState(true);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div style={{ position: 'absolute', zIndex: 1, padding: '10px' }}>\n        <button onClick={() => setVisible(true)}>Show</button>\n        <button onClick={() => setVisible(false)}>Hide</button>\n      </div>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Rect\n            x={window.innerWidth / 2 - 50}\n            y={window.innerHeight / 2 - 25}\n            width={100}\n            height={50}\n            fill=\"green\"\n            stroke=\"black\"\n            strokeWidth={4}\n            visible={visible}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Event Handling in Vanilla JavaScript with Konva.js\nDESCRIPTION: A complete implementation of multi-event handling using Konva.js in vanilla JavaScript. Creates a stage with a text element for displaying messages and a circle that responds to mouseover, mousedown, and mouseup events by updating the text with the current event type.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Multi_Event.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\nlayer.add(text);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\ncircle.on('mouseover mousedown mouseup', function (evt) {\n  writeMessage('event: ' + evt.type);\n});\n\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resize Limits with Vanilla KonvaJS\nDESCRIPTION: Creates a yellow rectangle with a transformer that limits its width to 200 pixels using boundBoxFunc. The implementation uses vanilla JavaScript with KonvaJS library.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/07_Resize_Limits.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\nboundBoxFunc: (oldBox, newBox) => {\n// limit resize\nif (newBox.width > 200) {\nreturn oldBox;\n}\nreturn newBox;\n},\n});\nlayer.add(tr);\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Events in React with Konva\nDESCRIPTION: React implementation of a movable circle using react-konva components. Uses React hooks for state management and event handling, with useRef for accessing the stage container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Keyboard_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef, useEffect, useState } from 'react';\n\nconst App = () => {\n  const stageRef = useRef();\n  const [position, setPosition] = useState({\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2,\n  });\n\n  useEffect(() => {\n    const container = stageRef.current.container();\n    // make it focusable\n    container.tabIndex = 1;\n    // focus it\n    container.focus();\n  }, []);\n\n  const handleKeyDown = (e) => {\n    const DELTA = 4;\n    \n    switch (e.keyCode) {\n      case 37: // left\n        setPosition(pos => ({ ...pos, x: pos.x - DELTA }));\n        break;\n      case 38: // up\n        setPosition(pos => ({ ...pos, y: pos.y - DELTA }));\n        break;\n      case 39: // right\n        setPosition(pos => ({ ...pos, x: pos.x + DELTA }));\n        break;\n      case 40: // down\n        setPosition(pos => ({ ...pos, y: pos.y + DELTA }));\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      ref={stageRef}\n      onKeyDown={handleKeyDown}\n    >\n      <Layer>\n        <Circle\n          x={position.x}\n          y={position.y}\n          radius={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Frame Index\nDESCRIPTION: Shows how to get and set the current frame index of the sprite animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get animation frame index\nvar frameIndex = sprite.frameIndex();\n\n// set animation frame index\nsprite.frameIndex(3);\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter to Images using React with react-konva\nDESCRIPTION: This React implementation shows how to create a grayscale filtered image using react-konva. It utilizes hooks (useState, useEffect, useRef) and the use-image library to load and manage the image. The image is cached after loading and a grayscale filter is applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Grayscale.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {image && (\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Grayscale]}\n          />\n        )}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Konva Layer\nDESCRIPTION: Basic constructor syntax for creating a new layer in Konva. Layers are tied to their own canvas element and are used to contain groups or shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Layer(config)\n```\n\n----------------------------------------\n\nTITLE: Managing Transformer Updates in Vue.js with Konva\nDESCRIPTION: This Vue.js example shows how to handle Transformer updates using Vue's reactive system and the Konva framework. It uses computed properties to handle dynamic updates to the rect width based on text content changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/10_Force_Update.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"changeText\">Change text</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-group :config=\"groupConfig\" ref=\"groupRef\">\n          <v-rect :config=\"rectConfig\" />\n          <v-text :config=\"textConfig\" />\n        </v-group>\n        <v-transformer :config=\"transformerConfig\" ref=\"transformerRef\" />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst text = ref('Some text here');\nconst groupRef = ref(null);\nconst transformerRef = ref(null);\n\nconst groupConfig = {\n  x: 50,\n  y: 50,\n  draggable: true\n};\n\nconst textConfig = computed(() => ({\n  text: text.value,\n  fontSize: 24\n}));\n\nconst rectConfig = computed(() => ({\n  width: text.value.length * 10,\n  height: 30,\n  fill: 'yellow'\n}));\n\nconst transformerConfig = {\n  padding: 5,\n  enabledAnchors: ['middle-left', 'middle-right']\n};\n\nconst changeText = () => {\n  text.value = 'Something else is here';\n};\n\nonMounted(() => {\n  if (transformerRef.value && groupRef.value) {\n    transformerRef.value.getNode().nodes([groupRef.value.getNode()]);\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Konva.js Stage with Layers and Shapes in React\nDESCRIPTION: This JSX code renders a Konva.js Stage component with multiple layers, shapes, and event handlers. It includes circular shapes, a draggable group for selected shapes, a transformer, and a selection rectangle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Resizing_Stress_Test.mdx#2025-04-11_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  <Stage\n    width={window.innerWidth}\n    height={window.innerHeight}\n    onMouseDown={handleMouseDown}\n    onTouchStart={handleMouseDown}\n    onMouseMove={handleMouseMove}\n    onTouchMove={handleMouseMove}\n    onMouseUp={handleMouseUp}\n    onTouchEnd={handleMouseUp}\n    onClick={handleClick}\n    onTap={handleClick}\n  >\n    <Layer ref={layerRef}>\n      {shapes.filter(shape => !selectedShapes.find(s => s.id === shape.id)).map(shape => (\n        <Circle\n          key={shape.id}\n          id={shape.id.toString()}\n          x={shape.x}\n          y={shape.y}\n          radius={shape.radius}\n          fill={shape.fill}\n          stroke={shape.stroke}\n          name=\"shape\"\n        />\n      ))}\n    </Layer>\n    <Layer ref={topLayerRef}>\n      <Group\n        ref={groupRef}\n        draggable\n      >\n        {selectedShapes.map(shape => (\n          <Circle\n            key={shape.id}\n            id={shape.id.toString()}\n            x={shape.x}\n            y={shape.y}\n            radius={shape.radius}\n            fill={shape.fill}\n            stroke=\"blue\"\n            strokeWidth={2}\n            name=\"shape\"\n          />\n        ))}\n      </Group>\n      <Transformer ref={trRef} />\n      <Rect {...selectionRectProps} />\n    </Layer>\n  </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Caching Konva Nodes in Vue\nDESCRIPTION: Basic example showing how to access a Konva node in a Vue component using refs and apply caching to it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Cache.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in template:\n<v-group ref=\"group\">\n// later in the code:\nthis.$refs.group.getNode().cache();\n```\n\n----------------------------------------\n\nTITLE: Touch Event Handler Implementation in Konva.js\nDESCRIPTION: Implementation of touch event handlers for managing stage position and scale during touch interactions. Includes handlers for calculating distances between touch points, updating stage position based on touch center point, and cleaning up touch state on touch end.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Stage.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dx = newCenter.x - lastCenter.value.x;\nconst dy = newCenter.y - lastCenter.value.y;\n\nstagePos.value = {\n  x: newCenter.x - pointTo.x * scale + dx,\n  y: newCenter.y - pointTo.y * scale + dy,\n};\n\nlastDist.value = dist;\nlastCenter.value = newCenter;\n}\n};\n\nconst handleTouchEnd = () => {\n  lastDist.value = 0;\n  lastCenter.value = null;\n};\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Parent in Konva.js\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, allowing for later reuse of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Groups in Konva.js with Vue.js\nDESCRIPTION: Vue.js implementation of transparent groups in Konva.js showing both default and cached opacity behaviors. The example uses Vue's ref and onMounted hook to cache the second group after component mounting.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Transparent_Group.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <!-- Default group with overlapping shapes -->\n      <v-group :config=\"{ ...groupConfig, x: 50 }\">\n        <v-rect :config=\"rectConfig\" />\n        <v-circle :config=\"circleConfig\" />\n      </v-group>\n      <!-- Cached group with fixed opacity behavior -->\n      <v-group ref=\"group2\" :config=\"{ ...groupConfig, x: 250 }\">\n        <v-rect :config=\"rectConfig\" />\n        <v-circle :config=\"circleConfig\" />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst group2 = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: 400,\n};\n\nconst groupConfig = {\n  opacity: 0.5,\n  y: 50,\n  draggable: true,\n};\n\nconst rectConfig = {\n  width: 100,\n  height: 100,\n  fill: 'red',\n};\n\nconst circleConfig = {\n  x: 100,\n  y: 100,\n  radius: 70,\n  fill: 'green',\n};\n\nonMounted(() => {\n  if (group2.value) {\n    // Cache the second group to change opacity behavior\n    group2.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a RemoveAlpha Filter in React with react-konva\nDESCRIPTION: A React implementation of the custom RemoveAlpha filter using react-konva components. This example demonstrates how to apply the filter to an image in a React context with useRef and useEffect hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Custom_Filter.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\n// create our custom filter\nKonva.Filters.RemoveAlpha = function (imageData) {\n  const data = imageData.data;\n  for (let i = 0; i < data.length; i += 4) {\n    data[i + 3] = 255; // set alpha to 1\n  }\n};\n\nconst App = () => {\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Image\n          ref={imageRef}\n          x={50}\n          y={50}\n          image={image}\n          draggable\n          filters={[Konva.Filters.RemoveAlpha]}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Tweening Blur Filter on Image with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to apply a blur filter to an image and tween it using Konva.js in vanilla JavaScript. It creates an interactive image that becomes less blurred when the user hovers over it or touches it. The code sets up a Konva stage, loads an image, applies a blur filter, and creates a tween to animate the blur effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Tween_Filter.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\n// create image\nconst imageObj = new Image();\nimageObj.onload = () => {\nconst lion = new Konva.Image({\nx: 50,\ny: 50,\nimage: imageObj,\ndraggable: true,\n});\n\nlayer.add(lion);\n\n// add blur filter\nlion.cache();\nlion.filters([Konva.Filters.Blur]);\nlion.blurRadius(10);\n\n// create blur tween\nconst tween = new Konva.Tween({\nnode: lion,\nduration: 0.5,\nblurRadius: 0,\neasing: Konva.Easings.EaseInOut,\n});\n\n// bind events\nlion.on('mouseenter touchstart', () => {\ntween.play();\n});\n\nlion.on('mouseleave touchend', () => {\ntween.reverse();\n});\n\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Installing svelte-konva Dependencies via npm\nDESCRIPTION: Command to install the required packages for using Konva with Svelte. This installs both the svelte-konva binding library and the underlying Konva framework.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i svelte-konva konva\n```\n\n----------------------------------------\n\nTITLE: Using scaleX with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the horizontal scale of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Moving Shapes Between Containers - Vue KonvaJS Implementation\nDESCRIPTION: Vue implementation using vue-konva to create draggable groups and move a red rectangle between them. Uses reactive state with v-if directives for container switching.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Change_Containers.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"moveToYellow\">Move to yellow group</button>\n    <button @click=\"moveToBlue\">Move to blue group</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-group :config=\"yellowGroupConfig\">\n          <v-rect :config=\"yellowBoxConfig\" />\n          <v-rect v-if=\"redBoxGroup === 'yellow'\" :config=\"redBoxConfig\" />\n        </v-group>\n        <v-group :config=\"blueGroupConfig\">\n          <v-rect :config=\"blueBoxConfig\" />\n          <v-rect v-if=\"redBoxGroup === 'blue'\" :config=\"redBoxConfig\" />\n        </v-group>\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst redBoxGroup = ref('yellow');\n\nconst yellowGroupConfig = {\n  x: 50,\n  y: 50,\n  draggable: true\n};\n\nconst blueGroupConfig = {\n  x: 200,\n  y: 50,\n  draggable: true\n};\n\nconst yellowBoxConfig = {\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst blueBoxConfig = {\n  width: 100,\n  height: 100,\n  fill: 'blue',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst redBoxConfig = {\n  x: 10,\n  y: 10,\n  width: 30,\n  height: 30,\n  fill: 'red'\n};\n\nconst moveToYellow = () => {\n  redBoxGroup.value = 'yellow';\n};\n\nconst moveToBlue = () => {\n  redBoxGroup.value = 'blue';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets whether a node is visible. This affects the rendering of the node. To determine if a node is visible by taking into account its parents, use the isVisible() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Shape Resize Snapping\nDESCRIPTION: React component implementation of shape resize snapping using react-konva. Demonstrates the same functionality as vanilla JS version but using React components and hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Resize_Snaps.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Line, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          points={[0, window.innerHeight / 2, window.innerWidth, window.innerHeight / 2]}\n          stroke=\"#000\"\n          strokeWidth={1}\n          dash={[4, 4]}\n        />\n        <Line\n          points={[window.innerWidth / 2, 0, window.innerWidth / 2, window.innerHeight]}\n          stroke=\"#000\"\n          strokeWidth={1}\n          dash={[4, 4]}\n        />\n        <Rect\n          x={60}\n          y={60}\n          width={100}\n          height={100}\n          fill=\"red\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          anchorDragBoundFunc={(oldPos, newPos) => {\n            const dist = Math.sqrt(Math.pow(newPos.x - window.innerWidth / 2, 2));\n            if (dist < 10) {\n              return {\n                ...newPos,\n                x: window.innerWidth / 2,\n              };\n            }\n            return newPos;\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas Animation with Konva in Vue\nDESCRIPTION: This Vue implementation demonstrates optimized Konva animations using Vue's composition API. It showcases shape caching for complex objects, selective property animation with Konva.Animation, and lifecycle management with onMounted and onUnmounted hooks. The example includes a toggleable animation of a rotating star and moving circle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Animation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<template>\n  <div>\n    <button\n      @click=\"toggleAnimation\"\n      style=\"position: absolute; top: 10px; left: 10px\"\n    >\n      {{ isPlaying ? 'Stop Animation' : 'Start Animation' }}\n    </button>\n    \n    <v-stage :config=\"stageSize\">\n      <v-layer ref=\"layerRef\">\n        <v-star\n          ref=\"starRef\"\n          :config=\"starConfig\"\n        />\n        <v-circle\n          ref=\"circleRef\"\n          :config=\"circleConfig\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst starConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst circleConfig = ref({\n  x: 100,\n  y: 100,\n  radius: 20,\n  fill: 'red'\n});\n\nconst layerRef = ref(null);\nconst starRef = ref(null);\nconst circleRef = ref(null);\nconst isPlaying = ref(true);\nlet anim = null;\n\nonMounted(() => {\n  // Cache the star shape for better performance\n  starRef.value.getNode().cache();\n\n  // Create animation\n  anim = new Konva.Animation((frame) => {\n    // Rotate star (cached shape)\n    starRef.value.getNode().rotation(frame.time * 0.1);\n    \n    // Move circle in a circle pattern\n    const circle = circleRef.value.getNode();\n    circle.x(100 + Math.cos(frame.time * 0.002) * 50);\n    circle.y(100 + Math.sin(frame.time * 0.002) * 50);\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n\nconst toggleAnimation = () => {\n  if (isPlaying.value) {\n    anim.stop();\n  } else {\n    anim.start();\n  }\n  isPlaying.value = !isPlaying.value;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Enabled Transforms in Konva.js\nDESCRIPTION: Illustrates how to get and set the enabled transforms for a Konva.js node. The transformsEnabled method can be used without parameters to retrieve the current value, or with a string parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Applying Tween Animations to Konva.js Nodes\nDESCRIPTION: Demonstrates how to use the 'to' method for tweening node properties in Konva.js, providing a shorter syntax for animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows various ways to fire events on a Konva.js node, including custom events and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Relatively in Konva.js\nDESCRIPTION: Demonstrates how to move a Konva.js node by a relative amount from its current position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to KonvaJS Nodes\nDESCRIPTION: Demonstrates how to apply visual filters to nodes. Filters are applied to cached canvases and can be combined for complex visual effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking if a Konva.js Node Has a Specific Name\nDESCRIPTION: Shows how to check if a Konva.js node has a specific name using the hasName method. This is useful for conditional logic based on node naming.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of the first pointer (mouse or touch) relative to the local coordinates of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Comparing Perfect and Non-Perfect Drawing in Vue\nDESCRIPTION: This Vue component creates a Konva stage with two circles, demonstrating the difference between perfect and non-perfect drawing modes using vue-konva library.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Disable_Perfect_Draw.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <!-- With perfect drawing (default) -->\n      <v-circle :config=\"perfectCircleConfig\" />\n      \n      <!-- Without perfect drawing -->\n      <v-circle :config=\"nonPerfectCircleConfig\" />\n      \n      <!-- Labels -->\n      <v-text :config=\"perfectLabelConfig\" />\n      <v-text :config=\"nonPerfectLabelConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst perfectCircleConfig = {\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5\n};\n\nconst nonPerfectCircleConfig = {\n  x: 250,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5,\n  perfectDrawEnabled: false\n};\n\nconst perfectLabelConfig = {\n  x: 50,\n  y: 170,\n  text: 'Perfect Drawing',\n  fontSize: 16\n};\n\nconst nonPerfectLabelConfig = {\n  x: 200,\n  y: 170,\n  text: 'Perfect Drawing Disabled',\n  fontSize: 16\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Querying and Setting strokeHitEnabled in Konva.js\nDESCRIPTION: Demonstrates how to get and set the strokeHitEnabled property of a shape. This property is used for performance optimization by controlling whether the stroke is drawn on the hit canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Applying HSL Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply an HSL (Hue, Saturation, Luminance) filter to a Konva image. The filter is added and the luminance is adjusted.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimage.filters([Konva.Filters.HSL]);\nimage.luminance(0.2);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Opacity in Konva.js\nDESCRIPTION: Shows how to get and set the opacity of a node. Opacity values range from 0 (fully transparent) to 1 (fully opaque), allowing for transparency effects in the rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Width in Konva\nDESCRIPTION: Methods to get or set the stroke width of a shape in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Events with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to create a stage, layer, and shapes in Konva.js using Vanilla JavaScript. It sets up a triangle that responds to pointer events, displaying the current coordinates when the pointer moves over it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Pointer_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\n\nconst triangle = new Konva.RegularPolygon({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  sides: 3,\n  radius: 80,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\ntriangle.on('pointermove', function () {\n  const pos = stage.getPointerPosition();\n  writeMessage('x: ' + pos.x + ', y: ' + pos.y);\n});\n\ntriangle.on('pointerout', function () {\n  writeMessage('');\n});\n\nlayer.add(triangle);\nlayer.add(text);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image using toImage Method in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method with a callback to handle the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Interactive zIndex Example with Vue\nDESCRIPTION: A complete example demonstrating zIndex manipulation in Konva.js using Vue.js. Implements conditional rendering to move a red circle between groups, showing how the rendering order changes based on the group membership.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/zIndex.mdx#2025-04-11_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"moveToGroup2\">Move red circle to group2</button>\n    <button @click=\"moveToGroup1\">Move red circle to group1</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-group>\n          <v-rect :config=\"blackRectConfig\" />\n          <v-circle v-if=\"redCircleGroup === 'group1'\" :config=\"redCircleConfig\" />\n        </v-group>\n        <v-group>\n          <v-rect :config=\"greenRectConfig\" />\n          <v-circle v-if=\"redCircleGroup === 'group2'\" :config=\"redCircleConfig\" />\n        </v-group>\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst redCircleGroup = ref('group1');\n\nconst blackRectConfig = {\n  x: 10,\n  y: 10,\n  width: 100,\n  height: 100,\n  fill: 'black'\n};\n\nconst greenRectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'green'\n};\n\nconst redCircleConfig = {\n  x: 80,\n  y: 80,\n  radius: 40,\n  fill: 'red'\n};\n\nconst moveToGroup2 = () => {\n  redCircleGroup.value = 'group2';\n};\n\nconst moveToGroup1 = () => {\n  redCircleGroup.value = 'group1';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Composite Operations in JavaScript\nDESCRIPTION: Shows how to get and set the globalCompositeOperation of a Konva node. This affects how the node is rendered relative to its background.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Text Constructor in JavaScript\nDESCRIPTION: Creates a new text object in Konva with the provided configuration settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Text(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounding Box Constraints for KonvaJS Transformations\nDESCRIPTION: A function that constrains transformation operations by enforcing minimum dimensions for the bounding box. It prevents users from resizing elements to less than 10 pixels in either width or height.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst boundBoxFunc = (oldBox, newBox) => {\n  if (Math.abs(newBox.width) < 10 || Math.abs(newBox.height) < 10) {\n    return oldBox;\n  }\n  return newBox;\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Selector in Konva.js\nDESCRIPTION: This code shows how to find all ancestors of a node that match a given selector. It returns an array of ancestor nodes that match the specified selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Interactive zIndex Example with Vanilla JavaScript\nDESCRIPTION: A complete example that demonstrates zIndex manipulation in Konva.js using vanilla JavaScript. Creates groups with different shapes and provides buttons to move a red circle between groups, which changes its rendering order.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/zIndex.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\n// first group\nconst group1 = new Konva.Group();\nlayer.add(group1);\n\nconst blackRect = new Konva.Rect({\nx: 10,\ny: 10,\nwidth: 100,\nheight: 100,\nfill: 'black',\n});\ngroup1.add(blackRect);\n\nconst redCircle = new Konva.Circle({\nx: 80,\ny: 80,\nradius: 40,\nfill: 'red',\n});\ngroup1.add(redCircle);\n\n// second group\nconst group2 = new Konva.Group();\nlayer.add(group2);\n\nconst greenRect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'green',\n});\ngroup2.add(greenRect);\n\nstage.add(layer);\n\n// create buttons\nconst btn1 = document.createElement('button');\nbtn1.textContent = 'Move red circle to group2';\nbtn1.addEventListener('click', () => {\nredCircle.moveTo(group2);\n});\n\nconst btn2 = document.createElement('button');\nbtn2.textContent = 'Move red circle to group1';\nbtn2.addEventListener('click', () => {\nredCircle.moveTo(group1);\n});\n\ndocument.body.appendChild(btn1);\ndocument.body.appendChild(btn2);\n```\n\n----------------------------------------\n\nTITLE: Cloning a Konva.js Node\nDESCRIPTION: Demonstrates how to clone a node and optionally override its properties in the process.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a basic canvas with shapes using react-konva\nDESCRIPTION: Example React component demonstrating how to create a simple canvas with draggable shapes using react-konva. It imports necessary components from react-konva and creates a Stage with a Layer containing Text, Rect, and Circle components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Rect, Circle, Text } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text text=\"Try to drag shapes\" fontSize={15} />\n        <Rect\n          x={20}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"red\"\n          shadowBlur={10}\n          draggable\n        />\n        <Circle\n          x={200}\n          y={100}\n          radius={50}\n          fill=\"green\"\n          draggable\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Shadows with Vue-Konva\nDESCRIPTION: Vue implementation of canvas shadows using vue-konva components. Demonstrates the same shadow effects on text, line, and rectangle shapes using Vue's template syntax and component structure.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/04-Shadow.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"{\n          text: 'Text Shadow!',\n          fontFamily: 'Calibri',\n          fontSize: 40,\n          x: 20,\n          y: 20,\n          stroke: 'red',\n          strokeWidth: 2,\n          shadowColor: 'black',\n          shadowBlur: 0,\n          shadowOffset: { x: 10, y: 10 },\n          shadowOpacity: 0.5,\n        }\"\n      />\n      <v-line\n        :config=\"{\n          stroke: 'green',\n          strokeWidth: 10,\n          lineJoin: 'round',\n          lineCap: 'round',\n          points: [50, 140, 250, 160],\n          shadowColor: 'black',\n          shadowBlur: 10,\n          shadowOffset: { x: 10, y: 10 },\n          shadowOpacity: 0.5,\n        }\"\n      />\n      <v-rect\n        :config=\"{\n          x: 100,\n          y: 120,\n          width: 100,\n          height: 50,\n          fill: '#00D2FF',\n          stroke: 'black',\n          strokeWidth: 4,\n          shadowColor: 'black',\n          shadowBlur: 10,\n          shadowOffset: { x: 10, y: 10 },\n          shadowOpacity: 0.5,\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying RGBA Filter in Konva.js\nDESCRIPTION: Illustrates how to apply an RGBA filter to a Konva node. The node is cached, the RGBA filter is added, and color channels including alpha are adjusted.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.RGBA]);\nnode.blue(120);\nnode.green(200);\nnode.alpha(0.3);\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML DOM Elements in Konva Stage using React-Konva-Utils\nDESCRIPTION: This snippet demonstrates how to integrate HTML DOM elements inside a Konva canvas stage using the Html component from react-konva-utils. The example shows a simple input field embedded in a Konva stage alongside a red rectangle with shadow effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/DOM_Portal.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { Html } from 'react-konva-utils';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Html>\n          <input placeholder=\"DOM input from Konva nodes\" />\n        </Html>\n        <Rect\n          x={20}\n          y={20}\n          width={50}\n          height={50}\n          fill=\"red\"\n          shadowBlur={5}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transform Events with Vanilla Konva.js\nDESCRIPTION: This snippet shows how to implement transform events in vanilla JavaScript using Konva.js. It creates a stage, layer, rectangle and transformer, then attaches event listeners for transformstart, transform, and transformend on both the transformer and the rectangle. When transform events occur, messages are logged to the console.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/06_Transform_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: 'yellow',\nstroke: 'black',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\n});\nlayer.add(tr);\n\ntr.on('transformstart', () => {\nconsole.log('transform start');\n});\n\ntr.on('transform', () => {\nconsole.log('transforming');\n});\n\ntr.on('transformend', () => {\nconsole.log('transform end');\n});\n\nrect.on('transformstart', () => {\nconsole.log('rect transform start');\n});\n\nrect.on('transform', () => {\nconsole.log('rect transforming');\n});\n\nrect.on('transformend', () => {\nconsole.log('rect transform end');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Konva.js\nDESCRIPTION: Shows how to set multiple attributes at once using an object literal, which is more efficient than setting them individually.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting IDs in Konva.js\nDESCRIPTION: Example of getting and setting a node's ID. IDs are global for the entire page, not just within the Konva context.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Caching for Performance in Vue with vue-konva\nDESCRIPTION: This Vue component uses vue-konva to create and compare cached and non-cached complex shapes. It demonstrates how to apply caching and filters to Konva shapes in a Vue environment, and includes an animation to show the performance difference.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Shape_Caching.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <!-- Non-cached complex shape -->\n      <v-star\n        ref=\"nonCachedStarRef\"\n        :config=\"starConfig\"\n      />\n      \n      <!-- Cached complex shape -->\n      <v-star\n        ref=\"cachedStarRef\"\n        :config=\"{ ...starConfig, x: 250 }\"\n      />\n      \n      <!-- Labels -->\n      <v-text :config=\"nonCachedLabelConfig\" />\n      <v-text :config=\"cachedLabelConfig\" />\n      \n      <!-- FPS counter -->\n      <v-text\n        ref=\"fpsTextRef\"\n        :config=\"fpsConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst starConfig = {\n  x: 100,\n  y: 100,\n  numPoints: 20,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst nonCachedLabelConfig = {\n  x: 50,\n  y: 200,\n  text: 'Non-Cached Shape',\n  fontSize: 16\n};\n\nconst cachedLabelConfig = {\n  x: 200,\n  y: 200,\n  text: 'Cached Shape\\n(Better Performance)',\n  fontSize: 16\n};\n\nconst fpsConfig = ref({\n  x: 10,\n  y: 10,\n  text: 'FPS: 0',\n  fontSize: 16\n});\n\nconst layerRef = ref(null);\nconst nonCachedStarRef = ref(null);\nconst cachedStarRef = ref(null);\nconst fpsTextRef = ref(null);\nlet anim = null;\n\nonMounted(() => {\n  // Add blur filter and cache to the cached star\n  const cachedStar = cachedStarRef.value.getNode();\n  cachedStar.cache();\n  cachedStar.filters([Konva.Filters.Blur]);\n  cachedStar.blurRadius(5);\n\n  // Add blur filter to non-cached star\n  const nonCachedStar = nonCachedStarRef.value.getNode();\n  nonCachedStar.filters([Konva.Filters.Blur]);\n  nonCachedStar.blurRadius(5);\n\n  anim = new Konva.Animation((frame) => {\n    // Rotate stars\n    nonCachedStar.rotation(frame.time * 0.1);\n    cachedStar.rotation(frame.time * 0.1);\n    \n    // Update FPS counter\n    fpsTextRef.value.getNode().text('FPS: ' + frame.frameRate.toFixed(1));\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blur Filter Component with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates implementing a blur filter on an image using vue-konva. It uses Vue's composition API with ref for reactive data, useImage for loading the image resource, and a watcher to cache the image after loading. A slider input controls the blur radius.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Blur.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Blur],\n            blurRadius: blurRadius,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"40\"\n      :value=\"blurRadius\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst blurRadius = ref(10);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  blurRadius.value = parseInt(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Shadows with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates a canvas stage with three shapes (text, line, and rectangle) demonstrating shadow properties including shadowColor, shadowBlur, shadowOffset, and shadowOpacity. Uses vanilla JavaScript with Konva.js to render the shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/04-Shadow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n    container: 'container',\n    width: width,\n    height: height,\n});\n\nvar layer = new Konva.Layer();\n\nvar text = new Konva.Text({\n    text: 'Text Shadow!',\n    fontFamily: 'Calibri',\n    fontSize: 40,\n    x: 20,\n    y: 20,\n    stroke: 'red',\n    strokeWidth: 2,\n    shadowColor: 'black',\n    shadowBlur: 0,\n    shadowOffset: { x: 10, y: 10 },\n    shadowOpacity: 0.5,\n});\n\nvar line = new Konva.Line({\n    stroke: 'green',\n    strokeWidth: 10,\n    lineJoin: 'round',\n    lineCap: 'round',\n    points: [50, 140, 250, 160],\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffset: { x: 10, y: 10 },\n    shadowOpacity: 0.5,\n});\n\nvar rect = new Konva.Rect({\n    x: 100,\n    y: 120,\n    width: 100,\n    height: 50,\n    fill: '#00D2FF',\n    stroke: 'black',\n    strokeWidth: 4,\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffset: { x: 10, y: 10 },\n    shadowOpacity: 0.5,\n});\n\nlayer.add(text);\nlayer.add(line);\nlayer.add(rect);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Name in Konva.js\nDESCRIPTION: Demonstrates how to set and get the name of a node. Names can be used for selection and identification, and multiple names can be assigned like CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Managing Opacity in Konva.js\nDESCRIPTION: Example of getting and setting a node's opacity. Opacity values range from 0 (transparent) to 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Color Values in Konva.js\nDESCRIPTION: Methods for getting and setting RGB color values for filters. Each component accepts values between 0-255 and is used with the Konva.Filters.RGB filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nnode.red(value);    // Set red component (0-255)\nnode.green(value);  // Set green component (0-255)\nnode.blue(value);   // Set blue component (0-255)\n```\n\n----------------------------------------\n\nTITLE: Managing Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get and set the shadow blur property for a Konva shape. The blur value controls how soft the shadow appears.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node which takes into account its ancestor rotations. Returns a numeric value representing rotation in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffsetY in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the shadow's vertical offset independently.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in KonvaJS\nDESCRIPTION: Shows how to get and set the draggable flag which determines whether a node can be moved by drag and drop operations. Setting to true enables dragging functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings from Konva Nodes\nDESCRIPTION: Examples of removing event bindings from Konva nodes. Shows how to remove specific events, multiple events at once, and events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to get the absolute scale of a node, which includes the scaling effects of all ancestors. This is useful when you need the true scaling factor applied to a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Node Rotation in Konva Transformer\nDESCRIPTION: Shows how to set custom rotation behavior when the transformer has only one attached node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// set flag to false\ntransformer.useSingleNodeRotation(false);\n// attach a shape\ntransformer.nodes([shape]);\ntransformer.rotation(45);\ntransformer.update();\n```\n\n----------------------------------------\n\nTITLE: Applying Blur Filter to Images Using Vanilla JavaScript with Konva.js\nDESCRIPTION: This snippet demonstrates how to apply a blur filter to an image using Konva.js in vanilla JavaScript. It creates a stage and layer, loads an image, applies the Konva.Filters.Blur filter, and implements a slider to adjust the blur radius dynamically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Blur.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Blur]);\n  image.blurRadius(10);\n\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '0';\n  slider.max = '40';\n  slider.value = image.blurRadius();\n\n  slider.style.position = 'absolute';\n  slider.style.top = '20px';\n  slider.style.left = '20px';\n\n  slider.addEventListener('input', (e) => {\n    const value = parseInt(e.target.value);\n    image.blurRadius(value);\n  });\n\n  document.body.appendChild(slider);\n};\n\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva node into an image asynchronously using the toImage method with a callback to handle the resulting image. This is useful for caching complex drawings to improve performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Triangle Shape with Vanilla Konva.js\nDESCRIPTION: Initializes a Konva stage, layer, and a custom triangle shape. The triangle is defined using sceneFunc with path commands and styled with fill, stroke, and strokeWidth properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Custom.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst triangle = new Konva.Shape({\n  sceneFunc: function (context, shape) {\n    context.beginPath();\n    context.moveTo(20, 50);\n    context.lineTo(220, 80);\n    context.lineTo(100, 150);\n    context.closePath();\n    context.fillStrokeShape(shape);\n  },\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(triangle);\n```\n\n----------------------------------------\n\nTITLE: Using Native 2D Canvas with Konva.Image in Vanilla JavaScript\nDESCRIPTION: Creates a manual canvas element, draws shapes on it with the 2D context, and then uses it as the source for a Konva.Image. This approach allows direct canvas manipulations while still working within the Konva ecosystem.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Native_Context_Access.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// if you want to make something with native 2d canvas\n// we can create it and use it for Konva.Image\nconst canvas = document.createElement('canvas');\ncanvas.width = 200;\ncanvas.height = 150;\nconst ctx = canvas.getContext('2d');\n\nconst image = new Konva.Image({\n  x: 50,\n  y: 50,\n  image: canvas,\n  draggable: true,\n});\nlayer.add(image);\n\n// make manual drawings\nctx.fillStyle = 'blue';\nctx.fillRect(5, 5, canvas.width - 10, canvas.height / 2);\nctx.fillStyle = 'red';\nctx.beginPath();\nctx.arc(100, 75, 50, 0, 2 * Math.PI);\nctx.fill();\n\n// such as canvas is updated we need to redraw the layer\nlayer.batchDraw();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Pattern Y Position in Konva.js\nDESCRIPTION: Shows how to get and set the vertical position (y-axis) of a fill pattern for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Adding Canvas Background with Konva.Rect and CSS in Vue.js\nDESCRIPTION: Vue.js implementation demonstrating both methods of adding backgrounds to a Konva stage: CSS (green) and Konva.Rect with gradient (yellow-blue). Uses refs to access underlying Konva instances and maintains background position during stage dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Background.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage \n    ref=\"stageRef\" \n    :config=\"stageConfig\"\n    @dragmove=\"handleDragMove\"\n  >\n    <v-layer>\n      <!-- Gradient background -->\n      <v-rect\n        ref=\"backgroundRef\"\n        :config=\"backgroundConfig\"\n      />\n      \n      <!-- Demo shape -->\n      <v-circle\n        :config=\"circleConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stageRef = ref(null);\nconst backgroundRef = ref(null);\n\nconst stageConfig = {\n  width,\n  height,\n  draggable: true\n};\n\nconst backgroundConfig = {\n  x: 0,\n  y: 0,\n  width: width,\n  height: height,\n  fillLinearGradientStartPoint: { x: 0, y: 0 },\n  fillLinearGradientEndPoint: { x: width, y: height },\n  fillLinearGradientColorStops: [\n    0, 'yellow',\n    0.5, 'blue',\n    0.6, 'rgba(0, 0, 0, 0)'\n  ],\n  listening: false\n};\n\nconst circleConfig = {\n  x: width / 2,\n  y: height / 2,\n  radius: 100,\n  fill: 'red'\n};\n\n// Set CSS background when component mounts\nonMounted(() => {\n  if (stageRef.value) {\n    // Apply CSS background to stage container\n    const container = stageRef.value.getNode().container();\n    container.style.backgroundColor = 'green';\n  }\n});\n\n// Handler to reset background position on stage drag\nconst handleDragMove = () => {\n  if (backgroundRef.value) {\n    backgroundRef.value.getNode().absolutePosition({ x: 0, y: 0 });\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ellipse in Konva.js\nDESCRIPTION: Constructor for creating a new Ellipse shape in Konva.js, which requires a configuration object containing properties like radius.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Ellipse(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Drag and Drop Bounds with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates how to implement complex drag and drop boundaries using Vue 3 and vue-konva. It creates two draggable rectangles with different constraints: a blue rectangle bound below y=50 and a yellow rectangle bound within a circular region. The boundary logic is implemented in event handler functions that adjust the element positions during dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/08_Complex_Drag_and_Drop.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-group\n        :config=\"blueGroupConfig\"\n        @dragmove=\"handleBlueDragMove\"\n      >\n        <v-rect :config=\"blueRectConfig\" />\n        <v-text :config=\"blueTextConfig\" />\n      </v-group>\n      <v-group\n        :config=\"yellowGroupConfig\"\n        @dragmove=\"handleYellowDragMove\"\n      >\n        <v-rect :config=\"yellowRectConfig\" />\n        <v-text :config=\"yellowTextConfig\" />\n      </v-group>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst blueGroupConfig = {\n  x: 30,\n  y: 70,\n  draggable: true\n};\n\nconst yellowGroupConfig = {\n  x: window.innerWidth / 2,\n  y: 70,\n  draggable: true\n};\n\nconst blueRectConfig = {\n  width: 150,\n  height: 72,\n  fill: '#aaf',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst yellowRectConfig = {\n  width: 150,\n  height: 72,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst blueTextConfig = {\n  text: 'bound below',\n  fontSize: 26,\n  fontFamily: 'Calibri',\n  fill: 'black',\n  padding: 10,\n  width: 150,\n  align: 'center'\n};\n\nconst yellowTextConfig = {\n  text: 'bound in circle',\n  fontSize: 26,\n  fontFamily: 'Calibri',\n  fill: 'black',\n  padding: 10,\n  width: 150,\n  align: 'center'\n};\n\nconst handleBlueDragMove = (e) => {\n  e.target.y(Math.max(e.target.y(), 50));\n};\n\nconst handleYellowDragMove = (e) => {\n  const x = window.innerWidth / 2;\n  const y = 70;\n  const radius = 50;\n  const pos = e.target.absolutePosition();\n  const scale = radius / Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));\n\n  if (scale < 1) {\n    e.target.x(Math.round((pos.x - x) * scale + x));\n    e.target.y(Math.round((pos.y - y) * scale + y));\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Component with Konva Canvas\nDESCRIPTION: A simple Svelte component that demonstrates how to use svelte-konva to create a canvas with a blue rectangle. The example shows how to import components, set up a Stage, Layer, and add a basic shape with configuration properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { Stage, Layer, Rect } from 'svelte-konva';\n</script>\n\n<Stage config={{ width: window.innerWidth, height: window.innerHeight }}>\n  <Layer>\n    <Rect config={{ x: 100, y: 100, width: 400, height: 200, fill: 'blue' }} />\n  </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Values in Konva\nDESCRIPTION: Example showing how to get a specific attribute value from a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Triangle Shape with React-Konva\nDESCRIPTION: Implements a custom triangle shape using React-Konva components. The Shape component uses a sceneFunc to define the triangle path and applies styling through props.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Custom.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Shape } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Shape\n          sceneFunc={(context, shape) => {\n            context.beginPath();\n            context.moveTo(20, 50);\n            context.lineTo(220, 80);\n            context.lineTo(100, 150);\n            context.closePath();\n            context.fillStrokeShape(shape);\n          }}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a canvas element, which can be useful for further processing or rendering outside of the Konva framework.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Text in HTML5 Canvas with Vanilla JavaScript and Konva\nDESCRIPTION: This code creates a draggable and resizable text node in Konva that can be edited when double-clicked. It temporarily hides the canvas text and replaces it with a textarea positioned at the same coordinates, with matching styling. The edited text is saved when the user presses Enter or clicks outside.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Editable_Text.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nKonva._fixTextRendering = true;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst textNode = new Konva.Text({\ntext: 'Some text here',\nx: 50,\ny: 80,\nfontSize: 20,\ndraggable: true,\nwidth: 200,\n});\n\nlayer.add(textNode);\n\nconst tr = new Konva.Transformer({\nnode: textNode,\nenabledAnchors: ['middle-left', 'middle-right'],\nboundBoxFunc: function (oldBox, newBox) {\nnewBox.width = Math.max(30, newBox.width);\nreturn newBox;\n},\n});\n\ntextNode.on('transform', function () {\ntextNode.setAttrs({\nwidth: textNode.width() * textNode.scaleX(),\nscaleX: 1,\n});\n});\n\nlayer.add(tr);\n\ntextNode.on('dblclick dbltap', () => {\ntextNode.hide();\ntr.hide();\n\nconst textPosition = textNode.absolutePosition();\nconst stageBox = stage.container().getBoundingClientRect();\n\nconst areaPosition = {\nx: stageBox.left + textPosition.x,\ny: stageBox.top + textPosition.y,\n};\n\nconst textarea = document.createElement('textarea');\ndocument.body.appendChild(textarea);\n\ntextarea.value = textNode.text();\ntextarea.style.position = 'absolute';\ntextarea.style.top = areaPosition.y + 'px';\ntextarea.style.left = areaPosition.x + 'px';\ntextarea.style.width = textNode.width() - textNode.padding() * 2 + 'px';\ntextarea.style.height = textNode.height() - textNode.padding() * 2 + 5 + 'px';\ntextarea.style.fontSize = textNode.fontSize() + 'px';\ntextarea.style.border = 'none';\ntextarea.style.padding = '0px';\ntextarea.style.margin = '0px';\ntextarea.style.overflow = 'hidden';\ntextarea.style.background = 'none';\ntextarea.style.outline = 'none';\ntextarea.style.resize = 'none';\ntextarea.style.lineHeight = textNode.lineHeight();\ntextarea.style.fontFamily = textNode.fontFamily();\ntextarea.style.transformOrigin = 'left top';\ntextarea.style.textAlign = textNode.align();\ntextarea.style.color = textNode.fill();\n\nconst rotation = textNode.rotation();\nlet transform = '';\nif (rotation) {\ntransform += 'rotateZ(' + rotation + 'deg)';\n}\ntransform += 'translateY(-' + 2 + 'px)';\ntextarea.style.transform = transform;\n\ntextarea.style.height = 'auto';\ntextarea.style.height = textarea.scrollHeight + 3 + 'px';\n\ntextarea.focus();\n\nfunction removeTextarea() {\ntextarea.parentNode.removeChild(textarea);\nwindow.removeEventListener('click', handleOutsideClick);\ntextNode.show();\ntr.show();\ntr.forceUpdate();\n}\n\nfunction setTextareaWidth(newWidth) {\nif (!newWidth) {\nnewWidth = textNode.placeholder.length * textNode.fontSize();\n}\ntextarea.style.width = newWidth + 'px';\n}\n\ntextarea.addEventListener('keydown', function (e) {\nif (e.keyCode === 13 && !e.shiftKey) {\ntextNode.text(textarea.value);\nremoveTextarea();\n}\nif (e.keyCode === 27) {\nremoveTextarea();\n}\n});\n\ntextarea.addEventListener('keydown', function () {\nconst scale = textNode.getAbsoluteScale().x;\nsetTextareaWidth(textNode.width() * scale);\ntextarea.style.height = 'auto';\ntextarea.style.height = textarea.scrollHeight + textNode.fontSize() + 'px';\n});\n\nfunction handleOutsideClick(e) {\nif (e.target !== textarea) {\ntextNode.text(textarea.value);\nremoveTextarea();\n}\n}\nsetTimeout(() => {\nwindow.addEventListener('click', handleOutsideClick);\n});\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Transformer in Vue with Konva\nDESCRIPTION: A Vue component that demonstrates shape transformation using Konva. The code creates a canvas with two draggable rectangles that can be selected, resized, and rotated using a transformer tool. After transformation, the shapes change color randomly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Transformer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage\n    ref=\"stage\"\n    :config=\"stageSize\"\n    @mousedown=\"handleStageMouseDown\"\n    @touchstart=\"handleStageMouseDown\"\n  >\n    <v-layer ref=\"layer\">\n      <v-rect\n        v-for=\"item in rectangles\"\n        :key=\"item.id\"\n        :config=\"item\"\n        @transformend=\"handleTransformEnd\"\n      />\n      <v-transformer ref=\"transformer\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectangles = ref([\n  {\n    rotation: 0,\n    x: 10,\n    y: 10,\n    width: 100,\n    height: 100,\n    scaleX: 1,\n    scaleY: 1,\n    fill: 'red',\n    name: 'rect1',\n    draggable: true\n  },\n  {\n    rotation: 0,\n    x: 150,\n    y: 150,\n    width: 100,\n    height: 100,\n    scaleX: 1,\n    scaleY: 1,\n    fill: 'green',\n    name: 'rect2',\n    draggable: true\n  }\n]);\n\nconst selectedShapeName = ref('');\nconst transformer = ref(null);\n\nconst handleTransformEnd = (e) => {\n  // find element in our state\n  const rect = rectangles.value.find(\n    (r) => r.name === selectedShapeName.value\n  );\n  if (!rect) return;\n\n  // update the state with new properties\n  rect.x = e.target.x();\n  rect.y = e.target.y();\n  rect.rotation = e.target.rotation();\n  rect.scaleX = e.target.scaleX();\n  rect.scaleY = e.target.scaleY();\n\n  // change fill color randomly\n  rect.fill = Konva.Util.getRandomColor();\n};\n\nconst updateTransformer = () => {\n  const transformerNode = transformer.value.getNode();\n  const stage = transformerNode.getStage();\n  const selected = selectedShapeName.value;\n\n  const selectedNode = stage.findOne('.' + selected);\n  // do nothing if selected node is already attached\n  if (selectedNode === transformerNode.node()) {\n    return;\n  }\n\n  if (selectedNode) {\n    // attach to selected node\n    transformerNode.nodes([selectedNode]);\n  } else {\n    // remove transformer\n    transformerNode.nodes([]);\n  }\n};\n\nconst handleStageMouseDown = (e) => {\n  // clicked on stage - clear selection\n  if (e.target === e.target.getStage()) {\n    selectedShapeName.value = '';\n    updateTransformer();\n    return;\n  }\n\n  // clicked on transformer - do nothing\n  const clickedOnTransformer =\n    e.target.getParent().className === 'Transformer';\n  if (clickedOnTransformer) {\n    return;\n  }\n\n  // find clicked rect by its name\n  const name = e.target.name();\n  const rect = rectangles.value.find((r) => r.name === name);\n  if (rect) {\n    selectedShapeName.value = name;\n  } else {\n    selectedShapeName.value = '';\n  }\n  updateTransformer();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: This example demonstrates how to get and set filters on a Konva node. Filters are applied to cached canvases and can include effects like blur, sepia, and invert. The node must be cached before filters can be applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading Cross-Origin Images with Vue-Konva\nDESCRIPTION: Demonstrates CORS-enabled image loading in Vue using vue-konva and the useImage hook. Includes template setup and script configuration for proper image handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/posts/Tainted_Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"image\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: image\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\n// useImage hook handles crossOrigin automatically\nconst [image] = useImage('your-image-url', 'Anonymous');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resizing with Ratio Preservation in Vue Konva\nDESCRIPTION: This Vue.js implementation uses the Vue Konva components to create resizable text elements. It demonstrates how to configure transformers to either preserve aspect ratio by default or disable it with keepRatio set to false, while still allowing ratio preservation with SHIFT key.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/03_Keep_Ratio.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"text1Config\" ref=\"text1Ref\" />\n      <v-transformer :config=\"tr1Config\" ref=\"tr1Ref\" />\n      \n      <v-text :config=\"text2Config\" ref=\"text2Ref\" />\n      <v-transformer :config=\"tr2Config\" ref=\"tr2Ref\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst text1Config = {\n  x: 50,\n  y: 50,\n  text: 'keep ratio by default',\n  fontSize: 20,\n  draggable: true,\n  width: 200\n};\n\nconst text2Config = {\n  x: 50,\n  y: 150,\n  text: 'no ratio, but hold shift to keep ratio',\n  fontSize: 20,\n  draggable: true,\n  width: 200\n};\n\nconst tr1Config = {};\nconst tr2Config = {\n  keepRatio: false\n};\n\nconst text1Ref = ref(null);\nconst text2Ref = ref(null);\nconst tr1Ref = ref(null);\nconst tr2Ref = ref(null);\n\nonMounted(() => {\n  tr1Ref.value.getNode().nodes([text1Ref.value.getNode()]);\n  tr2Ref.value.getNode().nodes([text2Ref.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tooltips with Vue-Konva\nDESCRIPTION: Vue implementation of shape tooltips using Vue-Konva components. Uses Vue's composition API with ref and computed properties for reactive state management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tooltips.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-shape\n        :config=\"{\n          stroke: 'black',\n          fill: '#00D2FF',\n          strokeWidth: 1,\n          sceneFunc: drawTriangle,\n        }\"\n        @mousemove=\"(e) => handleMouseMove(e, 'Cyan Triangle')\"\n        @mouseout=\"handleMouseOut\"\n      />\n      <v-circle\n        :config=\"{\n          x: 250,\n          y: stageConfig.height / 2,\n          radius: 70,\n          fill: 'red',\n          stroke: 'black',\n          strokeWidth: 4,\n        }\"\n        @mousemove=\"(e) => handleMouseMove(e, 'Red Circle')\"\n        @mouseout=\"handleMouseOut\"\n      />\n    </v-layer>\n    <v-layer>\n      <v-text\n        :config=\"{\n          ...tooltipConfig,\n          visible: isTooltipVisible,\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst tooltipPos = ref({ x: 0, y: 0 });\nconst tooltipText = ref('');\nconst isTooltipVisible = ref(false);\n\nconst tooltipConfig = computed(() => ({\n  x: tooltipPos.value.x,\n  y: tooltipPos.value.y,\n  text: tooltipText.value,\n  fontFamily: 'Calibri',\n  fontSize: 12,\n  padding: 5,\n  textFill: 'white',\n  fill: 'black',\n  alpha: 0.75,\n}));\n\nconst drawTriangle = (context, shape) => {\n  context.beginPath();\n  context.moveTo(120, 50);\n  context.lineTo(250, 80);\n  context.lineTo(150, 170);\n  context.closePath();\n  context.fillStrokeShape(shape);\n};\n\nconst handleMouseMove = (e, text) => {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  tooltipPos.value = {\n    x: pos.x + 5,\n    y: pos.y + 5,\n  };\n  tooltipText.value = text;\n  isTooltipVisible.value = true;\n};\n\nconst handleMouseOut = () => {\n  isTooltipVisible.value = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Shows how to convert a Konva node into a canvas element. This can be useful for further canvas manipulation or for rendering outside of the Konva system.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of the first pointer (mouse or touch) relative to the local coordinates of a Konva.js node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Arrow in JavaScript\nDESCRIPTION: Creates a new instance of Konva.Arrow with the provided configuration options. The Arrow constructor allows customization of various properties such as points, tension, pointer dimensions, and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Arrow(config)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Ellipse Radius in Konva.js\nDESCRIPTION: Demonstrates how to get the current radius of an ellipse or set both x and y radius values simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius\nvar radius = ellipse.radius();\n\n// set radius\nellipse.radius({\n  x: 200,\n  y: 100\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node X Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the x-coordinate of a node's position. This allows for horizontal positioning adjustments without affecting the vertical position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Shows how to convert a Konva node into a Blob object asynchronously using Promises. Blobs are useful for storing binary data and can be used for file operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Points in Konva.js\nDESCRIPTION: Examples showing how to set start and end points for linear gradients in both fill and stroke contexts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Blur Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply a blur filter to a Konva node. The node is first cached, then the blur filter is added, and the blur radius is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\nnode.blurRadius(10);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Konva Node Position Information in JavaScript\nDESCRIPTION: Demonstrates how to get various position-related information for Konva nodes, including z-index, depth in the node tree, and pointer position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute z-index\nvar zIndex = node.getAbsoluteZIndex();\n\n// get node depth in tree\nvar depth = node.getDepth();\n\n// get relative pointer position\nvar pointerPos = rect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pointer at Ending in JavaScript\nDESCRIPTION: Shows how to get and set whether the pointer should be displayed at the end of the arrow. The pointerAtEnding method allows retrieving or setting this property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get value\nvar pointerAtEnding = line.pointerAtEnding();\n\n// set value\nline.pointerAtEnding(false);\n```\n\n----------------------------------------\n\nTITLE: Initializing Image State and History in Vue.js with Konva.js\nDESCRIPTION: Sets up reactive state variables for managing images, history tracking, and image loading. The initial state includes two images with different filter settings, and establishes an empty history array for undo/redo functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst images = ref([\n  { x: 50, y: 50, filter: 'none' },\n  { x: 150, y: 50, filter: 'blur' }\n]);\nconst history = ref([]);\nconst historyStep = ref(0);\nconst imageObj = ref(null);\n```\n\n----------------------------------------\n\nTITLE: Applying Mask Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply a mask filter to a Konva node. The node is cached, the mask filter is added, and the threshold is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Mask]);\nnode.threshold(200);\n```\n\n----------------------------------------\n\nTITLE: Large Canvas Implementation - React\nDESCRIPTION: React implementation of a large scrollable canvas using react-konva. Creates 200 random circles on a 3000x3000 canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\nconst App = () => {\n  const [nodes] = React.useState(() => \n    Array(NUMBER).fill().map(() => ({\n      x: WIDTH * Math.random(),\n      y: HEIGHT * Math.random(),\n    }))\n  );\n\n  return (\n    <Stage width={WIDTH} height={HEIGHT}>\n      <Layer>\n        {nodes.map((node, i) => (\n          <Circle\n            key={i}\n            x={node.x}\n            y={node.y}\n            radius={50}\n            fill=\"red\"\n            stroke=\"black\"\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Node Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the rotation of a node in degrees. This affects the rendering orientation of the node around its transformation point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag Instance in Konva\nDESCRIPTION: Initializes a new Konva.Tag object with the specified configuration. This constructor allows you to create a tag that can be attached to a label, with options for pointer direction and dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tag.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Tag(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Events with Vue and Konva.js\nDESCRIPTION: Vue 3 implementation of draggable stars with custom drop events using vue-konva. Uses composition API with refs and computed properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/09_Drop_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"mainLayer\">\n      <v-text :config=\"textConfig\" />\n      <v-star\n        v-for=\"star in stars\"\n        :key=\"star.id\"\n        :config=\"getStarConfig(star)\"\n        @dragstart=\"handleDragStart\"\n        @dragmove=\"handleDragMove\"\n        @dragend=\"handleDragEnd\"\n        @dragenter=\"handleDragEnter\"\n        @dragleave=\"handleDragLeave\"\n        @dragover=\"handleDragOver\"\n        @drop=\"handleDrop\"\n      />\n    </v-layer>\n    <v-layer ref=\"tempLayer\" />\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst message = ref('');\nconst mainLayer = ref(null);\nconst tempLayer = ref(null);\nconst previousShape = ref(null);\n\nconst stars = ref(Array.from({ length: 10 }, (_, i) => ({\n  id: i,\n  x: window.innerWidth * Math.random(),\n  y: window.innerHeight * Math.random(),\n  fill: 'blue',\n  name: `star ${i}`\n})));\n\nconst textConfig = computed(() => ({\n  text: message.value,\n  fill: 'black'\n}));\n\nconst getStarConfig = (star) => ({\n  id: star.id,\n  name: star.name,\n  x: star.x,\n  y: star.y,\n  numPoints: 10,\n  innerRadius: 20,\n  outerRadius: 25,\n  fill: star.fill,\n  shadowOffsetX: 5,\n  shadowOffsetY: 5,\n  draggable: true\n});\n\nconst handleDragStart = (e) => {\n  const shape = e.target;\n  shape.moveTo(tempLayer.value.getNode());\n  message.value = 'Moving ' + shape.attrs.name;\n};\n\nconst handleDragMove = (e) => {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  const shape = mainLayer.value.getNode().getIntersection(pos);\n\n  if (previousShape.value && shape) {\n    if (previousShape.value !== shape) {\n      previousShape.value.fire('dragleave', { evt: e.evt }, true);\n      shape.fire('dragenter', { evt: e.evt }, true);\n      previousShape.value = shape;\n    } else {\n      previousShape.value.fire('dragover', { evt: e.evt }, true);\n    }\n  } else if (!previousShape.value && shape) {\n    previousShape.value = shape;\n    shape.fire('dragenter', { evt: e.evt }, true);\n  } else if (previousShape.value && !shape) {\n    previousShape.value.fire('dragleave', { evt: e.evt }, true);\n    previousShape.value = null;\n  }\n};\n\nconst handleDragEnd = (e) => {\n  const shape = e.target;\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  const dropShape = mainLayer.value.getNode().getIntersection(pos);\n  \n  if (dropShape) {\n    previousShape.value.fire('drop', { evt: e.evt }, true);\n  }\n  \n  shape.moveTo(mainLayer.value.getNode());\n  previousShape.value = null;\n};\n\nconst handleDragEnter = (e) => {\n  const shape = e.target;\n  shape.fill('green');\n  message.value = 'dragenter ' + shape.attrs.name;\n};\n\nconst handleDragLeave = (e) => {\n  const shape = e.target;\n  shape.fill('blue');\n  message.value = 'dragleave ' + shape.attrs.name;\n};\n\nconst handleDragOver = (e) => {\n  message.value = 'dragover ' + e.target.attrs.name;\n};\n\nconst handleDrop = (e) => {\n  const shape = e.target;\n  shape.fill('red');\n  message.value = 'drop ' + shape.attrs.name;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon with KonvaJS\nDESCRIPTION: Demonstrates how to create a closed polygon shape by setting the closed property to true. The shape is filled with color and has a stroke outline.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst polygon = new Konva.Line({\n  points: [73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true\n});\n\nlayer.add(polygon);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Tooltip in Konva.js\nDESCRIPTION: Functions to handle tooltip visibility and positioning as the mouse interacts with canvas objects. When hovering over a node, the tooltip displays the node's ID and color, and follows the mouse pointer movement.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip.visible = true;\ntooltip.x = pos.x;\ntooltip.y = pos.y - 5;\ntooltip.text = `node: ${node.id}, color: ${node.color}`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Event Listeners on Konva Shapes with Vue\nDESCRIPTION: This example demonstrates how to listen to mouse events (mousemove, mouseout) on a Konva shape in a Vue component. It shows a triangle that displays coordinates when a mouse hovers over it and displays a 'mouseout' message when the mouse leaves the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage ref=\"stage\" :config=\"stageSize\">\n    <v-layer ref=\"layer\">\n      <v-regular-polygon\n        @mousemove=\"handleMouseMove\"\n        @mouseout=\"handleMouseOut\"\n        :config=\"{\n          x: 80,\n          y: 120,\n          sides: 3,\n          radius: 80,\n          fill: '#00D2FF',\n          stroke: 'black',\n          strokeWidth: 4\n        }\"\n      />\n      <v-text ref=\"text\" :config=\"{\n        x: 10,\n        y: 10,\n        fontFamily: 'Calibri',\n        fontSize: 24,\n        text: text,\n        fill: 'black'\n      }\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: width,\n        height: height\n      },\n      text: ''\n    };\n  },\n  methods: {\n    writeMessage(message) {\n      this.text = message;\n    },\n    handleMouseOut(event) {\n      this.writeMessage('Mouseout triangle');\n    },\n    handleMouseMove(event) {\n      const mousePos = this.$refs.stage.getNode().getPointerPosition();\n      const x = mousePos.x - 190;\n      const y = mousePos.y - 40;\n      this.writeMessage('x: ' + x + ', y: ' + y);\n    }\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius for Konva.Rect in JavaScript\nDESCRIPTION: Demonstrates how to get and set the corner radius of a Konva.Rect object. It allows for setting a single radius value for all corners or individual values for each corner.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get corner radius\nvar cornerRadius = rect.cornerRadius();\n\n// set corner radius\nrect.cornerRadius(10);\n\n// set different corner radius values\n// top-left, top-right, bottom-right, bottom-left\nrect.cornerRadius([0, 10, 20, 30]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Blob Shape with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a blob shape using Konva.js in vanilla JavaScript. It sets up a stage, adds a layer, and creates a Line object with specific points, fill, stroke, and tension properties to form a blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Blob.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst blob = new Konva.Line({\n  points: [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true,\n  tension: 0.3\n});\n\nlayer.add(blob);\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Transformer Styling in React with react-konva\nDESCRIPTION: This React component creates a Konva stage with a yellow rectangle and a custom-styled transformer. It uses refs to connect the rectangle and transformer, and applies the anchorStyleFunc to customize the appearance of transformer anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/05_Transformer_Complex_Styling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          anchorStyleFunc={(anchor) => {\n            // make all anchors circles\n            anchor.cornerRadius(50);\n            // make all anchors red\n            anchor.fill('red');\n\n            // make right-middle bigger\n            if (anchor.hasName('middle-right')) {\n              anchor.scale({ x: 2, y: 2 });\n            }\n            // make top-left invisible\n            if (anchor.hasName('top-left')) {\n              anchor.scale({ x: 0, y: 0 });\n            }\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a RemoveAlpha Filter in Vanilla JavaScript\nDESCRIPTION: A complete example showing how to create a custom filter that removes transparency from an image using Vanilla JavaScript with Konva. The filter sets the alpha value of each pixel to 255 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Custom_Filter.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// create our custom filter\nKonva.Filters.RemoveAlpha = function (imageData) {\n  const data = imageData.data;\n  for (let i = 0; i < data.length; i += 4) {\n    data[i + 3] = 255; // set alpha to 1\n  }\n};\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.RemoveAlpha]);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Vue Konva CDN Implementation\nDESCRIPTION: Complete HTML example showing how to use Vue Konva via CDN, including basic circle drawing functionality\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n  </head>\n  <body>\n    <div id=\"app\">\n      <v-stage ref=\"stage\" :config=\"configKonva\">\n        <v-layer ref=\"layer\">\n          <v-circle :config=\"configCircle\" />\n        </v-layer>\n      </v-stage>\n    </div>\n    <!--1. Link Vue Javascript & Konva-->\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n    <script src=\"https://unpkg.com/konva@9/konva.min.js\"></script>\n    <!--2. Link VueKonva Javascript (Plugin automatically installed)-->\n    <script src=\"https://unpkg.com/vue-konva@3/umd/vue-konva.min.js\"></script>\n    <script>\n      // 3. Create the Vue instance\n      const { createApp, ref } = Vue;\n      \n      const app = createApp({\n        setup() {\n          const configKonva = {\n            width: 200,\n            height: 200\n          };\n          \n          const configCircle = {\n            x: 100,\n            y: 100,\n            radius: 70,\n            fill: 'red',\n            stroke: 'black',\n            strokeWidth: 4\n          };\n          \n          return {\n            configKonva,\n            configCircle\n          };\n        }\n      });\n      \n      app.use(VueKonva);\n      app.mount('#app');\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Planets Image Map with React and Konva\nDESCRIPTION: This snippet implements the same interactive planets image map using React with react-konva. It uses React hooks for state management, including useState for message display and overlay visibility, and useImage for loading the planet image. The application consists of three layers with proper event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Planets_Image_Map.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image, Circle, Text } from 'react-konva';\nimport { useState } from 'react';\nimport useImage from 'use-image';\n\nconst planets = {\n  Mercury: {\n    x: 46,\n    y: 126,\n    radius: 32,\n  },\n  Venus: {\n    x: 179,\n    y: 126,\n    radius: 79,\n  },\n  Earth: {\n    x: 366,\n    y: 127,\n    radius: 85,\n  },\n  Mars: {\n    x: 515,\n    y: 127,\n    radius: 45,\n  },\n};\n\nconst CheckboxStyles = {\n  container: {\n    position: 'absolute',\n    left: '10px',\n    top: '10px',\n    zIndex: 99999,\n  },\n  label: {\n    color: 'white',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '5px',\n    cursor: 'pointer',\n  },\n  input: {\n    cursor: 'pointer',\n  },\n};\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [showOverlay, setShowOverlay] = useState(false);\n  const [planetsImage] = useImage('https://konvajs.org/assets/planets.png');\n\n  return (\n    <>\n      <div style={CheckboxStyles.container}>\n        <label style={CheckboxStyles.label}>\n          <input\n            type=\"checkbox\"\n            style={CheckboxStyles.input}\n            checked={showOverlay}\n            onChange={(e) => setShowOverlay(e.target.checked)}\n          />\n          Show map overlay\n        </label>\n      </div>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {planetsImage && <Image image={planetsImage} />}\n        </Layer>\n        <Layer>\n          {Object.entries(planets).map(([name, planet]) => (\n            <Circle\n              key={name}\n              x={planet.x}\n              y={planet.y}\n              radius={planet.radius}\n              fill={showOverlay ? 'red' : null}\n              onMouseEnter={() => setMessage(name)}\n              onMouseLeave={() => setMessage('')}\n            />\n          ))}\n        </Layer>\n        <Layer>\n          <Text\n            x={10}\n            y={10}\n            fontFamily=\"Calibri\"\n            fontSize={24}\n            text={message}\n            fill=\"white\"\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Zoom with Vue and KonvaJS\nDESCRIPTION: Vue implementation of the zoom functionality using vue-konva components. Uses Vue's composition API with refs to manage state for scale and position, implementing the same zoom behavior as other versions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Zoom_Layer_On_hover.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer\n      :config=\"{\n        scaleX: scale,\n        scaleY: scale,\n        x: position.x,\n        y: position.y\n      }\"\n      @mouseenter=\"handleMouseEnter\"\n      @mousemove=\"handleMouseMove\"\n      @mouseleave=\"handleMouseLeave\"\n    >\n      <v-image\n        v-if=\"image\"\n        :config=\"{\n          image: image,\n          width: stageSize.width,\n          height: stageSize.height\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst scale = ref(1);\nconst position = ref({ x: 0, y: 0 });\nconst [image] = useImage('https://konvajs.org/assets/space.jpg');\n\nconst handleMouseEnter = () => {\n  scale.value = 2;\n};\n\nconst handleMouseMove = (e) => {\n  const stage = e.target.getStage();\n  const pos = stage.getPointerPosition();\n  position.value = {\n    x: -pos.x,\n    y: -pos.y\n  };\n};\n\nconst handleMouseLeave = () => {\n  scale.value = 1;\n  position.value = { x: 0, y: 0 };\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position in Konva\nDESCRIPTION: Shows how to get and set a node's position relative to its parent container in Konva. This is different from absolute positioning which is relative to the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Image in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern image for a Konva.js shape. It includes loading an external image and applying it as a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Tweening Node Properties in Konva.js\nDESCRIPTION: Demonstrates how to tween properties of a Konva.js node using the to method. This is a shorter usage of the Konva.Tween object, allowing for animation of node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva.js\nDESCRIPTION: Demonstrates how to cache a shape and draw its hit graph from the cached scene canvas for improved performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Radial Gradient End Point in JavaScript with Konva\nDESCRIPTION: Demonstrates how to get and set the fill radial gradient end point using Konva Shape methods. The end point is specified as an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Image in Konva.js\nDESCRIPTION: Demonstrates how to get or set an image to be used as a fill pattern for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Checking if a Konva Node is Visible on Screen\nDESCRIPTION: Demonstrates how to determine if a node is currently visible in the user's viewport. The method accepts optional margin parameters to adjust the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get and set linear gradient color stops for both fill and stroke in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Managing Visibility of Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the visible attribute on a Konva node. This determines whether a node is rendered, with the visibility ultimately depending on parent nodes too.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Animations with Konva.js Tweening\nDESCRIPTION: Example showing how to use the to() method for tweening (animating) a node's properties. This provides a shorter syntax for the Konva.Tween object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying RGB Filter to Image with Vue in Konva.js\nDESCRIPTION: This code demonstrates how to implement an RGB filter on an image using Vue.js with vue-konva. It creates a stage with a draggable image and interactive sliders to adjust the red, green, and blue color values. The implementation uses Vue 3 Composition API with refs, watch, and the useImage hook.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/RGB.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.RGB],\n            red: red,\n            green: green,\n            blue: blue,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div style=\"position: absolute; top: 20px; left: 20px\">\n      <div>\n        Red\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          :value=\"red\"\n          @input=\"(e) => red = parseInt(e.target.value)\"\n        />\n      </div>\n      <div>\n        Green\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          :value=\"green\"\n          @input=\"(e) => green = parseInt(e.target.value)\"\n        />\n      </div>\n      <div>\n        Blue\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"255\"\n          :value=\"blue\"\n          @input=\"(e) => blue = parseInt(e.target.value)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst red = ref(100);\nconst green = ref(100);\nconst blue = ref(100);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Node Opacity in Konva.js\nDESCRIPTION: Shows how to get and set the opacity of a Konva.js node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Line with React-Konva\nDESCRIPTION: React implementation of a draggable line using react-konva components. Uses useState for position management and includes event handlers for drag and mouse interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/04_Drag_a_Line.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [position, setPosition] = useState({ x: 50, y: 50 });\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          x={position.x}\n          y={position.y}\n          points={[0, 0, 150, 0]}\n          stroke=\"red\"\n          strokeWidth={15}\n          lineCap=\"round\"\n          lineJoin=\"round\"\n          draggable\n          onDragEnd={(e) => {\n            setPosition({\n              x: e.target.x(),\n              y: e.target.y(),\n            });\n          }}\n          onMouseEnter={(e) => {\n            document.body.style.cursor = 'pointer';\n          }}\n          onMouseLeave={(e) => {\n            document.body.style.cursor = 'default';\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Desktop and Mobile Events with Vue-Konva\nDESCRIPTION: This snippet demonstrates handling desktop and mobile events in a Vue.js application with Vue-Konva. It uses Vue's reactive system with refs and computed properties to manage component state. The implementation includes separate event handler functions for mouse/touch start and end events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Desktop_and_Mobile.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-circle\n        :config=\"circleConfig\"\n        @mousedown=\"handleStart\"\n        @touchstart=\"handleStart\"\n        @mouseup=\"handleEnd\"\n        @touchend=\"handleEnd\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleStart = () => {\n  message.value = 'Mousedown or touchstart';\n};\n\nconst handleEnd = () => {\n  message.value = 'Mouseup or touchend';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Elastic Stars with Vanilla KonvaJS\nDESCRIPTION: Implements draggable stars with elastic animation using vanilla KonvaJS. Creates a stage with multiple stars that can be dragged and dropped, featuring shadow effects and elastic animations on interaction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Elastic_Stars.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nlet tween = null;\n\nfunction addStar(layer, stage) {\n  const scale = Math.random();\n\n  const star = new Konva.Star({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    numPoints: 5,\n    innerRadius: 30,\n    outerRadius: 50,\n    fill: '#89b717',\n    opacity: 0.8,\n    draggable: true,\n    scale: {\n      x: scale,\n      y: scale,\n    },\n    rotation: Math.random() * 180,\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffset: {\n      x: 5,\n      y: 5,\n    },\n    shadowOpacity: 0.6,\n    startScale: scale,\n  });\n\n  layer.add(star);\n}\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\n\nfor (let n = 0; n < 10; n++) {\n  addStar(layer, stage);\n}\n\nstage.add(layer);\n\nstage.on('dragstart', function (evt) {\n  const shape = evt.target;\n  if (tween) {\n    tween.pause();\n  }\n  shape.setAttrs({\n    shadowOffset: {\n      x: 15,\n      y: 15,\n    },\n    scale: {\n      x: shape.getAttr('startScale') * 1.2,\n      y: shape.getAttr('startScale') * 1.2,\n    },\n  });\n});\n\nstage.on('dragend', function (evt) {\n  const shape = evt.target;\n\n  tween = new Konva.Tween({\n    node: shape,\n    duration: 0.5,\n    easing: Konva.Easings.ElasticEaseOut,\n    scaleX: shape.getAttr('startScale'),\n    scaleY: shape.getAttr('startScale'),\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n  });\n\n  tween.play();\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Properties in Konva.js\nDESCRIPTION: Shows various ways to get and set stroke color using different color formats including string, hex, RGB, and RGBA with opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scrollbars with Vue-Konva\nDESCRIPTION: This snippet demonstrates how to create custom scrollbars for a large canvas using Vue-Konva. It leverages Vue's reactive system to manage scrollbar positions and content offset, implementing drag handlers and wheel event listeners for smooth navigation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\" @wheel=\"handleWheel\">\n    <v-layer :config=\"layerConfig\">\n      <v-circle\n        v-for=\"(node, i) in nodes\"\n        :key=\"i\"\n        :config=\"{\n          x: node.x,\n          y: node.y,\n          radius: 50,\n          fill: 'red',\n          stroke: 'black'\n        }\"\n      />\n    </v-layer>\n    <v-layer>\n      <v-rect\n        :config=\"{\n          width: 10,\n          height: 100,\n          fill: 'grey',\n          opacity: 0.8,\n          x: scrollBars.vertical.x,\n          y: scrollBars.vertical.y,\n          draggable: true,\n          dragBoundFunc: verticalDragBound\n        }\"\n        @dragmove=\"handleVerticalDrag\"\n      />\n      <v-rect\n        :config=\"{\n          width: 100,\n          height: 10,\n          fill: 'grey',\n          opacity: 0.8,\n          x: scrollBars.horizontal.x,\n          y: scrollBars.horizontal.y,\n          draggable: true,\n          dragBoundFunc: horizontalDragBound\n        }\"\n        @dragmove=\"handleHorizontalDrag\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\nconst PADDING = 5;\n\nconst position = ref({ x: 0, y: 0 });\nconst scrollBars = ref({\n  vertical: { x: window.innerWidth - PADDING - 10, y: PADDING },\n  horizontal: { x: PADDING, y: window.innerHeight - PADDING - 10 }\n});\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst layerConfig = computed(() => ({\n  x: position.value.x,\n  y: position.value.y\n}));\n\nconst nodes = Array(NUMBER).fill().map(() => ({\n  x: WIDTH * Math.random(),\n  y: HEIGHT * Math.random()\n}));\n\nconst verticalDragBound = (pos) => ({\n  x: window.innerWidth - PADDING - 10,\n  y: Math.max(\n    Math.min(pos.y, window.innerHeight - 100 - PADDING),\n    PADDING\n  )\n});\n\nconst horizontalDragBound = (pos) => ({\n  x: Math.max(\n    Math.min(pos.x, window.innerWidth - 100 - PADDING),\n    PADDING\n  ),\n  y: window.innerHeight - PADDING - 10\n});\n\nconst handleVerticalDrag = (e) => {\n  const pos = e.target.position();\n  const availableHeight = window.innerHeight - PADDING * 2 - 100;\n  const delta = (pos.y - PADDING) / availableHeight;\n  \n  position.value.y = -(HEIGHT - window.innerHeight) * delta;\n  scrollBars.value.vertical = pos;\n};\n\nconst handleHorizontalDrag = (e) => {\n  const pos = e.target.position();\n  const availableWidth = window.innerWidth - PADDING * 2 - 100;\n  const delta = (pos.x - PADDING) / availableWidth;\n  \n  position.value.x = -(WIDTH - window.innerWidth) * delta;\n  scrollBars.value.horizontal = pos;\n};\n\nconst handleWheel = (e) => {\n  e.evt.preventDefault();\n  const dx = e.evt.deltaX;\n  const dy = e.evt.deltaY;\n\n  const minX = -(WIDTH - window.innerWidth);\n  const maxX = 0;\n  const x = Math.max(minX, Math.min(position.value.x - dx, maxX));\n\n  const minY = -(HEIGHT - window.innerHeight);\n  const maxY = 0;\n  const y = Math.max(minY, Math.min(position.value.y - dy, maxY));\n\n  position.value = { x, y };\n\n\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Number of Points in Konva.Star\nDESCRIPTION: Methods to get or set the number of points in a Konva Star shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get inner radius\nvar numPoints = star.numPoints();\n\n// set inner radius\nstar.numPoints(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resize Limits with React-Konva\nDESCRIPTION: React implementation of a resizable rectangle with width limit using React-Konva. Uses refs to manage the transformer and rectangle nodes with the same 200-pixel width limitation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/07_Resize_Limits.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width > 200) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors in KonvaJS\nDESCRIPTION: Examples showing how to find ancestor nodes using selectors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point for a linear gradient fill in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Emboss Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply an emboss filter to a Konva node. The node is cached, the emboss filter is added, and various emboss properties are set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Emboss]);\nnode.embossStrength(0.8);\nnode.embossWhiteLevel(0.3);\nnode.embossDirection('right');\nnode.embossBlend(true);\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in KonvaJS\nDESCRIPTION: Example of getting client rectangle coordinates including transformations and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Creating KonvaJS Stage with React Components\nDESCRIPTION: This code shows how to implement a KonvaJS stage using React components. It creates a canvas with a red circle and uses React state to handle color changes when the circle is clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Simple_Load.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [color, setColor] = useState('red');\n\n  const handleClick = () => {\n    setColor(Konva.Util.getRandomColor());\n  };\n\n  return (\n    <Stage width={400} height={400}>\n      <Layer>\n        <Circle\n          x={100}\n          y={100}\n          radius={50}\n          fill={color}\n          stroke=\"black\"\n          strokeWidth={3}\n          onClick={handleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node, which takes into account the scales of its ancestors. This is useful when you need accurate scaling information.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Handling Stage Click Events in React Konva\nDESCRIPTION: This React implementation uses react-konva to handle stage click events. It manages the message state using React hooks and updates it based on whether the user clicked on the circle or on the empty stage area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Stage_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n\n  const handleStageClick = (e) => {\n    if (e.target === e.target.getStage()) {\n      setMessage('clicked on stage');\n      return;\n    }\n    setMessage('clicked on ' + e.target.name());\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onClick={handleStageClick}\n    >\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          name=\"circle\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hit Detection with Vue-Konva\nDESCRIPTION: This Vue.js implementation demonstrates custom hit detection in Konva using computed properties and refs. It provides a custom hitFunc for a star and hitStrokeWidth for a line, with event handlers to update the displayed message and toggle hit canvas visibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Custom_Hit_Region.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"toggleHit\">Toggle hit canvas</button>\n    <v-stage :config=\"stageSize\" ref=\"stageRef\">\n      <v-layer ref=\"layerRef\">\n        <v-text :config=\"textConfig\" />\n        <v-star\n          :config=\"starConfig\"\n          @mouseover=\"handleStarEvent\"\n          @mouseout=\"handleStarEvent\"\n          @mousedown=\"handleStarEvent\"\n          @mouseup=\"handleStarEvent\"\n        />\n        <v-line\n          :config=\"lineConfig\"\n          @mouseover=\"handleLineEvent\"\n          @mouseout=\"handleLineEvent\"\n          @mousedown=\"handleLineEvent\"\n          @mouseup=\"handleLineEvent\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\nconst showHit = ref(false);\nconst stageRef = ref(null);\nconst layerRef = ref(null);\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  text: message.value,\n  fontSize: 24\n}));\n\nconst starConfig = {\n  x: window.innerWidth / 4,\n  y: window.innerHeight / 2,\n  numPoints: 5,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  hitFunc: function(context, shape) {\n    context.beginPath();\n    context.arc(0, 0, 70, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStrokeShape(shape);\n  }\n};\n\nconst lineConfig = {\n  x: window.innerWidth * 0.6,\n  y: window.innerHeight / 2,\n  points: [-50, -50, 50, 50],\n  stroke: 'black',\n  strokeWidth: 2,\n  hitStrokeWidth: 20\n};\n\nconst handleStarEvent = (e) => {\n  message.value = e.type + ' star';\n};\n\nconst handleLineEvent = (e) => {\n  message.value = e.type + ' line';\n};\n\nconst toggleHit = () => {\n  showHit.value = !showHit.value;\n  const stage = stageRef.value.getNode().container();\n  if (showHit.value) {\n    const hitCanvas = layerRef.value.getNode().hitCanvas._canvas;\n    stage.style.border = '2px solid black';\n    stage.appendChild(hitCanvas);\n    hitCanvas.style.position = 'absolute';\n    hitCanvas.style.top = '0';\n    hitCanvas.style.left = '0';\n  } else {\n    const hitCanvas = layerRef.value.getNode().hitCanvas._canvas;\n    hitCanvas.remove();\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Caching for Performance in Vanilla JavaScript with Konva.js\nDESCRIPTION: This snippet demonstrates how to create and compare cached and non-cached complex shapes using Konva.js. It creates two star shapes with blur filters, one cached and one non-cached, and animates them to show the performance difference.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Shape_Caching.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create a complex shape (star with blur filter)\nconst createComplexShape = (x, isCached) => {\n  const star = new Konva.Star({\n    x: x,\n    y: 100,\n    numPoints: 20,\n    innerRadius: 40,\n    outerRadius: 70,\n    fill: 'yellow',\n    stroke: 'black',\n    strokeWidth: 4,\n  });\n\n  // Add blur filter\n  star.filters([Konva.Filters.Blur]);\n  star.blurRadius(5);\n\n  // Cache the shape if specified\n  if (isCached) {\n    star.cache();\n  }\n\n  return star;\n};\n\n// Create non-cached shape\nconst nonCachedStar = createComplexShape(100, false);\n\n// Create cached shape\nconst cachedStar = createComplexShape(250, true);\n\n// Add labels\nconst nonCachedLabel = new Konva.Text({\n  x: 50,\n  y: 200,\n  text: 'Non-Cached Shape',\n  fontSize: 16,\n});\n\nconst cachedLabel = new Konva.Text({\n  x: 200,\n  y: 200,\n  text: 'Cached Shape\\n(Better Performance)',\n  fontSize: 16,\n});\n\n// Add FPS counter\nconst fpsText = new Konva.Text({\n  x: 10,\n  y: 10,\n  text: 'FPS: 0',\n  fontSize: 16,\n});\n\nlayer.add(nonCachedStar);\nlayer.add(cachedStar);\nlayer.add(nonCachedLabel);\nlayer.add(cachedLabel);\nlayer.add(fpsText);\n\n// Create animation to demonstrate performance\nconst anim = new Konva.Animation((frame) => {\n  nonCachedStar.rotation(frame.time * 0.1);\n  cachedStar.rotation(frame.time * 0.1);\n  \n  // Update FPS counter\n  fpsText.text('FPS: ' + frame.frameRate.toFixed(1));\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Serializing Konva Stage in React\nDESCRIPTION: This example shows how to create a Konva stage with a circle in React and serialize it using the toJSON() method. It uses a ref to access the stage instance and provides a button that, when clicked, serializes the stage and logs the JSON to the console.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Serialize_a_Stage.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const stageRef = useRef(null);\n\n  const handleSerialize = () => {\n    const json = stageRef.current.toJSON();\n    console.log(json);\n    alert('Stage serialized! Check the console for the JSON string.');\n  };\n\n  return (\n    <div>\n      <button onClick={handleSerialize} style={{ marginBottom: '10px' }}>\n        Serialize Stage\n      </button>\n      <Stage width={400} height={400} ref={stageRef}>\n        <Layer>\n          <Circle\n            x={100}\n            y={100}\n            radius={50}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={3}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Groups in Konva.js with React\nDESCRIPTION: React implementation of transparent groups in Konva.js that demonstrates both default opacity behavior and cached opacity behavior. The example uses React hooks (useRef and useEffect) to cache the second group after component mounting.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Transparent_Group.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Rect, Circle } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const group2Ref = useRef(null);\n\n  useEffect(() => {\n    if (group2Ref.current) {\n      // Cache the second group to change opacity behavior\n      group2Ref.current.cache();\n    }\n  }, []);\n\n  const sharedGroupProps = {\n    opacity: 0.5,\n    draggable: true,\n  };\n\n  const renderGroup = (x, ref = null) => (\n    <Group {...sharedGroupProps} x={x} y={50} ref={ref}>\n      <Rect width={100} height={100} fill=\"red\" />\n      <Circle x={100} y={100} radius={70} fill=\"green\" />\n    </Group>\n  );\n\n  return (\n    <Stage width={window.innerWidth} height={400}>\n      <Layer>\n        {/* Default group with overlapping shapes */}\n        {renderGroup(50)}\n        {/* Cached group with fixed opacity behavior */}\n        {renderGroup(250, group2Ref)}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting HSV/HSL Hue in Konva.js\nDESCRIPTION: Method to get or set the HSV/HSL hue value in degrees for Konva.Filters.HSV or Konva.Filters.HSL filters. It accepts a number between 0 and 359.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nhue(hue)\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Bounds for Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set a drag bound function for a Konva.js node. This function can be used to constrain the node's movement during drag and drop operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Node to Another Container in Konva.js\nDESCRIPTION: Shows how to move a node from its current parent container to a different container. This is useful for reorganizing the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index of a Konva.js Node\nDESCRIPTION: Shows how to get and set the z-index of a Konva.js node relative to its siblings. Z-index controls the stacking order of nodes with the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Managing Shadow Color in Konva.js Shapes\nDESCRIPTION: Demonstrates various ways to get and set the shadow color for a shape, including using color strings, hex values, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Stroke Width in Konva.js\nDESCRIPTION: Shows how to configure the stroke width used for hit detection, which can be set to a specific value or to automatically match the visual stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Handling Drag End Events for Image Positioning\nDESCRIPTION: Updates image positions after a drag operation and saves the state to history. The function identifies the dragged image by index, extracts the new position from the event target, and updates the images array with the new coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleDragEnd = (index, e) => {\n  const newImages = [...images.value];\n  const pos = e.target.position();\n  newImages[index] = {\n    ...newImages[index],\n    x: pos.x,\n    y: pos.y\n  };\n  images.value = newImages;\n  saveHistory(newImages);\n};\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Node in a Konva Container in JavaScript\nDESCRIPTION: Shows how to find a single node within a Konva container using the findOne method. This method returns the first matching node based on the provided selector or function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Names\nDESCRIPTION: Examples of adding, checking, and removing names from a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Checking if a Konva Node is Visible on Screen\nDESCRIPTION: Demonstrates how to determine if a node is currently visible in the user's viewport. The optional margin parameter allows for additional buffer space around the screen edges.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes in a Konva Container using Selectors in JavaScript\nDESCRIPTION: Demonstrates how to find nodes within a Konva container using various selector types, including ID, name, type, and custom functions. The find method returns an array of matching nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPassing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listening in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable event listening for a node. Nodes with listening set to false won't be detected in hit testing, effectively making them non-interactive.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Building Star Spinner with Vue and Konva.js\nDESCRIPTION: This Vue implementation uses v-konva components to create an interactive star spinner. It manages animation state with Vue's reactivity system and implements the same physics for rotation and user interaction as the other versions, while following Vue's composition API pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Star_Spinner.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage\n    :config=\"stageSize\"\n    @mouseup=\"handleMouseUp\"\n    @touchend=\"handleMouseUp\"\n    @mousemove=\"handleMouseMove\"\n    @touchmove=\"handleMouseMove\"\n  >\n    <v-layer ref=\"layerRef\">\n      <v-star\n        ref=\"starRef\"\n        :config=\"starConfig\"\n        @mousedown=\"handleMouseDown\"\n        @touchstart=\"handleMouseDown\"\n      />\n      <v-circle :config=\"centerConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\n\n// disable degree mode to use radians\nKonva.angleDeg = false;\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst controlled = ref(false);\nconst starRef = ref(null);\nconst layerRef = ref(null);\nconst lastRotation = ref(0);\nconst angularVelocity = ref(6);\n\nconst starConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  outerRadius: 80,\n  innerRadius: 40,\n  stroke: '#005500',\n  fill: '#b5ff88',\n  strokeWidth: 4,\n  numPoints: 5,\n  lineJoin: 'round',\n  shadowOffsetX: 5,\n  shadowOffsetY: 5,\n  shadowBlur: 10,\n  shadowColor: 'black',\n  shadowOpacity: 0.5,\n  opacity: 0.8\n};\n\nconst centerConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 3,\n  fill: '#555'\n};\n\nlet anim = null;\n\nonMounted(() => {\n  // start animation after 1 second\n  setTimeout(() => {\n    const star = starRef.value.getNode();\n    const layer = layerRef.value.getNode();\n\n    anim = new Konva.Animation((frame) => {\n      // 20% slow down per second\n      const angularFriction = 0.2;\n      const angularVelocityChange =\n        (angularVelocity.value * frame.timeDiff * (1 - angularFriction)) / 1000;\n      angularVelocity.value -= angularVelocityChange;\n\n      if (controlled.value) {\n        const rotation = star.rotation();\n        angularVelocity.value =\n          ((rotation - lastRotation.value) * 1000) / frame.timeDiff;\n        lastRotation.value = rotation;\n      } else {\n        star.rotate((frame.timeDiff * angularVelocity.value) / 1000);\n        lastRotation.value = star.rotation();\n      }\n    }, layer);\n\n    anim.start();\n  }, 1000);\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n\nconst handleMouseDown = () => {\n  const star = starRef.value.getNode();\n  angularVelocity.value = 0;\n  lastRotation.value = star.rotation();\n  controlled.value = true;\n};\n\nconst handleMouseUp = () => {\n  const star = starRef.value.getNode();\n  lastRotation.value = star.rotation();\n  controlled.value = false;\n};\n\nconst handleMouseMove = (e) => {\n  if (!controlled.value) return;\n\n  const stage = e.target.getStage();\n  const mousePos = stage.getPointerPosition();\n  const star = starRef.value.getNode();\n  const x = star.x() - mousePos.x;\n  const y = star.y() - mousePos.y;\n  star.rotation(0.5 * Math.PI + Math.atan(y / x));\n\n  if (mousePos.x <= stage.width() / 2) {\n    star.rotate(Math.PI);\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a node with identical attributes and optionally override specific properties in the cloned node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Wedge Angle\nDESCRIPTION: Methods to get or set the angle of a wedge shape in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get angle\nvar angle = wedge.angle();\n\n// set angle\nwedge.angle(20);\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Triangle with Line Join in React\nDESCRIPTION: This snippet shows how to create a triangle shape with react-konva and change its line join style on mouse hover. It uses React hooks (useState) to manage the line join state and the Stage, Layer, and RegularPolygon components from react-konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/05-Line_Join.mdx#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [lineJoin, setLineJoin] = useState('miter');\n\n  const handleMouseEnter = () => {\n    const lineJoins = ['miter', 'bevel', 'round'];\n    const index = lineJoins.indexOf(lineJoin);\n    const nextIndex = (index + 1) % lineJoins.length;\n    setLineJoin(lineJoins[nextIndex]);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <RegularPolygon\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          sides={3}\n          radius={70}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={20}\n          lineJoin={lineJoin}\n          onMouseEnter={handleMouseEnter}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Optimizations in Konva.js\nDESCRIPTION: Example showing how to get and set which transforms are enabled for a node. Options include 'all', 'none', or 'position' to optimize drawing performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Making Nodes Draggable in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the draggable flag of a node. When enabled, users can drag the node with pointer interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hit Detection with hitFunc in Konva.js\nDESCRIPTION: Demonstrates how to get or set a custom hit detection drawing function which defines the clickable/interactive area of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Component Order with If-Blocks in svelte-konva\nDESCRIPTION: This code snippet shows how to structure components in a svelte-konva Stage, including the use of an if-block. It demonstrates potential issues with drawing order when using conditional rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/zIndex.md#2025-04-11_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Stage bind:config={stageConfig}>\n    <Layer>\n        <Rect bind:config={rectConfig} />\n        {#if showRing}\n            <Ring bind:config={ringConfig}/>\n        {/if}\n        <Circle bind:config={circleConfig} />\n    </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Gradient Fills in Konva.js\nDESCRIPTION: Shows how to create and configure radial gradient fills for Konva shapes by setting color stops at different positions along the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of DOM to Canvas Drag & Drop with Konva\nDESCRIPTION: Vue 3 composition API implementation using v-konva for drag and drop functionality. Manages image loading and sizing with reactive references and computed properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drop_DOM_Element.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <p>Drag&drop yoda into the grey area.</p>\n    <div style=\"margin-bottom: 10px;\">\n      <img \n        src=\"https://konvajs.org/assets/yoda.jpg\" \n        draggable=\"true\" \n        style=\"height: 100px; margin: 5px;\"\n        @dragstart=\"handleDragStart('https://konvajs.org/assets/yoda.jpg')\" \n      />\n      <img \n        src=\"https://konvajs.org/assets/darth-vader.jpg\" \n        draggable=\"true\" \n        style=\"height: 100px; margin: 5px;\"\n        @dragstart=\"handleDragStart('https://konvajs.org/assets/darth-vader.jpg')\" \n      />\n    </div>\n    \n    <div \n      @dragover.prevent\n      @drop=\"handleDrop\"\n      style=\"background-color: rgba(0, 0, 0, 0.1);\"\n    >\n      <v-stage \n        ref=\"stageRef\"\n        :config=\"stageConfig\"\n      >\n        <v-layer>\n          <v-image\n            v-for=\"img in images\"\n            :key=\"img.id\"\n            :config=\"getImageConfig(img)\"\n          />\n        </v-layer>\n      </v-stage>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight - 150\n};\n\nconst stageRef = ref(null);\nconst images = ref([]);\nconst dragImageSrc = ref('');\nconst loadedImages = ref({});\n\nconst handleDragStart = (src) => {\n  dragImageSrc.value = src;\n};\n\nconst handleDrop = (e) => {\n  e.preventDefault();\n  \n  if (!dragImageSrc.value || !stageRef.value) return;\n  \n  const stage = stageRef.value.getNode();\n  stage.setPointersPositions(e);\n  const position = stage.getPointerPosition();\n  \n  if (!loadedImages.value[dragImageSrc.value]) {\n    const img = new Image();\n    img.onload = () => {\n      loadedImages.value = {\n        ...loadedImages.value,\n        [dragImageSrc.value]: img\n      };\n      \n      addImageToStage(dragImageSrc.value, position);\n    };\n    img.src = dragImageSrc.value;\n  } else {\n    addImageToStage(dragImageSrc.value, position);\n  }\n};\n\nconst addImageToStage = (src, position) => {\n  images.value.push({\n    src: src,\n    x: position.x,\n    y: position.y,\n    id: Date.now().toString()\n  });\n};\n\nconst getImageConfig = (img) => {\n  const image = loadedImages.value[img.src];\n  if (!image) return { x: img.x, y: img.y, draggable: true };\n  \n  const maxDimension = 100;\n  let width = image.width;\n  let height = image.height;\n  \n  if (width > height) {\n    height = (height / width) * maxDimension;\n    width = maxDimension;\n  } else {\n    width = (width / height) * maxDimension;\n    height = maxDimension;\n  }\n  \n  return {\n    image: image,\n    x: img.x,\n    y: img.y,\n    width: width,\n    height: height,\n    draggable: true\n  };\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Canvas Background with Konva.Rect and CSS in React\nDESCRIPTION: React implementation showing how to add both CSS background (green) and Konva.Rect background (yellow-blue gradient) to a Konva stage. Uses refs to access the stage container for CSS styling and to reset the background position during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Background.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useEffect } from 'react';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\n\nconst App = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  const stageRef = useRef(null);\n  const backgroundRef = useRef(null);\n  \n  // Set CSS background when component mounts\n  useEffect(() => {\n    if (stageRef.current) {\n      // Apply CSS background to stage container\n      const container = stageRef.current.container();\n      container.style.backgroundColor = 'green';\n    }\n  }, []);\n  \n  // Handler to reset background position on stage drag\n  const handleDragMove = () => {\n    if (backgroundRef.current) {\n      backgroundRef.current.absolutePosition({ x: 0, y: 0 });\n    }\n  };\n  \n  return (\n    <Stage \n      width={width} \n      height={height}\n      draggable\n      ref={stageRef}\n      onDragMove={handleDragMove}\n    >\n      <Layer>\n        {/* Gradient background */}\n        <Rect\n          ref={backgroundRef}\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fillLinearGradientStartPoint={{ x: 0, y: 0 }}\n          fillLinearGradientEndPoint={{ x: width, y: height }}\n          fillLinearGradientColorStops={[\n            0, 'yellow',\n            0.5, 'blue', \n            0.6, 'rgba(0, 0, 0, 0)'\n          ]}\n          listening={false}\n        />\n        \n        {/* Demo shape */}\n        <Circle\n          x={width / 2}\n          y={height / 2}\n          radius={100}\n          fill=\"red\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Transform Optimizations in Konva.js\nDESCRIPTION: Example showing how to configure which transforms are enabled on a Konva node. This can be used to improve drawing performance by limiting transform calculations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Blend Mode with Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to create a canvas with a text element and a draggable rectangle that uses the 'xor' blend mode. The rectangle can be dragged over the text to demonstrate the XOR blending effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/08-Blend_Mode.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\n\nconst text = new Konva.Text({\n  text: 'Text Shadow!',\n  fontFamily: 'Calibri',\n  fontSize: 40,\n  x: 20,\n  y: 20,\n  fill: 'green',\n  shadowColor: 'white',\n  shadowOffset: { x: 10, y: 10 }\n});\nlayer.add(text);\n\nconst rect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  draggable: true,\n  globalCompositeOperation: 'xor'\n});\n\nlayer.add(rect);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Canvas in Vue with vue-konva\nDESCRIPTION: A Vue implementation of a responsive canvas using vue-konva. It uses Vue's reactive references and computed properties to manage the stage dimensions and scale. The implementation includes setup hooks for mounting and unmounting the resize event listener.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Responsive_Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div ref=\"containerRef\" style=\"width: 100%; height: 100%;\">\n    <v-stage\n      :config=\"{\n        width: stageWidth,\n        height: stageHeight,\n        scaleX: scale,\n        scaleY: scale\n      }\"\n    >\n      <v-layer>\n        <v-circle\n          :config=\"{\n            radius: 50,\n            fill: 'red',\n            x: sceneWidth / 2,\n            y: sceneHeight / 2\n          }\"\n        />\n        <v-rect\n          :config=\"{\n            fill: 'green',\n            x: sceneWidth - 100,\n            y: sceneHeight - 100,\n            width: 100,\n            height: 100\n          }\"\n        />\n        <v-text\n          :config=\"{\n            x: 20,\n            y: 20,\n            text: 'Try resizing your browser window',\n            fontSize: 20,\n            fontFamily: 'Arial',\n            fill: 'black'\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\n\n// Define virtual size for our scene\nconst sceneWidth = 1000;\nconst sceneHeight = 1000;\n\n// Reactive references\nconst containerRef = ref(null);\nconst scale = ref(1);\n\n// Computed properties for stage dimensions\nconst stageWidth = computed(() => sceneWidth * scale.value);\nconst stageHeight = computed(() => sceneHeight * scale.value);\n\n// Function to handle resize\nconst updateSize = () => {\n  if (!containerRef.value) return;\n  \n  // Get container width\n  const containerWidth = containerRef.value.offsetWidth;\n  \n  // Calculate scale\n  scale.value = containerWidth / sceneWidth;\n};\n\n// Add event listeners\nonMounted(() => {\n  updateSize();\n  window.addEventListener('resize', updateSize);\n});\n\n// Clean up\nonUnmounted(() => {\n  window.removeEventListener('resize', updateSize);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale Animation with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create scaling animations using Konva.js with plain JavaScript. It creates three hexagons with different scaling behaviors: one scales in both x and y dimensions, another scales only in y dimension, and the third scales only in x dimension. The animation uses sine function to create a smooth transition.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Scaling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// blue hexagon - scale x and y\nconst blueHex = new Konva.RegularPolygon({\nx: 50,\ny: 50,\nsides: 6,\nradius: 20,\nfill: '#00D2FF',\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true\n});\n\n// yellow hexagon - scale y only\nconst yellowHex = new Konva.RegularPolygon({\nx: 150,\ny: 50,\nsides: 6,\nradius: 20,\nfill: 'yellow',\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true\n});\n\n// red hexagon - scale x only\nconst redHex = new Konva.RegularPolygon({\nx: 250,\ny: 50,\nsides: 6,\nradius: 20,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\ndraggable: true\n});\n\nlayer.add(blueHex);\nlayer.add(yellowHex);\nlayer.add(redHex);\n\nconst period = 2000;\n\nconst anim = new Konva.Animation(function(frame) {\nconst scale = Math.sin(frame.time * 2 * Math.PI / period) + 2;\n\n// blue hex - scale x and y\nblueHex.scale({ x: scale, y: scale });\n\n// yellow hex - scale y only\nyellowHex.scaleY(scale);\n\n// red hex - scale x only\nredHex.scaleX(scale);\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Shows how to get and set the fill priority for a Konva shape. This determines which fill type takes precedence when multiple fill types are defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Creating a Ring Instance in Konva.js\nDESCRIPTION: Demonstrates how to create a new Ring instance using the Konva.Ring constructor with a configuration object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Ring(config)\n```\n\n----------------------------------------\n\nTITLE: Event Binding in Konva.js\nDESCRIPTION: Shows various ways to bind event listeners to Konva.js nodes, including handling multiple events, using namespaces, and accessing event properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle of a Konva Shape\nDESCRIPTION: Example of getting the self rectangle of shapes, showing how different shapes return different values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join in Konva.js\nDESCRIPTION: Shows how to get and set the line join style for shape strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Start Point in KonvaJS\nDESCRIPTION: Method for getting or setting the start point (as an object with x and y coordinates) of the fill radial gradient. Returns the current start point when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js\nDESCRIPTION: Demonstrates various ways to get and set the fill color of a Konva shape using different color formats including string names, hex codes, RGB, and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Konva.js Nodes\nDESCRIPTION: Shows how to get and set the position of a Konva node relative to its parent container. This is useful for positioning elements within their containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Nodes in KonvaJS\nDESCRIPTION: Demonstrates how to remove specific names from a Konva node while preserving other names, and how to verify the removal using hasName and retrieve the updated name value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva for Performance\nDESCRIPTION: Examples of different ways to cache Konva nodes to improve drawing performance, apply filters, or create more accurate hit regions. Caching can be done with automatic or custom bounding box configurations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Properties in KonvaJS\nDESCRIPTION: Examples showing how to get and set fill color using different color formats including plain color names, hex codes, RGB and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Shapes with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create an arrow shape using vanilla Konva.js. It initializes a stage, adds a layer, and then creates an arrow with customized properties such as pointer dimensions, fill color, and stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arrow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst arrow = new Konva.Arrow({\n  x: stage.width() / 4,\n  y: stage.height() / 4,\n  points: [0, 0, 100, 100],\n  pointerLength: 20,\n  pointerWidth: 20,\n  fill: 'black',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(arrow);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mouse Down Handler for Drag and Drop in Konva.js\nDESCRIPTION: Handles the start of drag operations using native Konva API. When a shape is clicked, it stores a reference to its original layer and moves it to a dedicated drag layer to avoid Vue's reactivity system during dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleStageMouseDown(e) {\n  // Get the target shape\n  const shape = e.target;\n  // Only process if it's not the stage itself\n  if (shape && shape !== e.target.getStage()) {\n    // Store reference to the original layer for later\n    shape._originalLayer = shape.getParent();\n    \n    // Move the shape to the drag layer manually using Konva's API\n    // This avoids Vue's reactivity system during the drag\n    if (dragLayerRef.value && dragLayerRef.value.getNode()) {\n      shape.moveTo(dragLayerRef.value.getNode());\n      // Start the drag operation\n      shape.startDrag();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Image Filters with Vue and KonvaJS\nDESCRIPTION: Vue implementation of image filters using vue-konva. Uses Vue's composition API with refs and computed properties to manage filter states. Implements blur, brightness, and contrast filters with reactive controls.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Multiple_Filters.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          v-if=\"image\"\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: activeFilters,\n            blurRadius: filters.blur.value,\n            brightness: filters.brightness.value,\n            contrast: filters.contrast.value,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <div style=\"position: absolute; top: 20px; left: 20px\">\n      <div v-for=\"(filter, name) in filters\" :key=\"name\" style=\"marginBottom: 10px\">\n        <input\n          type=\"checkbox\"\n          :id=\"name\"\n          v-model=\"filter.active\"\n        />\n        <label :for=\"name\"> {{ capitalize(name) }}: </label>\n        <input\n          type=\"range\"\n          :min=\"filterRanges[name].min\"\n          :max=\"filterRanges[name].max\"\n          :step=\"filterRanges[name].step\"\n          v-model=\"filter.value\"\n          :disabled=\"!filter.active\"\n          style=\"width: 200px\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nconst filters = ref({\n  blur: { active: false, value: 10 },\n  brightness: { active: false, value: 0.3 },\n  contrast: { active: false, value: 50 },\n});\n\nconst filterRanges = {\n  blur: { min: 0, max: 40, step: 1 },\n  brightness: { min: -1, max: 1, step: 0.1 },\n  contrast: { min: -100, max: 100, step: 1 },\n};\n\nconst activeFilters = computed(() => {\n  const active = [];\n  if (filters.value.blur.active) active.push(Konva.Filters.Blur);\n  if (filters.value.brightness.active) active.push(Konva.Filters.Brighten);\n  if (filters.value.contrast.active) active.push(Konva.Filters.Contrast);\n  return active;\n});\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to find parent groups of a Konva.js node using the findAncestors method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Window Frame Designer from CodeSandbox\nDESCRIPTION: An iframe embedding a CodeSandbox demo of the window frame designer application. The embedded sandbox contains the complete implementation of the interactive window frame designer with React and Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Window_Frame_Designer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe \n  src=\"https://codesandbox.io/embed/github/konvajs/site/tree/master/react-demos/window-frame-design-app?hidenavigation=1&view=split&fontsize=10\" \n  style={{\n    width: \"100%\",\n    height: \"500px\",\n    border: 0,\n    borderRadius: \"4px\",\n    overflow: \"hidden\"\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method. The example demonstrates checks for existing, non-existing, and empty names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Opacity with Vue in Konva.js\nDESCRIPTION: This Vue.js implementation creates a pentagon with Konva components that changes opacity on mouse interaction. It uses Vue's data properties and methods to manage the opacity state (0.5 default, 1.0 on hover) and cursor style, achieving the same functionality as the other examples.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/03-Opacity.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" :style=\"{ cursor: cursor }\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: stageSize.width / 2,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fill: 'red',\n          stroke: 'black',\n          strokeWidth: 4,\n          opacity: opacity,\n        }\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n      opacity: 0.5,\n      cursor: 'default',\n    };\n  },\n  methods: {\n    onMouseEnter() {\n      this.opacity = 1;\n      this.cursor = 'pointer';\n    },\n    onMouseLeave() {\n      this.opacity = 0.5;\n      this.cursor = 'default';\n    },\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving Node Names in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva.js node and retrieve the full name string. The name property can contain multiple space-separated values, similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Event Binding in Konva.js\nDESCRIPTION: Shows how to bind event listeners to Konva nodes using the 'on' method, including examples of handling clicks, touches, and accessing event properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Draggability for Konva.js Nodes\nDESCRIPTION: Shows how to get and set the draggable flag for a Konva.js node, controlling whether it can be dragged or not.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient End Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the fill radial gradient's end point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Attached Nodes in Konva Transformer\nDESCRIPTION: Demonstrates how to get and set nodes attached to the transformer, including how to add new nodes to existing ones.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nconst nodes = transformer.nodes();\n\n// set\ntransformer.nodes([rect, circle]);\n\n// push new item:\nconst oldNodes = transformer.nodes();\nconst newNodes = oldNodes.concat([newShape]);\n// it is important to set new array instance (and concat method above will create it)\ntransformer.nodes(newNodes);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset in Konva.js\nDESCRIPTION: Shows how to get and set the shadow offset for a Konva shape. The offset controls the position of the shadow relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method. This method returns a Promise and can accept various configuration options including callback, mimeType, and quality settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Vue-Konva Centered Scaling Implementation\nDESCRIPTION: Vue.js implementation of centered scaling using vue-konva components. Sets up a stage with two text nodes and their respective transformers, demonstrating both centered and normal scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/02_Centered_Scaling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig1\" />\n      <v-transformer :config=\"transformerConfig1\" />\n      <v-text :config=\"textConfig2\" />\n      <v-transformer :config=\"transformerConfig2\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig1 = {\n  x: 50,\n  y: 80,\n  text: 'Simple text',\n  fontSize: 30,\n  draggable: true,\n  width: 200\n};\n\nconst textConfig2 = {\n  x: 50,\n  y: 180,\n  text: 'Simple text', \n  fontSize: 30,\n  draggable: true,\n  width: 200\n};\n\nconst transformerConfig1 = {\n  centeredScaling: true\n};\n\nconst transformerConfig2 = {};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Stage Click Events in Vanilla Konva\nDESCRIPTION: This snippet demonstrates how to detect clicks on the stage versus on shapes in Konva. It creates a stage with a circle and text element, and displays different messages depending on whether the user clicked on the circle or on empty canvas space.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Stage_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: '',\n  fill: 'black',\n});\nlayer.add(text);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\nfunction writeMessage(message) {\n  text.text(message);\n}\n\n// handle stage click\nstage.on('click', function (e) {\n  if (e.target === stage) {\n    writeMessage('clicked on stage');\n    return;\n  }\n  writeMessage('clicked on ' + e.target.name());\n});\n\n// add shape\ncircle.name('circle');\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Mirroring Text Elements in Vue with Konva\nDESCRIPTION: This Vue.js component demonstrates horizontal flipping of text elements using vue-konva. It uses a reactive texts array to manage text properties and a handleFlip function that inverts the scaleX values to create the mirroring effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Mirror_Canvas_Shape.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageConfig\">\n      <v-layer>\n        <v-text\n          v-for=\"text in texts\"\n          :key=\"text.id\"\n          :config=\"text\"\n        />\n      </v-layer>\n    </v-stage>\n    <button\n      @click=\"handleFlip\"\n      style=\"position: absolute; top: 5px; left: 5px;\"\n    >\n      Flip horizontally\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst texts = ref([\n  {\n    id: 1,\n    text: 'Default text with no offset. Its origin is in top left corner.',\n    x: 180,\n    y: 50,\n    width: 200,\n    align: 'center',\n    scaleX: 1,\n    offsetX: 0\n  },\n  {\n    id: 2,\n    text: 'Text with the origin in its center',\n    x: 270,\n    y: 100,\n    width: 200,\n    align: 'center',\n    scaleX: 1,\n    offsetX: 100 // Half of the width to center it\n  }\n]);\n\nconst handleFlip = () => {\n  texts.value = texts.value.map(text => ({\n    ...text,\n    scaleX: -text.scaleX\n  }));\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Sprites with Vue and Konva.js\nDESCRIPTION: This snippet demonstrates how to implement animated sprites in a Vue application using vue-konva. It uses Vue's composition API with ref and watch to manage the sprite state and monitor image loading, along with the useImage composable to load the sprite sheet.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Sprite.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-sprite\n          :config=\"spriteConfig\"\n          ref=\"spriteRef\"\n        />\n      </v-layer>\n    </v-stage>\n    <button\n      @click=\"handlePunch\"\n      style=\"position: absolute; top: 0; left: 0\"\n    >\n      Punch\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst spriteRef = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/blob-sprite.png');\n\nconst animations = {\n  idle: [\n    2, 2, 70, 119,      // frame 1\n    71, 2, 74, 119,     // frame 2\n    146, 2, 81, 119,    // frame 3\n    226, 2, 76, 119,    // frame 4\n  ],\n  punch: [\n    2, 138, 74, 122,    // frame 1\n    76, 138, 84, 122,   // frame 2\n    346, 138, 120, 122, // frame 3\n  ],\n};\n\nconst spriteConfig = ref({\n  x: 50,\n  y: 50,\n  image: image,\n  animation: 'idle',\n  animations: animations,\n  frameRate: 7,\n  frameIndex: 0\n});\n\nwatch(image, (newImage) => {\n  if (newImage) {\n    const sprite = spriteRef.value.getNode();\n    sprite.start();\n  }\n});\n\nconst handlePunch = () => {\n  const sprite = spriteRef.value.getNode();\n  sprite.animation('punch');\n  sprite.on('frameIndexChange.button', function() {\n    if (this.frameIndex() === 2) {\n      setTimeout(() => {\n        sprite.animation('idle');\n        sprite.off('.button');\n      }, 1000 / sprite.frameRate());\n    }\n  });\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Events with React-Konva\nDESCRIPTION: React implementation of the same shape events using react-konva components. Uses React hooks (useState, useRef) to manage state and access the stage reference for pointer position calculations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Binding_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, RegularPolygon, Circle, Text } from 'react-konva';\nimport { useRef, useState } from 'react';\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const stageRef = useRef();\n\n  const writeMessage = (text) => {\n    setMessage(text);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight} ref={stageRef}>\n      <Layer>\n        <Text\n          x={10}\n          y={10}\n          fontFamily=\"Calibri\"\n          fontSize={24}\n          text={message}\n          fill=\"black\"\n        />\n        <RegularPolygon\n          x={80}\n          y={120}\n          sides={3}\n          radius={80}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseout={() => writeMessage('Mouseout triangle')}\n          onMousemove={() => {\n            const mousePos = stageRef.current.getPointerPosition();\n            writeMessage('x: ' + mousePos.x + ', y: ' + mousePos.y);\n          }}\n        />\n        <Circle\n          x={230}\n          y={100}\n          radius={60}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseover={() => writeMessage('Mouseover circle')}\n          onMouseout={() => writeMessage('Mouseout circle')}\n          onMousedown={() => writeMessage('Mousedown circle')}\n          onMouseup={() => writeMessage('Mouseup circle')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva.js\nDESCRIPTION: Examples of caching Konva nodes to improve drawing performance. Shows different ways to cache shapes with custom bounding boxes and debugging options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hit Stroke Width in Konva.js\nDESCRIPTION: Demonstrates how to get and set the hit stroke width for hit detection, which can be a specific value or 'auto' to match the regular stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Width\nDESCRIPTION: Methods to get or set the stroke width of the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Node Removal and Destruction in KonvaJS\nDESCRIPTION: Shows how to remove a node from its parent or completely destroy it, including all its children if it's a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Applying Dashed Stroke Patterns in Konva.js\nDESCRIPTION: Shows how to set dashed stroke patterns for a Konva shape. The dash array defines the length of dashes and spaces between them for stroke rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Shows how to get the absolute rotation of a Konva.js node, considering ancestor rotations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows different ways to fire events on Konva.js nodes, including standard events, custom events with data, and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternY in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the vertical position of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the position of a Konva node relative to its parent element using the position method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Canvas in Konva.js\nDESCRIPTION: Shows how to convert a node into a canvas element. This allows for direct manipulation of the rendered node as a canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Caching nodes in Konva.js\nDESCRIPTION: Demonstrates various ways to cache Konva nodes to improve drawing performance, apply filters, or create more accurate hit regions with different configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient End Point X in Konva.js\nDESCRIPTION: Examples of how to get and set the x-coordinate of the end point for a radial gradient fill. This controls the horizontal positioning of the outer circle of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixelate Filter with React and react-konva\nDESCRIPTION: This snippet shows how to implement a pixelate filter in a React application using react-konva. It uses React hooks for state management and refs to cache the image, which is required for applying Konva filters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Pixelate.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [pixelSize, setPixelSize] = useState(8);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Pixelate]}\n            pixelSize={pixelSize}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"2\"\n        max=\"32\"\n        step=\"1\"\n        value={pixelSize}\n        onChange={(e) => setPixelSize(parseInt(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Illustrates how to clone a Konva.js node, including overriding properties in the cloned node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Relatively with Konva.js\nDESCRIPTION: Shows how to move a node by a specific amount relative to its current position. This is useful for animations or incremental positioning adjustments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Template with KonvaJS Stage and Layer Components\nDESCRIPTION: Template section defining the KonvaJS stage and layer structure with interactive shape elements using v-stage and v-layer components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/01-Fill.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          fillRadialGradientColorStops: radialGradientStops,\n          stroke: 'black',\n          strokeWidth: 4,\n          draggable: true,\n        }\"\n        @mouseenter=\"onRadialGradientEnter\"\n        @mouseleave=\"onRadialGradientLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Konva Dependencies\nDESCRIPTION: NPM command to install vue-konva and its dependencies\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-konva konva --save\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Demonstrates different ways to trigger events on Konva nodes, including built-in events, custom events, and events with custom data that can bubble up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the size of a node using a single object with width and height properties. This affects the dimensions of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Shape Properties in JavaScript with Konva\nDESCRIPTION: Demonstrates how to enable or disable various properties of a Konva shape, including fill, stroke, shadow, and dash. It also shows how to set fill priority and stroke scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation property of a Konva shape. This controls how the shape blends with elements beneath it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Boundaries in KonvaJS\nDESCRIPTION: Demonstrates how to create a custom function that controls the boundaries of drag operations. The example shows how to restrict dragging to vertical movement only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hit Detection Function in Konva.js\nDESCRIPTION: Demonstrates how to get and set a custom hit detection function for a Konva shape. This function is used to determine if a point is inside the shape during mouse/touch interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Linear Gradient End Point in JavaScript\nDESCRIPTION: Demonstrates how to get and set the fill linear gradient end point for a Konva shape. The end point is specified as an object with x and y coordinates. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Mobile Scrolling with Konva in Vue\nDESCRIPTION: This Vue component sets up a Konva stage with two rectangles: a green one that prevents default scrolling and a red one that allows it. It uses the 'preventDefault' config option to control this behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Scrolling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect :config=\"greenRectConfig\" />\n      <v-rect :config=\"redRectConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst greenRectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 600,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst redRectConfig = {\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 600,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  preventDefault: false\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection with Vanilla Konva.js\nDESCRIPTION: This snippet demonstrates how to create draggable shapes with visible bounding boxes and detect collisions between them using the vanilla Konva.js API. It creates random shapes with red bounding box outlines and changes their fill color to red when they intersect with other shapes during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Collision_Detection.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nvar layer = new Konva.Layer();\nstage.add(layer);\n\nfunction createShape() {\n  var group = new Konva.Group({\n    x: Math.random() * width,\n    y: Math.random() * height,\n    draggable: true,\n  });\n  var shape = new Konva.Rect({\n    width: 30 + Math.random() * 30,\n    height: 30 + Math.random() * 30,\n    fill: 'grey',\n    rotation: 360 * Math.random(),\n    name: 'fillShape',\n  });\n  group.add(shape);\n\n  var boundingBox = shape.getClientRect({ relativeTo: group });\n\n  var box = new Konva.Rect({\n    x: boundingBox.x,\n    y: boundingBox.y,\n    width: boundingBox.width,\n    height: boundingBox.height,\n    stroke: 'red',\n    strokeWidth: 1,\n  });\n  group.add(box);\n  return group;\n}\n\nfor (var i = 0; i < 10; i++) {\n  layer.add(createShape());\n}\n\nlayer.on('dragmove', function (e) {\n  var target = e.target;\n  var targetRect = e.target.getClientRect();\n  layer.children.forEach(function (group) {\n    // do not check intersection with itself\n    if (group === target) {\n      return;\n    }\n    if (haveIntersection(group.getClientRect(), targetRect)) {\n      group.findOne('.fillShape').fill('red');\n    } else {\n      group.findOne('.fillShape').fill('grey');\n    }\n  });\n});\n\nfunction haveIntersection(r1, r2) {\n  return !(\n    r2.x > r1.x + r1.width ||\n    r2.x + r2.width < r1.x ||\n    r2.y > r1.y + r1.height ||\n    r2.y + r2.height < r1.y\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Konva Stage in Vue\nDESCRIPTION: This example demonstrates how to create a Konva stage with a circle in Vue and serialize it using the toJSON() method. It uses a ref to access the stage instance and provides a button that, when clicked, serializes the stage by calling getNode().toJSON() and logs the result to the console.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Serialize_a_Stage.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handleSerialize\" style=\"margin-bottom: 10px\">\n      Serialize Stage\n    </button>\n    <v-stage ref=\"stageRef\" :config=\"stageSize\">\n      <v-layer>\n        <v-circle :config=\"circleConfig\" />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: 400,\n  height: 400\n};\n\nconst circleConfig = {\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 3\n};\n\nconst stageRef = ref(null);\n\nconst handleSerialize = () => {\n  const json = stageRef.value.getNode().toJSON();\n  console.log(json);\n  alert('Stage serialized! Check the console for the JSON string.');\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font with CSS Font Loading API in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to load and apply a custom font to a Konva.Text node using the CSS Font Loading API. It creates a stage with a text node, loads the 'Kavivanar' font from Google Fonts, and uses document.fonts.ready to detect when the font is available before applying it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Custom_Font.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Build our stage\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Add a text node with default font\nconst text = new Konva.Text({\n  x: 50,\n  y: 50,\n  fontSize: 40,\n  text: 'A text with custom font.',\n  width: 250,\n  // Start with default font\n  fontFamily: 'Arial'\n});\n\n// Add another text to help debug font loading\nconst debugText = new Konva.Text({\n  x: 50,\n  y: 0,\n  fontSize: 16,\n  text: 'Loading font...',\n  fill: 'green'\n});\n\nlayer.add(text);\nlayer.add(debugText);\n\n// First, load the font using a stylesheet link (more reliable)\nconst fontLink = document.createElement('link');\nfontLink.href = 'https://fonts.googleapis.com/css2?family=Kavivanar&display=swap';\nfontLink.rel = 'stylesheet';\ndocument.head.appendChild(fontLink);\n\n// Use the browser's font loading mechanism to detect when it's ready\ndocument.fonts.ready.then(() => {\n  // Check if our font is loaded\n  if (document.fonts.check('1em Kavivanar')) {\n    text.fontFamily('Kavivanar');\n    debugText.text('Font loaded successfully!');\n  } else {\n    // Fallback - try with a small delay (common issue with some browsers)\n    setTimeout(() => {\n      debugText.text('Using fallback timer - attempting to set font now');\n      text.fontFamily('Kavivanar');\n    }, 500);\n  }\n}).catch(err => {\n  debugText.text('Error loading font: ' + err.message);\n  debugText.fill('red');\n  console.error('Font loading failed:', err);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Boundaries in Konva.js\nDESCRIPTION: Shows how to create a custom drag bound function for a Konva node. This function overrides the default drag position and can be used to restrict movement, such as creating vertical-only dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Border Style\nDESCRIPTION: Demonstrates how to set border dash pattern for the transformer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar borderDash = transformer.borderDash();\n\n// set\ntransformer.borderDash([2, 2]);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva.js node to an image asynchronously, using a callback function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Nodes in KonvaJS\nDESCRIPTION: Demonstrates how to completely remove and destroy a KonvaJS node. If the node is a container (Group, Stage, or Layer), it will also destroy all its children.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Getting Visible Intersection Shape with getIntersection Method\nDESCRIPTION: This method determines if a point intersects with a shape on the stage. It only detects nodes with listening set to true and returns the intersecting node, if any.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = stage.getIntersection({x: 50, y: 50});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Rotation in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's rotation in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Checking if Konva Node is Visible on Screen\nDESCRIPTION: Shows how to check if a Konva node is currently visible in the user's viewport, with optional margin parameters to extend the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOpacity in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set shadow opacity, which must be a value between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Variant in Konva\nDESCRIPTION: Example of getting and setting the font variant for a Konva Text object. Can be 'normal' or 'small-caps'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get font variant\nvar fontVariant = text.fontVariant();\n\n// set font variant\ntext.fontVariant('small-caps');\n```\n\n----------------------------------------\n\nTITLE: Node Visibility and Position in Konva.js\nDESCRIPTION: Demonstrates methods for showing and hiding nodes, as well as getting relative pointer position and absolute position of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hit Areas with hitFunc in Konva\nDESCRIPTION: Gets or sets the hit drawing function, which is used to create custom hit detection areas for the shape. This allows for more precise interaction handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Event Binding in KonvaJS\nDESCRIPTION: Shows various ways to bind event listeners to KonvaJS nodes, including multiple events, namespaced events, and event delegation examples.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Event Propagation in React with Konva\nDESCRIPTION: Shows how to implement event bubble cancellation using React-Konva components. Creates a Stage and Layer with a Circle component, using event handlers to control click propagation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Cancel_Propagation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst App = () => {\n  const handleCircleClick = (e) => {\n    alert('You clicked on the circle');\n    // stop event bubble\n    e.cancelBubble = true;\n  };\n\n  const handleLayerClick = () => {\n    alert('You clicked on the layer');\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer onClick={handleLayerClick}>\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onClick={handleCircleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Window Frame Component with KonvaJS\nDESCRIPTION: React component that renders a window frame using KonvaJS shapes. Creates a frame with glass panel and sides using points calculated based on dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst WindowFrame = ({ width, height }) => {\n  const framePoints = useMemo(() => ({\n    top: [0, 0, width, 0, width - PADDING, PADDING, PADDING, PADDING],\n    left: [0, 0, PADDING, PADDING, PADDING, height - PADDING, 0, height],\n    bottom: [0, height, PADDING, height - PADDING, width - PADDING, height - PADDING, width, height],\n    right: [width, 0, width, height, width - PADDING, height - PADDING, width - PADDING, PADDING]\n  }), [width, height]);\n  \n  return (\n    <Group>\n      <Rect\n        x={PADDING}\n        y={PADDING}\n        width={width - PADDING * 2}\n        height={height - PADDING * 2}\n        fill=\"lightblue\"\n      />\n      \n      {Object.entries(framePoints).map(([key, points]) => (\n        <Line\n          key={key}\n          points={points}\n          fill=\"white\"\n          closed={true}\n          stroke=\"black\"\n          strokeWidth={1}\n        />\n      ))}\n    </Group>\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Opacity with React in Konva.js\nDESCRIPTION: This React implementation uses react-konva to create a pentagon with dynamic opacity. It utilizes React state hooks to manage the opacity value (0.5 default, 1.0 on hover) and cursor style, providing the same functionality as the vanilla JavaScript example.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/03-Opacity.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\n\nconst App = () => {\n  const [opacity, setOpacity] = useState(0.5);\n  const [cursor, setCursor] = useState('default');\n\n  const handleMouseEnter = () => {\n    setOpacity(1);\n    setCursor('pointer');\n  };\n\n  const handleMouseLeave = () => {\n    setOpacity(0.5);\n    setCursor('default');\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight} style={{ cursor: cursor }}>\n      <Layer>\n        <RegularPolygon\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          sides={5}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          opacity={opacity}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Color in Konva.js\nDESCRIPTION: Shows different ways to get and set the stroke color of a shape using various color formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Stopping Shape Transformation with Vue Konva\nDESCRIPTION: This example demonstrates implementing transform stopping in a Vue 3 application using vue-konva. It sets up a rectangle with a transformer and uses refs to access the components, then implements a transform handler to check dimensions and stop transformation when needed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/09_Stop_Transform.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        @transform=\"handleTransform\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nconst handleTransform = () => {\n  const node = rectRef.value.getNode();\n  const width = node.width() * node.scaleX();\n  if (width > 200) {\n    transformerRef.value.getNode().stopTransform();\n  }\n};\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Relatively in Konva.js\nDESCRIPTION: Demonstrates how to move a node by a specific amount relative to its current position. This method accepts an object with x and y properties that specify the movement amount.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Portal for Dynamic zIndex in React-Konva\nDESCRIPTION: This example demonstrates using the Portal component from react-konva-utils to temporarily move a draggable rectangle to a top layer during drag operations. The component maintains its original position in the render tree while visually appearing above other elements when dragged.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Canvas_Portal.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Rect, Text, Circle, Line } from 'react-konva';\nimport { Portal } from 'react-konva-utils';\n\nconst App = () => {\n  const [isDragging, setDragging] = React.useState(false);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          text=\"Try to drag the rectangle. It should be on top while drag.\"\n          fontSize={15}\n        />\n        <Portal selector=\".top-layer\" enabled={isDragging}>\n          <Rect\n            x={20}\n            y={50}\n            width={150}\n            height={150}\n            fill=\"red\"\n            draggable={true}\n            onDragStart={() => {\n              setDragging(true);\n            }}\n            onDragEnd={() => {\n              setDragging(false);\n            }}\n          />\n        </Portal>\n        <Circle x={200} y={100} radius={50} fill=\"green\" />\n        <Line\n          x={20}\n          y={200}\n          points={[0, 0, 100, 0, 100, 100]}\n          tension={0.5}\n          closed\n          stroke=\"black\"\n          fillLinearGradientStartPoint={{ x: -50, y: -50 }}\n          fillLinearGradientEndPoint={{ x: 50, y: 50 }}\n          fillLinearGradientColorStops={[0, 'red', 1, 'yellow']}\n          draggable\n        />\n      </Layer>\n      <Layer name=\"top-layer\" />\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drawing Functions in Konva.js\nDESCRIPTION: Shows how to set a custom scene drawing function for a shape, which is used to render the shape on the canvas and also for hit detection if no hitFunc is defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva.js\nDESCRIPTION: Demonstrates how to cache a shape and draw its hit graph from the cached canvas for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Font Style in Konva\nDESCRIPTION: Example of getting and setting the font style for a Konva Text object. Styles can be 'normal', 'italic', 'bold', or combinations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get font style\nvar fontStyle = text.fontStyle();\n\n// set font style\ntext.fontStyle('bold');\n```\n\n----------------------------------------\n\nTITLE: Checking if a Node is Visible on Screen in Konva.js\nDESCRIPTION: Demonstrates how to check if a node is currently visible in the user's viewport, with optional margin parameters to expand the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y offset of a fill pattern for a Konva shape. This controls the vertical position of the pattern image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation in Konva.js\nDESCRIPTION: Shows how to get and set the rotation of a Konva node in degrees. Rotation occurs around the node's offset point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Filters in Konva.js\nDESCRIPTION: Demonstrates how to get and set filters for a Konva.js node. The filters method can be used without parameters to retrieve the current filters, or with an array of filters to set new ones. Caching is required for filters to work.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: This code demonstrates how to get the absolute scale of a node, which takes into account all ancestor transformations. It returns an object with x and y scale properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Event Binding in KonvaJS\nDESCRIPTION: Examples of binding various event listeners to nodes including click, touch, and drag events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color in Konva Shape (JavaScript)\nDESCRIPTION: Shows various ways to get and set the stroke color of a Konva Shape, including using color strings, hex values, RGB, and RGBA formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Adding Canvas Background with Konva.Rect and CSS in Vanilla JavaScript\nDESCRIPTION: This code demonstrates two ways of adding a background to a Konva stage: a CSS green background and a Konva.Rect with a yellow-blue gradient. It also shows how to maintain the background's position when the stage is dragged.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Background.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n  draggable: true,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// there are two ways to add background to the stage.\n// the simplest solution is to just using CSS\nstage.container().style.backgroundColor = 'green';\n\n// another solution is to use rectangle shape\nconst background = new Konva.Rect({\n  x: 0,\n  y: 0,\n  width: stage.width(),\n  height: stage.height(),\n  fillLinearGradientStartPoint: { x: 0, y: 0 },\n  fillLinearGradientEndPoint: { x: stage.width(), y: stage.height() },\n  // gradient into transparent color, so we can see CSS styles\n  fillLinearGradientColorStops: [\n    0,\n    'yellow',\n    0.5,\n    'blue',\n    0.6,\n    'rgba(0, 0, 0, 0)',\n  ],\n  // remove background from hit graph for better perf\n  // because we don't need any events on the background\n  listening: false,\n});\nlayer.add(background);\n\n// the stage is draggable\n// that means absolute position of background may change\n// so we need to reset it back to {0, 0}\nstage.on('dragmove', () => {\n  background.absolutePosition({ x: 0, y: 0 });\n});\n\n// add demo shape\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 100,\n  fill: 'red',\n});\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Custom Font Implementation with React and Konva\nDESCRIPTION: This React component demonstrates how to load and apply a custom font to a Konva Text node in a React application. It uses useState to track font loading status and useEffect to handle the font loading process with the CSS Font Loading API.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Custom_Font.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text } from 'react-konva';\nimport { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [fontLoaded, setFontLoaded] = useState(false);\n  const [fontStatus, setFontStatus] = useState('Loading font...');\n  \n  useEffect(() => {\n    // Load font using a regular stylesheet link (more reliable)\n    const fontLink = document.createElement('link');\n    fontLink.href = 'https://fonts.googleapis.com/css2?family=Kavivanar&display=swap';\n    fontLink.rel = 'stylesheet';\n    document.head.appendChild(fontLink);\n    \n    // Use the document.fonts.ready promise to detect when fonts are loaded\n    document.fonts.ready.then(() => {\n      // Check if our font is loaded\n      if (document.fonts.check('1em Kavivanar')) {\n        setFontStatus('Font loaded successfully!');\n        setFontLoaded(true);\n      } else {\n        // Fallback - try with a small delay\n        setTimeout(() => {\n          setFontStatus('Using fallback timer - attempting to set font now');\n          setFontLoaded(true);\n        }, 500);\n      }\n    }).catch(err => {\n      setFontStatus('Error loading font: ' + err.message);\n      console.error('Font loading failed:', err);\n    });\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={50}\n          fontSize={40}\n          text=\"A text with custom font.\"\n          width={250}\n          fontFamily={fontLoaded ? 'Kavivanar' : 'Arial'}\n        />\n        <Text\n          x={50}\n          y={0}\n          fontSize={16}\n          text={fontStatus}\n          fill={fontStatus.includes('Error') ? 'red' : 'green'}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Toggling Shape Visibility with Konva.js in Vue.js\nDESCRIPTION: This snippet demonstrates how to use Konva.js with Vue.js to create a stage, layer, and rectangle shape. It uses Vue's reactivity system to control the visibility of the shape and includes show/hide buttons.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/06-Hide_and_Show.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div style=\"position: relative;\">\n    <div style=\"position: absolute; z-index: 1; padding: 10px;\">\n      <button @click=\"showShape\">Show</button>\n      <button @click=\"hideShape\">Hide</button>\n    </div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-rect :config=\"rectConfig\"/>\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst visible = ref(true);\n\nconst rectConfig = {\n  x: window.innerWidth / 2 - 50,\n  y: window.innerHeight / 2 - 25,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n  visible: visible.value\n};\n\nconst showShape = () => {\n  visible.value = true;\n  rectConfig.visible = true;\n};\n\nconst hideShape = () => {\n  visible.value = false;\n  rectConfig.visible = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Skew Transformation in Konva.js\nDESCRIPTION: Example of getting and setting a node's skew transformation on both x and y axes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Transform Optimizations in KonvaJS\nDESCRIPTION: Demonstrates how to get and set which transforms are enabled for performance optimization. Options include 'all', 'none', or 'position'. Limiting transforms can improve drawing performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Linear Gradient Start Point X in JavaScript\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient start point x coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Attaching Shape to Transformer\nDESCRIPTION: Demonstrates how to attach a shape to the transformer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntransformer.attachTo(shape);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hit Detection with hitFunc in Konva.js\nDESCRIPTION: Demonstrates how to set a custom hit detection function for a shape using hitFunc. This allows creating custom hit areas that may differ from the visible shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Demonstrates how to retrieve the absolute scale of a node, accounting for all ancestor scaling. This is useful for calculations that need the actual rendered scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Skew X in Konva.js\nDESCRIPTION: Demonstrates how to get and set the skew x property of a Konva.js node. The skewX method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Properties with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the skew transformation of a Konva node using an object with x and y properties. This allows for skewing the node in both horizontal and vertical directions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Node Removal and Destruction in Konva.js\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, and how to completely destroy a node and its children.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes from Konva.js Scene\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, allowing for later reuse of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Using skewX with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the horizontal skew of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content for Konva.js Text in JavaScript\nDESCRIPTION: Shows how to get and set the text content of a Konva.js Text shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get text\nvar text = text.text();\n\n// set text\ntext.text('Hello world!');\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings from Konva.js Nodes\nDESCRIPTION: Demonstrates how to remove event listeners from Konva.js nodes. Shows examples for removing single events, multiple events, or events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Shadows with React-Konva\nDESCRIPTION: React implementation of canvas shadows using react-konva components. Creates the same three shapes (text, line, rectangle) with shadow effects using declarative React syntax.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/04-Shadow.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Text, Line, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          text=\"Text Shadow!\"\n          fontFamily=\"Calibri\"\n          fontSize={40}\n          x={20}\n          y={20}\n          stroke=\"red\"\n          strokeWidth={2}\n          shadowColor=\"black\"\n          shadowBlur={0}\n          shadowOffset={{ x: 10, y: 10 }}\n          shadowOpacity={0.5}\n        />\n        <Line\n          stroke=\"green\"\n          strokeWidth={10}\n          lineJoin=\"round\"\n          lineCap=\"round\"\n          points={[50, 140, 250, 160]}\n          shadowColor=\"black\"\n          shadowBlur={10}\n          shadowOffset={{ x: 10, y: 10 }}\n          shadowOpacity={0.5}\n        />\n        <Rect\n          x={100}\n          y={120}\n          width={100}\n          height={50}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          shadowColor=\"black\"\n          shadowBlur={10}\n          shadowOffset={{ x: 10, y: 10 }}\n          shadowOpacity={0.5}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow color for a shape. The color can be specified as a string name, hex value, RGB, or RGBA value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute rotation of a node, taking into account all ancestor rotations. This helps determine the actual rendered rotation angle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Preventing Event Bubbling in Svelte-Konva\nDESCRIPTION: This snippet demonstrates two approaches to prevent event bubbling in Svelte-Konva: using the preventDefault() method on the Svelte event or setting the cancelBubble property on the Konva event object to true.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Events.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  function handleClick(e) {\n    const konvaEvent = e.detail;\n    \n    // Cancel bubbling\n    e.preventDefault();\n\n    // or alternatively\n    konvaEvent.cancelBubble = true;\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in KonvaJS\nDESCRIPTION: Example showing how to convert a node to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Konva Group\nDESCRIPTION: Basic syntax for creating a new Group instance in Konva.js. Groups are containers used to organize shapes or other groups.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Group(config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Distance in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the drag distance, which defines how many pixels the pointer must move before a drag operation is triggered. Can be set per node or globally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Adding Transform Event Listener\nDESCRIPTION: Shows how to bind event handlers to transformer events like transform, transformstart, transformend, etc.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntr.on('transformstart', function() {\n  console.log('transform started');\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Linear Gradient End Point X in JavaScript with Konva\nDESCRIPTION: Illustrates how to retrieve and modify the fill linear gradient end point x coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Repeat in Konva.js\nDESCRIPTION: Demonstrates how to get and set pattern repeat behavior for fill patterns in a Konva shape. Options include 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Managing Node Filters in KonvaJS\nDESCRIPTION: Demonstrates getting and setting visual filters that are applied to cached canvases.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Shape Groups with Vanilla Konva.js\nDESCRIPTION: Demonstrates creating a draggable group containing a circle and rectangle using vanilla Konva.js. The group is positioned at (50,50) and contains shapes that can be moved together when dragged.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Groups.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\n\nconst group = new Konva.Group({\nx: 50,\ny: 50,\ndraggable: true,\n});\n\nconst circle = new Konva.Circle({\nx: 40,\ny: 40,\nradius: 30,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\nconst rect = new Konva.Rect({\nx: 80,\ny: 20,\nwidth: 100,\nheight: 50,\nfill: 'green',\nstroke: 'black',\nstrokeWidth: 4,\n});\n\ngroup.add(circle);\ngroup.add(rect);\nlayer.add(group);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffset in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the shadow offset using an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Stage as High Quality Image in React\nDESCRIPTION: This React component creates a Konva stage with a circle and text, and provides a button to export the stage as a high-quality image. It uses the useRef hook to access the stage and the toDataURL() method with increased pixelRatio.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/High-Quality-Export.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const stageRef = useRef(null);\n\n  const handleExport = () => {\n    const dataURL = stageRef.current.toDataURL({\n      pixelRatio: 2 // double resolution\n    });\n    \n    const link = document.createElement('a');\n    link.download = 'stage.png';\n    link.href = dataURL;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div>\n      <button onClick={handleExport} style={{ marginBottom: '10px' }}>\n        Save as High Quality Image\n      </button>\n      <Stage width={400} height={400} ref={stageRef}>\n        <Layer>\n          <Circle\n            x={200}\n            y={200}\n            radius={70}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n          <Text\n            x={150}\n            y={190}\n            text=\"High Quality Export\"\n            fontSize={20}\n            fill=\"white\"\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation State and Constants in JavaScript\nDESCRIPTION: Sets up reactive references for animation state and defines constants for gravity and bunny counts. It also initializes a map to store references to Konva nodes for efficient updates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isAdding = ref(false);\nconst animationFrameId = ref(null);\nconst bunnyNodesMap = ref({}); // Store references to Konva nodes by index\n\n// Constants\nconst GRAVITY = 0.75;\nconst START_COUNT = 100;\nconst ADD_AMOUNT = 10;\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listening with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets whether a node listens for events. Nodes with listening set to false will not be detected in hit graph and will be ignored in container.getIntersection() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Scale of Konva Nodes\nDESCRIPTION: Shows how to get and set the scale of a Konva node using the scale method. This allows independent scaling in both x and y dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Repeat in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern repeat property for a shape in Konva.js. Options include 'repeat', 'repeat-x', 'repeat-y', and 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Function\nDESCRIPTION: Methods to set and get a custom clipping function for a container. Supports both standard context clipping and Path2D with clip-rule.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing node cache in Konva.js\nDESCRIPTION: Shows how to clear the cached canvas for a Konva Node to refresh its appearance after changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Strokes in Konva.js\nDESCRIPTION: Shows how to get or set dash patterns for strokes, allowing for the creation of dashed lines with customizable dash and gap lengths.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Fills in Konva.js\nDESCRIPTION: Demonstrates how to create and configure linear gradient fills for Konva shapes by setting color stops at different positions along the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Linear Gradient End Point in JavaScript with Konva\nDESCRIPTION: Demonstrates how to retrieve and update the fill linear gradient end point using Konva Shape methods. The end point is specified as an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Scaling in Konva.js\nDESCRIPTION: Shows how to enable or disable stroke scaling in a Konva shape. When disabled, stroke width will remain constant regardless of the shape's scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Storing Konva Node References in JavaScript\nDESCRIPTION: Defines a function to store references to Konva image nodes in a map, indexed by their position in the bunnies array. This allows for direct manipulation of nodes for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst storeNodeRef = (index, el) => {\n  if (el) {\n    bunnyNodesMap.value[index] = el;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Moving Konva.js Node to Another Container\nDESCRIPTION: Demonstrates how to move a node from its current parent container to a new one. This is useful for reorganizing the node hierarchy in your application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Offset in KonvaJS\nDESCRIPTION: Examples of getting and setting X and Y offset values for a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Padding in Konva\nDESCRIPTION: Example of getting and setting the padding for a Konva Text object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get padding\nvar padding = text.padding();\n\n// set padding to 10 pixels\ntext.padding(10);\n```\n\n----------------------------------------\n\nTITLE: Setting zIndex for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the zIndex of a Konva node relative to its siblings. The zIndex determines the rendering order of nodes within the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Demonstrates different ways to trigger events on Konva nodes, including built-in events, custom events with custom data, and events that bubble up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Rectangle in Konva.js React Component\nDESCRIPTION: This snippet calculates and sets properties for a selection rectangle in a Konva.js stage. It determines the position and size of the rectangle based on user interaction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Resizing_Stress_Test.mdx#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectionRectProps = {\n  fill: 'rgba(0,0,255,0.5)',\n  visible: selectionRect.visible,\n  x: Math.min(selectionRect.x1, selectionRect.x2),\n  y: Math.min(selectionRect.y1, selectionRect.y2),\n  width: Math.abs(selectionRect.x2 - selectionRect.x1),\n  height: Math.abs(selectionRect.y2 - selectionRect.y1),\n  ref: selectionRectRef\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Mouse Cursor in Vue with vue-konva\nDESCRIPTION: This Vue implementation uses a data-driven approach to create pentagon shapes with predefined cursor styles. It uses a common event handler function to change the cursor style when hovering over the shapes, accessing the Stage container through the event target.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/07-Mouse_Cursor.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        v-for=\"(pentagon, i) in pentagons\"\n        :key=\"i\"\n        :config=\"pentagon\"\n        @mouseover=\"handleMouseOver($event, pentagon.cursor)\"\n        @mouseout=\"handleMouseOut\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst pentagons = [\n  {\n    x: 80,\n    y: window.innerHeight / 2,\n    sides: 5,\n    radius: 30,\n    fill: 'red',\n    stroke: 'black',\n    strokeWidth: 4,\n    cursor: 'pointer'\n  },\n  {\n    x: 180,\n    y: window.innerHeight / 2,\n    sides: 5,\n    radius: 30,\n    fill: 'green',\n    stroke: 'black',\n    strokeWidth: 4,\n    cursor: 'crosshair'\n  },\n  {\n    x: 280,\n    y: window.innerHeight / 2,\n    sides: 5,\n    radius: 30,\n    fill: 'blue',\n    stroke: 'black',\n    strokeWidth: 4,\n    cursor: 'move'\n  }\n];\n\nconst handleMouseOver = (e, cursor) => {\n  e.target.getStage().container().style.cursor = cursor;\n};\n\nconst handleMouseOut = (e) => {\n  e.target.getStage().container().style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Toggling Fill Enabled State in Konva.js\nDESCRIPTION: Shows how to get and set the fill enabled flag for a shape in Konva.js. This allows enabling or disabling the fill of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tooltips with React-Konva\nDESCRIPTION: React implementation of shape tooltips using React-Konva components. Uses React hooks for state management and demonstrates component-based architecture for canvas shapes and tooltips.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tooltips.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Shape, Circle, Text } from 'react-konva';\n\nconst CustomShape = ({ onMouseMove, onMouseOut }) => {\n  return (\n    <Shape\n      stroke=\"black\"\n      fill=\"#00D2FF\"\n      strokeWidth={1}\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(120, 50);\n        context.lineTo(250, 80);\n        context.lineTo(150, 170);\n        context.closePath();\n        context.fillStrokeShape(shape);\n      }}\n      onMouseMove={onMouseMove}\n      onMouseOut={onMouseOut}\n    />\n  );\n};\n\nconst App = () => {\n  const [tooltipPos, setTooltipPos] = React.useState({ x: 0, y: 0 });\n  const [tooltipText, setTooltipText] = React.useState('');\n  const [isTooltipVisible, setTooltipVisible] = React.useState(false);\n\n  const handleMouseMove = (e, text) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    setTooltipPos({\n      x: pos.x + 5,\n      y: pos.y + 5,\n    });\n    setTooltipText(text);\n    setTooltipVisible(true);\n  };\n\n  const handleMouseOut = () => {\n    setTooltipVisible(false);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <CustomShape\n          onMouseMove={(e) => handleMouseMove(e, 'Cyan Triangle')}\n          onMouseOut={handleMouseOut}\n        />\n        <Circle\n          x={250}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          onMouseMove={(e) => handleMouseMove(e, 'Red Circle')}\n          onMouseOut={handleMouseOut}\n        />\n      </Layer>\n      <Layer>\n        <Text\n          x={tooltipPos.x}\n          y={tooltipPos.y}\n          text={tooltipText}\n          fontFamily=\"Calibri\"\n          fontSize={12}\n          padding={5}\n          textFill=\"white\"\n          fill=\"black\"\n          alpha={0.75}\n          visible={isTooltipVisible}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node, which takes into account all ancestor rotations. This provides the true rotation value applied to a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Svelte-Konva Save/Load Pattern\nDESCRIPTION: Instead of using Konva's native toJSON() and create() methods, when working with svelte-konva, the recommendation is to save the application state that represents the stage data. This allows for better integration with Svelte's reactivity system and provides more reliable state management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Save_Load.md#2025-04-11_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting Bounding Box Function in Konva Transformer\nDESCRIPTION: Shows how to set a custom bounding box function that operates in absolute coordinates to control transformer limits.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar boundBoxFunc = transformer.boundBoxFunc();\n\n// set\ntransformer.boundBoxFunc(function(oldBox, newBox) {\n  // width and height of the boxes are corresponding to total absolute width and height of all nodes combined\n  // so it includes scale of the node.\n  if (newBox.width > 200) {\n    return oldBox;\n  }\n  return newBox;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute position of a node, with an option to calculate it relative to a specific ancestor in the scene graph.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to get the absolute scale of a node considering ancestor scales.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Using Fill Pattern Image in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set a fill pattern image for Konva shapes. The pattern uses an Image object to fill the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Boundaries in Konva.js\nDESCRIPTION: Example demonstrates how to create a custom drag bound function that controls the position of a node during drag operations, such as restricting movement to vertical only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Pointer Positions with setPointersPositions\nDESCRIPTION: This method allows manual registration of mouse/touch positions in the stage, useful when events are triggered outside the stage but you still want to use Konva methods for position tracking.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('mousemove', (e) => {\n  stage.setPointersPositions(e);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Start Radius in KonvaJS\nDESCRIPTION: Method to get or set the start radius of a radial gradient fill. This defines the inner radius of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in KonvaJS\nDESCRIPTION: Example of setting multiple attributes at once using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Contrast Filter to Images with Vanilla JavaScript and Konva.js\nDESCRIPTION: This code demonstrates how to load an image, apply a contrast filter to it using Konva.js, and create a slider to adjust the contrast value dynamically. The image is first loaded, then cached before applying the Konva.Filters.Contrast filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Contrast.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Contrast]);\n  image.contrast(30);\n\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.min = '-100';\n  slider.max = '100';\n  slider.value = image.contrast();\n\n  slider.style.position = 'absolute';\n  slider.style.top = '20px';\n  slider.style.left = '20px';\n\n  slider.addEventListener('input', (e) => {\n    const value = parseInt(e.target.value);\n    image.contrast(value);\n  });\n\n  document.body.appendChild(slider);\n};\n\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Easing Animation with Vue and vue-konva\nDESCRIPTION: This snippet demonstrates how to create a basic linear animation using vue-konva in a Vue.js application. It sets up a circle component and animates its horizontal position on click using Konva.Tween.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Linear_Easing.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle\n        :config=\"circleConfig\"\n        @click=\"handleClick\"\n        @tap=\"handleClick\"\n        ref=\"circleRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: 100,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst circleRef = ref(null);\n\nconst handleClick = () => {\n  const tween = new Konva.Tween({\n    node: circleRef.value.getNode(),\n    duration: 1,\n    x: window.innerWidth - 100,\n    easing: Konva.Easings.Linear,\n  });\n  tween.play();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor MCP for Konva Documentation Integration\nDESCRIPTION: JSON configuration snippet for connecting Cursor to Konva documentation via Model Context Protocol (MCP). This enables Cursor's Agent mode to access Konva documentation when answering queries, powered by crawlchat.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/ai_tools.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"konva-documentation\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"crawl-chat-mcp\",\n    \"--id=67d221efb4b9de65095a2579\",\n    \"--name=konva_documentation\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emboss Blend in Konva.js\nDESCRIPTION: Method to get or set the emboss blend for the Konva.Filters.Emboss filter. It takes a boolean parameter to enable or disable the blend.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nembossBlend(embossBlend)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Konva.js\nDESCRIPTION: Shows how to set multiple attributes at once on a Konva node using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set just the vertical (y) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Width in Konva.js\nDESCRIPTION: Gets or sets the stroke width of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Managing Skew in Konva.js\nDESCRIPTION: Shows how to get and set the skew of a Konva node in both x and y dimensions. Skew transforms distort the node by slanting it along its axes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Dash Stroke in Konva.js\nDESCRIPTION: Demonstrates how to get and set the dash enabled flag for a shape's stroke in Konva.js. This allows switching between solid and dashed stroke styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of the first pointer (mouse or touch) relative to the local coordinates of a Konva.js node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Position Management in KonvaJS\nDESCRIPTION: Demonstrates absolute and relative position management for nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X Position in Konva.js\nDESCRIPTION: Shows how to get and set the x-coordinate of a Konva node's position. This provides a convenient way to modify just the horizontal position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill priority for a shape in Konva.js. Options include 'color', 'pattern', 'linear-gradient', and 'radial-gradient'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in KonvaJS\nDESCRIPTION: Demonstrates how to add names to a Konva node, allowing for multiple name classifications similar to CSS classes, and how to retrieve the current name value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get and set the shadow blur for a shape. The shadow blur affects the softness of the shadow edge.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Skew Properties in KonvaJS\nDESCRIPTION: Shows how to get and set the skew transformation of a node in both x and y dimensions simultaneously using the skew method. Skewing distorts the node by slanting it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fill and Stroke Order in Vue Konva\nDESCRIPTION: Vue implementation showing two Text components with different fill and stroke rendering orders. Uses Vue-Konva components with a setup script to configure the properties of each text element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/09-Fill_Stroke_Order.mdx#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig1\" />\n      <v-text :config=\"textConfig2\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig1 = {\n  text: 'Default shape rendering.\\nfillAfterStrokeEnabled = false',\n  x: 50,\n  y: 50,\n  fontSize: 40,\n  stroke: 'green',\n  fill: 'yellow',\n  strokeWidth: 3\n};\n\nconst textConfig2 = {\n  text: 'Reversed rendering order.\\nfillAfterStrokeEnabled = true',\n  x: 50,\n  y: 150,\n  fontSize: 40,\n  stroke: 'green',\n  fill: 'yellow',\n  strokeWidth: 3,\n  fillAfterStrokeEnabled: true\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Width in Konva.js\nDESCRIPTION: Shows how to retrieve the current stroke width and set a new stroke width value for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method with a callback function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe for Svelte-Konva Demo\nDESCRIPTION: HTML iframe configuration to embed a CodeSandbox demonstration of Konva labels implementation in Svelte. The iframe is styled for full-width display with rounded corners.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Labels.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe \n  src=\"https://codesandbox.io/p/sandbox/github/konvajs/site/tree/master/svelte-demos/labels?file=/src/App.svelte\" \n  style={{\n    width: \"100%\",\n    height: \"800px\",\n    border: 0,\n    borderRadius: \"4px\",\n    overflow: \"hidden\"\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drawing Function with sceneFunc in Konva\nDESCRIPTION: Gets or sets the scene drawing function that is used to draw the shape on canvas. This function is also used for the hit area if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Perfect Draw Setting in Konva.js\nDESCRIPTION: Shows how to configure the perfectDrawEnabled property to improve performance when a shape has fill, stroke, and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows different ways to fire events on Konva nodes, including standard events, custom events with data, and events that bubble up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows different ways to fire events on a Konva.js node, including regular events, custom events with or without custom event objects, and events that bubble up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Getting Path Length in Konva.js\nDESCRIPTION: Returns the total length of the path.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar length = path.getLength();\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Scale Enabled in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke scale enabled property, which determines if stroke width scales with the shape or remains constant.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Using getSelfRect Method in Konva.js\nDESCRIPTION: Demonstrates how to get the self rectangle of shapes. The method returns different coordinates depending on the shape type.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting Skew in Konva.js\nDESCRIPTION: Demonstrates how to get and set the skew (shear transformation) of a Konva node in both x and y dimensions. This controls the node's parallelogram distortion.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Sepia Filter to Images with Vanilla JavaScript and Konva\nDESCRIPTION: This code demonstrates how to load an image and apply a Sepia filter using Konva.js in vanilla JavaScript. It creates a stage and layer, loads an image, and then applies the Sepia filter after caching the image for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Sepia.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  // Apply Sepia filter\n  image.cache();\n  image.filters([Konva.Filters.Sepia]);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Path in Konva with Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom path shape using Konva.js with Vanilla JavaScript. It initializes a stage and layer, then creates a green path with specific SVG path data and scaling, resembling a recycling symbol.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Path.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst path = new Konva.Path({\n  x: 50,\n  y: 50,\n  data: 'M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z',\n  fill: 'green',\n  scale: {\n    x: 2,\n    y: 2\n  }\n});\n\nlayer.add(path);\n```\n\n----------------------------------------\n\nTITLE: Loading Images on Component Mount in Vue.js\nDESCRIPTION: Handles the image loading process when the component is mounted. Creates a new Image object, sets its source to a lion PNG, and initializes the history array with the current image state when the image is loaded.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nonMounted(() => {\n  imageObj.value = new Image();\n  imageObj.value.src = '/assets/lion.png';\n  imageObj.value.onload = () => {\n    history.value = [JSON.stringify(images.value)];\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the y-coordinate of a Konva node's position. This provides a convenient way to modify just the vertical position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drag Boundaries in Konva.js\nDESCRIPTION: Demonstrates how to set a custom drag boundary function for a node. This allows for implementing constrained movement, such as restricting dragging to a vertical line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Demonstrates different ways to fire events on a Konva node, including built-in events, custom events with custom data, and events that bubble up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set the x-coordinate of the fill linear gradient start point for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Creating Animations with Tweens in KonvaJS\nDESCRIPTION: Demonstrates how to animate node properties using the simplified tween interface. This example shows animation of position with callbacks for progress and completion.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of a pointer (mouse or touch) relative to a node's local coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Shapes with Svelte-Konva\nDESCRIPTION: This code shows how to create an arc shape using Svelte with svelte-konva components. It imports the necessary components, sets up width and height variables, and renders a Stage with a Layer containing an Arc with specific configuration properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arc.mdx#2025-04-11_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Stage, Layer, Arc } from 'svelte-konva';\n\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n</script>\n\n<Stage config={{ width, height }}>\n  <Layer>\n    <Arc \n      config={{\n        x: width / 2,\n        y: height / 2,\n        innerRadius: 40,\n        outerRadius: 70,\n        angle: 60,\n        fill: 'yellow',\n        stroke: 'black',\n        strokeWidth: 4\n      }} \n    />\n  </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Color Values in Konva.js Filters\nDESCRIPTION: Methods for getting and setting individual RGB color components (red, green, blue) for use with Konva.Filters.RGB filter. Each component accepts values between 0 and 255.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nnode.red(value);   // Set red component (0-255)\nnode.green(value); // Set green component (0-255)\nnode.blue(value);  // Set blue component (0-255)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the fill color for Konva shapes using different color formats (string, hex, rgb, rgba). Setting to null removes the fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Managing X-Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the x-coordinate of a Konva node using the x method. This affects the horizontal position of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter in Konva.js\nDESCRIPTION: Illustrates how to apply a grayscale filter to a Konva node. The node is cached and the grayscale filter is added.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Grayscale]);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start radius of a radial gradient fill for a Konva shape. The start radius defines where the gradient begins radiating from.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Scale in KonvaJS\nDESCRIPTION: Shows how to get and set a node's scale properties for both x and y dimensions simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method. This asynchronous operation returns a Promise or uses a callback to provide the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill After Stroke in Konva.js\nDESCRIPTION: A simple example showing how to set a shape to render fill after stroke using the fillAfterStrokeEnabled property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/09-Fill_Stroke_Order.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Shape with React-Konva\nDESCRIPTION: This code snippet shows how to create a circle on an HTML5 canvas using React with react-konva. It creates a Stage component with a Layer containing a Circle component positioned in the center of the viewport with red fill and black stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Circle.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Y-Position in Konva.js\nDESCRIPTION: Shows how to get and set the y-coordinate of a Konva node using the y method. This affects the vertical position of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Interactive zIndex Example with React\nDESCRIPTION: A complete example showing zIndex manipulation in Konva.js using React components. Uses React state to control which group contains the red circle, effectively demonstrating how rendering order changes when moving shapes between groups.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/zIndex.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Rect, Circle } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [redCircleGroup, setRedCircleGroup] = useState('group1');\n\n  return (\n    <>\n      <button onClick={() => setRedCircleGroup('group2')}>\n        Move red circle to group2\n      </button>\n      <button onClick={() => setRedCircleGroup('group1')}>\n        Move red circle to group1\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Group>\n            <Rect\n              x={10}\n              y={10}\n              width={100}\n              height={100}\n              fill=\"black\"\n            />\n            {redCircleGroup === 'group1' && (\n              <Circle\n                x={80}\n                y={80}\n                radius={40}\n                fill=\"red\"\n              />\n            )}\n          </Group>\n          <Group>\n            <Rect\n              x={50}\n              y={50}\n              width={100}\n              height={100}\n              fill=\"green\"\n            />\n            {redCircleGroup === 'group2' && (\n              <Circle\n                x={80}\n                y={80}\n                radius={40}\n                fill=\"red\"\n              />\n            )}\n          </Group>\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob\nDESCRIPTION: Shows how to convert a Konva node into a Blob using async/await syntax.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Transformer\nDESCRIPTION: Creates a new Transformer instance with optional configuration parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Transformer(config)\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Konva.js\nDESCRIPTION: Examples of binding and handling various events in Konva.js, including mouse, touch, and custom events with namespaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute rotation of a node, accounting for the rotations of all ancestor nodes. This allows for accurate calculation of the final rotation angle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in KonvaJS\nDESCRIPTION: Method to get or set stroke linear gradient color stops for a shape. The color stops define the colors and their positions along the gradient line for the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors in KonvaJS\nDESCRIPTION: Examples showing how to find ancestor nodes using selectors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva.js Node to an Image\nDESCRIPTION: Demonstrates how to convert a Konva.js node into an image object using the toImage method. The method is asynchronous and returns the image via a callback function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Fill in Konva.js\nDESCRIPTION: Shows how to check, enable, or disable the fill of a Konva shape. When disabled, the shape will not render its fill regardless of other fill properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Blur in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the shadow blur effect for Konva shapes. Higher values create a more blurred shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal offset of a fill pattern in a Konva shape. This affects the pattern's position along the x-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Events to Single Handler in Konva.js\nDESCRIPTION: A simple example showing how to bind multiple events (mouseover, mousedown, mouseup) to a single handler function using the on() method in Konva.js. The function logs the event type to the console when any of these events occur.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Multi_Event.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshape.on('mouseover mousedown mouseup', function (e) {\n  console.log('events: ' + e.type);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Width in Konva.js\nDESCRIPTION: Shows how to get and set the stroke width of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Structuring Main Game Component Template in Vue.js with Konva\nDESCRIPTION: This snippet shows the template structure for the main game component using Vue.js and Konva. It includes the stage, layers, background, text, animal outlines, and draggable animals.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <Background />\n      <v-text\n        :config=\"{\n          text: score >= 4 ? 'You win! Enjoy your booty!' : 'Ahoy! Put the animals on the beach!',\n          x: 578 / 2,\n          y: 40,\n          fontSize: 20,\n          fontFamily: 'Calibri',\n          fill: 'white',\n          align: 'center',\n          offsetX: 200\n        }\"\n      />\n    </v-layer>\n    <v-layer>\n      <AnimalOutline\n        v-for=\"(pos, name) in animals\"\n        :key=\"`${name}_outline`\"\n        :name=\"name\"\n        :x=\"pos.outline.x\"\n        :y=\"pos.outline.y\"\n      />\n      <Animal\n        v-for=\"(pos, name) in animals\"\n        :key=\"name\"\n        :name=\"name\"\n        :start-x=\"pos.x\"\n        :start-y=\"pos.y\"\n        :outline=\"pos.outline\"\n        @score=\"handleScore\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Shape Drag Constraint in Konva.js\nDESCRIPTION: A simple example showing how to constrain a shape's movement along the X-axis during drag operations using the dragmove event. The shape's X position is locked to 0 while allowing Y position to change freely.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/07_Simple_Drag_Bounds.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshape.on('dragmove', () => {\n  // lock position of the shape on x axis\n  // keep y position as is\n  shape.x(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hit Detection in Konva.js\nDESCRIPTION: Demonstrates how to set a custom hit detection drawing function for more precise control over a shape's interactive area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node, taking into account the scales of all ancestor nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Setting Threshold in Konva.js Filters\nDESCRIPTION: Method for getting and setting threshold value for use with Konva.Filters.Threshold or Konva.Filters.Mask filters. Accepts values between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nnode.threshold(value);  // Set threshold value (0-1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Konva.Line Instance in JavaScript\nDESCRIPTION: Shows how to instantiate a new Konva.Line object with configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Line(config)\n```\n\n----------------------------------------\n\nTITLE: Managing Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get and set color stops for a radial gradient fill in a Konva shape. Color stops define the colors and their positions within the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Managing Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the rotation of a Konva node in degrees. Rotation is applied around the node's offset point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Shape Caching Operations\nDESCRIPTION: Methods for caching node content to improve drawing performance and apply filters. Includes configuration options for cache size, quality and debugging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle of Shape in Konva.js\nDESCRIPTION: Returns the shape's bounding rectangle without taking into account transformations and styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's name property, which can include multiple names like CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set fill linear gradient color stops for a Konva shape. The example shows creating a linear gradient with three color stops at different positions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Managing Points Array in Konva.Line\nDESCRIPTION: Shows how to access, set, and modify the points array that defines a line's shape. Points are stored as a flat array of coordinates [x1, y1, x2, y2, ...].\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get points\nvar points = line.points();\n\n// set points\nline.points([10, 20, 30, 40, 50, 60]);\n\n// push a new point\nline.points(line.points().concat([70, 80]));\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Strokes in Konva.js\nDESCRIPTION: Shows how to set dash patterns for strokes, including creating complex patterns with alternating dashes and dots.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal component of the linear gradient's start point for a fill in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Checking Konva Node Visibility on Screen in JavaScript\nDESCRIPTION: Demonstrates how to check if a Konva node is visible on the screen using the isClientRectOnScreen method. This can be useful for optimizing rendering performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon with React-Konva\nDESCRIPTION: This snippet shows how to create a polygon using the React-Konva library. It uses the Line component with the closed property to create a polygon with the same coordinates, fill, and stroke as the vanilla version, but implemented within a React functional component.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Polygon.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Line } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Line\n          points={[73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93]}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={5}\n          closed\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using strokeHitEnabled in Konva.js\nDESCRIPTION: Demonstrates how to get and set the strokeHitEnabled property, which is deprecated in favor of hitStrokeWidth.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Removing a Node in Konva.js\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, allowing the node to be reused later.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Generating Random Color with Konva.Util in JavaScript\nDESCRIPTION: Demonstrates how to use the getRandomColor() method from Konva.Util to set a random fill color for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Util.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshape.fill(Konva.Util.getRandomColor());\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Dragging in KonvaJS\nDESCRIPTION: Examples of configuring drag behavior including drag distance, bounds and enabling/disabling dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Managing Absolute Position in Konva.js\nDESCRIPTION: Shows how to get and set the absolute position of a Konva node. The absolute position is relative to the stage rather than the parent node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash Array for Stroke in Konva.js\nDESCRIPTION: Shows how to get and set the dash array for the stroke of a shape. This allows creating dashed lines with custom patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set stroke linear gradient color stops in a Konva shape. This allows creating multi-color gradients with defined color positions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Konva Nodes\nDESCRIPTION: Examples of binding various events to Konva nodes, including mouse events, touch events, and custom events. Shows how to handle event objects, use namespaces, and implement event delegation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a Blob using the toBlob method. This asynchronous operation returns a Promise that resolves with the resulting Blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Removing Node Names in Konva.js\nDESCRIPTION: Example of removing a name from a Konva node using the removeName method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set the vertical offset of a fill pattern in a Konva shape. This affects the pattern's position along the y-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Initializing Game State and Logic in Vue.js\nDESCRIPTION: This snippet sets up the main game state and logic using Vue.js composition API. It defines the stage size, score, animal positions, and score handling function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ref, computed } from 'vue';\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: 578,\n  height: 530\n};\n\nconst score = ref(0);\n\nconst animals = {\n  snake: { x: 10, y: 70, outline: { x: 275, y: 350 } },\n  giraffe: { x: 90, y: 70, outline: { x: 390, y: 250 } },\n  monkey: { x: 275, y: 70, outline: { x: 300, y: 420 } },\n  lion: { x: 400, y: 70, outline: { x: 100, y: 390 } }\n};\n\nconst handleScore = () => score.value++;\n```\n\n----------------------------------------\n\nTITLE: Creating a Star Shape with React and react-konva\nDESCRIPTION: This snippet shows how to create a star shape using react-konva in a React application. It uses the Stage, Layer, and Star components from react-konva to render a star with specific properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Star.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Star } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Star\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          numPoints={5}\n          innerRadius={30}\n          outerRadius={70}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Blob Shape with KonvaJS\nDESCRIPTION: Shows how to create an organic blob shape by combining both closed and tension properties. The tension property creates smooth curves while the closed property connects the endpoints.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst blob = new Konva.Line({\n  points: [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true,\n  tension: 0.3\n});\n\nlayer.add(blob);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drawing Function with sceneFunc in Konva.js\nDESCRIPTION: Example showing how to set a custom drawing function for a shape. This function is used to draw both the visible shape and its hit area (if hitFunc is not defined).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke in Konva.js\nDESCRIPTION: Demonstrates how to control whether filling happens after stroking in Konva shapes. Useful for text objects where stroke and fill order matters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Scaling Konva Nodes\nDESCRIPTION: Example of getting and setting a node's scale on both x and y axes simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Pattern Rotation in KonvaJS\nDESCRIPTION: Examples of getting and setting the fill pattern rotation angle in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Adding Children to a Container\nDESCRIPTION: Method to add one or more child nodes to a container. Returns the container for chaining.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache for Konva.Shape in JavaScript\nDESCRIPTION: Method to draw the hit graph using the cached scene canvas. It's useful for optimizing performance when detecting intersections with the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor with Konva.js\nDESCRIPTION: Demonstrates how to find a specific ancestor that matches a selector. This is useful when you need to reference a particular parent node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale Y in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get the current scale Y value of a node and how to set a new scale Y value. This affects the vertical scaling of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Scene Draw Function in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set a custom scene draw function for a Konva Shape, which is used to draw the shape on a canvas and for hit detection if no hit function is defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva node, which allows for node selection similar to CSS classes. The example shows adding 'selected' to a node that already has the name 'red'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap Style in Konva.js\nDESCRIPTION: Demonstrates how to get and set the line cap style for shape strokes. Options include butt, round, or square.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva.js node to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to obtain the absolute rotation of a node, which includes rotations applied by all ancestor nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Konva Node Names in JavaScript\nDESCRIPTION: Demonstrates various operations on Konva node names, including adding, checking, and removing names. Names can be used like CSS classes for node selection and grouping.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Radial Gradient End Point in Konva.js\nDESCRIPTION: Examples of how to set and get the end point coordinates for a radial gradient fill. The end point defines the outer circle's center of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Blend Mode with React-Konva\nDESCRIPTION: This snippet shows how to create a canvas blend mode effect using React-Konva components. It displays a green text with shadow and a draggable red rectangle that uses the 'xor' blend mode to create visual effects when overlapping the text.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/08-Blend_Mode.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Text, Rect } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          text=\"Text Shadow!\"\n          fontFamily=\"Calibri\"\n          fontSize={40}\n          x={20}\n          y={20}\n          fill=\"green\"\n          shadowColor=\"white\"\n          shadowOffset={{ x: 10, y: 10 }}\n        />\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"red\"\n          draggable={true}\n          globalCompositeOperation=\"xor\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Finding Child Nodes with Different Selection Methods\nDESCRIPTION: Examples of using the find method to select nodes by id, name, type, or using custom functions for more complex filtering of nodes within containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in KonvaJS\nDESCRIPTION: Examples of caching nodes to improve drawing performance with various configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Shapes Between Containers - React KonvaJS Implementation\nDESCRIPTION: React implementation using react-konva to create draggable groups and move a red rectangle between them. Uses state management instead of direct moveTo() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/groups_and_layers/Change_Containers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Group } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [redBoxGroup, setRedBoxGroup] = useState('yellow');\n\n  return (\n    <>\n      <button onClick={() => setRedBoxGroup('yellow')}>\n        Move to yellow group\n      </button>\n      <button onClick={() => setRedBoxGroup('blue')}>\n        Move to blue group\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Group x={50} y={50} draggable>\n            <Rect\n              width={100}\n              height={100}\n              fill=\"yellow\"\n              stroke=\"black\"\n              strokeWidth={4}\n            />\n            {redBoxGroup === 'yellow' && (\n              <Rect x={10} y={10} width={30} height={30} fill=\"red\" />\n            )}\n          </Group>\n          <Group x={200} y={50} draggable>\n            <Rect\n              width={100}\n              height={100}\n              fill=\"blue\"\n              stroke=\"black\"\n              strokeWidth={4}\n            />\n            {redBoxGroup === 'blue' && (\n              <Rect x={10} y={10} width={30} height={30} fill=\"red\" />\n            )}\n          </Group>\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Konva.js\nDESCRIPTION: Shows how to remove event listeners from Konva nodes, including removing multiple events and namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size in Konva\nDESCRIPTION: Example of getting and setting the font size in pixels for a Konva Text object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get font size\nvar fontSize = text.fontSize();\n\n// set font size to 22px\ntext.fontSize(22);\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Wrapping for Konva.js Text in JavaScript\nDESCRIPTION: Illustrates how to get and set the text wrapping behavior for a Konva.js Text shape. Options include 'word', 'char', or 'none', with 'word' as the default.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get wrap\nvar wrap = text.wrap();\n\n// set wrap\ntext.wrap('word');\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap in Konva.js\nDESCRIPTION: Demonstrates how to get and set the line cap style for shape strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Repeat in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern repeat property for a shape. Options include 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Applying Text Decoration to Konva.js Text in JavaScript\nDESCRIPTION: Illustrates how to get and set text decoration for a Konva.js Text shape. Possible values are 'underline', 'line-through', or a combination of both.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get text decoration\nvar textDecoration = text.textDecoration();\n\n// underline text\ntext.textDecoration('underline');\n\n// strike text\ntext.textDecoration('line-through');\n\n// underline and strike text\ntext.textDecoration('underline line-through');\n```\n\n----------------------------------------\n\nTITLE: Checking if Konva Node is Visible on Screen\nDESCRIPTION: Demonstrates how to determine if a Konva node is currently visible in the user's viewport, with an optional margin parameter to extend the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Attribute Management in KonvaJS\nDESCRIPTION: Examples of getting and setting attributes for KonvaJS nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get attribute\nvar x = node.getAttr('x');\n\n// get ancestors\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n});\n\n// set multiple attributes\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Pattern and Rules\nDESCRIPTION: Examples showing how to manage fill pattern rotation and fill rules. Pattern rotation accepts degrees as a number, while fill rule accepts a CanvasFillRule value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke scale enabled flag. When enabled, strokes will scale with the shape transform.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Linear Gradient End Point in Konva.js\nDESCRIPTION: Examples of how to set and get the end point coordinates for a linear gradient fill in Konva.js shapes. The end point determines where the gradient ends, affecting its direction and appearance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Radial Gradient Start Point in Konva.js\nDESCRIPTION: Examples of how to set and get the start point coordinates for a radial gradient fill. The start point defines the inner circle's center of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Canvas to PDF - Vue Implementation\nDESCRIPTION: Vue component implementation for exporting Konva canvas to PDF using vue-konva and jsPDF. Features stage configuration, component setup, and PDF export functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_to_PDF.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div style=\"position: relative\">\n    <button \n      style=\"position: absolute; top: 5px; left: 5px; z-index: 10\"\n      @click=\"handleExport\"\n    >\n      Save as PDF\n    </button>\n    \n    <v-stage ref=\"stageRef\" :config=\"stageConfig\">\n      <v-layer>\n        <v-rect :config=\"backgroundConfig\" />\n        \n        <v-text ref=\"textRef\" :config=\"textConfig\" />\n        \n        <v-arrow :config=\"arrowConfig\" />\n        \n        <v-image \n          v-if=\"darthVaderImage\"\n          :config=\"imageConfig\" \n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\nimport Konva from 'konva';\nimport { useImage } from 'vue-konva';\n\nconst stageRef = ref(null);\nconst textRef = ref(null);\nconst [darthVaderImage] = useImage('https://konvajs.org/assets/darth-vader.jpg', 'anonymous');\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stageConfig = {\n  width,\n  height\n};\n\nconst backgroundConfig = {\n  width,\n  height,\n  fill: 'rgba(200, 200, 200)'\n};\n\nconst textConfig = {\n  text: 'This is the Darth Vader',\n  x: 15,\n  y: 40,\n  rotation: -10,\n  fontSize: 18,\n  filters: [Konva.Filters.Blur],\n  blurRadius: 4\n};\n\nconst arrowConfig = {\n  points: [70, 50, 100, 80, 150, 100, 190, 100],\n  tension: 0.5,\n  stroke: 'black',\n  fill: 'black'\n};\n\nconst imageConfig = computed(() => ({\n  image: darthVaderImage.value,\n  x: 200,\n  y: 50,\n  scaleX: 0.5,\n  scaleY: 0.5\n}));\n\nonMounted(() => {\n  const script = document.createElement('script');\n  script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js';\n  script.integrity = 'sha384-NaWTHo/8YCBYJ59830LTz/P4aQZK1sS0SneOgAvhsIl3zBu8r9RevNg5lHCHAuQ/';\n  script.crossOrigin = 'anonymous';\n  document.head.appendChild(script);\n  \n  if (textRef.value) {\n    textRef.value.getNode().cache();\n  }\n});\n\nonUnmounted(() => {\n  const script = document.querySelector('script[src*=\"jspdf\"]');\n  if (script) {\n    document.head.removeChild(script);\n  }\n});\n\nconst handleExport = () => {\n  if (stageRef.value && typeof window.jsPDF !== 'undefined') {\n    const stage = stageRef.value.getNode();\n    const pdf = new window.jsPDF('l', 'px', [width, height]);\n    pdf.setTextColor('#000000');\n    \n    stage.find('Text').forEach((text) => {\n      const size = text.fontSize() / 0.75;\n      pdf.setFontSize(size);\n      pdf.text(text.text(), text.x(), text.y(), {\n        baseline: 'top',\n        angle: -text.getAbsoluteRotation(),\n      });\n    });\n  }\n};</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Mouse Cursor in Vanilla JavaScript with Konva\nDESCRIPTION: This example creates a canvas with three pentagon shapes that change the mouse cursor to different styles on hover. It uses Konva's event system to listen for mouseover and mouseout events and manipulates the cursor style of the Stage container directly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/07-Mouse_Cursor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst pentagon1 = new Konva.RegularPolygon({\n  x: 80,\n  y: stage.height() / 2,\n  sides: 5,\n  radius: 30,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\npentagon1.on('mouseover', function (e) {\n  e.target.getStage().container().style.cursor = 'pointer';\n});\npentagon1.on('mouseout', function (e) {\n  e.target.getStage().container().style.cursor = 'default';\n});\n\nconst pentagon2 = new Konva.RegularPolygon({\n  x: 180,\n  y: stage.height() / 2,\n  sides: 5,\n  radius: 30,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\npentagon2.on('mouseover', function (e) {\n  e.target.getStage().container().style.cursor = 'crosshair';\n});\npentagon2.on('mouseout', function (e) {\n  e.target.getStage().container().style.cursor = 'default';\n});\n\nconst pentagon3 = new Konva.RegularPolygon({\n  x: 280,\n  y: stage.height() / 2,\n  sides: 5,\n  radius: 30,\n  fill: 'blue',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\npentagon3.on('mouseover', function (e) {\n  e.target.getStage().container().style.cursor = 'move';\n});\npentagon3.on('mouseout', function (e) {\n  e.target.getStage().container().style.cursor = 'default';\n});\n\nlayer.add(pentagon1);\nlayer.add(pentagon2);\nlayer.add(pentagon3);\n```\n\n----------------------------------------\n\nTITLE: Dynamically importing svelte-konva with vite-plugin-iso-import\nDESCRIPTION: Using vite-plugin-iso-import to create client-side only imports of svelte-konva components. This approach checks the SSR environment and only loads the component on the client side.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/SvelteKit.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import MyCanvasComponent from '$lib/MyCanvas.svelte?client'; // Client-side only import\n\n  // Set component variable to null if page is rendered in SSR, otherwise use client-side only import\n  let MyCanvas = import.meta.env.SSR ? null : MyCanvasComponent;\n</script>\n\n<div>\n  <p>This is my fancy server side rendered (or prerendered) page.</p>\n\n  <!-- Use your dynamically imported svelte-konva canvas component with a svelte:component block, you can pass any component props as usual -->\n  <svelte:component this={MyCanvas} someProp=\"SomeString\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Posterize Levels in Konva.js\nDESCRIPTION: Method to get or set the levels for the Konva.Filters.Posterize filter. It accepts a number between 0 and 1 to control the posterization effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nlevels(level)\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Fill in KonvaJS\nDESCRIPTION: Method to get or set whether a shape's fill is enabled. This allows toggling the fill visibility without changing the fill properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Linear Gradient Start Point\nDESCRIPTION: Examples showing how to get and set the fill linear gradient start point coordinates. The method accepts an object with x and y coordinates or can work with individual x/y values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes\nDESCRIPTION: Demonstrates how to set attributes on Konva nodes using the setAttr method. This example sets the x-coordinate position of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates getting and setting the shadow opacity for a shape. The opacity value must be between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the start point for a linear gradient stroke in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern X Position in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the horizontal position (x-axis) of a fill pattern for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Position and Index\nDESCRIPTION: Examples of getting and setting node position, zIndex, and coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in KonvaJS\nDESCRIPTION: Method to get or set the start point of a linear gradient stroke. This defines where the gradient begins for the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Cap in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the line cap style (butt, round, or square) for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Moving a Node to Another Container in Konva.js\nDESCRIPTION: This code demonstrates how to move a node from its current container to a different container. This is useful for transferring nodes between layers or groups.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment in Konva\nDESCRIPTION: Example of getting and setting the horizontal alignment for a Konva Text object. Alignment options include 'left', 'center', 'right', or 'justify'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get text align\nvar align = text.align();\n\n// center text\ntext.align('center');\n\n// align text to right\ntext.align('right');\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Konva.js\nDESCRIPTION: Demonstrates how to remove event listeners from Konva.js nodes, including removing multiple listeners and namespaced listeners.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method. This asynchronous operation returns a Promise or executes a callback with the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle for Konva.js Nodes\nDESCRIPTION: Demonstrates how to retrieve the client rectangle (bounding box) of a Konva.js node, including all styling like strokes and shadows. Shows examples with and without applying transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Radial Gradient End Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the end radius of a radial gradient fill for a Konva shape. The end radius defines how far the gradient radiates outward.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Managing Node IDs in Konva.js\nDESCRIPTION: Demonstrates how to get and set the ID of a Konva node. The ID is globally unique across the entire page, similar to HTML element IDs.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva.js\nDESCRIPTION: Draws the hit detection area using the cached scene canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Ellipse X Radius in Konva.js\nDESCRIPTION: Shows how to get or set just the x-radius of an ellipse shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius x\nvar radiusX = ellipse.radiusX();\n\n// set radius x\nellipse.radiusX(200);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X component of the fill pattern offset. This controls the horizontal position of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get and set the shadow blur amount for a shape. Higher values create a more diffuse shadow effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Stroke Linear Gradient End Point in Konva.js\nDESCRIPTION: Examples of how to set and get the end point coordinates for a linear gradient stroke in Konva.js shapes. The end point coordinates define where the gradient stroke ends.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Lifecycle Methods\nDESCRIPTION: Implements mounted and beforeDestroy lifecycle hooks to setup transformer nodes and handle window resize events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmounted() {\n  this.$nextTick(() => {\n    const transformer = this.$refs.transformerRef.getNode();\n    const rects = transformer.getStage().find('.my-rect');\n    transformer.nodes(rects);\n    transformer.boundBoxFunc(this.boundBoxFunc);\n  });\n  window.addEventListener('resize', this.handleResize);\n},\nbeforeDestroy() {\n  window.removeEventListener('resize', this.handleResize);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Padding in Konva Transformer\nDESCRIPTION: Shows how to get and set padding value for the transformer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar padding = transformer.padding();\n\n// set\ntransformer.padding(10);\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by ID with React-Konva\nDESCRIPTION: Implements a draggable rectangle with an ID using React-Konva. Uses a useRef hook to access the layer and findOne() method to locate the rectangle by ID. When the button is clicked, the rectangle rotates and changes color.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_id.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useRef, useState } from 'react';\n\nconst App = () => {\n  const [position, setPosition] = useState({\n    x: window.innerWidth / 2 - 25,\n    y: window.innerHeight / 2 - 25\n  });\n  const layerRef = useRef(null);\n\n  const handleClick = () => {\n    // find rectangle by id and animate it\n    const rectangle = layerRef.current.findOne('#myRect');\n    rectangle.to({\n      duration: 1,\n      rotation: 360,\n      fill: 'blue',\n      easing: Konva.Easings.EaseInOut\n    });\n  };\n\n  const handleDragEnd = (e) => {\n    setPosition({\n      x: e.target.x(),\n      y: e.target.y()\n    });\n  };\n\n  return (\n    <div>\n      <button onClick={handleClick} style={{ marginBottom: '10px' }}>\n        Activate Rectangle\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer ref={layerRef}>\n          <Rect\n            x={position.x}\n            y={position.y}\n            width={50}\n            height={50}\n            fill=\"red\"\n            id=\"myRect\"\n            draggable\n            onDragEnd={handleDragEnd}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte for HMR State Preservation\nDESCRIPTION: This code demonstrates how to create a simple external store in Svelte using the writable function. External stores help preserve component state during Hot Module Replacement (HMR), avoiding state loss that would otherwise occur with local component state.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/events/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Radial Gradient End Point Y in JavaScript with Konva\nDESCRIPTION: Illustrates how to get and set the fill radial gradient end point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Y Position in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the vertical position (y-axis) of a fill pattern for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Path Data in Konva.js\nDESCRIPTION: Gets or sets the SVG path data string. The method automatically parses the data string into a data array.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get data\nvar data = path.data();\n\n// set data\npath.data('M200,100h100v50z');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the size of a Konva node. Shows how to retrieve width and height values and how to set them with a single object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in Konva.js\nDESCRIPTION: Method to clear the cached canvas for a node. Returns a reference to the Konva.Node object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Y Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the vertical scale of a Konva node. This allows for stretching or shrinking a node vertically without affecting its horizontal scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Scaling Fill Pattern in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern scale for a shape in Konva.js. This allows resizing the fill pattern independently of the shape size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Pixel Ratio for Konva Canvas in JavaScript\nDESCRIPTION: Demonstrates how to set the pixel ratio for a Konva canvas layer. This can be used to override the default device pixel ratio for special situations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Canvas.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.getCanvas().setPixelRatio(3);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow X Offset in Konva.js\nDESCRIPTION: Demonstrates how to get or set just the horizontal (x) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Color\nDESCRIPTION: Methods to get or set the stroke color using various color formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Y Position in Konva.js\nDESCRIPTION: Shows how to get and set the vertical position (y-axis) of the fill pattern for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Blur in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadow blur effect for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient End Point in KonvaJS\nDESCRIPTION: Method for getting or setting the end point (as an object with x and y coordinates) of the fill radial gradient. Returns the current end point when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Konva.js Nodes\nDESCRIPTION: Demonstrates how to completely destroy a Konva.js node, removing it from the scene and memory. When applied to container nodes, it also destroys all child nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Demonstrates how to clone a node, either exactly or with overridden properties. This is useful for creating copies of nodes or using existing nodes as templates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Line Height for Konva.js Text in JavaScript\nDESCRIPTION: Shows how to get and set the line height of a Konva.js Text shape. The default line height is 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get line height\nvar lineHeight = text.lineHeight();\n\n// set the line height\ntext.lineHeight(2);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Stroke Scale in KonvaJS\nDESCRIPTION: Method to get or set whether a shape's stroke width scales with the shape. When disabled, stroke width remains constant regardless of scaling operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Resizing with Ratio Preservation in React Konva\nDESCRIPTION: This React implementation uses useRef and useEffect hooks to create and connect text nodes with their respective transformers. The first transformer uses the default keepRatio behavior, while the second explicitly sets keepRatio to false to allow free resizing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/03_Keep_Ratio.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const text1Ref = useRef();\n  const text2Ref = useRef();\n  const tr1Ref = useRef();\n  const tr2Ref = useRef();\n\n  useEffect(() => {\n    tr1Ref.current.nodes([text1Ref.current]);\n    tr2Ref.current.nodes([text2Ref.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={50}\n          text=\"keep ratio by default\"\n          fontSize={20}\n          draggable\n          width={200}\n          ref={text1Ref}\n        />\n        <Transformer ref={tr1Ref} />\n\n        <Text\n          x={50}\n          y={150}\n          text=\"no ratio, but hold shift to keep ratio\"\n          fontSize={20}\n          draggable\n          width={200}\n          ref={text2Ref}\n        />\n        <Transformer ref={tr2Ref} keepRatio={false} />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings in Konva.js\nDESCRIPTION: Demonstrates how to remove event bindings from Konva nodes. The examples show removing single events, multiple events, and events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Cloning Konva.js Nodes\nDESCRIPTION: Shows how to clone a node, creating a new instance with identical attributes. Optionally, you can override specific properties when cloning to customize the new node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: This code shows how to convert a Konva node into a canvas element. This is useful for exporting or processing node content outside of Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Height in Konva.js\nDESCRIPTION: Demonstrates how to get and set the height property of a Konva.js node. The height method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings from Konva Nodes in JavaScript\nDESCRIPTION: Shows how to remove event bindings from Konva nodes, including removing multiple event types and using namespaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Dash in KonvaJS\nDESCRIPTION: Method to get or set whether a shape's dash stroke pattern is enabled. This allows toggling the dash visibility without changing the dash properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes by Selector\nDESCRIPTION: Method to find nodes using selectors like ID, name, or type. Returns an array of nodes that match the selector. Can use string selectors with # for ID and . for name, or pass a function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPassing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Linear Gradient Points in Konva.js\nDESCRIPTION: Examples showing how to get and set linear gradient start/end points for both fill and stroke styles. Demonstrates coordinate manipulation for gradient control.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: Example of how to get and set filters on a cached Konva node. Demonstrates applying a single filter and multiple filters from the Konva.Filters collection to a cached canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Draggable State in KonvaJS\nDESCRIPTION: Examples of getting and setting whether a node can be dragged.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Shows how to get and set just the X scale for a pattern fill, controlling its horizontal size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Examples of how to get and set the y-coordinate of the end point for a linear gradient fill. This allows for adjusting the gradient's vertical positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Children from a Konva Container in JavaScript\nDESCRIPTION: Demonstrates how to retrieve all children or filtered children from a Konva container. The getChildren method can optionally take a filter function to select specific types of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Stroke Shadows in React Konva\nDESCRIPTION: React implementation of stroke shadow optimization in Konva. This example uses React refs to manipulate the Konva shapes and create an animation demonstrating the performance benefits of disabling stroke shadows with the shadowForStrokeEnabled property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Strokes.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const circleWithShadowRef = useRef(null);\n  const circleOptimizedRef = useRef(null);\n  const fpsTextRef = useRef(null);\n\n  useEffect(() => {\n    const anim = new Konva.Animation((frame) => {\n      // Rotate circles\n      circleWithShadowRef.current.rotation(frame.time * 0.1);\n      circleOptimizedRef.current.rotation(frame.time * 0.1);\n      \n      // Update FPS counter\n      fpsTextRef.current.text('FPS: ' + frame.frameRate.toFixed(1));\n    }, circleWithShadowRef.current.getLayer());\n\n    anim.start();\n    return () => anim.stop();\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {/* Circle with shadow for stroke (default) */}\n        <Circle\n          ref={circleWithShadowRef}\n          x={100}\n          y={100}\n          radius={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          shadowColor=\"black\"\n          shadowBlur={10}\n          shadowOffset={{ x: 5, y: 5 }}\n          shadowOpacity={0.5}\n        />\n        \n        {/* Circle without shadow for stroke (optimized) */}\n        <Circle\n          ref={circleOptimizedRef}\n          x={250}\n          y={100}\n          radius={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          shadowColor=\"black\"\n          shadowBlur={10}\n          shadowOffset={{ x: 5, y: 5 }}\n          shadowOpacity={0.5}\n          shadowForStrokeEnabled={false}\n        />\n        \n        {/* Labels */}\n        <Text\n          x={50}\n          y={170}\n          text=\"With Stroke Shadow\"\n          fontSize={16}\n        />\n        <Text\n          x={200}\n          y={170}\n          text=\"Without Stroke Shadow\\n(Better Performance)\"\n          fontSize={16}\n        />\n        \n        {/* FPS counter */}\n        <Text\n          ref={fpsTextRef}\n          x={10}\n          y={10}\n          text=\"FPS: 0\"\n          fontSize={16}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set the absolute position of a Konva node. This position is relative to the stage, not the parent container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Image Smoothing\nDESCRIPTION: Methods to get or set the imageSmoothingEnabled flag for the layer's canvas context. This controls whether images are smoothed when scaled or not.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get imageSmoothingEnabled flag\nvar imageSmoothingEnabled = layer.imageSmoothingEnabled();\n\nlayer.imageSmoothingEnabled(false);\n\nlayer.imageSmoothingEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Scale in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's scale properties for both x and y axes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva Nodes\nDESCRIPTION: Example showing how to remove a name from a Konva node. This is useful for manipulating node states or classes programmatically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in KonvaJS\nDESCRIPTION: Example showing how to get the relative pointer position for a rectangle node when clicking on the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Stroke Width for Konva.js Shape in JavaScript\nDESCRIPTION: Shows how to get and set the stroke width for hit detection in a Konva.js Shape. The default value is 'auto', which equals the strokeWidth. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes in Konva.js\nDESCRIPTION: Example showing how to move a node relative to its current position using x,y coordinates\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Color Stops in KonvaJS\nDESCRIPTION: Method to get or set fill linear gradient color stops for a shape. The color stops define the colors and their positions along the gradient line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set just the X component of the linear gradient stroke start point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Node SkewY in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's skew on the y-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Threshold Value in KonvaJS\nDESCRIPTION: Method for getting and setting threshold value for image processing. The threshold() method accepts values between 0 and 1. This method is used with Konva.Filters.Threshold or Konva.Filters.Mask filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nnode.threshold(0.5);  // Sets threshold value\n```\n\n----------------------------------------\n\nTITLE: Managing Visibility of Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set the visible attribute of a Konva.js node. This determines whether the node is rendered or not.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Image in Konva.js\nDESCRIPTION: Demonstrates how to get the current fill pattern image and set a new one by loading an external image. The fill pattern is used to create textured fills for shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Fills in Konva.js\nDESCRIPTION: Demonstrates how to create linear gradient fills using color stops. Color stops define colors at specific points along the gradient, with values between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Checking for Fill in Konva.js Shape in JavaScript\nDESCRIPTION: Shows how to check if a Konva.js Shape has a fill. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// returns whether or not the shape will be filled\nvar hasFill = shape.hasFill();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Skew in Konva.js\nDESCRIPTION: Illustrates how to get and set the skew property of a Konva.js node. The skew method can be used without parameters to retrieve the current value, or with an object containing x and y properties to set new values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment for Konva.js Text in JavaScript\nDESCRIPTION: Demonstrates how to get and set the vertical alignment of a Konva.js Text shape. The alignment can be 'top', 'middle', or 'bottom'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get text vertical align\nvar verticalAlign = text.verticalAlign();\n\n// center text\ntext.verticalAlign('middle');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva\nDESCRIPTION: Shows how to set the globalCompositeOperation property for a Konva shape, which determines how it blends with elements beneath it in the rendering stack.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in Konva.js\nDESCRIPTION: Examples showing how to get absolute position of a node relative to canvas or stage\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Fills in Konva.js\nDESCRIPTION: Example showing how to create a linear gradient fill with multiple color stops. This example creates a gradient from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a Konva node, creating a new instance with identical properties, and also demonstrates overriding properties during the cloning process.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Events with Konva.js Node\nDESCRIPTION: Shows different ways to fire events on a node, including standard events, custom events, events with custom data, and bubbling events. This helps with creating interactive elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Event Handling in KonvaJS\nDESCRIPTION: Examples of binding and removing event listeners for various event types\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hit Detection with hitFunc in Konva.js\nDESCRIPTION: Example demonstrating how to define a custom hit detection area for a shape. This function allows more precise control over the interactive area of the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap Style in Konva.js\nDESCRIPTION: Demonstrates how to get and set the line cap style for shape strokes. The value can be 'butt', 'round', or 'square'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternImage in Konva.js\nDESCRIPTION: Example demonstrating how to get and set an image as a fill pattern for a Konva shape by loading and assigning an image object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Adding Children to a Konva Container in JavaScript\nDESCRIPTION: Shows how to add one or multiple child nodes to a Konva container using the add method. This method can accept individual nodes or an array of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n```\n\n----------------------------------------\n\nTITLE: Resizing Konva Shapes with Preserved Stroke in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates two methods for resizing Konva shapes without changing stroke size using vanilla JavaScript. It creates two rectangles: one that resets its scale after transformation, and another that disables stroke scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/12_Ignore_Stroke_On_Transform.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// first way - reset scale on transform end\nconst rect1 = new Konva.Rect({\nx: 50,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: '#00ff00',\nstroke: 'black',\nstrokeWidth: 5,\ndraggable: true,\n});\nlayer.add(rect1);\n\nconst tr1 = new Konva.Transformer({\nnodes: [rect1],\n});\nlayer.add(tr1);\n\nrect1.on('transformend', () => {\n// after transform we need to reset scale\nrect1.scaleX(1);\nrect1.scaleY(1);\n// and increase width and height manually\nrect1.width(rect1.width() - rect1.scaleX());\nrect1.height(rect1.height() - rect1.scaleY());\n});\n\n// second way - disable stroke scaling\nconst rect2 = new Konva.Rect({\nx: 200,\ny: 50,\nwidth: 100,\nheight: 100,\nfill: '#ff0000',\nstroke: 'black',\nstrokeWidth: 5,\ndraggable: true,\nstrokeScaleEnabled: false,\n});\nlayer.add(rect2);\n\nconst tr2 = new Konva.Transformer({\nnodes: [rect2],\nignoreStroke: true,\n});\nlayer.add(tr2);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in Konva.js\nDESCRIPTION: Shows how to calculate the absolute position of a node, optionally relative to a specific ancestor. This allows for calculating positions that ignore certain parent transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet illustrates how to get and set the stroke linear gradient start point y in a Konva shape. It uses the strokeLinearGradientStartPointY method to retrieve and modify the y-coordinate of the gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set just the Y offset for a pattern fill, controlling its vertical position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva.js for Performance Optimization\nDESCRIPTION: Method to cache a node to improve drawing performance, apply filters, or create more accurate hit regions. Takes an optional configuration object and returns a reference to the Konva.Node object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Skew Y in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the vertical skew value of a node. This creates a slant transformation along the Y axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Applying Posterize Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply a posterize filter to a Konva node. The node is cached, the posterize filter is added, and the levels are set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Posterize]);\nnode.levels(0.8); // between 0 and 1\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Node\nDESCRIPTION: Method to find and return the first node that matches a selector. Uses the same selector syntax as find() but returns only the first matching node rather than an array.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by ID with Vanilla JavaScript in KonvaJS\nDESCRIPTION: Creates a draggable rectangle with an ID and demonstrates how to select it using the findOne() method. When the button is clicked, the rectangle is found by its ID and animated to rotate and change color.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_id.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create a rectangle with id\nconst rect = new Konva.Rect({\n  x: stage.width() / 2 - 25,\n  y: stage.height() / 2 - 25,\n  width: 50,\n  height: 50,\n  fill: 'red',\n  id: 'myRect',\n  draggable: true\n});\n\nlayer.add(rect);\n\n// add button\nconst button = document.createElement('button');\nbutton.textContent = 'Activate Rectangle';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  // find rectangle by id and animate it\n  const rectangle = layer.findOne('#myRect');\n  rectangle.to({\n    duration: 1,\n    rotation: 360,\n    fill: 'blue',\n    easing: Konva.Easings.EaseInOut\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Tango Animation with Vue and Konva\nDESCRIPTION: Vue.js implementation of the Shape Tango animation using Vue Konva. This version uses Vue's reactive state system to manage shapes, with component methods for handling shape dragging and animation. It demonstrates the same core functionality as the other implementations but with Vue-specific patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Shape_Tango.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage\n      :config=\"stageConfig\"\n      ref=\"stageRef\"\n    >\n      <v-layer>\n        <v-regular-polygon\n          v-for=\"(shape, i) in shapes\"\n          :key=\"i\"\n          :config=\"{ ...shape, draggable: true }\"\n          @dragend=\"(e) => handleDragEnd(e, i)\"\n        />\n      </v-layer>\n    </v-stage>\n    <button\n      @click=\"handleTango\"\n      style=\"position: absolute; top: 10px; left: 10px; padding: 10px\"\n    >\n      Tango!\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst COLORS = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\nconst NUM_SHAPES = 10;\n\nconst shapes = ref([]);\nconst stageRef = ref(null);\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst getRandomColor = () => COLORS[Math.floor(Math.random() * COLORS.length)];\n\nconst getRandomShapeProps = () => {\n  const radius = Math.random() * 100 + 20;\n  return {\n    x: Math.random() * stageConfig.width,\n    y: Math.random() * stageConfig.height,\n    sides: Math.ceil(Math.random() * 5 + 3),\n    radius,\n    fill: getRandomColor(),\n    opacity: (radius - 20) / 100,\n  };\n};\n\nconst handleDragEnd = (e, index) => {\n  const newShapes = [...shapes.value];\n  newShapes[index] = {\n    ...newShapes[index],\n    x: e.target.x(),\n    y: e.target.y(),\n  };\n  shapes.value = newShapes;\n};\n\nconst handleTango = () => {\n  const stage = stageRef.value.getStage();\n  const layer = stage.findOne('Layer');\n  const shapeNodes = layer.find('RegularPolygon');\n\n  shapeNodes.forEach((node, i) => {\n    const radius = Math.random() * 100 + 20;\n    const newProps = {\n      duration: 1,\n      x: Math.random() * stageConfig.width,\n      y: Math.random() * stageConfig.height,\n      rotation: Math.random() * 360,\n      radius: radius,\n      opacity: (radius - 20) / 100,\n      easing: Konva.Easings.EaseInOut,\n      fill: getRandomColor(),\n    };\n\n    node.to(newProps);\n\n    // Update state after animation\n    setTimeout(() => {\n      const newShapes = [...shapes.value];\n      newShapes[i] = { ...newShapes[i], ...newProps };\n      shapes.value = newShapes;\n    }, 1000);\n  });\n};\n\nonMounted(() => {\n  shapes.value = Array.from({ length: NUM_SHAPES }, getRandomShapeProps);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X coordinate of the start point for a linear gradient fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffset in Konva.js\nDESCRIPTION: Example showing how to get and set the shadow offset as an object with x and y coordinates, controlling the position of the shadow relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Height in KonvaJS\nDESCRIPTION: Shows how to get and set a node's height dimension.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Green Channel in Konva.js\nDESCRIPTION: Method to get or set the green channel value for the Konva.Filters.RGB filter. It accepts an integer between 0 and 255 to adjust the green component of the image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\ngreen(green)\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Stroke Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get the current stroke linear gradient color stops and set new ones. This example creates a gradient for the stroke that transitions from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point X in KonvaJS\nDESCRIPTION: Method to get or set the X component of the linear gradient start point. This controls the horizontal position of where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Z-Index in JavaScript\nDESCRIPTION: Illustrates how to get and set the z-index of a Konva node relative to its siblings within the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Caching a Konva Node in JavaScript\nDESCRIPTION: Demonstrates how to cache a Konva node to improve drawing performance, apply filters, or create more accurate hit regions. Shows different ways to cache shapes and nodes with various configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color for Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates various ways to get and set the stroke color of a Konva.js Shape. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions in Konva.js\nDESCRIPTION: Examples of getting and setting node dimensions using the size method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: This code demonstrates how to clone a node in Konva.js. It shows both a simple clone and a clone with property overrides, allowing you to use an existing node as a template for a new one.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow for Stroke in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable shadows for strokes, which can improve performance by preventing shadows from affecting strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a Blob object using the toBlob method, which returns a Promise that resolves with the Blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Configuring dash in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the dash array for the stroke of a Konva shape. This property defines the pattern of dashes and gaps in the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Shows how to get and set the vertical component of the linear gradient's start point for a fill in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Event Prevention for Konva.js Shapes\nDESCRIPTION: Shows how to get and set the preventDefault property for a Konva.js shape. This determines whether the shape will prevent default browser behavior on pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva Nodes\nDESCRIPTION: Illustrates how to remove a specific name from a Konva node that has multiple names. The removeName method allows selective removal without affecting other assigned names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in Konva.js\nDESCRIPTION: Demonstrates how to cache Konva nodes to improve drawing performance. Examples show different caching configurations including automatic detection, manual bounding box definition, and debugging with borders.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Children Nodes\nDESCRIPTION: Method to get an array of direct descendant nodes from a container. Accepts an optional filter function to return only specific types of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});\n```\n\n----------------------------------------\n\nTITLE: Using perfectDrawEnabled Method in Konva.js Shapes\nDESCRIPTION: Shows how to get and set perfectDrawEnabled property for Konva shapes. Setting this to false can improve performance for shapes with fill, stroke and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Shows how to get and set the fill radial gradient start radius for a shape in Konva.js. This affects the beginning of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Using to method for animation tweening in Konva.js\nDESCRIPTION: Shows how to use the 'to' method, a shorthand for creating Konva.Tween objects. This example demonstrates animating a circle's position with callback handlers for update and completion events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position in KonvaJS\nDESCRIPTION: Shows how to get and set the y-coordinate position of a node using the y method, which provides a simpler alternative to the position method for single-axis adjustments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in Konva.js\nDESCRIPTION: Demonstrates how to get and set the minimum drag distance for a Konva node. This determines how far the pointer must move before a drag operation is initiated.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Index for Konva Node Elements\nDESCRIPTION: Demonstrates how to get and set the zIndex property of a Konva node, which determines its stacking order relative to siblings with the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill linear gradient end point for a Konva.js shape. The end point is defined by x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Drawing Performance with perfectDrawEnabled in Konva.js\nDESCRIPTION: Shows how to get or set the perfectDrawEnabled property, which can be set to false to improve performance for shapes with fill, stroke and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva\nDESCRIPTION: Demonstrates how to get and set the name of a Konva node. Names can function like CSS classes, with multiple space-separated names assigned to a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Getting Layer Height\nDESCRIPTION: Method to retrieve the height of a layer. This getter returns the height of the stage, while the setter does nothing. To change height, use the stage height setter instead.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar height = layer.height();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set just the y component of the fill pattern scale for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes from Konva Container\nDESCRIPTION: Example showing how to remove a node from its parent container without destroying it. This allows the node to be reused later.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Names in Konva.js\nDESCRIPTION: Demonstrates how to get and set the name of a Konva.js node. Names can be used like CSS classes, allowing multiple space-separated values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Scale for Konva Nodes\nDESCRIPTION: Shows how to get and set the horizontal scale factor of a Konva node using the scaleX method for one-dimensional scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Listening Properties in Konva.js\nDESCRIPTION: Examples showing how to get and set the listening attribute of a Konva node to control event handling. When set to false, the node will be ignored in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set the fill linear gradient start point X coordinate for a shape in Konva.js. This affects the horizontal starting position of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Radial Gradient End Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the end radius of a radial gradient fill. The end radius determines the size of the outer circle of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point in Konva.js\nDESCRIPTION: Method to get or set the start point for a radial gradient fill. Takes an object with x and y coordinates and returns an object with the same properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap for Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates how to get and set the line cap style for a Konva.js Shape. Options are 'butt', 'round', or 'square'. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Radial Gradient Start Point in Konva Shapes (JavaScript)\nDESCRIPTION: This code demonstrates how to get and set the fill radial gradient start point in a Konva shape. It uses the fillRadialGradientStartPoint method to access and modify both x and y coordinates of the radial gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Line Cap Style in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the line cap style (butt, round, or square) for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas in JavaScript with Konva\nDESCRIPTION: Illustrates how to clear the cached canvas for a Konva Node using the clearCache method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes for Konva Node in JavaScript\nDESCRIPTION: Method to set multiple attributes at once for a Konva node using an object literal. This allows for efficient updating of multiple properties in a single call.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern X Position in Konva.js\nDESCRIPTION: Demonstrates getting and setting the horizontal position (x-axis) of the fill pattern for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Pattern and Fill Rule Control in Konva.js\nDESCRIPTION: Examples demonstrating pattern rotation control and fill rule settings for shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Color Stops in KonvaJS\nDESCRIPTION: Method to get or set fill radial gradient color stops for a shape. The color stops define the colors and their positions along the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Skew in Konva.js\nDESCRIPTION: Demonstrates how to get and set the skew of a node in both x and y dimensions. Skewing creates shear transformations that can tilt the node's appearance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob using Promises in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a blob using the toBlob method with async/await syntax to handle the Promise return value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Image in Konva.js\nDESCRIPTION: Demonstrates how to use an image as a fill pattern for shapes. Requires loading an image object first, then setting it as the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern Offset in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern offset for a shape in Konva.js. This allows fine-tuning the position of a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties with Tween in Konva.js\nDESCRIPTION: Example shows how to animate a node's properties using the Konva.Tween shorthand method 'to()', which creates smooth transitions between property values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a Konva node with the option to override specific attributes. This is useful for creating copies with slight modifications based on existing nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: Demonstrates how to get client rectangle coordinates for Konva nodes, including handling of transformations and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Managing Node ID in KonvaJS\nDESCRIPTION: Shows how to get and set a node's global ID property that must be unique across the entire page.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Transforms in Konva.js\nDESCRIPTION: Shows how to enable different types of transforms for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Setting ID of a Konva.js Node\nDESCRIPTION: Shows how to get and set the ID of a node. IDs are global for the whole page and should be unique for each node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas Animation with Konva in Vanilla JavaScript\nDESCRIPTION: This code demonstrates optimized animation techniques with Konva, including shape caching for complex objects, selective property animation, and using Konva.Animation. The example creates a rotating star and a circle moving in a circular pattern with a toggle button to start/stop the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Animation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create a complex star shape\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\n// Cache the shape for better performance\nstar.cache();\nlayer.add(star);\n\n// Create simple circle that doesn't need caching\nconst circle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 20,\n  fill: 'red',\n});\nlayer.add(circle);\n\n// Create optimized animation\nconst anim = new Konva.Animation((frame) => {\n  // Rotate star (cached shape)\n  star.rotation(frame.time * 0.1);\n  \n  // Move circle in a circle pattern\n  circle.x(100 + Math.cos(frame.time * 0.002) * 50);\n  circle.y(100 + Math.sin(frame.time * 0.002) * 50);\n}, layer);\n\n// Add start/stop button\nconst button = document.createElement('button');\nbutton.textContent = 'Toggle Animation';\nbutton.style.position = 'absolute';\nbutton.style.top = '10px';\nbutton.style.left = '10px';\ndocument.body.appendChild(button);\n\nlet isPlaying = true;\nbutton.addEventListener('click', () => {\n  if (isPlaying) {\n    anim.stop();\n    button.textContent = 'Start Animation';\n  } else {\n    anim.start();\n    button.textContent = 'Stop Animation';\n  }\n  isPlaying = !isPlaying;\n});\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in KonvaJS\nDESCRIPTION: Shows how to remove event listeners from nodes using different methods including namespace-based removal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva\nDESCRIPTION: Demonstrates getting and setting the globalCompositeOperation property for a Konva shape. This affects how the node is visually composited with other nodes but doesn't impact the hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Color Stops in KonvaJS\nDESCRIPTION: Demonstrates how to get and set linear gradient color stops for both fill and stroke properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in KonvaJS\nDESCRIPTION: Demonstrates how to check if a node has a specific name using the hasName method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node ID in Konva.js\nDESCRIPTION: Shows how to get and set a unique ID for a node. The ID is global for the entire page and can be used for quick node lookups and selections.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Node ScaleX in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's scale on the x-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Scaling Node in KonvaJS\nDESCRIPTION: Examples of getting and setting X and Y scale values for a Konva node. Scale values affect the size multiplier of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Repeat in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern repeat property for a Konva.js shape. Options include 'repeat', 'repeat-x', 'repeat-y', and 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Filled Shapes with Vue and Konva\nDESCRIPTION: This Vue implementation demonstrates how to create interactive pentagon shapes with different fill types using vue-konva. It shows a partial implementation that includes component structure and event handlers for various fill types like colors, patterns, and gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/01-Fill.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon\n        :config=\"{\n          x: 80,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fill: colorFill,\n          stroke: 'black',\n          strokeWidth: 4,\n          draggable: true,\n        }\"\n        @mouseenter=\"onColorEnter\"\n        @mouseleave=\"onColorLeave\"\n      />\n      <v-regular-polygon\n        :config=\"{\n          x: 220,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fillPatternImage: patternImage,\n          fillPatternOffset: patternOffset,\n          stroke: 'black',\n          strokeWidth: 4,\n          draggable: true,\n        }\"\n        @mouseenter=\"onPatternEnter\"\n        @mouseleave=\"onPatternLeave\"\n      />\n      <v-regular-polygon\n        :config=\"{\n          x: 360,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fillLinearGradientStartPoint: { x: -50, y: -50 },\n          fillLinearGradientEndPoint: { x: 50, y: 50 },\n          fillLinearGradientColorStops: linearGradientStops,\n          stroke: 'black',\n          strokeWidth: 4,\n          draggable: true,\n        }\"\n        @mouseenter=\"onLinearGradientEnter\"\n        @mouseleave=\"onLinearGradientLeave\"\n      />\n      <v-regular-polygon\n        :config=\"{\n          x: 500,\n          y: stageSize.height / 2,\n          sides: 5,\n          radius: 70,\n          fillRadialGradientStartPoint: { x: 0, y: 0 },\n          fillRadialGradientStartRadius: 0,\n          fillRadialGradientEndPoint: { x: 0, y: 0 },\n          fillRadialGradientEndRadius: 70,\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Scale in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern scale using an object with x and y properties. This controls the size of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient Start Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This code shows how to get and set the fill linear gradient start point y in a Konva shape. It uses the fillLinearGradientStartPointY method to access and modify the y-coordinate of the gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Positioning Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates methods for getting and setting both absolute and relative positions of Konva nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute position\nvar position = node.absolutePosition();\n\n// set absolute position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n\n// get relative position\nvar position = node.position();\n\n// set relative position\nnode.position({\n  x: 5,\n  y: 10\n});\n\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties with Tweens in Konva.js\nDESCRIPTION: Shows a simplified way to apply animations to a Konva node using the to() method. This is a shorthand for creating a Konva.Tween object, allowing properties to be animated with callbacks for updates and completion.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Dash Enabled Flag in Konva.js\nDESCRIPTION: Shows how to get and set the dash enabled flag for a Konva.js shape. This method controls whether line dashing is enabled for the shape's stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method. This asynchronous operation returns a Promise or uses a callback function to provide the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Node Visibility on Screen in Konva.js\nDESCRIPTION: Demonstrates how to check if a Konva.js node is visible on the screen, with an optional margin. This is useful for performance optimizations and viewport-based logic.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js\nDESCRIPTION: Demonstrates various ways to get and set the shadow color of a shape using different color formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity of Node in Konva.js\nDESCRIPTION: Shows how to get or set the opacity of a node, with values ranging from 0 (transparent) to 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Binding events to nodes in Konva.js\nDESCRIPTION: Demonstrates various ways to bind event handlers to Konva nodes, including multiple events, namespaced events, and event delegation with examples of how to access event information.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Scale and Rotation in Konva.js\nDESCRIPTION: Examples showing how to get absolute scale and rotation values\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listening in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the listening attribute of a node. When set to false, the node will not respond to events and will be ignored in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Skewing Node in KonvaJS\nDESCRIPTION: Examples of applying skew transformations to a Konva node. Includes both combined X/Y skew and individual axis skewing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Shows different ways to fire events on nodes, including custom events and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Coordinate Management in KonvaJS\nDESCRIPTION: Examples of managing x and y coordinates of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Managing Linear Gradient End Point\nDESCRIPTION: Examples showing how to get and set the fill linear gradient end point coordinates. The method accepts an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern scale Y value for a shape in Konva.js. This affects the vertical scaling of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the line join style (miter, round, or bevel) for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Konva.js\nDESCRIPTION: Shows how to remove event listeners from Konva nodes, including removing multiple events and namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Moving Node to Another Container in KonvaJS\nDESCRIPTION: Shows how to move a node from its current container to another container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Checking Konva Node Visibility on Screen in JavaScript\nDESCRIPTION: Shows how to determine if a Konva node is currently visible on the screen, with an optional margin parameter to adjust the visibility threshold.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Node Scale Y in KonvaJS\nDESCRIPTION: Shows how to get and set a node's vertical scale factor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Positioning Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates various methods for getting and setting the position of Konva nodes, including absolute position, relative position, and individual x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Detection from Cache in Konva\nDESCRIPTION: Example of caching a shape and drawing its hit graph from the cache for better performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Radial Gradient Points\nDESCRIPTION: Methods to get and set radial gradient start and end points using both individual coordinates and point objects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient Start Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the fill radial gradient's start point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting outerRadius for a Konva Ring\nDESCRIPTION: Shows how to get the current outer radius of a ring or set it to a new value. The outerRadius defines the distance from the center to the outer edge of the ring.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get outer radius\nvar outerRadius = ring.outerRadius();\n\n// set outer radius\nring.outerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Konva Node Opacity in JavaScript\nDESCRIPTION: Demonstrates how to get and set the opacity of a Konva node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Skew in Konva.js\nDESCRIPTION: Shows how to get and set the vertical skew of a Konva node. This creates a slanting effect along the horizontal axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Attribute Manipulation in Konva.js\nDESCRIPTION: Illustrates how to get and set attributes for Konva.js nodes, including getting individual attributes and setting multiple attributes at once.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Node Removal and Destruction in Konva.js\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, and how to completely destroy a node and its children.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set fill linear gradient color stops for a shape. The example shows creating a gradient that transitions from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node, which takes into account ancestor scales. Returns an object with x and y properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient End Point X in KonvaJS\nDESCRIPTION: Method for getting or setting the X-coordinate of the fill linear gradient's end point. Returns the current X value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient start point X in Konva.js\nDESCRIPTION: Shows how to get and set the X coordinate of the start point for a fill radial gradient in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Width of Konva Nodes\nDESCRIPTION: Shows how to get and set the width of a Konva node. This property affects the node's size before any scaling is applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Color in Konva\nDESCRIPTION: Methods to get or set the stroke color of a shape in Konva, with examples of various color formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Node in Konva.js\nDESCRIPTION: Demonstrates how to get or set a node's absolute position (relative to the stage) using the absolutePosition method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers to Konva.js Nodes\nDESCRIPTION: Shows how to attach event listeners to Konva.js nodes. Includes examples for handling clicks, touches, accessing event information, stopping propagation, and using namespaces for event management.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating X Coordinate in Konva.js\nDESCRIPTION: Example of getting and setting a node's x coordinate position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern offset for a Konva.js shape. This method controls the positioning of the pattern fill within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Stroke Scale in Konva.js\nDESCRIPTION: Shows how to enable or disable stroke scaling for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Tweening Node Properties in Konva.js\nDESCRIPTION: Example showing how to animate node properties using the shorthand 'to' method, which creates a Konva.Tween object with callbacks for animation updates and completion.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern offset Y coordinate for a shape in Konva.js. This affects the vertical positioning of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Intersection in JavaScript\nDESCRIPTION: Example of finding a shape that intersects with a given point on the layer. This method is used to determine if a point intersects with a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = layer.getIntersection({x: 50, y: 50});\n```\n\n----------------------------------------\n\nTITLE: Accessing Ancestor Nodes of Konva Node in JavaScript\nDESCRIPTION: Shows how to retrieve and iterate through the ancestors of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node into a canvas element. This is useful for exporting or processing a node outside of the Konva context.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Radial Gradient Start Point X in JavaScript with Konva\nDESCRIPTION: Shows how to get and set the fill radial gradient start point x coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Using draggable method in Konva.js\nDESCRIPTION: Demonstrates how to get and set the draggable property of a Konva node. This method enables or disables drag and drop functionality for the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Scale in Konva.js\nDESCRIPTION: Shows how to get and set the scale of a node in both x and y dimensions. Scaling affects the node's size and can be used for zoom effects or responsive sizing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Shows how to get and set just the x component of the fill pattern scale for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor with Konva.js\nDESCRIPTION: Demonstrates how to find a specific ancestor of a Konva node using the findAncestor method with a selector. This method returns the first matching ancestor node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in Konva.js\nDESCRIPTION: Shows how to set an attribute on a Konva node using the setAttr method. This example sets the x position of the node to 5.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation property of a Konva node, which affects how the node is composited with nodes beneath it during rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors in KonvaJS\nDESCRIPTION: Demonstrates how to retrieve and process all ancestors of a KonvaJS node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle of Shapes in Konva.js\nDESCRIPTION: Shows how to get the bounding rectangle of a shape without considering transformations and styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Width\nDESCRIPTION: Methods to set and get the width of the clipping region for a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);\n```\n\n----------------------------------------\n\nTITLE: Modifying Fill Radial Gradient End Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet illustrates how to get and set the fill radial gradient end point y in a Konva shape. It uses the fillRadialGradientEndPointY method to retrieve and modify the y-coordinate of the radial gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Linear Gradient End Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the stroke linear gradient's end point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor in Konva.js\nDESCRIPTION: Shows how to find a specific ancestor of a node based on a CSS-like selector. This method returns the first matching ancestor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Manipulating Konva Node Names in JavaScript\nDESCRIPTION: Demonstrates various operations on Konva node names, including adding, checking, and removing names. Names can be used like CSS classes for node selection and grouping.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of a Konva.js Node\nDESCRIPTION: Demonstrates how to get and set the absolute position of a node on the canvas, regardless of parent positioning or transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Y Offset in Konva.js\nDESCRIPTION: Example demonstrating how to set just the vertical (y) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Node in JavaScript\nDESCRIPTION: Constructor for creating a new Konva.Node instance. Nodes are the base entities in Konva that can be transformed, layered, and have bound events. This constructor is used by stage, layers, groups, and shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Node(config)\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient end point X in Konva.js\nDESCRIPTION: Shows how to get and set the X coordinate of the end point for a fill radial gradient in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Checking if Node is Visible on Screen in Konva.js\nDESCRIPTION: Demonstrates how to determine if a Konva node is currently visible in the user's viewport using the isClientRectOnScreen method, with optional margin settings for threshold adjustments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Calculating Client Rectangle for Konva Node in JavaScript\nDESCRIPTION: Demonstrates how to use the getClientRect method to calculate the bounding rectangle of a Konva.Rect node, both with and without applying transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern offset for a Konva.js shape, including separate methods for x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the absolute position of a Konva node on the canvas, regardless of parent transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in Konva.js\nDESCRIPTION: Shows how to set an attribute value for a Konva node using the setAttr method. This method accepts an attribute name and the value to set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern scale X value for a shape in Konva.js. This affects the horizontal scaling of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient End Point Y in JavaScript with Konva\nDESCRIPTION: Illustrates how to get and set the stroke linear gradient end point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient Start Point X in KonvaJS\nDESCRIPTION: Method for getting or setting the X-coordinate of the fill radial gradient's start point. Returns the current X value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Properties for Konva.Shape in JavaScript\nDESCRIPTION: Examples of getting and setting stroke color and width for a Konva.Shape object. It shows various ways to specify colors including string, hex, RGB, and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Skew in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the skew of a node using an object with x and y properties. Skew transforms affect the angular distortion of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node, taking into account rotations of all ancestor nodes. Returns the rotation in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Configuring preventDefault with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets whether default browser behavior should be prevented on pointer move or tap. This is useful when you need to enable native scrolling when trying to drag & drop a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Konva.js\nDESCRIPTION: Examples of binding and handling various events in Konva.js, including mouse events, touch events, and custom namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Opacity Management in KonvaJS\nDESCRIPTION: Examples of getting and setting node opacity values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in Konva.js\nDESCRIPTION: Example of how to clear the cached canvas for a node. This is useful when you need to update a node's appearance after changes that aren't automatically detected.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in Konva.js\nDESCRIPTION: Demonstrates various ways to fire events on a Konva.js node, including custom events and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Konva Node Position and Z-Index in JavaScript\nDESCRIPTION: Shows various methods for getting and setting a Konva node's position, including absolute position, relative position, and z-index within its parent container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get/set z-index\nvar index = node.zIndex();\nnode.zIndex(2);\n\n// get/set absolute position\nvar position = node.absolutePosition();\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n\n// get/set relative position\nvar position = node.position();\nnode.position({\n  x: 5,\n  y: 10\n});\n\n// get/set x and y separately\nvar x = node.x();\nnode.x(5);\nvar y = node.y();\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Properties in Konva.js\nDESCRIPTION: Demonstrates how to get and set radial gradient properties including start radius, end radius, and color stops for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Controlling Node Visibility in Konva.js\nDESCRIPTION: Example shows how to get and set the visible attribute on a Konva node, which determines whether the node is rendered in the scene.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Distance in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the drag distance for a node or globally. This controls how many pixels the pointer must move before a drag operation begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get and set stroke linear gradient color stops for a Konva shape. The example demonstrates creating a linear gradient for the stroke with three color stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the offset for a pattern fill, controlling its position relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting ID of Konva Nodes\nDESCRIPTION: Shows how to get and set the ID of a Konva node using the id method. The ID is a global identifier unique across the entire page.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stroke Linear Gradient End Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet illustrates how to get and set the stroke linear gradient end point y in a Konva shape. It uses the strokeLinearGradientEndPointY method to retrieve and modify the y-coordinate of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient End Point X in JavaScript with Konva\nDESCRIPTION: Shows how to retrieve and update the fill radial gradient end point x coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Rule in Konva.js\nDESCRIPTION: Methods to get and set the fill rule for shapes. This method accepts a CanvasFillRule value (like 'evenodd') as input and returns the current fill rule when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Setting Height in Konva.js\nDESCRIPTION: Shows how to get and set the height of a Konva node. This controls the vertical size of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Vue Component Logic for Interactive Shape Styling\nDESCRIPTION: Script section containing component data and methods for handling image loading and interactive shape styling events. Implements hover effects for colors, patterns, and gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/01-Fill.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      stageSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n      colorFill: 'red',\n      patternImage: null,\n      patternOffset: { x: -220, y: 70 },\n      linearGradientStops: [0, 'red', 1, 'yellow'],\n      radialGradientStops: [0, 'red', 0.5, 'yellow', 1, 'blue'],\n      images: {},\n    };\n  },\n  mounted() {\n    this.loadImages();\n  },\n  methods: {\n    loadImages() {\n      const sources = {\n        darthVader: 'https://konvajs.org/assets/darth-vader.jpg',\n        yoda: 'https://konvajs.org/assets/yoda.jpg',\n      };\n\n      Object.keys(sources).forEach((name) => {\n        const image = new Image();\n        image.onload = () => {\n          this.images[name] = image;\n          if (name === 'darthVader') {\n            this.patternImage = image;\n          }\n        };\n        image.src = sources[name];\n      });\n    },\n    onColorEnter(e) {\n      this.colorFill = 'blue';\n      e.target.getStage().container().style.cursor = 'pointer';\n    },\n    onColorLeave(e) {\n      this.colorFill = 'red';\n      e.target.getStage().container().style.cursor = 'default';\n    },\n    onPatternEnter(e) {\n      this.patternImage = this.images.yoda;\n      this.patternOffset = { x: -100, y: 70 };\n      e.target.getStage().container().style.cursor = 'pointer';\n    },\n    onPatternLeave(e) {\n      this.patternImage = this.images.darthVader;\n      this.patternOffset = { x: -220, y: 70 };\n      e.target.getStage().container().style.cursor = 'default';\n    },\n    onLinearGradientEnter(e) {\n      this.linearGradientStops = [0, 'green', 1, 'yellow'];\n      e.target.getStage().container().style.cursor = 'pointer';\n    },\n    onLinearGradientLeave(e) {\n      this.linearGradientStops = [0, 'red', 1, 'yellow'];\n      e.target.getStage().container().style.cursor = 'default';\n    },\n    onRadialGradientEnter(e) {\n      this.radialGradientStops = [0, 'red', 0.5, 'yellow', 1, 'green'];\n      e.target.getStage().container().style.cursor = 'pointer';\n    },\n    onRadialGradientLeave(e) {\n      this.radialGradientStops = [0, 'red', 0.5, 'yellow', 1, 'blue'];\n      e.target.getStage().container().style.cursor = 'default';\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Y Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the vertical shadow offset (y-axis) for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes in Konva.js\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, allowing the node to be reused later.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in Konva.js\nDESCRIPTION: Shows how to retrieve a specific attribute value from a Konva.js node using the 'getAttr' method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Managing Fill and Stroke Properties in Konva.js\nDESCRIPTION: Methods to control fill and stroke properties including pattern repeat, enabling/disabling features.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient End Point in KonvaJS\nDESCRIPTION: Shows how to get and set the end point for a linear gradient fill in KonvaJS shapes using x,y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Shape Properties in KonvaJS\nDESCRIPTION: Shows how to enable or disable various shape properties like fill, stroke, shadow, and dash.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listeners to Konva Node in JavaScript\nDESCRIPTION: Shows various ways to bind event listeners to a Konva node, including click events, touch events, and custom namespaced events. Also demonstrates how to access event information and handle event propagation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining hitFunc in Konva.js\nDESCRIPTION: Example demonstrating how to get and set a custom hit drawing function for creating custom hit areas for a shape in Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient end point Y in Konva.js\nDESCRIPTION: Shows how to get and set the Y coordinate of the end point for a fill radial gradient in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Pattern Settings in KonvaJS\nDESCRIPTION: Examples of configuring fill patterns including repeat behavior, offset, and scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Controlling Visibility of Konva.js Nodes\nDESCRIPTION: This code shows how to get and set the visible attribute of a Konva node. The visible property determines whether the node is rendered, while the isVisible() method can be used to check visibility considering parent nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternX in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the horizontal position of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position in KonvaJS\nDESCRIPTION: Shows how to get and set the position of a node relative to its parent using the position method, which takes an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Konva Nodes\nDESCRIPTION: Example showing how to completely remove and destroy a Konva node. This method will also destroy all children if the node is a container like Group, Stage, or Layer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Node Names in KonvaJS\nDESCRIPTION: Examples of adding, checking, and removing node names in KonvaJS. Shows how to manage multiple name values similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Between Containers in Konva.js\nDESCRIPTION: Shows how to move a node from its current container to a different container, which is useful for transferring elements between layers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in KonvaJS\nDESCRIPTION: Shows how to make a node draggable or non-draggable. This controls whether the node can be moved by mouse or touch interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Konva Nodes in JavaScript\nDESCRIPTION: Illustrates how to bind various events to Konva nodes, including click, touch, and custom events. Demonstrates event handling, propagation control, and accessing event information.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Browser Behavior in Konva.js\nDESCRIPTION: Examples of getting and setting the preventDefault property on a Konva shape. This controls whether browser's default behavior (like scrolling) is prevented during pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Skewing Node Properties in KonvaJS\nDESCRIPTION: Examples of getting and setting skew properties for KonvaJS nodes, including both individual axes and combined skew.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Between Containers in Konva.js\nDESCRIPTION: Demonstrates how to move a node from one container to another using the moveTo() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility of Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the visible attribute for a node. This controls whether the node is rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Z-Index in Konva.js\nDESCRIPTION: Shows how to get and set the z-index of a Konva.js node relative to its siblings. This affects the rendering order of nodes within the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Setting hitStrokeWidth in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the hitStrokeWidth property, which controls the stroke width for hit detection. Default is 'auto'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the name of a node, including the ability to assign multiple space-separated names similar to CSS classes for flexible node selection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Names and IDs in JavaScript\nDESCRIPTION: Illustrates methods for getting and setting names and IDs for Konva nodes. Names can be multiple (like CSS classes) while IDs are unique globally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Managing Visibility in Konva.js\nDESCRIPTION: Examples illustrating how to get and set the visible attribute of a Konva node. The visible attribute controls whether a node is rendered on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's width and height.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set just the Y component of the fill pattern scale for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Toggling Dash Enabled State in Konva.js\nDESCRIPTION: Shows how to check and toggle the dash enabled state of a shape. This allows enabling or disabling dashed stroke rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Skew X in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get the current skew X value of a node and how to set a new skew X value. This controls horizontal skewing of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle of Konva Node in JavaScript\nDESCRIPTION: Method to retrieve the client rectangle (x, y, width, height) of a Konva node, including all styling like strokes and shadows. This method is similar to the getBoundingClientRect API in the DOM and supports various configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set radial gradient color stops for a shape fill. The example creates a radial gradient transitioning from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone nodes and override properties in the process.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Animation in JavaScript\nDESCRIPTION: Constructor for creating a new Konva.Animation. It takes a configuration object with a function to be executed on each animation frame and optional layers to be redrawn.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Animation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Animation(config)\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Pattern Image in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern image for a shape. This allows using an image as a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Adjusting Blue Channel in Konva.js\nDESCRIPTION: Method to get or set the blue channel value for the Konva.Filters.RGB filter. It accepts an integer between 0 and 255 to adjust the blue component of the image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nblue(blue)\n```\n\n----------------------------------------\n\nTITLE: Node Movement and Rotation in Konva.js\nDESCRIPTION: Shows how to move and rotate Konva.js nodes relative to their current position and rotation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the shadow offset position as an object with x and y coordinates for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listening in Konva.js\nDESCRIPTION: Examples demonstrating how to get and set the listening attribute of a Konva node. The listening attribute determines whether a node responds to events, and affects whether it's included in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Finding Single Ancestor Using Selector in Konva.js\nDESCRIPTION: Shows how to find a specific ancestor that matches a class selector. This example retrieves the first parent with the class 'mygroup'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a node to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js\nDESCRIPTION: Demonstrates how to get and set shadow colors using different color formats including color strings, hex, RGB, and RGBA with opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in KonvaJS\nDESCRIPTION: Examples showing how to clone nodes and override properties during cloning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Konva.js\nDESCRIPTION: Example demonstrates how to make a Konva node draggable by setting the draggable property, allowing users to move the node with mouse or touch interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Animating Shape Position with Vanilla Konva.js\nDESCRIPTION: Creates a red circle and animates it horizontally in a sine wave pattern using Konva.Animation in vanilla JavaScript. The animation calculates the x-position based on time, amplitude and period to create smooth movement.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Moving.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: window.innerWidth,\nheight: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\nx: 50,\ny: window.innerHeight / 2,\nradius: 30,\nfill: 'red',\nstroke: 'black',\nstrokeWidth: 4,\n});\nlayer.add(circle);\n\nconst amplitude = 100;\nconst period = 2000; // in milliseconds\n\nconst anim = new Konva.Animation(function(frame) {\ncircle.x(\namplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\nwindow.innerWidth / 2\n);\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method. The method returns a boolean indicating whether the name exists.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation of a Konva.js node. This affects how the node is composited with other nodes during rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva Nodes\nDESCRIPTION: Shows how to remove names from a Konva node using the removeName method, which removes a specific name while preserving others.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Configuring hitStrokeWidth for Konva Shapes\nDESCRIPTION: Gets or sets the stroke width used for hit detection. Default value is \"auto\", which uses the same width as the visual stroke. Can be set to a specific number for custom hit areas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Ancestor in KonvaJS\nDESCRIPTION: Example showing how to find a specific ancestor node using a selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes in Konva.js\nDESCRIPTION: Shows how to move a node relative to its current position using the move() method with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer Width for Konva Tag\nDESCRIPTION: Sets the width of the pointer element for a Konva.Tag. This determines how wide the pointer triangle is at its base.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tag.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntag.pointerWidth(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset in Konva.js\nDESCRIPTION: Shows how to get or set the shadow offset as an object with x and y properties, controlling the position of the shadow relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Events with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates an interactive canvas with draggable stars that respond to custom drop events. Uses two layers to handle drag and drop operations, with visual feedback for different drag states.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/09_Drop_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nconst tempLayer = new Konva.Layer();\nstage.add(layer);\nstage.add(tempLayer);\n\nconst text = new Konva.Text({\n  fill: 'black',\n});\nlayer.add(text);\n\nlet previousShape;\n\n// create multiple stars\nfor (let i = 0; i < 10; i++) {\n  const star = new Konva.Star({\n    x: stage.width() * Math.random(),\n    y: stage.height() * Math.random(),\n    fill: 'blue',\n    numPoints: 10,\n    innerRadius: 20,\n    outerRadius: 25,\n    draggable: true,\n    name: 'star ' + i,\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n  });\n\n  star.on('dragstart', () => {\n    star.moveTo(tempLayer);\n    text.text('Moving ' + star.name());\n    layer.draw();\n  });\n\n  star.on('dragmove', (e) => {\n    const pos = stage.getPointerPosition();\n    const shape = layer.getIntersection(pos);\n\n    if (previousShape && shape) {\n      if (previousShape !== shape) {\n        previousShape.fire('dragleave', { evt: e.evt }, true);\n        shape.fire('dragenter', { evt: e.evt }, true);\n        previousShape = shape;\n      } else {\n        previousShape.fire('dragover', { evt: e.evt }, true);\n      }\n    } else if (!previousShape && shape) {\n      previousShape = shape;\n      shape.fire('dragenter', { evt: e.evt }, true);\n    } else if (previousShape && !shape) {\n      previousShape.fire('dragleave', { evt: e.evt }, true);\n      previousShape = undefined;\n    }\n    layer.draw();\n  });\n\n  star.on('dragend', (e) => {\n    const pos = stage.getPointerPosition();\n    const shape = layer.getIntersection(pos);\n    if (shape) {\n      previousShape.fire('drop', { evt: e.evt }, true);\n    }\n    previousShape = undefined;\n    star.moveTo(layer);\n    layer.draw();\n  });\n\n  star.on('dragenter', () => {\n    star.fill('green');\n    text.text('dragenter ' + star.name());\n    layer.draw();\n  });\n\n  star.on('dragleave', () => {\n    star.fill('blue');\n    text.text('dragleave ' + star.name());\n    layer.draw();\n  });\n\n  star.on('dragover', () => {\n    text.text('dragover ' + star.name());\n    layer.draw();\n  });\n\n  star.on('drop', () => {\n    star.fill('red');\n    text.text('drop ' + star.name());\n    layer.draw();\n  });\n\n  layer.add(star);\n}\n\nlayer.draw();\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing Functions with React-Konva\nDESCRIPTION: This React implementation showcases the same four easing functions using React-Konva components. It creates a Box component that uses refs to access and animate Konva nodes when mouse or touch events are triggered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Common_Easings.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Text } from 'react-konva';\nimport { useRef } from 'react';\n\nconst Box = ({ easing, y }) => {\n  const boxRef = useRef();\n\n  const handleMouseEnter = () => {\n    new Konva.Tween({\n      node: boxRef.current,\n      duration: 1,\n      x: window.innerWidth - 150,\n      easing: Konva.Easings[easing],\n    }).play();\n  };\n\n  const handleMouseLeave = () => {\n    new Konva.Tween({\n      node: boxRef.current,\n      duration: 1,\n      x: 50,\n      easing: Konva.Easings[easing],\n    }).play();\n  };\n\n  return (\n    <>\n      <Rect\n        ref={boxRef}\n        x={50}\n        y={y}\n        width={100}\n        height={50}\n        fill=\"#00D2FF\"\n        stroke=\"black\"\n        strokeWidth={4}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onTouchStart={handleMouseEnter}\n        onTouchEnd={handleMouseLeave}\n      />\n      <Text\n        x={160}\n        y={y + 15}\n        text={easing}\n        fontSize={16}\n        fontFamily=\"Calibri\"\n        fill=\"black\"\n      />\n    </>\n  );\n};\n\nconst App = () => {\n  const easings = ['Linear', 'EaseIn', 'EaseOut', 'EaseInOut'];\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {easings.map((easing, i) => (\n          <Box key={i} easing={easing} y={50 + i * 80} />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Offset in Konva.js\nDESCRIPTION: Shows how to set the shadow offset position relative to the shape using an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Shows how to get and set the name of a Konva node. Names can include multiple space-separated values, similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient End Point X in Konva.js\nDESCRIPTION: Shows how to get and set just the X component of the linear gradient stroke end point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient End Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the ending radius for a radial gradient fill in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Rotation in Konva Shapes (JavaScript)\nDESCRIPTION: This code demonstrates how to get and set the fill pattern rotation in degrees for a Konva shape. It uses the fillPatternRotation method to access and modify the rotation angle of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Clear Before Draw in JavaScript\nDESCRIPTION: Examples of getting and setting the clearBeforeDraw flag for a layer. This determines whether the layer is cleared before drawing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get clearBeforeDraw flag\nvar clearBeforeDraw = layer.clearBeforeDraw();\n\n// disable clear before draw\nlayer.clearBeforeDraw(false);\n\n// enable clear before draw\nlayer.clearBeforeDraw(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js Shapes\nDESCRIPTION: Shows various ways to get and set the fill color for a shape, including using color strings, hex values, RGB, and RGBA. Also demonstrates how to remove the fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in KonvaJS\nDESCRIPTION: Example showing how to get a node's absolute scale value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestor Nodes in Konva.js\nDESCRIPTION: Shows how to find ancestors of a node using selectors to locate specific parent nodes or groups in the hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Removing Node Names in Konva.js\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva.js node using the removeName method. This allows for dynamic manipulation of node names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable the stroke for a Konva shape without changing the stroke properties themselves.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Listening Attribute in Konva.js\nDESCRIPTION: Demonstrates how to get and set the listening attribute of a Konva.js node. This attribute determines whether the node responds to events and is included in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Composite Operation in Konva.js\nDESCRIPTION: Demonstrates how to set and get the globalCompositeOperation of a node. This affects how the node is blended with elements beneath it, though it doesn't affect the hit detection behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient end point as an object with x and y coordinates. This method accepts an object with x and y properties and returns the current end point object when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node considering ancestor rotations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Node Names in Konva.js\nDESCRIPTION: Demonstrates various operations on node names, including adding, checking, and removing names from a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Shows how to check if a Konva.js node has a specific name using the hasName method. This is useful for conditional logic based on node names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Moving Node Position in KonvaJS\nDESCRIPTION: Example showing how to move a node relative to its current position using x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation property for a Konva shape, which determines how the node is composited with elements beneath it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow offset for a Konva.js shape. The shadow offset can be set for both x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: Demonstrates how to use the getClientRect method to obtain the bounding rectangle of a Konva.js shape, with and without applying transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM to Canvas Drag & Drop with Vanilla JavaScript and Konva.js\nDESCRIPTION: Creates a Konva stage and enables drag and drop functionality for DOM images into the canvas. Handles drag events, calculates image dimensions, and makes dropped images draggable within the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Drop_DOM_Element.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\ndocument.getElementById('container').insertAdjacentHTML(\n  'beforebegin',\n  `\n  <p>Drag&drop yoda into the grey area.</p>\n  <div id=\"drag-items\">\n    <img src=\"https://konvajs.org/assets/yoda.jpg\" draggable=\"true\" style=\"height: 100px; margin: 5px;\" />\n    <img src=\"https://konvajs.org/assets/darth-vader.jpg\" draggable=\"true\" style=\"height: 100px; margin: 5px;\" />\n  </div>\n`\n);\n\ndocument.getElementById('container').style.backgroundColor = 'rgba(0, 0, 0, 0.1)';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height - 150,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nlet itemURL = '';\ndocument\n  .getElementById('drag-items')\n  .addEventListener('dragstart', function (e) {\n    itemURL = e.target.src;\n  });\n\nconst container = stage.container();\ncontainer.addEventListener('dragover', function (e) {\n  e.preventDefault();\n});\n\ncontainer.addEventListener('drop', function (e) {\n  e.preventDefault();\n  stage.setPointersPositions(e);\n  \n  Konva.Image.fromURL(itemURL, function (image) {\n    const img = image.image();\n    const maxDimension = 100;\n    let width = img.width;\n    let height = img.height;\n    \n    if (width > height) {\n      height = (height / width) * maxDimension;\n      width = maxDimension;\n    } else {\n      width = (width / height) * maxDimension;\n      height = maxDimension;\n    }\n    \n    image.size({\n      width: width,\n      height: height\n    });\n    \n    layer.add(image);\n    image.position(stage.getPointerPosition());\n    image.draggable(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Noise Amount in Konva.js\nDESCRIPTION: Method to get or set the noise amount for the Konva.Filters.Noise filter. It accepts a number between 0 and 1 to control the intensity of the noise effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\nnoise(noise)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Prevention in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the preventDefault attribute of a shape. By default, shapes prevent the browser's default behavior on pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOpacity in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the shadow opacity for a Konva shape, which must be a value between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the starting point for a linear gradient stroke. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Controlling Event Listening in KonvaJS\nDESCRIPTION: Demonstrates how to enable or disable event listening for a node. Nodes with listening set to false will not be detected in hit testing and will ignore events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Offset in Konva.js\nDESCRIPTION: Gets or sets the shadow offset which controls the position of the shadow relative to the shape. Positive values move the shadow right and down.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Touch Events with Vue and Konva.js\nDESCRIPTION: This Vue implementation demonstrates mobile touch events using vue-konva. It employs Vue's reactive system with ref and computed properties to handle state. The triangle tracks touch movement coordinates and the circle responds to touchstart and touchend events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Mobile_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" ref=\"stageRef\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-regular-polygon\n        :config=\"triangleConfig\"\n        @touchmove=\"handleTriangleTouch\"\n      />\n      <v-circle\n        :config=\"circleConfig\"\n        @touchstart=\"handleTouchStart\"\n        @touchend=\"handleTouchEnd\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst stageRef = ref(null);\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst triangleConfig = {\n  x: 80,\n  y: 120,\n  sides: 3,\n  radius: 80,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst circleConfig = {\n  x: 230,\n  y: 100,\n  radius: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleTriangleTouch = () => {\n  const touchPos = stageRef.value.getNode().getPointerPosition();\n  message.value = `x: ${touchPos.x}, y: ${touchPos.y}`;\n};\n\nconst handleTouchStart = () => {\n  message.value = 'touchstart circle';\n};\n\nconst handleTouchEnd = () => {\n  message.value = 'touchend circle';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting stroke linear gradient end point Y in Konva.js\nDESCRIPTION: Shows how to get and set the Y coordinate of the end point for a stroke linear gradient in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Offset for Konva Nodes\nDESCRIPTION: Shows how to get and set the vertical offset of a Konva node, which determines the origin point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Example of getting and setting a node's name. Names can be used like CSS classes with multiple names separated by spaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Calculating Client Rectangle for a Konva Node in JavaScript\nDESCRIPTION: Shows how to get the client rectangle of a Konva node, including all styling (strokes, shadows, etc.). Demonstrates the use of the getClientRect method with different configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Node Management in KonvaJS\nDESCRIPTION: Examples of removing and destroying nodes in KonvaJS.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// remove node\nnode.remove();\n\n// destroy node\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Configuring Anchor Drag Bounds in Konva Transformer\nDESCRIPTION: Demonstrates how to set custom dragging constraints for transformer anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar anchorDragBoundFunc = transformer.anchorDragBoundFunc();\n\n// set\ntransformer.anchorDragBoundFunc(function(oldAbsPos, newAbsPos, event) {\n return {\n  x: 0,\n  y: newAbsolutePosition.y\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Color for a Konva Shape\nDESCRIPTION: Shows various ways to get and set the stroke color of a shape, including using color strings, hex values, RGB, and RGBA with opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Managing Radial Gradient Radius in Konva.js\nDESCRIPTION: Examples showing how to get and set the start and end radii for radial gradients in Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in KonvaJS\nDESCRIPTION: Examples showing different ways to fire events on nodes, including custom events and bubbling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Konva\nDESCRIPTION: Example showing how to set multiple attributes at once for a Konva node using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Transforms in KonvaJS\nDESCRIPTION: Examples of getting and setting which transforms are enabled for a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Managing Visibility of Konva.js Nodes\nDESCRIPTION: Shows how to get and set the visible attribute of a Konva.js node. This attribute determines whether the node is rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Appearance Properties in JavaScript\nDESCRIPTION: Demonstrates how to set various appearance properties of a Konva node, including global composite operation, opacity, and rotation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// set global composite operation\nshape.globalCompositeOperation('source-in');\n\n// set opacity\nnode.opacity(0.5);\n\n// set rotation in degrees\nnode.rotation(45);\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting shadowColor in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the shadow color for a Konva shape using various color formats including strings, hex, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Node Removal in Konva.js\nDESCRIPTION: This snippet shows how to remove a node from its parent without destroying it, allowing it to be reused later.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Setting X Scale for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the horizontal (x) scale of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient End Point X in KonvaJS\nDESCRIPTION: Method for getting or setting the X-coordinate of the fill radial gradient's end point. Returns the current X value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Selector in Konva.js\nDESCRIPTION: Demonstrates how to find ancestors of a Konva.js node that match a given selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Controlling Node Visibility in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the visibility of a node. When a node is invisible, it and its children will not be rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Cached Canvas in KonvaJS\nDESCRIPTION: Demonstrates how to get and set filters that are applied to cached canvases. Multiple filters can be applied in sequence to create complex visual effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point in KonvaJS\nDESCRIPTION: Method to get or set the start point of a linear gradient fill. This defines where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Point Intersection with Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates how to check if a point intersects with a Konva.js Shape. This method is inherited from the base Shape class and can be performance-intensive.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// determines if point is in the shape\nvar intersects = shape.intersects({x: 100, y: 100});\n```\n\n----------------------------------------\n\nTITLE: Complex Gradient Animation with React-Konva\nDESCRIPTION: React implementation of a circle with gradient animation using react-konva. Uses useRef hook to manage circle instance and implements the same animation logic as the vanilla version.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/tweens/Complex_Tweening.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useRef } from 'react';\n\nconst App = () => {\n  const circleRef = useRef();\n\n  const handleClick = () => {\n    const circle = circleRef.current;\n\n    // using regular Konva tween\n    const tween = new Konva.Tween({\n      node: circle,\n      duration: 1,\n      scaleX: 1.5,\n      scaleY: 1.5,\n      easing: Konva.Easings.EaseInOut,\n      onFinish: () => {\n        // scale back with another tween\n        const tween2 = new Konva.Tween({\n          node: circle,\n          duration: 1,\n          scaleX: 1,\n          scaleY: 1,\n          easing: Konva.Easings.Bounce.EaseOut,\n        });\n        tween2.play();\n      },\n    });\n    tween.play();\n\n    // manually update gradient\n    let ratio = 0;\n    const anim = new Konva.Animation((frame) => {\n      ratio += frame.timeDiff / 1000;\n      if (ratio > 1) {\n        ratio = 0;\n      }\n      circle.fillLinearGradientColorStops([\n        0,\n        'red',\n        ratio,\n        'yellow',\n        1,\n        'blue',\n      ]);\n    }, circle.getLayer());\n    anim.start();\n    setTimeout(() => anim.stop(), 2000);\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle\n          ref={circleRef}\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radius={70}\n          fillLinearGradientStartPoint={{ x: -50, y: -50 }}\n          fillLinearGradientEndPoint={{ x: 50, y: 50 }}\n          fillLinearGradientColorStops={[0, 'red', 1, 'yellow']}\n          stroke=\"black\"\n          strokeWidth={4}\n          draggable\n          onClick={handleClick}\n          onTap={handleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Y Scale in Konva.js\nDESCRIPTION: Shows how to get and set just the y-axis scale of a node. This allows for vertical scaling without affecting horizontal dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set color stops for a radial gradient fill. This allows creating multi-color circular gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Basic Line Connection Example with Konva\nDESCRIPTION: Simple example showing how to connect two circle objects with a line that updates on drag\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Connected_Objects.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj1 = new Konva.Circle({ ...obj1Props })\nconst obj2= new Konva.Circle({ ...obj2Props });\n\nconst line = new Konva.Line({ ...lineProps });\n\nobj1.on('dragmove', updateLine);\nobj2.on('dragmove', updateLine);\n\nfunction updateLine() {\n  line.points([obj1.x(), obj1.y(), obj2.x(), obj2.y]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X component of the linear gradient fill start point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting hitFunc in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the hitFunc property of a Konva shape. This function is used to draw a custom hit area for the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Tension for Konva.Line in JavaScript\nDESCRIPTION: Demonstrates how to get and set the tension for a Konva.Line, which is inherited by Konva.Arrow. The tension method allows retrieving or setting the curvature of the line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get tension\nvar tension = line.tension();\n\n// set tension\nline.tension(3);\n```\n\n----------------------------------------\n\nTITLE: Managing Bezier Curve Settings in Konva.Line\nDESCRIPTION: Shows how to query and control whether a line uses bezier curve interpolation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get whether the line is a bezier\nvar isBezier = line.bezier();\n\n// set whether the line is a bezier\nline.bezier(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva.js Nodes\nDESCRIPTION: Shows how to set an attribute on a Konva node using the setAttr method. The example demonstrates setting the x coordinate to 5.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names with addName Method in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva node using the addName method. Names can be used for node selection and identification.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Relatively in Konva.js\nDESCRIPTION: Shows how to move a node by a relative amount from its current position using the move() method with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Relative Mouse Position in Vanilla Konva.js\nDESCRIPTION: This code demonstrates how to find the relative mouse position within a nested, transformed Konva.js structure using the getRelativePointerPosition() method. It creates a stage with transforms, a scaled and rotated layer, and a rotated group, then adds circles to the group based on click positions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Relative_Pointer_Position.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n  x: 20,\n  y: 50,\n});\n\nvar layer = new Konva.Layer({\n  scaleX: 1.2,\n  scaleY: 0.8,\n  rotation: 5,\n});\nstage.add(layer);\n\nvar group = new Konva.Group({\n  x: 30,\n  rotation: 10,\n  scaleX: 1.5,\n});\nlayer.add(group);\n\nvar text = new Konva.Text({\n  text: 'Click on the canvas to draw a circle',\n  fontSize: 20,\n});\ngroup.add(text);\n\nstage.on('click', function () {\n  var pos = group.getRelativePointerPosition();\n  var shape = new Konva.Circle({\n    x: pos.x,\n    y: pos.y,\n    fill: 'red',\n    radius: 20,\n  });\n\n  group.add(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Radial Gradient Points in Konva.js\nDESCRIPTION: Examples showing how to get and set radial gradient start/end points for fills. Shows point-based and individual coordinate manipulation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes in KonvaJS\nDESCRIPTION: Example showing how to move a node relative to its current position using x,y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Skew in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's skew properties for both x and y axes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: This snippet shows how to get the client rectangle of a node including all styling (strokes, shadows), similar to the DOM's getBoundingClientRect API. It demonstrates getting client rect with and without transformations applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Gradient End Radius in Konva.js\nDESCRIPTION: Shows how to get and set the fill radial gradient end radius for a shape, which defines the outer radius of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor with Konva.js\nDESCRIPTION: Demonstrates how to find a specific ancestor that matches a selector. This is useful for targeting a particular parent in the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node X Skew in Konva.js\nDESCRIPTION: Shows how to get and set just the x-axis skew of a node. This allows for horizontal shearing transformations without affecting vertical orientation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Getting Ancestors of a Konva Node\nDESCRIPTION: Example showing how to get all ancestors (parent containers) of a Konva node and iterate through them.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Y Scale for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the vertical (y) scale of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor in Konva.js\nDESCRIPTION: Demonstrates the findAncestor method which returns the first ancestor that matches a selector. This is useful when you need to find a specific parent node based on its class or other attributes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting IDs for Konva.js Nodes\nDESCRIPTION: Shows how to get and set the ID of a Konva node. IDs are global for the entire page and should be unique across all nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: Shows how to obtain the client rectangle of a Konva node. The example demonstrates getting the bounding box with and without applying transformations, which includes styling like strokes and shadows.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Applying Contrast Filter in Konva.js\nDESCRIPTION: Illustrates the application of a contrast filter to a Konva node. The node is cached, the contrast filter is added, and the contrast level is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Contrast]);\nnode.contrast(10);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern rotation in degrees for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Browser Behavior in Konva.js\nDESCRIPTION: Shows how to configure whether a shape should prevent the default browser behavior on pointer events. This can be useful when needing to enable native scrolling while interacting with nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Large Canvas with Konva in Vanilla JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a scrollable large canvas using Konva in vanilla JavaScript. It sets up the DOM structure, initializes the Konva stage, generates random circles, and handles scrolling by repositioning the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Scrolling.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// First we need to add required CSS\nconst style = document.createElement('style');\nstyle.textContent = `\n  #large-container {\n    width: 3000px;\n    height: 3000px;\n    overflow: hidden;\n  }\n\n  #scroll-container {\n    width: calc(100% - 22px);\n    height: calc(100vh - 22px);\n    overflow: auto;\n    margin: 10px;\n    border: 1px solid grey;\n  }\n`;\ndocument.head.appendChild(style);\n\n// Then create required DOM structure\nconst scrollContainer = document.createElement('div');\nscrollContainer.id = 'scroll-container';\nconst largeContainer = document.createElement('div');\nlargeContainer.id = 'large-container';\nconst container = document.createElement('div');\ncontainer.id = 'stage-container';\n\nscrollContainer.appendChild(largeContainer);\nlargeContainer.appendChild(container);\ndocument.body.appendChild(scrollContainer);\n\nconst WIDTH = 3000;\nconst HEIGHT = 3000;\nconst NUMBER = 200;\n\n// padding will increase the size of stage\n// so scrolling will look smoother\nconst PADDING = 200;\n\nconst stage = new Konva.Stage({\n  container: 'stage-container',\n  width: window.innerWidth + PADDING * 2,\n  height: window.innerHeight + PADDING * 2,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nfunction generateNode() {\n  return new Konva.Circle({\n    x: WIDTH * Math.random(),\n    y: HEIGHT * Math.random(),\n    radius: 50,\n    fill: 'red',\n    stroke: 'black',\n  });\n}\n\nfor (let i = 0; i < NUMBER; i++) {\n  layer.add(generateNode());\n}\n\nfunction repositionStage() {\n  const dx = scrollContainer.scrollLeft - PADDING;\n  const dy = scrollContainer.scrollTop - PADDING;\n  stage.container().style.transform =\n    'translate(' + dx + 'px, ' + dy + 'px)';\n  stage.x(-dx);\n  stage.y(-dy);\n}\nscrollContainer.addEventListener('scroll', repositionStage);\nrepositionStage();\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get and set fill radial gradient color stops for a shape in Konva.js. This allows creating complex radial gradients with multiple color transitions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js Shapes\nDESCRIPTION: Demonstrates various ways to get and set the shadow color of a Konva shape using different color formats including string names, hex codes, RGB, and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow X Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the horizontal shadow offset (x-axis) for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Rotation in JavaScript with Konva\nDESCRIPTION: Demonstrates how to retrieve and modify the fill pattern rotation in degrees using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Loading KonvaJS Stage from JSON using Vanilla JavaScript\nDESCRIPTION: This code demonstrates how to load a KonvaJS stage from a JSON string using the Konva.Node.create() method. The example creates a canvas with a red circle and attaches a click event that changes the circle's color to a random value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Simple_Load.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// JSON string from a previous save\nconst json = '{\"attrs\":{\"width\":400,\"height\":400},\"className\":\"Stage\",\"children\":[{\"attrs\":{},\"className\":\"Layer\",\"children\":[{\"attrs\":{\"x\":100,\"y\":100,\"radius\":50,\"fill\":\"red\",\"stroke\":\"black\",\"strokeWidth\":3},\"className\":\"Circle\"}]}]}';\n\n// create node using json string\nconst stage = Konva.Node.create(json, 'container');\n\n// you can keep adding events, etc\nconst circle = stage.findOne('Circle');\ncircle.on('click', () => {\n  circle.fill(Konva.Util.getRandomColor());\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Wedge Radius\nDESCRIPTION: Methods to get or set the radius of a wedge shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius\nvar radius = wedge.radius();\n\n// set radius\nwedge.radius(10);\n```\n\n----------------------------------------\n\nTITLE: Scaling Node in KonvaJS\nDESCRIPTION: Examples of getting and setting X and Y scale values for a node using scaleX() and scaleY() methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Height with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the height of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Skew for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the vertical (y) skew of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Between Containers in Konva.js\nDESCRIPTION: Demonstrates how to move a node from one container to another. This is useful for changing the parent of a node, such as moving between layers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node which takes into account its ancestor rotations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Initializing Rectangle Configurations\nDESCRIPTION: Sets up initial configuration for two draggable rectangles positioned relative to window dimensions with different colors and properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Limited_Drag_And_Resize.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrectangles: [\n  {\n    x: window.innerWidth / 2 - 60,\n    y: window.innerHeight / 2 - 60,\n    width: 50,\n    height: 50,\n    fill: 'red',\n    draggable: true,\n    id: 'rect1',\n    name: 'my-rect'\n  },\n  {\n    x: window.innerWidth / 2 + 10,\n    y: window.innerHeight / 2 + 10,\n    width: 50,\n    height: 50,\n    fill: 'green',\n    draggable: true,\n    id: 'rect2',\n    name: 'my-rect'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Konva.Container in JavaScript\nDESCRIPTION: Creates a new Konva.Container instance with the provided configuration options. Containers are used to contain nodes or other containers in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Container(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient End Point in KonvaJS\nDESCRIPTION: Method for getting or setting the end point (as an object with x and y coordinates) of the stroke linear gradient. Returns the current end point when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Hit Graph in JavaScript\nDESCRIPTION: Examples of getting and setting the hitGraphEnabled flag for a layer. This is deprecated and layer.listening(false) should be used instead. It affects mouse/touch event detection and draw performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get hitGraphEnabled flag\nvar hitGraphEnabled = layer.hitGraphEnabled();\n\n// disable hit graph\nlayer.hitGraphEnabled(false);\n\n// enable hit graph\nlayer.hitGraphEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes\nDESCRIPTION: Shows how to set a specific attribute on a Konva node using the setAttr method. This example sets the x-coordinate position to 5.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke in Konva.js\nDESCRIPTION: Shows how to configure whether fill should be applied after stroke, which can be useful for text objects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in KonvaJS\nDESCRIPTION: Shows how to get and set the y-axis scale of a fill pattern in KonvaJS shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern y-coordinate for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Toggling Shadow Enabled State in Konva.js\nDESCRIPTION: Demonstrates how to check and toggle the shadow enabled state of a shape. This allows enabling or disabling the shadow rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings from Konva Node in JavaScript\nDESCRIPTION: Method to remove event bindings from a Konva node. Supports removing multiple event types at once and using namespaces for targeted removal. Can remove all events in a specific namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern scale for a Konva.js shape. This controls the size of the pattern used for filling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring preventDefault Behavior in Konva.js\nDESCRIPTION: Shows how to get and set the preventDefault property of a Konva.js shape. This property controls whether the default browser behavior is prevented on pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Adding Skew to Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the skew property of a Konva node, affecting both x and y dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor in Konva.js\nDESCRIPTION: Shows how to find a specific parent node that matches a selector using the findAncestor method. This example looks for a parent with the CSS class '.mygroup'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Adding Child Nodes to Containers\nDESCRIPTION: Method to add one or multiple child nodes to a container, allowing for building hierarchical structures in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Drag Distance in Konva.js\nDESCRIPTION: Shows how to get and set the drag distance property of a Konva.js node or globally. The dragDistance method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Managing Skew Properties in KonvaJS\nDESCRIPTION: Shows how to get and set the skew property of a node, which creates a non-rectangular transformation. The example sets both X and Y skew values simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the fill pattern scale for a KonvaJS shape. The scale can be set for both x and y dimensions independently.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill radial gradient start radius for a shape, which defines the inner radius of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Quadratic Curve Drawing with KonvaJS in Vue\nDESCRIPTION: Defines the scene function for rendering a quadratic curve using KonvaJS canvas context. The function uses the canvas 2D context to draw a quadratic curve with specified start, control, and end points.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nctx.beginPath();\nctx.moveTo(quadPoints.start.x, quadPoints.start.y);\nctx.quadraticCurveTo(\n  quadPoints.control.x, quadPoints.control.y,\n  quadPoints.end.x, quadPoints.end.y\n);\nctx.fillStrokeShape(shape);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get the current linear gradient color stops and set new ones. This example creates a gradient that transitions from red to blue to green across the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in KonvaJS\nDESCRIPTION: Method to get or set the offset of a fill pattern. This controls the position of the pattern relative to the shape's origin.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node X Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the x-axis scale of a node. This allows for horizontal scaling without affecting vertical dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Hit Detection Function in Konva.js\nDESCRIPTION: Demonstrates how to get and set a custom hit detection drawing function for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient Start Point Y in JavaScript with Konva\nDESCRIPTION: Shows how to retrieve and update the fill linear gradient start point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of a pointer (mouse or touch) relative to a node's local coordinates when the node is positioned at a specific location and the user clicks elsewhere on the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadow opacity for a Konva Shape. The value must be between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Shape with Vanilla Konva.js\nDESCRIPTION: This code snippet demonstrates how to create a circle on an HTML5 canvas using vanilla Konva.js. It creates a stage, adds a layer, and then creates a red circle with a black stroke positioned in the center of the viewport.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Circle.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Skew in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's skew properties for both x and y dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layer Width in JavaScript\nDESCRIPTION: Example of getting the width of a layer. The getter returns the width of the stage, while the setter does nothing. To change the width, use stage.width(value) instead.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = layer.width();\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the rotation of a node in degrees, which rotates the node around its center point and affects its rendered appearance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get the current radial gradient color stops and set new ones. This example creates a gradient that transitions from red at the center to blue at halfway and green at the edge.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Bounds in KonvaJS\nDESCRIPTION: Demonstrates how to set custom bounds for drag and drop operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient End Radius in Konva.js\nDESCRIPTION: Shows how to get and set the fill radial gradient end radius for a Konva shape. This property controls where the outer radius of a radial gradient ends.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Visibility in Konva.js\nDESCRIPTION: Shows how to check if a node is visible in the current viewport.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern X in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern x-coordinate for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Width in Konva\nDESCRIPTION: Demonstrates how to retrieve the current stroke width of a shape and how to set it to a new value, which affects the thickness of the shape's outline.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Setting X Skew for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the horizontal (x) skew of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in Konva.js\nDESCRIPTION: Shows how to set an attribute on a Konva.js node using the setAttr method. This is a generic method for setting various node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Firing Events with Konva.js in JavaScript\nDESCRIPTION: Demonstrates different ways to fire events on a Konva node, including firing built-in events, custom events with custom data, and events that bubble up through the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Shadow in Konva.js\nDESCRIPTION: Shows how to check, enable, or disable the shadow of a Konva shape. When disabled, the shape will not render its shadow regardless of other shadow properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Color in Konva.js\nDESCRIPTION: Shows various ways to get and set the fill color for a Konva.js shape, including using color strings, hex codes, rgb, and rgba values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Setting Node ScaleY in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's scale on the y-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Creating TextPath with Vanilla JavaScript in Konva.js\nDESCRIPTION: This code demonstrates how to create a text that follows a curved path using Konva.js with vanilla JavaScript. It initializes a stage and layer, then creates a TextPath object with custom styling and a path defined by SVG path data.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/TextPath.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst textPath = new Konva.TextPath({\n  x: 0,\n  y: 50,\n  fill: '#333',\n  fontSize: 16,\n  fontFamily: 'Arial',\n  text: 'All the world\\'s a stage, and all the men and women merely players.',\n  data: 'M10,10 C0,0 10,150 100,100 S300,150 400,50',\n});\n\nlayer.add(textPath);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffsetX in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the horizontal shadow offset (x-coordinate) for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Applying Dash Pattern to Stroke in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set a dash array for the stroke of a Konva Shape, allowing for creation of dashed lines and complex stroke patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting preventDefault in Konva.js\nDESCRIPTION: Shows how to get and set the preventDefault property on a Konva shape. This property controls whether the shape will prevent default browser behavior on pointer events, which affects native scrolling when dragging elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Moving a Konva.js Node Relative to Current Position\nDESCRIPTION: Shows how to move a node by a specific amount relative to its current position. This method accepts an object containing x and y values that specify the distance to move.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the end point for a linear gradient fill. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Width in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke width for a shape in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting PreventDefault in Konva.js\nDESCRIPTION: Illustrates how to get and set the preventDefault property of a Konva.js shape. The preventDefault method can be used without parameters to retrieve the current value, or with a boolean parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in Konva.js\nDESCRIPTION: Shows how to get and set the line join style for shape strokes. Options include miter, round, or bevel, with miter being the default.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a blob using the toBlob method with async/await syntax. The method accepts configuration options and returns a Promise resolving to a Blob object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Node Using Selectors\nDESCRIPTION: Method to find the first node that matches the given selector. Works with id, name, node type, or custom function selectors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Shadow in Konva.js\nDESCRIPTION: Shows how to get the current shadow enabled state and how to enable or disable the shadow. When disabled, the shape will not display its shadow regardless of other shadow settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Image Filters with Vanilla JavaScript and KonvaJS\nDESCRIPTION: Creates an interactive image with adjustable filters using vanilla JavaScript and KonvaJS. Implements blur, brightness, and contrast filters with checkbox toggles and slider controls. Requires KonvaJS library and handles image loading with cross-origin support.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Multiple_Filters.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n  image.cache();\n\n  // Create controls container\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '20px';\n  container.style.left = '20px';\n  document.body.appendChild(container);\n\n  // Filter states\n  const filterStates = {\n    blur: false,\n    brightness: false,\n    contrast: false,\n  };\n\n  const filterValues = {\n    blur: 10,\n    brightness: 0.3,\n    contrast: 50,\n  };\n\n  // Create filter controls\n  const createFilterControl = (name, min, max, step, defaultValue) => {\n    const div = document.createElement('div');\n    div.style.marginBottom = '10px';\n    \n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.id = name;\n    checkbox.checked = filterStates[name];\n    \n    const label = document.createElement('label');\n    label.htmlFor = name;\n    label.textContent = ` ${name.charAt(0).toUpperCase() + name.slice(1)}: `;\n    \n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = min;\n    slider.max = max;\n    slider.step = step;\n    slider.value = defaultValue;\n    slider.style.width = '200px';\n    slider.disabled = !filterStates[name];\n    \n    div.appendChild(checkbox);\n    div.appendChild(label);\n    div.appendChild(slider);\n    \n    checkbox.addEventListener('change', (e) => {\n      filterStates[name] = e.target.checked;\n      slider.disabled = !e.target.checked;\n      updateFilters();\n    });\n    \n    slider.addEventListener('input', (e) => {\n      filterValues[name] = parseFloat(e.target.value);\n      updateFilters();\n    });\n    \n    return div;\n  };\n\n  // Add controls\n  container.appendChild(createFilterControl('blur', 0, 40, 1, filterValues.blur));\n  container.appendChild(createFilterControl('brightness', -1, 1, 0.1, filterValues.brightness));\n  container.appendChild(createFilterControl('contrast', -100, 100, 1, filterValues.contrast));\n\n  function updateFilters() {\n    const activeFilters = [];\n    \n    if (filterStates.blur) {\n      activeFilters.push(Konva.Filters.Blur);\n      image.blurRadius(filterValues.blur);\n    }\n    if (filterStates.brightness) {\n      activeFilters.push(Konva.Filters.Brighten);\n      image.brightness(filterValues.brightness);\n    }\n    if (filterStates.contrast) {\n      activeFilters.push(Konva.Filters.Contrast);\n      image.contrast(filterValues.contrast);\n    }\n    \n    image.filters(activeFilters);\n  }\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position of a Node in Konva.js\nDESCRIPTION: This code demonstrates how to get the absolute position of a node, either relative to the canvas or to a specific ancestor like the stage. The method returns the node's position considering all ancestor transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Skew in Konva Nodes\nDESCRIPTION: Demonstrates getting and setting the skew of a Konva node in both x and y dimensions. Skewing distorts the node along the specified axes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Z-Index in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's z-index relative to its siblings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Selectors in Konva.js\nDESCRIPTION: Shows how to use the findAncestors method to retrieve all ancestors of a node that match a specific selector. This is useful for traversing up the node hierarchy to find parent elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Methods to get and set the fill linear gradient start point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Konva Nodes\nDESCRIPTION: Example of getting and setting a node's position relative to its parent container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Shows how to get and set the fill priority in a Konva shape. Fill priority determines which type of fill (color, pattern, linear-gradient, or radial-gradient) takes precedence.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings in KonvaJS\nDESCRIPTION: Examples of removing event listeners from nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Node Positioning in KonvaJS\nDESCRIPTION: Demonstrates methods for handling node positioning, including relative pointer position and absolute positioning calculations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Names for Konva Nodes\nDESCRIPTION: Shows how to get and set names for Konva nodes, including setting multiple names similar to CSS classes for flexible node categorization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: Example showing how to get and set filters for a node. Filters are applied to cached canvases and can include effects like blur, sepia, and invert.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors in Konva.js\nDESCRIPTION: Examples showing how to find ancestor nodes using selectors\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Modifying Fill Radial Gradient Start Point X in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet shows how to get and set the fill radial gradient start point x in a Konva shape. It uses the fillRadialGradientStartPointX method to retrieve and modify the x-coordinate of the radial gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Cache Management in KonvaJS\nDESCRIPTION: Methods for managing node caching including clearing and setting up cache with various configurations\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Z-Index in Konva.js\nDESCRIPTION: Shows how to get and set the z-index of a Konva node relative to its siblings using the zIndex method. The z-index determines the stacking order of nodes within the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Pattern Rotation in Konva.js\nDESCRIPTION: Methods to get and set the fill pattern rotation in degrees. This method accepts a numeric value as input and returns the current rotation value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point X in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient start point X coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in Konva.js\nDESCRIPTION: Demonstrates how to clear the cached canvas for a Konva.js node, which can be useful for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Attribute Management in KonvaJS\nDESCRIPTION: Examples of getting and setting attributes on KonvaJS nodes, including individual and multiple attribute operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Kaleidoscope Filter with Vanilla JavaScript and KonvaJS\nDESCRIPTION: Creates an interactive canvas with a draggable image that has a kaleidoscope filter applied. Includes slider controls for adjusting the kaleidoscope power and angle properties. Uses Konva.Filters.Kaleidoscope and requires image caching.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Kaleidoscope.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true,\n  });\n\n  layer.add(image);\n\n  image.cache();\n  image.filters([Konva.Filters.Kaleidoscope]);\n  image.kaleidoscopePower(3);\n  image.kaleidoscopeAngle(0);\n\n  // create sliders\n  const createSlider = (label, min, max, defaultValue, property) => {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '20px';\n    \n    const text = document.createElement('span');\n    text.textContent = `${label}: `;\n    container.appendChild(text);\n    \n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = min;\n    slider.max = max;\n    slider.step = property === 'kaleidoscopePower' ? '1' : '0.1';\n    slider.value = defaultValue;\n    slider.style.width = '200px';\n    \n    slider.addEventListener('input', (e) => {\n      const value = parseFloat(e.target.value);\n      image[property](value);\n    });\n    \n    container.appendChild(slider);\n    return container;\n  };\n\n  const powerSlider = createSlider('Power', 2, 8, 3, 'kaleidoscopePower');\n  powerSlider.style.top = '20px';\n  document.body.appendChild(powerSlider);\n\n  const angleSlider = createSlider('Angle', 0, 360, 0, 'kaleidoscopeAngle');\n  angleSlider.style.top = '45px';\n  document.body.appendChild(angleSlider);\n};\nimageObj.src = 'https://konvajs.org/assets/lion.png';\nimageObj.crossOrigin = 'anonymous';\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Between Containers in Konva.js\nDESCRIPTION: Example demonstrating how to move a node from one container to another\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting Overdraw Behavior in Konva Transformer\nDESCRIPTION: Demonstrates how to configure whether the transformer should overdraw the whole area between attached nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar shouldOverdrawWholeArea = transformer.shouldOverdrawWholeArea();\n\n// set\ntransformer.shouldOverdrawWholeArea(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point Y in JavaScript with Konva\nDESCRIPTION: Illustrates how to get and set the stroke linear gradient start point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient Start Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This code illustrates how to get and set the fill radial gradient start point y in a Konva shape. It uses the fillRadialGradientStartPointY method to access and modify the y-coordinate of the radial gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Linear Gradient End Point in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet shows how to get and set the stroke linear gradient end point in a Konva shape. It uses the strokeLinearGradientEndPoint method to retrieve and modify both x and y coordinates of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js\nDESCRIPTION: Shows how to get or set the fill color for a shape using various color formats including color strings, hex, RGB, and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Cache Management\nDESCRIPTION: Example showing how to clear the cached canvas for a node. Returns the Konva.Node instance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Disabling Perfect Drawing for a Konva Shape\nDESCRIPTION: This snippet shows how to disable perfect drawing for a Konva shape. Perfect drawing is a feature that fixes unexpected rendering issues with opacity, but it can impact performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Disable_Perfect_Draw.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nshape.perfectDrawEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Skew in Konva\nDESCRIPTION: Shows how to get and set just the x-axis skew of a Konva node. This creates a horizontal shearing effect on the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Linear Gradient Start Point Y\nDESCRIPTION: Methods to get and set the linear gradient start point Y coordinate for both fill and stroke properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transforms in Konva.js\nDESCRIPTION: This snippet shows how to control which transforms are enabled on a Konva node. Setting transforms to 'position' can improve drawing performance by limiting transformations, while 'all' enables all transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Offset in Konva.js\nDESCRIPTION: Example showing how to set the shadow offset as an object with x and y coordinates. This determines the shadow's position relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale Y in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the vertical scale factor of a node using the scaleY method. This property affects the height of the rendered node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to use the findAncestors method to retrieve all parent Group nodes for a given Konva node. This is useful for traversing up the node hierarchy to find specific types of containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node into a Blob object using async/await pattern. This can be useful for saving or processing the node data.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Linear Gradient End Point X in KonvaJS\nDESCRIPTION: Method for getting or setting the X-coordinate of the stroke linear gradient's end point. Returns the current X value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Threshold in Konva.js\nDESCRIPTION: Method to get or set the threshold value for the Konva.Filters.Threshold or Konva.Filters.Mask filters. It accepts a number between 0 and 1 to control the threshold effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\nthreshold(threshold)\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Boundaries in Konva.js\nDESCRIPTION: Example showing how to get and set drag boundaries for a node using a custom function that overrides the default drag and drop positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying a Node in Konva.js\nDESCRIPTION: Demonstrates how to completely remove and destroy a node, including all its children if it's a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Size for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the size (width and height) of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings from Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates how to remove event bindings from a Konva node. Shows examples of removing single events, multiple events, and events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Size of Konva.js Nodes\nDESCRIPTION: Shows how to get and set the size of a Konva.js node, including both width and height properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Linear Gradient End Point Y in JavaScript with Konva\nDESCRIPTION: Shows how to retrieve and update the fill linear gradient end point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set stroke linear gradient color stops for a shape in Konva.js. The method allows creating a linear gradient with multiple color stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient Start Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the fill linear gradient's start point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point Y in Konva Shapes (JavaScript)\nDESCRIPTION: This code shows how to get and set the fill linear gradient end point y in a Konva shape. It uses the fillLinearGradientEndPointY method to access and modify the y-coordinate of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting the Self Rectangle of a Shape in Konva\nDESCRIPTION: Shows how to retrieve the bounding rectangle of a shape without taking into account any transformations or styles, with examples for rectangle and circle shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Modifying Stroke Linear Gradient End Point X in JavaScript\nDESCRIPTION: Demonstrates how to retrieve and set the stroke linear gradient end point x coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva.js Node to Canvas\nDESCRIPTION: Shows how to convert a node into a canvas element. This method allows for creating a visual representation of the node as a canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Selecting and Animating Shapes by Type in Konva.js (Vanilla JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a Konva stage, add different shapes, and then select and animate circles using the find() method. It creates two circles and a rectangle, then applies a scale animation to only the circles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Type.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// create shapes of different types\nconst circle1 = new Konva.Circle({\n  x: 50,\n  y: stage.height() / 2,\n  radius: 30,\n  fill: 'red'\n});\n\nconst circle2 = new Konva.Circle({\n  x: 150,\n  y: stage.height() / 2,\n  radius: 30,\n  fill: 'green'\n});\n\nconst rect = new Konva.Rect({\n  x: 250,\n  y: stage.height() / 2 - 25,\n  width: 50,\n  height: 50,\n  fill: 'blue'\n});\n\nlayer.add(circle1);\nlayer.add(circle2);\nlayer.add(rect);\n\n// find all circles by type\nconst circles = layer.find('Circle');\ncircles.forEach(circle => {\n  // add animation to circles only\n  circle.to({\n    duration: 1,\n    scale: { x: 1.5, y: 1.5 },\n    easing: Konva.Easings.EaseInOut\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Absolute Position in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute position of a node in Konva.js, either relative to the canvas or to a specific ancestor node like stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Y Position in Konva.js\nDESCRIPTION: Example showing how to get and set the y-coordinate of a fill pattern. This affects the vertical positioning of pattern images.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Using addName Method in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva node. Names function similarly to CSS classes, allowing multiple name values to be assigned to a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Selectors in Konva.js\nDESCRIPTION: Shows how to find all ancestors of a node that match a given selector. This helps navigate the node hierarchy and find specific parent elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Animating Node with Tween in KonvaJS\nDESCRIPTION: Example of using the tween functionality to animate node properties over time.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Listening Attribute in Konva.js\nDESCRIPTION: Shows how to get and set the listening attribute of a Konva.js node. The listening method can be used without parameters to retrieve the current value, or with a boolean parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Rotating and Scaling Konva Nodes in JavaScript\nDESCRIPTION: Shows how to get and set rotation (in degrees) and scale for Konva nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient start point X coordinate for a shape in Konva.js. This affects the horizontal starting position of the stroke's gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Scale in Konva.js\nDESCRIPTION: Shows how to get and set the scale of a Konva.js node. Scale can be set for both x and y axes independently.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in Konva.js\nDESCRIPTION: Demonstrates how to get and set the size of a Konva node. The size method allows retrieving the current dimensions or setting new width and height values in a single operation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Examples of how to get and set the y-coordinate of the end point for a linear gradient stroke. This controls the vertical component of the stroke gradient's direction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Scaling Konva Nodes\nDESCRIPTION: Shows how to get and set the scale of a Konva node in both x and y dimensions. Scaling affects the size of the node relative to its original dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point X in Konva.js\nDESCRIPTION: Method to get or set the x-coordinate of the end point for a linear gradient stroke. Takes a numerical parameter and returns a number representing the x-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node into an image asynchronously. This is commonly used to cache complex drawings as an image to improve performance by reducing redrawing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Enhance Filter in Konva.js\nDESCRIPTION: Shows how to apply an enhance filter to a Konva node. The node is cached, the enhance filter is added, and the enhance level is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Enhance]);\nnode.enhance(0.4);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Browser Behavior in Konva.js\nDESCRIPTION: Example showing how to get and set the preventDefault attribute for a shape. This controls whether the browser's default behavior is prevented during pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings in KonvaJS\nDESCRIPTION: Demonstrates how to remove event bindings from KonvaJS nodes using the off() method, including removing specific events, multiple events, or events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Listening State in KonvaJS\nDESCRIPTION: Examples of getting and setting whether a node listens for events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Opacity in JavaScript\nDESCRIPTION: Demonstrates how to get and set the opacity of a Konva node, with values ranging from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Radial Gradient Start Point in JavaScript\nDESCRIPTION: Demonstrates how to get and set the fill radial gradient start point for a Konva shape. The start point is specified as an object with x and y coordinates. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node which takes into account its ancestor scales.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Fill in Konva.js\nDESCRIPTION: Demonstrates how to get the current fill enabled state and how to enable or disable fill on a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get and set the opacity of a Konva node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in KonvaJS\nDESCRIPTION: Example showing how to get pointer position relative to a rectangle node's local coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors in KonvaJS\nDESCRIPTION: Example of retrieving all ancestors of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Manipulating Shadow Enabled Flag in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow enabled flag for a Konva.js shape. This method allows toggling shadow effects on and off for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Name of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the name of a Konva node using the name method. Names can include multiple space-separated values, similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Konva.js\nDESCRIPTION: This snippet demonstrates how to set multiple attributes at once on a node using an object literal in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y component of the linear gradient fill end point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Pattern Properties in JavaScript with Konva\nDESCRIPTION: Illustrates how to set and get fill pattern properties such as repeat, offset, and scale for a Konva shape. It covers various repeat options and shows how to adjust pattern positioning and size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Bezier Flag for Konva.Line in JavaScript\nDESCRIPTION: Shows how to get and set the bezier flag for a Konva.Line, which is inherited by Konva.Arrow. The bezier method allows retrieving or setting whether the line is a bezier curve.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get whether the line is a bezier\nvar isBezier = line.bezier();\n\n// set whether the line is a bezier\nline.bezier(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in Konva.js\nDESCRIPTION: Shows how to get and set the line join style for shape strokes. Can be 'miter', 'round', or 'bevel', with 'miter' being the default value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Skew Y in Konva.js\nDESCRIPTION: Shows how to get and set the skew y property of a Konva.js node. The skewY method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke in Konva.js\nDESCRIPTION: Shows how to get the current stroke enabled state and how to enable or disable the stroke. When disabled, the shape will not display its stroke regardless of other stroke settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Radial Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the fill radial gradient start point for a Konva.js shape. The start point is defined by x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position of Node in Konva.js\nDESCRIPTION: Shows how to get or set just the y coordinate of a node's position using the y method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Boundaries in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get and set a drag bound function for a node. This function is used to constrain a node's position during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Konva.js Node Relatively\nDESCRIPTION: Shows how to move a node by a relative amount from its current position using the move method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation of a Konva.js Node\nDESCRIPTION: Demonstrates how to get and set the rotation of a node in degrees. Rotation is applied around the node's origin point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from Konva Node in JavaScript\nDESCRIPTION: Demonstrates how to remove event listeners from a Konva node, including removing specific events, multiple events, and namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in KonvaJS\nDESCRIPTION: Example of clearing the cached canvas for a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor in Konva.js\nDESCRIPTION: Shows how to find a specific ancestor of a Konva.js node using the findAncestor method and a CSS-like selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternImage in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the fillPatternImage property of a Konva shape. This property defines an image to be used as a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Implementing Transform Events with Vue Konva\nDESCRIPTION: This snippet shows how to implement transform events using Vue Konva components. It uses Vue 3's Composition API with ref and onMounted hooks to reference and connect the rectangle and transformer components, and attaches event handlers in the template.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/06_Transform_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n        @transformstart=\"() => console.log('rect transform start')\"\n        @transform=\"() => console.log('rect transforming')\"\n        @transformend=\"() => console.log('rect transform end')\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n        @transformstart=\"() => console.log('transform start')\"\n        @transform=\"() => console.log('transforming')\"\n        @transformend=\"() => console.log('transform end')\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pointer at Beginning in JavaScript\nDESCRIPTION: Demonstrates how to get and set whether the pointer should be displayed at the beginning of the arrow. The pointerAtBeginning method allows retrieving or setting this property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get value\nvar pointerAtBeginning = line.pointerAtBeginning();\n\n// set value\nline.pointerAtBeginning(true);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOpacity in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadowOpacity property of a Konva shape. This property defines the opacity of the shadow, with values between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Linear Gradient Start Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the stroke linear gradient's start point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Scale Enabled Flag in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke scale enabled flag for a Konva.js shape. This controls whether the stroke width scales with the shape's transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Offset X in KonvaJS\nDESCRIPTION: Shows how to get and set the horizontal offset of a node, which affects the node's position relative to its defined coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Emboss Direction in Konva.js\nDESCRIPTION: Method to get or set the emboss direction for the Konva.Filters.Emboss filter. The direction can be set to various positions like top-left, top, top-right, etc.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nembossDirection(embossDirection)\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes in KonvaJS\nDESCRIPTION: Examples of caching nodes to improve drawing performance. Shows different ways to cache shapes with custom bounding boxes and debugging options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Oscillating Blobs with Vanilla JavaScript and Konva.js\nDESCRIPTION: This snippet demonstrates how to create interactive, animated blobs using Konva.js in vanilla JavaScript. It generates 6 draggable blobs with random positions, colors, and opacities, and applies a sinusoidal animation to their tension property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Quantum_Squiggle.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\nvar layer = new Konva.Layer();\nvar colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple'];\nvar blobs = [];\n\n// create 6 blobs\nfor (var n = 0; n < 6; n++) {\n  // build array of random points\n  var points = [];\n  for (var i = 0; i < 5; i++) {\n    points.push(stage.width() * Math.random());\n    points.push(height * Math.random());\n  }\n\n  var blob = new Konva.Line({\n    points: points,\n    fill: colors[n],\n    stroke: 'black',\n    strokeWidth: 2,\n    tension: 0,\n    opacity: Math.random(),\n    draggable: true,\n    closed: true,\n  });\n\n  layer.add(blob);\n  blobs.push(blob);\n}\n\nstage.add(layer);\n\nvar period = 2000;\nvar centerTension = 0;\nvar amplitude = 1;\n\nvar anim = new Konva.Animation(function (frame) {\n  for (var n = 0; n < blobs.length; n++) {\n    blobs[n].tension(\n      amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n        centerTension\n    );\n  }\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Node ID in Konva.js\nDESCRIPTION: Example showing how to get and set the ID property of a Konva node. The ID is global for the whole page.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Moving a Konva.js Node to Another Container\nDESCRIPTION: Demonstrates how to move a node from its current container to a new container using the moveTo method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties with Tweens in Konva.js\nDESCRIPTION: Demonstrates how to animate node properties using the to() method for tweening.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Perfect Draw for Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates how to enable or disable perfect draw for a Konva.js Shape. This can improve performance for shapes with fill, stroke, and opacity. The default value is true. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Position in Konva.js\nDESCRIPTION: Examples of setting absolute and relative positions for Konva nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point in Konva.js\nDESCRIPTION: Method to get or set the end point for a radial gradient fill. Takes an object with x and y coordinates and returns an object with the same properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Rect in JavaScript\nDESCRIPTION: Constructor for creating a new Konva.Rect instance. It accepts a configuration object with various properties to define the rectangle's appearance and behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Rect(config)\n```\n\n----------------------------------------\n\nTITLE: Enabling Ellipsis for Konva.js Text in JavaScript\nDESCRIPTION: Demonstrates how to enable or disable ellipsis for a Konva.js Text shape when text exceeds the available space. Only works when both width and height are limited.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get ellipsis param, returns true or false\nvar ellipsis = text.ellipsis();\n\n// set ellipsis\ntext.ellipsis(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Ellipse Y Radius in Konva.js\nDESCRIPTION: Shows how to get or set just the y-radius of an ellipse shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius y\nvar radiusY = ellipse.radiusY();\n\n// set radius y\nellipse.radiusY(200);\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Cap in Konva.js\nDESCRIPTION: Demonstrates getting and setting the line cap property for a shape. The line cap can be 'butt', 'round', or 'square'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Scale in Konva.js\nDESCRIPTION: Example of getting and setting a node's scale on the y-axis only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Transforms with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets which transforms are enabled. Options are \"all\", \"none\", or \"position\". Setting to \"position\" can improve draw performance by limiting the transforms that are calculated.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Fill in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable the fill for a Konva shape without changing the fill properties themselves.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node IDs in Konva\nDESCRIPTION: Shows how to get and set the ID of a Konva node. The ID is global for the entire page and should be unique across all nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listening in Konva.js\nDESCRIPTION: Example showing how to get and set the listening attribute for a node. This determines whether the node will detect events and appear in hit testing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Visibility in Konva.js\nDESCRIPTION: Examples showing how to check and modify the visibility state of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Accessing Label Text Properties\nDESCRIPTION: Demonstrates how to access and modify the Text shape properties of a Label instance. The getText() method returns the Text shape which can then be modified with various text properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Label.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlabel.getText().fill('red')\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in Konva.js\nDESCRIPTION: Example of setting attributes on a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Name of a Konva.js Node\nDESCRIPTION: Demonstrates how to get and set the name of a node. A node can have multiple space-separated names, similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of a Konva.js Node\nDESCRIPTION: Shows how to get and set a node's position relative to its parent. This is the standard positioning method for most Konva.js applications.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Strong Easing Functions in Konva.js\nDESCRIPTION: Enhanced easing functions with more pronounced effects. Includes StrongEaseIn(), StrongEaseOut(), and StrongEaseInOut() variations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nStrongEaseIn()\nStrongEaseOut()\nStrongEaseInOut()\n```\n\n----------------------------------------\n\nTITLE: Creating a Konva.Star Instance\nDESCRIPTION: Basic syntax for creating a new Star instance in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Star(config)\n```\n\n----------------------------------------\n\nTITLE: Scaling Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the scale property of a Konva node, which affects both x and y dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in KonvaJS\nDESCRIPTION: Example showing how to convert a node to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Events with Vue in Konva.js\nDESCRIPTION: This snippet demonstrates how to create a Konva.js stage with a triangle that responds to pointer events using Vue 3 composition API. It uses refs and computed properties to manage the component's state and configuration.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Pointer_Events.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" ref=\"stageRef\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-regular-polygon\n        :config=\"triangleConfig\"\n        @pointermove=\"handlePointerMove\"\n        @pointerout=\"handlePointerOut\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst stageRef = ref(null);\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst triangleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  sides: 3,\n  radius: 80,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handlePointerMove = () => {\n  const pos = stageRef.value.getNode().getPointerPosition();\n  message.value = `x: ${pos.x}, y: ${pos.y}`;\n};\n\nconst handlePointerOut = () => {\n  message.value = '';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamically importing svelte-konva component with onMount\nDESCRIPTION: A pattern for dynamically importing svelte-konva components inside onMount() to avoid SSR issues. The component is only loaded client-side after the component is mounted to the DOM.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/SvelteKit.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { onMount } from 'svelte';\n  // typescript:\n  // import type MyCanvasComponent from '$lib/MyCanvas.svelte';\n\n  let MyCanvas;\n  // typescript:\n  // let MyCanvas: typeof MyCanvasComponent;\n\n  onMount(async () => {\n    // Dynamically import your canvas component encapsulating all svelte-konva functionality inside onMount()\n    MyCanvas = (await import('$lib/MyCanvas.svelte')).default;\n  });\n</script>\n\n<div>\n  <p>This is my fancy server side rendered (or prerendered) page.</p>\n\n  <!-- Use your dynamically imported svelte-konva canvas component with a svelte:component block, you can pass any component props as usual -->\n  <svelte:component this={MyCanvas} someProp=\"SomeString\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke Scale in Konva.js\nDESCRIPTION: Shows how to get and set the stroke scale enabled flag. When enabled, the stroke width will scale based on the shape's scale; when disabled, the stroke width remains constant regardless of scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in JavaScript with Konva\nDESCRIPTION: Demonstrates how to get and set stroke linear gradient color stops for a Konva shape. The example shows creating a gradient that transitions from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Applying Threshold Filter to Image with Konva.js and Vue.js\nDESCRIPTION: This snippet shows how to apply a threshold filter to an image using Konva.js in a Vue.js application. It uses the vue-konva library and Vue 3 composition API to manage reactivity and component logic.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Threshold.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Threshold],\n            threshold: threshold,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"1\"\n      step=\"0.1\"\n      :value=\"threshold\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst threshold = ref(0.5);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  threshold.value = parseFloat(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Anchor Styles in Konva Transformer\nDESCRIPTION: Shows how to customize the appearance of transformer anchors using a style function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar anchorStyleFunc = transformer.anchorStyleFunc();\n\n// set\ntransformer.anchorStyleFunc(function(anchor) {\n // anchor is a simple Konva.Rect instance\n // it will be executed AFTER all attributes are set, like 'anchorStrokeWidth' or 'anchorFill'\n if (anchor.hasName('.rotater')) {\n   // make rotater anchor filled black and looks like a circle\n   anchor.fill('black');\n   anchor.cornerRadius(anchor.width() / 2);\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Example of checking if a Konva node has a specific name using the hasName method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow X Offset in Konva.js\nDESCRIPTION: Gets or sets the shadow's horizontal offset. Positive values move the shadow to the right, negative values move it to the left.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Linear Gradient Start Point X in JavaScript with Konva\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient start point x coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in KonvaJS\nDESCRIPTION: Shows how to set attributes for a Konva node using the setAttr method, which takes an attribute name and value as parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Cached Konva.js Canvases\nDESCRIPTION: Illustrates how to get and set filters for a Konva.js node. Filters are applied to cached canvases and can include multiple effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Width in KonvaJS\nDESCRIPTION: Shows how to get and set the width of a node. This directly affects the rendered size of the node on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Managing Y-Coordinate in Konva\nDESCRIPTION: Shows how to get and set the y-coordinate of a Konva node. This method provides a shorthand for accessing just the y position property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Rule in Konva.js\nDESCRIPTION: Examples of how to set and get the fill rule for a shape. The fill rule determines how to fill shapes with complex paths, such as self-intersecting paths, with 'evenodd' being one option.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position of Konva Nodes\nDESCRIPTION: Shows how to get and set just the y coordinate of a Konva node using the y method. This affects the vertical position of the node relative to its parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Node Name in Konva.js\nDESCRIPTION: Example showing how to get and set the name property of a Konva node. Node names can be single values or multiple names separated by spaces (similar to CSS classes).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Managing Node Visibility in KonvaJS\nDESCRIPTION: Shows how to get and set a node's visibility state.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Moving Node Between Containers in KonvaJS\nDESCRIPTION: Example demonstrating how to move a node from one container to another.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting hitFunc in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the hitFunc, which is a custom function used specifically for drawing the hit detection area of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in KonvaJS\nDESCRIPTION: Example of retrieving a specific attribute from a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Applying RGB Filter in Konva.js\nDESCRIPTION: Shows how to apply an RGB filter to a Konva node. The node is cached, the RGB filter is added, and individual color channels are adjusted.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.RGB]);\nnode.blue(120);\nnode.green(200);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in KonvaJS\nDESCRIPTION: Shows how to set multiple attributes at once using an object literal with the setAttrs method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set just the Y scale for a pattern fill, controlling its vertical size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Managing Width in Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the width of a Konva node. This affects the node's dimensions on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation and Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get and set the global composite operation and opacity of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Rule in JavaScript with Konva\nDESCRIPTION: Shows how to get and set the fill rule using Konva Shape methods. The fill rule can be set to 'evenodd' or other valid CanvasFillRule values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Setting lineCap in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the lineCap property, which controls how line ends are drawn. Options are butt, round, or square.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Scene Drawing Function in Konva.js\nDESCRIPTION: Shows how to get and set a custom scene drawing function for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Copying a Konva.Transform Object\nDESCRIPTION: Demonstrates how to create a copy of an existing Transform object from a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transform.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tr = shape.getTransform().copy()\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Example of converting a Konva node into a blob using the toBlob method with async/await.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Behavior in Konva.js\nDESCRIPTION: Shows how to get and set the draggable flag for a Konva.js node. This determines whether the node can be moved by drag and drop operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings in Konva.js\nDESCRIPTION: This snippet demonstrates how to remove event bindings from nodes in Konva.js. It shows removing a single event, multiple events, or events by namespace.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Names in JavaScript\nDESCRIPTION: Illustrates methods for adding, checking, and removing names from a Konva node. Names can be used like CSS classes for node selection and grouping.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors of a Konva.js Node\nDESCRIPTION: Shows how to find all ancestors of a node that match a given selector using the findAncestors method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names with hasName Method in Konva.js\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method, which returns a boolean indicating if the name is present.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Skew in Konva.js\nDESCRIPTION: Demonstrates how to get and set the vertical skew (skewY) of a Konva node. This affects the vertical shearing of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Z-Index in Konva\nDESCRIPTION: Shows how to get and set the z-index of a Konva node relative to its siblings. The z-index determines the stacking order of nodes that share the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Client Rectangle Calculation in KonvaJS\nDESCRIPTION: Example of getting client rectangle dimensions with various transformation options\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Configuring fill in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the fill property of a Konva shape. This property defines the fill color of the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes in Konva.js\nDESCRIPTION: Demonstrates how to set multiple attributes at once for Konva nodes using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X and Y Coordinates in Konva.js\nDESCRIPTION: Shows how to get and set individual x and y coordinates of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a Blob object which can be used for file operations. The method is asynchronous and returns a Promise.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Managing Opacity in Konva.js\nDESCRIPTION: Shows how to get and set the opacity of a Konva node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors with Selectors in Konva.js\nDESCRIPTION: Demonstrates how to find all ancestors of a node that match a given selector. This is useful for traversing up the node hierarchy to find specific parent elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the offset of a fill pattern in a Konva shape. The offset controls the position of the pattern relative to the shape's origin.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Offset Y in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the offset Y value of a node. The offset Y affects the vertical position of the node relative to its transform point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Moving Konva.js Node Relatively\nDESCRIPTION: Shows how to move a node by a specific amount relative to its current position. The method accepts an object with x and y properties that specify the distance to move.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in KonvaJS\nDESCRIPTION: Shows how to retrieve a specific attribute from a KonvaJS node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Managing Node zIndex in Konva.js\nDESCRIPTION: Shows how to get or set a node's zIndex relative to its siblings with the same parent using the zIndex method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in KonvaJS\nDESCRIPTION: Shows how to get and set both width and height of a node simultaneously using the size method. This is a convenience method for setting both dimensions at once.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Shadow in Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates how to check if a Konva.js Shape has a shadow. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// returns whether or not a shadow will be rendered\nvar hasShadow = shape.hasShadow();\n```\n\n----------------------------------------\n\nTITLE: Exporting Konva Canvas to PDF using jsPDF\nDESCRIPTION: This snippet demonstrates how to add a Konva stage as an image to a PDF document using jsPDF library. It captures the stage as a data URL with increased pixel ratio for better quality, positions it at the top of the PDF, and saves the document. If jsPDF isn't available, it shows an error message.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_to_PDF.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Then put image on top of texts (so texts are not visible)\npdf.addImage(\n  stage.toDataURL({ pixelRatio: 2 }),\n  0,\n  0,\n  width,\n  height\n);\n\npdf.save('canvas.pdf');\n} else {\nconsole.error('jsPDF library is not loaded or stage is not available');\nalert('jsPDF library is not loaded. In a real project, you need to include it.');\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Animating Shapes by Type in Konva.js (React)\nDESCRIPTION: This React component creates a Konva stage with two circles and a rectangle. It uses the useEffect hook to find and animate only the circle shapes after the component mounts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_Type.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Rect } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const layerRef = useRef(null);\n  \n  useEffect(() => {\n    // find all circles by type and animate them\n    const circles = layerRef.current.find('Circle');\n    circles.forEach(circle => {\n      circle.to({\n        duration: 1,\n        scale: { x: 1.5, y: 1.5 },\n        easing: Konva.Easings.EaseInOut\n      });\n    });\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer ref={layerRef}>\n        <Circle\n          x={50}\n          y={window.innerHeight / 2}\n          radius={30}\n          fill=\"red\"\n        />\n        <Circle\n          x={150}\n          y={window.innerHeight / 2}\n          radius={30}\n          fill=\"green\"\n        />\n        <Rect\n          x={250}\n          y={window.innerHeight / 2 - 25}\n          width={50}\n          height={50}\n          fill=\"blue\"\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Images on Canvas with Vue-Konva\nDESCRIPTION: This example demonstrates how to load and display multiple images on a canvas using the useImage hook from vue-konva. It shows how to position images at specific coordinates, apply scaling, and add corner radius effects to the images.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/Images.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"yodaImage\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: yodaImage,\n          width: 106,\n          height: 118\n        }\"\n      />\n      <v-image\n        v-if=\"vaderImage\"\n        :config=\"{\n          x: 200,\n          y: 50,\n          image: vaderImage,\n          scaleX: 0.5,\n          scaleY: 0.5,\n          cornerRadius: 20\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst [yodaImage] = useImage('https://konvajs.org/assets/yoda.jpg');\nconst [vaderImage] = useImage('https://konvajs.org/assets/darth-vader.jpg');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Konva via CDN in HTML\nDESCRIPTION: This snippet demonstrates how to include Konva in an HTML file using a CDN (Content Delivery Network). It uses a script tag to load the minified version of Konva directly from unpkg.com.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/konva@9/konva.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas with clearCache Method\nDESCRIPTION: Method to clear the cached canvas of a node, which can be useful when the node needs to be redrawn due to visual changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Events with Vanilla JavaScript and Konva\nDESCRIPTION: This snippet demonstrates how to create a draggable text element and handle drag events using vanilla JavaScript and Konva. It sets up a stage, layer, and two text nodes, one of which is draggable. The code then attaches drag event listeners to update the status text.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/06_Drag_Events.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 40,\n  y: 40,\n  text: 'Draggable Text',\n  fontSize: 20,\n  draggable: true,\n  width: 200,\n});\nlayer.add(text);\n\nconst status = new Konva.Text({\n  x: 40,\n  y: 100,\n  text: '',\n  fontSize: 16,\n  width: 200,\n});\nlayer.add(status);\n\ntext.on('dragstart', () => {\n  status.text('drag started');\n});\n\ntext.on('dragend', () => {\n  status.text('drag ended');\n});\n\ntext.on('dragmove', () => {\n  status.text('dragging');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point of a linear gradient fill for a Konva shape. This controls where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset Y in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadow offset y-coordinate for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Drag Bound Function in Konva.js\nDESCRIPTION: Shows how to get and set the drag bound function for a Konva.js node. The dragBoundFunc method can be used without parameters to retrieve the current function, or with a function parameter to set a new one.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting globalCompositeOperation of Node in Konva.js\nDESCRIPTION: Demonstrates how to get or set the globalCompositeOperation property of a node, which affects how it blends with other nodes during rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Setting X-Coordinate in Konva.js\nDESCRIPTION: Demonstrates how to get and set the x-coordinate of a Konva node. This is a shorthand for accessing the x-position property directly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Konva.js\nDESCRIPTION: Demonstrates how to remove event listeners from Konva.js nodes, including removing multiple listeners and using namespaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Using fillAfterStrokeEnabled in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the fillAfterStrokeEnabled property, which controls whether the fill is applied after the stroke. Default is false.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Node Management in KonvaJS\nDESCRIPTION: Methods for removing, destroying, and managing node attributes\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X component of the fill pattern scale for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Skew Y in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get the current skew Y value of a node and how to set a new skew Y value. This controls vertical skewing of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva.js Nodes\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva node while preserving other names. This allows for dynamic classification of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Ancestor with Selector in Konva.js\nDESCRIPTION: This code demonstrates how to find a single ancestor that matches a given selector. It is useful for finding a specific parent or container of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions in KonvaJS\nDESCRIPTION: Examples of getting and setting width, height, and size of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in Konva.js\nDESCRIPTION: Shows how to retrieve a specific attribute from a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke in Konva.js\nDESCRIPTION: Shows how to check, enable, or disable the stroke of a Konva shape. When disabled, the shape will not render its outline regardless of other stroke properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Radial Gradient End Point in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet demonstrates how to get and set the fill radial gradient end point in a Konva shape. It uses the fillRadialGradientEndPoint method to retrieve and modify both x and y coordinates of the radial gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Event Handling in Vue with vue-konva\nDESCRIPTION: A Vue.js implementation of multi-event handling using vue-konva components. Uses the setup script with ref and computed for reactivity, and handles mouseover, mousedown, and mouseup events on the circle to update the message state.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Multi_Event.mdx#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text :config=\"textConfig\" />\n      <v-circle\n        :config=\"circleConfig\"\n        @mouseover=\"handleMultiEvent\"\n        @mousedown=\"handleMultiEvent\"\n        @mouseup=\"handleMultiEvent\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\n\nconst message = ref('');\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textConfig = computed(() => ({\n  x: 10,\n  y: 10,\n  fontFamily: 'Calibri',\n  fontSize: 24,\n  text: message.value,\n  fill: 'black'\n}));\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleMultiEvent = (e) => {\n  message.value = 'event: ' + e.type;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manipulating Y Coordinate in Konva.js\nDESCRIPTION: Example of getting and setting a node's y coordinate position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte using the writable function. This approach is recommended for state that needs to be retained during Hot Module Replacement (HMR).\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/filters/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point X in Konva.js\nDESCRIPTION: Methods to get and set the fill linear gradient end point X coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get or set the shadow blur amount, which controls the softness of the shadow edge.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Adjusting HSV/HSL Saturation in Konva.js\nDESCRIPTION: Method to get or set the HSV/HSL saturation for Konva.Filters.HSV or Konva.Filters.HSL filters. It accepts a number where 0 is no change, negative values decrease saturation, and positive values increase it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nsaturation(saturation)\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors in Konva.js\nDESCRIPTION: Shows how to find ancestor nodes using selectors with the findAncestors() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Applying Mask Filter to Image with Konva.js in React\nDESCRIPTION: This snippet shows how to implement the mask filter and threshold adjustment using React components with react-konva. It uses hooks for state management and refs for accessing the Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Mask.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [threshold, setThreshold] = useState(10);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Mask]}\n            threshold={threshold}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"255\"\n        value={threshold}\n        onChange={(e) => setThreshold(parseInt(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Embedding Polotno Demo in iFrame with React JSX\nDESCRIPTION: Code for embedding a Polotno canvas editor demo from CodeSandbox using an iframe with custom styling. The iframe is configured with specific dimensions, border settings, and sandbox permissions to safely display the interactive canvas editor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Canvas_Editor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe \n  src=\"https://codesandbox.io/embed/github/polotno-project/polotno-site/tree/source/examples/polotno-demo?fontsize=11&hidenavigation=1&theme=dark&view=preview\" \n  style={{\n    width: \"100%\",\n    height: \"500px\",\n    border: 0,\n    borderRadius: \"4px\",\n    overflow: \"hidden\"\n  }}\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the absolute position of a Konva node using the absolutePosition method. The absolute position is relative to the stage rather than the parent node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke in Konva.js\nDESCRIPTION: Shows how to get and set the fillAfterStrokeEnabled property which controls whether fill is drawn after stroke. Useful for text objects. Default is false.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: Demonstrates how to use the getClientRect method to obtain the bounding rectangle of a Konva node, including options to skip transforms, shadows, and strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors in Konva.js\nDESCRIPTION: This snippet shows how to get all ancestors of a node in Konva.js and process them using a function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Y Offset in Konva.js\nDESCRIPTION: Shows how to get and set the vertical offset of a Konva node. The offset determines the center point for transformations like rotation and scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a canvas element using the toCanvas method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva.js Nodes\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva node that has multiple names. The example shows removing 'selected' from 'red selected'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Relatively in KonvaJS\nDESCRIPTION: Demonstrates how to move a node by a specified amount relative to its current position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Event Listening in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the listening attribute of a node. Nodes with listening set to false will not be detected in hit detection and will be ignored in container.getIntersection() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Methods to get and set the fill linear gradient end point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Skew in KonvaJS\nDESCRIPTION: Demonstrates how to get and set only the vertical skew (y-axis) of a node using the skewY method. This creates a slanting effect vertically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Scale for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the vertical scale factor of a Konva node using the scaleY method for one-dimensional scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte for HMR State Preservation\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable store from svelte/store. This approach helps retain component state during Hot Module Replacement (HMR), avoiding the state reset issues that typically occur with HMR.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/basic_demo/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in KonvaJS\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method, which returns a Promise and allows for callback handling when the conversion is complete.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node, which considers rotations of ancestor nodes. This is useful when you need the total rotation angle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache\nDESCRIPTION: Method to draw hit detection graph using the cached scene canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Checking if Node is Visible on Screen in KonvaJS\nDESCRIPTION: Demonstrates how to determine if a node is currently visible in the user's viewport using isClientRectOnScreen, with optional margin parameters to adjust the detection area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva.js node. Names can be used like CSS classes to select and identify nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Creating Animations with KonvaJS Tween in JavaScript\nDESCRIPTION: Creates a tween animation for node properties. This is a shorter usage of the Konva.Tween object, allowing for animation with callbacks for updates and completion.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring hitStrokeWidth in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the hitStrokeWidth property of a Konva shape. This property determines the stroke width used for hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable function from svelte/store. External stores are useful for retaining state that should not be replaced during Hot Module Replacement (HMR).\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/drag_and_drop/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Setting shadowBlur in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the shadow blur property, which controls the softness of the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva\nDESCRIPTION: Demonstrates how to draw a hit graph using the cached scene canvas, which can improve performance when detecting mouse interactions with complex shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Creating a svelte-konva stage component\nDESCRIPTION: Example of a Svelte component containing svelte-konva Stage, Layer, and Rect elements. This component will need special handling in SSR contexts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/SvelteKit.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  import { Stage, Layer, Rect } from 'svelte-konva';\n  import OtherComponentUsingSvelteKonva from './OtherComponentUsingSvelteKonva.svelte';\n\n  const rectangleConfig = {\n    /*...*/\n  };\n</script>\n\n<Stage config={{ width: 1000, height: 1000 }}>\n  <Layer>\n    <Rect bind:config={rectangleConfig} />\n\n    <OtherComponentUsingSvelteKonva />\n  </Layer>\n</Stage>\n```\n\n----------------------------------------\n\nTITLE: Comparing Perfect and Non-Perfect Drawing in Vanilla JavaScript\nDESCRIPTION: This code creates a Konva stage with two circles, one with perfect drawing enabled (default) and one with it disabled. It demonstrates the visual difference between the two modes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Disable_Perfect_Draw.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// With perfect drawing (default)\nconst perfectCircle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5,\n});\n\n// Without perfect drawing\nconst nonPerfectCircle = new Konva.Circle({\n  x: 250,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5,\n  perfectDrawEnabled: false,\n});\n\n// Add labels\nconst perfectLabel = new Konva.Text({\n  x: 50,\n  y: 170,\n  text: 'Perfect Drawing',\n  fontSize: 16,\n});\n\nconst nonPerfectLabel = new Konva.Text({\n  x: 200,\n  y: 170,\n  text: 'Perfect Drawing Disabled',\n  fontSize: 16,\n});\n\nlayer.add(perfectCircle);\nlayer.add(nonPerfectCircle);\nlayer.add(perfectLabel);\nlayer.add(nonPerfectLabel);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern and Rules\nDESCRIPTION: Methods for manipulating fill pattern rotation and fill rules for shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipping Functions with Vanilla JavaScript in Konva.js\nDESCRIPTION: This snippet demonstrates how to create a stage, layer, and group with a clipping function in Konva.js using vanilla JavaScript. It generates 20 random green circles (blobs) that are clipped within two circular regions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Function.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// First we need to create stage\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\n// Then create layer\nconst layer = new Konva.Layer();\n\nconst group = new Konva.Group({\n  clipFunc: function (ctx) {\n    ctx.beginPath();\n    ctx.arc(200, 120, 50, 0, Math.PI * 2, false);\n    ctx.arc(280, 120, 50, 0, Math.PI * 2, false);\n  },\n});\n\nfor (let i = 0; i < 20; i++) {\n  const blob = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: Math.random() * 50,\n    fill: 'green',\n    opacity: 0.8,\n  });\n  group.add(blob);\n}\n\n// add the shape to the layer\nlayer.add(group);\n\n// add the layer to the stage\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Konva Nodes\nDESCRIPTION: Shows how to get and set the position of a Konva node relative to its parent using the position method. This sets the local coordinates of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X-Scale in Konva\nDESCRIPTION: Demonstrates getting and setting just the x-axis scale of a Konva node. This allows horizontal scaling independently of vertical scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Height in Konva.js\nDESCRIPTION: Demonstrates how to get and set the height of a Konva node. This defines the intrinsic height of the node before any scaling is applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva Nodes\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva node. This allows for selectively removing individual names from a node that may have multiple names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva node to an image object with optional configuration for size, quality, and pixel ratio. The method returns a Promise for asynchronous handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Names from Konva Nodes\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva node using the removeName method while preserving other names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Project for Production\nDESCRIPTION: Command to create a production-ready build of the Svelte application, which can be previewed using npm run preview.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/sveltekit/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y component of the fill pattern scale. This controls the vertical scaling of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: This code shows how to get the absolute rotation of a node, which takes into account all ancestor rotations. The method returns the rotation angle in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounce Easing Functions in Konva.js\nDESCRIPTION: A collection of bounce easing functions that simulate bouncing motion. Includes BounceEaseIn(), BounceEaseOut(), and BounceEaseInOut() variations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBounceEaseOut()\nBounceEaseIn()\nBounceEaseInOut()\n```\n\n----------------------------------------\n\nTITLE: Creating External Store in Svelte\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte using the writable store from svelte/store. This pattern is useful for maintaining state across HMR updates where component-local state would typically be lost.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/custom_shape/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Konva.js\nDESCRIPTION: Shows various ways to bind event listeners to Konva.js nodes, including multiple events, namespaced events, and accessing event properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva node. Names function similarly to CSS classes, allowing multiple space-separated names to be assigned to a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Removing Node Names with removeName Method in Konva.js\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva node using the removeName method while preserving other names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Constraints in KonvaJS\nDESCRIPTION: Demonstrates how to set a custom drag bound function to override the default drag and drop positioning. This example shows how to constrain dragging to vertical movement only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Event Bindings in Konva.js\nDESCRIPTION: Demonstrates how to remove event listeners from Konva nodes using the 'off' method, with examples for removing single, multiple, and namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Linear Gradient End Point in Konva Shapes (JavaScript)\nDESCRIPTION: This code demonstrates how to get and set the fill linear gradient end point in a Konva shape. It uses the fillLinearGradientEndPoint method to access and modify both x and y coordinates of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable function. External stores are useful for retaining state that should persist across hot module replacement (HMR) updates.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/transformer/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangles with Vanilla KonvaJS\nDESCRIPTION: Demonstrates creating three different rectangles using vanilla KonvaJS. Shows how to set up a stage, layer and create rectangles with various properties including fill colors, strokes, shadow effects and corner radius configurations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Rect.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\ncontainer: 'container', // id of container <div>\nwidth: window.innerWidth,\nheight: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect1 = new Konva.Rect({\nx: 20,\ny: 20,\nwidth: 100,\nheight: 50,\nfill: 'green',\nstroke: 'black',\nstrokeWidth: 4\n});\nlayer.add(rect1);\n\nconst rect2 = new Konva.Rect({\nx: 150,\ny: 40,\nwidth: 100,\nheight: 50,\nfill: 'red',\nshadowBlur: 10,\ncornerRadius: 10\n});\nlayer.add(rect2);\n\nconst rect3 = new Konva.Rect({\nx: 50,\ny: 120,\nwidth: 100,\nheight: 100,\nfill: 'blue',\ncornerRadius: [0, 10, 20, 30]\n});\nlayer.add(rect3);\n\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stroke Linear Gradient End Point Y in JavaScript\nDESCRIPTION: Illustrates how to retrieve and set the stroke linear gradient end point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Image Filter Method Definitions in KonvaJS\nDESCRIPTION: Collection of getter/setter methods for applying and configuring various image filters in KonvaJS. Methods include emboss, HSV/HSL adjustments, kaleidoscope effects, noise, pixelation, RGB/RGBA manipulation and threshold filters. Each method accepts specific parameter ranges and returns corresponding values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_100\n\nLANGUAGE: JavaScript\nCODE:\n```\nembossStrength(level) // level: Number between 0 and 1, default 0.5\nembossWhiteLevel(embossWhiteLevel) // embossWhiteLevel: Number between 0 and 1, default 0.5\nembossDirection(embossDirection) // embossDirection: String direction\nembossBlend(embossBlend) // embossBlend: Boolean\nenhance(amount) // amount: Float between -1 and 1\nhue(hue) // hue: Number between 0 and 359\nsaturation(saturation) // saturation: Number for multiplier\nluminance(value) // value: Number between -1 and 1\nvalue(value) // value: Number for multiplier\nkaleidoscopePower(power) // power: Integer\nkaleidoscopeAngle(degrees) // degrees: Integer\nnoise(noise) // noise: Number between 0 and 1\npixelSize(pixelSize) // pixelSize: Integer\nlevels(level) // level: Number between 0 and 1\nred(red) // red: Integer between 0 and 255\ngreen(green) // green: Integer between 0 and 255\nblue(blue) // blue: Integer between 0 and 255\nalpha(alpha) // alpha: Float between 0 and 1\nthreshold(threshold) // threshold: Number between 0 and 1\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte for HMR State Preservation\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable store. External stores help preserve component state during Hot Module Replacement (HMR), which otherwise doesn't retain local component state by default.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/cache/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Creating External Store in Svelte\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte using the writable store. This approach is recommended for state preservation during Hot Module Replacement (HMR) when component local state retention is needed.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/save_load/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Creating External Store for HMR State Preservation in Svelte\nDESCRIPTION: This code demonstrates how to create an external store in Svelte to preserve component state during Hot Module Replacement (HMR). It imports the writable store from Svelte's store module and exports a simple writable store initialized with a value of 0.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/zIndex/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Vanilla JS Implementation of Shape Resize Snapping\nDESCRIPTION: Complete implementation of shape resize snapping using vanilla JavaScript and KonvaJS. Creates a stage with guide lines and a resizable rectangle that snaps to the center line.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/08_Resize_Snaps.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\ncontainer: 'container',\nwidth: width,\nheight: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst horizontalLine = new Konva.Line({\npoints: [0, height / 2, width, height / 2],\nstroke: '#000',\nstrokeWidth: 1,\ndash: [4, 4],\n});\nlayer.add(horizontalLine);\n\nconst verticalLine = new Konva.Line({\npoints: [width / 2, 0, width / 2, height],\nstroke: '#000',\nstrokeWidth: 1,\ndash: [4, 4],\n});\nlayer.add(verticalLine);\n\nconst rect = new Konva.Rect({\nx: 60,\ny: 60,\nwidth: 100,\nheight: 100,\nfill: 'red',\ndraggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\nnodes: [rect],\nanchorDragBoundFunc: function (oldPos, newPos) {\nconst dist = Math.sqrt(Math.pow(newPos.x - width / 2, 2));\nif (dist < 10) {\nreturn {\n...newPos,\nx: width / 2,\n};\n}\nreturn newPos;\n},\n});\nlayer.add(tr);\n```\n\n----------------------------------------\n\nTITLE: Using offsetY with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the vertical offset of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties in KonvaJS\nDESCRIPTION: Demonstrates how to create property tweens for smooth animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Width in Konva.js\nDESCRIPTION: Example of getting and setting a node's width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Skew in KonvaJS\nDESCRIPTION: Demonstrates how to get and set only the horizontal skew (x-axis) of a node using the skewX method. This creates a slanting effect horizontally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Controlling Line Tension in Konva.Line\nDESCRIPTION: Demonstrates how to get and set the tension property which controls the curviness of line interpolation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get tension\nvar tension = line.tension();\n\n// set tension\nline.tension(3);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to draw a hit graph using the cached scene canvas for a Konva Shape. The alphaThreshold parameter determines the pixel drawing threshold based on the alpha channel.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Adding Names to Konva Nodes in JavaScript\nDESCRIPTION: Example of adding a new name to a Konva node. The name method can be used like CSS classes, with multiple names separated by spaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal scale of a fill pattern in a Konva shape. This affects the pattern's width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Offset X in KonvaJS\nDESCRIPTION: Shows how to get and set a node's horizontal offset position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Using skewY with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the vertical skew of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Images for Fill in Konva.js\nDESCRIPTION: Demonstrates how to set an image as a fill pattern for a shape by loading an external image and assigning it to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the start point for a linear gradient stroke, which defines where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to retrieve the absolute rotation of a node, which combines the rotation of the node with all of its ancestors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Generic MCP Command for Konva Documentation Integration\nDESCRIPTION: NPM command for integrating Konva documentation with any MCP-compatible application. This command connects the application to crawlchat's Konva documentation database for improved context-aware responses.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/ai_tools.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx crawl-chat-mcp --id=67d221efb4b9de65095a2579 --name=konva_documentation\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Priority in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill priority which determines which fill type takes precedence. Options include 'color', 'pattern', 'linear-gradient', and 'radial-gradient'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in KonvaJS\nDESCRIPTION: Method to get or set the scale of a fill pattern. This controls the size of the pattern relative to its original dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Attributes in Konva.js\nDESCRIPTION: Shows how to set multiple attributes at once on a Konva.js node using an object literal.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Height in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the height of a node. This affects the vertical size of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions in KonvaJS\nDESCRIPTION: Examples of getting and setting width, height and combined size of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the horizontal (x) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Konva.Transform Instance\nDESCRIPTION: Instantiates a new Transform object with an optional six-element matrix parameter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transform.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Transform(config)\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Listening Status in JavaScript\nDESCRIPTION: Demonstrates how to get and set the listening attribute of a Konva.js node. This affects whether the node responds to events and is included in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Setting dash pattern in Konva.js\nDESCRIPTION: Example showing how to set dash patterns for strokes in Konva, allowing for creating dashed or dotted lines with customizable patterns.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Konva Properties in JavaScript\nDESCRIPTION: Examples of setting various global Konva properties to configure behavior across the library.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nKonva.autoDrawEnabled = true;\n\nKonva.hitOnDragEnabled = true;\n\nKonva.capturePointerEventsEnabled = true;\n\nKonva.pixelRatio = 1;\n\nKonva.dragDistance = 10;\n\nKonva.angleDeg = false;\nnode.rotation(Math.PI / 2);\n\nKonva.showWarnings = false;\n\nKonva.dragButtons = [0, 2];\n\nKonva.releaseCanvasOnDestroy = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the minimum drag distance required to start dragging a node. This can be set on individual nodes or globally for all Konva nodes by setting Konva.dragDistance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y component of the fill pattern offset for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Firing Events on a Node in Konva.js\nDESCRIPTION: This code shows different ways to fire events on a node, including standard events, custom events, events with custom data, and bubbling events that propagate up the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Width in KonvaJS\nDESCRIPTION: Shows how to get and set the width of a node using the width method. This affects the physical size of the rendered element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Offset X in Konva.js\nDESCRIPTION: Demonstrates getting and setting the horizontal shadow offset (x-axis) for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Skew X in KonvaJS\nDESCRIPTION: Shows how to get and set a node's horizontal skew factor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Strokes in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the dash array for strokes in Konva shapes. The dash array defines the pattern of dashes and gaps.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Linear Gradient End Point in JavaScript with Konva\nDESCRIPTION: Shows how to get and set the stroke linear gradient end point using Konva Shape methods. The end point is defined as an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters in KonvaJS\nDESCRIPTION: Examples of applying various filters to cached canvases including blur, brightness and contrast.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Draw Function in Konva.js\nDESCRIPTION: Demonstrates getting and setting the hit draw function for a shape. This function is used to draw a custom hit area for the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Linear Gradient End Point X in JavaScript with Konva\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient end point x coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Konva Context in JavaScript\nDESCRIPTION: Creates a new Konva.Context object with the provided configuration. This wrapper around native 2D canvas context provides additional functionality for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Context.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Context(config)\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle of Shapes in Konva.js\nDESCRIPTION: Shows how to get the self rectangle (x, y, width, height) of shapes including rectangles and circles without considering transformations and styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Nodes in Konva.js\nDESCRIPTION: Illustrates how to bind various event handlers to Konva nodes. Examples include handling clicks, touch events, event propagation control, and accessing event properties like target and native browser events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Y Skew in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the y-axis skew of a node. This allows for vertical shearing transformations without affecting horizontal orientation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Illustrates how to convert a Konva.js node to a blob asynchronously using a Promise.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Styling Konva Transformer in Vue\nDESCRIPTION: This snippet demonstrates how to create and style a Konva Transformer using Vue 3 composition API. It sets up a stage with a rectangle and a transformer, applying custom styles to the transformer's border and anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/04_Transformer_Styling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        ref=\"rectRef\"\n      />\n      <v-transformer\n        :config=\"transformerConfig\"\n        ref=\"transformerRef\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {\n  borderStroke: '#000',\n  borderStrokeWidth: 3,\n  anchorFill: '#fff',\n  anchorStroke: '#000',\n  anchorStrokeWidth: 2,\n  anchorSize: 20,\n  anchorCornerRadius: 50\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Controlling Stroke Visibility in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke enabled flag for a shape in Konva.js. This allows showing or hiding the stroke of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Shows how to get and set the globalCompositeOperation property for a Konva shape. This property determines how the shape blends with elements behind it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Creating TextPath with Vue-Konva\nDESCRIPTION: This code snippet demonstrates how to implement a TextPath in Vue.js using vue-konva components. It sets up a template with stage and layer components, and configures a text-path with properties defined in the script section to render text along a curved path.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/TextPath.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text-path :config=\"textPathConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textPathConfig = {\n  x: 0,\n  y: 50,\n  fill: '#333',\n  fontSize: 16,\n  fontFamily: 'Arial',\n  text: \"All the world's a stage, and all the men and women merely players.\",\n  data: 'M10,10 C0,0 10,150 100,100 S300,150 400,50'\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family in Konva\nDESCRIPTION: Example of getting and setting the font family for a Konva Text object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get font family\nvar fontFamily = text.fontFamily();\n\n// set font family\ntext.fontFamily('Arial');\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates how to control the opacity of shadows for a shape, with values ranging between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to retrieve an array of all ancestor nodes and process them with a forEach loop.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Horizontal Offset in KonvaJS\nDESCRIPTION: Shows how to get and set the horizontal offset of a node using the offsetX method. The offset determines the point around which transformations occur.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Managing Names in Konva.js\nDESCRIPTION: Demonstrates how to get and set the name of a Konva node. Names can be used like CSS classes, with multiple space-separated names for a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Shows how to get and set just the Y component of the linear gradient stroke start point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Shows how to get and set the fill priority for a Konva.js shape. This method allows toggling between different fill types such as color, pattern, and gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Defining Scene Draw Function in Konva.js\nDESCRIPTION: Shows how to get and set the scene draw function for a shape. This function is used to draw the shape on a canvas and for the hit area if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a Konva node, taking into account ancestor rotations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Transparency in Konva.js Filters\nDESCRIPTION: Method for getting and setting alpha transparency value for use with Konva.Filters.RGBA filter. Accepts values between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nnode.alpha(value);  // Set alpha transparency (0-1)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node, which includes the combined rotations of all parent nodes in the hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Pointer Length in JavaScript\nDESCRIPTION: Demonstrates how to get and set the pointer length of a Konva.Arrow. The pointerLength method allows retrieving the current length or setting a new length for the arrow pointer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get length\nvar pointerLength = line.pointerLength();\n\n// set length\nline.pointerLength(15);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the end point for a radial gradient fill. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Radial Gradient Start Point in JavaScript with Konva\nDESCRIPTION: Demonstrates how to retrieve and update the fill radial gradient start point using Konva Shape methods. The start point is specified as an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Fill, Stroke, Shadow, and Dash in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable fill, stroke, shadow, and dash properties for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Using perfectDrawEnabled in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the perfectDrawEnabled property, which can be disabled to improve performance for shapes with fill, stroke and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Y Position in Konva.js\nDESCRIPTION: Shows how to get and set just the y-coordinate of a node's position. This allows for vertical positioning adjustments without affecting the horizontal position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listening in Konva.js\nDESCRIPTION: Example of how to get and set the listening attribute on a Konva node. This controls whether a node responds to events and appears in the hit graph. Setting to false will remove the node from event detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Images with Konva in React\nDESCRIPTION: This snippet shows how to implement Konva images in a React application using react-konva. It uses the useImage hook to load images and renders them with the Image component, applying positioning and styling properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Image.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useEffect, useState } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [yodaImage] = useImage('https://konvajs.org/assets/yoda.jpg');\n  const [vaderImage] = useImage('https://konvajs.org/assets/darth-vader.jpg');\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Image\n          x={50}\n          y={50}\n          image={yodaImage}\n          width={106}\n          height={118}\n        />\n        <Image\n          x={200}\n          y={50}\n          image={vaderImage}\n          scaleX={0.5}\n          scaleY={0.5}\n          cornerRadius={20}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Area from Cache in Konva\nDESCRIPTION: Shows how to draw the hit detection graph using a cached canvas for improved performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Creating Labels with Vue-Konva\nDESCRIPTION: Implements the label examples using Vue-Konva components with separate configuration objects for each label's properties. Uses Vue template syntax with v-stage, v-layer, v-label, v-tag, and v-text components.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Label.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-label :config=\"tooltipConfig\">\n        <v-tag :config=\"tooltipTagConfig\" />\n        <v-text :config=\"tooltipTextConfig\" />\n      </v-label>\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst tooltipConfig = {\n  x: 170,\n  y: 75,\n  opacity: 0.75\n};\n\nconst tooltipTagConfig = {\n  fill: 'black',\n  pointerDirection: 'down',\n  pointerWidth: 10,\n  pointerHeight: 10,\n  lineJoin: 'round',\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffsetX: 10,\n  shadowOffsetY: 10,\n  shadowOpacity: 0.5\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Vanilla JavaScript with Konva\nDESCRIPTION: Creates a circle shape with Konva and demonstrates how to remove its click event listener using the off() method. The code creates a stage, adds a circle, and includes a button to remove the click listener.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Remove_Event.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\n// add click listener\ncircle.on('click', function () {\n  alert('you clicked the circle');\n});\n\nlayer.add(circle);\n\n// add button to remove listener\nconst button = document.createElement('button');\nbutton.style.position = 'absolute';\nbutton.style.top = '10px';\nbutton.style.left = '10px';\nbutton.innerHTML = 'Remove click listener';\ndocument.body.appendChild(button);\nbutton.addEventListener('click', () => {\n  // remove click listener\n  circle.off('click');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating External Store in Svelte\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte using the writable store. This approach is recommended for state preservation during Hot Module Replacement (HMR) when component local state retention is important.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/bindings/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Radius of Konva.RegularPolygon in JavaScript\nDESCRIPTION: Methods for getting and setting the radius of a RegularPolygon instance. The radius determines the size of the polygon.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius\nvar radius = shape.radius();\n\n// set radius\nshape.radius(10);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Offset in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal offset (offsetX) of a Konva node. This affects the node's horizontal pivot point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Intersection\nDESCRIPTION: Method to detect if a point intersects with a shape in the layer. Returns the topmost shape at the specified point. Shapes with listening set to false will not be detected.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar shape = layer.getIntersection({x: 50, y: 50});\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva.js\nDESCRIPTION: Demonstrates how to get client rectangle dimensions for a Konva node, including handling of transformations and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point Y in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient start point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting clipX in Konva Container\nDESCRIPTION: Example demonstrating how to get and set the clip x coordinate for a Konva container. This method controls the horizontal position of the clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method\nSOURCE: https://github.com/konvajs/site/blob/new/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle Dimensions from Konva Shapes\nDESCRIPTION: Demonstrates how to obtain the self rectangle (bounding box) of different Konva shapes without considering transformations and styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern X Position in Konva.js\nDESCRIPTION: Demonstrates how to get or set the horizontal (x) position of a fill pattern within a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Properties for Containers\nDESCRIPTION: Methods to define clipping regions for containers by setting clip dimensions or using custom clipping functions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Vertical Offset in KonvaJS\nDESCRIPTION: Shows how to get and set the vertical offset of a node using the offsetY method. The offset determines the point around which transformations occur.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Examples showing how to fire both built-in and custom events, with optional event objects and bubbling\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Managing Points for Konva.Line in JavaScript\nDESCRIPTION: Shows how to get and set the points array for a Konva.Line, which is inherited by Konva.Arrow. The points method allows retrieving or setting the coordinates of the line's points.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get points\nvar points = line.points();\n\n// set points\nline.points([10, 20, 30, 40, 50, 60]);\n\n// push a new point\nline.points(line.points().concat([70, 80]));\n```\n\n----------------------------------------\n\nTITLE: Managing Rotation in Konva.js\nDESCRIPTION: Example of getting and setting a node's rotation in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Setting Scale for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the scale of a Konva node, allowing for different scaling factors on each axis for precise transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon with Vue-Konva\nDESCRIPTION: This code snippet demonstrates how to implement a polygon using Vue-Konva. It uses a Vue template with v-stage, v-layer, and v-line components, and defines the polygon configuration in a setup script using the same points, fill, and stroke properties as previous examples.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Line_-_Polygon.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line :config=\"polygonConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst polygonConfig = {\n  points: [73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Quadratic Curve Control Lines with KonvaJS\nDESCRIPTION: Creates a configuration for visualizing the control lines of a quadratic curve. Displays dashed lines connecting the start, control, and end points with semi-transparent black stroke to help visualize curve construction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst quadLineConfig = computed(() => ({\n  points: [\n    quadPoints.start.x, quadPoints.start.y,\n    quadPoints.control.x, quadPoints.control.y,\n    quadPoints.end.x, quadPoints.end.y\n  ],\n  dash: [10, 10, 0, 10],\n  strokeWidth: 3,\n  stroke: 'black',\n  lineCap: 'round',\n  opacity: 0.3\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Before Draw Flag\nDESCRIPTION: Methods to get or set the clearBeforeDraw flag which determines if the layer is cleared before drawing. Set to false to prevent clearing which can be useful for specific layering effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get clearBeforeDraw flag\nvar clearBeforeDraw = layer.clearBeforeDraw();\n\n// disable clear before draw\nlayer.clearBeforeDraw(false);\n\n// enable clear before draw\nlayer.clearBeforeDraw(true);\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start local development server which opens a browser window and provides live updates for changes\nSOURCE: https://github.com/konvajs/site/blob/new/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in KonvaJS\nDESCRIPTION: Demonstrates different ways to remove event listeners from KonvaJS nodes, including removing multiple events and namespaced events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// remove listener\nnode.off('click');\n\n// remove multiple listeners\nnode.off('click touchstart');\n\n// remove listener by name\nnode.off('click.foo');\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva.js Node to a Blob\nDESCRIPTION: Shows how to convert a Konva.js node into a blob using the toBlob method with async/await syntax. This is useful for saving canvas content as files.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Sides of Konva.RegularPolygon in JavaScript\nDESCRIPTION: Methods for getting and setting the number of sides of a RegularPolygon instance. This determines the shape of the polygon (e.g., 3 for triangle, 4 for square).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get sides\nvar sides = shape.sides();\n\n// set sides\nshape.sides(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Height in KonvaJS\nDESCRIPTION: Shows how to get and set the height of a node using the height method. This affects the physical size of the rendered element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob using toBlob Method in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a blob using the async toBlob method with await syntax to handle the resulting blob object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Managing Node Properties in Konva.js\nDESCRIPTION: Examples of getting and setting various node properties like opacity, name, and id.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Radial Gradient End Point X in Konva Shapes (JavaScript)\nDESCRIPTION: This code shows how to get and set the fill radial gradient end point x in a Konva shape. It uses the fillRadialGradientEndPointX method to access and modify the x-coordinate of the radial gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternX in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the horizontal position (x-coordinate) of a fill pattern for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Using shadowForStrokeEnabled in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadowForStrokeEnabled property for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Konva Nodes\nDESCRIPTION: Example of getting and setting a node's absolute position in the canvas, regardless of its parent containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Radial Gradient Points\nDESCRIPTION: Examples demonstrating how to get and set radial gradient start and end points. Methods accept objects with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Visibility in Konva.js\nDESCRIPTION: Shows how to get and set the visibility of a Konva.js node. The visible method can be used without parameters to retrieve the current value, or with a boolean parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Draggable Flag in Konva.js\nDESCRIPTION: Illustrates how to get and set the draggable flag for a Konva.js node. The draggable method can be used without parameters to retrieve the current value, or with a boolean parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Linear Gradient in Konva.js\nDESCRIPTION: Demonstrates how to get and set the color stops for a linear gradient fill in a shape. This allows creating complex gradient fills.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the fillAfterStrokeEnabled property, which determines whether fill is applied after stroke in a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient End Point in Konva.js\nDESCRIPTION: Shows how to get and set the end point for a linear gradient stroke in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Perfect and Non-Perfect Drawing in React\nDESCRIPTION: This React component creates a Konva stage with two circles, demonstrating the difference between perfect and non-perfect drawing modes using react-konva library.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Disable_Perfect_Draw.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle, Text } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {/* With perfect drawing (default) */}\n        <Circle\n          x={100}\n          y={100}\n          radius={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={10}\n          opacity={0.5}\n        />\n        \n        {/* Without perfect drawing */}\n        <Circle\n          x={250}\n          y={100}\n          radius={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={10}\n          opacity={0.5}\n          perfectDrawEnabled={false}\n        />\n        \n        {/* Labels */}\n        <Text\n          x={50}\n          y={170}\n          text=\"Perfect Drawing\"\n          fontSize={16}\n        />\n        <Text\n          x={200}\n          y={170}\n          text=\"Perfect Drawing Disabled\"\n          fontSize={16}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Regular Polygon with Vue Konva\nDESCRIPTION: This snippet shows how to create a hexagon using Vue Konva components. It separates the configuration for stage and polygon into separate objects, then uses v-stage, v-layer, and v-regular-polygon components to render the hexagon with the specified properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/RegularPolygon.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-regular-polygon :config=\"polygonConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst polygonConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  sides: 6,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Canceling Event Propagation in Vanilla JavaScript with Konva\nDESCRIPTION: Demonstrates how to stop event bubbling for a circle shape in Konva using vanilla JavaScript. Creates a stage with a layer containing a red circle, where clicking the circle triggers only its event handler by canceling propagation to the layer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Cancel_Propagation.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n});\n\ncircle.on('click', function (evt) {\n  alert('You clicked on the circle');\n  // stop event bubble\n  evt.cancelBubble = true;\n});\n\nlayer.on('click', function () {\n  alert('You clicked on the layer');\n});\n\nlayer.add(circle);\n```\n\n----------------------------------------\n\nTITLE: Setting ID for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the unique ID of a Konva node. The ID is globally unique across the entire page.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Checking Shape Intersection\nDESCRIPTION: Examples showing how to check for shape intersections and get self rectangle bounds.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes with setAttr Method in Konva.js\nDESCRIPTION: Shows how to set an attribute value on a Konva node using the setAttr method, which takes an attribute name and value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in KonvaJS\nDESCRIPTION: Demonstrates how to get client rectangle information for a node, including handling transformations and styling effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Setting shadowBlur in Konva.js\nDESCRIPTION: Example showing how to get and set the shadow blur effect for a Konva shape, which controls the softness of the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the shadow opacity for Konva shapes. The value must be between 0 and 1.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient End Point in JavaScript\nDESCRIPTION: Demonstrates how to get and set the fill radial gradient end point for a Konva shape. The end point is specified as an object with x and y coordinates. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Offset in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadow offset for a Konva Shape using an object with x and y properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas in Konva.js\nDESCRIPTION: Method to clear the cached canvas for a node. This is useful when you need to redraw a node after making changes to its properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Fills in Konva.js\nDESCRIPTION: Demonstrates how to get or set color stops for a linear gradient fill, allowing for multi-color gradient transitions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory for deployment\nSOURCE: https://github.com/konvajs/site/blob/new/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill priority for a Konva.js shape. Options include 'color', 'pattern', 'linear-gradient', and 'radial-gradient'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Easing Functions in Konva.js\nDESCRIPTION: Basic easing functions for smooth transitions. Includes EaseIn(), EaseOut(), and EaseInOut() variations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nEaseIn()\nEaseOut()\nEaseInOut()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern offset for a shape, allowing adjustment of pattern positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hit Detection Function in Konva.js\nDESCRIPTION: Demonstrates how to get and set a custom hit drawing function for Konva shapes. This function is used to draw the custom hit area of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Regular Polygon with React Konva\nDESCRIPTION: This example demonstrates creating a hexagon using React Konva components. It uses Stage, Layer, and RegularPolygon components to create a similar hexagon as in the vanilla JavaScript example, with properties for position, sides, radius, fill, stroke, and stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/RegularPolygon.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <RegularPolygon\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          sides={6}\n          radius={70}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Wedge Shape with Vue-Konva\nDESCRIPTION: This snippet shows how to implement a wedge shape using Vue.js with the vue-konva library. It uses a template structure with a v-stage component containing a v-layer and v-wedge, defining the wedge's properties in a separate config object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Wedge.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-wedge :config=\"wedgeConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst wedgeConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  angle: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  rotation: -120\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Images on Canvas with React and Konva\nDESCRIPTION: This code snippet demonstrates how to create a React component that renders an image on a canvas using Konva.js. It utilizes the use-image hook to load the image and the Stage, Layer, and Image components from react-konva to create the canvas structure.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/react/Images.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image';\n\nconst URLImage = ({ src, ...rest }) => {\n  const [image] = useImage(src, 'anonymous');\n  return <Image image={image} {...rest} />;\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <URLImage src=\"https://konvajs.org/assets/yoda.jpg\" x={150} />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Removing a Name from a Konva.js Node\nDESCRIPTION: Demonstrates how to remove a specific name from a Konva.js node using the removeName method while preserving other names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Shows how to get and set the fill priority for a shape. Options include 'color', 'pattern', 'linear-gradient', or 'radial-gradient'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva Shapes\nDESCRIPTION: Gets or sets the shadow opacity, which must be a value between 0 (transparent) and 1 (opaque). This allows for controlling the intensity of the shadow effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Node SkewX in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's skew on the x-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in KonvaJS\nDESCRIPTION: Shows how to get and set both width and height of a node simultaneously using a single method call, providing a more convenient way to adjust dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Self Rectangle of Konva.js Shape in JavaScript\nDESCRIPTION: Shows how to get the self rectangle (x, y, width, height) of a Konva.js Shape without considering transformations or styles. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Setting lineJoin in Konva.js\nDESCRIPTION: Example showing how to get and set the lineJoin property, which controls how line segments are joined together (miter, round, or bevel).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Behavior in KonvaJS\nDESCRIPTION: Examples of configuring node behavior including event listening, default prevention and visibility.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: Examples demonstrating how to get and set filters on a Konva node. Filters are applied to cached canvases and can include visual effects like blur, sepia, and invert.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Using hitStrokeWidth Method in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the stroke width for hit detection in Konva shapes. The default value is 'auto', which makes it equal to the strokeWidth.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Element from Node in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva.js node into a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Example showing how to get and set stroke linear gradient color stops for a Konva shape. Demonstrates creating a gradient that transitions between red, blue and green colors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the scale of a fill pattern in a Konva shape. The scale controls the size of the pattern relative to its original dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node, which takes into account the scaling of all ancestor nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Configuring shadowOffsetY in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadowOffsetY property of a Konva shape. This property defines the vertical offset of the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Stage and Text Node in Vue.js\nDESCRIPTION: Sets up a Konva stage with a text node and transformer. The text node is editable and resizable using the transformer. It also includes event handlers for double-clicking to edit and transforming the text.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Editable_Text.mdx#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        ref=\"textNode\"\n        :config=\"{\n          text: text,\n          x: 50,\n          y: 80,\n          fontSize: 20,\n          draggable: true,\n          width: textWidth,\n        }\"\n        @dblclick=\"handleTextDblClick\"\n        @transform=\"handleTransform\"\n      />\n      <v-transformer\n        v-if=\"!isEditing\"\n        ref=\"transformerNode\"\n        :config=\"{\n          enabledAnchors: ['middle-left', 'middle-right'],\n          boundBoxFunc: (oldBox, newBox) => {\n            newBox.width = Math.max(30, newBox.width);\n            return newBox;\n          },\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Konva Transformer in React\nDESCRIPTION: This snippet shows how to create and style a Konva Transformer using React components. It uses refs to connect the transformer to a rectangle and applies custom styling to the transformer's border and anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/select_and_transform/04_Transformer_Styling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          borderStroke=\"#000\"\n          borderStrokeWidth={3}\n          anchorFill=\"#fff\"\n          anchorStroke=\"#000\"\n          anchorStrokeWidth={2}\n          anchorSize={20}\n          anchorCornerRadius={50}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Shapes with React-Konva\nDESCRIPTION: This code shows how to create an arc shape using React with react-konva components. It implements a React functional component that renders a Stage containing a Layer with an Arc, with properties for position, dimensions, angle, and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arc.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Arc } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Arc\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          innerRadius={40}\n          outerRadius={70}\n          angle={60}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Rectangle for Konva Node in JavaScript\nDESCRIPTION: Shows how to get the client rectangle of a Konva node, including all styling (strokes, shadows, etc.). Demonstrates usage with and without considering transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Pattern X Position in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal position (x-axis) of a fill pattern for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties in KonvaJS\nDESCRIPTION: Example of using the to() method to tween node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow opacity for a Konva shape. The opacity value must be between 0 (transparent) and 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring shadowForStrokeEnabled in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the shadowForStrokeEnabled property, which controls whether shadows are applied to strokes for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Listening Property in Konva.js\nDESCRIPTION: Example demonstrates how to get and set the listening attribute on a Konva node. The listening property determines if a node responds to events and is included in hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Size of Konva.js Nodes\nDESCRIPTION: Illustrates how to get and set the size (width and height) of a Konva.js node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Shows how to get and set just the X component of the fill pattern offset for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Adding Children to Layer in JavaScript\nDESCRIPTION: Examples of adding one or multiple child nodes to a layer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlayer.add(rect);\nlayer.add(shape1, shape2, shape3);\n// empty arrays are accepted, though each individual child must be defined\nlayer.add(...shapes);\n```\n\n----------------------------------------\n\nTITLE: Shape Caching in Konva.js\nDESCRIPTION: Examples showing how to implement and manage canvas caching for improved drawing performance and filter application.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point of a linear gradient stroke in a Konva shape. The start point defines where the gradient begins for the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity in KonvaJS\nDESCRIPTION: Shows how to get and set the opacity of a node, with values ranging from 0 (fully transparent) to 1 (fully opaque), affecting the node's visual transparency.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Composite Operations in JavaScript\nDESCRIPTION: Shows how to get and set the globalCompositeOperation of a Konva node, which affects how the node is rendered relative to other nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Partial Implementation of Editable Text with Vue.js and Konva\nDESCRIPTION: This code snippet shows the beginning of a Vue.js implementation for editable text in Konva. It sets up the template with a v-stage, v-layer, and v-text component with necessary configuration and event handlers for double-click and transformation events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Editable_Text.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        ref=\"textNode\"\n        :config=\"{\n          text: text,\n          x: 50,\n          y: 80,\n          fontSize: 20,\n          draggable: true,\n          width: textWidth,\n          visible: !isEditing,\n        }\"\n        @dblclick=\"handleTextDblClick\"\n        @dbltap=\"handleTextDblClick\"\n        @transform=\"handleTransform\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the shadow color for Konva shapes using different color formats (string, hex, rgb, rgba).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Konva.js\nDESCRIPTION: Example showing how to get and set the draggable flag for a node, which determines if it can be moved by dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in KonvaJS\nDESCRIPTION: Method to get or set fill priority, determining which fill type (color, pattern, linear-gradient, or radial-gradient) takes precedence when multiple fill types are defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Removing and Destroying Konva Nodes in JavaScript\nDESCRIPTION: Shows how to remove a Konva node from its parent without destroying it, and how to completely destroy a node. Demonstrates the difference between remove() and destroy() methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// remove a node from parent, but don't destroy\nnode.remove();\n\n// remove and destroy a node\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Skew X in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the horizontal skew value of a node. This creates a slant transformation along the X axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Shift Behavior in Konva Transformer\nDESCRIPTION: Demonstrates how to get and set the shift key behavior while resizing transformer anchors at corners.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar shiftBehavior = transformer.shiftBehavior();\n\n// set\ntransformer.shiftBehavior('none');\n```\n\n----------------------------------------\n\nTITLE: Managing Node Listening State in KonvaJS\nDESCRIPTION: Demonstrates getting and setting whether a node listens for events, affecting hit detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Checking Konva Node Screen Position\nDESCRIPTION: Demonstrates how to check if a node is visible on screen with optional margins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set just the y component of the fill pattern offset for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point in Konva.js\nDESCRIPTION: Methods to get and set the fill linear gradient end point as an object with x and y coordinates. This method accepts an object with x and y properties and returns the current end point object when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point for a linear gradient fill, which defines where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Node Container Manipulation in Konva.js\nDESCRIPTION: Illustrates methods for changing the position of a node within its container and moving a node to a different container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Stroke Linear Gradient End Point X in Konva.js\nDESCRIPTION: Examples of how to get and set the x-coordinate of the end point for a linear gradient stroke. This controls the horizontal component of the stroke gradient's direction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in Konva.js\nDESCRIPTION: Shows how to retrieve a specific attribute from a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Setting Node Filters in KonvaJS\nDESCRIPTION: Examples of getting and setting filters that are applied to cached canvases.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listeners in React with Konva\nDESCRIPTION: React implementation showing how to conditionally render click handlers on Konva shapes using state management. Uses react-konva components and demonstrates a declarative approach to event handling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Remove_Event.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [hasListener, setHasListener] = useState(true);\n\n  return (\n    <>\n      <button onClick={() => setHasListener(false)}>\n        Remove click listener\n      </button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Circle\n            x={window.innerWidth / 2}\n            y={window.innerHeight / 2}\n            radius={70}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n            onClick={hasListener ? () => alert('you clicked the circle') : null}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Bezier Curve with KonvaJS in Vue\nDESCRIPTION: Computes the configuration for a bezier curve with custom drawing implementation. This creates a blue stroke bezier curve using the sceneFunc to define custom drawing with start, control1, control2, and end points.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bezierConfig = computed(() => ({\n  stroke: 'blue',\n  strokeWidth: 5,\n  sceneFunc: (ctx, shape) => {\n    ctx.beginPath();\n    ctx.moveTo(bezierPoints.start.x, bezierPoints.start.y);\n    ctx.bezierCurveTo(\n      bezierPoints.control1.x, bezierPoints.control1.y,\n      bezierPoints.control2.x, bezierPoints.control2.y,\n      bezierPoints.end.x, bezierPoints.end.y\n    );\n    ctx.fillStrokeShape(shape);\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Konva.js\nDESCRIPTION: Examples illustrating how to get and set the draggable flag for a Konva node. This flag determines whether a node can be moved using drag and drop interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation of a Konva.js Node\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation of a node, which determines how the node is composited with elements behind it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Visual Properties\nDESCRIPTION: Examples of setting globalCompositeOperation and opacity on Konva nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's name property, including support for multiple space-separated names similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Example of checking if a Konva node has a specific name. The hasName method returns a boolean indicating whether the node has the given name.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Managing perfectDrawEnabled for Konva.js Shapes\nDESCRIPTION: Shows how to get and set the perfectDrawEnabled property. This can be used to improve performance for shapes with fill, stroke, and opacity by disabling perfect drawing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern scale for a shape, allowing control of pattern size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation for Konva Nodes\nDESCRIPTION: Shows how to get and set the rotation of a Konva node in degrees. Rotation is applied around the node's offset point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Demonstrates how to retrieve the absolute scale of a Konva.js node, taking into account ancestor scales.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Rotation in Konva.js\nDESCRIPTION: Examples of how to set and get the rotation angle (in degrees) for a fill pattern. This allows for rotating images or patterns used to fill shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern offset X coordinate for a shape in Konva.js. This affects the horizontal positioning of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows different ways to clone a node, including making an exact copy or overriding specific properties. This is useful for creating copies of complex nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Redo Functionality for Image Operations\nDESCRIPTION: Restores a previously undone state from history. The function increments the history step if not at the end of history, then retrieves and parses the corresponding JSON state to advance to the next image configuration.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleRedo = () => {\n  if (historyStep.value === history.value.length - 1) return;\n  historyStep.value++;\n  images.value = JSON.parse(history.value[historyStep.value]);\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes Using Selectors\nDESCRIPTION: Method to find nodes within a container using various selector types: id, name, node type, or custom function. Returns an array of matching nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPassing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image asynchronously using the toImage method with a callback function to handle the resulting image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Radial Gradients in Konva.js\nDESCRIPTION: Methods to configure radial gradient properties including start/end radius and color stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Getting Attributes from Konva.js Nodes\nDESCRIPTION: Shows how to retrieve the value of a specific attribute from a Konva.js node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Applying HSV Filter in Konva.js\nDESCRIPTION: Shows how to apply an HSV (Hue, Saturation, Value) filter to a Konva image. The filter is added and the value is adjusted.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimage.filters([Konva.Filters.HSV]);\nimage.value(200);\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes in Layer using Selectors in JavaScript\nDESCRIPTION: Examples of finding nodes in a layer using various selectors, including id, name, type, and custom functions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPassing a string as a selector\n// select node with id foo\nvar node = stage.find('#foo');\n\n// select nodes with name bar inside layer\nvar nodes = layer.find('.bar');\n\n// select all groups inside layer\nvar nodes = layer.find('Group');\n\n// select all rectangles inside layer\nvar nodes = layer.find('Rect');\n\n// select node with an id of foo or a name of bar inside layer\nvar nodes = layer.find('#foo, .bar');\n\nPassing a function as a selector\n\n// get all groups with a function\nvar groups = stage.find(node => {\n return node.getType() === 'Group';\n});\n\n// get only Nodes with partial opacity\nvar alphaNodes = layer.find(node => {\n return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to find ancestors of a node based on selector criteria. This method retrieves all parent nodes that match the specified selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Manipulating Shadow Offset X in Konva.js\nDESCRIPTION: Shows how to get and set the shadow offset x-coordinate for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Y Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the y-axis offset of a node. Offset adjusts the transformation point for operations like rotation and scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Using perfectDrawEnabled Property in Konva.js\nDESCRIPTION: Shows how to get and set the perfectDrawEnabled property. Setting to false can improve performance for shapes with fill, stroke and opacity, at the cost of some visual quality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get and set the shadow blur effect intensity for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Between Containers in Konva.js\nDESCRIPTION: Demonstrates how to use the moveTo method to relocate a node to a different container. This is useful for changing a node's parent, such as moving it from one layer to another.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in Konva.js\nDESCRIPTION: Example of getting and setting a node's globalCompositeOperation, which affects how the node is rendered with other elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the start point for a linear gradient fill in KonvaJS shapes using x,y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in KonvaJS\nDESCRIPTION: Shows how to convert a Konva node into a Blob object using the toBlob method with async/await syntax, which is useful for saving the node as a file.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set the scale y property of a Konva.js node. The scaleY method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Ring Shape with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a ring shape using Konva.js in vanilla JavaScript. It initializes a Konva stage, adds a layer, and creates a ring with specified dimensions, position, and styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ring.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst ring = new Konva.Ring({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(ring);\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Implementation of Interactive Curve Editor\nDESCRIPTION: Vue 3 component for curve manipulation using KonvaJS Vue components. Uses reactive state management and computed properties for dynamic curve updates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <!-- Quadratic Curve -->\n      <v-shape :config=\"quadraticConfig\" />\n      \n      <!-- Bezier Curve -->\n      <v-shape :config=\"bezierConfig\" />\n      \n      <!-- Control Lines -->\n      <v-line :config=\"quadLineConfig\" />\n      <v-line :config=\"bezierLineConfig\" />\n      \n      <!-- [... rest of the Vue implementation ...] -->\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, reactive, computed } from 'vue';\n\n// [... rest of the Vue implementation ...]\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor of a Konva.js Node\nDESCRIPTION: Demonstrates how to find a specific ancestor of a node that matches a given selector using the findAncestor method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in Konva\nDESCRIPTION: Example showing how to get the client rectangle of a node with various configuration options. The method returns an object with x, y, width, and height properties that represent the node's bounding box.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Setting Y Offset for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the vertical (y) offset of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Stroke Color with Konva.js\nDESCRIPTION: Demonstrates how to get the current stroke color and set stroke color using different color formats including color string, hex, RGB, and RGBA with opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Distance in Konva.js\nDESCRIPTION: Shows how to set and get the drag distance threshold for a node. This determines how far the pointer must move before dragging begins, which can be set per node or globally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X coordinate of the start point for a linear gradient fill in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js\nDESCRIPTION: Gets or sets the fill color for a shape. Supports various color formats including color strings, hex values, RGB, and RGBA. Set to null to have no fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity of a Konva.js Node\nDESCRIPTION: Shows how to get and set the opacity of a node. Opacity values range from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Managing X Offset in Konva.js\nDESCRIPTION: Example of getting and setting a node's x offset, which affects the node's origin point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Start Point in KonvaJS\nDESCRIPTION: Shows how to get and set the start point for a radial gradient fill in KonvaJS shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point Y in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient end point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Konva Node Names and IDs in JavaScript\nDESCRIPTION: Shows how to get and set names and IDs for Konva nodes. Names can be used like CSS classes, while IDs are unique identifiers for the entire page.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Node Destruction in Konva.js\nDESCRIPTION: This snippet demonstrates how to completely remove and destroy a node in Konva.js. If the node is a container (Group, Stage, or Layer), it will destroy all children too.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Relative to Current Position in Konva.js\nDESCRIPTION: This code shows how to move a node by a relative amount from its current position. It takes a change object with x and y properties that specify the amount to move in each direction.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Ancestors of Konva.js Nodes\nDESCRIPTION: Demonstrates how to retrieve all ancestor nodes of a Konva.js node and process them.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Red Channel in Konva.js\nDESCRIPTION: Method to get or set the red channel value for the Konva.Filters.RGB filter. It accepts an integer between 0 and 255 to adjust the red component of the image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nred(red)\n```\n\n----------------------------------------\n\nTITLE: Using fillAfterStrokeEnabled in Konva.js\nDESCRIPTION: Example showing how to get and set the fillAfterStrokeEnabled property in Konva, which controls whether filling is drawn first (default) or stroke first.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Channel in Konva.js\nDESCRIPTION: Method to get or set the alpha channel value for the Konva.Filters.RGBA filter. It accepts a float between 0 and 1 to adjust the transparency of the image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nalpha(alpha)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Offset X in Konva.js\nDESCRIPTION: Illustrates how to get and set the offset x property of a Konva.js node. The offsetX method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Y Offset in Konva.js\nDESCRIPTION: Shows how to get and set just the vertical (y) offset of a shape's shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Repeat in Konva.js\nDESCRIPTION: Shows how to get and set the repeat behavior for a pattern fill. Options include 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Manipulating Z-Index and Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set z-index and position (both absolute and relative) of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Closed Flag in Konva.Line\nDESCRIPTION: Demonstrates how to check if a line is closed (forming a polygon) and how to set this property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get closed flag\nvar closed = line.closed();\n\n// close the shape\nline.closed(true);\n\n// open the shape\nline.closed(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in Konva.js\nDESCRIPTION: Example of getting and setting the drag distance threshold for a node or globally, which determines how far the pointer must move before dragging starts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient End Point in KonvaJS\nDESCRIPTION: Examples of getting and setting the fill radial gradient end point Y coordinate for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Offset in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern offset using an object with x and y properties. This controls the position of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Coordinate of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the y-coordinate position of a Konva node using the y method, providing a shorthand for vertical positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Curve Anchor Modification\nDESCRIPTION: React component implementation for interactive curve manipulation using KonvaJS React components. Uses React state to manage anchor positions and includes hover effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Stage, Layer, Circle, Line, Shape } from 'react-konva';\n\nconst ModifyCurvesDemo = () => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  \n  const [quadPoints, setQuadPoints] = React.useState({\n    start: { x: 60, y: 30 },\n    control: { x: 240, y: 110 },\n    end: { x: 80, y: 160 },\n  });\n  \n  // [... rest of the React implementation ...]\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction in Konva\nDESCRIPTION: Example of getting and setting the direction property of a Konva Text object, which can be used for right-to-left languages.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get direction\nvar direction = text.direction();\n\n// set direction\ntext.direction('rtl');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drawing Function with sceneFunc in Konva.js\nDESCRIPTION: Shows how to set a custom drawing function for a shape using sceneFunc. This function is used to draw the shape on the canvas and also for hit detection if hitFunc isn't defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Noise Filter in Konva.js\nDESCRIPTION: Shows how to apply a noise filter to a Konva node. The node is cached, the noise filter is added, and the noise level is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Noise]);\nnode.noise(0.8);\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Strokes in Konva.js\nDESCRIPTION: Gets or sets the dash array for strokes. This allows creating dashed or dotted lines with precise control over the dash and gap sizes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Scale in Konva.js\nDESCRIPTION: Example of getting and setting a node's scale on the x-axis only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Drag Distance in KonvaJS\nDESCRIPTION: Examples of getting and setting the minimum drag distance before dragging begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Managing Shadow Visibility in Konva.js\nDESCRIPTION: Shows how to get and set the shadow enabled flag for a shape in Konva.js. This allows enabling or disabling the shadow effect of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a node, creating a new instance with identical attributes, and how to override properties during cloning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set filters for a Konva.js node. Filters are applied to cached canvases and can include multiple effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Linear Gradient End Point X in Konva Shapes (JavaScript)\nDESCRIPTION: This code illustrates how to get and set the fill linear gradient end point x in a Konva shape. It uses the fillLinearGradientEndPointX method to access and modify the x-coordinate of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Using shadowForStrokeEnabled in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the shadowForStrokeEnabled property, which controls whether shadows are applied to strokes. Useful for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale X in KonvaJS\nDESCRIPTION: Demonstrates how to get the current horizontal scale value of a node and how to set it to a new value. This affects the width of the rendered node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Attribute Manipulation in Konva.js\nDESCRIPTION: Demonstrates how to get and set attributes of Konva.js nodes, including getting individual attributes, all attributes, and setting multiple attributes at once.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HSL Luminance in Konva.js\nDESCRIPTION: Method to get or set the HSL luminance for the Konva.Filters.HSL filter. It accepts a number between -1 and 1 to adjust the luminance level.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nluminance(value)\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a blob using the toBlob method. This asynchronous operation returns a Promise that resolves with the resulting blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in KonvaJS\nDESCRIPTION: Demonstrates how to get the position of the first pointer (mouse or touch) relative to the local coordinates of the current node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Dragging in KonvaJS\nDESCRIPTION: Examples of setting drag distance and drag bounds for a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelate Filter in Konva.js\nDESCRIPTION: Illustrates how to apply a pixelate filter to a Konva node. The node is cached, the pixelate filter is added, and the pixel size is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Pixelate]);\nnode.pixelSize(10);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Color in Konva.js\nDESCRIPTION: Gets or sets the stroke color of a shape with various color formats including string, hex, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in KonvaJS\nDESCRIPTION: Examples demonstrating how to get a node's absolute position, with the option to calculate relative to a specific ancestor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in KonvaJS\nDESCRIPTION: Method to get or set the X component of the fill pattern offset. This controls the horizontal position of the pattern relative to the shape's origin.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Shows how to add, check, and remove names from Konva nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting an Attribute on a Konva.js Node\nDESCRIPTION: Shows how to set a specific attribute value on a Konva.js node using the setAttr method. This example sets the x position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transforms for Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set the enabled transforms for a Konva.js node. This can be used to optimize drawing performance by limiting applied transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in KonvaJS\nDESCRIPTION: Method to get or set the Y component of the fill pattern scale. This controls the vertical scaling of the pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the x component of the linear gradient start point for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js\nDESCRIPTION: Shows how to get and set the fill color for a shape. The color can be specified as a string name, hex value, RGB, or RGBA value. Passing null removes the fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Pointer Position in Konva.js\nDESCRIPTION: Demonstrates how to get the position of a pointer (mouse or touch) relative to a node's local coordinates. This is useful when you need to determine where a user clicked relative to a specific shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting fillAfterStrokeEnabled in Konva.js\nDESCRIPTION: Gets or sets the fillAfterStrokeEnabled property, which controls whether fill appears on top of the stroke. Default is false. Useful for Text objects when you want the stroke to appear beneath the fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Animation Key\nDESCRIPTION: Examples showing how to get and set the animation key for a sprite.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get animation key\nvar animation = sprite.animation();\n\n// set animation key\nsprite.animation('kicking');\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index in Konva.js\nDESCRIPTION: Shows how to get and set the zIndex of a Konva node relative to its siblings. This controls the stacking order of nodes that share the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Applying Sepia Filter in Konva.js\nDESCRIPTION: Demonstrates how to apply a sepia filter to a Konva node. The node is cached and the sepia filter is added.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Sepia]);\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index in Konva.js\nDESCRIPTION: Example of getting and setting a node's z-index relative to its siblings. The z-index is only relative to the parent element, not absolute.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in Konva.js\nDESCRIPTION: Demonstrates how to get a node's absolute position relative to canvas or stage using getAbsolutePosition() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Managing Offset Y in KonvaJS\nDESCRIPTION: Shows how to get and set the vertical offset of a node, which affects the node's position relative to its defined coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Configuring shadowOffset in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadowOffset property of a Konva shape. This property defines the offset of the shadow relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting innerRadius for a Konva Ring\nDESCRIPTION: Shows how to get the current inner radius of a ring or set it to a new value. The innerRadius defines the distance from the center to the inner edge of the ring.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get inner radius\nvar innerRadius = ring.innerRadius();\n\n// set inner radius\nring.innerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Animating Konva.js Node Properties with Tween\nDESCRIPTION: Demonstrates how to use the 'to' method to create a tween animation for a Konva.js node's properties. This is a shorthand for creating a Konva.Tween object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient start point for a shape in Konva.js. This determines where the stroke's linear gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes\nDESCRIPTION: Example of setting a specific attribute on a Konva node using the setAttr method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the Y component of the linear gradient fill start point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Building Map Implementation - Vue with vue-konva\nDESCRIPTION: Vue 3 implementation of the interactive building map using vue-konva. Uses Vue's composition API with setup script and refs for reactivity, maintaining the same functionality as other versions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Interactive_Building_Map.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"backgroundImage\"\n        :config=\"{\n          x: 1,\n          y: 0,\n          image: backgroundImage\n        }\"\n      />\n    </v-layer>\n    // ... rest of Vue implementation\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.FastLayer in JavaScript\nDESCRIPTION: Constructor for creating a new FastLayer instance. This is deprecated and Konva.Layer with listening disabled should be used instead. FastLayer renders about 2x faster than normal layers but lacks node nesting, mouse/touch interactions, and event pub/sub capabilities.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.FastLayer(config)\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a Konva node with identical attributes and how to override specific properties in the cloned node. This allows using an existing node as a template for another node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates how to set attributes on a Konva node using the setAttr method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get and set the rotation of a Konva node in degrees. This controls the orientation of the node around its center.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset X in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set the horizontal shadow offset (x-axis) for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas\nDESCRIPTION: Method to clear the cached canvas for a node, which may be necessary after making changes that affect rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Konva.js\nDESCRIPTION: Illustrates different ways to fire events on a Konva.js node, including custom events and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Removing Node Names in KonvaJS\nDESCRIPTION: Shows how to remove specific names from a node while preserving others.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red selected');\nnode.removeName('selected');\nnode.hasName('selected'); // return false\nnode.name(); // return 'red'\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance for Konva Nodes\nDESCRIPTION: Demonstrates how to set the minimum drag distance for a Konva node, which determines how far the pointer must move before dragging begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Controlling shadowForStrokeEnabled in Konva.js\nDESCRIPTION: Demonstrates getting and setting the shadowForStrokeEnabled property. This is useful for performance optimization by controlling whether the stroke affects the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Node Destruction in KonvaJS\nDESCRIPTION: Example of completely removing and destroying a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Transparency in KonvaJS\nDESCRIPTION: Method for getting and setting alpha transparency value for filters. The alpha() method accepts values between 0 and 1. This method is used with Konva.Filters.RGBA filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nnode.alpha(0.5);  // Sets alpha transparency value\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Width in Konva.js\nDESCRIPTION: Shows how to get and set the stroke width of a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Applying Filters with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets filters that are applied to cached canvases. Filters must be applied after calling node.cache() and can be applied as a single filter or as an array of multiple filters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow X Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the horizontal (x) offset of a shape's shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point X in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient end point X coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas in JavaScript\nDESCRIPTION: Illustrates how to clear the cached canvas for a Konva node. This method is inherited from Konva.Node and is useful for updating the node's appearance after changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Setting Scale in Konva.js\nDESCRIPTION: Shows how to get and set the scale of a Konva node in both x and y dimensions. This controls the size of the node relative to its original dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Distance in KonvaJS\nDESCRIPTION: Demonstrates how to set the minimum drag distance before a node begins dragging. This can be set on individual nodes or globally for all nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Adding Names to Konva Nodes in JavaScript\nDESCRIPTION: Shows how to add a name to a Konva node and access the combined names. Names in Konva work similarly to CSS classes, allowing multiple names to be assigned to a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Toggling Fill Enabled State in Konva.js\nDESCRIPTION: Demonstrates how to check and toggle the fill enabled state of a shape. This allows enabling or disabling the fill rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Coordinate in Konva.js\nDESCRIPTION: Shows how to get and set the y-coordinate of a Konva node. This is a shorthand for accessing the y-position property directly.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js\nDESCRIPTION: Demonstrates how to get or set shadow color for a shape using different color formats including color strings, hex values, RGB, and RGBA values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Composite Operations in KonvaJS\nDESCRIPTION: Shows how to manage global composite operations for visual effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Setting shadowForStrokeEnabled in Konva.js\nDESCRIPTION: Example demonstrating how to configure shadows for strokes. When set to false, strokes will not affect shadows, which can improve performance for complex shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Using fillAfterStrokeEnabled in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fillAfterStrokeEnabled property which controls whether fill is drawn after stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Node OffsetY in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's offset on the y-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Blur in Konva.js\nDESCRIPTION: Shows how to get and set the shadow blur amount for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Finding Node Ancestors with Konva.js\nDESCRIPTION: Demonstrates how to find ancestors of a Konva node using the findAncestors method with a selector to filter results. This method returns an array of all ancestor nodes that match the specified selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Property in Svelte-Konva\nDESCRIPTION: To enable drag and drop for any node on the canvas, you need to set the 'draggable' property to true in the component's config prop. Svelte-konva automatically synchronizes the config with the Konva node on 'dragend' event.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Drag_And_Drop.md#2025-04-11_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\ndraggable: true\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in Konva.js\nDESCRIPTION: Example showing how to get and set the drag distance for a node or globally. This controls how far the pointer must move before dragging begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the start point for a radial gradient fill. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Canvas in Konva Nodes (JavaScript)\nDESCRIPTION: This code illustrates how to clear the cached canvas for a Konva node. It uses the clearCache method to remove any previously cached content, which can be useful for performance optimization or when updating node properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient end point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the end point for a fill radial gradient in a Konva Shape using an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point\nvar endPoint = shape.fillRadialGradientEndPoint();\n\n// set fill radial gradient end point\nshape.fillRadialGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Node Size in Konva.js\nDESCRIPTION: Demonstrates how to get and set the size of a Konva.js node. The size method can be used without parameters to retrieve the current size, or with an object containing width and height properties to set a new size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Dash Lines in Konva.js\nDESCRIPTION: Shows how to check, enable, or disable dashed lines in a Konva shape. When disabled, the shape will render solid lines regardless of dash properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting X Position in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the x-coordinate position of a node using the x method, which provides a simpler alternative to the position method for single-axis adjustments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip X Coordinate\nDESCRIPTION: Methods to set and get the X coordinate of the clipping region for a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Shadow in Konva.js\nDESCRIPTION: Demonstrates how to get the current shadow enabled state and how to enable or disable shadow on a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Toggling Stroke Enabled State in Konva.js\nDESCRIPTION: Shows how to check and toggle the stroke enabled state of a shape. This allows enabling or disabling the stroke rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point Y in JavaScript\nDESCRIPTION: Illustrates how to get and set the stroke linear gradient start point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in Konva.js\nDESCRIPTION: Gets or sets the line join style, which controls how lines are joined together. Options are 'miter', 'round', or 'bevel'. The default is 'miter'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Skewing Node in KonvaJS\nDESCRIPTION: Examples of setting skew properties for a node using skew(), skewX(), and skewY() methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew\nvar skew = node.skew();\n\n// set skew\nnode.skew({\n  x: 20,\n  y: 10\n});\n\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva.js\nDESCRIPTION: Example demonstrating different ways to set shadow colors for shapes. Shows color string, hex, RGB and RGBA notation with opacity control.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Stroke Width in Konva.js\nDESCRIPTION: Shows how to get and set the hit stroke width, which controls stroke width for hit detection areas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the rotation of a Konva node in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowColor in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadowColor property of a Konva shape. This property defines the color of the shadow for the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point in Konva.js\nDESCRIPTION: Method to get or set the end point for a linear gradient fill. Takes an object with x and y coordinates and returns an object with the same properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Shadow Effects for Strokes in Konva.js\nDESCRIPTION: Demonstrates how to get or set shadowForStrokeEnabled property, which determines if a stroke will cast shadows. Setting to false can improve performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Lines in Konva.js\nDESCRIPTION: Shows how to configure dashed strokes using the dash method. The parameter is an array that defines the dash pattern, with alternating values for dash length and gap length.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient Start Point X in Konva.js\nDESCRIPTION: Examples of how to get and set the x-coordinate of the start point for a radial gradient fill. This allows for horizontal positioning of the inner circle of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale X in Konva.js\nDESCRIPTION: Demonstrates how to get and set the scale x property of a Konva.js node. The scaleX method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Konva.js\nDESCRIPTION: This snippet shows how to enable or disable dragging functionality for a Konva node. The draggable method can be used to check the current state or toggle the ability to drag a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Drag Bounds in KonvaJS\nDESCRIPTION: Examples of getting and setting a function to constrain node dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternX in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the fillPatternX property of a Konva shape. This property defines the x-coordinate of the fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting X Offset for Konva.js Nodes\nDESCRIPTION: Example showing how to get and set the horizontal (x) offset of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions in Konva.js\nDESCRIPTION: Examples demonstrating how to get and set the size of a Konva node. The size method allows you to set both width and height simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern X Position in Konva.js\nDESCRIPTION: Example showing how to get and set the x-coordinate of a fill pattern. This affects the horizontal positioning of pattern images.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Ratio from Konva Canvas in JavaScript\nDESCRIPTION: Example of how to get the pixel ratio from a Konva canvas layer. This is useful for handling high-DPI displays.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixelRatio = layer.getCanvas.getPixelRatio();\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a Blob using the toBlob method. This method is asynchronous and returns a Promise.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset in Konva.js\nDESCRIPTION: Shows how to get and set the shadow offset, which controls the position of the shadow relative to the shape. Takes an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting lineCap for Stroke Appearance in Konva.js\nDESCRIPTION: Example demonstrating how to set line cap property which determines the shape of line endings. Options include butt, round, or square.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Bounds for Konva.js Nodes\nDESCRIPTION: Demonstrates how to set a custom drag bound function for a Konva.js node, allowing for controlled dragging behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Names on Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set names for Konva nodes. Names can function like CSS classes, with multiple names separated by spaces.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get name\nvar name = node.name();\n\n// set name\nnode.name('foo');\n\n// also node may have multiple names (as css classes)\nnode.name('foo bar');\n```\n\n----------------------------------------\n\nTITLE: Managing Closed Flag for Konva.Line in JavaScript\nDESCRIPTION: Demonstrates how to get and set the closed flag for a Konva.Line, which is inherited by Konva.Arrow. The closed method allows retrieving or setting whether the shape is closed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get closed flag\nvar closed = line.closed();\n\n// close the shape\nline.closed(true);\n\n// open the shape\nline.closed(false);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Pattern Y Position in Konva.js\nDESCRIPTION: Shows how to get or set the vertical (y) position of a fill pattern within a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Width in Konva\nDESCRIPTION: Example of measuring the pure text width without padding in a Konva Text object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = text.width();\n\n// set width\ntext.width(20);\n\n// set to auto\ntext.width('auto');\ntext.width() // will return calculated width, and not \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Konva.js Nodes\nDESCRIPTION: Example demonstrates how to apply visual filters to a Konva node. Filters are applied to cached canvases and can be used for visual effects like blur, sepia, and invert.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Browser Behavior in Konva.js\nDESCRIPTION: Examples showing how to get and set the preventDefault attribute for Konva shapes. This determines whether the browser's default behavior is prevented during pointer events, which affects native scrolling during drag operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Controlling Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get or set shadow opacity, which must be a value between 0 (transparent) and 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in KonvaJS\nDESCRIPTION: Example showing how to get a node's absolute rotation value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point X in Konva.js\nDESCRIPTION: Method to get or set the x-coordinate of the start point for a radial gradient fill. Takes a numerical parameter and returns a number representing the x-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffsetX in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadowOffsetX property of a Konva shape. This property defines the horizontal offset of the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node with Relative Coordinates in Konva.js\nDESCRIPTION: Shows how to use the move method to adjust a node's position relative to its current coordinates. This example demonstrates moving a node 1 pixel horizontally and 2 pixels vertically.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point in Konva.js\nDESCRIPTION: Method to get or set the end point for a linear gradient stroke. Takes an object with x and y coordinates and returns an object with the same properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Effects in Konva.js\nDESCRIPTION: Methods to control shadow, dash and stroke scaling effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Stroke Hit Detection in Konva.js (Deprecated)\nDESCRIPTION: Demonstrates how to get or set the strokeHitEnabled property, which determines if a stroke is drawn on the hit canvas. This is deprecated in favor of hitStrokeWidth().\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Controlling Stroke Scaling in Konva.js\nDESCRIPTION: Shows how to get and set the strokeScale enabled flag for a shape in Konva.js. This determines whether the stroke width scales with the shape or remains constant.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Adjusting HSV Value in Konva.js\nDESCRIPTION: Method to get or set the HSV value for the Konva.Filters.HSV filter. It accepts a number where 0 is no change, negative values decrease the value, and positive values increase it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nvalue(value)\n```\n\n----------------------------------------\n\nTITLE: Controlling Visibility in KonvaJS\nDESCRIPTION: Shows how to get and set the visibility of a node. Invisible nodes are not rendered on the canvas but still exist in the node tree.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Node in Konva.js\nDESCRIPTION: Shows how to get or set a node's position relative to its parent using the position method, which takes an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva node into an image asynchronously with a callback. This is useful for caching complex drawings as images to improve performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Pointer Width in JavaScript\nDESCRIPTION: Shows how to get and set the pointer width of a Konva.Arrow. The pointerWidth method allows retrieving the current width or setting a new width for the arrow pointer.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar pointerWidth = line.pointerWidth();\n\n// set width\nline.pointerWidth(15);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient End Points\nDESCRIPTION: Methods to get and set the end point coordinates for linear gradients using an object with x,y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Using strokeHitEnabled Property in Konva.js\nDESCRIPTION: This deprecated code shows how to access the strokeHitEnabled property, which determines if strokes are drawn on the hit canvas. Setting to false can improve performance but reduces the hit area of shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Ancestor in Konva.js\nDESCRIPTION: Shows how to find a specific ancestor node that matches a given selector. This returns only the first matching ancestor rather than an array of all matches.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow X Offset in Konva.js\nDESCRIPTION: Example demonstrating how to set just the horizontal (x) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Finding Single Ancestor with Konva.js in JavaScript\nDESCRIPTION: Shows how to find a specific ancestor node using the findAncestor method with a CSS-style selector to match a specific class name.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar group = node.findAncestors('.mygroup');\n```\n\n----------------------------------------\n\nTITLE: Filtering Layer Children in JavaScript\nDESCRIPTION: Example of getting children of a layer, with an optional filter function to select specific types of nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset Y in KonvaJS\nDESCRIPTION: Method to get or set the Y component of the fill pattern offset. This controls the vertical position of the pattern relative to the shape's origin.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset y\nvar patternOffsetY = shape.fillPatternOffsetY();\n\n// set fill pattern offset y\nshape.fillPatternOffsetY(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Shows how to get and set stroke linear gradient color stops for a shape. The example creates a gradient that transitions from red to blue to green.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Capabilities for Konva.js Nodes\nDESCRIPTION: Shows how to enable or disable specific transforms for a Konva.js node. This can be used to optimize drawing performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Setting strokeHitEnabled in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the deprecated strokeHitEnabled property of a Konva shape. This property affects hit detection for strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting fill pattern rotation in Konva.js\nDESCRIPTION: Shows how to get and set the rotation of a fill pattern in degrees for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Children from a Container\nDESCRIPTION: Method to retrieve direct descendant nodes from a container. Optionally accepts a filter function to return only specific node types.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get all children\nvar children = layer.getChildren();\n\n// get only circles\nvar circles = layer.getChildren(function(node){\n   return node.getClassName() === 'Circle';\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the scale for a pattern fill, controlling its size in both dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the stroke linear gradient start point for a Konva.js shape. The start point is defined by x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting X Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the horizontal offset of a Konva node. The offset determines the center point for transformations like rotation and scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Coordinate of Konva Nodes\nDESCRIPTION: Shows how to get and set the x-coordinate position of a Konva node using the x method, which provides a shorthand for setting horizontal position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Scale in Konva\nDESCRIPTION: Shows how to get and set just the y-axis scale of a Konva node. This allows vertical scaling independently of horizontal scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Height of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the height of a Konva node. This property affects the node's size before any scaling is applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Skew for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the horizontal skew (shear) transformation of a Konva node using the skewX method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Managing Shape Stroke Properties\nDESCRIPTION: Example showing various ways to get and set stroke color and width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting X Skew in Konva.js\nDESCRIPTION: Demonstrates how to get and set the horizontal skew of a Konva node. This creates a slanting effect along the vertical axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Y Offset in Konva.js\nDESCRIPTION: Shows how to get or set just the vertical (y) component of the shadow offset.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes in KonvaJS\nDESCRIPTION: Shows how to remove a node from its parent without destroying it, allowing it to be reused later.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Setting fill radial gradient start point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point for a fill radial gradient in a Konva Shape using an object with x and y coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in KonvaJS\nDESCRIPTION: Shows how to get and set the minimum drag distance before dragging begins, both per-node and globally.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Color in Konva Shapes\nDESCRIPTION: Gets or sets the shadow color for a shape. Supports various color formats including color strings, hex values, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Clip Functions with clipFunc\nDESCRIPTION: Methods to define custom clipping regions using drawing functions, allowing for complex shapes or even using Path2D objects with clip-rules.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient End Point Y in KonvaJS\nDESCRIPTION: Method for getting or setting the Y-coordinate of the fill linear gradient's end point. Returns the current Y value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Rule in Konva.js\nDESCRIPTION: Shows how to get and set the fill rule for a Konva.js shape. The fill rule determines how the shape is filled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Calculating Client Rectangle in Konva.js\nDESCRIPTION: Demonstrates how to use the getClientRect method to calculate the bounding rectangle of a Konva.js shape, with and without considering transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Controlling Pattern Repetition in Konva.js\nDESCRIPTION: Shows how to control the repetition behavior of fill patterns in Konva shapes. Options include 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Using hitStrokeWidth Property in Konva.js\nDESCRIPTION: This code demonstrates how to get and set the stroke width for hit detection. The 'auto' value means it equals the strokeWidth property. Setting a specific value changes hit detection behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Setting shadowForStrokeEnabled in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the shadowForStrokeEnabled property of a Konva shape. This property determines whether shadows are applied to strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient Start Point in Konva.js\nDESCRIPTION: Methods to get and set the fill radial gradient start point as an object with x and y coordinates. This method accepts an object with x and y properties and returns the current start point object when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point\nvar startPoint = shape.fillRadialGradientStartPoint();\n\n// set fill radial gradient start point\nshape.fillRadialGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Images for Fill in Konva.js\nDESCRIPTION: Shows how to get and set a fill pattern image for a Konva shape. This allows using images as repeating patterns to fill shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale in Konva.js\nDESCRIPTION: Shows how to get and set the scale of a fill pattern for a Konva shape. This controls the size of the pattern image within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale\nvar patternScale = shape.fillPatternScale();\n\n// set fill pattern scale\nshape.fillPatternScale({\n  x: 2,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Width in Konva.js\nDESCRIPTION: Shows how to get and set the width of a Konva node. This defines the intrinsic width of the node before any scaling is applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Position of a Konva.js Node\nDESCRIPTION: Shows how to get and set just the y coordinate of a node's position. This is a shorthand for setting only the vertical position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get y\nvar y = node.y();\n\n// set y\nnode.y(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the absolute position of a node relative to the stage, regardless of parent transformations or positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Browser Behavior in Konva.js\nDESCRIPTION: Examples of getting and setting preventDefault behavior for shapes to control native browser scrolling during drag and drop operations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Scale in Konva.js\nDESCRIPTION: Demonstrates how to get and set the horizontal scale (scaleX) of a Konva node. This affects only the width of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Konva Node Visibility and Event Listening in JavaScript\nDESCRIPTION: Illustrates how to check and modify a Konva node's visibility and event listening status, considering ancestor nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// check if node is listening for events\nvar isListening = node.isListening();\n\n// check if node is visible\nvar isVisible = node.isVisible();\n\n// show node\nnode.show();\n\n// hide node\nnode.hide();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X component of the linear gradient fill end point in a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Clip X Coordinate\nDESCRIPTION: Methods to get or set the x coordinate of a container's clipping region, allowing for precise control of the clipping area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);\n```\n\n----------------------------------------\n\nTITLE: Managing Arc Angle\nDESCRIPTION: Example showing how to get and set the angle of an Arc in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get angle\nvar angle = arc.angle();\n\n// set angle\narc.angle(20);\n```\n\n----------------------------------------\n\nTITLE: Creating AnimalOutline Component in Vue.js with Konva\nDESCRIPTION: This snippet defines the AnimalOutline component using Vue.js and Konva. It renders an image of an animal's silhouette based on the provided name and position props.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Animals_on_the_Beach_Game.mdx#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst AnimalOutline = {\n  template: `<v-image v-if=\"image\" :config=\"imageConfig\" />`,\n  props: ['name', 'x', 'y'],\n  setup(props) {\n    const [image] = useImage(`https://konvajs.org/assets/${props.name}-black.png`);\n    \n    const imageConfig = computed(() => ({\n      image: image.value,\n      x: props.x,\n      y: props.y\n    }));\n\n    return { image, imageConfig };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Radial Gradient in JavaScript with Konva\nDESCRIPTION: Shows how to get and set the start and end radii for a fill radial gradient in a Konva shape. It also demonstrates setting color stops for the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Configuring lineJoin for Stroke Appearance in Konva.js\nDESCRIPTION: Example showing how to set line join property which affects how lines connect at corners. Options include miter (default), round, or bevel.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Y Coordinate\nDESCRIPTION: Methods to set and get the Y coordinate of the clipping region for a container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Pattern Repeat Behavior in Konva.js\nDESCRIPTION: Example demonstrating how to control pattern repetition behavior for shape fills. Shows options for repeat-x, no-repeat, and accessing current repeat value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Using strokeHitEnabled Method in Konva.js Shapes (Deprecated)\nDESCRIPTION: Demonstrates the deprecated strokeHitEnabled method for Konva shapes. This method is used for performance optimization but has been replaced by hitStrokeWidth.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Rule in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet shows how to get and set the fill rule for a Konva shape. It uses the fillRule method to retrieve and modify the fill rule, which determines how the shape is filled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Offset in Konva.js\nDESCRIPTION: Shows how to get and set the shadow offset for a shape. The offset determines the position of the shadow relative to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset\nvar shadowOffset = shape.shadowOffset();\n\n// set shadow offset\nshape.shadowOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Container Clip\nDESCRIPTION: Method to get or set the clipping area for a container. Clipping restricts the visible area of all child nodes to the specified rectangle.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set the vertical scale of a fill pattern in a Konva shape. This affects the pattern's height.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Applying Brighten Filter in Konva.js\nDESCRIPTION: Shows how to apply a brighten filter to a Konva node. The node is cached, the brighten filter is added, and the brightness level is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Brighten]);\nnode.brightness(0.8);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Clip Height\nDESCRIPTION: Methods to control the height of a container's clipping region, defining how tall the visible area will be.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);\n```\n\n----------------------------------------\n\nTITLE: Checking for Stroke in Konva.js Shape in JavaScript\nDESCRIPTION: Illustrates how to check if a Konva.js Shape has a stroke. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// returns whether or not the shape will be stroked\nvar hasStroke = shape.hasStroke();\n```\n\n----------------------------------------\n\nTITLE: Configuring shadowForStrokeEnabled in Konva Shapes\nDESCRIPTION: Gets or sets the shadowForStrokeEnabled property. When set to false, stroke will not affect shadow, which can improve performance. Note that non-closed lines with this disabled will have no shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start point of a linear gradient fill in a Konva shape. The start point defines where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting fill rule in Konva.js\nDESCRIPTION: Shows how to get and set the fill rule (such as 'evenodd') for a Konva Shape, which determines how shapes are filled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Checking for Node Names in KonvaJS\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method, which returns a boolean indicating whether the node has the specified name.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in KonvaJS\nDESCRIPTION: Example showing how to get the absolute scale of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Out Events for Tooltip in Konva.js\nDESCRIPTION: Hides the tooltip when the mouse leaves a node. This function sets the tooltip's visibility property to false, making it disappear from view.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/20000_Nodes.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleMouseOut() {\n  tooltip.visible = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset Y in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the vertical shadow offset (y-axis) for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Managing PreventDefault Behavior in Konva.js\nDESCRIPTION: Example shows how to control the preventDefault behavior on Konva shapes which affects whether browser's default actions are allowed during pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Node Visibility and Position in Konva.js\nDESCRIPTION: Shows how to show/hide nodes, get relative pointer position, and manipulate node position within the hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Repeat Option in Konva.js\nDESCRIPTION: Demonstrates how to get and set the repetition behavior for a fill pattern. Options include 'repeat', 'repeat-x', 'repeat-y', and 'no-repeat' to control how patterns are tiled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in KonvaJS\nDESCRIPTION: Method to get or set the X component of the fill pattern scale. This controls the horizontal scaling of the pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Event Handling in KonvaJS\nDESCRIPTION: Examples of binding and handling various events in KonvaJS, including click, touch, and custom events with namespace support.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// add click listener\nnode.on('click', function() {\n  console.log('you clicked me!');\n});\n\n// get the target node\nnode.on('click', function(evt) {\n  console.log(evt.target);\n});\n\n// stop event propagation\nnode.on('click', function(evt) {\n  evt.cancelBubble = true;\n});\n\n// bind multiple listeners\nnode.on('click touchstart', function() {\n  console.log('you clicked/touched me!');\n});\n\n// namespace listener\nnode.on('click.foo', function() {\n  console.log('you clicked/touched me!');\n});\n\n// get the event type\nnode.on('click tap', function(evt) {\n  var eventType = evt.type;\n});\n\n// get native event object\nnode.on('click tap', function(evt) {\n  var nativeEvent = evt.evt;\n});\n\n// for change events, get the old and new val\nnode.on('xChange', function(evt) {\n  var oldVal = evt.oldVal;\n  var newVal = evt.newVal;\n});\n\n// get event targets\n// with event delegations\nlayer.on('click', 'Group', function(evt) {\n  var shape = evt.target;\n  var group = evt.currentTarget;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Shadow in Konva.js\nDESCRIPTION: Demonstrates how to get, enable, and disable the shadow for a Konva shape. When shadow is disabled, the shape will not cast a shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow enabled flag\nvar shadowEnabled = shape.shadowEnabled();\n\n// disable shadow\nshape.shadowEnabled(false);\n\n// enable shadow\nshape.shadowEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Label Constructor\nDESCRIPTION: Creates a new Label instance in Konva which consists of a Text and Tag shape. The constructor accepts various configuration parameters including position, dimensions, visibility, event handling, and transformation properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Label.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Label(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in KonvaJS\nDESCRIPTION: Shows how to get and set the x-axis scale of a fill pattern in KonvaJS shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js\nDESCRIPTION: Example demonstrating how to control shadow opacity. Values must be between 0 (transparent) and 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Setting sceneFunc in Konva.js Shape\nDESCRIPTION: Example showing how to get and set the sceneFunc, which is the custom draw function used to render the shape on the canvas and for hit detection if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation and Handling Lifecycle in Vue\nDESCRIPTION: Sets up the animation by loading the bunny image, creating initial bunnies, and starting the animation loop. It also handles component unmounting by canceling the animation frame.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nonMounted(() => {\n  const img = new Image();\n  img.src = 'https://konvajs.org/assets/bunny.png';\n  img.onload = () => {\n    bunnyImage.value = img;\n    \n    // Add initial bunnies\n    const initialBunnies = Array(START_COUNT)\n      .fill(0)\n      .map(() => \n        createBunny(\n          Math.random() * stageConfig.width,\n          Math.random() * stageConfig.height\n        )\n      );\n    \n    bunnies.value = initialBunnies;\n    count.value = START_COUNT;\n    \n    // Start animation\n    animationFrameId.value = requestAnimationFrame(update);\n  };\n  \n  onUnmounted(() => {\n    if (animationFrameId.value) {\n      cancelAnimationFrame(animationFrameId.value);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating and Scaling Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates how to rotate and scale Konva nodes. Rotation is specified in degrees, while scaling can be applied to both x and y axes independently.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Rule in KonvaJS\nDESCRIPTION: Examples of getting and setting the fill rule for shape rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Setting hitStrokeWidth in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the hitStrokeWidth property, which determines the stroke width used for hit detection in Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Applying Visual Filters in Konva.js\nDESCRIPTION: Demonstrates how to apply multiple visual filters to cached canvas elements, including blur, sepia and invert effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in Konva.js\nDESCRIPTION: Shows how to get or set the line join style for shapes. Options include 'miter', 'round', or 'bevel', with 'miter' being the default.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes in JavaScript\nDESCRIPTION: Shows how to set attributes on Konva nodes using the setAttr method. This method allows for dynamic property assignment.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Stroke in Konva.js\nDESCRIPTION: Shows how to get, enable, and disable the stroke for a Konva shape. When stroke is disabled, the shape's outline will not be rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Controlling Node Visibility in KonvaJS\nDESCRIPTION: Shows how to get and set the visible attribute of a node. This determines whether the node will be rendered. To check visibility considering parent nodes, use isVisible() instead.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternY in Konva.js\nDESCRIPTION: Example showing how to get and set the vertical position (y-coordinate) of a fill pattern for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Width in Konva.js\nDESCRIPTION: Demonstrates how to get and set the width of a Konva node. This controls the horizontal size of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in KonvaJS\nDESCRIPTION: Examples demonstrating how to get absolute position of a node, either relative to canvas or stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in Konva.js\nDESCRIPTION: Demonstrates how to get the absolute rotation of a node, which includes rotations from all ancestor nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Installing canvas dependency with npm\nDESCRIPTION: Installs the canvas package as a dependency to resolve module not found errors when using svelte-konva in server-side rendering contexts.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/SvelteKit.md#2025-04-11_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm i canvas\n```\n\n----------------------------------------\n\nTITLE: Moving Konva Node Relative to Current Position in JavaScript\nDESCRIPTION: Demonstrates how to move a Konva node by a relative amount from its current position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Demonstrates how to convert a Konva node to a canvas element, which can be useful for rendering or further processing.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Implementing Elastic Easing Functions in Konva.js\nDESCRIPTION: A collection of elastic easing functions that provide spring-like motion. Includes ElasticEaseIn(), ElasticEaseOut(), and ElasticEaseInOut() variations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nElasticEaseIn()\nElasticEaseOut()\nElasticEaseInOut()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Shadow Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set the shadow offset y-coordinate for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stroke Width in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the stroke width of a Konva Shape using the strokeWidth method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Managing Y Offset in Konva.js\nDESCRIPTION: Example of getting and setting a node's y offset, which affects the node's origin point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Shows how to get the absolute scale of a Konva.js node, taking into account its ancestor scales.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Setting fill color in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the fill color using various formats including color string, hex, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sprite Frame Rate\nDESCRIPTION: Examples of getting and setting the animation frame rate in frames per second.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get frame rate\nvar frameRate = sprite.frameRate();\n\n// set frame rate to 2 frames per second\nsprite.frameRate(2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Designer with Vanilla JavaScript and KonvaJS\nDESCRIPTION: Creates an interactive window frame designer using KonvaJS. Features include dynamic dimension controls, visual frame rendering, and measurement indicators. Supports direct dimension input through overlay inputs and maintains aspect ratio scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Simple_Window_Frame.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\n// ... rest of vanilla implementation\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Fill in Konva.js\nDESCRIPTION: Shows how to get the current fill enabled state and how to enable or disable the fill. When disabled, the shape will not display its fill regardless of other fill settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Fills in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set linear gradient color stops for fill in Konva shapes. Color stops define the colors and their positions along the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Stroke Scaling in Konva.js\nDESCRIPTION: Demonstrates how to get, enable, and disable stroke scaling for a Konva shape. When disabled, the stroke width won't change when the shape is scaled.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke scale enabled flag\nvar strokeScaleEnabled = shape.strokeScaleEnabled();\n\n// disable stroke scale\nshape.strokeScaleEnabled(false);\n\n// enable stroke scale\nshape.strokeScaleEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Y Offset in Konva.js\nDESCRIPTION: Gets or sets the shadow's vertical offset. Positive values move the shadow downward, negative values move it upward.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Node Removal in KonvaJS\nDESCRIPTION: Example of removing a node from its parent without destroying it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Offset X in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the offset X value of a node. The offset X affects the horizontal position of the node relative to its transform point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Offset Y in Konva.js\nDESCRIPTION: Demonstrates how to get and set the offset y property of a Konva.js node. The offsetY method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Position in Konva.js\nDESCRIPTION: Shows how to get and set the position of a Konva.js node relative to its parent. This is useful for positioning nodes within their containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Methods to get and set the stroke linear gradient end point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting X Position of Node in Konva.js\nDESCRIPTION: Demonstrates how to get or set just the x coordinate of a node's position using the x method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Applying Invert Filter in Konva.js\nDESCRIPTION: Illustrates how to apply an invert filter to a Konva node. The node is cached and the invert filter is added.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Invert]);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Arc Inner Radius\nDESCRIPTION: Example showing how to get and set the inner radius of an Arc shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get inner radius\nvar innerRadius = arc.innerRadius();\n\n// set inner radius\narc.innerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in KonvaJS\nDESCRIPTION: Examples showing how to clone nodes with and without property overrides.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Konva Node Attributes in JavaScript\nDESCRIPTION: Shows how to get and set attributes of Konva nodes, including individual attribute access and bulk attribute modification.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get a single attribute\nvar x = node.getAttr('x');\n\n// get all attributes\nvar attrs = node.getAttrs();\n\n// set multiple attributes at once\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Dash in Konva.js\nDESCRIPTION: Shows how to get, enable, and disable dashed lines for a Konva shape. When dash is disabled, the shape's stroke will be solid.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color and Width with Konva.js in Vanilla JavaScript\nDESCRIPTION: This snippet creates a pentagon using Konva.js and demonstrates how to change its stroke color and width on mouse hover. It uses the Konva.Stage, Konva.Layer, and Konva.RegularPolygon classes to set up the canvas and shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/02-Stroke.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n    container: 'container',\n    width: width,\n    height: height,\n});\nvar layer = new Konva.Layer();\n\nvar pentagon = new Konva.RegularPolygon({\n    x: stage.width() / 2,\n    y: stage.height() / 2,\n    sides: 5,\n    radius: 70,\n    fill: 'red',\n    stroke: 'black',\n    strokeWidth: 4,\n});\n\npentagon.on('mouseover', function () {\n    this.stroke('blue');\n    this.strokeWidth(20);\n});\n\npentagon.on('mouseout', function () {\n    this.stroke('black');\n    this.strokeWidth(4);\n});\n// add the shape to the layer\nlayer.add(pentagon);\n\n// add the layer to the stage\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow for Stroke in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadowForStrokeEnabled property, which determines whether the stroke affects the shadow of a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stroke Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Illustrates how to get and set the x-coordinate of the stroke linear gradient start point for a Konva.js shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Image Filter Method Signatures in KonvaJS\nDESCRIPTION: Method signatures for various image filter operations in Konva.js, including enhance, HSV/HSL manipulation, kaleidoscope effects, noise, pixelation, RGB adjustment, and threshold controls. Each method serves as both getter and setter for its respective filter property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_94\n\nLANGUAGE: JavaScript\nCODE:\n```\nenhance(amount: Float): Float\nhue(hue: Number): Number\nsaturation(saturation: Number): Number\nluminance(value: Number): Number\nvalue(value: Number): Number\nkaleidoscopePower(power: Integer): Integer\nkaleidoscopeAngle(degrees: Integer): Integer\nnoise(noise: Number): Number\npixelSize(pixelSize: Integer): Integer\nlevels(level: Number): Number\nred(red: Integer): Integer\ngreen(green: Integer): Integer\nblue(blue: Integer): Integer\nalpha(alpha: Float): Float\nthreshold(threshold: Number): Number\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Clip in JavaScript\nDESCRIPTION: Example of getting and setting the clip property for a container, which defines a clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Position of Konva Node in JavaScript\nDESCRIPTION: Shows how to calculate the absolute position of a Konva node, optionally relative to a specific ancestor node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Width in KonvaJS (JavaScript)\nDESCRIPTION: Shows how to get and set the width of a node. This affects the horizontal size of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Centered Scaling in Konva Transformer\nDESCRIPTION: Shows how to get and set whether resizing should be relative to node's center.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar centeredScaling = transformer.centeredScaling();\n\n// set\ntransformer.centeredScaling(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Pattern X Position in Konva\nDESCRIPTION: Gets or sets the x position of the fill pattern. This controls the horizontal positioning of the pattern image within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Clearing Node Cache in KonvaJS\nDESCRIPTION: Method to clear the cached canvas for a node. This is useful when the node's appearance has changed and the cache needs to be refreshed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Strokes in Konva.js\nDESCRIPTION: Shows how to apply dashed stroke patterns to shapes, including complex patterns with alternating dashes and dots.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient Start Point Y in Konva.js\nDESCRIPTION: Examples of how to get and set the y-coordinate of the start point for a radial gradient fill. This allows for vertical positioning of the inner circle of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Canvas in Konva.js\nDESCRIPTION: Example of converting a Konva node to a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Removing and Destroying Konva Nodes in JavaScript\nDESCRIPTION: Demonstrates how to remove a Konva node from its parent without destroying it, and how to completely destroy a node and its children.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// remove a node from parent, but don't destroy\nnode.remove();\n\n// remove and destroy a node\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Customizing Drag Boundaries in Konva.js\nDESCRIPTION: Examples showing how to get and set a custom drag bound function for a Konva node. This function allows you to override the default drag and drop positioning behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Linear Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the fill linear gradient start point for a shape in Konva.js. This determines where the linear gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Default Browser Behavior in KonvaJS\nDESCRIPTION: Shows how to get and set the preventDefault property which controls whether to prevent default browser behavior on pointer events. By default, shapes prevent native scrolling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get preventDefault\nvar shouldPrevent = shape.preventDefault();\n\n// set preventDefault\nshape.preventDefault(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Rule in JavaScript\nDESCRIPTION: Shows how to get and set the fill rule for a Konva shape. The fill rule can be 'evenodd' or 'nonzero'. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Shadow Offset X in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadow offset x-coordinate for a Konva Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Rotation in KonvaJS\nDESCRIPTION: Method for getting or setting the rotation angle (in degrees) of the fill pattern. Returns the current rotation value when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Accessing Absolute Scale in Konva.js\nDESCRIPTION: Shows how to access the absolute scale of a node which takes into account its ancestor scales. Returns an object with x and y properties representing scale values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Nodes in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get and set filters for a node. Filters are applied to cached canvases and can be used to create visual effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// get filters\nvar filters = node.filters();\n\n// set a single filter\nnode.cache();\nnode.filters([Konva.Filters.Blur]);\n\n// set multiple filters\nnode.cache();\nnode.filters([\n  Konva.Filters.Blur,\n  Konva.Filters.Sepia,\n  Konva.Filters.Invert\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Self Rectangle\nDESCRIPTION: Example showing how to get the self rectangle properties of different shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Scaling Node Properties in KonvaJS\nDESCRIPTION: Examples of getting and setting scale properties (scaleX and scaleY) for KonvaJS nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Node Visibility in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's visibility state.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// get visible attr\nvar visible = node.visible();\n\n// make invisible\nnode.visible(false);\n\n// make visible (according to the parent)\nnode.visible(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Easing in Konva.js\nDESCRIPTION: Basic linear easing function that provides constant speed motion without acceleration or deceleration.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nLinear()\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes and Drawing in Konva.js\nDESCRIPTION: Shows how to set attributes and trigger drawing of a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n\nnode.draw();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Scale X in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's horizontal scale factor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting perfectDrawEnabled in Konva.js\nDESCRIPTION: Example showing how to get and set the perfectDrawEnabled property, which can be used to improve performance by disabling perfect drawing for shapes with fill, stroke and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Firing Events on Nodes in Konva.js\nDESCRIPTION: Shows different ways to trigger events on a node, including standard events, custom events with custom data, and events that bubble up through the node hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Managing Attributes of Konva Node in JavaScript\nDESCRIPTION: Demonstrates how to get and set attributes of a Konva node, including getting a single attribute, all attributes, and setting multiple attributes at once.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get a single attribute\nvar x = node.getAttr('x');\n\n// get all attributes\nvar attrs = node.getAttrs();\n\n// set multiple attributes\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Between Containers in Konva.js\nDESCRIPTION: Demonstrates how to move a node from its current container to another container using the moveTo() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the starting point for a linear gradient fill. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point y\nvar startPointY = shape.fillLinearGradientStartPointY();\n\n// set fill linear gradient start point y\nshape.fillLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Transforms in KonvaJS\nDESCRIPTION: Demonstrates controlling which transforms are enabled for a node to optimize performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Rule in KonvaJS\nDESCRIPTION: Method for getting or setting the fill rule (e.g., 'evenodd') for determining how the shape is filled. Returns the current fill rule when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill rule\nvar fillRule = shape.fillRule();\n\n// set fill rule\nshape.fillRule('evenodd');\n```\n\n----------------------------------------\n\nTITLE: Configuring shadowBlur in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the shadowBlur property of a Konva shape. This property defines the blur level of the shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius for Konva Tag\nDESCRIPTION: Sets the corner radius for a Konva.Tag. This can either be a single value for all corners or an array specifying different radii for each corner (top-left, top-right, bottom-right, bottom-left).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tag.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntag.cornerRadius(20);\n\n// set different corner radius values\n// top-left, top-right, bottom-right, bottom-left\ntag.cornerRadius([0, 10, 20, 30]);\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity of Konva Nodes\nDESCRIPTION: Shows how to get and set the opacity of a Konva node using the opacity method. Values range from 0 (transparent) to 1 (opaque).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get opacity\nvar opacity = node.opacity();\n\n// set opacity\nnode.opacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring sceneFunc in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the sceneFunc property of a Konva shape. This function is used to draw the shape on a canvas and for hit detection if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Events in KonvaJS\nDESCRIPTION: Examples showing various ways to fire events on nodes, including custom events and bubbling events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// manually fire click event\nnode.fire('click');\n\n// fire custom event\nnode.fire('foo');\n\n// fire custom event with custom event object\nnode.fire('foo', {\n  bar: 10\n});\n\n// fire click event that bubbles\nnode.fire('click', null, true);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Width in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's width dimension.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tween instance in Konva.js\nDESCRIPTION: Constructor for creating a new Tween instance. Tweens enable you to animate a node between the current state and a new state with various control options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tween.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Tween(config)\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Image in JavaScript\nDESCRIPTION: Demonstrates how to convert a Konva node into an image using the toImage method. The method is asynchronous and returns a Promise or uses a callback function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Image in Konva.js\nDESCRIPTION: Shows how to convert a Konva node to an image using an async callback.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nvar image = node.toImage({\n  callback(img) {\n    // do stuff with img\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Node to Canvas in Konva.js\nDESCRIPTION: Shows how to convert a Konva node into a Canvas element, which can be used for further processing or display outside of the Konva framework.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Rotation in KonvaJS\nDESCRIPTION: Example showing how to get the absolute rotation of a node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute rotation\nvar rotation = node.getAbsoluteRotation();\n```\n\n----------------------------------------\n\nTITLE: Animating Node Properties with Konva.js Tween\nDESCRIPTION: Example demonstrating how to animate a Konva node's properties using the 'to' method, which is a shorter syntax for creating and executing a Konva.Tween.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Linear Gradient Start Point X in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet demonstrates how to get and set the stroke linear gradient start point x in a Konva shape. It uses the strokeLinearGradientStartPointX method to retrieve and modify the x-coordinate of the gradient's start point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale Y in Konva.js\nDESCRIPTION: Shows how to get and set just the Y scale of a fill pattern for a Konva shape. This controls the vertical scaling of the pattern image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale y\nvar patternScaleY = shape.fillPatternScaleY();\n\n// set fill pattern scale y\nshape.fillPatternScaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Hit Detection in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the deprecated strokeHitEnabled property, which affects stroke rendering on the hit canvas for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Enhancement in Konva.js\nDESCRIPTION: Method to get or set the enhance value for the Konva.Filters.Enhance filter. It accepts a float value between -1 and 1 to control the enhancement level.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nenhance(amount)\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Relative Position in Konva.js\nDESCRIPTION: Shows how to get and set a node's position relative to its parent container. This method is useful for positioning elements within group containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow for Stroke in Konva.js Shape in JavaScript\nDESCRIPTION: Shows how to enable or disable shadow for stroke in a Konva.js Shape. This can be useful for performance optimization. The default value is true. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting X Position of Konva Nodes\nDESCRIPTION: Demonstrates how to get and set just the x coordinate of a Konva node using the x method. This affects the horizontal position of the node relative to its parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Width with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the width of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Setting lineCap in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the lineCap property of a Konva shape. This property determines how the ends of lines are rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Linear Gradient End Point X in JavaScript\nDESCRIPTION: Illustrates how to get and set the fill linear gradient end point x coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Demonstrates how to add a name to a Konva node using the addName method. Names can be used as identifiers similar to CSS classes, allowing multiple names for a single node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Node Management in Konva.js\nDESCRIPTION: Examples of removing and destroying Konva nodes, including getting node attributes and ancestors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n\nnode.destroy();\n\nvar x = node.getAttr('x');\n\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Linear Gradient Start Point in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill linear gradient start point for a shape, defining where the gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke for Konva.Shape in JavaScript\nDESCRIPTION: Method to get or set the fillAfterStrokeEnabled property of a Konva.Shape. This property determines whether the fill is applied after the stroke, which can be useful for certain visual effects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node to Another Container in Konva.js\nDESCRIPTION: Shows how to move a Konva.js node from its current container to a new container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Radial Gradient Start Point X in JavaScript\nDESCRIPTION: Shows how to get and set the fill radial gradient start point x coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point x\nvar startPointX = shape.fillRadialGradientStartPointX();\n\n// set fill radial gradient start point x\nshape.fillRadialGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Managing X-Coordinate in Konva\nDESCRIPTION: Demonstrates how to get and set the x-coordinate of a Konva node. This method provides a shorthand for accessing just the x position property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get x\nvar x = node.x();\n\n// set x\nnode.x(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join for Konva.js Shape in JavaScript\nDESCRIPTION: Illustrates how to get and set the line join style for a Konva.js Shape. Options are 'miter', 'round', or 'bevel'. The default is 'miter'. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Absolute Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the absolute position of a Konva.js node in relation to the stage. This method allows precise positioning of elements regardless of parent containers.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Cap Style in Konva.js\nDESCRIPTION: Gets or sets the line cap style, which controls how line endings appear. Options are 'butt', 'round', or 'square'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Configuring lineJoin in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the lineJoin property of a Konva shape. This property determines how line segments are joined together.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Scale in Konva.js\nDESCRIPTION: Shows how to get and set the vertical scale (scaleY) of a Konva node. This affects only the height of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Converting Node to Blob in Konva.js\nDESCRIPTION: Demonstrates converting a Konva node to a blob using async/await.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Using scaleY with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the vertical scale of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Blur in Konva.js\nDESCRIPTION: Example showing how to get and set the blur amount for shadows. Higher values create softer shadow edges.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow blur\nvar shadowBlur = shape.shadowBlur();\n\n// set shadow blur\nshape.shadowBlur(10);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern X Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the X coordinate position of a fill pattern. This controls the horizontal positioning of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Shows how to get and set just the x component of the fill pattern offset for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point in Konva.js\nDESCRIPTION: Shows how to get and set the start point of a linear gradient stroke for a Konva shape. This controls where the stroke gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Capabilities in Konva.js\nDESCRIPTION: Examples showing how to get and set the transforms that are enabled for a Konva node. Transform settings can be configured to optimize draw performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point Y in Konva.js\nDESCRIPTION: Method to get or set the y-coordinate of the end point for a linear gradient stroke. Takes a numerical parameter and returns a number representing the y-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point y\nvar endPointY = shape.strokeLinearGradientEndPointY();\n\n// set stroke linear gradient end point y\nshape.strokeLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Bounds with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets a function to override the default drag and drop position. The function receives the absolute position and should return the constrained absolute position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Anchors\nDESCRIPTION: Example of getting and setting enabled transformer anchors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get list of handlers\nvar enabledAnchors = transformer.enabledAnchors();\n\n// set handlers\ntransformer.enabledAnchors(['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right']);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the line join property for a shape. The line join can be 'miter', 'round', or 'bevel', with 'miter' as the default.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point in KonvaJS\nDESCRIPTION: Method for getting or setting the end point (as an object with x and y coordinates) of the fill linear gradient. Returns the current end point when called without arguments.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point\nvar endPoint = shape.fillLinearGradientEndPoint();\n\n// set fill linear gradient end point\nshape.fillLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Node Animation in KonvaJS\nDESCRIPTION: Example of animating node properties using the to() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\ncircle.to({\n  x : 50,\n  duration : 0.5,\n  onUpdate: () => console.log('props updated'),\n  onFinish: () => console.log('finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Using offsetX with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the horizontal offset of a Konva node. The method can be called without parameters to retrieve the current value or with a numeric parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Converting Konva.js Node to Canvas\nDESCRIPTION: Shows how to convert a node to a canvas element. This is useful for exporting or further processing the node outside of Konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: Setting fillAfterStrokeEnabled in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the fillAfterStrokeEnabled property of a Konva shape. This property determines whether the fill is applied after the stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point X in Konva.js\nDESCRIPTION: Methods to get and set the stroke linear gradient end point X coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Creating Circle instance in Konva.js\nDESCRIPTION: Creates a new Circle instance using the Konva.Circle constructor with a configuration object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Circle(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Graph Enabled Flag (Deprecated)\nDESCRIPTION: Methods to get or set the hitGraphEnabled flag. This is deprecated and layer.listening(false) should be used instead. Disabling hit graph increases performance but disables mouse/touch events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// get hitGraphEnabled flag\nvar hitGraphEnabled = layer.hitGraphEnabled();\n\n// disable hit graph\nlayer.hitGraphEnabled(false);\n\n// enable hit graph\nlayer.hitGraphEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position of Konva.js Nodes\nDESCRIPTION: Demonstrates how to get and set the absolute position of a Konva.js node. This position is relative to the stage, not the node's parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Shape with Vue-Konva\nDESCRIPTION: This code snippet illustrates how to create a circle on an HTML5 canvas using Vue with vue-konva. It uses a template with v-stage, v-layer, and v-circle components, and defines the stage size and circle configuration as separate objects in the setup script.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Circle.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle :config=\"circleConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Transforms in KonvaJS\nDESCRIPTION: Demonstrates how to control which transforms are enabled for a node. Limiting transforms can improve drawing performance in some scenarios.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale Y in KonvaJS\nDESCRIPTION: Demonstrates how to get the current vertical scale value of a node and how to set it to a new value. This affects the height of the rendered node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Group.mdx#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale y\nvar scaleY = node.scaleY();\n\n// set scale y\nnode.scaleY(2);\n```\n\n----------------------------------------\n\nTITLE: Setting lineCap in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the lineCap property, which determines the shape of the end of lines (butt, round, or square).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Scene Drawing Function in Konva.js\nDESCRIPTION: Demonstrates how to get and set a scene drawing function for a Konva shape. The scene function is used to draw the shape on a canvas and will also be used for hit detection if no hitFunc is defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Color Stops in Konva.js\nDESCRIPTION: Demonstrates how to get and set fill radial gradient color stops for a Konva shape. The example shows creating a radial gradient with three color stops.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient color stops\nvar colorStops = shape.fillRadialGradientColorStops();\n\n// create a radial gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\n----------------------------------------\n\nTITLE: Optimizing Stroke Shadows in Vue Konva\nDESCRIPTION: Vue.js implementation of stroke shadow optimization in Konva. This example uses Vue's Composition API with refs to control Konva shapes, demonstrating the performance benefits of disabling stroke shadows through the shadowForStrokeEnabled property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Strokes.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer ref=\"layerRef\">\n      <!-- Circle with shadow for stroke (default) -->\n      <v-circle\n        ref=\"circleWithShadowRef\"\n        :config=\"circleWithShadowConfig\"\n      />\n      \n      <!-- Circle without shadow for stroke (optimized) -->\n      <v-circle\n        ref=\"circleOptimizedRef\"\n        :config=\"circleOptimizedConfig\"\n      />\n      \n      <!-- Labels -->\n      <v-text :config=\"defaultLabelConfig\" />\n      <v-text :config=\"optimizedLabelConfig\" />\n      \n      <!-- FPS counter -->\n      <v-text\n        ref=\"fpsTextRef\"\n        :config=\"fpsConfig\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleWithShadowConfig = {\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 5, y: 5 },\n  shadowOpacity: 0.5\n};\n\nconst circleOptimizedConfig = {\n  x: 250,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 5, y: 5 },\n  shadowOpacity: 0.5,\n  shadowForStrokeEnabled: false\n};\n\nconst defaultLabelConfig = {\n  x: 50,\n  y: 170,\n  text: 'With Stroke Shadow',\n  fontSize: 16\n};\n\nconst optimizedLabelConfig = {\n  x: 200,\n  y: 170,\n  text: 'Without Stroke Shadow\\n(Better Performance)',\n  fontSize: 16\n};\n\nconst fpsConfig = ref({\n  x: 10,\n  y: 10,\n  text: 'FPS: 0',\n  fontSize: 16\n});\n\nconst layerRef = ref(null);\nconst circleWithShadowRef = ref(null);\nconst circleOptimizedRef = ref(null);\nconst fpsTextRef = ref(null);\nlet anim = null;\n\nonMounted(() => {\n  anim = new Konva.Animation((frame) => {\n    // Rotate circles\n    circleWithShadowRef.value.getNode().rotation(frame.time * 0.1);\n    circleOptimizedRef.value.getNode().rotation(frame.time * 0.1);\n    \n    // Update FPS counter\n    fpsTextRef.value.getNode().text('FPS: ' + frame.frameRate.toFixed(1));\n  }, layerRef.value.getNode());\n\n  anim.start();\n});\n\nonUnmounted(() => {\n  if (anim) {\n    anim.stop();\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Node Z-Index in Konva.js\nDESCRIPTION: Demonstrates getting and setting z-index for Konva nodes relative to siblings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer Direction for Konva Tag\nDESCRIPTION: Sets the pointer direction for a Konva.Tag. The pointer can be configured to point up, right, down, left, or none, which affects how the tag is positioned relative to its target.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tag.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntag.pointerDirection('right');\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position in Konva.js\nDESCRIPTION: Shows how to get the absolute position of a node, optionally relative to a specific ancestor node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Modifying Stroke Linear Gradient End Point X in Konva Shapes (JavaScript)\nDESCRIPTION: This snippet demonstrates how to get and set the stroke linear gradient end point x in a Konva shape. It uses the strokeLinearGradientEndPointX method to retrieve and modify the x-coordinate of the gradient's end point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point x\nvar endPointX = shape.strokeLinearGradientEndPointX();\n\n// set stroke linear gradient end point x\nshape.strokeLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Node Ancestors in Konva.js\nDESCRIPTION: Demonstrates how to retrieve all ancestors of a Konva node and iterate through them to access their properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Image Smoothing in JavaScript\nDESCRIPTION: Examples of getting and setting the imageSmoothingEnabled flag for a layer. This affects how images are rendered on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get imageSmoothingEnabled flag\nvar imageSmoothingEnabled = layer.imageSmoothingEnabled();\n\nlayer.imageSmoothingEnabled(false);\n\nlayer.imageSmoothingEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Scale in Konva.js\nDESCRIPTION: Shows how to get and set the scale of a Konva node along x and y axes. Scale values are multipliers, where 1 represents 100% of the original size.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale\nvar scale = node.scale();\n\n// set scale\nshape.scale({\n  x: 2,\n  y: 3\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Shape with React in react-konva\nDESCRIPTION: This code demonstrates how to create an ellipse using the react-konva library. It renders a Stage component with a Layer containing an Ellipse component. The ellipse is centered on the screen with specific dimensions and styling properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ellipse.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Ellipse } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Ellipse\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          radiusX={100}\n          radiusY={50}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node X Offset in Konva.js\nDESCRIPTION: Shows how to get and set the x-axis offset of a node. Offset adjusts the transformation point for operations like rotation and scaling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.RegularPolygon in JavaScript\nDESCRIPTION: Constructor for creating a new RegularPolygon instance in Konva.js. It allows for the creation of regular polygons such as triangles, squares, pentagons, and hexagons.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.RegularPolygon(config)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Path in Konva.js\nDESCRIPTION: Constructor for creating a new Path instance in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Path(config)\n```\n\n----------------------------------------\n\nTITLE: Toggling Fill and Stroke Properties in Konva.js\nDESCRIPTION: Examples showing how to enable/disable fill, stroke, shadow and dash properties for Konva shapes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of Konva Event Handling\nDESCRIPTION: Vue-specific implementation of Konva event handling using Vue 3 composition API. Shows how to manage event listeners through a ref and conditional execution within the handler function.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Remove_Event.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"removeListener\">Remove click listener</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-circle\n          :config=\"circleConfig\"\n          @click=\"handleClick\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst hasListener = ref(true);\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleClick = () => {\n  if (hasListener.value) {\n    alert('you clicked the circle');\n  }\n};\n\nconst removeListener = () => {\n  hasListener.value = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stroke Width for Konva.js Shape in JavaScript\nDESCRIPTION: Shows how to get and set the stroke width of a Konva.js Shape. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar strokeWidth = shape.strokeWidth();\n\n// set stroke width\nshape.strokeWidth(10);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Color Stops in Konva.js\nDESCRIPTION: Methods to get and set fill/stroke linear gradient color stops, defining colors and positions for gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient color stops\nvar colorStops = shape.fillLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient color stops\nvar colorStops = shape.strokeLinearGradientColorStops();\n\n// create a linear gradient that starts with red, changes to blue\n// halfway through, and then changes to green\nshape.strokeLinearGradientColorStops([0, 'red', 0.5, 'blue', 1, 'green']);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Konva Node Z-Index in JavaScript\nDESCRIPTION: Shows how to get and set the z-index of a Konva node relative to its siblings. This affects the stacking order of nodes within their parent container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Methods to get and set the stroke linear gradient start point Y coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Managing Y-Offset in Konva\nDESCRIPTION: Demonstrates getting and setting the y-offset of a Konva node. Similar to x-offset, this affects the vertical component of the transformation point.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset y\nvar offsetY = node.offsetY();\n\n// set offset y\nnode.offsetY(3);\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Shape with Vue.js in vue-konva\nDESCRIPTION: This code shows how to implement an ellipse using the vue-konva library with Vue.js. It uses a template with v-stage, v-layer, and v-ellipse components. The ellipse configuration defines its position, dimensions, and styling properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ellipse.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-ellipse :config=\"ellipseConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst ellipseConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radiusX: 100,\n  radiusY: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Node Size in Konva.js\nDESCRIPTION: Shows how to get and set the width and height of a node. This provides a convenient way to manipulate both dimensions simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva Node to a Blob in JavaScript\nDESCRIPTION: Converts a Konva node into a Blob object using the toBlob method. This method is asynchronous and returns a Promise that resolves to the Blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Arc Outer Radius\nDESCRIPTION: Example showing how to get and set the outer radius of an Arc shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get outer radius\nvar outerRadius = arc.outerRadius();\n\n// set outer radius\narc.outerRadius(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set just the X coordinate of the start point for a linear gradient stroke.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Repeat in Konva.js\nDESCRIPTION: Shows how to get and set the fill pattern repeat property for a Konva shape. This determines how pattern images repeat within the shape bounds.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Managing Pattern Positioning in Konva.js\nDESCRIPTION: Examples showing how to control pattern positioning through offset and scale properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Stroke Linear Gradient End Point in Konva.js\nDESCRIPTION: Methods to get and set the stroke linear gradient end point as an object with x and y coordinates. This method accepts an object with x and y properties and returns the current end point object when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Noise Filter to Images with Vue in Konva.js\nDESCRIPTION: This snippet demonstrates how to apply a noise filter to an image and create a slider for controlling the filter intensity using Vue.js with vue-konva. It uses Vue's reactivity system to update the filter when the slider value changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Noise.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-image\n          ref=\"imageNode\"\n          :config=\"{\n            x: 50,\n            y: 50,\n            image: image,\n            draggable: true,\n            filters: [Konva.Filters.Noise],\n            noise: noise,\n          }\"\n        />\n      </v-layer>\n    </v-stage>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"1\"\n      step=\"0.1\"\n      :value=\"noise\"\n      @input=\"handleSlider\"\n      style=\"position: absolute; top: 20px; left: 20px\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, nextTick } from 'vue';\nimport { useImage } from 'vue-konva';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst noise = ref(0.5);\nconst imageNode = ref(null);\nconst [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n\nwatch(image, async (newImage) => {\n  if (newImage) {\n    await nextTick();\n    imageNode.value.getNode().cache();\n  }\n});\n\nconst handleSlider = (e) => {\n  noise.value = parseFloat(e.target.value);\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets the size of a node using an object with width and height properties. This provides a convenient way to set both dimensions at once.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Using strokeHitEnabled in Konva.js Shape\nDESCRIPTION: Example showing the deprecated strokeHitEnabled property, which has been replaced by hitStrokeWidth. Controls whether strokes are drawn on the hit canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Node Skew Y in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's vertical skew factor.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Threshold in Konva.js\nDESCRIPTION: Method for getting and setting threshold value for filters. Accepts values between 0-1 and is used with Konva.Filters.Threshold or Konva.Filters.Mask filters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nnode.threshold(value);   // Set threshold value (0-1)\n```\n\n----------------------------------------\n\nTITLE: Caching Konva Shapes in JavaScript\nDESCRIPTION: Examples of caching Konva nodes to improve drawing performance. Shows different ways to cache shapes with custom bounding boxes and debugging options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Images with Konva in Vue\nDESCRIPTION: This snippet demonstrates how to use Konva with Vue.js to display images on a canvas. It uses vue-konva components and the useImage hook to load and render images with various properties like position, scale, and corner radius.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Image.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-image\n        v-if=\"yodaImage\"\n        :config=\"{\n          x: 50,\n          y: 50,\n          image: yodaImage,\n          width: 106,\n          height: 118\n        }\"\n      />\n      <v-image\n        v-if=\"vaderImage\"\n        :config=\"{\n          x: 200,\n          y: 50,\n          image: vaderImage,\n          scaleX: 0.5,\n          scaleY: 0.5,\n          cornerRadius: 20\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { useImage } from 'vue-konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst [yodaImage] = useImage('https://konvajs.org/assets/yoda.jpg');\nconst [vaderImage] = useImage('https://konvajs.org/assets/darth-vader.jpg');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index in KonvaJS\nDESCRIPTION: Shows how to get and set the z-index of a node relative to its siblings with the same parent, which determines the stacking order of overlapping nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Calculating Client Rectangle in KonvaJS\nDESCRIPTION: Demonstrates how to use the getClientRect method to calculate the bounding rectangle of a Konva node, with options to include or exclude transformations, shadows, and strokes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Configuring perfectDrawEnabled in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set the perfectDrawEnabled property of a Konva shape. This property affects rendering performance for shapes with fill, stroke, and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Managing Height in Konva.js\nDESCRIPTION: Example of getting and setting a node's height.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Applying Threshold Filter to Image with Konva.js and React\nDESCRIPTION: This snippet demonstrates how to apply a threshold filter to an image using Konva.js in a React application. It uses the react-konva library and hooks to manage state and references.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/filters/Threshold.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useState, useEffect, useRef } from 'react';\nimport useImage from 'use-image';\n\nconst App = () => {\n  const [threshold, setThreshold] = useState(0.5);\n  const [image] = useImage('https://konvajs.org/assets/lion.png', 'anonymous');\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (image && imageRef.current) {\n      imageRef.current.cache();\n    }\n  }, [image]);\n\n  return (\n    <>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Image\n            ref={imageRef}\n            x={50}\n            y={50}\n            image={image}\n            draggable\n            filters={[Konva.Filters.Threshold]}\n            threshold={threshold}\n          />\n        </Layer>\n      </Stage>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.1\"\n        value={threshold}\n        onChange={(e) => setThreshold(parseFloat(e.target.value))}\n        style={{ position: 'absolute', top: '20px', left: '20px' }}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method. This is useful for conditional logic based on node naming.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Gradient Properties in JavaScript with Konva\nDESCRIPTION: Shows how to set and get linear gradient properties for both fill and stroke in a Konva shape. It demonstrates setting the start point for gradients.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient start point\nvar startPoint = shape.fillLinearGradientStartPoint();\n\n// set fill linear gradient start point\nshape.fillLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n\n// get stroke linear gradient start point\nvar startPoint = shape.strokeLinearGradientStartPoint();\n\n// set stroke linear gradient start point\nshape.strokeLinearGradientStartPoint({\n  x: 20,\n  y: 10\n});\n\n// get fill linear gradient start point x\nvar startPointX = shape.fillLinearGradientStartPointX();\n\n// set fill linear gradient start point x\nshape.fillLinearGradientStartPointX(20);\n\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Stroke Width in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the hit stroke width for a Konva Shape, which affects hit detection. The 'auto' value sets it equal to the regular stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Setting Konva Node Attributes\nDESCRIPTION: Example of setting an attribute on a Konva node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server\nDESCRIPTION: Commands for starting a development server after creating a Svelte project and installing dependencies. Includes an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/sveltekit/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffsetY in Konva.js\nDESCRIPTION: Example showing how to get and set the vertical shadow offset (y-coordinate) for a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring perfectDrawEnabled for Performance in Konva.js\nDESCRIPTION: Example showing how to get and set perfectDrawEnabled property to improve performance. Setting to false can improve rendering speed for shapes with fill, stroke and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Moving Nodes Between Containers in KonvaJS\nDESCRIPTION: Example demonstrating how to move a node from one container to another.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// move node from current layer into layer2\nnode.moveTo(layer2);\n```\n\n----------------------------------------\n\nTITLE: Checking Konva Node Visibility on Screen in JavaScript\nDESCRIPTION: Demonstrates how to check if a Konva node is visible on the screen using the isClientRectOnScreen method. This can be useful for performance optimizations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Fill in Konva.js\nDESCRIPTION: Demonstrates how to get, enable, and disable the fill for a Konva shape. When fill is disabled, the shape's interior will not be rendered.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill enabled flag\nvar fillEnabled = shape.fillEnabled();\n\n// disable fill\nshape.fillEnabled(false);\n\n// enable fill\nshape.fillEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting hitStrokeWidth for Hit Detection in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the stroke width for hit detection in Konva shapes. The 'auto' value makes hit stroke width equal to the actual stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Setting Pixel Ratio for Retina Devices in Konva.js\nDESCRIPTION: Sets the pixel ratio to 1 for Konva to reduce scaling work on retina devices, which can improve performance at the cost of some visual quality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nKonva.pixelRatio = 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Absolute Position with getAbsolutePosition in Konva.js\nDESCRIPTION: Demonstrates how to use getAbsolutePosition method to get a node's absolute position relative to the canvas or a specific ancestor node. This allows for precise positioning calculations within the canvas hierarchy.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Priority in Konva.js\nDESCRIPTION: Shows how to get and set fill priority, which determines the fill type to use when multiple are defined. Options include 'color', 'pattern', 'linear-gradient', and 'radial-gradient'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill priority\nvar fillPriority = shape.fillPriority();\n\n// set fill priority\nshape.fillPriority('linear-gradient');\n```\n\n----------------------------------------\n\nTITLE: Setting Draggable Property with KonvaJS in JavaScript\nDESCRIPTION: Gets or sets whether a node can be dragged. Setting to true enables drag and drop functionality, while setting to false disables it.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Transforms in KonvaJS (JavaScript)\nDESCRIPTION: Demonstrates how to get and set which transforms are enabled for a node. This can be used to improve drawing performance by limiting transforms.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Properties with Konva.js Filters\nDESCRIPTION: Creates a configuration object for Konva.js images with conditional blur filter application. The function returns properties including position, dimensions, draggable state, and appropriate filters based on the image's current filter setting.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst getImageConfig = (img) => ({\n  image: imageObj.value,\n  x: img.x,\n  y: img.y,\n  width: 100,\n  height: 100,\n  draggable: true,\n  filters: img.filter === 'blur' ? [Konva.Filters.Blur] : [],\n  blurRadius: img.filter === 'blur' ? 10 : 0\n});\n```\n\n----------------------------------------\n\nTITLE: Setting shadowOffsetX in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the shadow's horizontal offset independently.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset x\nvar shadowOffsetX = shape.shadowOffsetX();\n\n// set shadow offset x\nshape.shadowOffsetX(5);\n```\n\n----------------------------------------\n\nTITLE: Destroying Nodes in Konva.js\nDESCRIPTION: Demonstrates how to completely remove and destroy a Konva node. When a container node is destroyed, all its children are also destroyed.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Clip Y Coordinate\nDESCRIPTION: Methods to get or set the y coordinate of a container's clipping region, controlling the vertical position of the clipping area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Drawing with Vue in Konva\nDESCRIPTION: This snippet shows how to implement batch drawing in Vue with Konva. It creates a stage with a rectangle that rotates on mousemove events, using Vue refs to access Konva nodes and calling batchDraw() for optimal performance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Batch_Draw.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\" @mousemove=\"handleMouseMove\">\n    <v-layer ref=\"layerRef\">\n      <v-rect :config=\"rectConfig\" ref=\"rectRef\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Konva from 'konva';\n\n// For demo purposes, disable auto draw\nKonva.autoDrawEnabled = false;\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = ref({\n  x: window.innerWidth / 2 - 50,\n  y: window.innerHeight / 2 - 25,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nconst layerRef = ref(null);\nconst rectRef = ref(null);\n\nconst handleMouseMove = () => {\n  // rotate rectangle on mouse move\n  rectRef.value.getNode().rotate(5);\n  // use batchDraw instead of draw for better performance\n  layerRef.value.getNode().batchDraw();\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Modifying Fill Radial Gradient Start Point Y in JavaScript\nDESCRIPTION: Illustrates how to retrieve and set the fill radial gradient start point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Getting Shape Self Rectangle\nDESCRIPTION: Method to get the shape's self rectangle dimensions without transformations and styles.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\ncircle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Pixel Size in Konva.js\nDESCRIPTION: Method to get or set the pixel size for the Konva.Filters.Pixelate filter. It accepts an integer value to determine the size of the pixelation effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_74\n\nLANGUAGE: JavaScript\nCODE:\n```\npixelSize(pixelSize)\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Skew in Konva\nDESCRIPTION: Demonstrates getting and setting just the y-axis skew of a Konva node. This creates a vertical shearing effect on the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Rotating Rectangles with React-Konva\nDESCRIPTION: React implementation of the rotation animation using react-konva components. Uses useRef and useEffect hooks to manage the animation and component references. Implements cleanup on unmount by stopping the animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Rotation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Rect } from 'react-konva';\nimport { useEffect, useRef } from 'react';\n\nconst App = () => {\n  const blueRectRef = useRef(null);\n  const yellowRectRef = useRef(null);\n  const redRectRef = useRef(null);\n\n  useEffect(() => {\n    const angularSpeed = 90;\n    const anim = new Konva.Animation((frame) => {\n      const angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n      blueRectRef.current.rotate(angleDiff);\n      yellowRectRef.current.rotate(angleDiff);\n      redRectRef.current.rotate(angleDiff);\n    }, blueRectRef.current.getLayer());\n\n    anim.start();\n\n    return () => {\n      anim.stop();\n    };\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          ref={blueRectRef}\n          x={50}\n          y={50}\n          width={100}\n          height={50}\n          fill=\"#00D2FF\"\n          stroke=\"black\"\n          strokeWidth={4}\n          offsetX={0}\n          offsetY={0}\n        />\n        <Rect\n          ref={yellowRectRef}\n          x={200}\n          y={50}\n          width={100}\n          height={50}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n          offsetX={50}\n          offsetY={25}\n        />\n        <Rect\n          ref={redRectRef}\n          x={350}\n          y={50}\n          width={100}\n          height={50}\n          fill=\"red\"\n          stroke=\"black\"\n          strokeWidth={4}\n          offsetX={-50}\n          offsetY={25}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting fill color in Konva.js\nDESCRIPTION: Example showing how to get and set the fill color of a Konva shape using various color formats (string, hex, RGB, RGBA) or remove the fill with null.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Getting Layer Width\nDESCRIPTION: Method to retrieve the width of a layer. This getter returns the width of the stage, while the setter does nothing. To change width, use the stage width setter instead.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar width = layer.width();\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in Konva Node\nDESCRIPTION: Example showing how to clear the cached canvas of a Konva node. This is useful when the node's appearance needs to be updated after changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnode.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill Radial Gradient Start Point Y in JavaScript with Konva\nDESCRIPTION: Illustrates how to retrieve and modify the fill radial gradient start point y coordinate using Konva Shape methods.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient start point y\nvar startPointY = shape.fillRadialGradientStartPointY();\n\n// set fill radial gradient start point y\nshape.fillRadialGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Shows how to get and set just the X offset of a fill pattern for a Konva shape. This controls the horizontal position of the pattern image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting fillPatternImage in Konva.js Shape\nDESCRIPTION: Example showing how to set a pattern image as the fill for a shape using an Image object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Optimizing Stroke Shadows in Vanilla Konva.js\nDESCRIPTION: Example demonstrating the performance difference between shapes with and without stroke shadows enabled in Konva. The code creates two circles - one with default stroke shadow behavior and one with optimized performance by setting shadowForStrokeEnabled to false. It includes an animation to visualize the performance difference with an FPS counter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/Optimize_Strokes.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create shape with shadow for stroke (default)\nconst circleWithShadow = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 5, y: 5 },\n  shadowOpacity: 0.5,\n});\n\n// Create shape without shadow for stroke (optimized)\nconst circleOptimized = new Konva.Circle({\n  x: 250,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 5, y: 5 },\n  shadowOpacity: 0.5,\n  shadowForStrokeEnabled: false,\n});\n\n// Add labels\nconst defaultLabel = new Konva.Text({\n  x: 50,\n  y: 170,\n  text: 'With Stroke Shadow',\n  fontSize: 16,\n});\n\nconst optimizedLabel = new Konva.Text({\n  x: 200,\n  y: 170,\n  text: 'Without Stroke Shadow\\n(Better Performance)',\n  fontSize: 16,\n});\n\n// Add FPS counter\nconst fpsText = new Konva.Text({\n  x: 10,\n  y: 10,\n  text: 'FPS: 0',\n  fontSize: 16,\n});\n\nlayer.add(circleWithShadow);\nlayer.add(circleOptimized);\nlayer.add(defaultLabel);\nlayer.add(optimizedLabel);\nlayer.add(fpsText);\n\n// Create animation to demonstrate performance\nconst anim = new Konva.Animation((frame) => {\n  circleWithShadow.rotation(frame.time * 0.1);\n  circleOptimized.rotation(frame.time * 0.1);\n  \n  // Update FPS counter\n  fpsText.text('FPS: ' + frame.frameRate.toFixed(1));\n}, layer);\n\nanim.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Linear Gradient End Point Y in JavaScript\nDESCRIPTION: Shows how to get and set the fill linear gradient end point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point y\nvar endPointY = shape.fillLinearGradientEndPointY();\n\n// set fill linear gradient end point y\nshape.fillLinearGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva.Canvas in JavaScript\nDESCRIPTION: Constructor for the Konva.Canvas renderer. It wraps a native canvas element and is typically not used manually.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Canvas.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Canvas(config)\n```\n\n----------------------------------------\n\nTITLE: Creating External Store in Svelte\nDESCRIPTION: Demonstrates how to create a simple external store in Svelte using the writable store from svelte/store. This approach is recommended for state preservation during Hot Module Replacement (HMR).\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/konva_node/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transforms for Performance in Konva.js\nDESCRIPTION: Demonstrates how to control which transforms are enabled for a node. This can be used to optimize drawing performance by limiting which transformations are applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipping Functions with React in Konva.js\nDESCRIPTION: This snippet shows how to use clipping functions in a React component with react-konva. It creates a stage with a layer containing a group that has a clipping function. Inside the group, it renders 20 random green circles (blobs).\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/clipping/Clipping_Function.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Group, Circle } from 'react-konva';\n\nconst App = () => {\n  const blobs = Array.from({ length: 20 }, (_, i) => ({\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    radius: Math.random() * 50,\n  }));\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group\n          clipFunc={(ctx) => {\n            ctx.beginPath();\n            ctx.arc(200, 120, 50, 0, Math.PI * 2, false);\n            ctx.arc(280, 120, 50, 0, Math.PI * 2, false);\n          }}\n        >\n          {blobs.map((blob, i) => (\n            <Circle\n              key={i}\n              x={blob.x}\n              y={blob.y}\n              radius={blob.radius}\n              fill=\"green\"\n              opacity={0.8}\n            />\n          ))}\n        </Group>\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Arc Direction\nDESCRIPTION: Example showing how to get and set the clockwise direction flag of an Arc.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get clockwise flag\nvar clockwise = arc.clockwise();\n\n// draw arc counter-clockwise\narc.clockwise(false);\n\n// draw arc clockwise\narc.clockwise(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point Y in Konva.js\nDESCRIPTION: Shows how to get and set the vertical component of the linear gradient's start point for a stroke in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point y\nvar startPointY = shape.strokeLinearGradientStartPointY();\n\n// set stroke linear gradient start point y\nshape.strokeLinearGradientStartPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Using clipFunc for Custom Clipping in Konva Container\nDESCRIPTION: Example showing how to use a custom clipping function for a Konva container. The clipFunc method allows defining complex clipping regions using canvas drawing commands or Path2D objects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Cross-Origin Images with React-Konva\nDESCRIPTION: Shows how to implement CORS-enabled image loading in React using react-konva and the useImage hook. The hook automatically handles crossOrigin settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/posts/Tainted_Canvas.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Image } from 'react-konva';\nimport useImage from 'use-image';\n\nconst MyImage = ({ url }) => {\n  // useImage hook handles crossOrigin automatically\n  const [image] = useImage(url, 'Anonymous');\n  \n  return (\n    <Image\n      x={50}\n      y={50}\n      image={image}\n    />\n  );\n}\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <MyImage url=\"your-image-url\" />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Linear Gradient End Point in JavaScript\nDESCRIPTION: Shows how to retrieve and set the stroke linear gradient end point for a Konva shape. The end point is specified as an object with x and y coordinates. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient end point\nvar endPoint = shape.strokeLinearGradientEndPoint();\n\n// set stroke linear gradient end point\nshape.strokeLinearGradientEndPoint({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the website using Yarn package manager\nSOURCE: https://github.com/konvajs/site/blob/new/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient End Radius in Konva.js\nDESCRIPTION: Demonstrates getting and setting the fill radial gradient end radius for a shape in Konva.js. This determines the outer extent of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Events with React and Konva.js\nDESCRIPTION: React implementation of draggable stars with custom drop events using react-konva. Uses hooks for state management and refs for layer access.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/09_Drop_Events.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Text, Star } from 'react-konva';\nimport { useState, useRef } from 'react';\n\nconst App = () => {\n  const [stars] = useState(() =>\n    Array.from({ length: 10 }, (_, i) => ({\n      id: i,\n      x: window.innerWidth * Math.random(),\n      y: window.innerHeight * Math.random(),\n      fill: 'blue',\n      name: `star ${i}`,\n    }))\n  );\n  const [message, setMessage] = useState('');\n  const previousShapeRef = useRef(null);\n  const mainLayerRef = useRef(null);\n  const tempLayerRef = useRef(null);\n\n  const handleDragStart = (e) => {\n    const shape = e.target;\n    shape.moveTo(tempLayerRef.current);\n    setMessage('Moving ' + shape.name());\n  };\n\n  const handleDragMove = (e) => {\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    const shape = mainLayerRef.current.getIntersection(pos);\n\n    if (previousShapeRef.current && shape) {\n      if (previousShapeRef.current !== shape) {\n        previousShapeRef.current.fire('dragleave', { evt: e.evt }, true);\n        shape.fire('dragenter', { evt: e.evt }, true);\n        previousShapeRef.current = shape;\n      } else {\n        previousShapeRef.current.fire('dragover', { evt: e.evt }, true);\n      }\n    } else if (!previousShapeRef.current && shape) {\n      previousShapeRef.current = shape;\n      shape.fire('dragenter', { evt: e.evt }, true);\n    } else if (previousShapeRef.current && !shape) {\n      previousShapeRef.current.fire('dragleave', { evt: e.evt }, true);\n      previousShapeRef.current = undefined;\n    }\n  };\n\n  const handleDragEnd = (e) => {\n    const shape = e.target;\n    const stage = e.target.getStage();\n    const pos = stage.getPointerPosition();\n    const dropShape = mainLayerRef.current.getIntersection(pos);\n    \n    if (dropShape) {\n      previousShapeRef.current.fire('drop', { evt: e.evt }, true);\n    }\n    \n    shape.moveTo(mainLayerRef.current);\n    previousShapeRef.current = undefined;\n  };\n\n  const handleDragEnter = (e) => {\n    e.target.fill('green');\n    setMessage('dragenter ' + e.target.name());\n  };\n\n  const handleDragLeave = (e) => {\n    e.target.fill('blue');\n    setMessage('dragleave ' + e.target.name());\n  };\n\n  const handleDragOver = (e) => {\n    setMessage('dragover ' + e.target.name());\n  };\n\n  const handleDrop = (e) => {\n    e.target.fill('red');\n    setMessage('drop ' + e.target.name());\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer ref={mainLayerRef}>\n        <Text text={message} fill=\"black\" />\n        {stars.map((star) => (\n          <Star\n            key={star.id}\n            id={star.id}\n            name={star.name}\n            x={star.x}\n            y={star.y}\n            numPoints={10}\n            innerRadius={20}\n            outerRadius={25}\n            fill={star.fill}\n            shadowOffsetX={5}\n            shadowOffsetY={5}\n            draggable\n            onDragStart={handleDragStart}\n            onDragMove={handleDragMove}\n            onDragEnd={handleDragEnd}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n          />\n        ))}\n      </Layer>\n      <Layer ref={tempLayerRef} />\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Node Dimensions in KonvaJS\nDESCRIPTION: Examples of getting and setting width, height and size properties for KonvaJS nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Clipping Function in KonvaJS\nDESCRIPTION: Setting up custom clipping functions using Path2D or context drawing commands\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke Behavior in Konva\nDESCRIPTION: Shows how to get and set the fillAfterStrokeEnabled property, which controls whether the fill is drawn after the stroke. This is especially useful for text objects.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set stroke width\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Setting X Scale in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal scale of a Konva node. This allows for stretching or shrinking a node horizontally without affecting its vertical scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X scale of a fill pattern for a Konva shape. This controls the horizontal scaling of the pattern image.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Dragging in KonvaJS\nDESCRIPTION: Examples of configuring drag and drop functionality including drag distance, bounds and enabling/disabling dragging.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Shapes with Vue-Konva\nDESCRIPTION: This code demonstrates how to create an arc shape using Vue with vue-konva components. It defines a template with a v-stage containing a v-layer and v-arc, with reactive configuration objects for both the stage and arc properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Arc.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-arc :config=\"arcConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst arcConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  innerRadius: 40,\n  outerRadius: 70,\n  angle: 60,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill radial gradient start radius for a Konva shape. This property controls where the inner radius of a radial gradient begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Framework Name Reference in Markdown\nDESCRIPTION: Inline code formatting showing the framework name 'Konva' using markdown backticks\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/donate.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Konva`\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Circle Radius in Konva.js\nDESCRIPTION: Demonstrates how to get the current radius value and set a new radius value for a Konva Circle instance.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// get radius\nvar radius = circle.radius();\n\n// set radius\ncircle.radius(10);\n```\n\n----------------------------------------\n\nTITLE: Selecting Shapes by ID with Vue-Konva\nDESCRIPTION: Creates a draggable rectangle with an ID using Vue-Konva. Uses refs to access the layer node and findOne() method to select the rectangle by ID. When the button is clicked, the rectangle is animated to rotate and change color.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/selectors/Select_by_id.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"handleClick\" style=\"margin-bottom: 10px\">\n      Activate Rectangle\n    </button>\n    <v-stage :config=\"stageSize\">\n      <v-layer ref=\"layerRef\">\n        <v-rect\n          :config=\"rectConfig\"\n          @dragend=\"handleDragEnd\"\n        />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport Konva from 'konva';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst position = ref({\n  x: window.innerWidth / 2 - 25,\n  y: window.innerHeight / 2 - 25\n});\n\nconst rectConfig = ref({\n  x: position.value.x,\n  y: position.value.y,\n  width: 50,\n  height: 50,\n  fill: 'red',\n  id: 'myRect',\n  draggable: true\n});\n\nconst layerRef = ref(null);\n\nconst handleClick = () => {\n  // find rectangle by id and animate it\n  const rectangle = layerRef.value.getNode().findOne('#myRect');\n  rectangle.to({\n    duration: 1,\n    rotation: 360,\n    fill: 'blue',\n    easing: Konva.Easings.EaseInOut\n  });\n};\n\nconst handleDragEnd = (e) => {\n  const newPos = e.target.position();\n  position.value = newPos;\n  rectConfig.value.x = newPos.x;\n  rectConfig.value.y = newPos.y;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Handling in Konva Transformer\nDESCRIPTION: Demonstrates how to configure stroke handling during resize operations, useful when strokeScaleEnabled is false.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Transformer.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// get\nvar ignoreStroke = transformer.ignoreStroke();\n\n// set\ntransformer.ignoreStroke(true);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Linear Gradient End Point X in Konva.js\nDESCRIPTION: Method to get or set the x-coordinate of the end point for a linear gradient fill. Takes a numerical parameter and returns a number representing the x-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Drawing Function with sceneFunc in Konva.js\nDESCRIPTION: Shows how to get or set a custom scene drawing function that handles how a shape is rendered on the canvas. This function is also used for hit detection if hitFunc is not defined.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get scene draw function\nvar sceneFunc = shape.sceneFunc();\n\n// set scene draw function\nshape.sceneFunc(function(context, shape) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  // like stroke and fill\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Ring Shape with Konva.js in React\nDESCRIPTION: This snippet shows how to create a ring shape using Konva.js in a React application. It uses the react-konva library to render a Stage, Layer, and Ring component with specified properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Ring.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, Ring } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Ring\n          x={window.innerWidth / 2}\n          y={window.innerHeight / 2}\n          innerRadius={40}\n          outerRadius={70}\n          fill=\"yellow\"\n          stroke=\"black\"\n          strokeWidth={4}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting lineJoin in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the lineJoin property, which controls how lines are joined together. Options are miter, round, or bevel.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A basic robots.txt configuration that permits all user agents (web crawlers) full access to the website. The file contains a reference to the protocol documentation and no crawling restrictions.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/sveltekit/static/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Image Enhancement Filter Methods in Konva.js\nDESCRIPTION: Methods for applying and configuring various image filters including enhance, HSV/HSL adjustments, kaleidoscope, noise, pixelate, posterize, RGB/RGBA controls and threshold effects. Each method supports both getting and setting filter values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enhancement filter (-1 to 1)\nnode.enhance(amount);\n\n// HSV/HSL filters\nnode.hue(359);         // 0-359 degrees\nnode.saturation(0.5);  // -1 to 1\nnode.luminance(-0.5);  // -1 to 1\nnode.value(1.0);       // -1 to 1\n\n// Special effects\nnode.kaleidoscopePower(6);\nnode.kaleidoscopeAngle(45);\nnode.noise(0.5);        // 0-1\nnode.pixelSize(8);\nnode.levels(0.5);       // 0-1\n\n// Color adjustments\nnode.red(255);          // 0-255\nnode.green(128);        // 0-255\nnode.blue(64);          // 0-255\nnode.alpha(0.5);        // 0-1\n\n// Threshold effects\nnode.threshold(0.5);    // 0-1\n```\n\n----------------------------------------\n\nTITLE: Canceling Event Propagation in Vue with Konva\nDESCRIPTION: Implements event bubble cancellation using Vue-Konva components. Uses a template-based approach with v-stage and v-layer components, demonstrating proper event handling in Vue.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/events/Cancel_Propagation.mdx#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer @click=\"handleLayerClick\">\n      <v-circle\n        :config=\"circleConfig\"\n        @click=\"handleCircleClick\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n\nconst handleCircleClick = (e) => {\n  alert('You clicked on the circle');\n  // stop event bubble\n  e.cancelBubble = true;\n};\n\nconst handleLayerClick = () => {\n  alert('You clicked on the layer');\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Controlling Wedge Direction\nDESCRIPTION: Methods to get or set the clockwise drawing direction of a wedge.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get clockwise flag\nvar clockwise = wedge.clockwise();\n\n// draw wedge counter-clockwise\nwedge.clockwise(false);\n\n// draw wedge clockwise\nwedge.clockwise(true);\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Pattern Scale X in Konva.js\nDESCRIPTION: Demonstrates how to get and set just the X component of the fill pattern scale. This controls the horizontal scaling of the pattern within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern scale x\nvar patternScaleX = shape.fillPatternScaleX();\n\n// set fill pattern scale x\nshape.fillPatternScaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hit Stroke Width in Konva.js\nDESCRIPTION: Shows how to get or set the stroke width used for hit detection in a Konva shape. The default value 'auto' makes hit stroke width equal to the regular stroke width.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke width\nvar hitStrokeWidth = shape.hitStrokeWidth();\n\n// set hit stroke width\nshape.hitStrokeWidth(20);\n// set hit stroke width always equals to scene stroke width\nshape.hitStrokeWidth('auto');\n```\n\n----------------------------------------\n\nTITLE: Configuring Fill After Stroke for Konva.js Shape in JavaScript\nDESCRIPTION: Demonstrates how to enable or disable filling after stroking for a Konva.js Shape. This can be useful for text objects. The default is false. This method is inherited from the base Shape class.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Text.mdx#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// get fillAfterStrokeEnabled\nvar fillAfterStrokeEnabled = shape.fillAfterStrokeEnabled();\n\n// set fillAfterStrokeEnabled\nshape.fillAfterStrokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Modifying Fill Radial Gradient End Point Y in JavaScript\nDESCRIPTION: Illustrates how to retrieve and set the fill radial gradient end point y coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset in Konva.js\nDESCRIPTION: Demonstrates how to get and set the fill pattern offset for a Konva shape. This controls the position of the pattern image within the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset\nvar patternOffset = shape.fillPatternOffset();\n\n// set fill pattern offset\nshape.fillPatternOffset({\n  x: 20,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store for HMR State Preservation in Svelte\nDESCRIPTION: This code snippet demonstrates how to create a simple external store in Svelte to retain component state during Hot Module Replacement (HMR). It uses Svelte's writable store to create a persistent state container that won't be replaced during HMR updates.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/labels/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Width in Konva.js\nDESCRIPTION: Illustrates how to get and set the width property of a Konva.js node. The width method can be used without parameters to retrieve the current value, or with a number parameter to set a new value.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// get width\nvar width = node.width();\n\n// set width\nnode.width(100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Line with Vue-Konva\nDESCRIPTION: Vue implementation of a draggable line using vue-konva. Uses reactive state for position management and includes event handlers for drag and mouse interactions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/04_Drag_a_Line.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-line\n        :config=\"lineConfig\"\n        @dragend=\"handleDragEnd\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst position = reactive({ x: 50, y: 50 });\n\nconst lineConfig = {\n  x: position.x,\n  y: position.y,\n  points: [0, 0, 150, 0],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  draggable: true\n};\n\nconst handleDragEnd = (e) => {\n  position.x = e.target.x();\n  position.y = e.target.y();\n};\n\nconst handleMouseEnter = () => {\n  document.body.style.cursor = 'pointer';\n};\n\nconst handleMouseLeave = () => {\n  document.body.style.cursor = 'default';\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking if Konva Node is Visible on Screen\nDESCRIPTION: Example of using isClientRectOnScreen to determine if a node is currently visible to the user, with optional margin parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Using shadowForStrokeEnabled Property in Konva.js\nDESCRIPTION: Demonstrates accessing the shadowForStrokeEnabled property which determines if strokes cast shadows. Disabling can improve performance but non-closed lines will have no shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Radial Gradient End Point Y in Konva.js\nDESCRIPTION: Examples of how to get and set the y-coordinate of the end point for a radial gradient fill. This controls the vertical positioning of the outer circle of the radial gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point y\nvar endPointY = shape.fillRadialGradientEndPointY();\n\n// set fill radial gradient end point y\nshape.fillRadialGradientEndPointY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color in Konva.js\nDESCRIPTION: Demonstrates various ways to get and set the stroke color of a shape using different color formats.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke color\nvar stroke = shape.stroke();\n\n// set stroke color with color string\nshape.stroke('green');\n\n// set stroke color with hex\nshape.stroke('#00ff00');\n\n// set stroke color with rgb\nshape.stroke('rgb(0,255,0)');\n\n// set stroke color with rgba and make it 50% opaque\nshape.stroke('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Live Codeblock Package\nDESCRIPTION: NPM/Yarn command to install the Docusaurus live codeblock theme package.\nSOURCE: https://github.com/konvajs/site/blob/new/src/theme-live-codeblock/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @docusaurus/theme-live-codeblock # or yarn add @docusaurus/theme-live-codeblock\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Stroke in Konva.js\nDESCRIPTION: Shows how to get the current stroke enabled state and how to enable or disable stroke on a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke enabled flag\nvar strokeEnabled = shape.strokeEnabled();\n\n// disable stroke\nshape.strokeEnabled(false);\n\n// enable stroke\nshape.strokeEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Pattern Rotation in JavaScript\nDESCRIPTION: Demonstrates how to get and set the fill pattern rotation in degrees for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient End Radius in Konva.js\nDESCRIPTION: Shows how to get and set the end radius for a radial gradient fill. This controls the outer boundary of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Setting strokeHitEnabled Property in Konva.js (Deprecated)\nDESCRIPTION: Gets or sets the deprecated strokeHitEnabled property which determines if stroke is drawn on the hit canvas. When false, the hit area is decreased by lineWidth/2. This property has been replaced by hitStrokeWidth.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Using strokeHitEnabled in Konva.js (Deprecated)\nDESCRIPTION: Deprecated example showing how to get and set the strokeHitEnabled property, which affects whether the stroke is drawn on the hit canvas for event detection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Getting Point at Specific Length on Path in Konva.js\nDESCRIPTION: Returns the coordinates of a point at a specific length along the path.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar point = path.getPointAtLength(10);\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Skew in Konva.js\nDESCRIPTION: Example of getting and setting a node's skew on the x-axis only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew x\nvar skewX = node.skewX();\n\n// set skew x\nnode.skewX(3);\n```\n\n----------------------------------------\n\nTITLE: Caching Konva Shapes in JavaScript\nDESCRIPTION: Demonstrates how to cache Konva shapes to improve drawing performance, apply filters, or create more accurate hit regions. Includes examples of basic caching and specifying custom bounding box properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// cache a shape with the x,y position of the bounding box at the center and\n// the width and height of the bounding box equal to the width and height of\n// the shape obtained from shape.width() and shape.height()\nimage.cache();\n\n// cache a node and define the bounding box position and size\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200\n});\n\n// cache a node and draw a red border around the bounding box\n// for debugging purposes\nnode.cache({\n  x: -30,\n  y: -30,\n  width: 100,\n  height: 200,\n  offset : 10,\n  drawBorder: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Repeat in KonvaJS\nDESCRIPTION: Method to get or set how a fill pattern repeats. Options include 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat', with 'repeat' being the default behavior.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern repeat\nvar repeat = shape.fillPatternRepeat();\n\n// repeat pattern in x direction only\nshape.fillPatternRepeat('repeat-x');\n\n// do not repeat the pattern\nshape.fillPatternRepeat('no-repeat');\n```\n\n----------------------------------------\n\nTITLE: Caching Konva.Node for Filter Application in Svelte\nDESCRIPTION: This snippet demonstrates the concept of caching a Konva.Node object to apply filters in a Svelte component. It mentions using onMount() for initial caching and afterUpdate() or direct cache() calls for handling dynamic changes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/svelte/Filters.md#2025-04-11_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nonMount(() => {\n  // Initial caching of Konva.Node\n  node.cache();\n});\n\n// For dynamic changes\nafterUpdate(() => {\n  // Recache the node on each state change\n  node.cache();\n});\n\n// Alternatively, for specific changes\nfunction handleChange() {\n  // Update node properties\n  // ...\n  // Recache immediately after changes\n  node.cache();\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Watch Hook for KonvaJS Element Initialization\nDESCRIPTION: A Vue.js watch hook that observes the image property and attaches Konva transformer nodes to image elements. This ensures that transformation controls are properly connected to the image when it's loaded.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Scale_Image_To_Fit.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(image, () => {\n  if (image.value && imageRef.value && transformerRef.value) {\n    const transformer = transformerRef.value.getNode();\n    const imageNode = imageRef.value.getNode();\n    transformer.nodes([imageNode]);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Distance in Konva.js\nDESCRIPTION: Shows how to get and set the drag distance for a Konva node. This controls how far the pointer must move before a drag operation begins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag distance\nvar dragDistance = node.dragDistance();\n\n// set distance\n// node starts dragging only if pointer moved more then 3 pixels\nnode.dragDistance(3);\n// or set globally\nKonva.dragDistance = 3;\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Scale in Konva.js\nDESCRIPTION: Demonstrates how to retrieve the absolute scale of a node, which accounts for the scaling of all ancestor nodes. This is useful for calculating the true rendered size of elements.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Pointer Position for Konva Node in JavaScript\nDESCRIPTION: Demonstrates how to get the position of a pointer (mouse or touch) relative to a Konva node's local coordinates.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// let's think we have a rectangle at position x = 10, y = 10\n// now we clicked at x = 15, y = 15 of the stage\n// if you want to know position of the click, related to the rectangle you can use\nrect.getRelativePointerPosition();\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable function. External stores are useful for retaining state that should not be replaced during Hot Module Replacement (HMR).\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/shapes/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Skew in Konva.js\nDESCRIPTION: Example of getting and setting a node's skew on the y-axis only.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// get skew y\nvar skewY = node.skewY();\n\n// set skew y\nnode.skewY(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in Konva.js\nDESCRIPTION: Example demonstrating various ways to set a shape's fill color, including color strings, hex, RGB, and RGBA with opacity. Also shows how to remove fill.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with perfectDrawEnabled in Konva\nDESCRIPTION: Gets or sets the perfectDrawEnabled property. When set to false, it can improve performance for shapes with fill, stroke and opacity. Default is true, but can be disabled for performance optimization.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Shows how to get and set the horizontal component of the linear gradient's start point for a stroke in a Konva shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Offset X in Konva.js\nDESCRIPTION: Shows how to get and set just the X offset for a pattern fill, controlling its horizontal position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern offset x\nvar patternOffsetX = shape.fillPatternOffsetX();\n\n// set fill pattern offset x\nshape.fillPatternOffsetX(20);\n```\n\n----------------------------------------\n\nTITLE: Disabling Perfect Drawing in Konva.js\nDESCRIPTION: Disables the perfect drawing feature in Konva for shapes with fill, stroke, and opacity to avoid extra computational work without affecting visual quality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/performance/All_Performance_Tips.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nshape.perfectDrawEnabled(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Transparency in Konva.js\nDESCRIPTION: Method for getting and setting alpha transparency value for filters. Accepts values between 0-1 and is used with the Konva.Filters.RGBA filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nnode.alpha(value);   // Set alpha value (0-1)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Radial Gradient End Point X in Konva.js\nDESCRIPTION: Method to get or set the x-coordinate of the end point for a radial gradient fill. Takes a numerical parameter and returns a number representing the x-coordinate.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Line Join Style in Konva.js Shapes\nDESCRIPTION: Shows how to get and set the line join style (miter, round, or bevel) for Konva shapes. The default value is miter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get line join\nvar lineJoin = shape.lineJoin();\n\n// set line join\nshape.lineJoin('round');\n```\n\n----------------------------------------\n\nTITLE: Converting Konva Node to Blob in JavaScript\nDESCRIPTION: Shows how to convert a Konva node into a Blob using the toBlob method. This asynchronous operation returns a Promise that resolves with the resulting Blob.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Star.mdx#2025-04-11_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar blob = await node.toBlob({});\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Fill Pattern Rotation in Konva.js\nDESCRIPTION: Method to get or set the rotation angle (in degrees) for a fill pattern. Takes a numerical parameter and returns a reference to the Konva.Shape object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern rotation\nvar patternRotation = shape.fillPatternRotation();\n\n// set fill pattern rotation\nshape.fillPatternRotation(20);\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Demonstrates how to clone a node to create an identical copy, with the option to override specific properties. This is useful for creating variations of existing nodes with different attributes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Framework Reference in Company Context\nDESCRIPTION: Inline code formatting showing the framework name 'konva' in lowercase using markdown backticks\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/donate.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`konva`\n```\n\n----------------------------------------\n\nTITLE: Managing Absolute Position of Konva Nodes\nDESCRIPTION: Demonstrates getting and setting the absolute position of a Konva node. The absolute position is relative to the stage rather than to the parent container.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Bounds in Konva.js\nDESCRIPTION: Shows how to implement custom drag boundaries for nodes using dragBoundFunc.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\n// get drag bound function\nvar dragBoundFunc = node.dragBoundFunc();\n\n// create vertical drag and drop\nnode.dragBoundFunc(function(pos){\n  // important pos - is absolute position of the node\n  // you should return absolute position too\n  return {\n    x: this.absolutePosition().x,\n    y: pos.y\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Related Framework References in Markdown\nDESCRIPTION: Inline code formatting showing related framework names 'react-konva' and 'vue-konva' using markdown backticks\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/donate.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`react-konva` and `vue-konva`\n```\n\n----------------------------------------\n\nTITLE: Managing Height in Konva Nodes\nDESCRIPTION: Shows how to get and set the height of a Konva node. This affects the node's vertical dimension on the canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// get height\nvar height = node.height();\n\n// set height\nnode.height(100);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Drawing Performance in Konva Shape (JavaScript)\nDESCRIPTION: Demonstrates how to get and set the perfectDrawEnabled property, which can improve performance for shapes with fill, stroke, and opacity.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// get perfectDrawEnabled\nvar perfectDrawEnabled = shape.perfectDrawEnabled();\n\n// set perfectDrawEnabled\nshape.perfectDrawEnabled();\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Color Values in KonvaJS\nDESCRIPTION: Methods for getting and setting RGB color values for filters. The red(), green(), and blue() methods accept values between 0 and 255. These methods are used with Konva.Filters.RGB filter.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nnode.red(255);    // Sets red value\nnode.green(128);  // Sets green value\nnode.blue(0);     // Sets blue value\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Draggability in Konva.js\nDESCRIPTION: Examples of enabling and disabling drag and drop functionality for nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Cloning Nodes in Konva.js\nDESCRIPTION: Shows how to clone a node with identical attributes and how to override specific properties during cloning, using an existing node as a template.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// simple clone\nvar clone = node.clone();\n\n// clone a node and override the x position\nvar clone = rect.clone({\n  x: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project with npm\nDESCRIPTION: Commands for creating a new Svelte project either in the current directory or in a specified folder. Uses the official create-svelte tool to scaffold a new Svelte application.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/sveltekit/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Stroke Hit Detection in Konva.js\nDESCRIPTION: Demonstrates how to enable or disable stroke hit detection for performance optimization. When disabled, the hit area is decreased by lineWidth/2.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Fill Linear Gradient End Point X in Konva.js\nDESCRIPTION: Examples of how to get and set the x-coordinate of the end point for a linear gradient fill. This allows for fine-tuning the gradient's horizontal positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill linear gradient end point x\nvar endPointX = shape.fillLinearGradientEndPointX();\n\n// set fill linear gradient end point x\nshape.fillLinearGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using the writable function. External stores are useful for retaining state that should persist across hot module reloads.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/images/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Managing Z-Index in Konva.js\nDESCRIPTION: Shows how to get and set the zIndex of a Konva node relative to its siblings. The zIndex determines the stacking order of nodes with the same parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// get index\nvar index = node.zIndex();\n\n// set index\nnode.zIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Moving a Node Relatively in Konva.js\nDESCRIPTION: Demonstrates how to move a node by a specified amount relative to its current position.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// move node in x direction by 1px and y direction by 2px\nnode.move({\n  x: 1,\n  y: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Events for Curve Control Points in KonvaJS\nDESCRIPTION: Handles drag operations for both quadratic and bezier curve control points. Updates the point coordinates based on the drag position, allowing users to interactively modify the curves.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Modify_Curves_with_Anchor_Points.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleQuadDragEnd = (e, pointName) => {\n  quadPoints[pointName].x = e.target.x();\n  quadPoints[pointName].y = e.target.y();\n};\n\nconst handleBezierDragEnd = (e, pointName) => {\n  bezierPoints[pointName].x = e.target.x();\n  bezierPoints[pointName].y = e.target.y();\n};\n```\n\n----------------------------------------\n\nTITLE: Managing IDs in Konva.js\nDESCRIPTION: Shows how to get and set the ID of a Konva node. IDs are global for the entire page and should be unique across all nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names in Konva.js\nDESCRIPTION: Demonstrates how to check if a Konva node has a specific name using the hasName() method. This is useful for conditional logic based on the node's name property.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Event Handlers in Vue with KonvaJS\nDESCRIPTION: Sets up and tears down touch event listeners for a KonvaJS canvas element. Handles touch end events by resetting distance value and manages event listener lifecycle using Vue's onMounted and onUnmounted hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Multi-touch_Scale_Shape.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleTouchEnd = () => {\n  lastDist.value = 0;\n};\n\nonMounted(() => {\n  const content = document.getElementsByClassName('konvajs-content')[0];\n  if (content) {\n    content.addEventListener('touchmove', handleTouchMove, false);\n    content.addEventListener('touchend', handleTouchEnd, false);\n  }\n});\n\nonUnmounted(() => {\n  const content = document.getElementsByClassName('konvajs-content')[0];\n  if (content) {\n    content.removeEventListener('touchmove', handleTouchMove);\n    content.removeEventListener('touchend', handleTouchEnd);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern X Position in Konva.js\nDESCRIPTION: Demonstrates how to get and set the x-coordinate offset for a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern x\nvar fillPatternX = shape.fillPatternX();\n// set fill pattern x\nshape.fillPatternX(20);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Clip Properties in KonvaJS Container\nDESCRIPTION: Examples of getting and setting clip coordinates (x,y) and dimensions (width,height) for a container\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip height\nvar clipHeight = container.clipHeight();\n\n// set clip height\ncontainer.clipHeight(100);\n```\n\n----------------------------------------\n\nTITLE: React Connected Objects Implementation\nDESCRIPTION: React implementation of connected objects using react-konva with hooks and state management\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Connected_Objects.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Stage, Layer, Circle, Arrow } from 'react-konva';\n\nconst App = () => {\n  // Generate initial targets\n  const generateTargets = () => {\n    const number = 10;\n    const result = [];\n    while (result.length < number) {\n      result.push({\n        id: 'target-' + result.length,\n        x: window.innerWidth * Math.random(),\n        y: window.innerHeight * Math.random(),\n        radius: 20 + Math.random() * 20,\n        fill: '#' + Math.floor(Math.random()*16777215).toString(16),\n      });\n    }\n    return result;\n  };\n\n  // Generate connectors between targets\n  const generateConnectors = (targets) => {\n    const number = 10;\n    const result = [];\n    while (result.length < number) {\n      const from = 'target-' + Math.floor(Math.random() * targets.length);\n      const to = 'target-' + Math.floor(Math.random() * targets.length);\n      if (from === to) {\n        continue;\n      }\n      result.push({\n        id: 'connector-' + result.length,\n        from,\n        to,\n      });\n    }\n    return result;\n  };\n\n  const [targets, setTargets] = useState([]);\n  const [connectors, setConnectors] = useState([]);\n\n  useEffect(() => {\n    const initialTargets = generateTargets();\n    setTargets(initialTargets);\n    setConnectors(generateConnectors(initialTargets));\n  }, []);\n\n  const getConnectorPoints = (from, to) => {\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    let angle = Math.atan2(-dy, dx);\n\n    const radius = 50;\n\n    return [\n      from.x + -radius * Math.cos(angle + Math.PI),\n      from.y + radius * Math.sin(angle + Math.PI),\n      to.x + -radius * Math.cos(angle),\n      to.y + radius * Math.sin(angle),\n    ];\n  };\n\n  const handleDragMove = (e) => {\n    const id = e.target.id();\n    setTargets(\n      targets.map((target) =>\n        target.id === id\n          ? { ...target, x: e.target.x(), y: e.target.y() }\n          : target\n      )\n    );\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {connectors.map((connector) => {\n          const fromNode = targets.find((t) => t.id === connector.from);\n          const toNode = targets.find((t) => t.id === connector.to);\n          if (!fromNode || !toNode) return null;\n\n          const points = getConnectorPoints(fromNode, toNode);\n          \n          return (\n            <Arrow\n              key={connector.id}\n              id={connector.id}\n              points={points}\n              fill=\"black\"\n              stroke=\"black\"\n            />\n          );\n        })}\n        {targets.map((target) => (\n          <Circle\n            key={target.id}\n            id={target.id}\n            x={target.x}\n            y={target.y}\n            radius={target.radius}\n            fill={target.fill}\n            shadowBlur={10}\n            draggable\n            onDragMove={handleDragMove}\n          />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Y Position in Konva.js\nDESCRIPTION: Shows how to get and set the y-coordinate offset for a fill pattern.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern y\nvar fillPatternY = shape.fillPatternY();\n// set fill pattern y\nshape.fillPatternY(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Sprite Frame Offsets\nDESCRIPTION: Shows how to get and set the offset map for sprite frame positioning.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get offsets map\nvar offsets = sprite.offsets();\n\n// set offsets map\nsprite.offsets({\n  standing: [\n    // x, y (6 frames)\n    0, 0,\n    0, 0,\n    5, 0,\n    0, 0,\n    0, 3,\n    2, 0\n  ],\n  kicking: [\n    // x, y (6 frames)\n    0, 5,\n    5, 0,\n    10, 0,\n    0, 0,\n    2, 1,\n    0, 0\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Konva Stage - React Implementation\nDESCRIPTION: Shows how to create a Konva stage with a clickable hexagon using React components. Uses useState for color management and demonstrates component-based structure with react-konva.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Complex_Load.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stage, Layer, RegularPolygon } from 'react-konva';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [color, setColor] = useState('red');\n\n  const handleClick = () => {\n    setColor(Konva.Util.getRandomColor());\n  };\n\n  return (\n    <Stage width={578} height={200}>\n      <Layer>\n        <RegularPolygon\n          x={100}\n          y={100}\n          sides={6}\n          radius={70}\n          fill={color}\n          stroke=\"black\"\n          strokeWidth={4}\n          onClick={handleClick}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Removing and Destroying Konva Nodes in JavaScript\nDESCRIPTION: Shows how to remove a Konva node from its parent without destroying it, and how to completely destroy a node and its children.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// remove node from parent, but don't destroy\nnode.remove();\n\n// remove and destroy a node\nnode.destroy();\n```\n\n----------------------------------------\n\nTITLE: Checking Rectangle Intersection with Konva.Util in JavaScript\nDESCRIPTION: Demonstrates how to use the haveIntersection() method from Konva.Util to check if two client rectangles intersect. It takes the client rectangles of two shapes as input.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Util.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst overlapping = Konva.Util.haveIntersection(shape1.getClientRect(), shape2.getClientRect());\n```\n\n----------------------------------------\n\nTITLE: Loading Konva Stage from JSON - Vanilla JS Implementation\nDESCRIPTION: Demonstrates loading a Konva stage from a JSON string and setting up click event handlers for a hexagon shape. Uses Konva.Node.create() for stage initialization and findOne() for element selection.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Complex_Load.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// JSON string from a previous save\nconst json = '{\"attrs\":{\"width\":578,\"height\":200},\"className\":\"Stage\",\"children\":[{\"attrs\":{},\"className\":\"Layer\",\"children\":[{\"attrs\":{\"x\":100,\"y\":100,\"sides\":6,\"radius\":70,\"fill\":\"red\",\"stroke\":\"black\",\"strokeWidth\":4},\"className\":\"RegularPolygon\"}]}]}';\n\n// create node using json string\nconst stage = Konva.Node.create(json, 'container');\n\n// get reference to the hexagon\nconst hexagon = stage.findOne('RegularPolygon');\n\n// bind events\nhexagon.on('click', () => {\n  hexagon.fill(Konva.Util.getRandomColor());\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Ancestors Using Selector in Konva.js\nDESCRIPTION: Demonstrates how to find ancestors of a node that match a specific selector. This example retrieves parent groups that match the 'Group' selector.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// get one of the parent group\nvar parentGroups = node.findAncestors('Group');\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Offset for Konva Nodes\nDESCRIPTION: Demonstrates how to get and set the horizontal offset of a Konva node, which determines the origin point for transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Flipping Shapes Horizontally in Vanilla JavaScript with Konva.js\nDESCRIPTION: This snippet demonstrates how to flip text elements horizontally using Konva.js. It creates two text nodes with different origin points and adds a button that toggles their horizontal orientation using negative scaleX values.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Mirror_Canvas_Shape.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nvar stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nvar layer = new Konva.Layer();\nstage.add(layer);\n\nvar text1 = new Konva.Text({\n  x: 180,\n  y: 50,\n  text: 'Default text with no offset. Its origin is in top left corner.',\n  align: 'center',\n  width: 200,\n});\nlayer.add(text1);\n\nvar text2 = new Konva.Text({\n  text: 'Text with the origin in its center',\n  width: 200,\n  align: 'center',\n  y: 100,\n  x: 270,\n});\nlayer.add(text2);\n// set horizontal origin in the center of the text\ntext2.offsetX(text2.width() / 2);\n\nvar button = document.createElement('button');\nbutton.innerText = 'Flip horizontally';\nbutton.style.position = 'absolute';\nbutton.style.top = '5px';\nbutton.style.left = '5px';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  layer.find('Text').forEach((text) => {\n    text.to({\n      scaleX: -text.scaleX(),\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Attributes in KonvaJS\nDESCRIPTION: Example of setting a node attribute using the setAttr method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ellipse.mdx#2025-04-11_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Applying Solarize Filter in Konva.js\nDESCRIPTION: Shows how to apply a solarize filter to a Konva node. The node is cached and the solarize filter is added.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Solarize]);\n```\n\n----------------------------------------\n\nTITLE: Creating Bunny Objects in JavaScript\nDESCRIPTION: Defines a function to create a bunny object with initial position and random velocity. This is used to populate the initial set of bunnies and add new ones during animation.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Jumping_Bunnies.mdx#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createBunny = (x, y) => ({\n  x,\n  y,\n  speedX: Math.random() * 10,\n  speedY: Math.random() * 10 - 5\n});\n```\n\n----------------------------------------\n\nTITLE: Using shadowForStrokeEnabled Method in Konva.js Shapes\nDESCRIPTION: Demonstrates how to get and set shadowForStrokeEnabled property for performance optimization in Konva shapes. When set to false, stroke will not affect shadow.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadowForStrokeEnabled\nvar shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n\n// set shadowForStrokeEnabled\nshape.shadowForStrokeEnabled();\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag and Drop in Konva.js\nDESCRIPTION: Example demonstrating how to get and set the draggable property on a Konva node. This controls whether the node can be moved with pointer events.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Node.mdx#2025-04-11_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// get draggable flag\nvar draggable = node.draggable();\n\n// enable drag and drop\nnode.draggable(true);\n\n// disable drag and drop\nnode.draggable(false);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Stage and Implementing Gesture Events with Hammer.js\nDESCRIPTION: This code sets up a Konva stage with a draggable rectangle and implements various gesture events using a modified version of Hammer.js. It handles swipe, press, rotate, and pinch-zoom gestures on the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Gestures.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\n// Load required scripts\nconst loadScript = (src) => {\n  return new Promise((resolve, reject) => {\n    if (document.querySelector(`script[src=\"${src}\"]`)) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = src;\n    script.onload = resolve;\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n};\n\n// Initialize the demo after loading dependencies\nasync function initDemo() {\n  try {\n    await loadScript('https://cdn.rawgit.com/hammerjs/touchemulator/master/touch-emulator.js');\n    await loadScript('https://konvajs.org/js/hammer-konva.js');\n\n    // emulate touches on desktop\n    TouchEmulator();\n    Konva.hitOnDragEnabled = true;\n    Konva.captureTouchEventsEnabled = true;\n\n    const stage = new Konva.Stage({\n      container: 'container',\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n\n    const layer = new Konva.Layer();\n    stage.add(layer);\n\n    const originalAttrs = {\n      x: stage.width() / 2,\n      y: stage.height() / 2,\n      scaleX: 1,\n      scaleY: 1,\n      draggable: true,\n      rotation: 0,\n    };\n\n    const group = new Konva.Group(originalAttrs);\n    layer.add(group);\n\n    const size = 200;\n\n    const rect = new Konva.Rect({\n      width: size,\n      height: size,\n      fill: 'yellow',\n      offsetX: size / 2,\n      offsetY: size / 2,\n      cornerRadius: 5,\n      shadowBlur: 10,\n      shadowColor: 'grey',\n    });\n    group.add(rect);\n\n    const defaultText = 'Try\\ndrag, swipe, pinch zoom, rotate, press...';\n    const text = new Konva.Text({\n      text: defaultText,\n      x: -size / 2,\n      width: size,\n      align: 'center',\n    });\n    group.add(text);\n\n    // attach modified version of Hammer.js\n    // \"domEvents\" property will allow triggering events on group\n    // instead of \"hammertime\" instance\n    const hammertime = new Hammer(group, { domEvents: true });\n\n    // add rotate gesture\n    hammertime.get('rotate').set({ enable: true });\n\n    // now attach all possible events\n    group.on('swipe', function (ev) {\n      text.text('swiping');\n      group.to({\n        x: group.x() + ev.evt.gesture.deltaX,\n        y: group.y() + ev.evt.gesture.deltaY,\n        onFinish: function () {\n          group.to(Object.assign({}, originalAttrs));\n          text.text(defaultText);\n        },\n      });\n    });\n\n    group.on('press', function (ev) {\n      text.text('Under press');\n      rect.to({\n        fill: 'green',\n      });\n    });\n\n    group.on('touchend', function (ev) {\n      rect.to({\n        fill: 'yellow',\n      });\n\n      setTimeout(() => {\n        text.text(defaultText);\n      }, 300);\n    });\n\n    group.on('dragend', () => {\n      group.to(Object.assign({}, originalAttrs));\n    });\n\n    let oldRotation = 0;\n    let startScale = 0;\n    group.on('rotatestart', function (ev) {\n      oldRotation = ev.evt.gesture.rotation;\n      startScale = rect.scaleX();\n      group.stopDrag();\n      group.draggable(false);\n      text.text('rotating...');\n    });\n\n    group.on('rotate', function (ev) {\n      const delta = oldRotation - ev.evt.gesture.rotation;\n      group.rotate(-delta);\n      oldRotation = ev.evt.gesture.rotation;\n      group.scaleX(startScale * ev.evt.gesture.scale);\n      group.scaleY(startScale * ev.evt.gesture.scale);\n    });\n\n    group.on('rotateend rotatecancel', function (ev) {\n      group.to(Object.assign({}, originalAttrs));\n      text.text(defaultText);\n      group.draggable(true);\n    });\n  } catch (error) {\n    console.error('Failed to initialize demo:', error);\n  }\n}\n\n// Start the demo\ninitDemo();\n```\n\n----------------------------------------\n\nTITLE: Getting Client Rectangle in KonvaJS\nDESCRIPTION: Demonstrates how to get the client rectangle of a Konva node including transformations and styling. Shows examples with and without transformations applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar rect = new Konva.Rect({\n     width : 100,\n     height : 100,\n     x : 50,\n     y : 50,\n     strokeWidth : 4,\n     stroke : 'black',\n     offsetX : 50,\n     scaleY : 2\n});\n\n// get client rect without think off transformations (position, rotation, scale, offset, etc)\nrect.getClientRect({ skipTransform: true});\n// returns {\n//     x : -2,   // two pixels for stroke / 2\n//     y : -2,\n//     width : 104, // increased by 4 for stroke\n//     height : 104\n//}\n\n// get client rect with transformation applied\nrect.getClientRect();\n// returns Object {x: -2, y: 46, width: 104, height: 208}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Radial Gradient End Point X in JavaScript\nDESCRIPTION: Shows how to get and set the fill radial gradient end point x coordinate for a Konva shape. This method is inherited from Konva.Shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill radial gradient end point x\nvar endPointX = shape.fillRadialGradientEndPointX();\n\n// set fill radial gradient end point x\nshape.fillRadialGradientEndPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Line with Vanilla KonvaJS\nDESCRIPTION: Creates a draggable red line using vanilla KonvaJS. Sets up a stage, layer, and line with drag functionality and mouse event handling for cursor styling.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/drag_and_drop/04_Drag_a_Line.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\n\nconst redLine = new Konva.Line({\n  x: 50,\n  y: 50,\n  points: [0, 0, 150, 0],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  draggable: true,\n});\n\n// add cursor styling\nredLine.on('mouseover', function () {\n  document.body.style.cursor = 'pointer';\n});\nredLine.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n\nlayer.add(redLine);\nstage.add(layer);\n```\n\n----------------------------------------\n\nTITLE: Initializing Konva Sprite Constructor\nDESCRIPTION: Creates a new Sprite instance with the specified configuration options.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Sprite(config)\n```\n\n----------------------------------------\n\nTITLE: Managing Node Size in KonvaJS\nDESCRIPTION: Shows how to get and set both width and height dimensions simultaneously.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Using deprecated strokeHitEnabled in Konva.js\nDESCRIPTION: Example showing usage of the deprecated strokeHitEnabled property which affects hit detection. When set to false, stroke won't be drawn on hit canvas, decreasing the hit area.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get strokeHitEnabled\nvar strokeHitEnabled = shape.strokeHitEnabled();\n\n// set strokeHitEnabled\nshape.strokeHitEnabled();\n```\n\n----------------------------------------\n\nTITLE: Managing Sprite Image\nDESCRIPTION: Examples of getting and setting the sprite's image object.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// get image\nvar image = sprite.image();\n\n// set image\nsprite.image(imageObj);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Position of Konva Nodes\nDESCRIPTION: Shows how to get and set the position of a Konva node relative to its parent container using the position method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Line.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.position();\n\n// set position\nnode.position({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Dash Patterns to Strokes in Konva.js\nDESCRIPTION: Example showing how to create dashed stroke patterns with various configurations. You can create alternating dashed lines and dots with different spacings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// apply dashed stroke that is 10px long and 5 pixels apart\n line.dash([10, 5]);\n // apply dashed stroke that is made up of alternating dashed\n // lines that are 10px long and 20px apart, and dots that have\n // a radius of 5px and are 20px apart\n line.dash([10, 20, 0.001, 20]);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hit Detection in Konva Shape (JavaScript)\nDESCRIPTION: Shows how to get and set a custom hit draw function for a Konva Shape, which is used to create a custom hit area for the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// get hit draw function\nvar hitFunc = shape.hitFunc();\n\n// set hit draw function\nshape.hitFunc(function(context) {\n  context.beginPath();\n  context.rect(0, 0, shape.width(), shape.height());\n  context.closePath();\n  // important Konva method that fill and stroke shape from its properties\n  context.fillStrokeShape(shape);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node OffsetX in KonvaJS\nDESCRIPTION: Examples of getting and setting a node's offset on the x-axis.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Layer.mdx#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Building Elastic Stars with Vue-Konva\nDESCRIPTION: Vue implementation of draggable stars using vue-konva. Utilizes Vue 3 Composition API to manage state and handle drag events, creating interactive stars with elastic animations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/sandbox/Elastic_Stars.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageConfig\">\n    <v-layer>\n      <v-star\n        v-for=\"star in stars\"\n        :key=\"star.id\"\n        :config=\"star\"\n        @dragstart=\"handleDragStart\"\n        @dragend=\"handleDragEnd\"\n        @dragmove=\"handleDragMove\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageConfig = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst stars = ref([]);\n\nonMounted(() => {\n  const initialStars = [];\n  \n  for (let n = 0; n < 10; n++) {\n    const scale = Math.random();\n    const id = n.toString();\n    \n    initialStars.push({\n      id: id,\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      numPoints: 5,\n      innerRadius: 30,\n      outerRadius: 50,\n      fill: '#89b717',\n      opacity: 0.8,\n      rotation: Math.random() * 180,\n      shadowColor: 'black',\n      shadowBlur: 10,\n      shadowOffset: {\n        x: 5,\n        y: 5,\n      },\n      shadowOpacity: 0.6,\n      scale: {\n        x: scale,\n        y: scale,\n      },\n      startScale: scale,\n      draggable: true\n    });\n  }\n  \n  stars.value = initialStars;\n});\n\nconst handleDragStart = (e) => {\n  const id = e.target.id();\n  const starIndex = stars.value.findIndex(star => star.id === id);\n  \n  if (starIndex === -1) return;\n  \n  const star = {...stars.value[starIndex]};\n  star.shadowOffset = {\n    x: 15,\n    y: 15\n  };\n  star.scale = {\n    x: star.startScale * 1.2,\n    y: star.startScale * 1.2\n  };\n  \n  stars.value[starIndex] = star;\n};\n\nconst handleDragEnd = (e) => {\n  const id = e.target.id();\n  const starIndex = stars.value.findIndex(star => star.id === id);\n  \n  if (starIndex === -1) return;\n  \n  const star = {...stars.value[starIndex]};\n  star.shadowOffset = {\n    x: 5,\n    y: 5\n  };\n  star.scale = {\n    x: star.startScale,\n    y: star.startScale\n  };\n  \n  stars.value[starIndex] = star;\n};\n\nconst handleDragMove = (e) => {\n  const id = e.target.id();\n  const starIndex = stars.value.findIndex(star => star.id === id);\n  \n  if (starIndex === -1) return;\n  \n  const star = {...stars.value[starIndex]};\n  star.x = e.target.x();\n  star.y = e.target.y();\n  \n  stars.value[starIndex] = star;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Radial Gradient Start Radius in Konva.js\nDESCRIPTION: Demonstrates how to get and set the start radius of a radial gradient fill. The start radius determines the size of the inner circle of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient start radius\nvar startRadius = shape.fillRadialGradientStartRadius();\n\n// set radial gradient start radius\nshape.fillRadialGradientStartRadius(0);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Graph from Cache\nDESCRIPTION: Example showing how to draw hit graph using the cached scene canvas.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Triangle Shape with Vue-Konva\nDESCRIPTION: Implements a custom triangle shape using Vue-Konva components. The configuration object defines the triangle's appearance with a sceneFunc and styling properties.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/shapes/Custom.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-shape :config=\"shapeConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst shapeConfig = {\n  sceneFunc: (context, shape) => {\n    context.beginPath();\n    context.moveTo(20, 50);\n    context.lineTo(220, 80);\n    context.lineTo(100, 150);\n    context.closePath();\n    context.fillStrokeShape(shape);\n  },\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Dash in Konva.js\nDESCRIPTION: Shows how to get the current dash enabled state and how to enable or disable the dash pattern for strokes. When disabled, the shape will not display dash patterns regardless of other dash settings.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// get dash enabled flag\nvar dashEnabled = shape.dashEnabled();\n\n// disable dash\nshape.dashEnabled(false);\n\n// enable dash\nshape.dashEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Visibility in Konva.js\nDESCRIPTION: Example of checking if a node is visible in the user's viewport with optional margins.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// default calculations\nvar isOnScreen = node.isClientRectOnScreen()\n// increase object size (or screen size) for cases when objects close to the screen still need to be marked as \"visible\"\nvar isOnScreen = node.isClientRectOnScreen({ x: stage.width(), y: stage.height() })\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo Functionality for Image Operations\nDESCRIPTION: Restores the previous state from history. The function decrements the history step if not at the beginning, then retrieves and parses the corresponding JSON state from the history array to restore the previous image configuration.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/data_and_serialization/Best_Practices.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleUndo = () => {\n  if (historyStep.value === 0) return;\n  historyStep.value--;\n  images.value = JSON.parse(history.value[historyStep.value]);\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Position with Konva.js Node\nDESCRIPTION: Demonstrates how to get the absolute position of a node relative to the canvas or a specific ancestor. This method returns the node's position considering all parent transformations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n// returns absolute position relative to top-left corner of canvas\nnode.getAbsolutePosition();\n\n// calculate absolute position of node, inside stage\n// so stage transforms are ignored\nnode.getAbsolutePosition(stage)\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Scale X in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the horizontal scale factor of a node using the scaleX method. This property affects the width of the rendered node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// get scale x\nvar scaleX = node.scaleX();\n\n// set scale x\nnode.scaleX(2);\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Triangle with Line Join in Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to create a triangle shape with Konva.js and change its line join style on mouse hover. It uses the Konva.Stage, Konva.Layer, and Konva.RegularPolygon classes to set up the canvas and shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/styling/05-Line_Join.mdx#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst triangle = new Konva.RegularPolygon({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  sides: 3,\n  radius: 70,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 20,\n  lineJoin: 'miter'\n});\n\nlayer.add(triangle);\n\ntriangle.on('mouseenter', function() {\n  const lineJoins = ['miter', 'bevel', 'round'];\n  const index = lineJoins.indexOf(triangle.lineJoin());\n  const nextIndex = (index + 1) % lineJoins.length;\n  triangle.lineJoin(lineJoins[nextIndex]);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes on Konva Nodes in JavaScript\nDESCRIPTION: Shows how to set attributes on Konva nodes using the setAttr method. This method can be used to modify various properties of the node.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nnode.setAttr('x', 5);\n```\n\n----------------------------------------\n\nTITLE: Using listening() Method in Konva.js\nDESCRIPTION: This snippet demonstrates how to get and set the listening attribute of a Konva node, which determines whether it responds to events and appears in the hit graph. Setting it to false will make the node and its children ignored by the container.getIntersection() method.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// get listening attr\nvar listening = node.listening();\n\n// stop listening for events, remove node and all its children from hit graph\nnode.listening(false);\n\n// listen to events according to the parent\nnode.listening(true);\n```\n\n----------------------------------------\n\nTITLE: Interactive Star Drawing Component\nDESCRIPTION: Vue component demonstrating interactive star shapes with drag and drop functionality, scaling effects, and shadow animations\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/vue/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <v-stage\n    ref=\"stage\"\n    :config=\"stageSize\"\n    @dragstart=\"handleDragstart\"\n    @dragend=\"handleDragend\"\n  >\n    <v-layer ref=\"layer\">\n      <v-star\n        v-for=\"item in list\"\n        :key=\"item.id\"\n        :config=\"{\n          x: item.x,\n          y: item.y,\n          rotation: item.rotation,\n          id: item.id,\n          numPoints: 5,\n          innerRadius: 30,\n          outerRadius: 50,\n          fill: '#89b717',\n          opacity: 0.8,\n          draggable: true,\n          scaleX: dragItemId === item.id ? item.scale * 1.2 : item.scale,\n          scaleY: dragItemId === item.id ? item.scale * 1.2 : item.scale,\n          shadowColor: 'black',\n          shadowBlur: 10,\n          shadowOffsetX: dragItemId === item.id ? 15 : 5,\n          shadowOffsetY: dragItemId === item.id ? 15 : 5,\n          shadowOpacity: 0.6\n        }\"\n      />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst list = ref([]);\nconst dragItemId = ref(null);\n\nconst handleDragstart = (e) => {\n  dragItemId.value = e.target.id();\n  const item = list.value.find(i => i.id === dragItemId.value);\n  const index = list.value.indexOf(item);\n  list.value.splice(index, 1);\n  list.value.push(item);\n};\n\nconst handleDragend = () => {\n  dragItemId.value = null;\n};\n\nonMounted(() => {\n  for (let n = 0; n < 30; n++) {\n    list.value.push({\n      id: Math.round(Math.random() * 10000).toString(),\n      x: Math.random() * stageSize.width,\n      y: Math.random() * stageSize.height,\n      rotation: Math.random() * 180,\n      scale: Math.random()\n    });\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Transform Optimizations in Konva.js\nDESCRIPTION: Example demonstrates how to control which transforms are enabled on a Konva node, allowing for performance optimizations by limiting the types of transforms applied.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// enable position transform only to improve draw performance\nnode.transformsEnabled('position');\n\n// enable all transforms\nnode.transformsEnabled('all');\n```\n\n----------------------------------------\n\nTITLE: Managing X-Offset in Konva\nDESCRIPTION: Shows how to get and set the x-offset of a Konva node. The offset determines the point around which transformations like rotation occur.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// get offset x\nvar offsetX = node.offsetX();\n\n// set offset x\nnode.offsetX(3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Theme Settings\nDESCRIPTION: Configuration changes required in docusaurus.config.js to enable the live codeblock theme.\nSOURCE: https://github.com/konvajs/site/blob/new/src/theme-live-codeblock/README.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  ...\n+ themes: ['@docusaurus/theme-live-codeblock'],\n  presets: ['@docusaurus/preset-classic']\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Node Size in Konva.js\nDESCRIPTION: Example shows how to get and set the size of a Konva node by specifying width and height dimensions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// get node size\nvar size = node.size();\nvar width = size.width;\nvar height = size.height;\n\n// set size\nnode.size({\n  width: 100,\n  height: 200\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Konva.js Node to Canvas\nDESCRIPTION: Shows how to convert a Konva.js node into a canvas element.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar canvas = node.toCanvas();\n```\n\n----------------------------------------\n\nTITLE: React Clock Component with Live Preview\nDESCRIPTION: Example React component demonstrating the live code editing functionality, implementing a clock that updates every second using useState and useEffect hooks.\nSOURCE: https://github.com/konvajs/site/blob/new/src/theme-live-codeblock/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Clock(props) {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    var timerID = setInterval(() => tick(), 1000);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  function tick() {\n    setDate(new Date());\n  }\n\n  return (\n    <div>\n      <h2>It is {date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Hit Area from Cache in Konva.js\nDESCRIPTION: Shows how to draw a hit graph using the cached scene canvas. This requires caching the shape first.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nshape.cache();\nshape.drawHitFromCache();\n```\n\n----------------------------------------\n\nTITLE: Managing Node Names in Konva.js\nDESCRIPTION: Example of adding and managing names for a Konva node, similar to CSS classes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.addName('selected');\nnode.name(); // return 'red selected'\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store for HMR State Preservation in Svelte\nDESCRIPTION: This code snippet demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). It uses Svelte's writable store to maintain state that would otherwise be lost during HMR updates.\nSOURCE: https://github.com/konvajs/site/blob/new/svelte-demos/simple_animations/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// store.js\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Opacity in Konva.js\nDESCRIPTION: Demonstrates how to get and set the shadow opacity for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow opacity\nvar shadowOpacity = shape.shadowOpacity();\n\n// set shadow opacity\nshape.shadowOpacity(0.5);\n```\n\n----------------------------------------\n\nTITLE: Accessing Absolute Scale in Konva.js\nDESCRIPTION: Shows how to retrieve the absolute scale of a node which takes into account all ancestor transformations, specifically accessing the x component of the scale.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get absolute scale x\nvar scaleX = node.getAbsoluteScale().x;\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Control with React and Konva\nDESCRIPTION: React implementation of animation control using react-konva. Uses hooks (useRef, useState, useEffect) to manage animation state and cleanup. Implements the same sinusoidal animation pattern with start/stop functionality.\nSOURCE: https://github.com/konvajs/site/blob/new/content/docs/animations/Stop_Animation.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Layer, Circle } from 'react-konva';\nimport { useEffect, useRef, useState } from 'react';\n\nconst App = () => {\n  const circleRef = useRef(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const animRef = useRef(null);\n\n  useEffect(() => {\n    const amplitude = 100;\n    const period = 2000;\n\n    animRef.current = new Konva.Animation((frame) => {\n      circleRef.current.x(\n        amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n        window.innerWidth / 2\n      );\n    }, circleRef.current.getLayer());\n\n    return () => {\n      if (animRef.current) {\n        animRef.current.stop();\n      }\n    };\n  }, []);\n\n  const handleStart = () => {\n    animRef.current.start();\n    setIsAnimating(true);\n  };\n\n  const handleStop = () => {\n    animRef.current.stop();\n    setIsAnimating(false);\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: '10px' }}>\n        <button onClick={handleStart} disabled={isAnimating}>Start Animation</button>\n        <button onClick={handleStop} disabled={!isAnimating}>Stop Animation</button>\n      </div>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Circle\n            ref={circleRef}\n            x={window.innerWidth / 2}\n            y={window.innerHeight / 2}\n            radius={30}\n            fill=\"red\"\n            stroke=\"black\"\n            strokeWidth={4}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Node Rotation in KonvaJS\nDESCRIPTION: Demonstrates getting and setting a node's rotation in degrees.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arrow.mdx#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow Offset Y in Konva.js\nDESCRIPTION: Shows how to get and set the vertical shadow offset (y-axis) for a shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Circle.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow offset y\nvar shadowOffsetY = shape.shadowOffsetY();\n\n// set shadow offset y\nshape.shadowOffsetY(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Easing Functions in Konva.js\nDESCRIPTION: A collection of back easing functions that provide motion with slight overshoot. Includes BackEaseIn(), BackEaseOut(), and BackEaseInOut() variations.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Easings.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBackEaseIn()\nBackEaseOut()\nBackEaseInOut()\n```\n\n----------------------------------------\n\nTITLE: Setting Global Composite Operation in KonvaJS\nDESCRIPTION: Demonstrates how to get and set the globalCompositeOperation property of a node, which controls how the node is composited with other elements during rendering.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// get globalCompositeOperation\nvar globalCompositeOperation = shape.globalCompositeOperation();\n\n// set globalCompositeOperation\nshape.globalCompositeOperation('source-in');\n```\n\n----------------------------------------\n\nTITLE: Adjusting Kaleidoscope Angle in Konva.js\nDESCRIPTION: Method to get or set the kaleidoscope angle for the Konva.Filters.Kaleidoscope filter. It accepts an integer value in degrees to set the angle of the kaleidoscope effect.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nkaleidoscopeAngle(degrees)\n```\n\n----------------------------------------\n\nTITLE: Setting Node ID in KonvaJS\nDESCRIPTION: Shows how to get and set the id of a node, which is a globally unique identifier for the node across the entire page, useful for direct targeting of specific nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n// get id\nvar name = node.id();\n\n// set id\nnode.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Managing Rotation in Konva Nodes\nDESCRIPTION: Demonstrates getting and setting the rotation of a Konva node. Rotation is measured in degrees and affects how the node is rendered on the stage.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// get rotation in degrees\nvar rotation = node.rotation();\n\n// set rotation in degrees\nnode.rotation(45);\n```\n\n----------------------------------------\n\nTITLE: Checking Node Names with hasName in Konva.js\nDESCRIPTION: Shows how to check if a Konva node has a specific name using the hasName method. This is useful for conditional logic based on node names.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nnode.name('red');\nnode.hasName('red');   // return true\nnode.hasName('selected'); // return false\nnode.hasName(''); // return false\n```\n\n----------------------------------------\n\nTITLE: Getting Node Attributes in Konva.js\nDESCRIPTION: This snippet shows how to get a specific attribute from a node in Konva.js.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Stage.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = node.getAttr('x');\n```\n\n----------------------------------------\n\nTITLE: Finding Single Node in Layer using Selectors in JavaScript\nDESCRIPTION: Examples of finding a single node in a layer using various selectors, including id, name, and custom functions.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// select node with id foo\nvar node = stage.findOne('#foo');\n\n// select node with name bar inside layer\nvar nodes = layer.findOne('.bar');\n\n// select the first node to return true in a function\nvar node = stage.findOne(node => {\n return node.getType() === 'Shape'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern Image in Konva.js\nDESCRIPTION: Example showing how to use an image as a fill pattern for a shape. Requires loading an image object and assigning it to the shape.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.RegularPolygon.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill pattern image\nvar fillPatternImage = shape.fillPatternImage();\n\n// set fill pattern image\nvar imageObj = new Image();\nimageObj.onload = function() {\n  shape.fillPatternImage(imageObj);\n};\nimageObj.src = 'path/to/image/jpg';\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting clipY in Konva Container\nDESCRIPTION: Example demonstrating how to get and set the clip y coordinate for a Konva container. This method controls the vertical position of the clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip y\nvar clipY = container.clipY();\n\n// set clip y\ncontainer.clipY(10);\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting clipWidth in Konva Container\nDESCRIPTION: Example demonstrating how to get and set the clip width for a Konva container. This method controls the width of the clipping region.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.FastLayer.mdx#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip width\nvar clipWidth = container.clipWidth();\n\n// set clip width\ncontainer.clipWidth(100);\n```\n\n----------------------------------------\n\nTITLE: Applying Threshold Filter in Konva.js\nDESCRIPTION: Illustrates how to apply a threshold filter to a Konva node. The node is cached, the threshold filter is added, and the threshold level is set.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Filters.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nnode.cache();\nnode.filters([Konva.Filters.Threshold]);\nnode.threshold(0.1);\n```\n\n----------------------------------------\n\nTITLE: Setting shadowColor in Konva.js Shape\nDESCRIPTION: Example demonstrating how to get and set the shadow color using various color formats including string, hex, RGB, and RGBA.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Wedge.mdx#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// get shadow color\nvar shadow = shape.shadowColor();\n\n// set shadow color with color string\nshape.shadowColor('green');\n\n// set shadow color with hex\nshape.shadowColor('#00ff00');\n\n// set shadow color with rgb\nshape.shadowColor('rgb(0,255,0)');\n\n// set shadow color with rgba and make it 50% opaque\nshape.shadowColor('rgba(0,255,0,0.5');\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer Height for Konva Tag\nDESCRIPTION: Sets the height of the pointer element for a Konva.Tag. This determines how far the pointer extends from the main body of the tag.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Tag.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntag.pointerHeight(20);\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Radial Gradient End Radius in KonvaJS\nDESCRIPTION: Method to get or set the end radius of a radial gradient fill. This defines the outer radius of the gradient.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Path.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// get radial gradient end radius\nvar endRadius = shape.fillRadialGradientEndRadius();\n\n// set radial gradient end radius\nshape.fillRadialGradientEndRadius(100);\n```\n\n----------------------------------------\n\nTITLE: Extracting RGB Components from Color Strings with Konva.Util in JavaScript\nDESCRIPTION: Shows different ways to use the getRGB() method from Konva.Util to extract RGB components from various color representations (color name, hex code, and rgb function).\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Util.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// each of the following examples return {r:0, g:0, b:255}\nvar rgb = Konva.Util.getRGB('blue');\nvar rgb = Konva.Util.getRGB('#0000ff');\nvar rgb = Konva.Util.getRGB('rgb(0,0,255)');\n```\n\n----------------------------------------\n\nTITLE: Setting Clip Properties for a Konva Container in JavaScript\nDESCRIPTION: Demonstrates how to set and get clip properties for a Konva container, including clip dimensions and custom clip functions. Clipping is used to limit the visible area of child nodes.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Container.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// get clip\nvar clip = container.clip();\n\n// set clip\ncontainer.clip({\n  x: 20,\n  y: 20,\n  width: 20,\n  height: 20\n});\n\n// get clip x\nvar clipX = container.clipX();\n\n// set clip x\ncontainer.clipX(10);\n\n// get clip function\nvar clipFunction = container.clipFunc();\n\n// set clip function\ncontainer.clipFunc(function(ctx) {\n  ctx.rect(0, 0, 100, 100);\n});\n\ncontainer.clipFunc(function(ctx) {\n  // optionally return a clip Path2D and clip-rule or just the clip-rule\n  return [new Path2D('M0 0v50h50Z'), 'evenodd']\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with React in MDX\nDESCRIPTION: This code snippet demonstrates how to create an interactive button using JSX in a Docusaurus MDX blog post. The button uses React's onClick event handler to display an alert when clicked.\nSOURCE: https://github.com/konvajs/site/blob/new/blog/_2021-08-01-mdx-blog-post.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Linear Gradient Start Point X in Konva.js\nDESCRIPTION: Methods to get and set the stroke linear gradient start point X coordinate. This method accepts a numeric value as input and returns the current value when called without parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// get stroke linear gradient start point x\nvar startPointX = shape.strokeLinearGradientStartPointX();\n\n// set stroke linear gradient start point x\nshape.strokeLinearGradientStartPointX(20);\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Comment in Docusaurus Blog\nDESCRIPTION: This snippet shows the syntax for adding a truncate comment in a Docusaurus blog post. The truncate comment is used to limit the blog post size in the list view by showing only the content before the comment.\nSOURCE: https://github.com/konvajs/site/blob/new/blog/_2019-05-29-long-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Arc Constructor in KonvaJS\nDESCRIPTION: Creates a new Arc instance with the specified configuration parameters.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Konva.Arc(config)\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Without SSH\nDESCRIPTION: Command to deploy the website using GitHub username for authentication\nSOURCE: https://github.com/konvajs/site/blob/new/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Managing Absolute Position of Konva Nodes\nDESCRIPTION: Shows how to get and set the absolute position of a Konva node, which is its position relative to the stage rather than its parent.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Ring.mdx#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// get position\nvar position = node.absolutePosition();\n\n// set position\nnode.absolutePosition({\n  x: 5,\n  y: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fill Color in Konva.js\nDESCRIPTION: Shows different methods to get and set the fill color of a shape including using color strings, hex codes, RGB, and RGBA values. Also demonstrates how to remove a fill entirely.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Sprite.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// get fill color\nvar fill = shape.fill();\n\n// set fill color with color string\nshape.fill('green');\n\n// set fill color with hex\nshape.fill('#00ff00');\n\n// set fill color with rgb\nshape.fill('rgb(0,255,0)');\n\n// set fill color with rgba and make it 50% opaque\nshape.fill('rgba(0,255,0,0.5');\n\n// shape without fill\nshape.fill(null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Cap Style in Konva.js\nDESCRIPTION: Demonstrates how to get or set the line cap style for a shape. Options include 'butt', 'round', or 'square'.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Rect.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// get line cap\nvar lineCap = shape.lineCap();\n\n// set line cap\nshape.lineCap('round');\n```\n\n----------------------------------------\n\nTITLE: Node Management in Konva.js\nDESCRIPTION: Examples of removing and destroying Konva nodes, including getting node attributes and ancestors.\nSOURCE: https://github.com/konvajs/site/blob/new/content/api/Konva.Arc.mdx#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nnode.remove();\n\nnode.destroy();\n\nvar x = node.getAttr('x');\n\nshape.getAncestors().forEach(function(node) {\n  console.log(node.getId());\n})\n\nnode.setAttrs({\n  x: 5,\n  fill: 'red'\n});\n```"
  }
]