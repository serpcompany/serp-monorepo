[
  {
    "owner": "loft-sh",
    "repo": "devpod",
    "content": "TITLE: Defining Expressive BDD Tests Using Ginkgo and Gomega in Go\nDESCRIPTION: This Go code demonstrates writing a behavior-driven test suite for a library system using Ginkgo's DSL with Gomega matchers. It defines structured sections using Describe, Context, When, and It nodes, employs setup with BeforeEach, and validates library behaviors like checking books in and out, placing holds, and handling unavailable items. Dependencies required are the Ginkgo testing framework (github.com/onsi/ginkgo/v2), the Gomega matcher library (github.com/onsi/gomega), and domain packages (e.g., libraries, books, users). The snippet expects that domain objects and context management exist and assumes knowledge of Go's spec context and matching idioms; test input/output are managed via assertions inside It blocks and context propagation. Notably, the code applies timeouts to tests and demonstrates both synchronous and asynchronous assertions, encapsulating a full-featured BDD test approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    . \"github.com/onsi/ginkgo/v2\"\n    . \"github.com/onsi/gomega\"\n    ...\n)\n\nvar _ = Describe(\"Checking books out of the library\", Label(\"library\"), func() {\n    var library *libraries.Library\n    var book *books.Book\n    var valjean *users.User\n    BeforeEach(func() {\n        library = libraries.NewClient()\n        book = &books.Book{\n            Title: \"Les Miserables\",\n            Author: \"Victor Hugo\",\n        }\n        valjean = users.NewUser(\"Jean Valjean\")\n    })\n\n    When(\"the library has the book in question\", func() {\n        BeforeEach(func(ctx SpecContext) {\n            Expect(library.Store(ctx, book)).To(Succeed())\n        })\n\n        Context(\"and the book is available\", func() {\n            It(\"lends it to the reader\", func(ctx SpecContext) {\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books()).To(ContainElement(book))\n                Expect(library.UserWithBook(ctx, book)).To(Equal(valjean))\n            }, SpecTimeout(time.Second * 5))\n        })\n\n        Context(\"but the book has already been checked out\", func() {\n            var javert *users.User\n            BeforeEach(func(ctx SpecContext) {\n                javert = users.NewUser(\"Javert\")\n                Expect(javert.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n            })\n\n            It(\"tells the user\", func(ctx SpecContext) {\n                err := valjean.Checkout(ctx, library, \"Les Miserables\")\n                Expect(err).To(MatchError(\"Les Miserables is currently checked out\"))\n            }, SpecTimeout(time.Second * 5))\n\n            It(\"lets the user place a hold and get notified later\", func(ctx SpecContext) {\n                Expect(valjean.Hold(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Holds(ctx)).To(ContainElement(book))\n\n                By(\"when Javert returns the book\")\n                Expect(javert.Return(ctx, library, book)).To(Succeed())\n\n                By(\"it eventually informs Valjean\")\n                notification := \"Les Miserables is ready for pick up\"\n                Eventually(ctx, valjean.Notifications).Should(ContainElement(notification))\n\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books(ctx)).To(ContainElement(book))\n                Expect(valjean.Holds(ctx)).To(BeEmpty())\n            }, SpecTimeout(time.Second * 10))\n        })  \n    })\n\n    When(\"the library does not have the book in question\", func() {\n        It(\"tells the reader the book is unavailable\", func(ctx SpecContext) {\n            err := valjean.Checkout(ctx, library, \"Les Miserables\")\n            Expect(err).To(MatchError(\"Les Miserables is not in the library catalog\"))\n        }, SpecTimeout(time.Second * 5))\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating huh Forms into a Bubble Tea tea.Model in Go\nDESCRIPTION: This snippet showcases integrating a 'huh' form as part of a Bubble Tea application's 'Model' struct. It demonstrates form creation using groups and select fields for class and level, initializing and updating the form within the tea.Model lifecycle (including form state management and view rendering). Requires the 'huh' and 'tea' (bubbletea) Go packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Model struct {\n    form *huh.Form // huh.Form is just a tea.Model\n}\n\nfunc NewModel() Model {\n    return Model{\n        form: huh.NewForm(\n            huh.NewGroup(\n                huh.NewSelect[string]().\n                    Key(\"class\").\n                    Options(huh.NewOptions(\"Warrior\", \"Mage\", \"Rogue\")...).\n                    Title(\"Choose your class\"),\n\n            huh.NewSelect[int]().\n                Key(\"level\").\n                Options(huh.NewOptions(1, 20, 9999)...).\n                Title(\"Choose your level\"),\n            ),\n        )\n    }\n}\n\nfunc (m Model) Init() tea.Cmd {\n    return m.form.Init()\n}\n\nfunc (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    // ...\n\n    form, cmd := m.form.Update(msg)\n    if f, ok := form.(*huh.Form); ok {\n        m.form = f\n    }\n\n    return m, cmd\n}\n\nfunc (m Model) View() string {\n    if m.form.State == huh.StateCompleted {\n        class := m.form.GetString(\"class\")\n        level := m.form.GetString(\"level\")\n        return fmt.Sprintf(\"You selected: %s, Lvl. %d\", class, level)\n    }\n    return m.form.View()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling Idiom in Go\nDESCRIPTION: The traditional error handling pattern in Go, which simply returns errors up the call stack without adding context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace from Specific Git References\nDESCRIPTION: Commands to create DevPod workspaces from specific Git branches, commits, or pull requests. This allows for working with particular versions of a repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nBranch: devpod up github.com/microsoft/vscode-remote-try-node@main\nCommit: devpod up github.com/microsoft/vscode-remote-try-node@sha256:15ba80171af11374143288fd3d54898860107323\nPR:     devpod up github.com/microsoft/vscode-remote-try-node@pull/108/head # Only works for GitHub!\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code Desktop in DevPod Workspace\nDESCRIPTION: This command starts a DevPod workspace and opens it in VS Code desktop. It requires the remote SSH extension and code CLI to be installed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --ide vscode\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Provider in DevPod CLI\nDESCRIPTION: Command to add the Docker provider to DevPod for local development environments.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-devpod-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod provider add docker\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod CLI on MacOS Silicon/ARM\nDESCRIPTION: This command downloads the DevPod CLI for MacOS ARM64, installs it in /usr/local/bin, and removes the temporary file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o devpod \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-darwin-arm64\" && sudo install -c -m 0755 devpod /usr/local/bin && rm -f devpod\n```\n\n----------------------------------------\n\nTITLE: Validating Provider Options in Go\nDESCRIPTION: Example from AWS Provider showing how to parse and validate environment variables passed from DevPod. The code converts string values to their appropriate types and performs validation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n...\n    diskSizeGB, err := fromEnvOrError(\"AWS_DISK_SIZE\")\n    if err != nil {\n        return nil, err\n    }\n\n    retOptions.DiskSizeGB, err = strconv.Atoi(diskSizeGB)\n    if err != nil {\n        return nil, err\n    }\n...\n```\n\n----------------------------------------\n\nTITLE: Modifying Console Settings in Go\nDESCRIPTION: Demonstrates how to get the current console, set it to raw mode, retrieve console size, and perform resizing operations. The code includes proper cleanup using defer to reset console state.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/console/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncurrent := console.Current()\ndefer current.Reset()\n\nif err := current.SetRaw(); err != nil {\n}\nws, err := current.Size()\ncurrent.Resize(ws)\n```\n\n----------------------------------------\n\nTITLE: Resetting a Workspace with DevPod CLI\nDESCRIPTION: Command to completely reset an existing DevPod workspace. This creates a clean slate with no preserved changes, useful for pulling the latest changes from a git repository or re-uploading a local folder.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --reset\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger in Go with Zap\nDESCRIPTION: Shows usage of Zap's core Logger for maximum performance and type safety. This implementation supports only structured logging and offers better performance than SugaredLogger.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync()\nlogger.Info(\"failed to fetch URL\",\n  // Structured context as strongly typed Field values.\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Second),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Various Fuzzed Data Types in Go\nDESCRIPTION: Demonstrates different methods available to generate primitive and complex data types including strings, integers, bytes, booleans, maps, and more specialized types like tar archives.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncreatedString, err := f.GetString() // Gets a string\ncreatedInt, err := f.GetInt() // Gets an integer\ncreatedByte, err := f.GetByte() // Gets a byte\ncreatedBytes, err := f.GetBytes() // Gets a byte slice\ncreatedBool, err := f.GetBool() // Gets a boolean\nerr := f.FuzzMap(target_map) // Fills a map\ncreatedTarBytes, err := f.TarBytes() // Gets bytes of a valid tar archive\nerr := f.CreateFiles(inThisDir) // Fills inThisDir with files\ncreatedString, err := f.GetStringFrom(\"anyCharInThisString\", ofThisLength) // Gets a string that consists of chars from \"anyCharInThisString\" and has the exact length \"ofThisLength\"\n```\n\n----------------------------------------\n\nTITLE: Querying Percentage of Slow Unary Queries (>250ms) - Prometheus - JSONiq\nDESCRIPTION: Calculates the percentage of unary requests for job 'foo' that are slower than 250ms, per gRPC service, using bucketed histograms. The formula uses Prometheus 'le' (less-or-equal) buckets to assess the fraction of fast requests and subtracts it from 100% to yield the slow fraction, which can aid in SLA/SLO monitoring and alerting.\nDependencies: Requires 'grpc_server_handling_seconds_bucket' and 'grpc_server_handling_seconds_count' metrics with appropriate histogram buckets. Input: histogram time-series; Output: percentage of unary RPCs slower than 0.25 seconds.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_8\n\nLANGUAGE: JSONiq\nCODE:\n```\n100.0 - (\nsum(rate(grpc_server_handling_seconds_bucket{job=\\\"foo\\\",grpc_type=\\\"unary\\\",le=\\\"0.25\\\"}[5m])) by (grpc_service)\n / \nsum(rate(grpc_server_handling_seconds_count{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[5m])) by (grpc_service)\n) * 100.0\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod CLI on Windows\nDESCRIPTION: This PowerShell script downloads the DevPod CLI for Windows, places it in the user's AppData folder, and adds it to the system PATH.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/install.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmd -Force \"$Env:APPDATA\\devpod\"; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12';\nInvoke-WebRequest -URI \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-windows-amd64.exe\" -OutFile $Env:APPDATA\\devpod\\devpod.exe;\n$env:Path += \";\" + $Env:APPDATA + \"\\devpod\";\n[Environment]::SetEnvironmentVariable(\"Path\", $env:Path, [System.EnvironmentVariableTarget]::User);\n```\n\n----------------------------------------\n\nTITLE: Example Output of Kubernetes Resources\nDESCRIPTION: Sample output from the kubectl get all command showing a running Kubernetes cluster.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get all\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/kubernetes   ClusterIP   xxx.yyy.zzz.qqq    <none>        443/TCP   4d14h\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace from Local Path\nDESCRIPTION: Command to create a DevPod workspace from a local directory. This syncs the folder to the remote machine and creates a development environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create from a local path\ndevpod up ./path/to/my-folder\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine in Ubuntu WSL\nDESCRIPTION: Bash script to install Docker Engine on Ubuntu 24.04 running in WSL. The script adds Docker repositories, installs Docker packages, adds the current user to the docker group, and enables the necessary services.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# If your machine is behind corporate firewall, \n# make sure to define your HTTP_PROXY and HTTPS_PROXY before running the command below\n\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo -E curl --verbose -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\nsudo usermod -aG docker $USER\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n\nsudo systemctl start docker.service\nsudo systemctl start containerd.service\n```\n\n----------------------------------------\n\nTITLE: Building a List of Errors in Go using Multierror\nDESCRIPTION: This snippet demonstrates how to use the Append function to create a list of errors. It shows that the function works regardless of whether the first argument is nil, a multierror.Error, or any other error type.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Section in provider.yaml for DevPod\nDESCRIPTION: This code snippet shows the configuration options available in the agent section of the provider.yaml file. It includes settings for agent path, driver selection, inactivity timeouts, credential injection, custom binary downloads, and shutdown commands.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/agent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nagent: # You can also use options within this section (see injectGitCredentials as an example)\n  path: ${DEVPOD}\n  driver: docker # Optional, default: docker\n  inactivityTimeout: 10m\n  containerInactivityTimeout: 10m\n  injectGitCredentials: ${INJECT_GIT_CREDENTIALS}\n  injectDockerCredentials: ${INJECT_DOCKER_CREDENTIALS}\n  binaries:\n    MY_BINARY:\n      - os: linux\n        arch: amd64\n        path: https://url-to-binary.com\n        checksum: shasum-of-binary\n  exec:\n    shutdown: |-\n      ${MY_BINARY} stop\n```\n\n----------------------------------------\n\nTITLE: HTML Form CSRF Protection in Go\nDESCRIPTION: Comprehensive example showing how to implement CSRF protection for HTML forms using gorilla/csrf and gorilla/mux. It includes router setup, form rendering, and form submission handling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/gorilla/csrf\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/signup\", ShowSignupForm)\n    r.HandleFunc(\"/signup/post\", SubmitSignupForm).Methods(\"POST\")\n\n    http.ListenAndServe(\":8000\",\n        csrf.Protect([]byte(\"32-byte-long-auth-key\"))(r))\n}\n\nfunc ShowSignupForm(w http.ResponseWriter, r *http.Request) {\n    t.ExecuteTemplate(w, \"signup_form.tmpl\", map[string]interface{}{\n        csrf.TemplateTag: csrf.TemplateField(r),\n    })\n}\n\nfunc SubmitSignupForm(w http.ResponseWriter, r *http.Request) {\n    // We can trust that requests making it this far have satisfied\n    // our CSRF protection requirements.\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available DevPod Providers\nDESCRIPTION: This command shows how to list all available first-party providers in DevPod using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider list-available\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic Shell Words with go-shellwords\nDESCRIPTION: This snippet demonstrates the basic usage of the `shellwords.Parse` function from the `go-shellwords` library. It takes a single string representing a command line with arguments and splits it into a slice of strings, respecting quotes and basic shell word separation rules. It returns the parsed arguments and any error encountered.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nargs, err := shellwords.Parse(\"./foo --bar=baz\")\n// args should be [\"./foo\", \"--bar=baz\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Prebuilding a Workspace with DevPod CLI\nDESCRIPTION: This command prebuilds a Docker image for a specified GitHub repository and saves it in a given image registry. It uses the current DevPod provider for the build process.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/prebuild-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Prebuild the docker image for github.com/my-org/my-repo and save it in image registry ghcr.io/my-org/my-repo\ndevpod build github.com/my-org/my-repo --repository ghcr.io/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Hooks in Go\nDESCRIPTION: This Go snippet demonstrates how to initialize Logrus with multiple hooks for error reporting and syslog integration. It shows the setup of the Airbrake and syslog hooks in an init function, including error handling for syslog connection failures. The code requires the 'github.com/sirupsen/logrus', 'gopkg.in/gemnasium/logrus-airbrake-hook.v2', and 'github.com/sirupsen/logrus/hooks/syslog' packages, along with Go's built-in syslog support. Parameters such as the Airbrake project id, key, and environment must be supplied. The snippet logs an error if syslog cannot be connected, and otherwise adds the syslog hook for INFO-level and above.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Rendering CSV Data as an ASCII Table using Tablewriter in Go\nDESCRIPTION: Demonstrates how to read tabular data from a CSV file and display it as an ASCII table in Go. The NewCSV constructor loads the CSV file (third argument controls whether the header is set) and output is rendered to Stdout. The snippet requires the tablewriter package and a CSV file at the given path. Outputs aligned and padded ASCII tables from CSV input; SetAlignment customizes cell alignment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntable, _ := tablewriter.NewCSV(os.Stdout, \"testdata/test_info.csv\", true)\ntable.SetAlignment(tablewriter.ALIGN_LEFT)   // Set Alignment\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Adding a DevPod Provider via CLI\nDESCRIPTION: This command demonstrates how to add a provider to DevPod using the CLI. It uses the 'docker' provider as an example.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add docker\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full Go Daemon Service with TCP Echo\nDESCRIPTION: This comprehensive Go example showcases building a functional daemon service using `github.com/takama/daemon`. It defines a `Service` struct embedding `daemon.Daemon`, handles command-line arguments (`install`, `remove`, `start`, `stop`, `status`) via the `Manage` method, and implements a simple TCP echo server that listens on a specified port. The example includes robust signal handling (SIGINT, SIGKILL, SIGTERM) for graceful shutdown and uses standard logging for informational and error messages. Dependencies include `fmt`, `log`, `net`, `os`, `os/signal`, `syscall`, and `github.com/takama/daemon`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/takama/daemon/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Example of a daemon with echo service\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n\n    \"github.com/takama/daemon\"\n)\n\nconst (\n\n    // name of the service\n    name        = \"myservice\"\n    description = \"My Echo Service\"\n\n    // port which daemon should be listen\n    port = \":9977\"\n)\n\n//    dependencies that are NOT required by the service, but might be used\nvar dependencies = []string{\"dummy.service\"}\n\nvar stdlog, errlog *log.Logger\n\n// Service has embedded daemon\ntype Service struct {\n    daemon.Daemon\n}\n\n// Manage by daemon commands or run the daemon\nfunc (service *Service) Manage() (string, error) {\n\n    usage := \"Usage: myservice install | remove | start | stop | status\"\n\n    // if received any kind of command, do it\n    if len(os.Args) > 1 {\n        command := os.Args[1]\n        switch command {\n        case \"install\":\n            return service.Install()\n        case \"remove\":\n            return service.Remove()\n        case \"start\":\n            return service.Start()\n        case \"stop\":\n            return service.Stop()\n        case \"status\":\n            return service.Status()\n        default:\n            return usage, nil\n        }\n    }\n\n    // Do something, call your goroutines, etc\n\n    // Set up channel on which to send signal notifications.\n    // We must use a buffered channel or risk missing the signal\n    // if we're not ready to receive when the signal is sent.\n    interrupt := make(chan os.Signal, 1)\n    signal.Notify(interrupt, os.Interrupt, os.Kill, syscall.SIGTERM)\n\n    // Set up listener for defined host and port\n    listener, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        return \"Possibly was a problem with the port binding\", err\n    }\n\n    // set up channel on which to send accepted connections\n    listen := make(chan net.Conn, 100)\n    go acceptConnection(listener, listen)\n\n    // loop work cycle with accept connections or interrupt\n    // by system signal\n    for {\n        select {\n        case conn := <-listen:\n            go handleClient(conn)\n        case killSignal := <-interrupt:\n            stdlog.Println(\"Got signal:\", killSignal)\n            stdlog.Println(\"Stoping listening on \", listener.Addr())\n            listener.Close()\n            if killSignal == os.Interrupt {\n                return \"Daemon was interruped by system signal\", nil\n            }\n            return \"Daemon was killed\", nil\n        }\n    }\n\n    // never happen, but need to complete code\n    return usage, nil\n}\n\n// Accept a client connection and collect it in a channel\nfunc acceptConnection(listener net.Listener, listen chan<- net.Conn) {\n    for {\n        conn, err := listener.Accept()\n        if err != nil {\n            continue\n        }\n        listen <- conn\n    }\n}\n\nfunc handleClient(client net.Conn) {\n    for {\n        buf := make([]byte, 4096)\n        numbytes, err := client.Read(buf)\n        if numbytes == 0 || err != nil {\n            return\n        }\n        client.Write(buf[:numbytes])\n    }\n}\n\nfunc init() {\n    stdlog = log.New(os.Stdout, \"\", log.Ldate|log.Ltime)\n    errlog = log.New(os.Stderr, \"\", log.Ldate|log.Ltime)\n}\n\nfunc main() {\n    srv, err := daemon.New(name, description, daemon.SystemDaemon, dependencies...)\n    if err != nil {\n        errlog.Println(\"Error: \", err)\n        os.Exit(1)\n    }\n    service := &Service{srv}\n    status, err := service.Manage()\n    if err != nil {\n        errlog.Println(status, \"\\nError: \", err)\n        os.Exit(1)\n    }\n    fmt.Println(status)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging and Compression Handlers in Go\nDESCRIPTION: This example demonstrates how to use handlers.LoggingHandler for request logging and handlers.CompressHandler for response compression in a Go HTTP server. It sets up a router, applies logging to the admin dashboard, and wraps the entire server with compression.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/handlers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n    \"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n    r := http.NewServeMux()\n\n    // Only log requests to our admin dashboard to stdout\n    r.Handle(\"/admin\", handlers.LoggingHandler(os.Stdout, http.HandlerFunc(ShowAdminDashboard)))\n    r.HandleFunc(\"/\", ShowIndex)\n\n    // Wrap our server with our gzip handler to gzip compress all responses.\n    http.ListenAndServe(\":8000\", handlers.CompressHandler(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: This command uses SSH to connect to a DevPod workspace. DevPod automatically modifies ~/.ssh/config to include an entry for the workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace with GPG Agent Forwarding in DevPod\nDESCRIPTION: This command creates a new workspace named 'my-workspace' with GPG agent forwarding enabled. It uses the --gpg-agent-forwarding flag to enable this feature for the specific workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/credentials.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up --gpg-agent-forwarding my-workspace\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod Community Provider using CLI\nDESCRIPTION: This command demonstrates how to install a community provider for DevPod using the DevPod CLI. Replace <user/repository> with the actual GitHub user and repository name of the desired provider.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndevpod provider add <user/repository>\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Lines with Environment Variables using go-shellwords\nDESCRIPTION: This snippet shows how to use the `shellwords.ParseWithEnvs` function to parse a command line string that includes leading environment variable definitions (e.g., `VAR=value`). It separates the environment variable definitions from the command and its arguments, returning three values: a slice of environment strings, a slice of command arguments, and any error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nenvs, args, err := shellwords.ParseWithEnvs(\"FOO=foo BAR=baz ./foo --bar=baz\")\n// envs should be [\"FOO=foo\", \"BAR=baz\"]\n// args should be [\"./foo\", \"--bar=baz\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Redirecting Standard Library log Output to Logrus in Go\nDESCRIPTION: This snippet configures the standard library log package to send its output to a Logrus logger by setting the output to logger.Writer(). The Logrus logger is set up with a JSON formatter. This allows applications that use Go's built-in 'log' functions to leverage Logrus formatting and hooks. Logrus must be imported as 'logrus', and the stdlib 'log' package should be present. Note that 'log' here refers to the standard library, not the Logrus import.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Listing All DevPod Machines\nDESCRIPTION: Command to display all existing DevPod machines. This helps users keep track of their active machines.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine list\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Example - Standard vs Structured\nDESCRIPTION: Comparison between standard Go logging and structured logging approach in controller-runtime. Shows the basic syntax for logging with constant messages and variable key-value pairs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.Printf(\"starting reconciliation for pod %s/%s\", podNamespace, podName)\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal and Querying Window Size with Moby Term in Go\nDESCRIPTION: This Go code demonstrates how to use the Moby term package to check if the STDIN file descriptor refers to a terminal and then fetch the terminal\\'s window size. It requires the \\\"github.com/moby/term\\\" package. The main function retrieves the file descriptor from STDIN, checks terminal status using term.IsTerminal, and if true, uses term.GetWinsize to obtain window dimensions and logs the result. Inputs: runs as a command-line application; outputs: logs terminal height and width. Limitations: code must run in an environment with a valid terminal; errors are logged fatally.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/moby/term/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/moby/term\"\n)\n\nfunc main() {\n\tfd := os.Stdin.Fd()\n\tif term.IsTerminal(fd) {\n\t\tws, err := term.GetWinsize(fd)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"term.GetWinsize: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%d:%d\\n\", ws.Height, ws.Width)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minikube Startup Script Content\nDESCRIPTION: Bash script that launches Minikube with Docker driver and Calico CNI networking.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nminikube start --vm-driver=docker --cni=calico\n```\n\n----------------------------------------\n\nTITLE: Adding a Provider with DevPod CLI\nDESCRIPTION: Command to add a new provider (such as Docker) to DevPod. This is a prerequisite step before creating workspaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add a provider if you haven't already\ndevpod provider add docker\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Provider in DevPod CLI\nDESCRIPTION: Command to add the Docker provider to DevPod for local development environments.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/devpod-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod provider add docker\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logrus Logger Instance\nDESCRIPTION: This example demonstrates creating a new instance of the Logrus logger instead of using the package-level logger. This approach allows multiple logger instances with different configurations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  // You could set this to any `io.Writer` such as a file\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n  // if err == nil {\n  //  log.Out = file\n  // } else {\n  //  log.Info(\"Failed to log to file, using default stderr\")\n  // }\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring HttpRouter - Go\nDESCRIPTION: This snippet demonstrates how to build a minimal web server using the HttpRouter package in Go. The code shows defining handlers, adding routes with and without named parameters, and launching a server on port 8080. Dependencies required are the 'github.com/julienschmidt/httprouter' package as well as the Go standard libraries for HTTP, logging, and formatting. The handlers accept http.ResponseWriter, http.Request, and httprouter.Params, allowing indexed and named access to URL parameters. The server handles two routes: '/' for a welcome message and '/hello/:name' for user-specific greetings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"log\"\n\n    \"github.com/julienschmidt/httprouter\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL-based Program Update in Go\nDESCRIPTION: Example function demonstrating how to update a program from a URL source using the go-update package. The function downloads the update from a specified URL and applies it using the update.Apply method with default options.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/inconshreveable/go-update/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/inconshreveable/go-update\"\n)\n\nfunc doUpdate(url string) error {\n    resp, err := http.Get(url)\n    if err != nil {\n        return err\n    }\n    defer resp.Body.Close()\n    err := update.Apply(resp.Body, update.Options{})\n    if err != nil {\n        // error handling\n    }\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interruptible Ginkgo Specs with Timeouts in Go\nDESCRIPTION: This Go snippet demonstrates how to define an interruptible test spec (`It` block) in Ginkgo v2 using `SpecContext` or `context.Context`. It shows handling context cancellation for operations like HTTP requests and using Gomega's `Eventually` with `WithContext` for asynchronous assertions. The spec is configured with a `NodeTimeout` and a `GracePeriod` to manage execution time and cleanup on interruption or timeout.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nIt(\"is interruptible\", func(ctx SpecContext) { // or context.Context instead of SpecContext, both are valid.\n    // do things until `ctx.Done()` is closed, for example:\n    req, err := http.NewRequestWithContext(ctx, \"POST\", \"/build-widgets\", nil)\n    Expect(err).NotTo(HaveOccured())\n    _, err := http.DefaultClient.Do(req)\n    Expect(err).NotTo(HaveOccured())\n\n    Eventually(client.WidgetCount).WithContext(ctx).Should(Equal(17))\n}, NodeTimeout(time.Second*20), GracePeriod(5*time.Second))\n```\n```\n\n----------------------------------------\n\nTITLE: SSH Provider Implementation Example\nDESCRIPTION: Example configuration for an SSH provider showing initialization and command execution implementation with host verification and command routing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexec:\n  init: |-\n    OUTPUT=$(ssh -oStrictHostKeyChecking=no \\\n                 -p ${PORT} \\\n                 ${EXTRA_FLAGS} \\\n                 \"${HOST}\" \\\n                 'sh -c \"echo DevPodTest\"')\n\n    if [ \"$OUTPUT\" != \"DevPodTest\" ]; then\n      >&2 echo \"Unexpected ssh output.\"\n      >&2 echo \"Please make sure you have configured the correct SSH host\"\n      >&2 echo \"and the following command can be executed on your system:\"\n      >&2 echo ssh -oStrictHostKeyChecking=no -p \"${PORT}\" \"${HOST}\" 'sh -c \"echo DevPodTest\"'\n      exit 1\n    fi\n\n  command: |-\n    ssh -oStrictHostKeyChecking=no \\\n        -p ${PORT} \\\n        \"${EXTRA_FLAGS}\" \\\n        \"${HOST}\" \\\n        \"${COMMAND}\"\n```\n\n----------------------------------------\n\nTITLE: SSH Access to DevPod Machine\nDESCRIPTION: Command to establish an SSH connection directly to a DevPod machine. This provides direct access to the underlying infrastructure.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine ssh <name-of-machine>\n```\n\n----------------------------------------\n\nTITLE: Interactive Shell Implementation with PTY in Go\nDESCRIPTION: Advanced implementation of an interactive shell using PTY, featuring terminal resize handling, raw mode management, and bidirectional data copying between stdin/stdout.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/creack/pty/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"io\"\n        \"log\"\n        \"os\"\n        \"os/exec\"\n        \"os/signal\"\n        \"syscall\"\n\n        \"github.com/creack/pty\"\n        \"golang.org/x/term\"\n)\n\nfunc test() error {\n        // Create arbitrary command.\n        c := exec.Command(\"bash\")\n\n        // Start the command with a pty.\n        ptmx, err := pty.Start(c)\n        if err != nil {\n                return err\n        }\n        // Make sure to close the pty at the end.\n        defer func() { _ = ptmx.Close() }() // Best effort.\n\n        // Handle pty size.\n        ch := make(chan os.Signal, 1)\n        signal.Notify(ch, syscall.SIGWINCH)\n        go func() {\n                for range ch {\n                        if err := pty.InheritSize(os.Stdin, ptmx); err != nil {\n                                log.Printf(\"error resizing pty: %s\", err)\n                        }\n                }\n        }()\n        ch <- syscall.SIGWINCH // Initial resize.\n        defer func() { signal.Stop(ch); close(ch) }() // Cleanup signals when done.\n\n        // Set stdin in raw mode.\n        oldState, err := term.MakeRaw(int(os.Stdin.Fd()))\n        if err != nil {\n                panic(err)\n        }\n        defer func() { _ = term.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort.\n\n        // Copy stdin to the pty and the pty to stdout.\n        // NOTE: The goroutine will keep reading until the next keystroke before returning.\n        go func() { _, _ = io.Copy(ptmx, os.Stdin) }()\n        _, _ = io.Copy(os.Stdout, ptmx)\n\n        return nil\n}\n\nfunc main() {\n        if err := test(); err != nil {\n                log.Fatal(err)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DevPod Machine Status\nDESCRIPTION: Command to check the current status of a specific DevPod machine. This helps verify if a machine is running, stopped, or in another state.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine status <name-of-machine>\n```\n\n----------------------------------------\n\nTITLE: Basic Klog Usage Example\nDESCRIPTION: Basic logging example showing how to use klog's Info and Fatal logging methods\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Initializing termenv Output in Go\nDESCRIPTION: This Go code snippet demonstrates the basic initialization of the `termenv` library. It creates a new `Output` object associated with the standard output (`os.Stdout`). This object is then used to query terminal capabilities and apply styling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := termenv.NewOutput(os.Stdout)\n```\n\n----------------------------------------\n\nTITLE: Defining Compressed OCI Image Core Interface in Go\nDESCRIPTION: This Go interface defines the methods required for a compressed image core, as used for images in remote registries. Implementing this interface allows one to create a v1.Image based solely on compressed blob access. Dependencies include the v1 and types packages for OCI image types. Implementers must supply methods to fetch raw configs, manifests, media type, and access layers by digest. The layer access pattern assumes blobs are compressed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/partial/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype CompressedImageCore interface {\n\tRawConfigFile() ([]byte, error)\n\tMediaType() (types.MediaType, error)\n\tRawManifest() ([]byte, error)\n\tLayerByDigest(v1.Hash) (CompressedLayer, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Startup Script\nDESCRIPTION: Command to start Minikube using the previously created startup script.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n~./minikube-start.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace from Git Repository\nDESCRIPTION: Command to create a DevPod workspace from a Git repository. This initializes a development environment based on the repository content.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create from git repository\ndevpod up github.com/microsoft/vscode-remote-try-node\n```\n\n----------------------------------------\n\nTITLE: JavaScript Application CSRF Protection in Go\nDESCRIPTION: Example of implementing CSRF protection for a JavaScript application with a JSON API. It shows how to set up CSRF middleware for specific routes and pass the CSRF token in response headers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/gorilla/csrf\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n    csrfMiddleware := csrf.Protect([]byte(\"32-byte-long-auth-key\"))\n\n    api := r.PathPrefix(\"/api\").Subrouter()\n    api.Use(csrfMiddleware)\n    api.HandleFunc(\"/user/{id}\", GetUser).Methods(\"GET\")\n\n    http.ListenAndServe(\":8000\", r)\n}\n\nfunc GetUser(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"X-CSRF-Token\", csrf.Token(r))\n    b, err := json.Marshal(user)\n    if err != nil {\n        http.Error(w, err.Error(), 500)\n        return\n    }\n\n    w.Write(b)\n}\n```\n\n----------------------------------------\n\nTITLE: Using gofrs/flock for Thread-safe File Locking in Go\nDESCRIPTION: This snippet shows how to import, instantiate, and utilize the gofrs/flock library to acquire a file-based lock in Go. The lock is tried non-blockingly via TryLock, allowing for safe concurrent use without waiting. It handles potential errors during locking, and ensures to unlock when done. The main dependency is github.com/gofrs/flock, and the key input is the path to the lock file as a string. The output is a boolean indicating lock acquisition and an error object if locking fails. This approach is designed for process-level mutual exclusion scenarios.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gofrs/flock/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/gofrs/flock\"\n\nfileLock := flock.New(\"/var/lock/go-lock.lock\")\n\nlocked, err := fileLock.TryLock()\n\nif err != nil {\n\t// handle locking error\n}\n\nif locked {\n\t// do work\n\tfileLock.Unlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Dockerfile for DevContainer\nDESCRIPTION: Example Dockerfile that uses a Node.js base image and installs additional tools. This demonstrates how to extend the base development container with custom tooling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/devcontainer-json.mdx#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/vscode/devcontainers/javascript-node:0-16-buster\n\n# Install extra tooling into the environment via the following command\nRUN apt-get update && apt-get install vim\n```\n\n----------------------------------------\n\nTITLE: Starting a Simple DevPod Container\nDESCRIPTION: Command to initialize a simple DevPod container using the configuration in the examples/simple directory. This demonstrates the basic usage pattern for launching a DevPod environment with minimal configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up ./examples/simple\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Cache in DevPod Context\nDESCRIPTION: Command to configure a remote registry cache for DevPod builds. The registry should follow the format '{domain}/{project}/{repo}', such as gcr.io/my-project/my-dev-env.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/reduce-build-times-with-cache.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options -o REGISTRY_CACHE={registry}\n```\n\n----------------------------------------\n\nTITLE: Updating a DevPod Provider from GitHub Repository\nDESCRIPTION: Updates a provider from a specified GitHub repository. This allows targeting a specific organization and repository for the provider source.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/update-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider update <provider-name> my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace from Existing Container\nDESCRIPTION: Command to create a DevPod workspace from an existing local container. This works only with the Docker provider and allows reusing a running container.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --source container:$CONTAINER_ID \n```\n\n----------------------------------------\n\nTITLE: Adding an IP Address to the Loopback Interface with Go Netlink\nDESCRIPTION: This example shows how to add a specific IP address (169.254.169.254/32) to the loopback interface using the netlink library. It demonstrates retrieving a link by name, parsing an IP address string, and assigning that address to the interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/netlink/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/tailscale/netlink\"\n)\n\nfunc main() {\n    lo, _ := netlink.LinkByName(\"lo\")\n    addr, _ := netlink.ParseAddr(\"169.254.169.254/32\")\n    netlink.AddrAdd(lo, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Global OPTIONS Handler for CORS in Go with httprouter\nDESCRIPTION: This snippet demonstrates how to configure the `router.GlobalOPTIONS` handler in the `httprouter` package to automatically handle CORS preflight requests. It checks if the request has an `Access-Control-Request-Method` header. If present, it sets the `Access-Control-Allow-Methods` and `Access-Control-Allow-Origin` headers accordingly and responds with a `204 No Content` status code, as required by the CORS specification.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nrouter.GlobalOPTIONS = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(\"Access-Control-Request-Method\") != \"\" {\n        // Set CORS headers\n        header := w.Header()\n        header.Set(\"Access-Control-Allow-Methods\", r.Header.Get(\"Allow\"))\n        header.Set(\"Access-Control-Allow-Origin\", \"*\")\n    }\n\n    // Adjust status code to 204\n    w.WriteHeader(http.StatusNoContent)\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Opening JetBrains IDE in DevPod Workspace\nDESCRIPTION: This command starts a DevPod workspace and opens it in a JetBrains IDE (e.g., Goland). It requires JetBrains Gateway and a valid subscription. A specific IDE version can be specified.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --ide goland\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --ide goland --ide-option VERSION=2022.3.3\n```\n\n----------------------------------------\n\nTITLE: Preloading and Compiling Local Schemas with gojsonschema in Go\nDESCRIPTION: Demonstrates advanced loading and referencing of multiple local schemas with SchemaLoader. Shows use of AddSchema and AddSchemas to preload named schemas, then Compile to reference them, enabling validation against schemas that have dependencies. Requires gojsonschema. Inputs can be schema JSON strings or loader objects with $id fields.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n\tsl := gojsonschema.NewSchemaLoader()\n\tloader1 := gojsonschema.NewStringLoader(`{ \"type\" : \"string\" }`)\n\terr := sl.AddSchema(\"http://some_host.com/string.json\", loader1)\n\n```\n\nLANGUAGE: go\nCODE:\n```\n\tloader2 := gojsonschema.NewStringLoader(`{\n\t\t\t\"$id\" : \"http://some_host.com/maxlength.json\",\n\t\t\t\"maxLength\" : 5\n\t\t}`)\n\terr = sl.AddSchemas(loader2)\n\n```\n\nLANGUAGE: go\nCODE:\n```\n\tloader3 := gojsonschema.NewStringLoader(`{\n\t\"$id\" : \"http://some_host.com/main.json\",\n\t\"allOf\" : [\n\t\t{ \"$ref\" : \"http://some_host.com/string.json\" },\n\t\t{ \"$ref\" : \"http://some_host.com/maxlength.json\" }\n\t]\n\t}`)\n\n\tschema, err := sl.Compile(loader3)\n\ndocumentLoader := gojsonschema.NewStringLoader(`\"hello world\"`)\n\nresult, err := schema.Validate(documentLoader)\n\n```\n\nLANGUAGE: go\nCODE:\n```\nerr = sl.AddSchemas(loader3)\nschema, err := sl.Compile(gojsonschema.NewReferenceLoader(\"http://some_host.com/main.json\"))\n\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from a Custom Go Map Using gojsonschema in Go\nDESCRIPTION: Illustrates loading a schema defined as a Go map, using NewGoLoader. Requires gojsonschema; input is a native Go map corresponding to the desired schema. Output is a loader for schema validation in gojsonschema.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nm := map[string]interface{}{ \"type\": \"string\" }\nloader := gojsonschema.NewGoLoader(m)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Cookie Handler in Go\nDESCRIPTION: Handler function that demonstrates how to encode and set a secure cookie with a map value. Includes secure cookie configuration with HttpOnly and Secure flags.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc SetCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tvalue := map[string]string{\n\t\t\"foo\": \"bar\",\n\t}\n\tif encoded, err := s.Encode(\"cookie-name\", value); err == nil {\n\t\tcookie := &http.Cookie{\n\t\t\tName:  \"cookie-name\",\n\t\t\tValue: encoded,\n\t\t\tPath:  \"/\",\n\t\t\tSecure: true,\n\t\t\tHttpOnly: true,\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing File Ownership for Local User in Linux\nDESCRIPTION: This command changes the ownership of the current directory and its contents back to the local user after using a workspace with a remote container user. It's necessary because the container runtime changes file ownership during overlay.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/troubleshooting/linux-troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R $USER:$GROUP .\n```\n\n----------------------------------------\n\nTITLE: Using SugaredLogger in Go with Zap\nDESCRIPTION: Demonstrates using Zap's SugaredLogger for contexts where performance is important but not critical. Includes both structured and printf-style logging examples.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger, _ := zap.NewProduction()\ndefer logger.Sync() // flushes buffer, if any\nsugar := logger.Sugar()\nsugar.Infow(\"failed to fetch URL\",\n  // Structured context as loosely typed key-value pairs.\n  \"url\", url,\n  \"attempt\", 3,\n  \"backoff\", time.Second,\n)\nsugar.Infof(\"Failed to fetch URL: %s\", url)\n```\n\n----------------------------------------\n\nTITLE: YAML-JSON Conversion Example in Go\nDESCRIPTION: Shows how to convert between YAML and JSON formats using yaml.JSONToYAML and yaml.YAMLToJSON functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Key Rotation Function in Go\nDESCRIPTION: Function that performs the actual key rotation by updating the previous and current keys in the key store.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Rotate(newCookie *securecookie.SecureCookie) {\n\tcookies[\"previous\"] = cookies[\"current\"]\n\tcookies[\"current\"] = newCookie\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Colors from Various Spaces (Go)\nDESCRIPTION: Demonstrates various ways to create a `colorful.Color` object representing the same blue color. It shows initialization using RGB values directly, parsing a Hex string (with error handling), and using constructors for HSV, CIE-XYZ, CIE-xyY, CIE-L*a*b*, CIE-L*u*v*, and CIE-L*C*h° (HCL) color spaces. Finally, it prints the resulting RGB values.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Any of the following should be the same\nc := colorful.Color{0.313725, 0.478431, 0.721569}\nc, err := colorful.Hex(\"#517AB8\")\nif err != nil {\n    log.Fatal(err)\n}\nc = colorful.Hsv(216.0, 0.56, 0.722)\nc = colorful.Xyz(0.189165, 0.190837, 0.480248)\nc = colorful.Xyy(0.219895, 0.221839, 0.190837)\nc = colorful.Lab(0.507850, 0.040585,-0.370945)\nc = colorful.Luv(0.507849,-0.194172,-0.567924)\nc = colorful.Hcl(276.2440, 0.373160, 0.507849)\nfmt.Printf(\"RGB values: %v, %v, %v\", c.R, c.G, c.B)\n```\n\n----------------------------------------\n\nTITLE: Preparing, Sending, and Responding to HTTP Requests in Go\nDESCRIPTION: Demonstrates the typical pattern for preparing an HTTP request, sending it with various decorators, and responding to the result using the go-autorest package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreq, err := Prepare(&http.Request{},\n  token.WithAuthorization())\n\nresp, err := Send(req,\n  WithLogging(logger),\n  DoErrorIfStatusCode(http.StatusInternalServerError),\n  DoCloseIfError(),\n  DoRetryForAttempts(5, time.Second))\n\nerr = Respond(resp,\n\t\tByDiscardingBody(),\n  ByClosing())\n```\n\n----------------------------------------\n\nTITLE: Stopping a Workspace via DevPod CLI\nDESCRIPTION: Command to stop a DevPod workspace using the CLI. This pauses the container or shuts down the underlying VM, depending on the provider.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/stop-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod stop my-workspace\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with Value Interface\nDESCRIPTION: Shows how to create custom flags that implement the Value interface and couple them to flag parsing using the Var() function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Complete Provider Manifest Template\nDESCRIPTION: A comprehensive provider manifest template showing all available configuration options including name, version, options, agent settings, execution commands and binary definitions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname:  name-of-provider\nversion: version-number\ndescription: quick description # Optional\nicon: https://url-to-icon.com  # Shown in the Desktop App\noptions:\n  # Options for the provider, DevPod will pass these as\n  # ENV Variables when calling the provider\n  OPTION_NAME:\n    description: \"option description\"\n    default: \"value\"\n    required: true # or false\n  AGENT_PATH:\n    description: The path where to inject the DevPod agent to.\n    default: /opt/devpod/agent\nagent:\n  path: ${AGENT_PATH}\nexec:\n  command: # Required: a command to execute on the remote machine or container\n  init:    # Optional: a command to init the provider, login to an account or similar\n  create:  # Optional: a command to create the machine\n  delete:  # Optional: a command to delete the machine\n  start:   # Optional: a command to start the machine\n  stop:    # Optional: a command to stop the machine\n  status:  # Optional: a command to get the machine's status\nbinaries:  # Optional binaries DevPod should download for this provider\n  MY_BINARY: # Will be available as MY_BINARY environment variable in the exec section\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Group Form with Fields in Go\nDESCRIPTION: Demonstrates creating a form with multiple groups containing different field types including select, multi-select, input, and confirmation fields with validation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nform := huh.NewForm(\n    huh.NewGroup(\n        huh.NewSelect[string]().\n            Title(\"Choose your burger\").\n            Options(\n                huh.NewOption(\"Charmburger Classic\", \"classic\"),\n                huh.NewOption(\"Chickwich\", \"chickwich\"),\n                huh.NewOption(\"Fishburger\", \"fishburger\"),\n                huh.NewOption(\"Charmpossible™ Burger\", \"charmpossible\"),\n            ).\n            Value(&burger),\n\n        huh.NewMultiSelect[string]().\n            Title(\"Toppings\").\n            Options(\n                huh.NewOption(\"Lettuce\", \"lettuce\").Selected(true),\n                huh.NewOption(\"Tomatoes\", \"tomatoes\").Selected(true),\n                huh.NewOption(\"Jalapeños\", \"jalapeños\"),\n                huh.NewOption(\"Cheese\", \"cheese\"),\n                huh.NewOption(\"Vegan Cheese\", \"vegan cheese\"),\n                huh.NewOption(\"Nutella\", \"nutella\"),\n            ).\n            Limit(4).\n            Value(&toppings),\n\n        huh.NewSelect[int]().\n            Title(\"How much Charm Sauce do you want?\").\n            Options(\n                huh.NewOption(\"None\", 0),\n                huh.NewOption(\"A little\", 1),\n                huh.NewOption(\"A lot\", 2),\n            ).\n            Value(&sauceLevel),\n    ),\n\n    huh.NewGroup(\n        huh.NewInput().\n            Title(\"What's your name?\").\n            Value(&name).\n            Validate(func(str string) error {\n                if str == \"Frank\" {\n                    return errors.New(\"Sorry, we don't serve customers named Frank.\")\n                }\n                return nil\n            }),\n\n        huh.NewText().\n            Title(\"Special Instructions\").\n            CharLimit(400).\n            Value(&instructions),\n\n        huh.NewConfirm().\n            Title(\"Would you like 15% off?\").\n            Value(&discount),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Field Configuration Example in Go\nDESCRIPTION: Demonstrates creating a multi-select field with pre-selected options and limits.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewMultiSelect[string]().\n    Options(\n        huh.NewOption(\"Lettuce\", \"Lettuce\").Selected(true),\n        huh.NewOption(\"Tomatoes\", \"Tomatoes\").Selected(true),\n        huh.NewOption(\"Charm Sauce\", \"Charm Sauce\"),\n        huh.NewOption(\"Jalapeños\", \"Jalapeños\"),\n        huh.NewOption(\"Cheese\", \"Cheese\"),\n        huh.NewOption(\"Vegan Cheese\", \"Vegan Cheese\"),\n        huh.NewOption(\"Nutella\", \"Nutella\"),\n    ).\n    Title(\"Toppings\").\n    Limit(4).\n    Value(&toppings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Mounts for SELinux Compatibility\nDESCRIPTION: This JSON configuration snippet demonstrates how to modify volume definitions in a DevPod workspace to be compatible with SELinux. It appends ':Z' to the volume definition to set the correct SELinux context and resolve 'Permission Denied' errors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/troubleshooting/linux-troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    // some fields\n\n    \"workspaceMount\": \"\",\n    \"workspaceFolder\": \"/workspaces/${localWorkspaceFolderBasename}\",\n    \"runArgs\": [\n        // other args\n        \"--volume=${localWorkspaceFolder}:/workspaces/${localWorkspaceFolderBasename}:Z\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Binaries Structure in YAML\nDESCRIPTION: The basic structure for declaring helper binaries in a DevPod provider configuration file. Each binary is defined with OS, architecture, path, checksum, and optional archive path information.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/binaries.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  NAME:\n    - os: # Which OS is this specific binary\n      arch: # Binary arch\n      path: # Remote (URL) or local path to binary\n      checksum:  # sha sum of the binary\n      archivePath: # If its an archive, the relative path to the binary. Supported archives are .tgz, .tar, .tar.gz, .zip\n```\n\n----------------------------------------\n\nTITLE: Reading Cookie with Key Rotation in Go\nDESCRIPTION: Handler function that reads a cookie using both current and previous keys in a key rotation setup with DecodeMulti.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tif cookie, err := r.Cookie(\"cookie-name\"); err == nil {\n\t\tvalue := make(map[string]string)\n\t\terr = securecookie.DecodeMulti(\"cookie-name\", cookie.Value, &value, cookies[\"current\"], cookies[\"previous\"])\n\t\tif err == nil {\n\t\t\tfmt.Fprintf(w, \"The value of foo is %q\", value[\"foo\"])\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate-Based Authentication in Go\nDESCRIPTION: Implementation of certificate-based authentication using PFX certificate\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncertificatePath := \"./example-app.pfx\"\n\ncertData, err := ioutil.ReadFile(certificatePath)\nif err != nil {\n\treturn nil, fmt.Errorf(\"failed to read the certificate file (%s): %v\", certificatePath, err)\n}\n\n// Get the certificate and private key from pfx file\ncertificate, rsaPrivateKey, err := decodePkcs12(certData, \"\")\nif err != nil {\n\treturn nil, fmt.Errorf(\"failed to decode pkcs12 certificate while creating spt: %v\", err)\n}\n\nspt, err := adal.NewServicePrincipalTokenFromCertificate(\n\t*oauthConfig,\n\tapplicationID,\n\tcertificate,\n\trsaPrivateKey,\n\tresource,\n\tcallbacks...)\n\n// Acquire a new access token\nerr  = spt.Refresh()\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Execution with PTY in Go\nDESCRIPTION: Demonstrates how to execute a command (grep) with pseudo-terminal support, including writing input and copying output to stdout.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/creack/pty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/creack/pty\"\n)\n\nfunc main() {\n\tc := exec.Command(\"grep\", \"--color=auto\", \"bar\")\n\tf, err := pty.Start(c)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo func() {\n\t\tf.Write([]byte(\"foo\\n\"))\n\t\tf.Write([]byte(\"bar\\n\"))\n\t\tf.Write([]byte(\"baz\\n\"))\n\t\tf.Write([]byte{4}) // EOT\n\t}()\n\tio.Copy(os.Stdout, f)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Home Directory Path with go-homedir in Go\nDESCRIPTION: Demonstrates calling the `homedir.Dir()` function to retrieve the current user's home directory path as a string. This function avoids using cgo, making it suitable for cross-compilation environments, unlike the standard `os/user` package which requires cgo on Darwin systems.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhomedir.Dir()\n```\n\n----------------------------------------\n\nTITLE: Configuring DevPod IDE Options\nDESCRIPTION: These commands show how to list and set IDE options in DevPod. They allow customizing IDE behavior, such as specifying versions or download paths.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ide options openvscode\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ide set-options openvscode -o VERSION=v1.76.2\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: Command to establish an SSH connection to a DevPod workspace. Replace MY_WORKSPACE_NAME with the name of your workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-ssh.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh MY_WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Adding a Local DevPod Provider\nDESCRIPTION: This command demonstrates how to add a locally downloaded provider to DevPod using the CLI by specifying the file path to the provider.yaml manifest.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add ../devpod-provider-mock/provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Interface Extension Pattern in Go\nDESCRIPTION: Demonstrates how to safely extend interfaces by adding new functionality through additional interfaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Exporter interface {\n\tExport()\n}\n\ntype Closer interface {\n\tClose()\n}\n\nfunc caller(e Exporter) {\n\t/* ... */\n\tif c, ok := e.(Closer); ok {\n\t\tc.Close()\n\t}\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lumberjack Logger with Standard Log Package\nDESCRIPTION: Example showing how to configure and use Lumberjack with Go's standard log package. Sets up log rotation with max file size, backups, age limits, and compression.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetOutput(&lumberjack.Logger{\n    Filename:   \"/var/log/myapp/foo.log\",\n    MaxSize:    500, // megabytes\n    MaxBackups: 3,\n    MaxAge:     28, //days\n    Compress:   true, // disabled by default\n})\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod CLI on Linux AMD64\nDESCRIPTION: This command downloads the DevPod CLI for Linux AMD64, installs it in /usr/local/bin, and removes the temporary file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/install.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o devpod \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-linux-amd64\" && sudo install -c -m 0755 devpod /usr/local/bin && rm -f devpod\n```\n\n----------------------------------------\n\nTITLE: Using Default Mode for CBOR Encoding and Decoding in Go\nDESCRIPTION: Demonstrates the default mode API for encoding and decoding CBOR data, including marshaling, unmarshaling, and creating encoders and decoders. It also shows new functions added in v2.5.0 and v2.7.0 for handling remaining bytes and user-specified buffers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// API matches encoding/json for Marshal, Unmarshal, Encode, Decode, etc.\nb, err = cbor.Marshal(v)        // encode v to []byte b\nerr = cbor.Unmarshal(b, &v)     // decode []byte b to v\ndecoder = cbor.NewDecoder(r)    // create decoder with io.Reader r\nerr = decoder.Decode(&v)        // decode a CBOR data item to v\n\n// v2.7.0 added MarshalToBuffer() and UserBufferEncMode interface.\nerr = cbor.MarshalToBuffer(v, b) // encode v to b instead of using built-in buf pool.\n\n// v2.5.0 added new functions that return remaining bytes.\n\n// UnmarshalFirst decodes first CBOR data item and returns remaining bytes.\nrest, err = cbor.UnmarshalFirst(b, &v)   // decode []byte b to v\n\n// DiagnoseFirst translates first CBOR data item to text and returns remaining bytes.\ntext, rest, err = cbor.DiagnoseFirst(b)  // decode []byte b to Diagnostic Notation text\n\n// NOTE: Unmarshal returns ExtraneousDataError if there are remaining bytes,\n// but new funcs UnmarshalFirst and DiagnoseFirst do not.\n```\n\n----------------------------------------\n\nTITLE: Implementing Survey Validation in Go\nDESCRIPTION: Demonstrates how to add validation to survey questions using custom validation functions and built-in validators like Required.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_13\n\nLANGUAGE: golang\nCODE:\n```\nq := &survey.Question{\n    Prompt: &survey.Input{Message: \"Hello world validation\"},\n    Validate: func (val interface{}) error {\n        // since we are validating an Input, the assertion will always succeed\n        if str, ok := val.(string) ; !ok || len(str) > 10 {\n            return errors.New(\"This response cannot be longer than 10 characters.\")\n        }\n\treturn nil\n    },\n}\n\ncolor := \"\"\nprompt := &survey.Input{ Message: \"Whats your name?\" }\n\n// you can pass multiple validators here and survey will make sure each one passes\nsurvey.AskOne(prompt, &color, survey.WithValidator(survey.Required))\n```\n\n----------------------------------------\n\nTITLE: Setting SO_MARK Socket Option in Go\nDESCRIPTION: Go code demonstrating how to set the `SO_MARK` socket option on the pinger using `pinger.SetMark(100)`. This tags outgoing packets generated by this pinger with a specific mark (100 in this example), often used for policy-based routing or firewall rules on Linux. Setting this option requires the `CAP_NET_ADMIN` capability or root privileges.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npinger.SetMark(100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with Lumberjack in Zap\nDESCRIPTION: Example showing how to integrate the lumberjack log rotation package with Zap using zapcore.WriteSyncer. Demonstrates setting up log file rotation with size limits, backup counts, and age limitations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nw := zapcore.AddSync(&lumberjack.Logger{\n  Filename:   \"/var/log/myapp/foo.log\",\n  MaxSize:    500, // megabytes\n  MaxBackups: 3,\n  MaxAge:     28, // days\n})\ncore := zapcore.NewCore(\n  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n  w,\n  zap.InfoLevel,\n)\nlogger := zap.New(core)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Main Function\nDESCRIPTION: Example showing how to initialize a root logger in the main function using a hypothetical logging implementation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Prebuild Repository in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to specify a prebuild repository directly in the devcontainer.json configuration file. This allows for easier automation of prebuilding through CI/CD pipelines on changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/prebuild-a-workspace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"customizations\": {\n    \"devpod\": {\n      \"prebuildRepository\": \"ghcr.io/my-org/my-repo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Demonstrates how to implement configuration options using a functional approach with closures.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: This snippet demonstrates how to initialize a gRPC server with Prometheus monitoring interceptors. It includes registering the service implementations and setting up the Prometheus metrics handler.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n    // Initialize your gRPC server's interceptor.\n    myServer := grpc.NewServer(\n        grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),\n        grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n    )\n    // Register your gRPC service implementations.\n    myservice.RegisterMyServiceServer(s.server, &myServiceImpl{})\n    // After all your registrations, make sure all of the Prometheus metrics are initialized.\n    grpc_prometheus.Register(myServer)\n    // Register Prometheus metrics handler.    \n    http.Handle(\"/metrics\", promhttp.Handler())\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Default DevPod Provider\nDESCRIPTION: This command shows how to set a provider as the default provider for DevPod using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider use <provider-name>\n```\n\n----------------------------------------\n\nTITLE: Converting between JSON and YAML in Go\nDESCRIPTION: Shows how to use yaml.JSONToYAML and yaml.YAMLToJSON functions to convert between JSON and YAML formats. It demonstrates the conversion of a JSON object to YAML and back to JSON.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ghodss/yaml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ghodss/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tname: John\n\tage: 30\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod with GitHub Repository\nDESCRIPTION: Command to initiate DevPod with a GitHub repository URL while specifying no IDE should be launched. This command creates a development environment using the configured settings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/environment-variables-in-devcontainer-json.mdx#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndevpod up <GITHUB-REPOSITORY-URL> --ide=none\n```\n\n----------------------------------------\n\nTITLE: Listing All Containers using Docker Engine API in Go\nDESCRIPTION: This Go code demonstrates how to use the Docker Engine API client to list all containers, equivalent to the 'docker ps --all' command. It initializes the API client, retrieves the container list, and prints basic information for each container.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/docker/docker/client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Logrus\nDESCRIPTION: This snippet demonstrates how to use structured logging with fields in Logrus. Instead of using interpolated strings, it adds contextual information as separate fields, making logs more discoverable and useful.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width with go-runewidth in Go\nDESCRIPTION: This code demonstrates how to use the go-runewidth package's StringWidth function in Go to determine the display width of a string containing multi-byte or Unicode characters. The example checks that the Japanese string \\\"つのだ☆HIRO\\\" is 12 columns wide when rendered in a monospaced environment. This snippet requires the go-runewidth package as a dependency, which must be imported in a Go project. The key parameter is the input string, and the function outputs an integer representing its visual width; there are no side effects or mutation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-runewidth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Provider Binary Configuration\nDESCRIPTION: Example of binary configuration for a Google Cloud provider, showing how to specify binary downloads for different operating systems and architectures.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  GCLOUD_PROVIDER:\n    - os: linux\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-linux-amd64\n      checksum: 38f92457507563ee56ea40a2ec40196d12ac2bbd50a924d76f55827e96e5f831\n    - os: linux\n      arch: arm64\n      path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-linux-arm64\n      checksum: 48e8dfa20962f1c3eb1e3da17d57842a0e26155df2b94377bcdf5b8070d7b17e\n    - os: darwin\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-darwin-amd64\n      checksum: 43ee6ecb7855d282a0512ccf6055cce029895f173beb95a8c442f77560d26678\n    - os: darwin\n      arch: arm64\n      path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-darwin-arm64\n      checksum: c2c2d57c5d48f22814f2393f61fd6a78bdc2cde7eabc3faffd8f35eaceec4422\n    - os: windows\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-windows-amd64.exe\n      checksum: 9b81ec48c849f222aaf30f0cb85057d4e6619d1c0f787b27925c8b8adb431a58\nexec:\n  init: ${GCLOUD_PROVIDER} init\n  command: ${GCLOUD_PROVIDER} command\n  create: ${GCLOUD_PROVIDER} create\n  delete: ${GCLOUD_PROVIDER} delete\n  start: ${GCLOUD_PROVIDER} start\n  stop: ${GCLOUD_PROVIDER} stop\n  status: ${GCLOUD_PROVIDER} status\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Stream with zstd Writer in Go\nDESCRIPTION: Demonstrates how to compress data from an `io.Reader` to an `io.Writer` using the `zstd.NewWriter` function from the `github.com/klauspost/compress/zstd` package. It utilizes `io.Copy` for the transfer and emphasizes the necessity of calling `enc.Close()` to finalize the compression and release resources, even on error. This approach is suitable for large data streams and uses default compression settings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Handling Time Histogram for gRPC Prometheus Metrics in Go\nDESCRIPTION: This snippet demonstrates how to enable the handling time histogram for more detailed latency monitoring. This should be called in the server initialization code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngrpc_prometheus.EnableHandlingTimeHistogram()\n```\n\n----------------------------------------\n\nTITLE: Buffer Decompression with zstd in Go\nDESCRIPTION: Example code for decompressing data buffers using the zstd package. This implementation creates a cached decoder with concurrent decompression disabled and provides a function to decompress byte slices. The decoder can be reused across multiple operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Machine ID in Go\nDESCRIPTION: Go code snippet demonstrating how to retrieve the machine ID using the machineid library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nfunc main() {\n  id, err := machineid.ID()\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Bridge Interface and Configuring with Go Netlink\nDESCRIPTION: This example demonstrates how to create a new bridge interface named 'foo' and add the existing eth1 interface to it using the netlink library. It shows the process of initializing link attributes, creating a bridge, and setting up interface relationships.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/netlink/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/tailscale/netlink\"\n)\n\nfunc main() {\n    la := netlink.NewLinkAttrs()\n    la.Name = \"foo\"\n    mybridge := &netlink.Bridge{LinkAttrs: la}\n    err := netlink.LinkAdd(mybridge)\n    if err != nil  {\n        fmt.Printf(\"could not add %s: %v\\n\", la.Name, err)\n    }\n    eth1, _ := netlink.LinkByName(\"eth1\")\n    netlink.LinkSetMaster(eth1, mybridge)\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Options in Groups for Desktop App\nDESCRIPTION: Example of organizing provider options into logical groups for the DevPod Desktop application. Groups can be set to be visible or collapsed by default.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noptionGroups:\n  - options:\n      - AWS_ACCESS_KEY_ID\n      - AWS_SECRET_ACCESS_KEY\n      - AWS_AMI\n      - AWS_DISK_SIZE\n      - AWS_INSTANCE_TYPE\n      - AWS_VPC_ID\n    name: \"AWS options\"\n    defaultVisible: true\n  - options:\n      - AGENT_PATH\n      - INACTIVITY_TIMEOUT\n      - INJECT_DOCKER_CREDENTIALS\n      - INJECT_GIT_CREDENTIALS\n    name: \"Agent options\"\n    defaultVisible: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Credential Injection in DevPod\nDESCRIPTION: This command disables the injection of git credentials into all workspaces. It sets the SSH_INJECT_GIT_CREDENTIALS option to false in the default context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/credentials.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options default -o SSH_INJECT_GIT_CREDENTIALS=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Machine Mode for DevPod Provider\nDESCRIPTION: This command demonstrates how to enable single machine mode for a provider, allowing all workspaces to use a single machine.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider use <provider-name> --single-machine\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: Command to manually connect to a DevPod workspace using SSH when automatic IDE connection is not available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/devpod-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh MY_WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Monitoring with Gonotify in Go\nDESCRIPTION: Example demonstrating how to use Gonotify's DirWatcher to monitor a directory for file creation and close events. The code sets up a context-aware watcher that monitors /tmp directory and handles events with a 5-second timeout.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/illarion/gonotify/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/illarion/gonotify/v2\"\n\t\"time\"\n\t\"context\"\n)\n\nfunc main() {\n\n\tctx, cancel := context.WithCancel(context.Background())\n\n\twatcher, err := gonotify.NewDirWatcher(ctx, gonotify.IN_CREATE|gonotify.IN_CLOSE, \"/tmp\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.C:\n\t\t\tfmt.Printf(\"Event: %s\\n\", event)\n\n\t\t\tif event.Mask&gonotify.IN_CREATE != 0 {\n\t\t\t\tfmt.Printf(\"File created: %s\\n\", event.Name)\n\t\t\t}\n\n\t\t\tif event.Mask&gonotify.IN_CLOSE != 0 {\n\t\t\t\tfmt.Printf(\"File closed: %s\\n\", event.Name)\n\t\t\t}\n\n\t\tcase <-time.After(5 * time.Second):\n\t\t\tfmt.Println(\"Timeout\")\n\t\t\tcancel()\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML with Person Struct in Go\nDESCRIPTION: Demonstrates how to marshal a Person struct to YAML and unmarshal it back using the yaml package. It shows the compatibility with JSON struct tags and the resulting YAML output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ghodss/yaml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ghodss/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Content from an io.Reader using go-digest Verifier in Go\nDESCRIPTION: Illustrates how to verify content provided via an `io.Reader` against a known digest (`id`). It creates a `Verifier` instance from the digest, copies the reader's content into the verifier using `io.Copy`, and checks the result with `verifier.Verified()`. This method is suitable for streams or large files. Requires `go-digest`, `io`, and potentially `errors` packages. Assumes `getContent()` returns an `io.Reader` and `id` is a `digest.Digest`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Go Reaper Background Process in Go\nDESCRIPTION: Demonstrates the simplest way to use the go-reaper library. It involves importing the package and launching `reaper.Reap()` in a separate goroutine within the `main` function. This setup automatically handles the reaping of orphaned child processes in the background, which is crucial when the Go application runs as PID 1.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ramr/go-reaper/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport reaper \"github.com/ramr/go-reaper\"\n\nfunc main() {\n        //  Start background reaping of orphaned child processes.\n        go reaper.Reap()\n\n        //  Rest of your code ...\n\n        //  Note: If you also manage processes within your code aka\n        //        exec commands or include some code that does do that,\n        //        please refer to the section titled\n        //        \"[Into The Woods]\"(https://github.com/ramr/go-reaper#into-the-woods)\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Using CBOR Tags with TagSet in Go\nDESCRIPTION: Shows how to create and use a TagSet to handle CBOR tags. It demonstrates registering a tag, creating encoding and decoding modes with tags, and using them for marshaling and unmarshaling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Use signedCWT struct defined in \"Decoding CWT\" example.\n\n// Create TagSet (safe for concurrency).\ntags := cbor.NewTagSet()\n// Register tag COSE_Sign1 18 with signedCWT type.\ntags.Add(\t\n\tcbor.TagOptions{EncTag: cbor.EncTagRequired, DecTag: cbor.DecTagRequired}, \n\treflect.TypeOf(signedCWT{}), \n\t18)\n\n// Create DecMode with immutable tags.\ndm, _ := cbor.DecOptions{}.DecModeWithTags(tags)\n\n// Unmarshal to signedCWT with tag support.\nvar v signedCWT\nif err := dm.Unmarshal(data, &v); err != nil {\n\treturn err\n}\n\n// Create EncMode with immutable tags.\nem, _ := cbor.EncOptions{}.EncModeWithTags(tags)\n\n// Marshal signedCWT with tag number.\nif data, err := cbor.Marshal(v); err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Digest from Bytes using go-digest in Go\nDESCRIPTION: Demonstrates the basic usage of `digest.FromBytes` to compute a unique digest (hash identifier) for a given byte slice. This is a common pattern for creating identifiers in content-addressable storage systems. It requires the `go-digest` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Listing DevPod Provider Options\nDESCRIPTION: This command demonstrates how to list all available options for a specific provider using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider options <provider-name>\n```\n\n----------------------------------------\n\nTITLE: Using Format Property in JSON Schema\nDESCRIPTION: Demonstrates the use of the 'format' property in a JSON schema to validate against well-known formats. This example shows how to specify an email format.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"email\"}\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Handling in JavaScript with Axios\nDESCRIPTION: JavaScript code snippet demonstrating how to read the CSRF token from the page and include it in subsequent AJAX requests using the Axios library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet csrfToken = document.getElementsByName(\"gorilla.csrf.Token\")[0].value\n\nconst instance = axios.create({\n  baseURL: \"https://example.com/api/\",\n  timeout: 1000,\n  headers: { \"X-CSRF-Token\": csrfToken }\n})\n\ntry {\n  let resp = await instance.post(endpoint, formData)\n  // Do something with resp\n} catch (err) {\n  // Handle the exception\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in Go Multierror\nDESCRIPTION: This example shows how to customize the format of the Error() string function by specifying a custom ErrorFormat. This allows for flexible error message formatting.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Current Ginkgo Test in Go\nDESCRIPTION: The 'Skip(message)' function, when called within a Ginkgo test (It, Specify, etc.), immediately stops the execution of the current test and marks it as skipped. The provided string 'message' is reported as the reason for skipping. Introduced in version 1.3.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nSkip(message)\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage with Package-level Logger\nDESCRIPTION: This example demonstrates the simplest way to use Logrus through the package-level exported logger, using WithFields to add structured data to log entries.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters Using Context - Go\nDESCRIPTION: This code snippet demonstrates how to extract named route parameters from the request context when using http.Handler with HttpRouter in Go. The example depends on the 'github.com/julienschmidt/httprouter' package and uses the standard library 'fmt' for formatting responses. The function retrieves route parameters via httprouter.ParamsFromContext and responds with a personalized greeting. This approach enables compatibility with conventional http.Handler patterns, and named parameters are provided to the handler's logic from the request context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    params := httprouter.ParamsFromContext(r.Context())\n\n    fmt.Fprintf(w, \"hello, %s!\\n\", params.ByName(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GPG Agent Forwarding in DevPod\nDESCRIPTION: This command enables GPG agent forwarding for all workspaces. It sets the GPG_AGENT_FORWARDING option to true in the default context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/credentials.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options default -o GPG_AGENT_FORWARDING=true\n```\n\n----------------------------------------\n\nTITLE: Verifying PersistentVolume Creation\nDESCRIPTION: Lists all PersistentVolumes in the cluster to confirm successful creation of the DevPod volume.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE\ndevpod-pv                                  1Gi        RWO            Retain           Available                                   12d\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server with Gzip Compression in Go\nDESCRIPTION: Complete example of creating an HTTP server in Go that uses gziphandler to compress responses. The example shows how to wrap a standard HTTP handler with the gzip functionality and set up a basic server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/NYTimes/gziphandler/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"github.com/NYTimes/gziphandler\"\n)\n\nfunc main() {\n\twithoutGz := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tio.WriteString(w, \"Hello, World\")\n\t})\n\n\twithGz := gziphandler.GzipHandler(withoutGz)\n\n\thttp.Handle(\"/\", withGz)\n\thttp.ListenAndServe(\"0.0.0.0:8000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Simple Go Daemon\nDESCRIPTION: This minimal Go example demonstrates how to install the current application as a system daemon using the `github.com/takama/daemon` package. It initializes a new daemon service with a name and description using `daemon.New` and then attempts to install it using `service.Install`. Errors during initialization or installation are logged to the standard error output, and the final status message is printed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/takama/daemon/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/takama/daemon\"\n)\n\nfunc main() {\n    service, err := daemon.New(\"name\", \"description\", daemon.SystemDaemon)\n    if err != nil {\n        log.Fatal(\"Error: \", err)\n    }\n    status, err := service.Install()\n    if err != nil {\n        log.Fatal(status, \"\\nError: \", err)\n    }\n    fmt.Println(status)\n}\n```\n\n----------------------------------------\n\nTITLE: Map Validation Example in Go\nDESCRIPTION: Shows how to validate maps using validation templates. The example includes nested map validation and various validation rules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Grapheme Clusters Using Graphemes Class in Go\nDESCRIPTION: Demonstrates the use of the Graphemes class to conveniently iterate over grapheme clusters and access their rune compositions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Survey Input Prompt Configuration\nDESCRIPTION: Example showing how to configure and use the basic input prompt type with validation\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nname := \"\"\nprompt := &survey.Input{\n    Message: \"ping\",\n}\nsurvey.AskOne(prompt, &name)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Digest Against Content using go-digest in Go\nDESCRIPTION: Shows how to verify if a given byte slice matches an existing digest. It recalculates the digest of the content using `digest.FromBytes` and compares it to the expected digest `id`. This ensures the content has not been altered. Requires the `go-digest` package and potentially the `errors` package for error handling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dotfiles Configuration for All Workspaces in DevPod CLI\nDESCRIPTION: Command to set default dotfiles repository and installation script at the context level. These settings will be applied to all new workspaces created in this context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/dotfiles-in-a-workspace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options -o DOTFILES_URL=https://github.com/89luca89/dotfiles -o DOTFILES_SCRIPT=bin/.local/bin/dotfiles\n```\n\n----------------------------------------\n\nTITLE: Initializing SecureCookie Instance in Go\nDESCRIPTION: Creates a new SecureCookie instance with hash and block keys for HMAC authentication and optional AES encryption. Hash keys should be 32+ bytes, and block keys should be 16 or 32 bytes for AES-128 or AES-256.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Hash keys should be at least 32 bytes long\nvar hashKey = []byte(\"very-secret\")\n// Block keys should be 16 bytes (AES-128) or 32 bytes (AES-256) long.\n// Shorter keys may weaken the encryption used.\nvar blockKey = []byte(\"a-lot-secret\")\nvar s = securecookie.New(hashKey, blockKey)\n```\n\n----------------------------------------\n\nTITLE: Using Struct Tags for TOML Key Mapping in Go\nDESCRIPTION: This example shows how to use struct tags in Go to map TOML keys that don't directly correspond to struct field names. It demonstrates the TOML data and the Go struct with a custom tag.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nsome_key_NAME = \"wat\"\n```\n\nLANGUAGE: go\nCODE:\n```\ntype TOML struct {\n    ObscureKey string `toml:\"some_key_NAME\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Files in Vim/Neovim using SCP\nDESCRIPTION: This snippet demonstrates how to open remote files in Vim or Neovim using the SCP protocol. It can be used either from within Vim or when starting Vim from the command line.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-vim.mdx#2025-04-23_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:e scp://[user@]machine[[:#]port]/path\n```\n\nLANGUAGE: bash\nCODE:\n```\nvim scp://[user@]machine[[:#]port]/path\n```\n\n----------------------------------------\n\nTITLE: Deleting a Workspace via DevPod CLI\nDESCRIPTION: Command to delete a workspace named 'my-workspace' using the DevPod CLI. When executed, this will erase all state of the workspace and remove it from DevPod.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/delete-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod delete my-workspace\n```\n\n----------------------------------------\n\nTITLE: Changing Default IDE in DevPod\nDESCRIPTION: This command changes the default IDE that DevPod will use for connecting to workspaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ide use vscode\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Types in Survey\nDESCRIPTION: Demonstrates how to implement custom types that can receive survey answers by implementing the Settable interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_19\n\nLANGUAGE: golang\nCODE:\n```\ntype MyValue struct {\n    value string\n}\nfunc (my *MyValue) WriteAnswer(name string, value interface{}) error {\n     my.value = value.(string)\n}\n\nmyval := MyValue{}\nsurvey.AskOne(\n    &survey.Input{\n        Message: \"Enter something:\",\n    },\n    &myval\n)\n```\n\n----------------------------------------\n\nTITLE: Decoding Basic TOML Data in Go\nDESCRIPTION: This snippet demonstrates how to decode a simple TOML configuration into a Go struct. It shows the structure of TOML data and the corresponding Go struct definition, along with the decoding process using the toml.Decode function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nAge = 25\nCats = [ \"Cauchy\", \"Plato\" ]\nPi = 3.14\nPerfection = [ 6, 28, 496, 8128 ]\nDOB = 1987-07-05T05:45:00Z\n```\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tAge        int\n\tCats       []string\n\tPi         float64\n\tPerfection []int\n\tDOB        time.Time\n}\n\nvar conf Config\n_, err := toml.Decode(tomlData, &conf)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Padding and Whitespace with tablewriter in Go\nDESCRIPTION: This code snippet shows how to fine-tune table spacing using tablewriter by setting custom padding (tabs) and suppressing whitespace. Key settings include SetTablePadding and SetNoWhiteSpace that control the appearance of the rendered table. The snippet illustrates header alignment, no border, and bulk row addition before rendering to stdout, requiring tablewriter and os as dependencies.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    {\"node1.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node2.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node3.example.com\", \"Ready\", \"compute\", \"1.11\"},\n    {\"node4.example.com\", \"NotReady\", \"compute\", \"1.11\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Status\", \"Role\", \"Version\"})\ntable.SetAutoWrapText(false)\ntable.SetAutoFormatHeaders(true)\ntable.SetHeaderAlignment(ALIGN_LEFT)\ntable.SetAlignment(ALIGN_LEFT)\ntable.SetCenterSeparator(\"\")\ntable.SetColumnSeparator(\"\")\ntable.SetRowSeparator(\"\")\ntable.SetHeaderLine(false)\ntable.SetBorder(false)\ntable.SetTablePadding(\"\\t\") // pad with tabs\ntable.SetNoWhiteSpace(true)\ntable.AppendBulk(data) // Add Bulk Data\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod Workspaces with Different IDE Options\nDESCRIPTION: Commands demonstrating how to start a workspace using different IDE configurations: browser-based VS Code, desktop VS Code, or without an IDE.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-devpod-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start in VS Code browser\ndevpod up github.com/microsoft/vscode-remote-try-node --ide openvscode\n\n# Start in VS Code\ndevpod up github.com/microsoft/vscode-remote-try-node --ide vscode\n\n# Start without IDE\ndevpod up github.com/microsoft/vscode-remote-try-node --ide none\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Watch Removal in Go\nDESCRIPTION: Shows how to handle the ErrNonExistentWatch error when attempting to remove a watch on a path that is not being watched. This error was introduced in version 1.6.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nerr := watcher.Remove(path)\nif err == fsnotify.ErrNonExistentWatch {\n    // Handle case where path is not being watched\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator\nDESCRIPTION: Command to install the Cobra CLI generator tool, which helps bootstrap Cobra-based applications.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Converting Format String Logging to Structured Logging in Go\nDESCRIPTION: This snippet demonstrates how to convert traditional format string logging to structured logging using logr. It shows examples of transforming klog.Infof calls to logger.Info or logger.Error calls with key-value pairs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Before:\nklog.V(4).Infof(\"Client is returning errors: code %v, error %v\", responseCode, err)\n\n// After:\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n```\n\nLANGUAGE: go\nCODE:\n```\n// Before:\nklog.V(4).Infof(\"Got a Retry-After %ds response for attempt %d to %v\", seconds, retries, url)\n\n// After:\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\nLANGUAGE: go\nCODE:\n```\n// If format string is absolutely necessary:\nlogger.Info(\"unable to reflect over type\", \"type\", fmt.Sprintf(\"%T\"))\n```\n\n----------------------------------------\n\nTITLE: Managing Cancellable Goroutines with concurrent.Executor in Go\nDESCRIPTION: This example illustrates how to use `concurrent.Executor` to manage a goroutine. It creates an unbounded executor, launches a goroutine using `executor.Go`, which runs a loop checking a ticker and a context cancellation signal (`ctx.Done()`). The main routine waits for a second and then calls `executor.StopAndWaitForever()` to signal the goroutine to stop and wait for its completion. This demonstrates explicit goroutine ownership and cancellation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing Data using xz Package in Go\nDESCRIPTION: This Go example demonstrates the basic API usage of the `xz` package. It compresses a predefined string into a `bytes.Buffer` using `xz.NewWriter` and then decompresses the content of the buffer back to `os.Stdout` using `xz.NewReader`. Dependencies include standard Go libraries (`bytes`, `io`, `log`, `os`) and the `github.com/ulikunitz/xz` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"os\"\n\n    \"github.com/ulikunitz/xz\"\n)\n\nfunc main() {\n    const text = \"The quick brown fox jumps over the lazy dog.\\n\"\n    var buf bytes.Buffer\n    // compress text\n    w, err := xz.NewWriter(&buf)\n    if err != nil {\n        log.Fatalf(\"xz.NewWriter error %s\", err)\n    }\n    if _, err := io.WriteString(w, text); err != nil {\n        log.Fatalf(\"WriteString error %s\", err)\n    }\n    if err := w.Close(); err != nil {\n        log.Fatalf(\"w.Close error %s\", err)\n    }\n    // decompress buffer and write output to stdout\n    r, err := xz.NewReader(&buf)\n    if err != nil {\n        log.Fatalf(\"NewReader error %s\", err)\n    }\n    if _, err = io.Copy(os.Stdout, r); err != nil {\n        log.Fatalf(\"io.Copy error %s\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: Command to manually connect to a DevPod workspace using SSH when IDE auto-connection is not available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-devpod-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh MY_WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag with Default Value and Help Message\nDESCRIPTION: Shows how to define an integer flag with a name, default value, and help message. The flag value will be stored in the pointer variable.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Windows Client with WSL Docker Daemon\nDESCRIPTION: PowerShell commands to create and use a Docker context that connects to the Docker daemon running in WSL via TCP port 2375. Includes verification by running the hello-world container.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# run this command in Powershell\n\ndocker --version\ndocker context create lin --docker host=tcp://127.0.0.1:2375\ndocker context use lin\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Defining Copy Options Struct in Go\nDESCRIPTION: This snippet defines the `Options` struct provided by the `github.com/otiai10/copy` package. This struct allows customization of the directory copy behavior, including how to handle symlinks, existing directories, file skipping logic, permissions, file synchronization, and preservation of timestamps and ownership. It depends on the standard `os` package for `os.FileMode`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Options specifies optional actions on copying.\ntype Options struct {\n\n\t// OnSymlink can specify what to do on symlink\n\tOnSymlink func(src string) SymlinkAction\n\n\t// OnDirExists can specify what to do when there is a directory already existing in destination.\n\tOnDirExists func(src, dest string) DirExistsAction\n\n\t// Skip can specify which files should be skipped\n\tSkip func(src string) (bool, error)\n\n\t// AddPermission to every entry,\n\t// NO MORE THAN 0777\n\tAddPermission os.FileMode\n\n\t// Sync file after copy.\n\t// Useful in case when file must be on the disk\n\t// (in case crash happens, for example),\n\t// at the expense of some performance penalty\n\tSync bool\n\n\t// Preserve the atime and the mtime of the entries\n\t// On linux we can preserve only up to 1 millisecond accuracy\n\tPreserveTimes bool\n\n\t// Preserve the uid and the gid of all entries.\n\tPreserveOwner bool\n\n\t// The byte size of the buffer to use for copying files.\n\t// If zero, the internal default buffer of 32KB is used.\n\t// See https://golang.org/pkg/io/#CopyBuffer for more information.\n\tCopyBufferSize uint\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model View Method\nDESCRIPTION: Renders the UI based on the current model state, showing the shopping list with cursor and selection indicators.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) View() string {\n    // The header\n    s := \"What should we buy at the market?\\n\\n\"\n\n    // Iterate over our choices\n    for i, choice := range m.choices {\n\n        // Is the cursor pointing at this choice?\n        cursor := \" \" // no cursor\n        if m.cursor == i {\n            cursor = \">\" // cursor!\n        }\n\n        // Is this choice selected?\n        checked := \" \" // not selected\n        if _, ok := m.selected[i]; ok {\n            checked = \"x\" // selected!\n        }\n\n        // Render the row\n        s += fmt.Sprintf(\"%s [%s] %s\\n\", cursor, checked, choice)\n    }\n\n    // The footer\n    s += \"\\nPress q to quit.\\n\"\n\n    // Send the UI for rendering\n    return s\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Secure Cookie Handler in Go\nDESCRIPTION: Handler function that shows how to retrieve and decode a secure cookie value. Demonstrates error handling and value extraction from the decoded cookie.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tif cookie, err := r.Cookie(\"cookie-name\"); err == nil {\n\t\tvalue := make(map[string]string)\n\t\tif err = s2.Decode(\"cookie-name\", cookie.Value, &value); err == nil {\n\t\t\tfmt.Fprintf(w, \"The value of foo is %q\", value[\"foo\"])\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go\nDESCRIPTION: This example demonstrates how to use the yaml package to unmarshal YAML data into a struct and a map, and then marshal them back into YAML. It showcases struct tags for customizing field names and flow style.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/yaml.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Spinner with Context for Concurrent Background Tasks in Go\nDESCRIPTION: This snippet runs a 'makeBurger' function concurrently with a spinner for visual feedback, using a custom spinner type ('Line') and context for cancellation or timeout handling. It demonstrates how to use the 'spinner' package's context-driven interface to manage lifecycle and state. Dependencies include 'spinner', 'context', and a 'makeBurger' function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ngo makeBurger()\n\nerr := spinner.New().\n    Type(spinner.Line).\n    Title(\"Making your burger...\").\n    Context(ctx).\n    Run()\n\nfmt.Println(\"Order up!\")\n```\n\n----------------------------------------\n\nTITLE: File Suggestion Input Implementation\nDESCRIPTION: Demonstrates how to implement file path suggestions in an input prompt using filepath.Glob\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfile := \"\"\nprompt := &survey.Input{\n    Message: \"inform a file to save:\",\n    Suggest: func (toComplete string) []string {\n        files, _ := filepath.Glob(toComplete + \"*\")\n        return files\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Documents with gojsonschema in Go\nDESCRIPTION: Demonstrates creating schema and document loaders from files and performing validation using gojsonschema in Go. Requires gojsonschema and its dependencies; inputs are paths to schema and document JSON files. Outputs results to stdout, handling and displaying any validation errors present in the JSON document.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/xeipuuv/gojsonschema\"\n)\n\nfunc main() {\n\n    schemaLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n    documentLoader := gojsonschema.NewReferenceLoader(\"file:///home/me/document.json\")\n\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n    if err != nil {\n        panic(err.Error())\n    }\n\n    if result.Valid() {\n        fmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, desc := range result.Errors() {\n            fmt.Printf(\"- %s\\n\", desc)\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Perceptual Color Distances (Go)\nDESCRIPTION: A complete Go program demonstrating the difference between Euclidean distance in RGB space and perceptual distances in CIE color spaces (Lab, Luv, CIE76, CIE94, CIEDE2000). It defines two pairs of colors and calculates the distance between colors within each pair using various distance functions provided by the go-colorful library (`DistanceRgb`, `DistanceLab`, `DistanceLuv`, `DistanceCIE76`, `DistanceCIE94`, `DistanceCIEDE2000`). The purpose is to show that CIE-based distances better reflect perceived visual differences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"github.com/lucasb-eyer/go-colorful\"\n\nfunc main() {\n\tc1a := colorful.Color{150.0 / 255.0, 10.0 / 255.0, 150.0 / 255.0}\n\tc1b := colorful.Color{53.0 / 255.0, 10.0 / 255.0, 150.0 / 255.0}\n\tc2a := colorful.Color{10.0 / 255.0, 150.0 / 255.0, 50.0 / 255.0}\n\tc2b := colorful.Color{99.9 / 255.0, 150.0 / 255.0, 10.0 / 255.0}\n\n\tfmt.Printf(\"DistanceRgb:       c1: %v\\tand c2: %v\\n\", c1a.DistanceRgb(c1b), c2a.DistanceRgb(c2b))\n\tfmt.Printf(\"DistanceLab:       c1: %v\\tand c2: %v\\n\", c1a.DistanceLab(c1b), c2a.DistanceLab(c2b))\n\tfmt.Printf(\"DistanceLuv:       c1: %v\\tand c2: %v\\n\", c1a.DistanceLuv(c1b), c2a.DistanceLuv(c2b))\n\tfmt.Printf(\"DistanceCIE76:     c1: %v\\tand c2: %v\\n\", c1a.DistanceCIE76(c1b), c2a.DistanceCIE76(c2b))\n\tfmt.Printf(\"DistanceCIE94:     c1: %v\\tand c2: %v\\n\", c1a.DistanceCIE94(c1b), c2a.DistanceCIE94(c2b))\n\tfmt.Printf(\"DistanceCIEDE2000: c1: %v\\tand c2: %v\\n\", c1a.DistanceCIEDE2000(c1b), c2a.DistanceCIEDE2000(c2b))\n}\n```\n\n----------------------------------------\n\nTITLE: Logging at Different Levels with Logrus in Go\nDESCRIPTION: This code demonstrates using Logrus to log messages at all available levels, from Trace to Panic, each with an example string. It shows how to call standard Logrus logging functions to record events at increasing severity. No setup is required beyond having Logrus imported, and the outputs will go to the configured destination and honor the logger's current level. Fatal and Panic will cause function exit and panic, respectively.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Copying in Go\nDESCRIPTION: This snippet shows the basic usage of the `Copy` function from the `github.com/otiai10/copy` package to recursively copy a directory from a source path to a destination path. It requires the 'copy' package to be imported.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := Copy(\"your/directory\", \"your/directory.copy\")\n```\n\n----------------------------------------\n\nTITLE: Loading Slim-Sprig FuncMap in Go Templates\nDESCRIPTION: Demonstrates how to import and initialize Slim-Sprig's function map with Go's template package. The FuncMap must be set before loading templates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"html/template\"\n\n  \"github.com/go-task/slim-sprig\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Virtual Networks Client in Go\nDESCRIPTION: Demonstrates how to create and authenticate a Virtual Networks client using environment-based authentication. The code creates an authorizer from environment variables or Azure Managed Service Identity and applies it to the client.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/azure/auth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/azure/auth\"\n\n// create a VirtualNetworks client\nvnetClient := network.NewVirtualNetworksClient(\"<subscriptionID>\")\n\n// create an authorizer from env vars or Azure Managed Service Idenity\nauthorizer, err := auth.NewAuthorizerFromEnvironment()\nif err != nil {\n    handle(err)\n}\n\nvnetClient.Authorizer = authorizer\n\n// call the VirtualNetworks CreateOrUpdate API\nvnetClient.CreateOrUpdate(context.Background(),\n// ...\n```\n\n----------------------------------------\n\nTITLE: CEL Boolean Conditions and Object Construction Examples in C-like Syntax\nDESCRIPTION: Demonstrates two key CEL features: a boolean condition checking account balance and overdraft protection, and object construction for a geographic point. Shows CEL's C/Java-like syntax and expression capabilities.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/cel.dev/expr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Condition\naccount.balance >= transaction.withdrawal\n    || (account.overdraftProtection\n    && account.overdraftLimit >= transaction.withdrawal  - account.balance)\n\n// Object construction\ncommon.GeoPoint{ latitude: 10.0, longitude: -5.5 }\n```\n\n----------------------------------------\n\nTITLE: Strict JSON Unmarshaling in Go\nDESCRIPTION: Enhanced unmarshaling function that provides strict decoding capabilities, detecting duplicate fields and unknown fields while maintaining case-sensitivity and integer preservation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/json/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nUnmarshalStrict()\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod on Ubuntu\nDESCRIPTION: Downloads and installs the DevPod Debian package for Linux amd64 architecture.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd ~/\nwget https://github.com/loft-sh/devpod/releases/latest/download/DevPod_linux_amd64.deb?_gl=1*76i3lz*_ga*MTczNjE4NzI1My4xNjkxNDQ1ODU1*_ga_4RQQZ3WGE9*MTY5MjY4MTU4NS45LjAuMTY5MjY4MTU4Ny41OC4wLjA. -O DevPod_linux_amd64.deb\nsudo dpkg -i DevPod_linux_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: Showcases more complex JMESPath queries, including selecting nested objects, filtering arrays, and using comparison operators. These examples demonstrate the versatility of JMESPath expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\n\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\n\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BOM Detection and Removal in Go using utfbom\nDESCRIPTION: This example shows how to use the utfbom package to skip BOMs and detect encodings. It processes two inputs: one with a UTF-8 BOM and one without, demonstrating the package's functionality for both cases.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dimchansky/utfbom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/dimchansky/utfbom\"\n)\n\nfunc main() {\n\ttrySkip([]byte(\"\\xEF\\xBB\\xBFhello\"))\n\ttrySkip([]byte(\"hello\"))\n}\n\nfunc trySkip(byteData []byte) {\n\tfmt.Println(\"Input:\", byteData)\n\n\t// just skip BOM\n\toutput, err := ioutil.ReadAll(utfbom.SkipOnly(bytes.NewReader(byteData)))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM skipping\", output)\n\n\t// skip BOM and detect encoding\n\tsr, enc := utfbom.Skip(bytes.NewReader(byteData))\n\tfmt.Printf(\"Detected encoding: %s\\n\", enc)\n\toutput, err = ioutil.ReadAll(sr)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM detection and skipping\", output)\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Certstore to Sign Messages with User Identity in Go\nDESCRIPTION: This example demonstrates how to use the certstore library to access the system certificate store, find a specific identity by common name, and use it to sign a message with SHA-256. The code handles opening the store, iterating through identities, signing data, and proper resource cleanup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/certstore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"crypto\"\n\t\"encoding/hex\"\n\t\"errors\"\n\t\"fmt\"\n\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\n\t\"github.com/github/certstore\"\n)\n\nfunc main() {\n\tsig, err := signWithMyIdentity(\"Ben Toews\", \"hello, world!\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(hex.EncodeToString(sig))\n}\n\nfunc signWithMyIdentity(cn, msg string) ([]byte, error) {\n\t// Open the certificate store for use. This must be Close()'ed once you're\n\t// finished with the store and any identities it contains.\n\tstore, err := certstore.Open()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer store.Close()\n\n\t// Get an Identity slice, containing every identity in the store. Each of\n\t// these must be Close()'ed when you're done with them.\n\tidents, err := store.Identities()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Iterate through the identities, looking for the one we want.\n\tvar me certstore.Identity\n\tfor _, ident := range idents {\n\t\tdefer ident.Close()\n\n\t\tcrt, errr := ident.Certificate()\n\t\tif errr != nil {\n\t\t\treturn nil, errr\n\t\t}\n\n\t\tif crt.Subject.CommonName == \"Ben Toews\" {\n\t\t\tme = ident\n\t\t}\n\t}\n\n\tif me == nil {\n\t\treturn nil, errors.New(\"Couldn't find my identity\")\n\t}\n\n\t// Get a crypto.Signer for the identity.\n\tsigner, err := me.Signer()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Digest and sign our message.\n\tdigest := sha256.Sum256([]byte(msg))\n\tsignature, err := signer.Sign(rand.Reader, digest[:], crypto.SHA256)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn signature, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Select Prompt with Descriptions\nDESCRIPTION: Demonstrates how to add descriptive text to select options using a custom description function\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ncolor := \"\"\nprompt := &survey.Select{\n    Message: \"Choose a color:\",\n    Options: []string{\"red\", \"blue\", \"green\"},\n    Description: func(value string, index int) string {\n        if value == \"red\" {\n            return \"My favorite color\"\n        }\n        return \"\"\n    },\n}\nsurvey.AskOne(prompt, &color)\n```\n\n----------------------------------------\n\nTITLE: Expanding Tilde Paths with go-homedir in Go\nDESCRIPTION: Shows how to use the `homedir.Expand()` function to replace the tilde character (~) at the beginning of a path string with the actual path to the user's home directory. It takes a path string as input and returns the expanded path string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nhomedir.Expand()\n```\n\n----------------------------------------\n\nTITLE: DevContainer Configuration for Docker Image Workspace\nDESCRIPTION: JSON configuration that DevPod creates when initializing a workspace from a Docker image. This defines the container image to use for the development environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"ghcr.io/my-org/my-repo:latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Survey Prompts\nDESCRIPTION: Shows how to add help text to survey input prompts to provide additional context to users.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_14\n\nLANGUAGE: golang\nCODE:\n```\n&survey.Input{\n    Message: \"What is your phone number:\",\n    Help:    \"Phone number should include the area code\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credential Helpers in Docker - JSON\nDESCRIPTION: Demonstrates how to configure Docker's credential helpers in the configuration JSON file by specifying custom mappings for given registries. The 'credHelpers' property maps registry hostnames to helper names ('tee' and 'hardcoded'), instructing Docker to use the corresponding helper command for authentication requests. This configuration requires the matching credential helper scripts to be available in the user's PATH and named in accordance with Docker's expectations (e.g., 'docker-credential-tee').\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"credHelpers\": {\n\t\t\"gcr.io\": \"tee\",\n\t\t\"eu.gcr.io\": \"hardcoded\"\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Comprehensive SemVer Usage Example in Go\nDESCRIPTION: Provides a detailed example of parsing, comparing, and manipulating semantic versions, including prerelease and build metadata.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/blang/semver/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport github.com/blang/semver\n\nv, err := semver.Make(\"0.0.1-alpha.preview+123.github\")\nfmt.Printf(\"Major: %d\\n\", v.Major)\nfmt.Printf(\"Minor: %d\\n\", v.Minor)\nfmt.Printf(\"Patch: %d\\n\", v.Patch)\nfmt.Printf(\"Pre: %s\\n\", v.Pre)\nfmt.Printf(\"Build: %s\\n\", v.Build)\n\n// Prerelease versions array\nif len(v.Pre) > 0 {\n    fmt.Println(\"Prerelease versions:\")\n    for i, pre := range v.Pre {\n        fmt.Printf(\"%d: %q\\n\", i, pre)\n    }\n}\n\n// Build meta data array\nif len(v.Build) > 0 {\n    fmt.Println(\"Build meta data:\")\n    for i, build := range v.Build {\n        fmt.Printf(\"%d: %q\\n\", i, build)\n    }\n}\n\nv001, err := semver.Make(\"0.0.1\")\n// Compare using helpers: v.GT(v2), v.LT, v.GTE, v.LTE\nv001.GT(v) == true\nv.LT(v001) == true\nv.GTE(v) == true\nv.LTE(v) == true\n\n// Or use v.Compare(v2) for comparisons (-1, 0, 1):\nv001.Compare(v) == 1\nv.Compare(v001) == -1\nv.Compare(v) == 0\n\n// Manipulate Version in place:\nv.Pre[0], err = semver.NewPRVersion(\"beta\")\nif err != nil {\n    fmt.Printf(\"Error parsing pre release version: %q\", err)\n}\n\nfmt.Println(\"\\nValidate versions:\")\nv.Build[0] = \"?\"\n\nerr = v.Validate()\nif err != nil {\n    fmt.Printf(\"Validation failed: %s\\n\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original Error with errors.Cause\nDESCRIPTION: Example of using errors.Cause to extract the original error from a wrapped error chain, allowing specific error types to be handled appropriately.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Event Operations in Go\nDESCRIPTION: Demonstrates how to check for specific event operations using the new Event.Has() method introduced in version 1.6.0. This simplifies event checking compared to the previous bitwise operation approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Old way\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n\n// New way\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tailscale Logs Service using cURL\nDESCRIPTION: Example of using basic authentication with curl to access the Tailscale Logs Service collections endpoint. The API key must be passed as the HTTP basic auth username followed by a colon.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/logtail/api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u <log_api_key>: https://log.tailscale.io/collections\n```\n\n----------------------------------------\n\nTITLE: Listing Supported IDEs in DevPod\nDESCRIPTION: This command lists all IDEs supported by DevPod for workspace connections.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ide list\n```\n\n----------------------------------------\n\nTITLE: Compiling Schema Once and Reusing for Multiple Validations in gojsonschema (Go)\nDESCRIPTION: Shows how to compile a schema once for efficient repeated validation of multiple documents. Creates a schema object from a loader, which is then used to validate multiple document loaders. Requires gojsonschema; useful for batch validation and performance.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nschema, err := gojsonschema.NewSchema(schemaLoader)\n...\nresult1, err := schema.Validate(documentLoader1)\n...\nresult2, err := schema.Validate(documentLoader2)\n...\n// etc ...\n\n```\n\n----------------------------------------\n\nTITLE: Hashing Complex Go Structures with hashstructure in Go\nDESCRIPTION: This snippet demonstrates creating a complex Go struct, populating it with varied nested data types (string, uint, map, slices), and then generating a hash value using the hashstructure.Hash function. Dependencies: hashstructure/v2, fmt. Key parameters: the value to hash (v), hash format (FormatV2), and options (nil for defaults). Inputs: any Go value, including complex/nested structs. Outputs: 64-bit hash integer and possible error. It prints the hash to standard output; on error, it panics. Limitations: Requires Go and proper import setup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/hashstructure/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype ComplexStruct struct {\n    Name     string\n    Age      uint\n    Metadata map[string]interface{}\n}\n\nv := ComplexStruct{\n    Name: \"mitchellh\",\n    Age:  64,\n    Metadata: map[string]interface{}{\n        \"car\":      true,\n        \"location\": \"California\",\n        \"siblings\": []string{\"Bob\", \"John\"},\n    },\n}\n\nhash, err := hashstructure.Hash(v, hashstructure.FormatV2, nil)\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%d\", hash)\n// Output:\n// 2307517237273902113\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Applications\nDESCRIPTION: Creates and configures a namespace for ambient mode testing and deploys test applications.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns my-ambient\nkubectl label namespace my-ambient istio.io/dataplane-mode=ambient --overwrite\nkubectl apply -f sleep.yaml -n my-ambient\nkubectl apply -f helloworld.yaml -n my-ambient\n```\n\n----------------------------------------\n\nTITLE: Complex Map Access in Gval\nDESCRIPTION: Example of accessing a map element using a dynamically computed key. This demonstrates how to use string concatenation to generate keys for map access in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfoo[\"b\" + \"a\" + \"r\"]\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying JSON Patches in Go\nDESCRIPTION: Example showing how to create and apply RFC6902 JSON patches to modify JSON documents.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Digest Methods for Streaming Hash Calculation in Go\nDESCRIPTION: Lists the key methods implemented by the Digest type in the xxhash Go library, supporting incremental hashing of data through Write (accepting bytes or strings) and the final Sum64 calculation. Requires initialization of a Digest via New(); Write and WriteString receive input data, while Sum64 returns a uint64 hash result. Follows the hash.Hash64 interface, facilitating use in Go's standard hashing APIs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Logger as io.Writer in Go\nDESCRIPTION: This snippet transforms a Logrus logger into an io.Writer, which can then be assigned as the ErrorLog for an http.Server or passed to other stdlib logging facilities. The io.Writer is closed via defer, and any log lines written will be processed as info-level Logrus entries. The snippet assumes Logrus is imported and a logger instance exists. Useful for integrating Go's standard logging with Logrus's features.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Authentication with DefaultKeychain in Go\nDESCRIPTION: Example showing how to authenticate with a container registry using DefaultKeychain credentials from Docker config file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\tref, err := name.ParseReference(\"registry.example.com/private/repo\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Fetch the manifest using default credentials.\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Prints the digest of registry.example.com/private/repo\n\tfmt.Println(img.Digest)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SemVer Ranges in Go\nDESCRIPTION: Shows how to parse and use version ranges to check if a version satisfies certain conditions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/blang/semver/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv, err := semver.Parse(\"1.2.3\")\nrange, err := semver.ParseRange(\">1.0.0 <2.0.0 || >=3.0.0\")\nif range(v) {\n    //valid\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SFTP Handler Interfaces in Go\nDESCRIPTION: This code pattern defines four primary handler methods—Fileread, Filewrite, Filecmd, and Fileinfo—in Go, each accepting a single Request argument and handling 'Get', 'Put', misc SFTP file operations, and file listings respectively. Each handler serves a specific SFTP operation and must use the appropriate fields of the provided Request struct, such as Method, Filepath, Flags, Attrs, and Target. Implementers must ensure these handlers properly handle the expected SFTP protocol behavior, return the expected types (e.g., io.Reader, io.Writer, error, or lists of os.FileInfo), and properly manage file attributes as unmarshalled byte slices where required.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/sftp/request-readme.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Request struct {\n    Method  string     // Name of the incoming call ('Get', 'Put', etc.)\n    Filepath string    // POSIX path of file to act on\n    Flags   uint32     // 32bit bitmask value of file open/create flags\n    Attrs   []byte     // File attribute data, as raw bytes\n    Target  string     // Target path for renames and sym-links\n}\n\ntype FileReader interface {\n    Fileread(req *Request) (io.Reader, error) // For 'Get' operations\n}\n\ntype FileWriter interface {\n    Filewrite(req *Request) (io.Writer, error) // For 'Put' operations\n}\n\ntype FileCommander interface {\n    Filecmd(req *Request) error // For 'SetStat', 'Rename', 'Rmdir', 'Mkdir', 'Symlink'\n}\n\ntype FileInformer interface {\n    Fileinfo(req *Request) ([]os.FileInfo, error) // For 'List', 'Stat', 'Readlink'\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding nested struct with omitempty tag in Go\nDESCRIPTION: This snippet demonstrates how to encode a nested Go struct with the omitempty tag using both JSON and CBOR. It shows how CBOR produces a more compact encoding (1 byte) compared to JSON (18 bytes) for an empty nested struct.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe String Handling in Go Command Line Arguments\nDESCRIPTION: This example demonstrates the unsafe way of handling command line arguments without proper escaping, which could lead to security vulnerabilities when the output is used in a shell context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/alessio/shellescape/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Printf(\"ls -l %s\\n\", os.Args[1])\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Environment Variables\nDESCRIPTION: Examples of writing environment variables to a file or marshaling to a string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nenv, err := godotenv.Unmarshal(\"KEY=value\")\nerr := godotenv.Write(env, \"./.env\")\n```\n\nLANGUAGE: go\nCODE:\n```\nenv, err := godotenv.Unmarshal(\"KEY=value\")\ncontent, err := godotenv.Marshal(env)\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Options in YAML\nDESCRIPTION: Basic structure for defining provider options in provider.yaml. Each option includes properties like description, default value, required flag, and password protection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\n...\noptions:\n  MY_OPTION_NAME:\n    description: \"this is my option\"\n    default: \"default_value\"\n    required: false\n    password: true\n...\n...\n```\n\n----------------------------------------\n\nTITLE: Validating Document Against Schema Using gojsonschema in Go\nDESCRIPTION: Demonstrates primary validation pattern by calling Validate with schema and document loaders. Inputs are schemaLoader and documentLoader; result contains error and validation result. Requires gojsonschema; supports local or remote loaders.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nresult, err := gojsonschema.Validate(schemaLoader, documentLoader)\n\n```\n\n----------------------------------------\n\nTITLE: Identifying Kubernetes Namespaces\nDESCRIPTION: Lists available namespaces in the Kubernetes cluster to select one for DevPod provider configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get ns\nNAME              STATUS   AGE\ndefault           Active   12d\nkube-node-lease   Active   12d\nkube-public       Active   12d\nkube-system       Active   12d\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Styles in Go with Lip Gloss\nDESCRIPTION: Demonstrates how to create a new style, set various properties like bold, foreground color, background color, padding, and width, then render text with the style.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss\"\n\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Foreground(lipgloss.Color(\"#FAFAFA\")).\n    Background(lipgloss.Color(\"#7D56F4\")).\n    PaddingTop(2).\n    PaddingLeft(4).\n    Width(22)\n\nfmt.Println(style.Render(\"Hello, kitty\"))\n```\n\n----------------------------------------\n\nTITLE: GlobWalk Function Implementation in Go\nDESCRIPTION: Function that walks through filesystem calling a callback for each matching file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GlobWalkFunc func(path string, d fs.DirEntry) error\n\nfunc GlobWalk(fsys fs.FS, pattern string, fn GlobWalkFunc, opts ...GlobOption) error\n```\n\n----------------------------------------\n\nTITLE: Using Default Fields with Logrus Entry\nDESCRIPTION: This snippet shows how to create a logger entry with default fields that will be included in all subsequent log calls. This is useful for attaching request context or other consistent metadata to logs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Using termenv Template Helpers in Go\nDESCRIPTION: This Go code demonstrates integrating `termenv` styling capabilities into Go's `text/template` package. It shows how to load the `termenv` template functions (`TemplateFuncs`), define templates using these functions (e.g., `Bold`, `Color`, `Foreground`, `Background`, `Underline`), parse the template, and execute it to produce styled output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// load template helpers\nf := output.TemplateFuncs()\ntpl := template.New(\"tpl\").Funcs(f)\n\n// apply bold style in a template\nbold := `{{ Bold \"Hello World\" }}`\n\n// examples for colorized templates\ncol := `{{ Color \"#ff0000\" \"#0000ff\" \"Red on Blue\" }}`\nfg := `{{ Foreground \"#ff0000\" \"Red Foreground\" }}`\nbg := `{{ Background \"#0000ff\" \"Blue Background\" }}`\n\n// wrap styles\nwrap := `{{ Bold (Underline \"Hello World\") }}`\n\n// parse and render\ntpl, err = tpl.Parse(bold)\n\nvar buf bytes.Buffer\ntpl.Execute(&buf, nil)\nfmt.Println(&buf)\n```\n\n----------------------------------------\n\nTITLE: Rendering Styles in Lip Gloss (Go)\nDESCRIPTION: Shows different ways to render styled text using Lip Gloss, including the Render method and the Stringer interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle().Bold(true).SetString(\"Hello,\")\nfmt.Println(style.Render(\"kitty.\")) // Hello, kitty.\nfmt.Println(style.Render(\"puppy.\")) // Hello, puppy.\n```\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().SetString(\"你好，猫咪。\").Bold(true)\nfmt.Println(style) // 你好，猫咪。\n```\n\n----------------------------------------\n\nTITLE: Updating a DevPod Provider to Latest Version\nDESCRIPTION: Basic command to update a DevPod provider to its latest version. Requires specifying the provider name as an argument.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/update-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider update <name>\n```\n\n----------------------------------------\n\nTITLE: Reading Env from String\nDESCRIPTION: Example of parsing environment variables from a string content.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ncontent := getRemoteFileContent()\nmyEnv, err := godotenv.Unmarshal(content)\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Marshal/Unmarshal Example in Go\nDESCRIPTION: Demonstrates basic usage of yaml.Marshal and yaml.Unmarshal with a Person struct, showing how JSON struct tags affect YAML field names.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing etcd Client Connection - Go\nDESCRIPTION: Shows how to instantiate an etcd v3 client in Go using multiple endpoints and a connection timeout. Requires the etcd/clientv3 Go module and imports from the Go standard library (time). Endpoints parameter specifies etcd cluster addresses, and DialTimeout sets how long to wait for network dialing. Returns a client object for subsequent operations; users must call Close() to avoid resource leakage.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncli, err := clientv3.New(clientv3.Config{\n\tEndpoints:   []string{\"localhost:2379\", \"localhost:22379\", \"localhost:32379\"},\n\tDialTimeout: 5 * time.Second,\n})\nif err != nil {\n\t// handle error!\n}\ndefer cli.Close()\n\n```\n\n----------------------------------------\n\nTITLE: Rendering tablewriter Output to a String with strings.Builder in Go\nDESCRIPTION: This snippet demonstrates using tablewriter with Go's strings.Builder to capture table output as a string instead of printing directly. The table is constructed using tablewriter.NewWriter with an io.Writer (strings.Builder) and rendered via Render; the result becomes available via tableString.String(). Dependencies required are tablewriter, strings, and fmt. This is particularly useful for programmatic table output or use in web/server responses.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"strings\"\n    \"fmt\"\n\n    \"github.com/olekukonko/tablewriter\"\n)\n\nfunc main() {\n    tableString := &strings.Builder{}\n    table := tablewriter.NewWriter(tableString)\n\n    /*\n     * Code to fill the table\n     */\n\n    table.Render()\n\n    fmt.Println(tableString.String())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace with Custom Dotfiles Install Script in DevPod CLI\nDESCRIPTION: Command to create a workspace with a dotfiles repository and a custom installation script path. DevPod will run the specified script instead of looking for default script locations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/dotfiles-in-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up https://github.com/example/repo --dotfiles https://github.com/my-user/my-dotfiles-repo --dotfiles-script custom/location/install.sh\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Custom Format Checker (Go)\nDESCRIPTION: Illustrates how to create a custom format checker and add it to gojsonschema. This example creates a 'role' format checker that validates if a string starts with 'ROLE_'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Define the format checker\ntype RoleFormatChecker struct {}\n\n// Ensure it meets the gojsonschema.FormatChecker interface\nfunc (f RoleFormatChecker) IsFormat(input interface{}) bool {\n\n    asString, ok := input.(string)\n    if ok == false {\n        return false\n    }\n\n    return strings.HasPrefix(\"ROLE_\", asString)\n}\n\n// Add it to the library\ngojsonschema.FormatCheckers.Add(\"role\", RoleFormatChecker{})\n```\n\n----------------------------------------\n\nTITLE: Emulating Unix Ping Command in Go\nDESCRIPTION: Shows how to create a ping utility similar to the standard Unix `ping` command using the `pro-bing` library. It sets up signal handling for graceful termination (Ctrl-C), defines callbacks (`OnRecv`, `OnDuplicateRecv`, `OnFinish`) to print detailed packet information and final statistics in real-time, prints the initial PING message, and runs the pinger indefinitely until stopped. Depends on `pro-bing`, `os`, `os/signal`, and `fmt` packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\npinger, err := probing.NewPinger(\"www.google.com\")\nif err != nil {\n\tpanic(err)\n}\n\n// Listen for Ctrl-C.\nc := make(chan os.Signal, 1)\nsignal.Notify(c, os.Interrupt)\ngo func() {\n\tfor _ = range c {\n\t\tpinger.Stop()\n\t}\n}()\n\npinger.OnRecv = func(pkt *probing.Packet) {\n\tfmt.Printf(\"%d bytes from %s: icmp_seq=%d time=%v\\n\",\n\t\tpkt.Nbytes, pkt.IPAddr, pkt.Seq, pkt.Rtt)\n}\n\npinger.OnDuplicateRecv = func(pkt *probing.Packet) {\n\tfmt.Printf(\"%d bytes from %s: icmp_seq=%d time=%v ttl=%v (DUP!)\\n\",\n\t\tpkt.Nbytes, pkt.IPAddr, pkt.Seq, pkt.Rtt, pkt.TTL)\n}\n\npinger.OnFinish = func(stats *probing.Statistics) {\n\tfmt.Printf(\"\\n--- %s ping statistics ---\\n\", stats.Addr)\n\tfmt.Printf(\"%d packets transmitted, %d packets received, %v%% packet loss\\n\",\n\t\tstats.PacketsSent, stats.PacketsRecv, stats.PacketLoss)\n\tfmt.Printf(\"round-trip min/avg/max/stddev = %v/%v/%v/%v\\n\",\n\t\tstats.MinRtt, stats.AvgRtt, stats.MaxRtt, stats.StdDevRtt)\n}\n\nfmt.Printf(\"PING %s (%s):\\n\", pinger.Addr(), pinger.IPAddr())\nerr = pinger.Run()\nif err != nil {\n\tpanic(err)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtual Terminal Processing with termenv in Go\nDESCRIPTION: This Go snippet demonstrates how to activate virtual terminal (ANSI escape sequence) processing using the termenv library's EnableVirtualTerminalProcessing function. This is primarily required on Windows systems to ensure ANSI styling is honored, but is safe to use on Unix-like OSes or in test environments where os.Stdout may not be a terminal. The restoreConsole function returned from EnableVirtualTerminalProcessing should be deferred to clean up terminal state. Requires the termenv package as a dependency.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n    restoreConsole, err := termenv.EnableVirtualTerminalProcessing(termenv.DefaultOutput())\\n    if err != nil {\\n        panic(err)\\n    }\\n    defer restoreConsole()\n```\n\n----------------------------------------\n\nTITLE: Using Exists Comprehension with Two Variables in CEL\nDESCRIPTION: Tests whether any element in a list or map satisfies a given predicate. Evaluates similarly to logical OR and short-circuits on first true value.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_28\n\nLANGUAGE: cel\nCODE:\n```\n{'greeting': 'hello', 'farewell': 'goodbye'}\n  .exists(k, v, k.startsWith('good') || v.endsWith('bye')) // returns true\n[1, 2, 4, 8, 16].exists(i, v, v == 1024 && i == 10) // returns false\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via CLI\nDESCRIPTION: These commands use the DevPod CLI to connect to a workspace. They can be used when SSH is not available or to run a specific command in the workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ssh my-workspace\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevpod ssh my-workspace --command \"echo Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Logrus Configuration and Usage\nDESCRIPTION: This example shows customizing Logrus with JSON formatting, stdout output, and custom log levels. It demonstrates logging with fields, fatal logs, and reusing log entries for consistent field inclusion.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Bubble Tea Application Structure\nDESCRIPTION: Sets up the basic package and imports required for a Bubble Tea application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in Go\nDESCRIPTION: Example of implementing a WebSocket client using the library. It dials a connection, writes JSON data, and closes the connection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), time.Minute)\ndefer cancel()\n\nc, _, err := websocket.Dial(ctx, \"ws://localhost:8080\", nil)\nif err != nil {\n\t// ...\n}\ndefer c.CloseNow()\n\nerr = wsjson.Write(ctx, c, \"hi\")\nif err != nil {\n\t// ...\n}\n\nc.Close(websocket.StatusNormalClosure, \"\")\n```\n\n----------------------------------------\n\nTITLE: Using OSC52 Library in Go with SSH\nDESCRIPTION: This snippet shows how to use the go-osc52 library in an SSH context using the gliderlabs/ssh package. It demonstrates how to handle different terminal types like screen and tmux when sending OSC52 sequences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aymanbagabas/go-osc52/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar sshSession ssh.Session\nseq := osc52.New(\"Hello awesome!\")\n// Check if term is screen or tmux\npty, _, _ := s.Pty()\nif pty.Term == \"screen\" {\n  seq = seq.Screen()\n} else if isTmux {\n  seq = seq.Tmux()\n}\nseq.WriteTo(sshSession.Stderr())\n```\n\n----------------------------------------\n\nTITLE: Manipulating JSON Data with gojsonpointer in Go\nDESCRIPTION: This Go code snippet demonstrates the usage of the `gojsonpointer` library. It starts by defining a JSON string, unmarshals it into a Go map (`map[string]interface{}`), and then creates JSON pointers using `NewJsonPointer` to navigate and modify the data. The example shows how to set a new value using `pointer.Set`, get the updated value using `pointer.Get`, and delete an element using `deletePointer.Delete`. Finally, it marshals the modified map back into a JSON string using `json.Marshal` and prints the results. Dependencies include the Go standard library's `encoding/json` and `fmt` packages, and the external `gojsonpointer` library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonpointer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\njsonText := `{\n\t\"name\": \"Bobby B\",\n\t\"occupation\": {\n\t\t\"title\" : \"King\",\n\t\t\"years\" : 15,\n\t\t\"heir\" : \"Joffrey B\"\t\t\t\n\t}\n}`\n\nvar jsonDocument map[string]interface{}\njson.Unmarshal([]byte(jsonText), &jsonDocument)\n\n//create a JSON pointer\npointerString := \"/occupation/title\"\npointer, _ := NewJsonPointer(pointerString)\n\n//SET a new value for the \"title\" in the document     \npointer.Set(jsonDocument, \"Supreme Leader of Westeros\")\n\n//GET the new \"title\" from the document\ntitle, _, _ := pointer.Get(jsonDocument)\nfmt.Println(title) //outputs \"Supreme Leader of Westeros\"\n\n//DELETE the \"heir\" from the document\ndeletePointer, _ := NewJsonPointer(\"/occupation/heir\") // Assumes NewJsonPointer returns (pointer, error)\ndeletePointer.Delete(jsonDocument)\n\nb, _ := json.Marshal(jsonDocument)\nfmt.Println(string(b))\n//outputs `{\"name\":\"Bobby B\",\"occupation\":{\"title\":\"Supreme Leader of Westeros\",\"years\":15}}`\n```\n\n----------------------------------------\n\nTITLE: Testing Set Intersection - CEL Sets Library - Pseudocode\nDESCRIPTION: Explains 'sets.intersects', which determines whether two lists have any element in common, returning true on first detected intersection. Works with lists of any type, including nested lists. Returns false if either list is empty.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_14\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.intersects(list(T), list(T)) -> bool\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.intersects([1], []) // false\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.intersects([1], [1, 2]) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.intersects([[1], [2, 3]], [[1, 2], [2, 3.0]]) // true\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Error Handling for etcd Client - Go\nDESCRIPTION: Presents a comprehensive error handling approach for etcd client operations, distinguishing between context cancellation, deadline exceeded, invalid keys, and bad endpoints. Requires imports from context, log, and etcd/clientv3 rpctypes. Inputs are the request context and etcd client instance. Captures and logs specific errors for robust production usage; should be included after any client call likely to fail.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresp, err := cli.Put(ctx, \"\", \"\")\nif err != nil {\n\tswitch err {\n\tcase context.Canceled:\n\t\tlog.Fatalf(\"ctx is canceled by another routine: %v\", err)\n\tcase context.DeadlineExceeded:\n\t\tlog.Fatalf(\"ctx is attached with a deadline is exceeded: %v\", err)\n\tcase rpctypes.ErrEmptyKey:\n\t\tlog.Fatalf(\"client-side error: %v\", err)\n\tdefault:\n\t\tlog.Fatalf(\"bad cluster endpoints, which are not etcd servers: %v\", err)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Clock Interface and RealClock Implementation in Go\nDESCRIPTION: This snippet defines a Clock interface with methods for time-related operations and provides a RealClock struct that implements this interface using the standard time package. It enables easy mocking of time for testing purposes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/clock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage clock\n\nimport (\n\t\"time\"\n)\n\n// Clock allows for injecting fake or real clocks for testing time-based functionality.\ntype Clock interface {\n\tNow() time.Time\n\tSince(time.Time) time.Duration\n\tAfter(d time.Duration) <-chan time.Time\n\tNewTimer(d time.Duration) Timer\n\tSleep(d time.Duration)\n}\n\n// RealClock really calls time.Now()\ntype RealClock struct{}\n\n// Now returns the current local time.\nfunc (RealClock) Now() time.Time {\n\treturn time.Now()\n}\n\n// Since returns the time elapsed since t.\nfunc (RealClock) Since(t time.Time) time.Duration {\n\treturn time.Since(t)\n}\n\n// After waits for the duration to elapse and then sends the current time on the returned channel.\nfunc (RealClock) After(d time.Duration) <-chan time.Time {\n\treturn time.After(d)\n}\n\n// NewTimer creates a new Timer that will send the current time on its channel after at least duration d.\nfunc (RealClock) NewTimer(d time.Duration) Timer {\n\treturn &realTimer{time.NewTimer(d)}\n}\n\n// Sleep pauses the current goroutine for at least the duration d.\nfunc (RealClock) Sleep(d time.Duration) {\n\ttime.Sleep(d)\n}\n```\n\n----------------------------------------\n\nTITLE: Recreating a Workspace with DevPod CLI\nDESCRIPTION: Command to recreate an existing DevPod workspace. This applies changes in the devcontainer.json or related Dockerfile while preserving changes to the project path and mounted volumes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --recreate\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Compose Project with DevPod\nDESCRIPTION: Command to initialize and start a Docker Compose-based development environment using DevPod. It points to a compose directory containing the necessary configuration files.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/compose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up ./examples/compose\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Formatter for Logrus in Go\nDESCRIPTION: This Go snippet shows how to implement a custom JSON formatter for Logrus by defining a struct that implements the Formatter interface. It demonstrates overriding the Format method to marshal only the entry's Data fields into JSON, excluding standard fields like Time, Level, and Message. Error handling for marshaling is included. To use, the custom formatter is assigned with SetFormatter. The snippet requires familiarity with Logrus internals and the encoding/json and fmt packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing a Sub-list by Indices - CEL Extension - Pseudocode\nDESCRIPTION: Outlines the 'slice' function for lists, accepting two integer indices to create a new sublist. The inclusive start and exclusive end indices determine the selection. Out-of-range or reversed indices may produce empty results or errors, depending on the implementation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_9\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list>.slice(<int>, <int>) -> <list>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,2,3,4].slice(1, 3) // return [2, 3]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,2,3,4].slice(2, 4) // return [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Generating Random Color Palettes using Go\nDESCRIPTION: This Go snippet demonstrates how to generate palettes of distinguishable random colors using functions from the `go-colorful` library. It shows the usage of `WarmPalette`, `FastWarmPalette`, `HappyPalette`, `FastHappyPalette`, and `SoftPalette`. Each function takes an integer argument specifying the number of colors to generate in the palette. The non-fast methods (Warm, Happy, Soft) operate in CIE spaces and might return an error if too many colors are requested, while the fast methods use HSV.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npal1, err1 := colorful.WarmPalette(10)\npal2 := colorful.FastWarmPalette(10)\npal3, err3 := colorful.HappyPalette(10)\npal4 := colorful.FastHappyPalette(10)\npal5, err5 := colorful.SoftPalette(10)\n```\n\n----------------------------------------\n\nTITLE: Removing Select None Option in Survey\nDESCRIPTION: Shows how to remove the select none option from multi-select prompts using WithRemoveSelectNone.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_16\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/AlecAivazis/survey/v2\"\n)\n\nnumber := \"\"\nprompt := &survey.Input{\n    Message: \"This question has the select all option removed\",\n}\n\nsurvey.AskOne(prompt, &number, survey.WithRemoveSelectNone())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hashed Machine ID in Go\nDESCRIPTION: Go code snippet showing how to retrieve a securely hashed version of the machine ID using the machineid library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nfunc main() {\n  id, err := machineid.ProtectedID(\"myAppName\")\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Output for Bubble Tea in Go\nDESCRIPTION: This Go code sets up logging to a file when the 'DEBUG' environment variable is present, allowing developers to capture logs without interfering with the Bubble Tea TUI. It attempts to create (or append to) 'debug.log' for debug-level output using 'tea.LogToFile', gracefully handling errors, and ensures file resources are properly released with 'defer f.Close()'. Key prerequisites include importing the 'os', 'fmt', and 'tea' (Bubble Tea) packages, and setting the 'DEBUG' environment variable to any non-empty value. Input involves the environment variable, and output is written to 'debug.log'; the log file can be watched with external tools (e.g., 'tail -f').\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nif len(os.Getenv(\"DEBUG\")) > 0 {\n\tf, err := tea.LogToFile(\"debug.log\", \"debug\")\n\tif err != nil {\n\t\tfmt.Println(\"fatal:\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer f.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Survey Usage Example in Go\nDESCRIPTION: Demonstrates the basic usage of Survey library with multiple question types including input, select and validation. Shows how to collect and process user responses into a struct.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/AlecAivazis/survey/v2\"\n)\n\n// the questions to ask\nvar qs = []*survey.Question{\n    {\n        Name:     \"name\",\n        Prompt:   &survey.Input{Message: \"What is your name?\"},\n        Validate: survey.Required,\n        Transform: survey.Title,\n    },\n    {\n        Name: \"color\",\n        Prompt: &survey.Select{\n            Message: \"Choose a color:\",\n            Options: []string{\"red\", \"blue\", \"green\"},\n            Default: \"red\",\n        },\n    },\n    {\n        Name: \"age\",\n        Prompt:   &survey.Input{Message: \"How old are you?\"},\n    },\n}\n\nfunc main() {\n    // the answers will be written to this struct\n    answers := struct {\n        Name          string                  // survey will match the question and field names\n        FavoriteColor string `survey:\"color\"` // or you can tag fields to match a specific name\n        Age           int                     // if the types don't match, survey will convert it\n    }{}\n\n    // perform the questions\n    err := survey.Ask(qs, &answers)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n\n    fmt.Printf(\"%s chose %s.\", answers.Name, answers.FavoriteColor)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal Progress Bar using 'aec' in Go\nDESCRIPTION: This Go program demonstrates using the 'aec' library to create a simple progress bar. It utilizes cursor movement (`aec.Up`), positioning (`aec.Column`), color (`aec.Color8BitF`, `aec.LightRedF`), and text styling (`aec.Underline`) to update the progress display in place within the terminal. It requires the 'aec' library and uses standard Go packages like 'fmt', 'strings', and 'time'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/morikuni/aec\"\n)\n\nfunc main() {\n\tconst n = 20\n\tbuilder := aec.EmptyBuilder\n\n\tup2 := aec.Up(2)\n\tcol := aec.Column(n + 2)\n\tbar := aec.Color8BitF(aec.NewRGB8Bit(64, 255, 64))\n\tlabel := builder.LightRedF().Underline().With(col).Right(1).ANSI\n\n\t// for up2\n\tfmt.Println()\n\tfmt.Println()\n\n\tfor i := 0; i <= n; i++ {\n\t\tfmt.Print(up2)\n\t\tfmt.Println(label.Apply(fmt.Sprint(i, \"/\", n)))\n\t\tfmt.Print(\"[\")\n\t\tfmt.Print(bar.Apply(strings.Repeat(\"=\", i)))\n\t\tfmt.Println(col.Apply(\"]\"))\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Type Validation in Go\nDESCRIPTION: Demonstrates how to implement custom type validation with context-aware validators. Includes example with byte array validation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` \n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) {\n  case StructWithCustomByteArray:\n  case SomeOtherType:\n  default:\n  }\n\n  switch v := i.(type) {\n  case CustomByteArray:\n    for _, e := range v {\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) {\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Provider Configuration in YAML\nDESCRIPTION: A minimal provider configuration that reuses local Docker to create workspaces. Defines basic provider metadata and execution commands.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-first-provider  # Required name of the provider\nversion: v0.0.1          # Required version of the provider\nagent:                   # DevPod Agent options\n  path: ${DEVPOD}        # Path to the current DevPod binary\nexec:\n  # Command specifies how to run a command in the environment.\n  # In this case we want to reuse the local environment, so we just execute the command in a local shell.\n  command: |-\n    sh -c \"${COMMAND}\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Causer Interface\nDESCRIPTION: The causer interface definition that enables error unwrapping. Any error implementing this interface can be inspected by errors.Cause to retrieve the original error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Git Origin URL from Local Config in Go\nDESCRIPTION: This Go snippet illustrates retrieving the remote origin URL for the current Git repository from its local configuration file (.git/config). It uses the `gitconfig.OriginURL()` function, which returns the URL string and an error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nurl, err := gitconfig.OriginURL()\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags with Authenticated Transport using `go-containerregistry` in Go\nDESCRIPTION: This Go program demonstrates listing tags for the `gcr.io/google-containers/pause` repository. It uses the `go-containerregistry` library to resolve authentication credentials (`authn.DefaultKeychain`), creates an authenticated HTTP transport (`transport.New`) configured for the necessary scope, makes a GET request to the registry's tag list endpoint, checks for transport-specific errors (`transport.CheckError`), and prints the resulting JSON tag list to standard output. It requires standard Go libraries and the `go-containerregistry` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/remote/transport/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote/transport\"\n)\n\nfunc main() {\n\trepo, err := name.NewRepository(\"gcr.io/google-containers/pause\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Fetch credentials based on your docker config file, which is $HOME/.docker/config.json or $DOCKER_CONFIG.\n\tauth, err := authn.DefaultKeychain.Resolve(repo.Registry)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Construct an http.Client that is authorized to pull from gcr.io/google-containers/pause.\n\tscopes := []string{repo.Scope(transport.PullScope)}\n\tt, err := transport.New(repo.Registry, auth, http.DefaultTransport, scopes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tclient := &http.Client{Transport: t}\n\n\t// Make the actual request.\n\tresp, err := client.Get(\"https://gcr.io/v2/google-containers/pause/tags/list\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Assert that we get a 200, otherwise attempt to parse body as a structured error.\n\tif err := transport.CheckError(resp, http.StatusOK); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write the response to stdout.\n\tif _, err := io.Copy(os.Stdout, resp.Body); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Sample .env file configuration showing how to define environment variables.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS3_BUCKET=YOURS3BUCKET\nSECRET_KEY=YOURSECRETKEYGOESHERE\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal and Cygwin Terminal in Go Using go-isatty - Go\nDESCRIPTION: This Go code demonstrates how to use the go-isatty package to check if the current standard output is a terminal or a Cygwin/MSYS2 terminal. It uses two functions: IsTerminal and IsCygwinTerminal, both of which take a file descriptor as input and return a boolean result. The code prints a message indicating the type of terminal based on these checks. Dependencies include the go-isatty package and the os and fmt standard library packages. The program outputs text to the console describing the terminal type based on the environment, and requires that the github.com/mattn/go-isatty package is installed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"github.com/mattn/go-isatty\\\"\\n\\t\\\"os\\\"\\n)\\n\\nfunc main() {\\n\\tif isatty.IsTerminal(os.Stdout.Fd()) {\\n\\t\\tfmt.Println(\\\"Is Terminal\\\")\\n\\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\\n\\t\\tfmt.Println(\\\"Is Cygwin/MSYS2 Terminal\\\")\\n\\t} else {\\n\\t\\tfmt.Println(\\\"Is Not Terminal\\\")\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Float64 Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating a floating-point arithmetic expression that calculates memory usage percentage. This demonstrates how Gval handles floating-point operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n(mem_used / total_mem) * 100\n```\n\n----------------------------------------\n\nTITLE: Adding Context to an Error with errors.Wrap\nDESCRIPTION: Example of using errors.Wrap to add contextual information to an error from an IO operation while preserving the original error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographically Secure Machine ID in Go\nDESCRIPTION: Go code snippet demonstrating how to generate a cryptographically secure machine ID using HMAC-SHA256.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"crypto/hmac\"\n  \"crypto/sha256\"\n  \"fmt\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nconst appKey = \"WowSuchNiceApp\"\n\nfunc main() {\n  id, _ := machineid.ID()\n  fmt.Println(protect(appKey, id))\n  // Output: dbabdb7baa54845f9bec96e2e8a87be2d01794c66fdebac3df7edd857f3d9f97\n}\n\nfunc protect(appID, id string) string {\n  mac := hmac.New(sha256.New, []byte(id))\n  mac.Write([]byte(appID))\n  return fmt.Sprintf(\"%x\", mac.Sum(nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with One-Letter Shorthands\nDESCRIPTION: Shows how to use pflag-specific functions that provide one-letter shorthands for flags by appending 'P' to flag definition functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Using CancelReader for Cancelable Reads in Go\nDESCRIPTION: This Go snippet demonstrates how to use the `cancelreader` package to create a cancelable reader from a file. It initializes a `CancelReader`, starts a separate goroutine to call the `Cancel()` method after a 5-second delay, and then enters a loop to read data. The loop checks for the specific `cancelreader.ErrCanceled` error to detect when the read operation has been successfully canceled.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/cancelreader/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nr, err := cancelreader.NewReader(file)\nif err != nil {\n    // handle error\n    ...\n}\n\n// cancel after five seconds\ngo func() {\n    time.Sleep(5 * time.Second)\n    r.Cancel()\n}()\n\n// keep reading\nfor {\n    var buf [1024]byte\n    _, err := r.Read(buf[:])\n\n    if errors.Is(err, cancelreader.ErrCanceled) {\n        fmt.Println(\"canceled!\")\n        break\n    }\n    if err != nil {\n        // handle other errors\n        ...\n    }\n\n    // handle data\n    ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Put Operation with Context Timeout - Go\nDESCRIPTION: Illustrates performing a Put operation on etcd with a context timeout and proper cancellation. Requires prior client initialization and an appropriate context from the context package. The key parameters are the context (ctx), the key ('sample_key'), and value ('sample_value'). Handles errors and demonstrates clean-up with cancel(). Returns a response or error; failure to cancel leaks resources.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), timeout)\nresp, err := cli.Put(ctx, \"sample_key\", \"sample_value\")\ncancel()\nif err != nil {\n    // handle error!\n}\n// use the response\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Table Cells and Cell Merging with tablewriter in Go\nDESCRIPTION: This Go snippet demonstrates advanced customization of table output using the tablewriter library, including per-row and per-cell coloring, merging, and footers. It initializes a data set with three merged regions, applies header, column, and footer color configurations, and shows how 'Rich' colored rows can override column-level formatting. Required dependencies are the tablewriter package and os for stdout. The table enables auto-merging of cells and renders directly to the terminal, but does not handle uneven row lengths or dynamic color selection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"Test1Merge\", \"HelloCol2 - 1\", \"HelloCol3 - 1\", \"HelloCol4 - 1\"},\n\t[]string{\"Test1Merge\", \"HelloCol2 - 2\", \"HelloCol3 - 2\", \"HelloCol4 - 2\"},\n\t[]string{\"Test1Merge\", \"HelloCol2 - 3\", \"HelloCol3 - 3\", \"HelloCol4 - 3\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 4\", \"HelloCol3 - 4\", \"HelloCol4 - 4\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 5\", \"HelloCol3 - 5\", \"HelloCol4 - 5\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 6\", \"HelloCol3 - 6\", \"HelloCol4 - 6\"},\n\t[]string{\"Test2Merge\", \"HelloCol2 - 7\", \"HelloCol3 - 7\", \"HelloCol4 - 7\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 8\", \"HelloCol3 - 8\", \"HelloCol4 - 8\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 9\", \"HelloCol3 - 9\", \"HelloCol4 - 9\"},\n\t[]string{\"Test3Merge\", \"HelloCol2 - 10\", \"HelloCol3 -10\", \"HelloCol4 - 10\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Col1\", \"Col2\", \"Col3\", \"Col4\"})\ntable.SetFooter([]string{\"\", \"\", \"Footer3\", \"Footer4\"})\ntable.SetBorder(false)\n\ntable.SetHeaderColor(tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},\n\ttablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},\n\ttablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgWhiteColor},\n\ttablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgWhiteColor})\n\ntable.SetColumnColor(tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiRedColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgBlackColor})\n\ntable.SetFooterColor(tablewriter.Colors{}, tablewriter.Colors{},\n\ttablewriter.Colors{tablewriter.Bold},\n\ttablewriter.Colors{tablewriter.FgHiRedColor})\n\ncolorData1 := []string{\"TestCOLOR1Merge\", \"HelloCol2 - COLOR1\", \"HelloCol3 - COLOR1\", \"HelloCol4 - COLOR1\"}\ncolorData2 := []string{\"TestCOLOR2Merge\", \"HelloCol2 - COLOR2\", \"HelloCol3 - COLOR2\", \"HelloCol4 - COLOR2\"}\n\nfor i, row := range data {\n\tif i == 4 {\n\t\ttable.Rich(colorData1, []tablewriter.Colors{tablewriter.Colors{}, tablewriter.Colors{tablewriter.Normal, tablewriter.FgCyanColor}, tablewriter.Colors{tablewriter.Bold, tablewriter.FgWhiteColor}, tablewriter.Colors{}})\n\t\ttable.Rich(colorData2, []tablewriter.Colors{tablewriter.Colors{tablewriter.Normal, tablewriter.FgMagentaColor}, tablewriter.Colors{}, tablewriter.Colors{tablewriter.Bold, tablewriter.BgRedColor}, tablewriter.Colors{tablewriter.FgHiGreenColor, tablewriter.Italic, tablewriter.BgHiCyanColor}})\n\t}\n\ttable.Append(row)\n}\n\ntable.SetAutoMergeCells(true)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Complete Provider Binaries Example in YAML\nDESCRIPTION: A comprehensive example of the 'binaries' section in a provider.yaml file, showing how to specify binaries for AWS provider across different operating systems and architectures with their respective checksums.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/binaries.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  AWS_PROVIDER:\n    - os: linux\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-aws/releases/download/v0.0.1-alpha.15/devpod-provider-aws-linux-amd64\n      checksum: d1e774419d90c3ed399963d9322d57bfdcee189767eabb076a2c2e926bfd9b8b\n    - os: linux\n      arch: arm64\n      path: https://github.com/loft-sh/devpod-provider-aws/releases/download/v0.0.1-alpha.15/devpod-provider-aws-linux-arm64\n      checksum: fa15c13e3f0619170d002f9dae3ef41c9949a4595a71c5efe364d89ada604cec\n    - os: darwin\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-aws/releases/download/v0.0.1-alpha.15/devpod-provider-aws-darwin-amd64\n      checksum: fb89d41f6ce3e01e953f3ffd18f85bd5a42dd633abafd5d586dc9d9b1322166c\n    - os: darwin\n      arch: arm64\n      path: https://github.com/loft-sh/devpod-provider-aws/releases/download/v0.0.1-alpha.15/devpod-provider-aws-darwin-arm64\n      checksum: 82b6713069fa061ea59941600ed32a15f73806a9af3074d67a20ed367d18b2aa\n    - os: windows\n      arch: amd64\n      path: https://github.com/loft-sh/devpod-provider-aws/releases/download/v0.0.1-alpha.15/devpod-provider-aws-windows-amd64.exe\n      checksum: 49bd899d439f38d4e8647102db1c18b7a0d5242b3c09c89071b20a5444e20a81\n```\n\n----------------------------------------\n\nTITLE: Enabling Unprivileged ICMP Ping on Linux\nDESCRIPTION: Linux `sysctl` command to modify the `net.ipv4.ping_group_range` kernel parameter. This allows users within the specified group range (effectively all users in this case) to send ICMP echo requests without requiring root privileges or special capabilities, enabling the library's default UDP ping mechanism. Requires root privileges (`sudo`) to execute.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```\nsudo sysctl -w net.ipv4.ping_group_range=\"0 2147483647\"\n```\n```\n\n----------------------------------------\n\nTITLE: Nested Trace Operations in Go\nDESCRIPTION: Illustrates how to create nested trace operations with separate logging thresholds and custom fields for hierarchical operation tracking.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    rootTrace := trace.New(\"rootOperation\")\n    defer rootTrace.LogIfLong(100 * time.Millisecond)\n    \n    func() {\n        nestedTrace := rootTrace.Nest(\"nested\", Field{Key: \"nestedFieldKey1\", Value: \"nestedFieldValue1\"})\n        defer nestedTrace.LogIfLong(50 * time.Millisecond)\n        // do nested operation\n    }()\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating an expression with a parameter (foo > 0). This demonstrates how to reference variables in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfoo > 0\n```\n\n----------------------------------------\n\nTITLE: Checking for Exact Error Value in Go Multierror\nDESCRIPTION: This snippet demonstrates how to use the standard errors.Is function to check for the presence of an exact error value within a multierror. It's useful for identifying specific error conditions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Styles in Lip Gloss (Go)\nDESCRIPTION: Shows how styles can inherit rules from other styles, with only unset rules being inherited.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar styleA = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"229\")).\n    Background(lipgloss.Color(\"63\"))\n\n// Only the background color will be inherited here, because the foreground\n// color will have been already set:\nvar styleB = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"201\")).\n    Inherit(styleA)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Probing Example in Go\nDESCRIPTION: Illustrates how to use the `pro-bing` library for basic HTTP probing. It creates an `HttpCaller` for a target URL (\"https://www.google.com\"), sets options for call frequency (`WithHTTPCallerCallFrequency`) and a callback function (`WithHTTPCallerOnResp`) to process the response status code and latency upon completion of each request. It also includes OS signal handling for graceful shutdown (Ctrl-C). Depends on `pro-bing`, `os`, `os/signal`, `fmt`, and `time` packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n```go\nhttpCaller := probing.NewHttpCaller(\"https://www.google.com\",\n    probing.WithHTTPCallerCallFrequency(time.Second),\n    probing.WithHTTPCallerOnResp(func(suite *probing.TraceSuite, info *probing.HTTPCallInfo) {\n        fmt.Printf(\"got resp, status code: %d, latency: %s\\n\",\n            info.StatusCode,\n            suite.GetGeneralEnd().Sub(suite.GetGeneralStart()),\n        )\n    }),\n)\n\n// Listen for Ctrl-C.\nc := make(chan os.Signal, 1)\nsignal.Notify(c, os.Interrupt)\ngo func() {\n    <-c\n    httpCaller.Stop()\n}()\nhttpCaller.Run()\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Selection State Variables for Dynamic huh Forms in Go\nDESCRIPTION: This snippet defines two string variables, 'country' and 'state', which are used to store the user's selections for country and state/province in subsequent form fields. These variables serve as bindings to synchronize user input with form state. There are no dependencies for this snippet, and it's intended as the foundational step for dynamic forms that react to user choices.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar country string\nvar state string\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error from Go Multierror\nDESCRIPTION: This example shows how to use the standard errors.As function to extract a specific error type from a multierror value. It demonstrates error type assertion and extraction.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Complete Adaptive Colors in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to use CompleteAdaptiveColor to specify exact color values for both light and dark backgrounds.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.CompleteAdaptiveColor{\n    Light: CompleteColor{TrueColor: \"#d7ffae\", ANSI256: \"193\", ANSI: \"11\"},\n    Dark:  CompleteColor{TrueColor: \"#d75fee\", ANSI256: \"163\", ANSI: \"5\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Method Name Reporting in Logrus\nDESCRIPTION: This snippet shows how to enable method name reporting in Logrus logs. When enabled, each log entry will include the calling method as a field, though this adds some performance overhead.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Advanced Directory Copying with Options in Go\nDESCRIPTION: This snippet demonstrates advanced usage of the `Copy` function by providing an `Options` struct. It configures the copy operation to skip any file or directory whose path ends with '.git'. This requires the `github.com/otiai10/copy` package and the standard `strings` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// For example...\nopt := Options{\n\tSkip: func(src string) (bool, error) {\n\t\treturn strings.HasSuffix(src, \".git\"), nil\n\t},\n}\nerr := Copy(\"your/directory\", \"your/directory.copy\", opt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Loggers\nDESCRIPTION: Example showing how to create and chain named loggers for better context and organization in logging output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlogger := log.Log.WithName(\"controller\").WithName(\"replicaset\")\n// in reconcile...\nlogger = logger.WithValues(\"replicaset\", req.NamespacedName)\n// later on in reconcile...\nlogger.Info(\"doing things with pods\", \"pod\", newPod)\n```\n\n----------------------------------------\n\nTITLE: Verifying Persistent Volume Creation\nDESCRIPTION: Command and sample output to verify that the persistent volume was successfully created in Kubernetes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE\ndevpod-pv                                  1Gi        RWO            Retain           Available                                   12d\n```\n\n----------------------------------------\n\nTITLE: Reversing Strings while Preserving Grapheme Clusters in Go\nDESCRIPTION: Shows how to reverse a string while maintaining the integrity of grapheme clusters using the ReverseString function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Credential Injection in DevPod\nDESCRIPTION: This command disables the injection of docker credentials into all workspaces. It sets the SSH_INJECT_DOCKER_CREDENTIALS option to false in the default context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/credentials.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options default -o SSH_INJECT_DOCKER_CREDENTIALS=false\n```\n\n----------------------------------------\n\nTITLE: Returning Multierror Only If Errors Exist in Go\nDESCRIPTION: This example shows how to use the ErrorOrNil function to return an error implementation only if there are actual errors to return. It helps in avoiding unnecessary error wrapping when no errors occurred.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Spinner with Action to Indicate Progress in Go\nDESCRIPTION: This snippet provides an example of using the 'spinner' package's fluent API to present a progress spinner with a title while executing a blocking 'makeBurger' action. After the spinner finishes, it prints a confirmation message. This is intended to provide user feedback during background or time-consuming operations. Requires the 'spinner' package and the definition of a 'makeBurger' function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nerr := spinner.New().\n    Title(\"Making your burger...\").\n    Action(makeBurger).\n    Run()\n\nfmt.Println(\"Order up!\")\n```\n\n----------------------------------------\n\nTITLE: Using BitSet for Go Fish Game Simulation in Go\nDESCRIPTION: This snippet demonstrates how to use the BitSet library to simulate a Go Fish card game. It sets and clears bits representing cards, tests for matches, and shows chaining of operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\n\t\"github.com/bits-and-blooms/bitset\"\n)\n\nfunc main() {\n\tfmt.Printf(\"Hello from BitSet!\\n\")\n\tvar b bitset.BitSet\n\t// play some Go Fish\n\tfor i := 0; i < 100; i++ {\n\t\tcard1 := uint(rand.Intn(52))\n\t\tcard2 := uint(rand.Intn(52))\n\t\tb.Set(card1)\n\t\tif b.Test(card2) {\n\t\t\tfmt.Println(\"Go Fish!\")\n\t\t}\n\t\tb.Clear(card1)\n\t}\n\n\t// Chaining\n\tb.Set(10).Set(11)\n\n\tfor i, e := b.NextSet(0); e; i, e = b.NextSet(i + 1) {\n\t\tfmt.Println(\"The following bit is set:\", i)\n\t}\n\tif b.Intersection(bitset.New(100).Set(10)).Count() == 1 {\n\t\tfmt.Println(\"Intersection works.\")\n\t} else {\n\t\tfmt.Println(\"Intersection doesn't work???\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Format Checker (Go)\nDESCRIPTION: Demonstrates how to remove a format checker from gojsonschema. This can be useful for overriding default formats or removing unwanted ones.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.FormatCheckers.Remove(\"hostname\")\n```\n\n----------------------------------------\n\nTITLE: Password Input Implementation\nDESCRIPTION: Demonstrates how to collect secure password input with hidden characters\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npassword := \"\"\nprompt := &survey.Password{\n    Message: \"Please type your password\",\n}\nsurvey.AskOne(prompt, &password)\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for DevPod Persistent Volume\nDESCRIPTION: Commands to create a directory for DevPod YAML configuration and edit a new persistent volume file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmkdir ~/devpods\ncd ~/devpods\ntouch devpod-pv.yml\nvim devpod-pv.yml # or your preferred text editor\n```\n\n----------------------------------------\n\nTITLE: Parsing with Backtick Expansion using go-shellwords Parser (Global Config)\nDESCRIPTION: This snippet demonstrates an alternative way to enable backtick command substitution by setting the global `shellwords.ParseBacktick` variable to `true`. When a new `shellwords.NewParser()` is created afterwards, it inherits this global setting, causing it to execute commands within backticks and substitute their output during parsing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\nshellwords.ParseBacktick = true\np := shellwords.NewParser()\nargs, err := p.Parse(\"./foo `echo $SHELL`\")\n// args should be [\"./foo\", \"/bin/bash\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Overview of the float16 Package Public API in Go\nDESCRIPTION: Provides a summary of the public API exposed by the `float16` package. It lists the main exported type `Float16` (an alias for `uint16`), the error constant `ErrInvalidNaNValue`, key exported functions like `Fromfloat32`, `FromNaN32ps`, `Frombits`, `NaN`, `Inf`, `PrecisionFromfloat32`, and exported methods for the `Float16` type such as `Float32`, `Bits`, `IsNaN`, `IsInf`, `String`, etc. This serves as a quick reference guide to the package's capabilities.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/x448/float16/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage float16 // import \"github.com/x448/float16\"\n\n// Exported types and consts\ntype Float16 uint16\nconst ErrInvalidNaNValue = float16Error(\"float16: invalid NaN value, expected IEEE 754 NaN\")\n\n// Exported functions\nFromfloat32(f32 float32) Float16   // Float16 number converted from f32 using IEEE 754 default rounding\n                                      with identical results to AMD and Intel F16C hardware. NaN inputs \n                                      are converted with quiet bit always set on, to be like F16C.\n\nFromNaN32ps(nan float32) (Float16, error)   // Float16 NaN without modifying quiet bit.\n                                            // The \"ps\" suffix means \"preserve signaling\".\n                                            // Returns sNaN and ErrInvalidNaNValue if nan isn't a NaN.\n                                 \nFrombits(b16 uint16) Float16       // Float16 number corresponding to b16 (IEEE 754 binary16 rep.)\nNaN() Float16                      // Float16 of IEEE 754 binary16 not-a-number\nInf(sign int) Float16              // Float16 of IEEE 754 binary16 infinity according to sign\n\nPrecisionFromfloat32(f32 float32) Precision  // quickly indicates exact, ..., overflow, underflow\n                                             // (inline and < 1 ns/op)\n// Exported methods\n(f Float16) Float32() float32      // float32 number converted from f16 using lossless conversion\n(f Float16) Bits() uint16          // the IEEE 754 binary16 representation of f\n(f Float16) IsNaN() bool           // true if f is not-a-number (NaN)\n(f Float16) IsQuietNaN() bool      // true if f is a quiet not-a-number (NaN)\n(f Float16) IsInf(sign int) bool   // true if f is infinite based on sign (-1=NegInf, 0=any, 1=PosInf)\n(f Float16) IsFinite() bool        // true if f is not infinite or NaN\n(f Float16) IsNormal() bool        // true if f is not zero, infinite, subnormal, or NaN.\n(f Float16) Signbit() bool         // true if f is negative or negative zero\n(f Float16) String() string        // string representation of f to satisfy fmt.Stringer interface\n```\n\n----------------------------------------\n\nTITLE: Running Go Reaper in a Separate Parent Process Using ForkExec in Go\nDESCRIPTION: Presents a complex pattern for scenarios where the main Go application itself manages child processes (e.g., using `os.exec`). It uses an environment variable (`REAPER`) to distinguish between a parent and child process. The initial execution acts as the parent: it starts the background reaper (`go reaper.Reap()`) and then uses `syscall.ForkExec` to re-execute itself as a child process with the `REAPER` environment variable set. The parent then waits for the child using `syscall.Wait4`. The child process contains the actual application logic. This separation ensures the reaper runs as PID 1 (within its context) without interfering with the application's own process management.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ramr/go-reaper/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport (\n        \"os\"\n        \"syscall\"\n\n        reaper \"github.com/ramr/go-reaper\"\n)\n\nfunc main() {\n        // Use an environment variable REAPER to indicate whether or not\n        // we are the child/parent.\n        if _, hasReaper := os.LookupEnv(\"REAPER\"); !hasReaper {\n                //  Start background reaping of orphaned child processes.\n                go reaper.Reap()\n\n                // Note: Optionally add an argument to the end to more\n                //       easily distinguish the parent and child in\n                //       something like `ps` etc.\n                args := os.Args\n                // args := append(os.Args, \"#kiddo\")\n\n                pwd, err := os.Getwd()\n                if err != nil {\n                        // Note: Better to use a default dir ala \"/tmp\".\n                        panic(err)\n                }\n\n                kidEnv := []string{ fmt.Sprintf(\"REAPER=%d\", os.Getpid()) }\n\n                var wstatus syscall.WaitStatus\n                pattrs := &syscall.ProcAttr{\n                        Dir:   pwd,\n                        Env:   append(os.Environ(), kidEnv...),\n                        Sys:   &syscall.SysProcAttr{Setsid: true},\n                        Files: []uintptr{\n                                uintptr(syscall.Stdin),\n                                uintptr(syscall.Stdout),\n                                uintptr(syscall.Stderr),\n                        },\n                }\n\n                pid, _ := syscall.ForkExec(args[0], args, pattrs)\n\n                // fmt.Printf(\"kiddo-pid = %d\\n\", pid)\n                _, err = syscall.Wait4(pid, &wstatus, 0, nil)\n                for syscall.EINTR == err {\n                        _, err = syscall.Wait4(pid, &wstatus, 0, nil)\n                }\n\n                // If you put this code into a function, then exit here.\n                os.Exit(0)\n                return\n        }\n\n        //  Rest of your code goes here ...\n\n}  /*  End of func  main.  */\n\n```\n```\n\n----------------------------------------\n\nTITLE: Example API Structure\nDESCRIPTION: Demonstrates the main sections of the Swagger API definition file, showing the definitions and paths structure used for API documentation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/docker/docker/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  # reusable objects for requests and responses\n\npaths:\n  # API endpoints and inline objects\n```\n\n----------------------------------------\n\nTITLE: Integrating go-colorable with Logrus in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure the logrus logging library to use go-colorable for colored output. It forces color formatting in logrus and sets the output to a new colorable standard output stream provided by the go-colorable package, enabling colored log messages even on Windows. This code can be compiled on non-Windows OSs as well.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files using httprouter NotFound Handler in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure the `httprouter` to serve static files as a fallback mechanism. It assigns the standard `http.FileServer` handler, configured to serve files from the `./public` directory, to the `router.NotFound` property. This means that if an incoming request does not match any defined routes, the router will attempt to serve a corresponding file from the specified directory. The surrounding text notes that using a dedicated path prefix (e.g., `/static/`) is often a cleaner approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\n// Serve static files from the ./public directory\nrouter.NotFound = http.FileServer(http.Dir(\"public\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Setting TextFormatter Options in Go with Logrus\nDESCRIPTION: This snippet demonstrates how to configure the TextFormatter to disable colors and enable full timestamps in Logrus, ensuring consistent text output even when a TTY is attached.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetFormatter(&log.TextFormatter{\n\tDisableColors: true,\n\tFullTimestamp: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using User-Specified Buffer for CBOR Encoding in Go\nDESCRIPTION: Shows how to use a user-specified buffer for encoding instead of the built-in buffer pool, introduced in v2.7.0. This feature extends the EncMode interface with MarshalToBuffer().\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nem, err := myEncOptions.UserBufferEncMode() // create UserBufferEncMode mode\n\nvar buf bytes.Buffer\nerr = em.MarshalToBuffer(v, &buf) // encode v to provided buf\n```\n\n----------------------------------------\n\nTITLE: Adding Borders in Lip Gloss (Go)\nDESCRIPTION: Shows various ways to add and customize borders in Lip Gloss, including predefined border styles and custom borders.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Add a purple, rectangular border\nvar style = lipgloss.NewStyle().\n    BorderStyle(lipgloss.NormalBorder()).\n    BorderForeground(lipgloss.Color(\"63\"))\n\n// Set a rounded, yellow-on-purple border to the top and left\nvar anotherStyle = lipgloss.NewStyle().\n    BorderStyle(lipgloss.RoundedBorder()).\n    BorderForeground(lipgloss.Color(\"228\")).\n    BorderBackground(lipgloss.Color(\"63\")).\n    BorderTop(true).\n    BorderLeft(true)\n\n// Make your own border\nvar myCuteBorder = lipgloss.Border{\n    Top:         \"._.:*:\",\n    Bottom:      \"._.:*:\",\n    Left:        \"|*\",\n    Right:       \"|*\",\n    TopLeft:     \"*\",\n    TopRight:    \"*\",\n    BottomLeft:  \"*\",\n    BottomRight: \"*\",\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Add a thick border to the top and bottom\nlipgloss.NewStyle().\n    Border(lipgloss.ThickBorder(), true, false)\n\n// Add a double border to the top and left sides. Rules are set clockwise\n// from top.\nlipgloss.NewStyle().\n    Border(lipgloss.DoubleBorder(), true, false, false, true)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Router Client Selection Function in Go with GoUPnP\nDESCRIPTION: This function requests multiple types of Internet gateway clients in parallel using errgroups and returns the first valid client that implements the RouterClient interface. It works with WANIPConnection1, WANIPConnection2, and WANPPPConnection1 client types to maximize compatibility with different routers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/goupnp/GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc PickRouterClient(ctx context.Context) (RouterClient, error) {\n\ttasks, _ := errgroup.WithContext(ctx)\n\t// Request each type of client in parallel, and return what is found.\n\tvar ip1Clients []*internetgateway2.WANIPConnection1\n\ttasks.Go(func() error {\n\t\tvar err error\n\t\tip1Clients, _, err = internetgateway2.NewWANIPConnection1Clients()\n\t\treturn err\n\t})\n\tvar ip2Clients []*internetgateway2.WANIPConnection2\n\ttasks.Go(func() error {\n\t\tvar err error\n\t\tip2Clients, _, err = internetgateway2.NewWANIPConnection2Clients()\n\t\treturn err\n\t})\n\tvar ppp1Clients []*internetgateway2.WANPPPConnection1\n\ttasks.Go(func() error {\n\t\tvar err error\n\t\tppp1Clients, _, err = internetgateway2.NewWANPPPConnection1Clients()\n\t\treturn err\n\t})\n\n\tif err := tasks.Wait(); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Trivial handling for where we find exactly one device to talk to, you\n\t// might want to provide more flexible handling than this if multiple\n\t// devices are found.\n\tswitch {\n\tcase len(ip2Clients) == 1:\n\t\treturn ip2Clients[0], nil\n\tcase len(ip1Clients) == 1:\n\t\treturn ip1Clients[0], nil\n\tcase len(ppp1Clients) == 1:\n\t\treturn ppp1Clients[0], nil\n\tdefault:\n\t\treturn nil, errors.New(\"multiple or no services found\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Go's flag Package Alongside pflag\nDESCRIPTION: Demonstrates how to add flags defined with Go's native flag package to pflag's flagset, useful for supporting third-party dependencies that use Go's flag package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cookie Path with gorilla/csrf in Go\nDESCRIPTION: This code demonstrates setting a specific path for the CSRF cookie using the gorilla/csrf library in Go. By default, the cookie path is set to the request's path. This example initializes the CSRF middleware using csrf.Protect with the csrf.Path(\"/\") option, ensuring the CSRF cookie is valid across all paths under the root of the application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n    CSRF := csrf.Protect(\n      []byte(\"a-32-byte-long-key-goes-here\"),\n      csrf.Path(\"/\"),\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Adding a DevPod Provider from a Specific Release\nDESCRIPTION: This command shows how to add a provider from a specific GitHub release using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add my-org/my-repo@v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Separators and Row Lines in Tablewriter (Go)\nDESCRIPTION: Illustrates advanced styling for ASCII tables by setting custom center, column, and row separators, as well as enabling row lines. Reads data from a CSV file, changes various separator symbols for a unique appearance, and sets alignment. Relies on the tablewriter package and a CSV file input; the result is a non-standard, stylized table output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntable, _ := tablewriter.NewCSV(os.Stdout, \"testdata/test.csv\", true)\ntable.SetRowLine(true)         // Enable row line\n\n// Change table lines\ntable.SetCenterSeparator(\"*\")\ntable.SetColumnSeparator(\"╪\")\ntable.SetRowSeparator(\"-\")\n\ntable.SetAlignment(tablewriter.ALIGN_LEFT)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Server in Go\nDESCRIPTION: Example of implementing a WebSocket server using the library. It accepts a connection, reads JSON data, logs it, and closes the connection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, nil)\n\tif err != nil {\n\t\t// ...\n\t}\n\tdefer c.CloseNow()\n\n\tctx, cancel := context.WithTimeout(r.Context(), time.Second*10)\n\tdefer cancel()\n\n\tvar v interface{}\n\terr = wsjson.Read(ctx, c, &v)\n\tif err != nil {\n\t\t// ...\n\t}\n\n\tlog.Printf(\"received: %v\", v)\n\n\tc.Close(websocket.StatusNormalClosure, \"\")\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple DevPod Providers\nDESCRIPTION: This snippet shows how to add multiple built-in providers to DevPod using the CLI. It includes examples for docker, kubernetes, ssh, aws, azure, gcloud, and digitalocean providers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add docker\ndevpod provider add kubernetes\ndevpod provider add ssh\ndevpod provider add aws\ndevpod provider add azure\ndevpod provider add gcloud\ndevpod provider add digitalocean\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example in Go\nDESCRIPTION: Demonstrates struct validation using various validation tags including custom validators. Shows how to define a struct with validation rules and validate it.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Parsing with Backtick Expansion using go-shellwords Parser (Instance Config)\nDESCRIPTION: This snippet shows how to enable backtick command substitution using a `shellwords.Parser` instance. Setting `p.ParseBacktick = true` instructs the parser to execute commands within backticks (like \\`echo $SHELL\\`) and substitute the command's standard output into the argument list during parsing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\np := shellwords.NewParser()\np.ParseBacktick = true\nargs, err := p.Parse(\"./foo `echo $SHELL`\")\n// args should be [\"./foo\", \"/bin/bash\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Complex String Encoding and Concatenation in Gval\nDESCRIPTION: Example of a complex expression using string literals, unicode characters, escape sequences, and string concatenation. This demonstrates Gval's support for various string operations and encodings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n(7 < \"47\" == true ? \"hello world!\\n\\u263a\") + ` more text`\n```\n\n----------------------------------------\n\nTITLE: Sample DevPod Telemetry Payload Structure in YAML\nDESCRIPTION: An example of the telemetry data payload that DevPod CLI sends to the backend. It includes anonymized machine information, command details, provider information, workspace source type, IDE used, and other technical metadata.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"event\":{\n    \"type\":\"devpod_cli\",                   # type of event\n    \"machine_id\":\"3ed2c7...ee308e6\",  # securely hashed machine ID to de-duplicate information received from the same user\n    \"timestamp\":1683878643781772,\n    \"properties\": {\n      \"command\":\"devpod provider delete\",   # the CLI command that was executed\n      \"provider\":\"kubernetes\",              # the default provider\n      \"source_type\":\"git:\",                 # the workspace source type (git, image, local, container, unknown)\n      \"ide\":\"vscode\",                       # the IDE used to open a workspace\n      \"desktop\":\"true\",                     # whether this cli command has been executed by DevPod Desktop or is a direct CLI invocation\n      \"version\":\"v0.5.29\",                  # the CLI version\n      \"error\":\"provider 'docker' does not exist\" # an error that occurred during command execution\n    }\n  },\n  \"user\":{\n    \"machine_id\":\"3ed2c7...ee308e6\",  # securely hashed machine ID to de-duplicate information received from the same user\n    \"arch\":\"amd64\",                   # CPU architecture\n    \"os\":\"linux\",                     # Operating system\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Update Method\nDESCRIPTION: Handles user input and updates the model state accordingly, including cursor movement and item selection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    switch msg := msg.(type) {\n\n    // Is it a key press?\n    case tea.KeyMsg:\n\n        // Cool, what was the actual key pressed?\n        switch msg.String() {\n\n        // These keys should exit the program.\n        case \"ctrl+c\", \"q\":\n            return m, tea.Quit\n\n        // The \"up\" and \"k\" keys move the cursor up\n        case \"up\", \"k\":\n            if m.cursor > 0 {\n                m.cursor--\n            }\n\n        // The \"down\" and \"j\" keys move the cursor down\n        case \"down\", \"j\":\n            if m.cursor < len(m.choices)-1 {\n                m.cursor++\n            }\n\n        // The \"enter\" key and the spacebar (a literal space) toggle\n        // the selected state for the item that the cursor is pointing at.\n        case \"enter\", \" \":\n            _, ok := m.selected[m.cursor]\n            if ok {\n                delete(m.selected, m.cursor)\n            } else {\n                m.selected[m.cursor] = struct{}{}\n            }\n        }\n    }\n\n    // Return the updated model to the Bubble Tea runtime for processing.\n    // Note that we're not returning a command.\n    return m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom CBOR Encoding Modes in Go\nDESCRIPTION: Demonstrates how to create and use custom encoding modes with specific options. It shows how to modify preset options, create an immutable encoding mode, and use it for marshaling and encoding.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Create encoding mode.\nopts := cbor.CoreDetEncOptions()   // use preset options as a starting point\nopts.Time = cbor.TimeUnix          // change any settings if needed\nem, err := opts.EncMode()          // create an immutable encoding mode\n\n// Reuse the encoding mode. It is safe for concurrent use.\n\n// API matches encoding/json.\nb, err := em.Marshal(v)            // encode v to []byte b\nencoder := em.NewEncoder(w)        // create encoder with io.Writer w\nerr := encoder.Encode(v)           // encode v to io.Writer w\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Metrics with httpsnoop in Go\nDESCRIPTION: This snippet demonstrates how to use httpsnoop to wrap an existing http.Handler and log metrics for each request. It captures the HTTP method, URL, status code, duration, and bytes written.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Using Binaries in Provider Commands with YAML\nDESCRIPTION: Example showing how to reference and use declared binaries within the 'exec' section of a provider configuration using environment variables.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/binaries.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  MY_BINARY:\n    ....\n\nexec:\n  init: ${MY_BINARY} init\n  ....\n```\n\n----------------------------------------\n\nTITLE: Implementing Integration Tests for Survey with go-expect in Go\nDESCRIPTION: This code demonstrates how to write integration tests for Survey using go-expect. It shows a test case for an Input prompt that expects a string, sends a response, and verifies the result. The example includes the test structure with prompt implementation, interaction procedure, and expected output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{\n  \"Test Input prompt interaction\",       // Name of the test.\n  &Input{                                // An implementation of the survey.Prompt interface.\n    Message: \"What is your name?\",\n  },\n  func(c *expect.Console) {              // An expect procedure. You can expect strings / regexps and\n    c.ExpectString(\"What is your name?\") // write back strings / bytes to its psuedoterminal for survey.\n    c.SendLine(\"Johnny Appleseed\")\n    c.ExpectEOF()                        // Nothing is read from the tty without an expect, and once an\n                                         // expectation is met, no further bytes are read. End your\n                                         // procedure with `c.ExpectEOF()` to read until survey finishes.\n  },\n  \"Johnny Appleseed\",                    // The expected result.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers for Feature Downloads in devcontainer.json\nDESCRIPTION: JSON configuration that demonstrates how to add custom HTTP headers when downloading feature archives. This allows authenticating with or passing additional information to feature hosting servers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/devcontainer-json.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"features\": {\n    \"https://example.com/foo_feature.tar.gz\": []\n  },\n  \"customizations\": {\n    \"devpod\": {\n      \"featureDownloadHTTPHeaders\": {\n        \"FOO_HEADER\": \"${env:FOO_ENV_VAR}\"\n        \"BAR_HEADER\": \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Block-Level Formatting in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to apply block-level formatting like padding and margins, including shorthand syntax.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Padding\nvar style = lipgloss.NewStyle().\n    PaddingTop(2).\n    PaddingRight(4).\n    PaddingBottom(2).\n    PaddingLeft(4)\n\n// Margins\nvar style = lipgloss.NewStyle().\n    MarginTop(2).\n    MarginRight(4).\n    MarginBottom(2).\n    MarginLeft(4)\n```\n\nLANGUAGE: go\nCODE:\n```\n// 2 cells on all sides\nlipgloss.NewStyle().Padding(2)\n\n// 2 cells on the top and bottom, 4 cells on the left and right\nlipgloss.NewStyle().Margin(2, 4)\n\n// 1 cell on the top, 4 cells on the sides, 2 cells on the bottom\nlipgloss.NewStyle().Padding(1, 4, 2)\n\n// Clockwise, starting from the top: 2 cells on the top, 4 on the right, 3 on\n// the bottom, and 1 on the left\nlipgloss.NewStyle().Margin(2, 4, 3, 1)\n```\n\n----------------------------------------\n\nTITLE: Negotiating Content Type based on Accept Header in Go\nDESCRIPTION: Defines the signature for the 'Negotiate' function. This function takes an HTTP Accept header string and a slice of available content type strings ('alternatives') as input. It returns the single most appropriate content type string selected through the negotiation process based on RFC 2616 rules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Negotiate(header string, alternatives []string) (content_type string)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Starting Advanced Go Reaper Process in Go\nDESCRIPTION: Illustrates advanced usage of the go-reaper library by customizing its behavior through a `reaper.Config` struct. This allows setting options like debug mode, disabling PID 1 checks, enabling subreaper functionality, and configuring a channel (`StatusChannel`) for receiving notifications about reaped processes. The reaper is started with this configuration using `reaper.Start(config)`. An optional goroutine demonstrates how to listen for status updates on the provided channel.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ramr/go-reaper/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport reaper \"github.com/ramr/go-reaper\"\n\nfunc main() {\n        config := reaper.Config{\n                Pid:                  0,\n                Options:              0,\n                Debug:                true,\n                DisablePid1Check:     false,\n                EnableChildSubreaper: false,\n\n                //  If you wish to get notified whenever a child process is\n                //  reaped, use a `buffered` status channel.\n                //      StatusChannel: make(chan reaper.Status, 42),\n                StatusChannel: nil,\n        }\n\n        //  Only use this if you care about status notifications\n        //  for reaped process (aka StatusChannel != nil).\n        if config.StatusChannel != nil {\n                go func() {\n                        select {\n                        case status, ok := <-config.StatusChannel:\n                                if !ok {\n                                        return\n                                }\n                                // process status (reaper.Status)\n                        }\n                }()\n        }\n\n        //  Start background reaping of orphaned child processes.\n        go reaper.Start(config)\n\n        //  Rest of your code ...\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Configuration for Image Snapshotter\nDESCRIPTION: Configuration required in the Docker daemon.json file to enable the containerd snapshotter feature, which is necessary for registry caching with the Docker provider.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/reduce-build-times-with-cache.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"containerd-snapshotter\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Validation in Go using GoValidator\nDESCRIPTION: Demonstrates how to use the 'type' tag and ValidateStruct function to validate struct fields.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific DevPod Provider Options\nDESCRIPTION: This command shows how to set a specific option for a provider using the CLI. It uses the AWS provider and disk size as an example.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider set-options aws --option AWS_DISK_SIZE=120\n```\n\n----------------------------------------\n\nTITLE: Building Workspace with DevPod Cache\nDESCRIPTION: Command to prebuild a workspace image that will populate the registry cache for subsequent builds by team members.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/reduce-build-times-with-cache.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevpod build my-workspace\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values After Parsing\nDESCRIPTION: Shows how to access flag values after parsing, demonstrating both pointer-based and variable-bound approaches.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Docker Image Tarballs in Go\nDESCRIPTION: This snippet demonstrates how to read a Docker image tarball from a file, modify its tag, and write it back to a new file using the tarball package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/tarball/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/tarball\"\n)\n\nfunc main() {\n\t// Read a tarball from os.Args[1] that contains ubuntu.\n\ttag, err := name.NewTag(\"ubuntu\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\timg, err := tarball.ImageFromPath(os.Args[1], &tag)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Write that tarball to os.Args[2] with a different tag.\n\tnewTag, err := name.NewTag(\"ubuntu:newest\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tf, err := os.Create(os.Args[2])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer f.Close()\n\n\tif err := tarball.Write(newTag, img, f); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hashstructure via go get in Go\nDESCRIPTION: This snippet shows how to install the hashstructure library version 2 for Go using the go get command. It is a prerequisite for using the library in your project and must be executed in your Go module directory. Required: Go toolchain installed, internet access. Output: Downloads and installs the hashstructure library into your module’s dependencies.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/hashstructure/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/hashstructure/v2\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Domain Routing in Go using httprouter and HostSwitch\nDESCRIPTION: This Go code provides an example of handling requests for multiple domains or sub-domains using `httprouter`. It defines a custom `HostSwitch` type that implements the `http.Handler` interface. This type uses a map to associate hostnames (including ports) with specific `http.Handler` instances (like an `httprouter` router). The `ServeHTTP` method routes incoming requests to the appropriate handler based on the request's `Host` header. If no handler matches the host, it returns a 403 Forbidden error. The `main` function demonstrates initializing a router, registering it within the `HostSwitch` for a specific host, and starting the server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\n// We need an object that implements the http.Handler interface.\n// Therefore we need a type for which we implement the ServeHTTP method.\n// We just use a map here, in which we map host names (with port) to http.Handlers\ntype HostSwitch map[string]http.Handler\n\n// Implement the ServeHTTP method on our new type\nfunc (hs HostSwitch) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Check if a http.Handler is registered for the given host.\n\t// If yes, use it to handle the request.\n\tif handler := hs[r.Host]; handler != nil {\n\t\thandler.ServeHTTP(w, r)\n\t} else {\n\t\t// Handle host names for which no handler is registered\n\t\thttp.Error(w, \"Forbidden\", 403) // Or Redirect?\n\t}\n}\n\nfunc main() {\n\t// Initialize a router as usual\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\t// Make a new HostSwitch and insert the router (our http handler)\n\t// for example.com and port 12345\n\ths := make(HostSwitch)\n\ths[\"example.com:12345\"] = router\n\n\t// Use the HostSwitch to listen and serve on port 12345\n\tlog.Fatal(http.ListenAndServe(\":12345\", hs))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Typed Constants - Go\nDESCRIPTION: Demonstrates a Go code pattern where constants are declared in a block, showing both a problematic case where the type is omitted for the second constant, causing 'a' and 'b' to have different types, and the fixed version where the type is explicitly declared for both. This serves as a technical note about correct constant typing in Go. No dependencies are required, and no input/output is involved. It clarifies a common pitfall in Go constant block syntax.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b      = 0x2\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b byte = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client-side gRPC Prometheus Interceptors in Go\nDESCRIPTION: This snippet shows how to set up a gRPC client with Prometheus monitoring interceptors. It includes dialing the server connection and creating the client with the interceptors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n...\n   clientConn, err = grpc.Dial(\n       address,\n\t\t   grpc.WithUnaryInterceptor(grpc_prometheus.UnaryClientInterceptor),\n\t\t   grpc.WithStreamInterceptor(grpc_prometheus.StreamClientInterceptor)\n   )\n   client = pb_testproto.NewTestServiceClient(clientConn)\n   resp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: \"hello\"})\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic SSH Server with Glider Labs SSH in Go\nDESCRIPTION: This Go snippet demonstrates how to create a minimal SSH server using the Glider Labs SSH package. It defines a single session handler that writes a greeting to each connected SSH client, then starts the server on port 2222. Dependencies for this snippet are the github.com/gliderlabs/ssh package along with the io and log standard libraries. The main parameter is the listen address (':2222') for the SSH server. Expected input is any SSH client connecting to the server; output is the text 'Hello world' sent to each session. The implementation is limited to basic handling and does not include authentication or advanced session logic.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/loft-sh/ssh/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n package main\n\n import (\n     \"github.com/gliderlabs/ssh\"\n     \"io\"\n     \"log\"\n )\n\n func main() {\n     ssh.Handle(func(s ssh.Session) {\n         io.WriteString(s, \"Hello world\\n\")\n     })  \n\n     log.Fatal(ssh.ListenAndServe(\":2222\", nil))\n }\n\n```\n\n----------------------------------------\n\nTITLE: Safely Escaping Command Line Arguments with Shellescape in Go\nDESCRIPTION: This example shows the proper way to escape command line arguments using the shellescape.Quote() function, which ensures that strings are properly escaped for safe use in shell commands.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/alessio/shellescape/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"gopkg.in/alessio/shellescape.v1\"\n)\n\nfunc main() {\n        fmt.Printf(\"ls -l %s\\n\", shellescape.Quote(os.Args[1]))\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing BitSet to Bytes in Go\nDESCRIPTION: This code snippet shows how to serialize a BitSet instance to a stream of bytes. It creates a BitSet, sets some bits, and then writes it to a buffer.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst length = 9585\nconst oneEvery = 97\nbs := bitset.New(length)\n// Add some bits\nfor i := uint(0); i < length; i += oneEvery {\n\tbs = bs.Set(i)\n}\n\nvar buf bytes.Buffer\nn, err := bs.WriteTo(&buf)\nif err != nil {\n\t// failure\n}\n// Here n == buf.Len()\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Env Files\nDESCRIPTION: Examples of loading environment variables from multiple or specific .env files.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngodotenv.Load(\"somerandomfile\")\ngodotenv.Load(\"filenumberone.env\", \"filenumbertwo.env\")\n```\n\n----------------------------------------\n\nTITLE: Setting SameSite Cookie Attribute with gorilla/csrf in Go\nDESCRIPTION: This snippet shows how to configure the SameSite attribute for CSRF cookies using gorilla/csrf in a Go application. It initializes the CSRF middleware using csrf.Protect, providing a secret key and the csrf.SameSite option set to csrf.SameSiteStrictMode. This instructs the browser to not send the cookie during any cross-site requests. The middleware is then applied to a gorilla/mux router before starting the HTTP server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    CSRF := csrf.Protect(\n      []byte(\"a-32-byte-long-key-goes-here\"),\n      // instruct the browser to never send cookies during cross site requests\n      csrf.SameSite(csrf.SameSiteStrictMode),\n    )\n\n    r := mux.NewRouter()\n    r.HandleFunc(\"/signup\", GetSignupForm)\n    r.HandleFunc(\"/signup/post\", PostSignupForm)\n\n    http.ListenAndServe(\":8000\", CSRF(r))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ProcFS and Reading Stat in Go\nDESCRIPTION: This snippet demonstrates the basic usage of the `procfs` package in Go. It initializes access to the `/proc` filesystem by creating a new `FS` object using `procfs.NewFS(\"/proc\")` and then retrieves general system statistics using the `fs.Stat()` method. Error handling is included but not fully shown.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests Using the Ginkgo CLI in Bash\nDESCRIPTION: This bash snippet shows how to run Ginkgo test suites in parallel using the Ginkgo CLI. By passing the '-p' flag to the 'ginkgo' command, tests are executed concurrently across multiple workers, which can greatly speed up execution for suites following Ginkgo's parallelization patterns. No additional dependencies are needed beyond the installed Ginkgo command-line tool. Input is simply the command invocation, and output is the parallelized execution of suite tests as permitted by the machine; this approach is suitable for large or slow-running integration tests but may require test isolation and careful setup/teardown in the test code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nginkgo -p\n```\n\n----------------------------------------\n\nTITLE: Specifying Packages for Go Test Coverage with Ginkgo using Shell\nDESCRIPTION: Runs Ginkgo tests while calculating code coverage, passing the '-coverpkg' flag down to the underlying 'go test' command. This allows specifying a comma-separated list of packages to be included in the coverage analysis. Introduced in version 1.2.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -coverpkg\n```\n\n----------------------------------------\n\nTITLE: Using Custom Renderers in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to use custom renderers in Lip Gloss for specific outputs, such as in a server-client situation over SSH.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc myLittleHandler(sess ssh.Session) {\n    // Create a renderer for the client.\n    renderer := lipgloss.NewRenderer(sess)\n\n    // Create a new style on the renderer.\n    style := renderer.NewStyle().Background(lipgloss.AdaptiveColor{Light: \"63\", Dark: \"228\"})\n\n    // Render. The color profile and dark background state will be correctly detected.\n    io.WriteString(sess, style.Render(\"Heyyyyyyy\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a SPDY Mirroring Server in Go\nDESCRIPTION: This snippet illustrates how to implement a basic mirroring SPDY server using the github.com/moby/spdystream Go library. The server listens on localhost:8080 for incoming TCP connections, establishes SPDY connections (in server mode), and uses the MirrorStreamHandler to echo incoming data back to clients. It demonstrates fundamental network server loops in Go, requires the spdystream library, and expects usage in a non-authenticated environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tspdyConn, err := spdystream.NewConnection(conn, true)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgo spdyConn.Serve(spdystream.MirrorStreamHandler)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FISH Shell for DevPod Compatibility\nDESCRIPTION: This snippet shows how to modify the FISH shell configuration to ensure compatibility with DevPod. It moves customizations and the Homebrew shellenv evaluation inside the interactive session check to prevent interference with DevPod agent workspace operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/troubleshooting/linux-troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nif status is-interactive\n    # Commands to run in interactive sessions can go here\n    eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n    \n    # customizations\nend\n```\n\n----------------------------------------\n\nTITLE: Quoting a String for Safe Output - CEL String Extension - Pseudocode\nDESCRIPTION: Describes the 'strings.quote' method, which escapes special/unsafe characters in strings to ensure print safety (i.e., avoids misinterpretation due to escape characters). Replaces invalid UTF-8 sequences with the Unicode replacement character. Returns a new string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_20\n\nLANGUAGE: pseudocode\nCODE:\n```\nstrings.quote(<string>)\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nstrings.quote('single-quote with \"double quote\"') // returns '\"single-quote with \\\"double quote\\\"\"'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nstrings.quote(\"two escape sequences \\a\\n\") // returns '\"two escape sequences \\\\a\\\\n\"'\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Prompt Implementation\nDESCRIPTION: Shows how to implement a multiple-choice selection prompt allowing multiple selections\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndays := []string{}\nprompt := &survey.MultiSelect{\n    Message: \"What days do you prefer:\",\n    Options: []string{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"},\n}\nsurvey.AskOne(prompt, &days)\n```\n\n----------------------------------------\n\nTITLE: AWS ECR Authentication Helper Implementation\nDESCRIPTION: Implementation of ECR credential helper authentication using amazon-ecr-credential-helper.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tecr \"github.com/awslabs/amazon-ecr-credential-helper/ecr-login\"\n\t\"github.com/awslabs/amazon-ecr-credential-helper/ecr-login/api\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\t// ...\n\tecrHelper := ecr.ECRHelper{ClientFactory: api.DefaultClientFactory{}}\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.NewKeychainFromHelper(ecrHelper)))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Minikube and VS Code on Ubuntu\nDESCRIPTION: Updates package lists and installs required dependencies for Minikube and VS Code setup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install git vim gpg wget -y\n```\n\n----------------------------------------\n\nTITLE: Testing Kubernetes Installation\nDESCRIPTION: Command to verify Kubernetes installation by retrieving all resources from the cluster.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get all\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with zstd in Go\nDESCRIPTION: Example code for decompressing streaming data using the zstd package. This implementation creates a reader from an input stream, decompresses the content, and copies it to an output writer. The example emphasizes the importance of closing the reader when finished.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Human-Readable Format in Go\nDESCRIPTION: This snippet demonstrates how to use the humanize.Bytes() function to convert a large number of bytes into a human-readable string representation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"That file is %s.\", humanize.Bytes(82854982)) // That file is 83 MB.\n```\n\n----------------------------------------\n\nTITLE: Establishing a SPDY Stream Client in Go\nDESCRIPTION: This snippet demonstrates how to implement a client using the github.com/moby/spdystream Go library to connect to a mirroring SPDY server without authentication. The client establishes a TCP connection, creates a SPDY stream, writes a message, reads a response, and closes the stream. Key dependencies include the standard net and http packages, and the spdystream library. The client expects to connect to a server listening on localhost:8080 and communicates using SPDY streams; it requires no authentication and handles basic error conditions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tspdyConn, err := spdystream.NewConnection(conn, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo spdyConn.Serve(spdystream.NoOpStreamHandler)\n\tstream, err := spdyConn.CreateStream(http.Header{}, nil, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstream.Wait()\n\n\tfmt.Fprint(stream, \"Writing to stream\")\n\n\tbuf := make([]byte, 25)\n\tstream.Read(buf)\n\tfmt.Println(string(buf))\n\n\tstream.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing BitSet from Bytes in Go\nDESCRIPTION: This snippet demonstrates how to deserialize a BitSet from a stream of bytes. It reads the serialized data from a buffer into a new BitSet instance.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Read back from buf\nbs = bitset.New()\nn, err = bs.ReadFrom(&buf)\nif err != nil {\n\t// error\n}\n// n is the number of bytes read\n```\n\n----------------------------------------\n\nTITLE: Environment Loading Precedence Example\nDESCRIPTION: Example showing the conventional order of loading multiple environment files.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nenv := os.Getenv(\"FOO_ENV\")\nif \"\" == env {\n  env = \"development\"\n}\n\ngodotenv.Load(\".env.\" + env + \".local\")\nif \"test\" != env {\n  godotenv.Load(\".env.local\")\n}\ngodotenv.Load(\".env.\" + env)\ngodotenv.Load() // The Original .env\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Drop-in Replacement for Go's flag Package\nDESCRIPTION: Demonstrates how to import pflag as a replacement for Go's native flag package by importing it under the name \"flag\".\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent-Side Binaries in YAML\nDESCRIPTION: Example showing how to define binaries that DevPod should install on the agent side and use them within the agent execution context, such as for automatic VM shutdown when inactive.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/binaries.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nagent:\n  path: ${AGENT_PATH}\n  binaries:\n    GCLOUD_PROVIDER:\n      - os: linux\n        arch: amd64\n        path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-linux-amd64\n        checksum: 38f92457507563ee56ea40a2ec40196d12ac2bbd50a924d76f55827e96e5f831\n      - os: linux\n        arch: arm64\n        path: https://github.com/loft-sh/devpod-provider-gcloud/releases/download/v0.0.1-alpha.10/devpod-provider-gcloud-linux-arm64\n        checksum: 48e8dfa20962f1c3eb1e3da17d57842a0e26155df2b94377bcdf5b8070d7b17e\n  exec:\n    shutdown: |-\n      ${GCLOUD_PROVIDER} stop --raw\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying JSON Patches in Go\nDESCRIPTION: Example showing how to create and apply RFC6902 JSON patches using operation arrays.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tpatchJSON := []byte(`[\n\t\t{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Jane\"},\n\t\t{\"op\": \"remove\", \"path\": \"/height\"}\n\t]`)\n\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodified, err := patch.Apply(original)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Original document: %s\\n\", original)\n\tfmt.Printf(\"Modified document: %s\\n\", modified)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Application Code\nDESCRIPTION: Shows how to use the logger within application code, including storing it in structs and making log calls.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod with Multi-Stage Build Example\nDESCRIPTION: Command to initiate a DevPod environment using the multi-stage build example configuration located in the examples directory. This allows testing of advanced Dockerfile builds with devcontainer features.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/build-multi-stage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up ./examples/build-multi-stage\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Formatting in Lip Gloss (Go)\nDESCRIPTION: Shows how to apply various inline text formatting options like bold, italic, faint, blink, strikethrough, underline, and reverse.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Italic(true).\n    Faint(true).\n    Blink(true).\n    Strikethrough(true).\n    Underline(true).\n    Reverse(true)\n```\n\n----------------------------------------\n\nTITLE: Platform Specifier Format Documentation\nDESCRIPTION: Demonstrates the format for platform specifiers which can include operating system, architecture, and optional variant components. The format follows the pattern '<os>|<arch>|<os>/<arch>[/<variant>]', allowing for flexible specification of platform requirements.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/platforms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<os>|<arch>|<os>/<arch>[/<variant>]\n```\n\n----------------------------------------\n\nTITLE: Server Implementation Example\nDESCRIPTION: Example demonstrating how to create a named pipe server using Listen and Accept to handle incoming connections.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/npipe.v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nln, err := npipe.Listen(`\\\\.\\pipe\\mypipename`)\nif err != nil {\n\t// handle error\n}\nfor {\n\tconn, err := ln.Accept()\n\tif err != nil {\n\t\t// handle error\n\t\tcontinue\n\t}\n\tgo handleConnection(conn)\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest JSON Structure for Windows Nanoserver Image Tarball\nDESCRIPTION: This JSON snippet illustrates the manifest.json structure for a Windows Nanoserver image tarball, including LayerSources for non-distributable layers and handling of digest-based pulls.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/tarball/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Config\": \"sha256:bc5d255ea81f83c8c38a982a6d29a6f2198427d258aea5f166e49856896b2da6\",\n    \"RepoTags\": [\n      \"index.docker.io/library/hello-world:i-was-a-digest\"\n    ],\n    \"Layers\": [\n      \"a35da61c356213336e646756218539950461ff2bf096badf307a23add6e70053.tar.gz\",\n      \"be21f08f670160cbae227e3053205b91d6bfa3de750b90c7e00bd2c511ccb63a.tar.gz\",\n      \"10d1439be4eb8819987ec2e9c140d44d74d6b42a823d57fe1953bd99948e1bc0.tar.gz\"\n    ],\n    \"LayerSources\": {\n      \"sha256:26fd2d9d4c64a4f965bbc77939a454a31b607470f430b5d69fc21ded301fa55e\": {\n        \"mediaType\": \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\",\n        \"size\": 101145811,\n        \"digest\": \"sha256:a35da61c356213336e646756218539950461ff2bf096badf307a23add6e70053\",\n        \"urls\": [\n          \"https://mcr.microsoft.com/v2/windows/nanoserver/blobs/sha256:a35da61c356213336e646756218539950461ff2bf096badf307a23add6e70053\"\n        ]\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Package Reference for Fake Client\nDESCRIPTION: Import path reference for the fake client package in controller-runtime, used for testing purposes though not recommended as the primary testing approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsigs.k8s.io/controller-runtime/pkg/client/fake\n```\n\n----------------------------------------\n\nTITLE: Configuring Node for Ztunnel\nDESCRIPTION: Labels a node for Ztunnel deployment and configures DaemonSet affinity.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nFIRST_NODE=$(kubectl get nodes -o jsonpath='{.items[0].metadata.name}')\nkubectl label node $FIRST_NODE devpod-ztunnel=enabled\n```\n\n----------------------------------------\n\nTITLE: Device Code Authentication in Go\nDESCRIPTION: Implementation of device code authentication flow\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\noauthClient := &http.Client{}\n\n// Acquire the device code\ndeviceCode, err := adal.InitiateDeviceAuth(\n\toauthClient,\n\t*oauthConfig,\n\tapplicationID,\n\tresource)\nif err != nil {\n\treturn nil, fmt.Errorf(\"Failed to start device auth flow: %s\", err)\n}\n\n// Display the authentication message\nfmt.Println(*deviceCode.Message)\n\n// Wait here until the user is authenticated\ntoken, err := adal.WaitForUserCompletion(oauthClient, deviceCode)\nif err != nil {\n\treturn nil, fmt.Errorf(\"Failed to finish device auth flow: %s\", err)\n}\n\nspt, err := adal.NewServicePrincipalTokenFromManualToken(\n\t*oauthConfig,\n\tapplicationID,\n\tresource,\n\t*token,\n\tcallbacks...)\n\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header, Column, and Footer Colors in Tablewriter Tables (Go)\nDESCRIPTION: Shows usage of SetHeaderColor, SetColumnColor, and SetFooterColor to apply ANSI color attributes and styles to ASCII tables via tablewriter in Go. Options like bold, foreground, and background colors are specified per-column. Useful for improving table readability and drawing attention to headings or totals in CLI output. Requires tablewriter, with color codes drawn from the package's predefined constants.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n\t[]string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n\t[]string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n\t[]string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"}) // Add Footer\ntable.SetBorder(false)                                // Set Border to false\n\ntable.SetHeaderColor(tablewriter.Colors{tablewriter.Bold, tablewriter.BgGreenColor},\n\ttablewriter.Colors{tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor},\n\ttablewriter.Colors{tablewriter.BgRedColor, tablewriter.FgWhiteColor},\n\ttablewriter.Colors{tablewriter.BgCyanColor, tablewriter.FgWhiteColor})\n\ntable.SetColumnColor(tablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiRedColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgHiBlackColor},\n\ttablewriter.Colors{tablewriter.Bold, tablewriter.FgBlackColor})\n\ntable.SetFooterColor(tablewriter.Colors{}, tablewriter.Colors{},\n\ttablewriter.Colors{tablewriter.Bold},\n\ttablewriter.Colors{tablewriter.FgHiRedColor})\n\ntable.AppendBulk(data)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Combining Merge Patches in Go\nDESCRIPTION: Example showing how to combine multiple JSON merge patches into a single patch that represents all changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie with Key Rotation in Go\nDESCRIPTION: Handler function that sets a cookie using the current key in a key rotation setup with EncodeMulti.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc SetCookieHandler(w http.ResponseWriter, r *http.Request) {\n\tvalue := map[string]string{\n\t\t\"foo\": \"bar\",\n\t}\n\tif encoded, err := securecookie.EncodeMulti(\"cookie-name\", value, cookies[\"current\"]); err == nil {\n\t\tcookie := &http.Cookie{\n\t\t\tName:  \"cookie-name\",\n\t\t\tValue: encoded,\n\t\t\tPath:  \"/\",\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a DevPod Machine\nDESCRIPTION: Command to stop a running DevPod machine. This allows users to pause usage without deleting the machine completely.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine stop <name-of-machine>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Go Validator\nDESCRIPTION: Shows how to handle validation errors and iterate over individual error messages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating a complex arithmetic expression to determine if a success rate is above 90%. This demonstrates combining arithmetic operations with comparisons.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n(requests_made * requests_succeeded / 100) >= 90\n```\n\n----------------------------------------\n\nTITLE: Sorting a List by Element Value - CEL Extension - Pseudocode\nDESCRIPTION: Shows how to use 'sort' for lists of primitive and comparable types (including int, string, bool, etc.). Heterogeneous or non-comparable element types produce errors. Returns a sorted list if input meets requirements. Relies on the CEL engine's equality and ordering semantics.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_10\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list(T)>.sort() -> <list(T)>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[3, 2, 1].sort() // return [1, 2, 3]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[\"b\", \"c\", \"a\"].sort() // return [\"a\", \"b\", \"c\"]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1, \"b\"].sort() // error\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[[1, 2, 3]].sort() // error\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Ginkgo Test Suite using Shell\nDESCRIPTION: Initializes a Ginkgo test suite by generating necessary files, including the '*_suite_test.go' file which acts as the test runner entry point. Running this command is often the first step when setting up Ginkgo tests in a Go package. Failure to run bootstrap can lead to Go test runs not detecting any Ginkgo tests.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nginkgo bootstrap\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value without Type Checking using reflect2.UnsafeSet in Go\nDESCRIPTION: Demonstrates obtaining the `reflect2.Type` of a variable using `reflect2.TypeOf` and then modifying the variable's value using the `UnsafeSet` method. This method uses `unsafe.Pointer` for both the target variable and the new value (e.g., `unsafe.Pointer(&i)`, `unsafe.Pointer(&j)`), bypassing runtime type checks for potential performance optimization.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Adding Your Fork as a Git Remote (Shell)\nDESCRIPTION: Adds the user's personal fork of the opentelemetry-go repository as a new git remote after cloning the upstream repository. Users need to replace `<YOUR_FORK>` with a chosen name for the remote (e.g., 'myfork') and `<YOUR_GITHUB_USERNAME>` with their actual GitHub username. This setup allows pushing changes to the personal fork.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Multiline Input Implementation\nDESCRIPTION: Shows how to use the multiline input prompt for collecting longer text input\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntext := \"\"\nprompt := &survey.Multiline{\n    Message: \"ping\",\n}\nsurvey.AskOne(prompt, &text)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Error (Go)\nDESCRIPTION: Shows how to add a custom validation error to the result set after the main validation has run. This example adds a custom error for an invalid answer to a specific question.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype AnswerInvalidError struct {\n    gojsonschema.ResultErrorFields\n}\n\nfunc newAnswerInvalidError(context *gojsonschema.JsonContext, value interface{}, details gojsonschema.ErrorDetails) *AnswerInvalidError {\n    err := AnswerInvalidError{}\n    err.SetContext(context)\n    err.SetType(\"custom_invalid_error\")\n    err.SetDescriptionFormat(\"Answer to the Ultimate Question of Life, the Universe, and Everything is {{.answer}}\")\n    err.SetValue(value)\n    err.SetDetails(details)\n\n    return &err\n}\n\nfunc main() {\n    // ...\n    schema, err := gojsonschema.NewSchema(schemaLoader)\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n\n    if true { // some validation\n        jsonContext := gojsonschema.NewJsonContext(\"question\", nil)\n        errDetail := gojsonschema.ErrorDetails{\n            \"answer\": 42,\n        }\n        result.AddError(\n            newAnswerInvalidError(\n                gojsonschema.NewJsonContext(\"answer\", jsonContext),\n                52,\n                errDetail,\n            ),\n            errDetail,\n        )\n    }\n\n    return result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NoOptDefVal for Flags\nDESCRIPTION: Demonstrates how to set NoOptDefVal for a flag, which changes behavior when a flag is specified without an option on the command line.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Auth Token Support Addition\nDESCRIPTION: Added support for dynamic authentication tokens from file and EKS container host in absolute/relative URIs in the HTTP credential provider.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.16.0 (2023-11-14)\n\n* **Feature**: Add support for dynamic auth token from file and EKS container host in absolute/relative URIs in the HTTP credential provider.\n```\n\n----------------------------------------\n\nTITLE: Uploading stdin as a layer to a local registry using stream package in Go\nDESCRIPTION: This snippet demonstrates how to use the stream package to upload the contents of stdin as a layer to a local registry. It creates a new repository, initializes a streaming layer from stdin, and writes the layer to the repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/stream/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n\t\"github.com/google/go-containerregistry/pkg/v1/stream\"\n)\n\n// upload the contents of stdin as a layer to a local registry\nfunc main() {\n\trepo, err := name.NewRepository(\"localhost:5000/stream\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tlayer := stream.NewLayer(os.Stdin)\n\n\tif err := remote.WriteLayer(repo, layer); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Text in Lip Gloss (Go)\nDESCRIPTION: Shows how to align paragraphs of text to the left, right, or center using Lip Gloss.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Width(24).\n    Align(lipgloss.Left).  // align it left\n    Align(lipgloss.Right). // no wait, align it right\n    Align(lipgloss.Center) // just kidding, align it in the center\n```\n\n----------------------------------------\n\nTITLE: Marshaling Data using Standard Go encoding/json\nDESCRIPTION: This snippet shows the standard way to marshal Go data structures into JSON format using the `Marshal` function from the built-in `encoding/json` package. It requires importing the `encoding/json` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type by Name using reflect2.TypeByName in Go\nDESCRIPTION: Demonstrates using `reflect2.TypeByName` to obtain a `reflect2.Type` object corresponding to a given type name string (e.g., \"package.TypeName\"). It notes a potential limitation where unused types might be optimized out by the compiler and thus unavailable at runtime. This function is analogous to Java's `Class.forName`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Merge Patches in Go\nDESCRIPTION: Example demonstrating how to create a merge patch from two JSON documents and apply it to a third document.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Using TransformList Comprehension in CEL\nDESCRIPTION: Converts a map or list into a list value using transformation expressions. Elements can optionally be filtered before transformation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_30\n\nLANGUAGE: cel\nCODE:\n```\n[1, 2, 3].transformList(indexVar, valueVar,\n  (indexVar * valueVar) + valueVar) // returns [1, 4, 9]\n[1, 2, 3].transformList(indexVar, valueVar, indexVar % 2 == 0\n  (indexVar * valueVar) + valueVar) // returns [1, 9]\n{'greeting': 'hello', 'farewell': 'goodbye'}\n  .transformList(k, _, k) // returns ['greeting', 'farewell']\n{'greeting': 'hello', 'farewell': 'goodbye'}\n  .transformList(_, v, v) // returns ['hello', 'goodbye']\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Startup Script\nDESCRIPTION: Creates an executable bash script to start Minikube with Docker driver and Calico CNI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd ~\ntouch minikube-start.sh\nsudo chmod u+x minikube-start.sh\n```\n\n----------------------------------------\n\nTITLE: Using TransformMapEntry Comprehension in CEL\nDESCRIPTION: Converts a map or list into a map where the transform expression produces map entries. Errors if any operation would produce duplicate keys in the result map.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_32\n\nLANGUAGE: cel\nCODE:\n```\n// returns {'hello': 'greeting'}\n{'greeting': 'hello'}.transformMapEntry(keyVar, valueVar, {valueVar: keyVar})\n// reverse lookup, require all values in list be unique\n[1, 2, 3].transformMapEntry(indexVar, valueVar, {valueVar: indexVar})\n\n{'greeting': 'aloha', 'farewell': 'aloha'}\n  .transformMapEntry(keyVar, valueVar, {valueVar: keyVar}) // error, duplicate key\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map for Portable Concurrency in Go\nDESCRIPTION: This snippet demonstrates the basic usage of `concurrent.Map` from the `modern-go/concurrent` package. It shows how to create a new map instance, store a key-value pair using `Store`, and retrieve a value using `Load`. This map serves as a portable alternative to the standard library's `sync.Map` for Go versions prior to 1.9.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Components\nDESCRIPTION: Demonstrates how to pass the logger instance to application components and structures.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    app := createTheAppObject(logger)\n    app.Run()\n```\n\n----------------------------------------\n\nTITLE: Updating a DevPod Provider from Local File\nDESCRIPTION: Updates a provider using a local provider.yaml file. This is useful for testing changes to provider configurations or for locally maintained providers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/update-provider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider update <provider-name> ../path-to-updated/provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Parsing with Environment Variable Expansion using go-shellwords Parser\nDESCRIPTION: This snippet demonstrates configuring a `shellwords.Parser` instance to enable environment variable expansion during parsing. By setting `p.ParseEnv = true`, the parser will substitute environment variables (like `$FOO`) found in the input string with their corresponding values (set using `os.Setenv` in this example) before splitting the string into arguments.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nos.Setenv(\"FOO\", \"bar\")\np := shellwords.NewParser()\np.ParseEnv = true\nargs, err := p.Parse(\"./foo $FOO\")\n// args should be [\"./foo\", \"bar\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Input Field Configuration Example in Go\nDESCRIPTION: Shows how to configure a basic input field with title, prompt, and validation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewInput().\n    Title(\"What's for lunch?\").\n    Prompt(\"?\").\n    Validate(isFood).\n    Value(&lunch)\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Format with Comments and Trailing Commas (JavaScript/JSONC)\nDESCRIPTION: This snippet illustrates the JSONC format, an extension of standard JSON. It demonstrates the inclusion of both multi-line (`/* ... */`) and single-line (`//`) comments, as well as a trailing comma after the last key-value pair within the `dbInfo` object. This format is useful for configuration files where comments can add context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tidwall/jsonc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n\n  /* Dev Machine */\n  \"dbInfo\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,          \n    \"username\": \"josh\",\n    \"password\": \"pass123\", // please use a hashed password\n  },\n\n  /* Only SMTP Allowed */\n  \"emailInfo\": {\n    \"email\": \"josh@example.com\", // use full email address\n    \"password\": \"pass123\",\n    \"smtp\": \"smpt.example.com\",\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Committing, Pushing, and Releasing via Git and GitHub CLI - Shell\nDESCRIPTION: This shell snippet covers a standard workflow for finalizing and publishing a release after updating the changelog and versioning information. It commits all changes with a versioned message, pushes the branch to remote, creates a GitHub Release for the version tag using the GitHub CLI, and ensures that all tags are synced. Dependencies: git, GitHub CLI (gh), and push permissions. Inputs: local working tree and versioned commit. Outputs: pushed code, GitHub release, and fetched tags. Constraints: assumes authenticated CLI and correct permissions on the repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"vM.m.p\"\ngit push\ngh release create \"vM.m.p\"\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Referencing Retry Mode in Go\nDESCRIPTION: This code snippet demonstrates how to reference the Adaptive retry mode in the AWS SDK Go v2. It provides a link to the documentation for the AdaptiveMode in the retry package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/ssooidc/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nSee [retry.AdaptiveMode](https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/aws/retry#AdaptiveMode) for more details, and configuration options.\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection with Trusted Origins in Go\nDESCRIPTION: Example of setting up CSRF protection with trusted origins to allow cross-domain requests from a specific domain. This is useful for separating the API server from the frontend application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/gorilla/csrf\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n    csrfMiddleware := csrf.Protect([]byte(\"32-byte-long-auth-key\"), csrf.TrustedOrigins([]string{\"ui.domain.com\"}))\n\n    api := r.PathPrefix(\"/api\").Subrouter()\n    api.Use(csrfMiddleware)\n    api.HandleFunc(\"/user/{id}\", GetUser).Methods(\"GET\")\n\n    http.ListenAndServe(\":8000\", r)\n}\n\nfunc GetUser(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"X-CSRF-Token\", csrf.Token(r))\n    b, err := json.Marshal(user)\n    if err != nil {\n        http.Error(w, err.Error(), 500)\n        return\n    }\n\n    w.Write(b)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace with Netrw in Vim/Neovim\nDESCRIPTION: This snippet demonstrates how to connect to a DevPod workspace using Netrw in Vim or Neovim. It shows the syntax for editing remote files directly from within the editor or when starting Vim.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/vim.mdx#2025-04-23_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n:e scp://[user@]machine[[:#]port]/path\n```\n\nLANGUAGE: bash\nCODE:\n```\nvim scp://[user@]machine[[:#]port]/path\n```\n\n----------------------------------------\n\nTITLE: Using Presets for CBOR Encoding Options in Go\nDESCRIPTION: Shows how to use preset encoding options for different CBOR serialization standards, including Core Deterministic Encoding, Preferred Unsorted Encoding, Canonical CBOR, and CTAP2 Canonical CBOR.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// EncOptions is a struct of encoder settings.\nfunc CoreDetEncOptions() EncOptions              // RFC 8949 Core Deterministic Encoding\nfunc PreferredUnsortedEncOptions() EncOptions    // RFC 8949 Preferred Serialization\nfunc CanonicalEncOptions() EncOptions            // RFC 7049 Canonical CBOR\nfunc CTAP2EncOptions() EncOptions                // FIDO2 CTAP2 Canonical CBOR\n```\n\n----------------------------------------\n\nTITLE: Custom Date Comparison in Gval\nDESCRIPTION: Example of extending Gval with a custom date comparison function. This demonstrates how to add custom functions to Gval for specialized operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ndate(`2014-01-02`) > date(`2014-01-01 23:59:59`)\n```\n\n----------------------------------------\n\nTITLE: Multi-step Trace Operation in Go\nDESCRIPTION: Shows how to split a trace into multiple steps with custom fields for each step, allowing for more granular operation tracking.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\")\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do step 1\n    opTrace.Step(\"step1\", Field{Key: \"stepFieldKey1\", Value: \"stepFieldValue1\"})\n    // do step 2\n    opTrace.Step(\"step2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using slog.Handler as Backend for logr in Go\nDESCRIPTION: This snippet demonstrates how to use a slog.Handler as a backend for logr. It explains the mapping of logr verbosity levels to slog levels, stack unwinding, and handling of logger names and errors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Example usage:\nlogger := slog.New(slogHandler)\nlogrLogger := logslog.New(logger)\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function\nDESCRIPTION: Creates and runs the Bubble Tea program with the initial model.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    p := tea.NewProgram(initialModel())\n    if _, err := p.Run(); err != nil {\n        fmt.Printf(\"Alas, there's been an error: %v\", err)\n        os.Exit(1)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Caption with tablewriter in Go\nDESCRIPTION: This Go code utilizes tablewriter to display a table with column headers and a descriptive caption beneath it. It demonstrates the use of SetCaption to add a caption to the rendered table, with the caption wrapping based on the table width. Dependencies include the tablewriter package and os for stdout. Key parameters are the header, caption string, and the row data; output is written directly to the terminal.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := [][]string{\n    []string{\"A\", \"The Good\", \"500\"},\n    []string{\"B\", \"The Very very Bad Man\", \"288\"},\n    []string{\"C\", \"The Ugly\", \"120\"},\n    []string{\"D\", \"The Gopher\", \"800\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Sign\", \"Rating\"})\ntable.SetCaption(true, \"Movie ratings.\")\n\nfor _, v := range data {\n    table.Append(v)\n}\ntable.Render() // Send output\n\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Ginkgo\nDESCRIPTION: Command to execute all E2E tests using the Ginkgo testing framework.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/e2e/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nginkgo\n```\n\n----------------------------------------\n\nTITLE: Querying Request Inbound Rate - Prometheus - JSONiq\nDESCRIPTION: Calculates the per-second inbound request rate for each gRPC service for a specific job ('foo'), using Prometheus metric 'grpc_server_started_total' over a 1-minute window. This omits the grpc_method dimension, summing requests across all methods within each service. Useful for high-level request rate monitoring and capacity planning.\nDependencies: Prometheus instance scraped with gRPC metrics, JSONiq for structuring the query. Key parameter: 'job'. Input: Prometheus time-series; Output: gRPC service-level request rates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JSONiq\nCODE:\n```\nsum(rate(grpc_server_started_total{job=\\\"foo\\\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Manually Selecting Terminal Profile in Go\nDESCRIPTION: This Go snippet shows how to initialize a `termenv.Output` object while manually specifying the desired terminal profile (e.g., `termenv.TrueColor`), overriding the automatic detection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\noutput := termenv.NewOutput(os.Stdout, termenv.WithProfile(termenv.TrueColor))\n```\n\n----------------------------------------\n\nTITLE: GoDotEnv Autoload Usage\nDESCRIPTION: Example of using the autoload feature to automatically load .env file on import.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"github.com/joho/godotenv/autoload\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time in Go\nDESCRIPTION: This example shows how to use the humanize.Time() function to convert a time.Time instance into a human-readable relative time string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"This was touched %s.\", humanize.Time(someTimeInstance)) // This was touched 7 hours ago.\n```\n\n----------------------------------------\n\nTITLE: Core System Call Function Signatures in Assembly\nDESCRIPTION: Defines three main system call entry points for handling different numbers of arguments and scheduler interaction. These functions must be implemented for each GOOS/GOARCH pair in assembly.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Removing Select All Option in Survey\nDESCRIPTION: Demonstrates how to remove the select all option from multi-select prompts using WithRemoveSelectAll.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_15\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/AlecAivazis/survey/v2\"\n)\n\nnumber := \"\"\nprompt := &survey.Input{\n    Message: \"This question has the select all option removed\",\n}\n\nsurvey.AskOne(prompt, &number, survey.WithRemoveSelectAll())\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Go import statement to include the Cobra library in a Go application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: YAML Binary Data Examples\nDESCRIPTION: Examples showing correct and incorrect ways to handle binary data in YAML when using this library. Binary data should not use the !!binary tag to maintain JSON compatibility.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nBAD:\n\texampleKey: !!binary gIGC\n\nGOOD:\n\texampleKey: gIGC\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes PersistentVolume for DevPod\nDESCRIPTION: YAML definition for a 1Gi PersistentVolume that will be used by DevPod containers, using a hostPath volume type.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: devpod-pv\n  labels:\n    type: devpod\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/home/dev/devpods/share\"\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with JMESPath in Go\nDESCRIPTION: Demonstrates how to use the jmespath.Search function to query JSON data. It shows how to unmarshal JSON data and apply a JMESPath expression to extract specific information.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\n```\n\n----------------------------------------\n\nTITLE: Blending Colors in Different Color Spaces using Go\nDESCRIPTION: This Go code demonstrates blending between two colors (#fdffcc and #242a42) using various algorithms (HSV, LUV, RGB, LAB, HCL) from the `go-colorful` library. It creates an image visualizing the gradients produced by each blending method in distinct horizontal bands. Dependencies include `fmt`, `github.com/lucasb-eyer/go-colorful`, `image`, `image/draw`, `image/png`, and `os`. Commented-out lines provide alternative colors that might produce invalid RGB values during CIE space blending and show how to use `.Clamped()` to fix them.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"github.com/lucasb-eyer/go-colorful\"\nimport \"image\"\nimport \"image/draw\"\nimport \"image/png\"\nimport \"os\"\n\nfunc main() {\n    blocks := 10\n    blockw := 40\n    img := image.NewRGBA(image.Rect(0,0,blocks*blockw,200))\n\n    c1, _ := colorful.Hex(\"#fdffcc\")\n    c2, _ := colorful.Hex(\"#242a42\")\n\n    // Use these colors to get invalid RGB in the gradient.\n    //c1, _ := colorful.Hex(\"#EEEF61\")\n    //c2, _ := colorful.Hex(\"#1E3140\")\n\n    for i := 0 ; i < blocks ; i++ {\n        draw.Draw(img, image.Rect(i*blockw,  0,(i+1)*blockw, 40), &image.Uniform{c1.BlendHsv(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw, 40,(i+1)*blockw, 80), &image.Uniform{c1.BlendLuv(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw, 80,(i+1)*blockw,120), &image.Uniform{c1.BlendRgb(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw,120,(i+1)*blockw,160), &image.Uniform{c1.BlendLab(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw,160,(i+1)*blockw,200), &image.Uniform{c1.BlendHcl(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n\n        // This can be used to \"fix\" invalid colors in the gradient.\n        //draw.Draw(img, image.Rect(i*blockw,160,(i+1)*blockw,200), &image.Uniform{c1.BlendHcl(c2, float64(i)/float64(blocks-1)).Clamped()}, image.Point{}, draw.Src)\n    }\n\n    toimg, err := os.Create(\"colorblend.png\")\n    if err != nil {\n        fmt.Printf(\"Error: %v\", err)\n        return\n    }\n    defer toimg.Close()\n\n    png.Encode(toimg, img)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Width and Height in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to set minimum width and height for a styled element in Lip Gloss.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    SetString(\"What's for lunch?\").\n    Width(24).\n    Height(32).\n    Foreground(lipgloss.Color(\"63\"))\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Lists - CEL String Extension - Pseudocode\nDESCRIPTION: Describes the 'split' method, which splits a string on a given separator string, with optional count limiting the number of splits. A limit of zero returns an empty list; one returns the original string. Negative limits behave as unlimited splits. Returns a list of strings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_22\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.split(<string>) -> <list<string>>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.split(<string>, <int>) -> <list<string>>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello hello'.split(' ')     // returns ['hello', 'hello', 'hello']\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello hello'.split(' ', 0)  // returns []\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello hello'.split(' ', 1)  // returns ['hello hello hello']\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello hello'.split(' ', 2)  // returns ['hello', 'hello hello']\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello hello'.split(' ', -1) // returns ['hello', 'hello', 'hello']\n```\n\n----------------------------------------\n\nTITLE: Generating Command Documentation for DevPod\nDESCRIPTION: Command to generate documentation for DevPod CLI commands by running a Go script from the main project directory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../ # main project directory\ngo run -mod=vendor ./hack/gen-docs.go\n```\n\n----------------------------------------\n\nTITLE: Using GinkgoLabelFilter for programmatic label matching in Go\nDESCRIPTION: Example demonstrating how to use GinkgoLabelFilter() and Label().MatchesLabelFilter() to programmatically check if labels match the configured --label-filter, allowing conditional test setup based on labels.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBeforeSuite(func() {\n\tif Label(\"slow\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do slow setup\n\t}\n\n\tif Label(\"fast\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do fast setup\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Color to Different Spaces (Go)\nDESCRIPTION: Shows how to convert an existing `colorful.Color` object (named `c`) back into various color space representations. It demonstrates calling methods like `Hex()`, `Hsv()`, `Xyz()`, `Xyy()`, `Lab()`, `Luv()`, and `Hcl()` to retrieve the color's components in the respective spaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhex := c.Hex()\nh, s, v := c.Hsv()\nx, y, z := c.Xyz()\nx, y, Y := c.Xyy()\nl, a, b := c.Lab()\nl, u, v := c.Luv()\nh, c, l := c.Hcl()\n```\n\n----------------------------------------\n\nTITLE: Glob Function Implementation in Go\nDESCRIPTION: Function that returns names of all files matching a pattern in a filesystem.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Glob(fsys fs.FS, pattern string, opts ...GlobOption) ([]string, error)\n```\n\n----------------------------------------\n\nTITLE: Importing the mutate package in Go\nDESCRIPTION: This code snippet shows how to import the mutate package from the go-containerregistry library. It's used to access the mutation functions for container images and layers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/mutate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/google/go-containerregistry/pkg/v1/mutate\"\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod CLI on MacOS Intel/AMD\nDESCRIPTION: This command downloads the DevPod CLI for MacOS AMD64, installs it in /usr/local/bin, and removes the temporary file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o devpod \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-darwin-amd64\" && sudo install -c -m 0755 devpod /usr/local/bin && rm -f devpod\n```\n\n----------------------------------------\n\nTITLE: Setting Don't Fragment (DF) Bit in Go\nDESCRIPTION: Go code snippet showing how to enable the \"Don't Fragment\" (DF) bit in the IP header for outgoing ICMP packets using `pinger.SetDoNotFragment(true)`. This requests that routers along the path do not fragment the packet if it exceeds the Maximum Transmission Unit (MTU) of a link, instead dropping it and potentially sending an ICMP error. This is equivalent to `ping -Mdo` on Linux.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npinger.SetDoNotFragment(true)\n```\n\n----------------------------------------\n\nTITLE: Package Reference for Scheme Builder\nDESCRIPTION: Import path reference for the scheme package in controller-runtime, used for registering Go types with Kubernetes group-version-kinds.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/FAQ.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsigs.k8s.io/controller-runtime/pkg/scheme\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Go Struct to CBOR with Struct Tags\nDESCRIPTION: Demonstrates how to use struct tags to reduce the encoded size of structs. This example shows encoding a 3-level nested Go struct to 1 byte CBOR, compared to 18 bytes in JSON.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Example encoding nested struct (with omitempty tag)\n// - encoding/json:  18 byte JSON\n// - fxamacker/cbor:  1 byte CBOR\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing D-Bus Go Library\nDESCRIPTION: Command to install the D-Bus Go library using go get. Requires Go 1.12 or later.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/godbus/dbus/v5/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/godbus/dbus/v5\n```\n\n----------------------------------------\n\nTITLE: Azure ACR Authentication Helper Implementation\nDESCRIPTION: Implementation of ACR credential helper authentication using docker-credential-acr-env.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/chrismellard/docker-credential-acr-env/pkg/credhelper\"\n\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\t// ...\n\tacrHelper := credhelper.NewACRCredentialsHelper()\n\timg, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.NewKeychainFromHelper(acrHelper)))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Trim Function in CEL\nDESCRIPTION: Removes leading and trailing whitespace from a string. Uses the Unicode definition of whitespace which does not include zero-width spaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_24\n\nLANGUAGE: cel\nCODE:\n```\n'  \\ttrim\\n    '.trim() // returns 'trim'\n```\n\n----------------------------------------\n\nTITLE: Applying Colors using termenv in Go\nDESCRIPTION: This Go code demonstrates applying foreground and background colors to a string using `termenv`. It showcases using hex color codes (`#abcdef`), ANSI color codes (`\"69\"`), and the standard `color.Color` interface. Colors automatically degrade based on the terminal's detected profile. The styled string implements the `fmt.Stringer` interface for easy printing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ns := output.String(\"Hello World\")\n\n// Supports hex values\n// Will automatically degrade colors on terminals not supporting RGB\ns.Foreground(output.Color(\"#abcdef\"))\n// but also supports ANSI colors (0-255)\ns.Background(output.Color(\"69\"))\n// ...or the color.Color interface\ns.Foreground(output.FromColor(color.RGBA{255, 128, 0, 255}))\n\n// Combine fore- & background colors\ns.Foreground(output.Color(\"#ffffff\")).Background(output.Color(\"#0000ff\"))\n\n// Supports the fmt.Stringer interface\nfmt.Println(s)\n```\n\n----------------------------------------\n\nTITLE: Using String Substring Function in CEL\nDESCRIPTION: Returns a substring by specifying character positions with 0-based indices. Start index is inclusive, end index is exclusive. The end index can be omitted to extract from start to the end of string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_23\n\nLANGUAGE: cel\nCODE:\n```\n'tacocat'.substring(4)    // returns 'cat'\n'tacocat'.substring(0, 4) // returns 'taco'\n'tacocat'.substring(-1)   // error\n'tacocat'.substring(2, 1) // error\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-Go Package in Go Code\nDESCRIPTION: This code snippet shows how to import the jwt-go package in a Go program. It allows the use of JWT functionality provided by the library in the code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/golang-jwt/jwt/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v4\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with V-levels\nDESCRIPTION: Examples demonstrating V-level conditional logging functionality in klog\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Complete Colors in Lip Gloss (Go)\nDESCRIPTION: Shows how to use CompleteColor to specify exact values for True Color, ANSI256, and ANSI color profiles.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.CompleteColor{TrueColor: \"#0000FF\", ANSI256: \"86\", ANSI: \"5\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Color Scheme using Bash\nDESCRIPTION: These two Bash commands query the terminal emulator for its current default foreground (OSC 10) and background (OSC 11) colors. The `?` parameter requests the current setting. The terminal is expected to respond by printing the color escape sequences (e.g., `\\033]10;rgb:xxxx/xxxx/xxxx\\007`). The sequence is terminated by `\\033\\\\` (ST - String Terminator).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]10;?\\033\\\\\"\necho -ne \"\\033]11;?\\033\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Ginkgo Recursively in Subdirectories using Shell\nDESCRIPTION: Invokes the Ginkgo test runner recursively on all packages within the current directory and its subdirectories, similar to how 'go test ./...' behaves. This allows testing multiple packages in a project with a single command. Added in version 1.3.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nginkgo ./...\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Cursor Position using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (CSI 6n, DSR - Device Status Report) to request the current cursor position from the terminal emulator. The terminal is expected to respond on standard input with a sequence like `\\033[R;C R`, where R is the row and C is the column.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033[6n\"\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operations in CEL\nDESCRIPTION: Various mathematical functions and macros for operations like finding greatest/least values, bitwise operations, rounding, and numerical checks.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cel\nCODE:\n```\nmath.greatest(<arg>, ...) -> <double|int|uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.least(<arg>, ...) -> <double|int|uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitOr(<int>, <int>) -> <int>\nmath.bitOr(<uint>, <uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitAnd(<int>, <int>) -> <int>\nmath.bitAnd(<uint>, <uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitXor(<int>, <int>) -> <int>\nmath.bitXor(<uint>, <uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitNot(<int>) -> <int>\nmath.bitNot(<uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitShiftLeft(<int>, <int>) -> <int>\nmath.bitShiftLeft(<uint>, <int>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.bitShiftRight(<int>, <int>) -> <int>\nmath.bitShiftRight(<uint>, <int>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.ceil(<double>) -> <double>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.floor(<double>) -> <double>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.round(<double>) -> <double>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.trunc(<double>) -> <double>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.abs(<double>) -> <double>\nmath.abs(<int>) -> <int>\nmath.abs(<uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.sign(<double>) -> <double>\nmath.sign(<int>) -> <int>\nmath.sign(<uint>) -> <uint>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.isInf(<double>) -> <bool>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.isNaN(<double>) -> <bool>\n```\n\nLANGUAGE: cel\nCODE:\n```\nmath.isFinite(<double>) -> <bool>\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with Ambient Profile\nDESCRIPTION: Purges existing Istio installation and installs a fresh copy with ambient profile enabled.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nistioctl uninstall --purge -y\n\nistioctl install -y --set profile=ambient --set meshConfig.accessLogFile=/dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Printing Validation Errors Using gojsonschema in Go\nDESCRIPTION: Shows how to check if validation succeeded and how to print all schema validation errors when present. Inputs are the validation result object. Outputs errors to stdout. Returns human-readable messages for all validation failures.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n    if result.Valid() {\n    \tfmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\")\n        for _, err := range result.Errors() {\n        \t// Err implements the ResultError interface\n            fmt.Printf(\"- %s\\n\", err)\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Querying Unary Request Error Rate - Prometheus - JSONiq\nDESCRIPTION: Computes the per-service rate of unary (1:1) gRPC requests that failed (non-OK status) for job 'foo', by summing the error count rate over a 1-minute interval. This helps monitor unreliability and identify problematic services based on non-OK completion codes.\nDependencies: Prometheus with 'grpc_server_handled_total' metric; requires 'grpc_type' and 'grpc_code' labels. Inputs: time-series data; Outputs: gRPC service error rates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: JSONiq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[1m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Shlex Package\nDESCRIPTION: Command to install the go-shlex package using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/anmitsu/go-shlex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u \"github.com/anmitsu/go-shlex\"\n```\n\n----------------------------------------\n\nTITLE: Enabling WSL2 Feature in Windows\nDESCRIPTION: Command to enable the Windows Subsystem for Linux feature using PowerShell with administrator privileges. This is a prerequisite for installing WSL2 distributions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n----------------------------------------\n\nTITLE: Context Support for slog in Go\nDESCRIPTION: This section describes how to add context support for slog, which is not natively supported. It introduces NewContextWithSlogLogger and FromContextAsSlogLogger functions for storing and retrieving slog.Logger pointers in a context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := NewContextWithSlogLogger(context.Background(), slogLogger)\nlogger := FromContextAsSlogLogger(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapper Interface for Custom Types in Go\nDESCRIPTION: Shows how to implement the Wrapper interface for custom error types to enable full functionality of errwrap package. Includes an example of a custom AppError type and its usage with ContainsType.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n\n// Usage example\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Getting External IP and Setting Up Port Forwarding with GoUPnP in Go\nDESCRIPTION: A function that demonstrates a common Internet gateway use case: determining the router's external IP address and setting up port forwarding. It uses the previously defined PickRouterClient function to obtain a client that works with the available router.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/goupnp/GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc GetIPAndForwardPort(ctx context.Context) error {\n\tclient, err := PickRouterClient(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\texternalIP, err := client.GetExternalIPAddress()\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"Our external IP address is: \", externalIP)\n\n\treturn client.AddPortMapping(\n\t\t\"\",\n\t\t// External port number to expose to Internet:\n\t\t1234,\n\t\t// Forward TCP (this could be \"UDP\" if we wanted that instead).\n\t\t\"TCP\",\n\t\t// Internal port number on the LAN to forward to.\n\t\t// Some routers might not support this being different to the external\n\t\t// port number.\n\t\t1234,\n\t\t// Internal address on the LAN we want to forward to.\n\t\t\"192.168.1.6\",\n\t\t// Enabled:\n\t\ttrue,\n\t\t// Informational description for the client requesting the port forwarding.\n\t\t\"MyProgramName\",\n\t\t// How long should the port forward last for in seconds.\n\t\t// If you want to keep it open for longer and potentially across router\n\t\t// resets, you might want to periodically request before this elapses.\n\t\t3600,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Lists - CEL Extension - Pseudocode\nDESCRIPTION: Specifies the flattening methods for lists, allowing recursive flattening to a single depth or to a given level using an optional integer parameter. Negative depths result in errors. These methods can only be applied to list structures and yield a flattened version as output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_6\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list>.flatten(<list>) -> <list>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list>.flatten(<list>, <int>) -> <list>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,[2,3],[4]].flatten() // return [1, 2, 3, 4]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,[2,[3,4]]].flatten() // return [1, 2, [3, 4]]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,2,[],[],[3,4]].flatten() // return [1, 2, 3, 4]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,[2,[3,[4]]]].flatten(2) // return [1, 2, 3, [4]]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1,[2,[3,[4]]]].flatten(-1) // error\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to a Variable using Var Functions\nDESCRIPTION: Demonstrates binding a flag to a variable using IntVar() function. This approach stores the flag value directly in the provided variable rather than returning a pointer.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Window Title using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (OSC 2) to set the window title of the terminal emulator to \"Test\". The `echo -ne` command sends the sequence `\\033]2;Test\\007`. The `sleep 10` command is appended to pause execution for 10 seconds, keeping the title visible for observation before the shell prompt potentially resets it.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]2;Test\\007\" && sleep 10\n```\n\n----------------------------------------\n\nTITLE: Environment File with Comments\nDESCRIPTION: Example of .env file format supporting comments and export statements.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# I am a comment and that is OK\nSOME_VAR=someval\nFOO=BAR # comments at line end are OK too\nexport BAR=BAZ\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate for Azure AD Authentication\nDESCRIPTION: Commands to generate SSL certificate and private key for application authentication\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out \"example-app.key\" 2048\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -key \"example-app.key\" -subj \"/CN=example-app\" -out \"example-app.csr\"\nopenssl x509 -req -in \"example-app.csr\" -signkey \"example-app.key\" -out \"example-app.crt\" -days 10000\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out \"example-app.pfx\" -inkey \"example-app.key\" -in \"example-app.crt\" -passout pass:\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Options in Go\nDESCRIPTION: Shows how to implement configuration options for declared types using a struct-based approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: PathMatch Function Implementation in Go\nDESCRIPTION: Function that matches a name against a file pattern using system's path separator.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc PathMatch(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package\nDESCRIPTION: Shows basic and aliased import statements for the GoValidator package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Managing DevPod Machines via CLI\nDESCRIPTION: This command allows direct management of all machines across various workspaces in DevPod. It provides access to machine-related operations and information.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/what-are-machines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine\n```\n\n----------------------------------------\n\nTITLE: Using OSC52 Library in Go for Clipboard Operations\nDESCRIPTION: This snippet demonstrates how to use the go-osc52 library to perform various clipboard operations, including copying to system and primary clipboards, querying the clipboard, and clearing it. It also shows how to use the fmt.Stringer interface with the library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aymanbagabas/go-osc52/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"os\"\n  \"fmt\"\n\n  \"github.com/aymanbagabas/go-osc52/v2\"\n)\n\nfunc main() {\n  s := \"Hello World!\"\n\n  // Copy `s` to system clipboard\n  osc52.New(s).WriteTo(os.Stderr)\n\n  // Copy `s` to primary clipboard (X11)\n  osc52.New(s).Primary().WriteTo(os.Stderr)\n\n  // Query the clipboard\n  osc52.Query().WriteTo(os.Stderr)\n\n  // Clear system clipboard\n  osc52.Clear().WriteTo(os.Stderr)\n\n  // Use the fmt.Stringer interface to copy `s` to system clipboard\n  fmt.Fprint(os.Stderr, osc52.New(s))\n\n  // Or to primary clipboard\n  fmt.Fprint(os.Stderr, osc52.New(s).Primary())\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Average Response Stream Size - Prometheus - JSONiq\nDESCRIPTION: Determines the 10-minute average number of messages returned for all server-streaming gRPC RPCs for job 'foo', segmented by service. It computes the ratio between the message sent rate and the started stream rate, which is useful for spotting usage changes or detecting increased stream payload sizes.\nDependencies: Requires the 'grpc_server_msg_sent_total' and 'grpc_server_started_total' metrics with 'grpc_type=server_stream'. Inputs: Prometheus timeseries, Outputs: average stream size per service.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_6\n\nLANGUAGE: JSONiq\nCODE:\n```\nsum(rate(grpc_server_msg_sent_total{job=\\\"foo\\\",grpc_type=\\\"server_stream\\\"}[10m])) by (grpc_service)\n /\nsum(rate(grpc_server_started_total{job=\\\"foo\\\",grpc_type=\\\"server_stream\\\"}[10m])) by (grpc_service)\n```\n\n----------------------------------------\n\nTITLE: Integration with go-fuzz\nDESCRIPTION: Shows how to integrate gofuzz with go-fuzz for fuzz testing functions with specific argument types\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build gofuzz\npackage mypackage\n\nimport fuzz \"github.com/google/gofuzz\"\n\nfunc Fuzz(data []byte) int {\n        var i int\n        fuzz.NewFromGoFuzz(data).Fuzz(&i)\n        MyFunc(i)\n        return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Vetting Go Source Code with go vet - Shell\nDESCRIPTION: Runs 'go vet' on all packages within and below the current project directory. Checks Go source code for possible errors or suspicious constructs as recommended before finalizing contributions. Requires Go installed and project source structure compatible with Go tools.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo vet ./...\n```\n\n----------------------------------------\n\nTITLE: Context-Based Trace Management in Go\nDESCRIPTION: Demonstrates how to use context.Context for managing nested traces, including creating child traces and propagating trace context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething(ctx context.Context) {\n    opTrace := trace.FromContext(ctx).Nest(\"operation\") // create a trace, possibly nested\n    ctx = trace.ContextWithTrace(ctx, opTrace) // make this trace the parent trace of the context\n    defer opTrace.LogIfLong(50 * time.Millisecond)\n    \n    doSomethingElse(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Shell Commands with Go-Shlex\nDESCRIPTION: A Go example demonstrating how to use the go-shlex library to split a shell command string into individual arguments while preserving quoted strings and handling escape characters.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/anmitsu/go-shlex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/anmitsu/go-shlex\"\n)\n\nfunc main() {\n    cmd := `cp -Rdp \"file name\" 'file name2' dir\\ name`\n    words, err := shlex.Split(cmd, true)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, w := range words {\n        fmt.Println(w)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator in Go\nDESCRIPTION: Shows how to add a custom validator to the TagMap for struct validation. The example demonstrates adding a 'duck' validator that checks if a string equals 'duck'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in CEL\nDESCRIPTION: Functions for encoding bytes to base64-encoded strings and decoding base64-encoded strings to bytes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cel\nCODE:\n```\nbase64.decode(<string>) -> <bytes>\n```\n\nLANGUAGE: cel\nCODE:\n```\nbase64.decode('aGVsbG8=')  // return b'hello'\nbase64.decode('aGVsbG8')   // error\n```\n\nLANGUAGE: cel\nCODE:\n```\nbase64.encode(<bytes>)  -> <string>\n```\n\nLANGUAGE: cel\nCODE:\n```\nbase64.encode(b'hello') // return 'aGVsbG8='\n```\n\n----------------------------------------\n\nTITLE: Updating a DevPod Provider from URL\nDESCRIPTION: Updates a provider using a direct URL to a provider.yaml file. Useful when the provider configuration is hosted on a web server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/update-provider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider update <provider-name> http://path/to/my/provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Privileged Mode for Pinger in Go\nDESCRIPTION: Go code snippet showing how to configure the `pro-bing` pinger to use privileged mode by calling `pinger.SetPrivileged(true)`. This attempts to use raw sockets, which might be necessary on systems where unprivileged ping is not enabled (like default Linux) or not supported (like Windows). On Linux, this typically requires root privileges or the `cap_net_raw` capability.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npinger.SetPrivileged(true)\n```\n\n----------------------------------------\n\nTITLE: Using go-strcase to Convert CamelCase to SnakeCase\nDESCRIPTION: A simple example demonstrating how to use the go-strcase package to convert a string from camel case to snake case format. The example imports the package and uses the SnakeCase function to perform the conversion.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/stoewer/go-strcase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stoewer/go-strcase\"\n\nvar snake = strcase.SnakeCase(\"CamelCase\")\n```\n\n----------------------------------------\n\nTITLE: Legacy approach for helper functions with WithOffset in Go\nDESCRIPTION: Example showing the older approach of using WithOffset to prevent helper functions from appearing in the failure stack trace. This method becomes unwieldy when nesting multiple helper functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc helper(model Model) {\n    Expect(model).WithOffset(1).To(BeValid())\n    Expect(model.SerialNumber).WithOffset(1).To(MatchRegexp(/[a-f0-9]*/))\n}\n```\n\n----------------------------------------\n\nTITLE: Committing, Pushing, and Creating GitHub Release (Git/gh)\nDESCRIPTION: This sequence of commands is used to finalize a release. It first commits any staged changes with a version tag message (e.g., \"vM.m.p\"), then pushes the commit to the remote repository ('origin'). Subsequently, it uses the GitHub CLI (`gh`) to create a new release tagged with the specified version on GitHub. Finally, it fetches updated tags from the remote origin to ensure the local repository is synchronized. Requires `git` and `gh` CLI tools to be installed and configured.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"vM.m.p\"\ngit push\ngh release create \"vM.m.p\"\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod via nix-on-droid Command\nDESCRIPTION: Command to install DevPod using nix-on-droid on Android platforms with additional experimental features enabled.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/mobile-support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix shell nixpkgs#devpod --extra-experimental-features nix-command --extra-experimental-features flakes\n```\n\n----------------------------------------\n\nTITLE: Custom Fuzzing Logic Implementation\nDESCRIPTION: Demonstrates implementing custom fuzzing logic for complex types with conditional field population\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MyEnum string\nconst (\n        A MyEnum = \"A\"\n        B MyEnum = \"B\"\n)\ntype MyInfo struct {\n        Type MyEnum\n        AInfo *string\n        BInfo *string\n}\n\nf := fuzz.New().NilChance(0).Funcs(\n        func(e *MyInfo, c fuzz.Continue) {\n                switch c.Intn(2) {\n                case 0:\n                        e.Type = A\n                        c.Fuzz(&e.AInfo)\n                case 1:\n                        e.Type = B\n                        c.Fuzz(&e.BInfo)\n                }\n        },\n)\n\nvar myObject MyInfo\nf.Fuzz(&myObject) // Type will correspond to whether A or B info is set.\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application with Secret\nDESCRIPTION: Azure CLI commands to register a new application with secret credentials and create a service principal\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz ad app create \\\n   --display-name example-app \\\n   --homepage https://example-app/home \\\n   --identifier-uris https://example-app/app \\\n   --password secret\n```\n\n----------------------------------------\n\nTITLE: Using Custom Format in JSON Schema\nDESCRIPTION: Shows how to use a custom format ('role') in a JSON schema after defining and adding the custom format checker to gojsonschema.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"string\", \"format\": \"role\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Config Structure in Go\nDESCRIPTION: Defines the basic structure for configuration types using an unexported config struct that holds configuration options.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fake Credential Helper - Bash\nDESCRIPTION: Implements a simple Docker credential helper as a bash script that outputs static, hard-coded credential values in JSON format. This helper is useful for debugging authentication issues by providing predictable inputs and removing external dependencies. No external tools or dependencies are required; the script expects to be invoked by Docker or a compatible client, and outputs JSON containing 'Username' and 'Secret' values.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\necho '{\"Username\":\"<token>\",\"Secret\":\"hunter2\"}'\n\n```\n\n----------------------------------------\n\nTITLE: Structured Commit Message Format for DevPod Project\nDESCRIPTION: This snippet outlines the formal structure for commit messages in the DevPod project. It specifies the format for the subject line, body, and footer of the commit message.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Fuzzed Values for Nested Structs in Go\nDESCRIPTION: Shows how the Consumer can handle nested struct types, automatically filling all fields at any nesting level with appropriate fuzzed values.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PersonI struct {\n    Name       string\n    Age        int\n    BestFriend PersonII\n}\ntype PersonII struct {\n    Name string\n    Age  int\n}\np := PersonI{}\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Redirecting Output to go-ansi for Windows Compatibility in Go\nDESCRIPTION: This snippet demonstrates how to use `go-ansi` to enable ANSI escape sequence features (like colors) from other Go libraries (`fatih/color`, `mitchellh/colorstring`) on Windows. It achieves this by redirecting the output of these libraries to `ansi.NewAnsiStdout()`, which handles the translation of ANSI codes to Windows API calls.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/k0kubun/go-ansi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\ncolor.Output = ansi.NewAnsiStdout()\ncolor.Cyan(\"fatih/color\")\n\ncolorstring.Fprintln(ansi.NewAnsiStdout(), \"[green]mitchellh/colorstring\")\n```\n```\n\n----------------------------------------\n\nTITLE: Struct Field and Method Access in Gval\nDESCRIPTION: Example of accessing struct fields and methods in a Gval expression. This demonstrates how to work with struct types in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfoo.Hello + foo.World()\n```\n\n----------------------------------------\n\nTITLE: Installing GoDotEnv Library and CLI\nDESCRIPTION: Commands for installing GoDotEnv as either a library dependency or command-line tool, with different instructions for Go versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/joho/godotenv\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/joho/godotenv/cmd/godotenv@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/joho/godotenv/cmd/godotenv\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Exit Handlers with Logrus in Go\nDESCRIPTION: This brief Go snippet shows how to register an exit handler with Logrus that will be invoked before the process exits upon logging a fatal event. The handler can be used for cleanup or shutdown routines and is registered via RegisterExitHandler. This code assumes Logrus ('logrus') has been imported and a handler function is defined.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n...\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n...\n```\n\n----------------------------------------\n\nTITLE: Tidying and Vendoring Go Dependencies (Bash)\nDESCRIPTION: Shows how to use `go mod tidy` to update the `go.mod` and `go.sum` files and `go mod vendor` to copy the required dependencies into the `vendor/` directory after using `go get`. The `GO111MODULE=on` environment variable ensures module mode is active, though it might be omitted if not in GOPATH.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod Documentation Dependencies with Yarn\nDESCRIPTION: Command to install the required dependencies for the DevPod documentation website using Yarn package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Implementing FilepathGlob Function in Go\nDESCRIPTION: FilepathGlob returns files matching a pattern, ignoring I/O errors by default. It's a drop-in replacement for filepath.Glob() with additional features.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc FilepathGlob(pattern string, opts ...GlobOption) (matches []string, err error)\n```\n\n----------------------------------------\n\nTITLE: Confirm Field Configuration Example in Go\nDESCRIPTION: Shows how to create a confirmation prompt with custom affirmative and negative responses.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewConfirm().\n    Title(\"Are you sure?\").\n    Affirmative(\"Yes!\").\n    Negative(\"No.\").\n    Value(&confirm)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fuzzing Consumer in Go\nDESCRIPTION: Creates a new Consumer object from a byte array, which will be used to generate fuzzed data. The Consumer manages the state of consumption from the provided bytes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tfuzz \"github.com/AdaLogics/go-fuzz-headers\"\n)\ndata := []byte{'R', 'a', 'n', 'd', 'o', 'm'}\nf := fuzz.NewConsumer(data)\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompt Implementation\nDESCRIPTION: Shows how to create a yes/no confirmation prompt\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nname := false\nprompt := &survey.Confirm{\n    Message: \"Do you like pie?\",\n}\nsurvey.AskOne(prompt, &name)\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Data using json-iterator/go\nDESCRIPTION: This snippet shows how to use `json-iterator/go` for unmarshaling JSON data, replacing the standard library's function. It imports the library, uses the `ConfigCompatibleWithStandardLibrary` configuration, and calls the `Unmarshal` method with the input byte slice and the target Go variable. This is intended to be a faster alternative.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n```\n\n----------------------------------------\n\nTITLE: Standard Git Workflow for Contributions (Shell)\nDESCRIPTION: Illustrates the typical Git command sequence for making contributions. It involves creating a new feature branch, editing files, updating the CHANGELOG.md, running linters and tests via `make precommit`, interactively staging changes (`git add -p`), committing the changes, and pushing the branch to the user's fork (using the remote added previously). Placeholders `<YOUR_BRANCH_NAME>` and `<YOUR_FORK>` must be replaced.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings for Shell Scripts\nDESCRIPTION: Gitattributes configuration to force LF line endings for shell scripts, preventing the '$\\r': command not found error that occurs when Windows CRLF line endings are used.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/troubleshooting/windows-troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.sh eol=lf\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code Browser in DevPod Workspace\nDESCRIPTION: This command starts a DevPod workspace and opens it in VS Code browser using openvscode-server. It allows specifying a custom openvscode version.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/connect-to-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --ide openvscode\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace --ide openvscode --ide-option VERSION=v1.76.2\n```\n\n----------------------------------------\n\nTITLE: Installing the errors Package\nDESCRIPTION: Command to install the pkg/errors package using Go's package management system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pkg/errors\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Implementation\nDESCRIPTION: Demonstrates how to implement custom filtering logic for select and multiselect prompts\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc myFilter(filterValue string, optValue string, optIndex int) bool {\n    // only include the option if it includes the filter and has length greater than 5\n    return strings.Contains(optValue, filterValue) && len(optValue) >= 5\n}\n\n// configure it for a specific prompt\n&Select{\n    Message: \"Choose a color:\",\n    Options: []string{\"red\", \"blue\", \"green\"},\n    Filter: myFilter,\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Struct Definition\nDESCRIPTION: Type definition for the Logger struct that implements io.WriteCloser. Includes configuration fields for filename, size limits, rotation settings, and compression options.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Logger struct {\n    // Filename is the file to write logs to.  Backup log files will be retained\n    // in the same directory.  It uses <processname>-lumberjack.log in\n    // os.TempDir() if empty.\n    Filename string `json:\"filename\" yaml:\"filename\"`\n\n    // MaxSize is the maximum size in megabytes of the log file before it gets\n    // rotated. It defaults to 100 megabytes.\n    MaxSize int `json:\"maxsize\" yaml:\"maxsize\"`\n\n    // MaxAge is the maximum number of days to retain old log files based on the\n    // timestamp encoded in their filename.  Note that a day is defined as 24\n    // hours and may not exactly correspond to calendar days due to daylight\n    // savings, leap seconds, etc. The default is not to remove old log files\n    // based on age.\n    MaxAge int `json:\"maxage\" yaml:\"maxage\"`\n\n    // MaxBackups is the maximum number of old log files to retain.  The default\n    // is to retain all old log files (though MaxAge may still cause them to get\n    // deleted.)\n    MaxBackups int `json:\"maxbackups\" yaml:\"maxbackups\"`\n\n    // LocalTime determines if the time used for formatting the timestamps in\n    // backup files is the computer's local time.  The default is to use UTC\n    // time.\n    LocalTime bool `json:\"localtime\" yaml:\"localtime\"`\n\n    // Compress determines if the rotated log files should be compressed\n    // using gzip. The default is not to perform compression.\n    Compress bool `json:\"compress\" yaml:\"compress\"`\n    // contains filtered or unexported fields\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions to Retrieve Flag Values\nDESCRIPTION: Demonstrates using GetInt() helper function to retrieve the value of an integer flag from a FlagSet, which can help manage pointers in code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace with Dotfiles Repository in DevPod CLI\nDESCRIPTION: Command to create a new workspace with a specified dotfiles repository. This will clone the repository and run the default installation script according to DevPod's lookup order.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/dotfiles-in-a-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up https://github.com/example/repo --dotfiles https://github.com/my-user/my-dotfiles-repo\n```\n\n----------------------------------------\n\nTITLE: Using the float16 Package for Basic Conversions in Go\nDESCRIPTION: Demonstrates basic usage of the `float16` package. It shows how to convert a standard Go `float32` (like `math.Pi`) to the package's `Float16` type using `Fromfloat32`, and how to convert it back using the `Float32()` method. It also illustrates conditionally converting a `float32` only if the conversion is exact and the input is not subnormal, using `PrecisionFromfloat32` for a faster check. Requires importing `math` and `github.com/x448/float16`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/x448/float16/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Convert float32 to float16\npi := float32(math.Pi)\npi16 := float16.Fromfloat32(pi)\n\n// Convert float16 to float32\npi32 := pi16.Float32()\n\n// PrecisionFromfloat32() is faster than the overhead of calling a function.\n// This example only converts if there's no data loss and input is not a subnormal.\nif float16.PrecisionFromfloat32(pi) == float16.PrecisionExact {\n    pi16 := float16.Fromfloat32(pi)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale in gojsonschema (Go)\nDESCRIPTION: Demonstrates how to set a custom locale for error messages in gojsonschema. This allows for customization of error strings returned by the library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.Locale = YourCustomLocale{}\n```\n\n----------------------------------------\n\nTITLE: Setting DevPod Provider Options During Addition\nDESCRIPTION: This command demonstrates how to set provider options when adding a new provider using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add <provider-name> -o KEY=value\n```\n\n----------------------------------------\n\nTITLE: Using Locker for Named Synchronization in Go\nDESCRIPTION: This Go snippet demonstrates how to use the github.com/moby/locker package to implement fine-grained locking for resources identified by a name. It defines a struct that holds a Locker instance and a concurrent map and shows how to properly lock and unlock by name using Locker's Lock and Unlock methods. A global mutex ensures safe modification of shared data, while Locker manages contention on individual resource names. Dependencies: go module, github.com/moby/locker, sync, and time packages. The main functions are Get (to read data for a name), Create (to create data with per-name and global locking), and createImportant (simulated long-running work).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/moby/locker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage important\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/moby/locker\"\n)\n\ntype important struct {\n\tlocks *locker.Locker\n\tdata  map[string]interface{}\n\tmu    sync.Mutex\n}\n\nfunc (i *important) Get(name string) interface{} {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\treturn i.data[name]\n}\n\nfunc (i *important) Create(name string, data interface{}) {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\n\ti.createImportant(data)\n\n\ti.mu.Lock()\n\ti.data[name] = data\n\ti.mu.Unlock()\n}\n\nfunc (i *important) createImportant(data interface{}) {\n\ttime.Sleep(10 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Off Git Commits\nDESCRIPTION: Demonstrates the required format for signing off a Git commit message using the Developer Certificate of Origin (DCO). This line certifies the contributor agrees to the DCO terms. Using 'git commit -s' can automate this if user.name and user.email are configured.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version of DevPod Documentation\nDESCRIPTION: Command to create a new version of the DevPod documentation using Docusaurus versioning system, with 0.1 as an example version number.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run docusaurus docs:version 0.1\n```\n\n----------------------------------------\n\nTITLE: Editor Prompt Implementation\nDESCRIPTION: Shows how to launch an external editor for collecting input with syntax highlighting support\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nprompt := &survey.Editor{\n    Message: \"Shell code snippet\",\n    FileName: \"*.sh\",\n}\n\nsurvey.AskOne(prompt, &content)\n```\n\n----------------------------------------\n\nTITLE: Installing PTY Package via Go\nDESCRIPTION: Command to install the pty package using go get.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/creack/pty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/creack/pty\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Block with Reusable zstd Encoder in Go\nDESCRIPTION: Illustrates block compression using the `EncodeAll` method on a reusable `zstd.Encoder`. An encoder is created once with `zstd.NewWriter(nil)` and reused for multiple `EncodeAll` calls, improving performance by avoiding repeated allocations, especially beneficial for many small blocks. The example shows compressing a byte slice (`src`) into a destination slice, suggesting pre-allocation (`make([]byte, 0, len(src))`) to further minimize allocations during the `EncodeAll` call. Requires importing `github.com/klauspost/compress/zstd`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n} \n```\n\n----------------------------------------\n\nTITLE: Reading Small /sys Files in Go (Go)\nDESCRIPTION: Example Go code for reading small files common in the `/sys` filesystem (like battery capacity) using the internal `util.SysReadFile` function. This function is optimized for reading small files without prior size checks. Requires the project's `util` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Force Deleting a Workspace via DevPod CLI\nDESCRIPTION: Command to force delete a workspace when regular deletion fails. This removes the workspace only on the DevPod side locally and ignores provider errors, potentially leaving resources behind.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/delete-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod delete my-workspace --force\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom DevContainer Path in DevPod CLI\nDESCRIPTION: Command to start a DevPod workspace with a specific devcontainer.json file path. This allows using configuration files located outside the standard locations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/devcontainer-json.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up github.com/my-org/my-repo --devcontainer-path ./my-git-path-to/a-devcontainer-json-file.json\n```\n\n----------------------------------------\n\nTITLE: Installing gofrs/flock via go get (Bash)\nDESCRIPTION: This snippet demonstrates how to install the gofrs/flock library using go get. This command downloads and updates the flock package and its dependencies in the user's Go workspace. No additional parameters are required. Running the command ensures the package is available for import in subsequent Go code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gofrs/flock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/gofrs/flock\n```\n\n----------------------------------------\n\nTITLE: Word Segmentation with FirstWordInString in Go\nDESCRIPTION: Demonstrates the use of FirstWordInString to perform word segmentation on a text string, breaking it into individual word units.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Setting Up nlmon for Netlink Traffic Capture using Bash\nDESCRIPTION: This bash snippet demonstrates the process of loading the nlmon kernel module, adding a new nlmon interface, and setting it up for live netlink traffic capture. These steps are prerequisites for monitoring netlink messages using tools like Wireshark or tcpdump. The commands require root privileges and are intended for debugging and troubleshooting low-level network communication, especially in high-traffic or complex environments.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/jsimonetti/rtnetlink/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# modprobe nlmon\\n# ip link add type nlmon\\n# ip link set nlmon0 up\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidatePattern Function in Go\nDESCRIPTION: ValidatePattern checks if a given pattern is valid. It's useful for validating user-input patterns before execution. This function assumes '/' as the path separator.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Installing machineid library using Go\nDESCRIPTION: Command to install the machineid library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/denisbrodbeck/machineid\n```\n\n----------------------------------------\n\nTITLE: Calculating Monospace Width of a String in Go\nDESCRIPTION: Example of determining the width of a string when displayed in a monospace font, accounting for multi-cell characters.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Fields Behavior\nDESCRIPTION: Example showing how to set default validation behavior for struct fields using init function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Machine ID on Linux\nDESCRIPTION: Bash commands to retrieve the machine ID on Linux systems.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat /var/lib/dbus/machine-id\n# or when not found (e.g. Fedora 20)\ncat /etc/machine-id\n```\n\n----------------------------------------\n\nTITLE: Select Field Configuration Example in Go\nDESCRIPTION: Shows how to create a single-select field with multiple options.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewSelect[string]().\n    Title(\"Pick a country.\").\n    Options(\n        huh.NewOption(\"United States\", \"US\"),\n        huh.NewOption(\"Germany\", \"DE\"),\n        huh.NewOption(\"Brazil\", \"BR\"),\n        huh.NewOption(\"Canada\", \"CA\"),\n    ).\n    Value(&country)\n```\n\n----------------------------------------\n\nTITLE: Text Field Configuration Example in Go\nDESCRIPTION: Demonstrates configuring a multi-line text field with validation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewText().\n    Title(\"Tell me a story.\").\n    Validate(checkForPlagiarism).\n    Value(&story)\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Foreground Color using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (OSC 10) to set the default foreground color of the terminal emulator to blue (#0000ff). The `echo -ne` command sends the sequence without a trailing newline and interprets escape characters. The sequence `\\033]10;` introduces the command, `#0000ff` specifies the color, and `\\007` (BEL) terminates the sequence.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]10;#0000ff\\007\"\n```\n\n----------------------------------------\n\nTITLE: Nested Parameter Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating an expression with a nested parameter (foo.bar > 0). This demonstrates accessing nested object properties in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfoo.bar > 0\n```\n\n----------------------------------------\n\nTITLE: Customizing Survey Icons\nDESCRIPTION: Shows how to customize the icons and their formatting in survey prompts using WithIcons option.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_18\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/AlecAivazis/survey/v2\"\n)\n\nnumber := \"\"\nprompt := &survey.Input{\n    Message: \"If you have this need, please give me a reasonable message.\",\n    Help:    \"I couldn't come up with one.\",\n}\n\nsurvey.AskOne(prompt, &number, survey.WithIcons(func(icons *survey.IconSet) {\n    // you can set any icons\n    icons.Question.Text = \"⁇\"\n    // for more information on formatting the icons, see here: https://github.com/mgutz/ansi#style-format\n    icons.Question.Format = \"yellow+hb\"\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags with Make - Shell\nDESCRIPTION: This command runs the 'add-tags' Makefile target for a specific module set and commit hash, adding the appropriate tags in the Git repository. Dependencies include GNU Make and Git, and both MODSET and COMMIT must be set to valid values. Output depends on the Makefile's internal steps and could include direct tag creation in the repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\\n\n```\n\n----------------------------------------\n\nTITLE: Starting a Stopped Workspace via DevPod CLI\nDESCRIPTION: Command to restart a previously stopped workspace using the DevPod CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/stop-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up my-workspace\n```\n\n----------------------------------------\n\nTITLE: Example Output of Stopped Machine Status\nDESCRIPTION: Sample output from checking the status of a stopped machine, showing it's stopped and can be restarted.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n08:58:58 info Machine '<name-of-machine>' is 'Stopped, you can start it via 'devpod machine start <name-of-machine>''\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests\nDESCRIPTION: This command runs Go tests for the project with specific CPU and timeout settings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Testing Logrus Output in Go with test Hook\nDESCRIPTION: This Go code uses the Logrus test hook to assert the presence and properties of log entries during tests. It demonstrates creating a NullLogger and accessing its entry hook for validation with testify's assert functions. This setup enables test-time introspection of logging behavior, confirming that errors are logged as expected. Required dependencies include Logrus, github.com/sirupsen/logrus/hooks/test, github.com/stretchr/testify/assert, and the Go testing package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating gorilla/csrf with Google App Engine (First-Gen) in Go\nDESCRIPTION: This snippet demonstrates how to integrate the gorilla/csrf middleware with a Go application running on the first-generation Google App Engine runtime. Since first-gen App Engine doesn't allow direct modification of the default http.ServeMux, it shows wrapping a gorilla/mux router with csrf.Protect and then registering it using http.Handle. This approach is unnecessary for second-generation App Engine runtimes (Go 1.11+).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage app\n\n// Remember: appengine has its own package main\nfunc init() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", IndexHandler)\n    // ...\n\n    // We pass our CSRF-protected router to the DefaultServeMux\n    http.Handle(\"/\", csrf.Protect([]byte(your-key))(r))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Server Reflection in Go\nDESCRIPTION: Example showing how to register reflection service on a gRPC server. The code demonstrates importing the reflection package, creating a new gRPC server, registering a service, and enabling reflection before serving.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/reflection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc/reflection\"\n\ns := grpc.NewServer()\npb.RegisterYourOwnServer(s, &server{})\n\n// Register reflection service on gRPC server.\nreflection.Register(s)\n\ns.Serve(lis)\n```\n\n----------------------------------------\n\nTITLE: Running Color Distance Comparison Example (Bash)\nDESCRIPTION: Shows the command to run the Go color distance comparison program (`colordist.go` from the previous snippet) using `go run` and displays the expected output. The output clearly shows that while RGB distances are similar for both color pairs, the CIE-based distances (Lab, Luv, CIE76, CIE94, CIEDE2000) differ significantly, reflecting the perceived visual difference more accurately.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ go run colordist.go\nDistanceRgb:       c1: 0.3803921568627451\tand c2: 0.3858713931171159\nDistanceLab:       c1: 0.32048458312798056\tand c2: 0.24397151758565272\nDistanceLuv:       c1: 0.5134369614199698\tand c2: 0.2568692839860636\nDistanceCIE76:     c1: 0.32048458312798056\tand c2: 0.24397151758565272\nDistanceCIE94:     c1: 0.19799168128511324\tand c2: 0.12207136371167401\nDistanceCIEDE2000: c1: 0.17274551120971166\tand c2: 0.10665210031428465\n```\n\n----------------------------------------\n\nTITLE: JSONPath Integration with Gval\nDESCRIPTION: Example of using JSONPath syntax with Gval to access properties with non-standard names. This demonstrates how to integrate external libraries like JSONPath with Gval.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n$[\"response-time\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Tabs in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to customize tab handling in Lip Gloss, including changing tab width and disabling tab conversion.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle() // tabs will render as 4 spaces, the default\nstyle = style.TabWidth(2)    // render tabs as 2 spaces\nstyle = style.TabWidth(0)    // remove tabs entirely\nstyle = style.TabWidth(lipgloss.NoTabConversion) // leave tabs intact\n```\n\n----------------------------------------\n\nTITLE: Installing the jsonc Go Package using go get (Shell)\nDESCRIPTION: This shell command uses the Go toolchain's `go get` command to download and install the `jsonc` package from its GitHub repository. The `-u` flag ensures that the package is updated to the latest version if it's already present in the Go workspace. This is the standard way to add Go dependencies to a project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tidwall/jsonc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/tidwall/jsonc\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication Middleware in Go with httprouter\nDESCRIPTION: This Go code defines a `BasicAuth` middleware function compatible with `httprouter`. It wraps an existing `httprouter.Handle` and checks for valid Basic Authentication credentials provided in the request headers. If the credentials match the required username and password, the request is passed to the wrapped handler. Otherwise, it responds with a 401 Unauthorized status and sets the `WWW-Authenticate` header to prompt the client for credentials. The `main` function demonstrates applying this middleware to protect a specific route (`/protected/`).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/julienschmidt/httprouter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/julienschmidt/httprouter\"\n)\n\nfunc BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\t// Get the Basic Authentication credentials\n\t\tuser, password, hasAuth := r.BasicAuth()\n\n\t\tif hasAuth && user == requiredUser && password == requiredPassword {\n\t\t\t// Delegate request to the given handle\n\t\t\th(w, r, ps)\n\t\t} else {\n\t\t\t// Request Basic Authentication otherwise\n\t\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=Restricted\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t}\n\t}\n}\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Not protected!\\n\")\n}\n\nfunc Protected(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Protected!\\n\")\n}\n\nfunc main() {\n\tuser := \"gordon\"\n\tpass := \"secret!\"\n\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/protected/\", BasicAuth(Protected, user, pass))\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Git Version Tagging and Push Commands\nDESCRIPTION: Commands used by OWNERS to create and push signed version tags for releases\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Docker Config Auth JSON Example\nDESCRIPTION: Example of Docker config.json file structure for plaintext authentication credentials.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"auths\": {\n\t\t\"registry.example.com\": {\n\t\t\t\"auth\": \"QXp1cmVEaWFtb25kOmh1bnRlcjI=\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: String Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating a string comparison expression. This demonstrates how to compare string values in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttp_response_body == \"service is ok\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Minikube and VS Code on Ubuntu\nDESCRIPTION: Command to update package lists and install git, vim, gpg, and wget which are required for setting up Minikube and VS Code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install git vim gpg wget -y\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Slices in Go with GoValidator's Each Function\nDESCRIPTION: Demonstrates how to use the Each function to iterate over a slice and perform an action on each element.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Documentation with Jekyll and Bundler - Shell\nDESCRIPTION: Builds and serves the Ginkgo documentation website locally for preview. Requires Ruby, Bundler, and Jekyll installed. The first command installs project dependencies defined in the Gemfile; the second serves the documentation at a local web server. Used for previewing changes to docs before submitting.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbundle && bundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Benchmark Commands for xxHash Performance Testing\nDESCRIPTION: Shell commands for running performance benchmarks comparing pure Go and assembly implementations using benchstat.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Server to Accept Environment Variables\nDESCRIPTION: SSH server configuration that allows specific environment variables to be accepted from clients. This entry in sshd_config enables the server to accept the IMAGE_VERSION variable.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/environment-variables-in-devcontainer-json.mdx#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nAcceptEnv IMAGE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing go-colorful Library (Bash)\nDESCRIPTION: Installs the go-colorful library using the standard `go get` command. This command downloads and installs the package into the Go workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/lucasb-eyer/go-colorful\n```\n\n----------------------------------------\n\nTITLE: Unsetting Rules in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to unset previously set rules in Lip Gloss styles.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).                        // make it bold\n    UnsetBold().                       // jk don't make it bold\n    Background(lipgloss.Color(\"227\")). // yellow background\n    UnsetBackground()                  // never mind\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Version and Disabling Autodetection in gojsonschema (Go)\nDESCRIPTION: Illustrates how to set a specific JSON Schema draft version and turn off automatic draft detection in gojsonschema. Requires gojsonschema; inputs are schema loader properties. Useful for strict validation in environments with fixed specification requirements.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Draft = gojsonschema.Draft7\nsl.AutoDetect = false\n\n```\n\n----------------------------------------\n\nTITLE: Using the compressor.Writer in Go\nDESCRIPTION: This snippet shows how to use the `compressor.Writer` from the `muesli/ansi/compressor` subpackage. It initializes a writer that compresses ANSI sequences by removing redundant ones before forwarding the optimized output to `os.Stdout`. It then writes a sample byte slice with ANSI color codes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/ansi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/muesli/ansi/compressor\"\n\nw := compressor.Writer{Forward: os.Stdout}\nw.Write([]byte(\"\\x1b[31mHello, world!\\x1b[0m\"))\nw.Close()\n```\n\n----------------------------------------\n\nTITLE: Importing go-colorful Package (Go)\nDESCRIPTION: Imports the installed go-colorful package into a Go program, making its functions and types available for use. This is the standard way to include external packages in Go.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/lucasb-eyer/go-colorful\"\n```\n\n----------------------------------------\n\nTITLE: Reading Env to Map\nDESCRIPTION: Example of reading environment variables into a map instead of setting them directly.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar myEnv map[string]string\nmyEnv, err := godotenv.Read()\n\ns3Bucket := myEnv[\"S3_BUCKET\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Cursor Color using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (OSC 12) to set the cursor color of the terminal emulator to red (#ff0000). The `echo -ne` command sends the sequence, `\\033]12;` introduces the command, `#ff0000` specifies the color, and `\\007` (BEL) terminates it.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]12;#ff0000\\007\"\n```\n\n----------------------------------------\n\nTITLE: Client-Server State Diagram - Bidirectional Streaming\nDESCRIPTION: ASCII diagram illustrating bidirectional streaming state transitions between client and server, showing remote open/closed flags and data exchange.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-23_snippet_4\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n         +--------+                                    +--------+\n         | Client |                                    | Server |\n         +---+----+                                    +----+---+\n             |             +--------------+                 |\n             >-------------+ Request [RO] +----------------->  \n             |             +--------------+                 |\n             |                                              |\n             |                 +------+                     |\n             >-----------------+ Data +--------------------->  \n             |                 +------+                     |\n             |                                              |\n             |                 +------+                     |\n             <-----------------+ Data +---------------------<\n             |                 +------+                     |\n             |                                              |\n             |                 +------+                     |\n             >-----------------+ Data +--------------------->  \n             |                 +------+                     |\n             |                                              |\n             |               +-----------+                  |\n      local  >---------------+ Data [RC] +------------------> remote\n      closed |               +-----------+                  | closed\n             |                                              |\n             |                 +------+                     |\n             <-----------------+ Data +---------------------<\n             |                 +------+                     |\n             |                                              |\n             |               +-----------+                  |\n    finished <---------------+ Data [RC] +------------------< finished\n             |               +-----------+                  |\n             |                                              |\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for DevPod Documentation\nDESCRIPTION: Command to start a local development server that opens a browser window for live preview of the DevPod documentation website. Changes are reflected without server restart.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Initializing a Static Country Select Field with huh in Go\nDESCRIPTION: This snippet creates a basic country select field using the 'huh' Go package. It sets up a select field with three hardcoded options (United States, Canada, Mexico), binds the selected value to the 'country' variable, and sets a display title. This step establishes a static select input whose selection can be used as a dependency in subsequent dynamic form elements.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewSelect[string]().\n    Options(huh.NewOptions(\"United States\", \"Canada\", \"Mexico\")...).\n    Value(&country).\n    Title(\"Country\").\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod Workspaces with Different IDE Options\nDESCRIPTION: Commands demonstrating how to start a DevPod workspace using different IDE configurations including VS Code browser, desktop VS Code, or no IDE.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/devpod-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start in VS Code browser\ndevpod up github.com/microsoft/vscode-remote-try-node --ide openvscode\n\n# Start in VS Code\ndevpod up github.com/microsoft/vscode-remote-try-node --ide vscode\n\n# Start without IDE\ndevpod up github.com/microsoft/vscode-remote-try-node --ide none\n```\n\n----------------------------------------\n\nTITLE: Deleting a DevPod Machine\nDESCRIPTION: Command to permanently delete a DevPod machine. This operation is non-reversible and will result in data loss.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine delete <name-of-machine>\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go using yaml.v2\nDESCRIPTION: This example demonstrates how to use the yaml.v2 package to marshal Go structs to YAML and unmarshal YAML data into both structs and maps. It shows struct field tagging for renaming and flow style control, as well as error handling for both operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Post-Suite Hook Command with Ginkgo using Shell\nDESCRIPTION: Uses the '-afterSuiteHook' flag to specify an external 'COMMAND' that Ginkgo will execute after the entire test suite has finished running, regardless of success or failure. Useful for cleanup or notification tasks. Introduced in version 1.2.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -afterSuiteHook COMMAND\n```\n\n----------------------------------------\n\nTITLE: Installing Doublestar Package in Go\nDESCRIPTION: Commands to install and import the doublestar package in a Go project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/bmatcuk/doublestar/v4\n```\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/bmatcuk/doublestar/v4\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages in Git for DevPod Project\nDESCRIPTION: This snippet demonstrates the proper format for commit messages in the DevPod project. It includes an example of a well-structured commit message with a subject line, body, and footer.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nscripts: add the test-cluster command\n\nthis uses tmux to setup a test cluster that you can easily kill and\nstart for debugging.\n\nFixes #38\n```\n```\n\n----------------------------------------\n\nTITLE: Getting the netns Package using Go\nDESCRIPTION: This command uses the `go get` tool to download and install the `netns` package from its GitHub repository. This is the standard way to fetch Go dependencies.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/vishvananda/netns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vishvananda/netns\n```\n\n----------------------------------------\n\nTITLE: Building the Go DNS Library using Go tools\nDESCRIPTION: This shell script demonstrates how to download and build the `miekg/dns` library using the standard Go toolchain. The `go get` command fetches the library and its dependencies, while `go build` compiles the package. This assumes a working Go environment is already set up.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/miekg/dns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/miekg/dns\ngo build github.com/miekg/dns\n```\n\n----------------------------------------\n\nTITLE: Installing Ginkgo Locally Using Go - Shell\nDESCRIPTION: Installs the Ginkgo project and its subpackages locally using Go tools. Requires Go to be installed on the user's system. The command fetches and installs all Go packages in and below the current repository, making Ginkgo available for testing and development.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install ./...\n```\n\n----------------------------------------\n\nTITLE: Quick Single Field Input Example in Go\nDESCRIPTION: Demonstrates using a single input field for quick user prompts.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar name string\n\nhuh.NewInput().\n    Title(\"What's your name?\").\n    Value(&name).\n    Run()\n\nfmt.Printf(\"Hey, %s!\\n\", name)\n```\n\n----------------------------------------\n\nTITLE: Using crane and docker with Custom Credential Helpers - Bash\nDESCRIPTION: Shows example commands and expected output when using the 'crane' and 'docker' CLI tools with a credential helper configured to proxy or output credentials. This demonstrates successful integration and provides insight into credential handling by outputting credential JSON to the terminal. Requires 'crane' and/or 'docker' to be installed, with helper configuration set up as previously described; expected output includes credential JSON followed by regular tool output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ crane manifest gcr.io/google-containers/pause > /dev/null\n{\"ServerURL\":\"\",\"Username\":\"_dcgcr_1_5_0_token\",\"Secret\":\"<redacted>\"}\n\n$ docker pull gcr.io/google-containers/pause\nUsing default tag: latest\n{\"ServerURL\":\"\",\"Username\":\"_dcgcr_1_5_0_token\",\"Secret\":\"<redacted>\"}\nlatest: Pulling from google-containers/pause\na3ed95caeb02: Pull complete\n4964c72cd024: Pull complete\nDigest: sha256:a78c2d6208eff9b672de43f880093100050983047b7b0afe0217d3656e1b0d5f\nStatus: Downloaded newer image for gcr.io/google-containers/pause:latest\ngcr.io/google-containers/pause:latest\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Tracing\nDESCRIPTION: Configuration options for enabling tracing and instrumentation in the Azure SDK. Setting environment variables or calling specific functions enables metrics and traces collection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAZURE_SDK_TRACING_ENABLED=true\nOCAGENT_TRACE_EXPORTER_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Color Scheme in Go\nDESCRIPTION: These Go code snippets show how to query the terminal's current color scheme using the initialized `termenv.Output` object. `ForegroundColor()` and `BackgroundColor()` retrieve the terminal's default colors, while `HasDarkBackground()` checks if the background is dark-themed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Returns terminal's foreground color\ncolor := output.ForegroundColor()\n\n// Returns terminal's background color\ncolor := output.BackgroundColor()\n\n// Returns whether terminal uses a dark-ish background\ndarkTheme := output.HasDarkBackground()\n```\n\n----------------------------------------\n\nTITLE: Using String UpperAscii Function in CEL\nDESCRIPTION: Converts all ASCII characters in a string to uppercase. Does not perform Unicode case-mapping for characters outside the ASCII range.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_25\n\nLANGUAGE: cel\nCODE:\n```\n'TacoCat'.upperAscii()      // returns 'TACOCAT'\n'TacoCÆt Xii'.upperAscii()  // returns 'TACOCÆT XII'\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: This command shows how to SSH into a DevPod workspace. The exact command is provided by DevPod after starting the workspace, typically using the workspace name as the hostname.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/quickstart-vim.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Client-Server State Diagram - Inbound Streaming\nDESCRIPTION: ASCII diagram depicting the state transitions for inbound streaming between client and server, with remote closed flags and data flow.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-23_snippet_3\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n         +--------+                                    +--------+\n         | Client |                                    | Server |\n         +---+----+                                    +----+---+\n             |             +--------------+                 |\n      local  >-------------+ Request [RC] +-----------------> remote\n      closed |             +--------------+                 | closed\n             |                                              |\n             |                 +------+                     |\n             <-----------------+ Data +---------------------<\n             |                 +------+                     |\n             |                                              |\n             |               +-----------+                  |\n    finished <---------------+ Data [RC] +------------------< finished\n             |               +-----------+                  |\n             |                                              |\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events with termenv in Go\nDESCRIPTION: This Go code presents functions on the `termenv.Output` object used to enable and disable various terminal mouse event tracking modes. Modes include X10 press-only, standard tracking, hilite tracking, cell motion tracking, and all motion tracking.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Enable X10 mouse mode, only button press events are sent\noutput.EnableMousePress()\n\n// Disable X10 mouse mode\noutput.DisableMousePress()\n\n// Enable Mouse Tracking mode\noutput.EnableMouse()\n\n// Disable Mouse Tracking mode\noutput.DisableMouse()\n\n// Enable Hilite Mouse Tracking mode\noutput.EnableMouseHilite()\n\n// Disable Hilite Mouse Tracking mode\noutput.DisableMouseHilite()\n\n// Enable Cell Motion Mouse Tracking mode\noutput.EnableMouseCellMotion()\n\n// Disable Cell Motion Mouse Tracking mode\noutput.DisableMouseCellMotion()\n\n// Enable All Motion Mouse mode\noutput.EnableMouseAllMotion()\n\n// Disable All Motion Mouse mode\noutput.DisableMouseAllMotion()\n```\n\n----------------------------------------\n\nTITLE: Converting JSONC to JSON and Unmarshalling in Go\nDESCRIPTION: This Go code snippet demonstrates the primary use case of the `jsonc` package. It defines a multi-line raw string literal `data` containing JSONC content (with comments and a trailing comma). The `jsonc.ToJSON()` function takes this string, strips the comments and trailing commas, and returns a standard JSON byte slice. This byte slice is then passed to the standard library's `json.Unmarshal()` function to parse the JSON data into a Go variable (presumably a struct named `config`).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tidwall/jsonc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\ndata := `\n{\n  /* Dev Machine */\n  \"dbInfo\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,          // use full email address\n    \"username\": \"josh\",\n    \"password\": \"pass123\", // use a hashed password\n  },\n  /* Only SMTP Allowed */\n  \"emailInfo\": {\n    \"email\": \"josh@example.com\",\n    \"password\": \"pass123\",\n    \"smtp\": \"smpt.example.com\",\n  }\n}\n`\n\nerr := json.Unmarshal(jsonc.ToJSON(data), &config)\n\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint Command\nDESCRIPTION: Shell command for running golangci-lint on all packages in the repository, with optional flags for showing all lint errors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Deleting a Provider using DevPod CLI\nDESCRIPTION: This command removes an installed provider from DevPod. The <provider name> parameter should be replaced with the name of the provider to be deleted. It's important to remove or move any workspaces associated with this provider before deletion to maintain workspace accessibility.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/delete-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider delete <provider name>\n```\n\n----------------------------------------\n\nTITLE: Exposing Docker Daemon in WSL via TCP Port\nDESCRIPTION: Bash script to modify the Docker service configuration to expose the Docker daemon on port 2375, making it accessible from Windows. The script edits the service file and restarts the Docker service.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nsudo cp /lib/systemd/system/docker.service /etc/systemd/system/\nsudo sed -i 's/\\ -H\\ fd:\\/\\//\\ -H\\ fd:\\/\\//\\ -H\\ tcp:\\/\\/127.0.0.1:2375/g' /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo systemctl restart docker.service\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod on macOS ARM64\nDESCRIPTION: Downloads and installs the DevPod binary for macOS ARM64 architecture.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o devpod \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-darwin-arm64\" && sudo install -c -m 0755 devpod /usr/local/bin && rm -f devpod\n```\n\n----------------------------------------\n\nTITLE: Using Step Function for Grapheme Iteration in Go\nDESCRIPTION: Shows how to use the StepString function to iterate over grapheme clusters without allocating a Graphemes object, handling states and boundaries manually.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Requiring Ginkgo Suite File Presence using Shell\nDESCRIPTION: Runs Ginkgo with the '-requireSuite' flag. This causes the test run to fail if '*_test.go' files exist but 'go test' doesn't find any tests, which typically indicates the Ginkgo suite file (generated by 'ginkgo bootstrap') is missing or improperly configured. Introduced in version 1.4.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -requireSuite\n```\n\n----------------------------------------\n\nTITLE: Select Prompt with Options\nDESCRIPTION: Example of implementing a single-select prompt with multiple choice options\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ncolor := \"\"\nprompt := &survey.Select{\n    Message: \"Choose a color:\",\n    Options: []string{\"red\", \"blue\", \"green\"},\n}\nsurvey.AskOne(prompt, &color)\n```\n\n----------------------------------------\n\nTITLE: Defining Uncompressed OCI Image Core Interface in Go\nDESCRIPTION: This Go interface specifies the contract for managing uncompressed OCI image blobs, commonly found in tarball-based images. By implementing this interface, an object can provide a v1.Image abstraction over uncompressed layers. It depends on v1 and types definitions and requires methods for raw config retrieval, accessing layers by DiffID, and delivering the media type. The approach suits sources storing only uncompressed blobs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/partial/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype UncompressedImageCore interface {\n\tRawConfigFile() ([]byte, error)\n\tMediaType() (types.MediaType, error)\n\tLayerByDiffID(v1.Hash) (UncompressedLayer, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index - CEL String Extension - Pseudocode\nDESCRIPTION: Demonstrates the 'indexOf' string method, which finds the integer position of the first occurrence of a substring, optionally starting at a specified offset. Returns -1 if the substring is not found. Errors on negative positions. Can accept empty substrings and returns the search start position in that case.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_16\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.indexOf(<string>) -> <int>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.indexOf(<string>, <int>) -> <int>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('')         // returns 0\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('ello')     // returns 1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('jello')    // returns -1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('', 2)      // returns 2\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('ello', 2)  // returns 7\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('ello', 20) // returns -1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.indexOf('ello', -1) // error\n```\n\n----------------------------------------\n\nTITLE: Adding dict lookup function in Go\nDESCRIPTION: Adds a new dig function to lookup nested values in dictionaries.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nAdded dig function for dicts\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from a Custom Go Struct Using gojsonschema in Go\nDESCRIPTION: Shows serialization and loading of a custom Go struct representing a complex schema object using NewGoLoader. Requires gojsonschema; input is a struct with nested fields. Output is a Loader for use in validation. Useful for dynamic schema creation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Root struct {\n\tUsers []User `json:\"users\"`\n}\n\ntype User struct {\n\tName string `json:\"name\"`\n}\n\n...\n\ndata := Root{}\ndata.Users = append(data.Users, User{\"John\"})\ndata.Users = append(data.Users, User{\"Sophia\"})\ndata.Users = append(data.Users, User{\"Bill\"})\n\nloader := gojsonschema.NewGoLoader(data)\n\n```\n\n----------------------------------------\n\nTITLE: Running Form and Handling Results in Go\nDESCRIPTION: Shows how to execute the form and handle potential errors and results.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := form.Run()\nif err != nil {\n    log.Fatal(err)\n}\n\nif !discount {\n    fmt.Println(\"What? You didn't take the discount?!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Mapstructure Use Case\nDESCRIPTION: Sample JSON demonstrating a scenario where mapstructure is useful for decoding into different structures based on a type field.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Colors Using Linear RGB in Go\nDESCRIPTION: Example showing how to perform color space conversion through LinearRgb for Lab color space. This demonstrates the standard conversion approach that prioritizes accuracy over speed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ncol := // Get your color somehow\nl, a, b := XyzToLab(LinearRgbToXyz(col.LinearRgb()))\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with SI Notation in Go\nDESCRIPTION: This example shows how to use the humanize.SI() function to format numbers using SI notation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhumanize.SI(0.00000000223, \"M\") // 2.23 nM\n```\n\n----------------------------------------\n\nTITLE: Go Minimum Version Requirement Update\nDESCRIPTION: The minimum supported Go version was bumped to 1.20 as per AWS language support policy.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.17.0 (2024-02-13)\n\n* **Feature**: Bump minimum Go version to 1.20 per our language support policy.\n```\n\n----------------------------------------\n\nTITLE: Adding filepath functions in Go\nDESCRIPTION: Adds new filepath manipulation functions like osBase, osDir, osExt, osClean, osIsAbs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nAdded filepath functions osBase, osDir, osExt, osClean, osIsAbs\n```\n\n----------------------------------------\n\nTITLE: Capturing Loft Server Heap Profile\nDESCRIPTION: Uses curl to capture a heap profile from the Loft server's debug endpoint and saves it to a timestamped file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s -v http://localhost:8080/debug/pprof/heap > $(date '+%Y-%m-%d-%H:%M:%S').out\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for Zap development\nDESCRIPTION: This snippet shows the process of creating a new branch for developing a feature in Zap, including updating the local master branch with upstream changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/zap\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Data using Standard Go encoding/json\nDESCRIPTION: This snippet illustrates the standard method for unmarshaling JSON data (from a byte slice `input`) into a Go data structure (`&data`) using the `Unmarshal` function from the `encoding/json` package. It requires importing the `encoding/json` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Logging Environment Variables\nDESCRIPTION: Commands to enable verbose logging in gRPC by setting environment variables for log verbosity and severity levels.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Copying Styles in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to copy styles in Lip Gloss using simple assignment, which creates true copies due to the use of primitive types.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nstyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"219\"))\n\ncopiedStyle := style // this is a true copy\n\nwildStyle := style.Blink(true) // this is also true copy, with blink added\n```\n\n----------------------------------------\n\nTITLE: Importing Empty Package in Go\nDESCRIPTION: This code snippet demonstrates how to import the 'empty' package from the go-containerregistry library. It's typically used as a starting point for creating or manipulating container images.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/empty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/google/go-containerregistry/pkg/v1/empty\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Float64 Numbers without Trailing Zeros in Go\nDESCRIPTION: This snippet demonstrates the use of humanize.Ftoa() function to format float64 numbers without trailing zeros.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%f\", 2.24)                // 2.240000\nfmt.Printf(\"%s\", humanize.Ftoa(2.24)) // 2.24\nfmt.Printf(\"%f\", 2.0)                 // 2.000000\nfmt.Printf(\"%s\", humanize.Ftoa(2.0))  // 2\n```\n\n----------------------------------------\n\nTITLE: Formatting Byte Sizes as Floating Point in Go\nDESCRIPTION: Demonstrates using Go's `fmt.Printf` with floating-point verbs (`%f`, `%g`) to format byte sizes. The examples show precision control (`.2f`), automatic unit selection (`%g` using decimal kB), and switching to binary units (`%#g` using KiB). Assumes a defined byte constant `B`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tonistiigi/units/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%.2f\", 123 * B)   => \"123B\"\nfmt.Printf(\"%.2f\", 1234 * B)  => \"1.23kB\"\nfmt.Printf(\"%g\", 1200 * B)    => \"1.2kB\"\nfmt.Printf(\"%#g\", 1024 * B)   => \"1KiB\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Client with SetEnv Directive\nDESCRIPTION: Example SSH client configuration that uses the SetEnv directive to set environment variables for a specific remote host. This configuration enables passing the IMAGE_VERSION variable to the remote SSH server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/environment-variables-in-devcontainer-json.mdx#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nHost <REMOTE-SSH-SERVER>\n   SetEnv IMAGE_VERSION=0-18-bullseye\n```\n\n----------------------------------------\n\nTITLE: Retrieving Machine ID on macOS\nDESCRIPTION: Bash command to retrieve the machine ID on macOS systems.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Functions for Error Messages (Go)\nDESCRIPTION: Shows how to define custom template functions for use in error message formatting. This example adds an 'allcaps' function to convert strings to uppercase.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngojsonschema.ErrorTemplateFuncs = map[string]interface{}{\n\t\"allcaps\": func(s string) string {\n\t\treturn strings.ToUpper(s)\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.4.0 Release Notes in Markdown\nDESCRIPTION: This snippet details the changes in v1.4.0 of the AWS SDK, including new configuration settings for endpoint discovery and dependency updates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.4.0 (2021-06-25)\n\n* **Feature**: Adds configuration setting for enabling endpoint discovery.\n* **Feature**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-Go Package in Go\nDESCRIPTION: This command adds the jwt-go library as a dependency in a Go project. It uses the go get command to fetch and install the latest version of the package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/golang-jwt/jwt/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v4\n```\n\n----------------------------------------\n\nTITLE: Benchmarking go-csvvalue Versus encoding/csv on Darwin - Shell\nDESCRIPTION: This snippet displays the Go benchmarking results comparing go-csvvalue and encoding/csv on macOS ARM64. It provides technical context for performance on a different architecture, shows the runtime in nanoseconds per operation, and memory allocations. Intended for performance evaluation, this output highlights platform differences and further supports claims about go-csvvalue's efficiency. Users need familiarity with Go benchmarks and the go-csvvalue library for full context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tonistiigi/go-csvvalue/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngoos: darwin\\ngoarch: arm64\\npkg: github.com/tonistiigi/go-csvvalue\\nBenchmarkFields/stdlib/nocache-10                1679923               784.9 ns/op          4520 B/op         14 allocs/op\\nBenchmarkFields/stdlib/withcache-10              1641891               826.9 ns/op          4520 B/op         14 allocs/op\\nBenchmarkFields/csvvalue/withcache-10           34399642                33.93 ns/op            0 B/op          0 allocs/op\\nBenchmarkFields/csvvalue/nocache-10             17441373                67.21 ns/op           48 B/op          1 allocs/op\\nPASS\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Documentation Badge in Markdown\nDESCRIPTION: This snippet uses Markdown to display a badge linking to the Go package documentation for 'go.opentelemetry.io/otel/codes'. It embeds an image badge using the PkgGoDev service which, when clicked, navigates to the package's documentation. No dependencies beyond Markdown parsing are needed, and it is intended for inclusion in README.md or documentation files to easily direct readers to package documentation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube Using Script from GitHub Repository\nDESCRIPTION: Clones Sander van Vugt's CKAD repository and runs the Minikube setup script for Docker driver installation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/sandervanvugt/ckad.git\ncd ./ckad\n./minikube-docker-setup.sh\n```\n\n----------------------------------------\n\nTITLE: Wrapping Strings Using go-wordwrap in Go\nDESCRIPTION: Wraps a string into lines of a specified width using the wordwrap library in Go. Requires the go-wordwrap package (install with \\\"go get github.com/mitchellh/go-wordwrap\\\"). The main function, wordwrap.WrapString, accepts the string to wrap and the maximum line width. Outputs the wrapped string using fmt.Println. The expected output is the original string split into lines; e.g., with width set to 3, each word appears on a new line. Intended for formatting command-line output, and relies on valid text input and the library being available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Debug Level Logging\nDESCRIPTION: Demonstration of verbose debug logging using V(1) level, showing how to include additional details for debugging purposes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogger.V(1).Info(\"this is particularly verbose!\", \"state of the world\", allKubernetesObjectsEverywhere)\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles using termenv in Go\nDESCRIPTION: This Go snippet illustrates how to apply various text styles like Bold, Faint, Italic, CrossOut, Underline, Overline, Reverse (swapping foreground/background), and Blink using the chainable syntax provided by `termenv` on a string object. Multiple styles can be combined.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ns := output.String(\"foobar\")\n\n// Text styles\ns.Bold()\ns.Faint()\ns.Italic()\ns.CrossOut()\ns.Underline()\ns.Overline()\n\n// Reverse swaps current fore- & background colors\ns.Reverse()\n\n// Blinking text\ns.Blink()\n\n// Combine multiple options\ns.Bold().Underline()\n```\n\n----------------------------------------\n\nTITLE: Persistent Filter Configuration\nDESCRIPTION: Shows how to maintain an active filter state between selections in select prompts\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// configure it for a specific prompt\n&Select{\n    Message:    \"Choose a color:\",\n    Options:    []string{\"light-green\", \"green\", \"dark-green\", \"red\"},\n    KeepFilter: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of DevPod Machine List\nDESCRIPTION: Sample output from the machine list command showing machine name, provider, and age information in a tabular format.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n  NAME | PROVIDER | AGE\n-------+----------+------\n  <name-of-machine> | aws      | 21s\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Accept Header in Go\nDESCRIPTION: Defines the signature for the 'ParseAccept' function. This function accepts an HTTP Accept header string and parses it into its constituent clauses. It returns a slice of 'Accept' structs, sorted according to their quality factors (q-values) and specificity, representing the parsed preferences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseAccept(header string) (accept []Accept)\n```\n\n----------------------------------------\n\nTITLE: Installing go-httpstat Package Using Bash\nDESCRIPTION: This code snippet demonstrates how to install the go-httpstat package using the go get command in a terminal environment. It requires that Go is already installed and properly configured in your development environment. Running the command fetches the latest version of the package and places it in your GOPATH, making it available for use in your Go projects. No additional parameters are needed; the output is a downloaded package in your workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-httpstat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n$ go get github.com/tcnksm/go-httpstat\\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Key Vault Audience for CLI Authentication\nDESCRIPTION: Shows how to set a custom audience URL for Azure Key Vault authentication when using CLI-based authentication.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/azure/auth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_AD_RESOURCE=\"https://vault.azure.net\"\n```\n\n----------------------------------------\n\nTITLE: Getting Git Username from Global Config in Go\nDESCRIPTION: This Go snippet demonstrates how to retrieve the username configured in the global Git configuration file (~/.gitconfig) using the `gitconfig.Username()` function from the `go-gitconfig` package. It returns the username as a string and an error object.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nusername, err := gitconfig.Username()\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace with Prebuild Repository in DevPod CLI\nDESCRIPTION: This command creates a new workspace for a specified GitHub repository, using a prebuild repository defined by the --prebuild-repository flag. DevPod will search for a prebuilt image in this repository before building from scratch.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/prebuild-a-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up github.com/my-org/my-repo --prebuild-repository ghcr.io/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value with Type Checking using reflect2.Set in Go\nDESCRIPTION: Illustrates obtaining the `reflect2.Type` of a variable using `reflect2.TypeOf` and then modifying the variable's value using the `Set` method. The `Set` method requires pointers to the target variable and the new value as `interface{}` (e.g., `&i`, `&j`) and performs runtime type checking.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Reversing a List - CEL Extension - Pseudocode\nDESCRIPTION: Describes the 'reverse' method, which takes a list of any type and returns a new list with the elements in the opposite order. This utility is commonly used for reordering sequences and does not require special dependencies. Output list matches input size.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list(T)>.reverse() -> <list(T)>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[5, 3, 1, 2].reverse() // return [2, 1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Importing Wintun Go Package\nDESCRIPTION: This snippet demonstrates how to import the Wintun Go package in a Go program. The package provides bindings to use the Wintun virtual network tunnel driver from Go.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/golang.zx2c4.com/wintun/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"golang.zx2c4.com/wintun\"\n```\n\n----------------------------------------\n\nTITLE: Locating Kubeconfig File\nDESCRIPTION: Lists the .kube directory to locate the Kubernetes configuration file needed for DevPod provider setup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nls ~/.kube\ncache  completion.bash.inc  config\n```\n\n----------------------------------------\n\nTITLE: Building Tailscale for Distribution\nDESCRIPTION: Commands to build Tailscale binaries for distribution using build_dist.sh script, which includes commit IDs and version information in the binaries.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build_dist.sh tailscale.com/cmd/tailscale\n./build_dist.sh tailscale.com/cmd/tailscaled\n```\n\n----------------------------------------\n\nTITLE: Structured Logging in Reconciler\nDESCRIPTION: Implementation of structured logging within a Reconciler function, demonstrating how to attach consistent key-value pairs throughout the reconciliation process.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *Reconciler) Reconcile(req reconcile.Request) (reconcile.Response, error) {\n    logger := logger.WithValues(\"pod\", req.NamespacedName)\n    // do some stuff\n    logger.Info(\"starting reconciliation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'ansi' Functions for Coloring Output in Go\nDESCRIPTION: Demonstrates three ways to use the 'ansi' package in Go: directly coloring a string with `ansi.Color` (slower), creating a reusable coloring function with `ansi.ColorFunc` (faster), and manually building strings using cached escape codes obtained via `ansi.ColorCode`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mgutz/ansi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mgutz/ansi\"\n\n// colorize a string, SLOW\nmsg := ansi.Color(\"foo\", \"red+b:white\")\n\n// create a FAST closure function to avoid computation of ANSI code\nphosphorize := ansi.ColorFunc(\"green+h:black\")\nmsg = phosphorize(\"Bring back the 80s!\")\nmsg2 := phospohorize(\"Look, I'm a CRT!\")\n\n// cache escape codes and build strings manually\nlime := ansi.ColorCode(\"green+h:black\")\nreset := ansi.ColorCode(\"reset\")\n\nfmt.Println(lime, \"Bring back the 80s!\", reset)\n```\n\n----------------------------------------\n\nTITLE: Adding regex quoting function in Go\nDESCRIPTION: Adds a new regexQuoteMeta function to quote regex special characters.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nAdded regexQuoteMeta for quoting regex metadata\n```\n\n----------------------------------------\n\nTITLE: Array Access in Gval\nDESCRIPTION: Example of accessing an array element by index. This demonstrates how to access array elements in Gval expressions using bracket notation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfoo[0]\n```\n\n----------------------------------------\n\nTITLE: Importing go-restful With Go Modules\nDESCRIPTION: Shows how to import the go-restful package using Go modules. This is applicable for version v3.0.0 and later, which support Go modules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Generate Command\nDESCRIPTION: Shell command for running go generate on all packages in the repository to update auto-generated code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Defining the Accept Struct for Header Clauses in Go\nDESCRIPTION: Defines the 'Accept' struct, which represents a single clause within an HTTP Accept header. It contains fields for the media 'Type' and 'SubType' (e.g., 'text' and 'html'), the quality factor 'Q' (a float32 indicating preference), and a map 'Params' for any additional parameters associated with the clause.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing machineid CLI tool using Go\nDESCRIPTION: Command to install the machineid command-line interface tool using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/denisbrodbeck/machineid/cmd/machineid\n```\n\n----------------------------------------\n\nTITLE: Trace Utility Functions in Go\nDESCRIPTION: Shows utility functions for working with traces, including getting total execution time and unconditional logging.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nopTrace.TotalTime() // Duration since the Trace was created\nopTrace.Log() // unconditionally log the trace\n```\n\n----------------------------------------\n\nTITLE: Getting Git Email from Global Config in Go\nDESCRIPTION: This Go snippet shows how to fetch the user's email address from the global Git configuration file (~/.gitconfig) by calling `gitconfig.Email()`. The function returns the email string and an error object.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nemail, err := gitconfig.Email()\n```\n\n----------------------------------------\n\nTITLE: Unary State Flow Diagram\nDESCRIPTION: ASCII diagram showing the state transitions for unary operations between client and server, including request and response flow.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-23_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n         +--------+                                    +--------+\n         | Client |                                    | Server |\n         +---+----+                                    +----+---+\n             |               +---------+                    |\n      local  >---------------+ Request +--------------------> remote\n      closed |               +---------+                    | closed\n             |                                              |\n             |              +----------+                    |\n    finished <--------------+ Response +--------------------< finished\n             |              +----------+                    |\n             |                                              |\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Modules for gRPC in Restricted Networks\nDESCRIPTION: Commands to configure Go modules when direct access to google.golang.org is restricted. Uses the replace directive to fetch packages from GitHub instead.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod on Ubuntu\nDESCRIPTION: Commands to download and install the DevPod Debian package on Ubuntu.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd ~/\nwget https://github.com/loft-sh/devpod/releases/latest/download/DevPod_linux_amd64.deb?_gl=1*76i3lz*_ga*MTczNjE4NzI1My4xNjkxNDQ1ODU1*_ga_4RQQZ3WGE9*MTY5MjY4MTU4NS45LjAuMTY5MjY4MTU4Ny41OC4wLjA. -O DevPod_linux_amd64.deb\nsudo dpkg -i DevPod_linux_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up DevPod Repository\nDESCRIPTION: Commands to clone a forked repository of DevPod to the local machine. This is the first step in the contribution workflow.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/pro-bing.git && cd pro-bing\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up DevPod Workspaces\nDESCRIPTION: Executes a shell script to delete the DevPod workspaces created for load testing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./deleteWorkspaces.sh\n```\n\n----------------------------------------\n\nTITLE: Examples of 'ansi.Color' Usage in Go\nDESCRIPTION: Provides various examples of how to use the `ansi.Color` function with different style format strings to achieve effects like dim, bold, blinking, underline, bright colors, and background colors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mgutz/ansi/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nColor(s, \"red\")            // red\nColor(s, \"red+d\")          // red dim\nColor(s, \"red+b\")          // red bold\nColor(s, \"red+B\")          // red blinking\nColor(s, \"red+u\")          // red underline\nColor(s, \"red+bh\")         // red bold bright\nColor(s, \"red:white\")      // red on white\nColor(s, \"red+b:white+h\")  // red bold on white bright\nColor(s, \"red+B:white+h\")  // red blink on white bright\nColor(s, \"off\")            // turn off ansi codes\n```\n\n----------------------------------------\n\nTITLE: Defining Model Structure for Shopping List\nDESCRIPTION: Defines the model struct that holds the application state including choices, cursor position, and selected items.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype model struct {\n    choices  []string           // items on the to-do list\n    cursor   int                // which to-do list item our cursor is pointing at\n    selected map[int]struct{}   // which to-do items are selected\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiTenant Authorization in Azure Go AutoRest\nDESCRIPTION: Example of setting up multi-tenant authorization using environment variables and the new multi-tenant types.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Set AZURE_AUXILIARY_TENANT_IDS environment variable\n// with semicolon delimited list of tenant IDs\n\noauthConfig, err := adal.NewMultiTenantOAuthConfig(...)\ntoken, err := adal.NewMultiTenantServicePrincipalToken(...)\nauthorizer := autorest.NewMultiTenantServicePrincipalTokenAuthorizer(...)\n```\n\n----------------------------------------\n\nTITLE: Sample Benchmark Results for float16 Package Functions\nDESCRIPTION: Displays sample benchmark output for key functions within the `float16` Go package, run on an amd64 architecture. It highlights the performance characteristics, showing conversion speeds (e.g., `FromFloat32`, `ToFloat32`) are around 2.6-2.7 nanoseconds per operation, while bitwise conversion (`Frombits`) and precision checking (`PrecisionFromFloat32`) are significantly faster (around 0.3 ns/op). It also notes that most functions have zero memory allocations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/x448/float16/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAll functions have zero allocations except float16.String().\n\nFromFloat32pi-2  2.59ns ± 0%    // speed using Fromfloat32() to convert a float32 of math.Pi to Float16\nToFloat32pi-2    2.69ns ± 0%    // speed using Float32() to convert a float16 of math.Pi to float32\nFrombits-2       0.29ns ± 5%    // speed using Frombits() to cast a uint16 to Float16\n\nPrecisionFromFloat32-2  0.29ns ± 1%  // speed using PrecisionFromfloat32() to check for overflows, etc.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BART Package in Go\nDESCRIPTION: This snippet demonstrates how to import the BART package and provides an overview of the Table struct and its methods for managing IPv4 and IPv6 routing tables with generic payload types.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gaissmai/bart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/gaissmai/bart\"\n\ntype Table[V any] struct {\n\t// Has unexported fields.\n}\n\nfunc (t *Table[V]) Insert(pfx netip.Prefix, val V)\nfunc (t *Table[V]) Delete(pfx netip.Prefix)\nfunc (t *Table[V]) Get(pfx netip.Prefix) (val V, ok bool)\nfunc (t *Table[V]) Update(pfx netip.Prefix, cb func(val V, ok bool) V) (newVal V)\n\nfunc (t *Table[V]) Union(o *Table[V])\nfunc (t *Table[V]) Clone() *Table[V]\n\nfunc (t *Table[V]) Lookup(ip netip.Addr) (val V, ok bool)\n\nfunc (t *Table[V]) LookupPrefix(pfx netip.Prefix) (val V, ok bool)\nfunc (t *Table[V]) LookupPrefixLPM(pfx netip.Prefix) (lpm netip.Prefix, val V, ok bool)\nfunc (t *Table[V]) EachLookupPrefix(pfx netip.Prefix, yield func(pfx netip.Prefix, val V) bool)\nfunc (t *Table[V]) EachSubnet(pfx netip.Prefix, yield func(pfx netip.Prefix, val V) bool)\n\nfunc (t *Table[V]) OverlapsPrefix(pfx netip.Prefix) bool\n\nfunc (t *Table[V]) Overlaps(o *Table[V]) bool\nfunc (t *Table[V]) Overlaps4(o *Table[V]) bool\nfunc (t *Table[V]) Overlaps6(o *Table[V]) bool\n\nfunc (t *Table[V]) Size() int\nfunc (t *Table[V]) Size4() int\nfunc (t *Table[V]) Size6() int\n\nfunc (t *Table[V]) All(yield func(pfx netip.Prefix, val V) bool)\nfunc (t *Table[V]) All4(yield func(pfx netip.Prefix, val V) bool)\nfunc (t *Table[V]) All6(yield func(pfx netip.Prefix, val V) bool)\n\nfunc (t *Table[V]) AllSorted(yield func(pfx netip.Prefix, val V) bool)\nfunc (t *Table[V]) All4Sorted(yield func(pfx netip.Prefix, val V) bool)\nfunc (t *Table[V]) All6Sorted(yield func(pfx netip.Prefix, val V) bool)\n\nfunc (t *Table[V]) String() string\nfunc (t *Table[V]) Fprint(w io.Writer) error\nfunc (t *Table[V]) MarshalText() ([]byte, error)\nfunc (t *Table[V]) MarshalJSON() ([]byte, error)\n\nfunc (t *Table[V]) DumpList4() []DumpListNode[V]\nfunc (t *Table[V]) DumpList6() []DumpListNode[V]\n```\n\n----------------------------------------\n\nTITLE: Buffering Writes with Stateless Gzip Writer in Go\nDESCRIPTION: This Go code snippet demonstrates how to create a gzip writer with stateless compression enabled by specifying the special compression level. It leverages a bufio.Writer with a specified buffer size (4KB), allowing controlled and memory-efficient writes. Dependencies include the github.com/klauspost/compress/gzip and bufio packages, and users must ensure to replace 'ioutil.Discard' with a suitable output writer. The key parameters are the compression level (gzip.StatelessCompression) and buffer size (4096 bytes). The expected output is compressed data written in stateless mode, with each write operation allocating minimal memory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\t// replace 'ioutil.Discard' with your output.\n\tgzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzw.Close()\n\n\tw := bufio.NewWriterSize(gzw, 4096)\n\tdefer w.Flush()\n\t\n\t// Write to 'w' \n```\n\n----------------------------------------\n\nTITLE: Creating a Gogo Vanity Binary with ttrpc Plugin in Go\nDESCRIPTION: This code snippet demonstrates how to create a gogo vanity binary with the ttrpc plugin enabled. It references an example file that users can refer to for implementation details.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCreate a gogo vanity binary (see\n[`cmd/protoc-gen-gogottrpc/main.go`](cmd/protoc-gen-gogottrpc/main.go) for an\nexample with the ttrpc plugin enabled.\n```\n\n----------------------------------------\n\nTITLE: Installing the gxz Command-Line Tool using Go Get\nDESCRIPTION: This shell command uses the `go get` tool to download and install the `gxz` command-line utility, which is part of the `xz` Go package project. This command requires a working Go installation and environment setup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/ulikunitz/xz/cmd/gxz\n```\n\n----------------------------------------\n\nTITLE: Manipulating Cursor Position with termenv in Go\nDESCRIPTION: This Go code lists various functions provided by the `termenv.Output` object to control the terminal cursor's position. Functions include moving to specific coordinates, saving/restoring position, and moving relatively (up, down, forward, back, next line, previous line).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Move the cursor to a given position\noutput.MoveCursor(row, column)\n\n// Save the cursor position\noutput.SaveCursorPosition()\n\n// Restore a saved cursor position\noutput.RestoreCursorPosition()\n\n// Move the cursor up a given number of lines\noutput.CursorUp(n)\n\n// Move the cursor down a given number of lines\noutput.CursorDown(n)\n\n// Move the cursor up a given number of lines\noutput.CursorForward(n)\n\n// Move the cursor backwards a given number of cells\noutput.CursorBack(n)\n\n// Move the cursor down a given number of lines and place it at the beginning\n// of the line\noutput.CursorNextLine(n)\n\n// Move the cursor up a given number of lines and place it at the beginning of\n// the line\noutput.CursorPrevLine(n)\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags to Upstream Repo - Shell\nDESCRIPTION: These git commands push the newly added release tags (for both the main module and submodules) to the upstream 'open-telemetry/opentelemetry-go.git' repository. Both the local and remote repositories must be accessible. Replace '<new tag>' and '<submodules-path/new tag>' with actual values. Successful execution updates tag references in the remote repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\\ngit push upstream <submodules-path/new tag>\\n...\\n\n```\n\n----------------------------------------\n\nTITLE: Digest Type Methods in Go\nDESCRIPTION: Key methods implemented by the Digest type that satisfy the hash.Hash64 interface, including Write operations and hash computation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Continuous Profiling of Loft Server\nDESCRIPTION: A shell loop that captures heap profiles from the Loft server every 30 seconds, saving each profile to a timestamped file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwhile true; do curl -s -v http://localhost:8080/debug/pprof/heap > $(date '+%Y-%m-%d-%H:%M:%S').out; sleep 30; done\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Build Dependencies for DevPod Desktop\nDESCRIPTION: Command to install the required system packages on Linux to build the DevPod desktop application. These dependencies are necessary for the GUI components, WebKit rendering, and Rust compilation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/desktop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libappindicator3-1 libgdk-pixbuf2.0-0 libbsd0 libxdmcp6 \\\n  libwmf-0.2-7 libwmf-0.2-7-gtk libgtk-3-0 libwmf-dev libwebkit2gtk-4.0-37 \\\n  librust-openssl-sys-dev librust-glib-sys-dev\nsudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \\\n  libayatana-appindicator3-dev librsvg2-dev file build-essential\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Custom Script\nDESCRIPTION: Command to start Minikube using the custom startup script created earlier.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n~./minikube-start.sh\n```\n\n----------------------------------------\n\nTITLE: Reading /proc Files Efficiently in Go (Go)\nDESCRIPTION: Example Go code demonstrating how to read a file from the `/proc` filesystem (e.g., `/proc/cpuinfo`) using the internal `util.ReadFileNoStat` function, which avoids `stat` calls potentially problematic with pseudo-filesystems. It then creates a `bufio.Scanner` to process the file content. Requires the project's `util` package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Testing DevPod Installation\nDESCRIPTION: Starts DevPod to verify successful installation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndev-pod\n```\n\n----------------------------------------\n\nTITLE: Using Slim-Sprig Template Functions\nDESCRIPTION: Example showing how to chain multiple Slim-Sprig functions in a Go template using pipes. Demonstrates string manipulation with upper and repeat functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nHELLO!HELLO!HELLO!HELLO!HELLO!\n```\n\n----------------------------------------\n\nTITLE: Merging Identical Cells in Tablewriter Tables using Go\nDESCRIPTION: Demonstrates the automatic merging of identical cells in tablewriter tables. SetAutoMergeCells enables this feature, producing visually grouped cells for repeated values (e.g., dates). Data is appended in bulk, the row line is activated, and results are aligned and merged accordingly. Useful when displaying hierarchical or grouped tabular datasets in CLI outputs; requires only tablewriter and data inputs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n  []string{\"1/1/2014\", \"Domain name\", \"1234\", \"$10.98\"},\n  []string{\"1/1/2014\", \"January Hosting\", \"2345\", \"$54.95\"},\n  []string{\"1/4/2014\", \"February Hosting\", \"3456\", \"$51.00\"},\n  []string{\"1/4/2014\", \"February Extra Bandwidth\", \"4567\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"})\ntable.SetAutoMergeCells(true)\ntable.SetRowLine(true)\ntable.AppendBulk(data)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Match Function Implementation in Go\nDESCRIPTION: Function that matches a name against a file pattern using forward slash as separator.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Match(pattern, name string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Managing Terminal Session Features with termenv in Go\nDESCRIPTION: This Go code lists functions on the `termenv.Output` object for controlling terminal session features. These include setting the window title, default foreground/background/cursor colors, hiding/showing the cursor, copying text to the system or primary clipboard, and triggering system notifications.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// SetWindowTitle sets the terminal window title\noutput.SetWindowTitle(title)\n\n// SetForegroundColor sets the default foreground color\noutput.SetForegroundColor(color)\n\n// SetBackgroundColor sets the default background color\noutput.SetBackgroundColor(color)\n\n// SetCursorColor sets the cursor color\noutput.SetCursorColor(color)\n\n// Hide the cursor\noutput.HideCursor()\n\n// Show the cursor\noutput.ShowCursor()\n\n// Copy to clipboard\noutput.Copy(message)\n\n// Copy to primary clipboard (X11)\noutput.CopyPrimary(message)\n\n// Trigger notification\noutput.Notify(title, body)\n```\n\n----------------------------------------\n\nTITLE: Installing the LZ4 Command-Line Tool\nDESCRIPTION: This command uses the Go toolchain to install the 'lz4c' command-line utility from the 'pierrec/lz4' repository. This tool allows users to compress and decompress LZ4 files directly from the terminal.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/pierrec/lz4/v4/cmd/lz4c@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Provider in DevPod\nDESCRIPTION: Updates the Kubernetes provider configuration in DevPod.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod provider update kubernetes kubernetes\n```\n\n----------------------------------------\n\nTITLE: Compressing a File using the gxz Tool\nDESCRIPTION: This shell command demonstrates how to compress a file named `bigfile` using the `gxz` command-line tool. Upon successful execution, the original `bigfile` will be replaced by a compressed file named `bigfile.xz`. Requires the `gxz` tool to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gxz bigfile\n```\n\n----------------------------------------\n\nTITLE: Counting Grapheme Clusters in a String with Go\nDESCRIPTION: Example of counting user-perceived characters (grapheme clusters) in a string containing emojis.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Visualizing Netlink Ecosystem with Mermaid Diagram in Markdown\nDESCRIPTION: This mermaid snippet generates a directed graph that visually organizes the ecosystem of Go packages leveraging netlink. Subgraphs categorize packages by netlink family, and each package is represented as a clickable node linking to its source. The diagram helps developers understand package relationships and integration points. Requires mermaid.js rendering capabilities for visualization in markdown viewers that support mermaid.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mdlayher/netlink/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\\n    netlink[\\\"github.com/mdlayher/netlink\\\"]\\n    click netlink \\\"https://github.com/mdlayher/netlink\\\"\\n\\n    subgraph \\\"NETLINK_CONNECTOR\\\"\\n        direction LR\\n\\n        garlic[\\\"github.com/fearful-symmetry/garlic\\\"]\\n        click garlic \\\"https://github.com/fearful-symmetry/garlic\\\"\\n    end\\n\\n    subgraph \\\"NETLINK_CRYPTO\\\"\\n        direction LR\\n\\n        cryptonl[\\\"github.com/mdlayher/cryptonl\\\"]\\n        click cryptonl \\\"https://github.com/mdlayher/cryptonl\\\"\\n    end\\n\\n    subgraph \\\"NETLINK_GENERIC\\\"\\n        direction LR\\n\\n        genetlink[\\\"github.com/mdlayher/genetlink\\\"]\\n        click genetlink \\\"https://github.com/mdlayher/genetlink\\\"\\n\\n        devlink[\\\"github.com/mdlayher/devlink\\\"]\\n        click devlink \\\"https://github.com/mdlayher/devlink\\\"\\n\\n        ethtool[\\\"github.com/mdlayher/ethtool\\\"]\\n        click ethtool \\\"https://github.com/mdlayher/ethtool\\\"\\n\\n        go-openvswitch[\\\"github.com/digitalocean/go-openvswitch\\\"]\\n        click go-openvswitch \\\"https://github.com/digitalocean/go-openvswitch\\\"\\n\\n        ipvs[\\\"github.com/cloudflare/ipvs\\\"]\\n        click ipvs \\\"https://github.com/cloudflare/ipvs\\\"\\n\\n        l2tp[\\\"github.com/axatrax/l2tp\\\"]\\n        click l2tp \\\"https://github.com/axatrax/l2tp\\\"\\n\\n        nbd[\\\"github.com/Merovius/nbd\\\"]\\n        click nbd \\\"https://github.com/Merovius/nbd\\\"\\n\\n        quota[\\\"github.com/mdlayher/quota\\\"]\\n        click quota \\\"https://github.com/mdlayher/quota\\\"\\n\\n        router7[\\\"github.com/rtr7/router7\\\"]\\n        click router7 \\\"https://github.com/rtr7/router7\\\"\\n\\n        taskstats[\\\"github.com/mdlayher/taskstats\\\"]\\n        click taskstats \\\"https://github.com/mdlayher/taskstats\\\"\\n\\n        u-bmc[\\\"github.com/u-root/u-bmc\\\"]\\n        click u-bmc \\\"https://github.com/u-root/u-bmc\\\"\\n\\n        wgctrl[\\\"golang.zx2c4.com/wireguard/wgctrl\\\"]\\n        click wgctrl \\\"https://golang.zx2c4.com/wireguard/wgctrl\\\"\\n\\n        wifi[\\\"github.com/mdlayher/wifi\\\"]\\n        click wifi \\\"https://github.com/mdlayher/wifi\\\"\\n\\n        devlink & ethtool & go-openvswitch & ipvs --> genetlink\\n        l2tp & nbd & quota & router7 & taskstats --> genetlink\\n        u-bmc & wgctrl & wifi --> genetlink\\n    end\\n\\n    subgraph \\\"NETLINK_KOBJECT_UEVENT\\\"\\n        direction LR\\n\\n        kobject[\\\"github.com/mdlayher/kobject\\\"]\\n        click kobject \\\"https://github.com/mdlayher/kobject\\\"\\n    end\\n\\n    subgraph \\\"NETLINK_NETFILTER\\\"\\n        direction LR\\n\\n        go-conntrack[\\\"github.com/florianl/go-conntrack\\\"]\\n        click go-conntrack \\\"https://github.com/florianl/go-conntrack\\\"\\n\\n        go-nflog[\\\"github.com/florianl/go-nflog\\\"]\\n        click go-nflog \\\"https://github.com/florianl/go-nflog\\\"\\n\\n        go-nfqueue[\\\"github.com/florianl/go-nfqueue\\\"]\\n        click go-nfqueue \\\"https://github.com/florianl/go-nfqueue\\\"\\n\\n        netfilter[\\\"github.com/ti-mo/netfilter\\\"]\\n        click netfilter \\\"https://github.com/ti-mo/netfilter\\\"\\n\\n        nftables[\\\"github.com/google/nftables\\\"]\\n        click nftables \\\"https://github.com/google/nftables\\\"\\n\\n        conntrack[\\\"github.com/ti-mo/conntrack\\\"]\\n        click conntrack \\\"https://github.com/ti-mo/conntrack\\\"\\n\\n        conntrack --> netfilter\\n    end\\n\\n    subgraph \\\"NETLINK_ROUTE\\\"\\n        direction LR\\n\\n        go-tc[\\\"github.com/florianl/go-tc\\\"]\\n        click go-tc \\\"https://github.com/florianl/go-tc\\\"\\n\\n        qdisc[\\\"github.com/ema/qdisc\\\"]\\n        click qdisc \\\"https://github.com/ema/qdisc\\\"\\n\\n        rtnetlink[\\\"github.com/jsimonetti/rtnetlink\\\"]\\n        click rtnetlink \\\"https://github.com/jsimonetti/rtnetlink\\\"\\n\\n        rtnl[\\\"gitlab.com/mergetb/tech/rtnl\\\"]\\n        click rtnl \\\"https://gitlab.com/mergetb/tech/rtnl\\\"\\n    end\\n\\n    subgraph \\\"NETLINK_W1\\\"\\n        direction LR\\n\\n        go-onewire[\\\"github.com/SpComb/go-onewire\\\"]\\n        click go-onewire \\\"https://github.com/SpComb/go-onewire\\\"\\n    end\\n\\n    NETLINK_CONNECTOR --> netlink\\n    NETLINK_CRYPTO --> netlink\\n    NETLINK_GENERIC --> netlink\\n    NETLINK_KOBJECT_UEVENT --> netlink\\n    NETLINK_NETFILTER --> netlink\\n    NETLINK_ROUTE --> netlink\\n    NETLINK_W1 --> netlink\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in devcontainer.json\nDESCRIPTION: A sample devcontainer.json configuration showing how to reference local environment variables using the ${localEnv:VARIABLE_NAME} syntax. This example sets the Node.js image version based on a local environment variable.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/environment-variables-in-devcontainer-json.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Node.js\",\n    \"image\": \"mcr.microsoft.com/devcontainers/javascript-node:${localEnv:IMAGE_VERSION}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Buffered I/O for BitSet Serialization in Go\nDESCRIPTION: These snippets show how to use buffered I/O for improved performance when reading and writing BitSet instances to files or network connections.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Create(\"myfile\")\nw := bufio.NewWriter(f)\n```\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Open(\"myfile\")\nr := bufio.NewReader(f)\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration in Go\nDESCRIPTION: Shows how to handle overlapping configuration between different types using shared config and specific option interfaces.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Go Package Dependencies Declaration\nDESCRIPTION: This section lists required Go package dependencies with version constraints and module paths. Each entry specifies the import path, version, and any special requirements like explicit declarations or minimum Go versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/modules.txt#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/opencontainers/image-spec/specs-go\ngithub.com/opencontainers/image-spec/specs-go/v1\n# github.com/opencontainers/runtime-spec v1.2.0\n## explicit\ngithub.com/opencontainers/runtime-spec/specs-go\n# github.com/otiai10/copy v1.7.0\n## explicit; go 1.14\ngithub.com/otiai10/copy\n```\n\n----------------------------------------\n\nTITLE: Defining a Common RouterClient Interface for Internet Gateway Communication in Go\nDESCRIPTION: This snippet defines a RouterClient interface in Go that abstracts common router operations like port mapping and getting the external IP. This interface enables client code to work with different types of router implementations using the same method signatures.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/goupnp/GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype RouterClient interface {\n\tAddPortMapping(\n\t\tNewRemoteHost string,\n\t\tNewExternalPort uint16,\n\t\tNewProtocol string,\n\t\tNewInternalPort uint16,\n\t\tNewInternalClient string,\n\t\tNewEnabled bool,\n\t\tNewPortMappingDescription string,\n\t\tNewLeaseDuration uint32,\n\t) (err error)\n\n\tGetExternalIPAddress() (\n\t\tNewExternalIPAddress string,\n\t\terr error,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Go Zstandard Decoder Performance\nDESCRIPTION: This snippet displays benchmark results for the Go Zstandard decoder, executed on an AMD Ryzen 9 3950X processor using AMD64 assembly. It shows performance metrics (ns/op, MB/s, B/op, allocs/op) for both streaming decodes (Silesia, Enwik9) and concurrent block decoding on various smaller input files (like text, geo data, pdf, jpeg). The results highlight the decoder's speed and memory efficiency, particularly in parallel scenarios where allocations per operation are zero.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nBenchmarkDecoderSilesia-32    \t                   5\t 206878840 ns/op\t1024.50 MB/s\t   49808 B/op\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\t1271809000 ns/op\t 786.28 MB/s\t   72048 B/op\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32         \t   67356\t     17857 ns/op\t10321.96 MB/s\t        22.48 pct\t     102 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32     \t  266656\t      4421 ns/op\t26823.21 MB/s\t        11.89 pct\t      19 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32      \t   20992\t     56842 ns/op\t8477.17 MB/s\t        39.90 pct\t     754 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32        \t   27456\t     43932 ns/op\t9714.01 MB/s\t        33.27 pct\t     524 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32      \t   78432\t     15047 ns/op\t8319.15 MB/s\t        40.34 pct\t      66 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32       \t   65800\t     18436 ns/op\t8249.63 MB/s\t        37.75 pct\t      88 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32          \t  102993\t     11523 ns/op\t35546.09 MB/s\t         3.637 pct\t     143 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32    \t 1000000\t      1070 ns/op\t95720.98 MB/s\t        80.53 pct\t       3 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \t  749802\t      1752 ns/op\t70272.35 MB/s\t       100.0 pct\t       5 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32          \t   22640\t     52934 ns/op\t13263.37 MB/s\t        26.25 pct\t    1014 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32              \t  226412\t      5232 ns/op\t19572.27 MB/s\t        14.49 pct\t      20 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32     \t  923041\t      1276 ns/op\t3194.71 MB/s\t        31.26 pct\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Loft Server\nDESCRIPTION: Sets up port forwarding for the Loft server pod to allow local access on port 8080.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n devpod-pro port-forward loft-55df4d875f-j9vnd 8080:8080 &\n```\n\n----------------------------------------\n\nTITLE: Installing json-iterator/go Package using Go Get\nDESCRIPTION: This command uses the standard Go toolchain command `go get` to download and install the `json-iterator/go` library from its GitHub repository into the local Go workspace. This makes the package available for import in Go projects.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```\ngo get github.com/json-iterator/go\n```\n```\n\n----------------------------------------\n\nTITLE: Installing gziphandler via Go Modules\nDESCRIPTION: Command to install the gziphandler package using Go's package management system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/NYTimes/gziphandler/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/NYTimes/gziphandler\n```\n\n----------------------------------------\n\nTITLE: Enforcing Rules in Lip Gloss (Go)\nDESCRIPTION: Shows how to enforce style rules using Inline, MaxWidth, and MaxHeight for specific rendering requirements.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Force rendering onto a single line, ignoring margins, padding, and borders.\nsomeStyle.Inline(true).Render(\"yadda yadda\")\n\n// Also limit rendering to five cells\nsomeStyle.Inline(true).MaxWidth(5).Render(\"yadda yadda\")\n\n// Limit rendering to a 5x5 cell block\nsomeStyle.MaxWidth(5).MaxHeight(5).Render(\"yadda yadda\")\n```\n\n----------------------------------------\n\nTITLE: Benchmarking go-csvvalue Versus encoding/csv - Shell\nDESCRIPTION: Demonstrates benchmark results of the go-csvvalue library against the standard encoding/csv package on a Linux AMD64 platform. The benchmark outputs compare memory allocations, allocations per operation, and runtime. This snippet assumes the reader can execute Go benchmarks and is familiar with Go's testing output conventions. It serves to illustrate the performance improvements achievable when using go-csvvalue for single-line CSV parsing instead of encoding/csv.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tonistiigi/go-csvvalue/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngoos: linux\\ngoarch: amd64\\npkg: github.com/tonistiigi/go-csvvalue\\ncpu: AMD EPYC 7763 64-Core Processor                \\nBenchmarkFields/stdlib/withcache-4         \\t 1109917\\t      1103 ns/op\\t    4520 B/op\\t      14 allocs/op\\nBenchmarkFields/stdlib/nocache-4           \\t 1082838\\t      1125 ns/op\\t    4520 B/op\\t      14 allocs/op\\nBenchmarkFields/csvvalue/withcache-4       \\t28554976\\t        42.12 ns/op\\t       0 B/op\\t       0 allocs/op\\nBenchmarkFields/csvvalue/nocache-4         \\t13666134\\t        83.77 ns/op\\t      48 B/op\\t       1 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking xxhash Implementations in Go via Command-Line\nDESCRIPTION: Shows command-line instructions for benchmarking the pure-Go versus assembly implementations of xxhash's Sum64 function using Go's testing tools and benchstat. Requires Go installed with minimal module support and the benchstat tool available in the environment. Input parameters define the benchmark duration, repetition count, and matching benchmarks; output is parsed through benchstat for performance analysis.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Using GinkgoHelper for test helper functions in Go\nDESCRIPTION: Example showing how to use GinkgoHelper() to exclude helper functions from being tracked in error stack traces, similar to testing.T.Helper(). This approach eliminates the need to track offsets when nesting and composing helper functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc helper(model Model) {\n    GinkgoHelper()\n    Expect(model).To(BeValid())\n    Expect(model.SerialNumber).To(MatchRegexp(/[a-f0-9]*/))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom DevPod Provider from GitHub\nDESCRIPTION: This command demonstrates how to add a custom provider directly from a GitHub repository using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add loft-sh/devpod-provider-terraform\n```\n\n----------------------------------------\n\nTITLE: DERP Package Reference\nDESCRIPTION: Code reference showing the DERP package path for client-server implementations and the derper command location.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/derp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n../cmd/derper\n```\n\n----------------------------------------\n\nTITLE: Running tests and linters for Zap\nDESCRIPTION: This snippet demonstrates how to run the test suite and linters for the Zap project to ensure code quality and functionality.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Paste Utility for Go\nDESCRIPTION: This command installs the 'gopaste' utility, which is a command-line tool for pasting clipboard content. The example shows how to use it to paste clipboard content into a file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/atotto/clipboard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/atotto/clipboard/cmd/gopaste\n$ # example:\n$ gopaste > document.txt\n```\n\n----------------------------------------\n\nTITLE: Combining Merge Patches in Go\nDESCRIPTION: Example showing how to combine multiple JSON merge patches into a single patch that represents all changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\n\tnameAndHeight := []byte(`{\"height\":null,\"name\":\"Jane\"}`)\n\tageAndEyes := []byte(`{\"age\":4.23,\"eyes\":\"blue\"}`)\n\n\tcombinedPatch, err := jsonpatch.MergeMergePatches(nameAndHeight, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err := jsonpatch.MergePatch(original, nameAndHeight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithoutCombinedPatch, err = jsonpatch.MergePatch(withoutCombinedPatch, ageAndEyes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\twithCombinedPatch, err := jsonpatch.MergePatch(original, combinedPatch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif jsonpatch.Equal(withCombinedPatch, withoutCombinedPatch) {\n\t\tfmt.Println(\"Both JSON documents are structurally the same!\")\n\t}\n\n\tfmt.Printf(\"combined merge patch: %s\", combinedPatch)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gorilla/csrf with Go\nDESCRIPTION: Command to install the gorilla/csrf library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/gorilla/csrf\n```\n\n----------------------------------------\n\nTITLE: Installing etcd/clientv3 via Go Modules - Bash\nDESCRIPTION: Demonstrates commands to install the etcd v3 Go client using go get. The first command installs the latest release, while the second uses a pre-release version in case etcd 3.5.0 is not released. No dependencies other than Go tooling are required. Run in your terminal within your project directory; outputs no files, simply updates go.mod.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.etcd.io/etcd/client/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get go.etcd.io/etcd/client/v3@v3.5.0-pre\n```\n\n----------------------------------------\n\nTITLE: Using the ansi.Writer in Go\nDESCRIPTION: This snippet demonstrates how to initialize and use `ansi.Writer` from the `muesli/ansi` package. It creates a writer that forwards its output to `os.Stdout` and then writes a byte slice containing a raw ANSI escape sequence (setting text color to red) followed by the reset sequence.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/ansi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/muesli/ansi\"\n\nw := ansi.Writer{Forward: os.Stdout}\nw.Write([]byte(\"\\x1b[31mHello, world!\\x1b[0m\"))\nw.Close()\n```\n\n----------------------------------------\n\nTITLE: Minikube Startup Script Content\nDESCRIPTION: Bash script content to start Minikube with Docker as VM driver and Calico as the CNI plugin.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nminikube start --vm-driver=docker --cni=calico\n```\n\n----------------------------------------\n\nTITLE: Column-specific Cell Merging in Tablewriter Tables using Go\nDESCRIPTION: Specifies which columns to apply cell merging in tablewriter tables by calling SetAutoMergeCellsByColumnIndex with selected column indices. Repeated values in specified columns (e.g. CV2, Amount) are visually merged for improved readability. Data and settings are similar to previous merge example but with more granular control over the merge process. Applies to cases where only certain columns require merging in CLI table output.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n  []string{\"1/1/2014\", \"Domain name\", \"1234\", \"$10.98\"},\n  []string{\"1/1/2014\", \"January Hosting\", \"1234\", \"$10.98\"},\n  []string{\"1/4/2014\", \"February Hosting\", \"3456\", \"$51.00\"},\n  []string{\"1/4/2014\", \"February Extra Bandwidth\", \"4567\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"})\ntable.SetAutoMergeCellsByColumnIndex([]int{2, 3})\ntable.SetRowLine(true)\ntable.AppendBulk(data)\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions via Environment Variable - Console\nDESCRIPTION: This snippet shows how to disable the experimental semantic conventions by unsetting the OTEL_GO_X_RESOURCE environment variable from the shell. Any value other than the string \\\"true\\\" is ignored, but unsetting directly removes the variable from the environment and disables the feature. No additional dependencies are required, and this action ensures the OpenTelemetry Go SDK does not enable the experimental resource attributes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Running fsnotify Tests\nDESCRIPTION: Command for running the full test suite for fsnotify. The -short flag can be used to expedite stress tests. Tests should be run across all supported platforms.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results After Performance Improvement (Intel CPU)\nDESCRIPTION: Benchmark results for name mangling functions after PR #79, showing significant performance improvements and reduced memory allocations on an Intel CPU.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t 9595830\t      3991 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t 9194276\t      3984 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t17002711\t      2123 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t16772926\t      2111 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t 9788331\t      3749 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t 9188260\t      3941 ns/op\t     104 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Installing go-colorable Package using Go Get\nDESCRIPTION: This shell command uses the 'go get' tool to download and install the go-colorable package from its GitHub repository. This makes the package available for use in Go projects.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```\n$ go get github.com/mattn/go-colorable\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace from Docker Image\nDESCRIPTION: Command to create a DevPod workspace from a Docker image. This initializes a development environment using the specified container image.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/create-a-workspace.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create from a docker image\ndevpod up ghcr.io/my-org/my-repo:latest\n```\n\n----------------------------------------\n\nTITLE: VSCode Linting Configuration for golangci-lint\nDESCRIPTION: JSON configuration settings for enabling golangci-lint integration in Visual Studio Code, specifying the lint tool and automatic linting on file save.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n```\n\n----------------------------------------\n\nTITLE: Using Go Modules Replace for Mapstructure Migration\nDESCRIPTION: Go modules replace directive to use the backported v1 release of go-viper/mapstructure during migration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nreplace github.com/mitchellh/mapstructure => github.com/go-viper/mapstructure v1.6.0\n```\n\n----------------------------------------\n\nTITLE: Clock Package Overview in Markdown\nDESCRIPTION: Documentation explaining the purpose and implementation of the clock package, which provides an interface for time operations and mocking capabilities for testing. Mentions it is copied from k8s.io/utils/clock to avoid circular dependencies.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/klog/v2/internal/clock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Clock\n\nThis package provides an interface for time-based operations.  It allows\nmocking time for testing.\n\nThis is a copy of k8s.io/utils/clock. We have to copy it to avoid a circular\ndependency (k8s.io/klog -> k8s.io/utils -> k8s.io/klog).\n```\n\n----------------------------------------\n\nTITLE: Granting Raw Socket Capability to Binary on Linux\nDESCRIPTION: Linux `setcap` command to grant the `cap_net_raw` capability to a compiled Go binary located at `/path/to/your/compiled/binary`. This allows the binary to open raw network sockets when run by a non-root user, which is required when using `pinger.SetPrivileged(true)` on Linux without running the application as root. Requires root privileges to execute `setcap`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```\nsetcap cap_net_raw=+ep /path/to/your/compiled/binary\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the goautoneg Library in Go\nDESCRIPTION: Imports the 'goautoneg' library from its specified Bitbucket repository ('bitbucket.org/ww/goautoneg'). This import makes the functions and types defined within that library available for use.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Installing Minikube on Ubuntu using Setup Script\nDESCRIPTION: Commands to clone Sander van Vugt's CKAD repository and run the Minikube Docker setup script to install Minikube on Ubuntu.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/sandervanvugt/ckad.git\ncd ./ckad\n./minikube-docker-setup.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic State/Province/Territory Select Field with huh in Go\nDESCRIPTION: This snippet defines a select field whose title and options change dynamically based on the value of 'country'. 'TitleFunc' and 'OptionsFunc' are used to pass functions and binding dependencies (here, '&country'), ensuring that when the country selection changes, the correct list of states/provinces/territories and appropriate title are displayed. The options are fetched from an API via a 'fetchStatesForCountry' function. This requires the 'huh' Go package and assumes 'fetchStatesForCountry' is implemented elsewhere.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhuh.NewSelect[string]().\n    Value(&state).\n    Height(8).\n    TitleFunc(func() string {\n        switch country {\n        case \"United States\":\n            return \"State\"\n        case \"Canada\":\n            return \"Province\"\n        default:\n            return \"Territory\"\n        }\n    }, &country).\n    OptionsFunc(func() []huh.Option[string] {\n        opts := fetchStatesForCountry(country)\n        return huh.NewOptions(opts...)\n    }, &country),\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Focus Behavior in Ginkgo 1.2.0-beta\nDESCRIPTION: Code example showing how Ginkgo's improved focus behavior works in version 1.2.0-beta. When using FDescribe with a mix of regular It and FIt blocks, only the focused test B will run while test A will be skipped.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: golang\nCODE:\n```\nFDescribe(\"Some describe\", func() {\n    It(\"A\", func() {})\n\n    FIt(\"B\", func() {})\n})\n```\n\n----------------------------------------\n\nTITLE: Running Go Vet During Tests with Ginkgo using Shell\nDESCRIPTION: Invokes 'go test' with the '-vet' flag enabled, configurable via Ginkgo as of version 1.8.0. This integrates Go's static analysis tool ('go vet') into the testing process to catch suspicious constructs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo test -vet\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Colors in Lip Gloss (Go)\nDESCRIPTION: Demonstrates how to specify different colors for light and dark backgrounds using AdaptiveColor.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.AdaptiveColor{Light: \"236\", Dark: \"248\"}\n```\n\n----------------------------------------\n\nTITLE: Controlling Bracketed Paste Mode with termenv in Go\nDESCRIPTION: These Go code snippets demonstrate how to enable and disable the terminal's bracketed paste mode using functions from the `termenv` package. Enabling this mode helps applications differentiate pasted text from typed input.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Enables bracketed paste mode\ntermenv.EnableBracketedPaste()\n\n// Disables bracketed paste mode\ntermenv.DisableBracketedPaste()\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidatePathPattern Function in Go\nDESCRIPTION: ValidatePathPattern is similar to ValidatePattern but uses the OS-specific path separator. It's suitable for use with PathMatch() function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc ValidatePathPattern(s string) bool\n```\n\n----------------------------------------\n\nTITLE: Copying Decoded Windows CodePage Text Using go-localereader in Go\nDESCRIPTION: Demonstrates copying bytes encoded in a legacy Windows CodePage (e.g., Shift-JIS) to standard output, decoding them to UTF-8 using the go-localereader package in Go. Requires importing the 'io', 'os', 'bytes', and 'localereader' packages. The input 'bytesSjis' should hold the raw encoded data, which is wrapped in a bytes.Reader and then passed to NewAcpReader. Outputs the decoded text to os.Stdout. The snippet is suitable for scripts or command-line tools that need to process encoded text streams.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-localereader/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nio.Copy(os.Stdout, localereader.NewAcpReader(bytes.Reader(bytesSjis)))\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to DevPod Workspace\nDESCRIPTION: This command shows how to SSH into a DevPod workspace. The exact command is provided by DevPod after starting the workspace, typically using the workspace name as part of the SSH address.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/vim.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: Setting Logrus Global Logging Level in Go\nDESCRIPTION: This code sets the minimum global logging level for Logrus using SetLevel, ensuring only messages at 'info' and above will be logged. The default Logrus behavior is shown here. This impacts all subsequent log statements, filtering out lower-level logs (trace/debug). To use, Logrus must be imported and initialized.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Querying Unary Request Error Percentage - Prometheus - JSONiq\nDESCRIPTION: Calculates the percentage of unary gRPC requests that failed for job 'foo' per service, by dividing the sum of failed request rates by the total unary request rate (using a 1-minute window), then multiplying by 100. Designed for use in Service Level Objective (SLO) alerts where error percentage must stay below a threshold.\nDependencies: Prometheus metrics 'grpc_server_handled_total' and 'grpc_server_started_total' with 'grpc_type' and 'grpc_code' labels. Inputs: time-series; Outputs: per-service error rate percentage.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JSONiq\nCODE:\n```\nsum(rate(grpc_server_handled_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\",grpc_code!=\\\"OK\\\"}[1m])) by (grpc_service)\n / \nsum(rate(grpc_server_started_total{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[1m])) by (grpc_service)\n * 100.0\n```\n\n----------------------------------------\n\nTITLE: Installing Tailscale CLI Tools with Go\nDESCRIPTION: Command to install the Tailscale CLI and daemon using Go's package manager. Requires the latest version of Go (1.23).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install tailscale.com/cmd/tailscale{,d}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Go OLE Example\nDESCRIPTION: Instructions for getting the Go OLE package, running tests, and executing an example Excel program. This snippet demonstrates the basic setup and usage of the library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-ole/go-ole/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/go-ole/go-ole\ncd /path/to/go-ole/\ngo test\n\ncd /path/to/go-ole/example/excel\ngo run excel.go\n```\n\n----------------------------------------\n\nTITLE: Migrating Import Paths for Mapstructure in Go\nDESCRIPTION: Shell script to update import paths from the original mitchellh/mapstructure to the new go-viper/mapstructure repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/github.com\\/mitchellh\\/mapstructure/github.com\\/go-viper\\/mapstructure\\/v2/g' $(find . -type f -name '*.go')\n```\n\n----------------------------------------\n\nTITLE: Client Connection Example with Dial\nDESCRIPTION: Example showing how to connect to a named pipe as a client using the Dial function and perform basic I/O operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/npipe.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconn, err := npipe.Dial(`\\\\.\\pipe\\mypipename`)\nif err != nil {\n\t<handle error>\n}\nfmt.Fprintf(conn, \"Hi server!\\n\")\nmsg, err := bufio.NewReader(conn).ReadString('\\n')\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase ASCII - CEL String Extension - Pseudocode\nDESCRIPTION: Outlines usage of the 'lowerAscii' string method, which converts all ASCII-range characters to lowercase while preserving non-ASCII characters. Returns a string with mapped characters. Does not support Unicode full case-mapping.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_19\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.lowerAscii() -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'TacoCat'.lowerAscii()      // returns 'tacocat'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'TacoCÆt Xii'.lowerAscii()  // returns 'tacocÆt xii'\n```\n\n----------------------------------------\n\nTITLE: Locating Kubernetes Configuration File\nDESCRIPTION: Command to list the .kube directory contents to find the Kubernetes configuration file needed for DevPod provider setup.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nls ~/.kube\ncache  completion.bash.inc  config\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for the lz4c Command-Line Tool\nDESCRIPTION: Displays the help text for the 'lz4c' command-line tool. It shows available flags like '-version' and subcommands like 'compress' and 'uncompress', along with their respective options for controlling compression level, block checksums, stream checksums, and block size.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage of lz4c:\n  -version\n        print the program version\n\nSubcommands:\nCompress the given files or from stdin to stdout.\ncompress [arguments] [<file name> ...]\n  -bc\n        enable block checksum\n  -l int\n        compression level (0=fastest)\n  -sc\n        disable stream checksum\n  -size string\n        block max size [64K,256K,1M,4M] (default \"4M\")\n\nUncompress the given files or from stdin to stdout.\nuncompress [arguments] [<file name> ...]\n```\n\n----------------------------------------\n\nTITLE: Docker Credential Helper Configuration\nDESCRIPTION: Example of Docker config.json configuration for credential helpers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"credHelpers\": {\n\t\t\"gcr.io\": \"gcr\",\n\t\t\"eu.gcr.io\": \"gcr\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Provider in DevPod\nDESCRIPTION: Example configuration for a Kubernetes provider in DevPod. It sets up a simple Kubernetes provider using local kubectl to run a workspace in the current kube context.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/driver.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: simple-kubernetes\nversion: v0.0.1\nagent:\n  containerInactivityTimeout: 300 # Pod will automatically kill itself after timeout\n  path: ${DEVPOD}\n  driver: kubernetes\n  kubernetes:\n    # path: /usr/bin/kubectl\n    # namespace: my-namespace-for-devpod\n    # context: default\n    # clusterRole: \"\"\n    # serviceAccount: \"\"\n    buildRepository: \"ghcr.io/my-user/my-repo\"\n    # helperImage: \"ubuntu:latest\"\n    # buildkitImage: \"moby/buildkit\"\n    # buildkitPrivileged: false\n    persistentVolumeSize: 20Gi\n    createNamespace: true\nexec:\n  command: |-\n    ${DEVPOD} helper sh -c \"${COMMAND}\"\n```\n\n----------------------------------------\n\nTITLE: Manifest JSON Structure for Ubuntu Image Tarball\nDESCRIPTION: This JSON snippet shows the structure of the manifest.json file in a tarball for the Ubuntu image. It includes the config file reference, repository tags, and layer information.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/tarball/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Config\": \"sha256:72300a873c2ca11c70d0c8642177ce76ff69ae04d61a5813ef58d40ff66e3e7c\",\n    \"RepoTags\": [\n      \"ubuntu\"\n    ],\n    \"Layers\": [\n      \"423ae2b273f4c17ceee9e8482fa8d071d90c7d052ae208e1fe4963fceb3d6954.tar.gz\",\n      \"de83a2304fa1f7c4a13708a0d15b9704f5945c2be5cbb2b3ed9b2ccb718d0b3d.tar.gz\",\n      \"f9a83bce3af0648efaa60b9bb28225b09136d2d35d0bed25ac764297076dec1b.tar.gz\",\n      \"b6b53be908de2c0c78070fff0a9f04835211b3156c4e73785747af365e71a0d7.tar.gz\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Startup Script on Ubuntu\nDESCRIPTION: Commands to create and make executable a startup script for Minikube that will be used to start the Kubernetes cluster.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd ~\ntouch minikube-start.sh\nsudo chmod u+x minikube-start.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Draft with Git History (Bash)\nDESCRIPTION: This Bash script retrieves the latest Git tag, extracts commit messages since that tag using 'git log', formats them into a markdown list, and prepends this list along with category placeholders ('Features', 'Fixes', 'Maintenance') to the existing CHANGELOG.md file. It facilitates the process of updating release notes by providing a structured starting point based on recent commits. It depends on the `git` command-line tool being available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\necho -e \"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Testing Traffic Flow\nDESCRIPTION: Sends test traffic to the deployed application and verifies logs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n my-ambient exec deploy/sleep -- sh -c 'for i in $(seq 1 100); do curl -s -I http://helloworld:5000/hello; done'\n```\n\n----------------------------------------\n\nTITLE: Merging Prerelease Branch using Git - Go\nDESCRIPTION: This snippet shows the command syntax for merging a prerelease branch into the current branch using Git, formatted as a Go code block for documentation purposes. The branch 'prerelease_<module set>_<new tag>' must exist. Execution requires Git, and the operation will update the branch history with a merge commit if there are changes. Outputs will be standard Git merge messages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\\n\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Comprehensive changelog entries for all versions from v0.1.0 to v1.11.0, detailing feature additions, improvements, and breaking changes across multiple releases.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/multierr/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nReleases\n========\n\nv1.11.0 (2023-03-28)\n====================\n-   `Errors` now supports any error that implements multiple-error\n    interface.\n-   Add `Every` function to allow checking if all errors in the chain\n    satisfies `errors.Is` against the target error.\n\nv1.10.0 (2023-03-08)\n====================\n\n-   Comply with Go 1.20's multiple-error interface.\n-   Drop Go 1.18 support.\n    Per the support policy, only Go 1.19 and 1.20 are supported now.\n-   Drop all non-test external dependencies.\n\nv1.9.0 (2022-12-12)\n===================\n\n-   Add `AppendFunc` that allow passsing functions to similar to\n    `AppendInvoke`.\n\n-   Bump up yaml.v3 dependency to 3.0.1.\n\nv1.8.0 (2022-02-28)\n===================\n\n-   `Combine`: perform zero allocations when there are no errors.\n\n\nv1.7.0 (2021-05-06)\n===================\n\n-   Add `AppendInvoke` to append into errors from `defer` blocks.\n\n\nv1.6.0 (2020-09-14)\n===================\n\n-   Actually drop library dependency on development-time tooling.\n\n\nv1.5.0 (2020-02-24)\n===================\n\n-   Drop library dependency on development-time tooling.\n\n\nv1.4.0 (2019-11-04)\n===================\n\n-   Add `AppendInto` function to more ergonomically build errors inside a\n    loop.\n\n\nv1.3.0 (2019-10-29)\n===================\n\n-   Switch to Go modules.\n\n\nv1.2.0 (2019-09-26)\n===================\n\n-   Support extracting and matching against wrapped errors with `errors.As`\n    and `errors.Is`.\n\n\nv1.1.0 (2017-06-30)\n===================\n\n-   Added an `Errors(error) []error` function to extract the underlying list of\n    errors for a multierr error.\n\n\nv1.0.0 (2017-05-31)\n===================\n\nNo changes since v0.2.0. This release is committing to making no breaking\nchanges to the current API in the 1.X series.\n\n\nv0.2.0 (2017-04-11)\n===================\n\n-   Repeatedly appending to the same error is now faster due to fewer\n    allocations.\n\n\nv0.1.0 (2017-31-03)\n===================\n\n-   Initial release\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Signatures\nDESCRIPTION: Shows the old and new signatures for custom validator functions with added context parameter.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Watching Specific Files for Changes with Ginkgo using Shell\nDESCRIPTION: Runs Ginkgo in watch mode, automatically rerunning tests when files change. The '-watchRegExp' flag allows specifying a custom regular expression to filter which files trigger a rerun, overriding the default ('\\.go$'). Introduced in version 1.4.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nginkgo watch -watchRegExp=...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Machine ID on BSD\nDESCRIPTION: Bash commands to retrieve the machine ID on BSD systems.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat /etc/hostid\n# or (might be empty)\nkenv -q smbios.system.uuid\n```\n\n----------------------------------------\n\nTITLE: Installing uniseg Go Package\nDESCRIPTION: Command to install the uniseg package using go get.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Importing Required Hash Implementations for go-digest in Go\nDESCRIPTION: Highlights the mandatory step of importing the necessary cryptographic hash algorithm implementations (e.g., SHA256, SHA512) for the `go-digest` package to work. These imports, typically done with a blank identifier (`_`) in the main package or application entrypoint, register the algorithms. Omitting these imports will cause the `go-digest` package to panic.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Colors in Lip Gloss (Go)\nDESCRIPTION: Shows different ways to specify colors in Lip Gloss, including ANSI 16 colors, ANSI 256 colors, and True Color.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"5\")  // magenta\nlipgloss.Color(\"9\")  // red\nlipgloss.Color(\"12\") // light blue\n```\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"86\")  // aqua\nlipgloss.Color(\"201\") // hot pink\nlipgloss.Color(\"202\") // orange\n```\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"#0000FF\") // good ol' 100% blue\nlipgloss.Color(\"#04B575\") // a green\nlipgloss.Color(\"#3C3C3C\") // a dark gray\n```\n\n----------------------------------------\n\nTITLE: Installing the 'aec' Go Library using Bash\nDESCRIPTION: This command uses the Go toolchain to download and install the 'aec' library from its GitHub repository. It makes the library available for use in Go projects. Requires Go to be installed and configured.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/morikuni/aec\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks for Doublestar Library in Go\nDESCRIPTION: Benchmark results comparing doublestar's functions with standard Go library functions. It includes tests for Match, PathMatch, Glob, and GlobWalk operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ngoos: darwin\ngoarch: amd64\npkg: github.com/bmatcuk/doublestar/v4\ncpu: Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz\nBenchmarkMatch-8                  285639              3868 ns/op               0 B/op          0 allocs/op\nBenchmarkGoMatch-8                286945              3726 ns/op               0 B/op          0 allocs/op\nBenchmarkPathMatch-8              320511              3493 ns/op               0 B/op          0 allocs/op\nBenchmarkGoPathMatch-8            304236              3434 ns/op               0 B/op          0 allocs/op\nBenchmarkGlob-8                      466           2501123 ns/op          190225 B/op       2849 allocs/op\nBenchmarkGlobWalk-8                  476           2536293 ns/op          184017 B/op       2750 allocs/op\nBenchmarkGoGlob-8                    463           2574836 ns/op          194249 B/op       2929 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Installing the 'ansi' Package using Go\nDESCRIPTION: This command uses the Go toolchain to download and install the 'ansi' package from its GitHub repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mgutz/ansi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/mgutz/ansi\n```\n\n----------------------------------------\n\nTITLE: DevPod Community Badges HTML\nDESCRIPTION: HTML markup for displaying community engagement badges including Slack and DevPod open links with associated images.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[![Join us on Slack!](docs/static/media/slack.svg)](https://slack.loft.sh/) [![Open in DevPod!](https://devpod.sh/assets/open-in-devpod.svg)](https://devpod.sh/open#https://github.com/loft-sh/devpod)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile in devcontainer.json\nDESCRIPTION: JSON configuration that references a Dockerfile to be used for building the development container. This is the standard way to specify a custom Dockerfile in the devcontainer.json format.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/devcontainer-json.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating golang-jwt Module and Pruning Dependencies using Go Modules - Shell\nDESCRIPTION: Runs Go module commands to fetch the golang-jwt v4 package and tidy up dependencies. The first command ensures the correct version of the jwt library is added as a project dependency, while the second cleans up unused dependencies from the go.mod and go.sum files. These commands require a Go project with a go.mod file, and expect all imports updated to `github.com/golang-jwt/jwt/v4`. No input parameters are required, and the output is updated module files. Errors may occur if modules are not initialized or if import paths are outdated.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v2 Package\nDESCRIPTION: Shows how to import the go-jose v2 package using gopkg.in for versioning. This is the current recommended version for new development.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/square/go-jose.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"gopkg.in/square/go-jose.v2\"\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.3.0 Release Notes in Markdown\nDESCRIPTION: This snippet outlines the changes in v1.3.0 of the AWS SDK, including new SSO credential configuration options and a bug fix for profile name normalization.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.3.0 (2021-05-20)\n\n* **Feature**: SSO credentials can now be defined alongside other credential providers within the same configuration profile.\n* **Bug Fix**: Profile names were incorrectly normalized to lower-case, which could result in unexpected profile configurations.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod Development Environment\nDESCRIPTION: Initializes the DevPod development environment with custom configuration for Ztunnel development.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up . --provider-option STORAGE_CLASS=gp2 --provider-option KUBECTL_PATH=/usr/local/bin/kubectl --provider-option KUBERNETES_NAMESPACE=istio-system --provider-option POD_MANIFEST_TEMPLATE=$(pwd)/devpod/pod_manifest.yaml --devcontainer-path devpod/devcontainer.json --ide vscode --debug \\\n  --recreate --reset\n```\n\n----------------------------------------\n\nTITLE: Importing go-restful Without Go Modules\nDESCRIPTION: Demonstrates how to import the go-restful package without using Go modules. This is applicable for versions up to v2.*.*.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful\"\n)\n```\n\n----------------------------------------\n\nTITLE: Determining Extension Presence in Protobuf Message - CEL Macro - Pseudocode\nDESCRIPTION: Demonstrates the usage of a macro to test if a protocol buffer message (using proto2 syntax) has a given extension field set, returning a boolean. This is intended for test-only expressions within CEL and expects both the message and the fully qualified extension field name. Returns true if the field is set, false otherwise; depends on CEL's proto2 extension system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\nproto.hasExt(<msg>, <fully.qualified.extension.name>) -> <bool>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nproto.hasExt(msg, google.expr.proto2.test.int32_ext) // returns true || false\n```\n\n----------------------------------------\n\nTITLE: Benchmarking CBOR Encoding Performance with benchstat (Shell)\nDESCRIPTION: This shell snippet demonstrates how to use the benchstat tool to compare Go benchmark results between two log files, typically representing different versions of the fxamacker/cbor package. It highlights large performance improvements and memory allocation reductions in encoding common Go types to CBOR using the Encode and NewEncoder methods. Requires the benchstat tool and benchmark logs from go test runs as input; outputs a diff table for operations/sec, allocations, and bytes/op. There are no code changes performed—only performance reporting is shown. Input and output data are in standardized Go benchmark log format.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ benchstat bench-v2.4.0.log bench-f9e6291.log \\\ngoos: linux\\ngoarch: amd64\\npkg: github.com/fxamacker/cbor/v2\\ncpu: 12th Gen Intel(R) Core(TM) i7-12700H\\n                                                     │ bench-v2.4.0.log │  bench-f9e6291.log                  │\\n                                                     │      sec/op      │   sec/op     vs base                │\\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                   236.70n ± 2%   58.04n ± 1%  -75.48% (p=0.000 n=10)\\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20         238.00n ± 2%   63.93n ± 1%  -73.14% (p=0.000 n=10)\\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20          238.65n ± 2%   64.88n ± 1%  -72.81% (p=0.000 n=10)\\nNewEncoderEncode/Go_float64_to_CBOR_float-20               242.00n ± 2%   63.00n ± 1%  -73.97% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20               245.60n ± 1%   68.55n ± 1%  -72.09% (p=0.000 n=10)\\nNewEncoderEncode/Go_string_to_CBOR_text-20                 243.20n ± 3%   68.39n ± 1%  -71.88% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                 563.0n ± 2%    378.3n ± 0%  -32.81% (p=0.000 n=10)\\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20       2.043µ ± 2%    1.906µ ± 2%   -6.75% (p=0.000 n=10)\\ngeomean                                                    349.7n         122.7n       -64.92%\\n\\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\\n                                                     │       B/op       │    B/op     vs base                 │\\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_string_to_CBOR_text-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         544.0 ± 0%   416.0 ± 0%   -23.53% (p=0.000 n=10)\\ngeomean                                                      153.4                    ?                       ¹ ²\\n¹ summaries must be >0 to compute geomean\\n² ratios must be >0 to compute geomean\\n\\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\\n                                                     │    allocs/op     │ allocs/op   vs base                 │\\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_string_to_CBOR_text-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         28.00 ± 0%   26.00 ± 0%    -7.14% (p=0.000 n=10)\\ngeomean                                                      2.782                    ?                       ¹ ²\\n¹ summaries must be >0 to compute geomean\\n² ratios must be >0 to compute geomean\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Unit File Template for Go Daemon\nDESCRIPTION: This INI snippet shows an example template for a systemd service unit file, intended for use with the `takama/daemon` Go package on Linux systems. It uses Go's `text/template` syntax (e.g., `{{.Name}}`, `{{.Path}}`) to dynamically insert service details provided by the daemon package during installation. The template defines standard systemd unit sections (`[Unit]`, `[Service]`, `[Install]`) specifying the service description, dependencies, execution command, PID file management, restart policy, and multi-user target integration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/takama/daemon/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription={{.Description}}\nRequires={{.Dependencies}}\nAfter={{.Dependencies}}\n\n[Service]\nPIDFile=/var/run/{{.Name}}.pid\nExecStartPre=/bin/rm -f /var/run/{{.Name}}.pid\nExecStart={{.Path}} {{.Args}}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Importing Kubernetes Client-Go Packages in Go\nDESCRIPTION: This snippet demonstrates how to import various Kubernetes client-go packages in a Go project. It includes packages for applyconfigurations, informers, and typed clients for different Kubernetes resources and API versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/modules.txt#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"k8s.io/client-go/applyconfigurations\"\n\t\"k8s.io/client-go/discovery\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/informers\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\t// Add other specific packages as needed\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.5.0 Release Notes in Markdown\nDESCRIPTION: This snippet outlines the changes in v1.5.0 of the AWS SDK, including support for EC2 IPv6-enabled Instance Metadata Service Endpoints and dependency updates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.5.0 (2021-07-15)\n\n* **Feature**: Support has been added for EC2 IPv6-enabled Instance Metadata Service Endpoints.\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Creating a New DevPod Machine\nDESCRIPTION: Command for creating a new DevPod machine with a specified name and provider. This is the first step in setting up a DevPod environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndevpod machine create <name-of-machine> --provider <provider-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Charset Reader in Go UPnP Client\nDESCRIPTION: Code snippet showing how to restore previous behavior after a breaking change in character encoding handling. It imports the charset package from golang.org/x/net and sets the CharsetReaderFault variable to maintain backward compatibility.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/goupnp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"golang.org/x/net/html/charset\"\n  \"github.com/tailscale/goupnp\"\n)\n\nfunc init() {\n  // should be modified before goupnp libraries are in use.\n  goupnp.CharsetReaderFault = charset.NewReaderLabel\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Meta-Schema Validation with gojsonschema in Go\nDESCRIPTION: Shows how to enable meta-schema validation, which checks schemas themselves for correctness per their meta-schema. Requires gojsonschema; when Validate is set true, AddSchemas will return errors for malformed schemas immediately. Input is a schema with intentional error, demonstrating meta-schema error reporting.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nsl := gojsonschema.NewSchemaLoader()\nsl.Validate = true\nerr := sl.AddSchemas(gojsonschema.NewStringLoader(`{\n     $id\" : \"http://some_host.com/invalid.json\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"multipleOf\" : true\n}`))\n \n```\n\n----------------------------------------\n\nTITLE: Installing Native Package in Go\nDESCRIPTION: Command to install the native package using Go's package management system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/josharian/native/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/josharian/native\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.2.0 Release Notes in Markdown\nDESCRIPTION: This snippet details the changes in v1.2.0 of the AWS SDK, including the addition of a constant for runtime version inspection and dependency updates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.2.0 (2021-05-14)\n\n* **Feature**: Constant has been added to modules to enable runtime version inspection for reporting.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Library for Go\nDESCRIPTION: Command to install the Google Cloud Compute metadata utility library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Getting Process Start Method in Go\nDESCRIPTION: Function signature for detecting if the current process was started by Windows Explorer. Returns a boolean indicating whether the process was launched via Explorer double-click.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Triggering Terminal Notification using Bash\nDESCRIPTION: This Bash command uses a non-standard but commonly supported ANSI escape sequence (OSC 777) to trigger a system notification via the terminal emulator. The format `\\033]777;notify;Title;Body\\033\\\\` sends a notification request with the specified title (\"Title\") and body (\"Body\"). Support and appearance depend on the terminal emulator and operating system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]777;notify;Title;Body\\033\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Borderless ASCII Table with Footer and Bulk Append using Tablewriter in Go\nDESCRIPTION: Shows how to create an ASCII table without a border, set a footer, and append bulk data using tablewriter in Go. The snippet uses SetFooter and SetBorder to customize the table appearance, and AppendBulk to add multiple rows at once. Requires the tablewriter package; input data and formatting are hardcoded. It outputs a compact, borderless table with a total at the footer.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n    []string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n    []string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n    []string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n    []string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetFooter([]string{\"\", \"\", \"Total\", \"$146.93\"}) // Add Footer\ntable.SetBorder(false)                                // Set Border to false\ntable.AppendBulk(data)                                // Add Bulk Data\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Driver in DevPod\nDESCRIPTION: Example configuration for the Docker driver in DevPod. It specifies the Docker CLI path and whether to install Docker in the target environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/driver.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nagent:\n  containerInactivityTimeout: 300\n  docker:\n    path: /usr/bin/docker\n    install: false\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Background Color using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (OSC 11) to set the default background color of the terminal emulator to green (#00ff00). The `echo -ne` command sends the sequence, `\\033]11;` introduces the command, `#00ff00` specifies the color, and `\\007` (BEL) terminates it.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]11;#00ff00\\007\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Initial Model Setup\nDESCRIPTION: Creates the initial model with predefined choices and empty selection map.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc initialModel() model {\n\treturn model{\n\t\t// Our to-do list is a grocery list\n\t\tchoices:  []string{\"Buy carrots\", \"Buy celery\", \"Buy kohlrabi\"},\n\n\t\t// A map which indicates which choices are selected. We're using\n\t\t// the  map like a mathematical set. The keys refer to the indexes\n\t\t// of the `choices` slice, above.\n\t\tselected: make(map[int]struct{}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DevPod Provider Options During Use\nDESCRIPTION: This command shows how to set provider options when using an existing provider with the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider use <provider-name> -o KEY=value\n```\n\n----------------------------------------\n\nTITLE: Log Reprocessing Demo Script Reference\nDESCRIPTION: Reference to a demo shell script that demonstrates log reprocessing capabilities of the Tailscale logs service API.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/logtail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./example/logreprocess/demo.sh\n```\n\n----------------------------------------\n\nTITLE: Using Native Endian in Go\nDESCRIPTION: Example showing how to reference the native.Endian constant for accessing system's native binary.ByteOrder.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/josharian/native/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnative.Endian\n```\n\n----------------------------------------\n\nTITLE: Updating a DevPod Provider to a Specific Version from GitHub\nDESCRIPTION: Updates (or downgrades) a provider to a specific version from a GitHub repository by specifying the version tag after the repository name.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/update-provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider update <provider-name> github.com/my-org/my-repo@v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing go-localereader Using go get in Bash\nDESCRIPTION: Shows how to install the go-localereader package into a Go workspace using the 'go get' command. This is required before importing the package in Go source files. The command updates the module cache and makes the package available for use.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-localereader/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mattn/go-localereader\n```\n\n----------------------------------------\n\nTITLE: Client-Server State Diagram - Outbound Streaming\nDESCRIPTION: ASCII diagram showing the state transitions for outbound streaming between client and server, including remote open/closed flags and data flow.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-23_snippet_2\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n         +--------+                                    +--------+\n         | Client |                                    | Server |\n         +---+----+                                    +----+---+\n             |             +--------------+                 |\n             >-------------+ Request [RO] +----------------->  \n             |             +--------------+                 |\n             |                                              |\n             |                 +------+                     |\n             >-----------------+ Data +--------------------->  \n             |                 +------+                     |\n             |                                              |\n             |               +-----------+                  |\n      local  >---------------+ Data [RC] +------------------> remote\n      closed |               +-----------+                  | closed\n             |                                              |\n             |              +----------+                    |\n    finished <--------------+ Response +--------------------< finished\n             |              +----------+                    |\n             |                                              |\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt hashing function in Go\nDESCRIPTION: Adds a new bcrypt function for password hashing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAdded a bcrypt function\n```\n\n----------------------------------------\n\nTITLE: Running a huh Form and Handling Errors in Go\nDESCRIPTION: This snippet shows how to execute a previously defined 'huh' form with the 'Run' method. If the form returns an error, it logs and terminates the program using 'log.Fatal'. Proper error handling is essential for production CLI apps utilizing interactive forms. This requires both the 'huh' package and Go's standard 'log' package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nerr := form.Run()\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options in Go\nDESCRIPTION: Shows implementation patterns for boolean configuration options with both default true and false cases.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Network Namespaces in Go using netns\nDESCRIPTION: This Go example demonstrates the basic usage of the `netns` package. It locks the current OS thread to prevent accidental namespace switches, saves the original network namespace, creates a new one, lists network interfaces within the new namespace, switches back to the original namespace, and ensures proper cleanup by closing the namespace handles using `defer`. It requires the `fmt`, `net`, `runtime`, and `github.com/vishvananda/netns` packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/vishvananda/netns/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"runtime\"\n\n    \"github.com/vishvananda/netns\"\n)\n\nfunc main() {\n    // Lock the OS Thread so we don't accidentally switch namespaces\n    runtime.LockOSThread()\n    defer runtime.UnlockOSThread()\n\n    // Save the current network namespace\n    origns, _ := netns.Get()\n    defer origns.Close()\n\n    // Create a new network namespace\n    newns, _ := netns.New()\n    defer newns.Close()\n\n    // Do something with the network namespace\n    ifaces, _ := net.Interfaces()\n    fmt.Printf(\"Interfaces: %v\\n\", ifaces)\n\n    // Switch back to the original namespace\n    netns.Set(origns)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Package in Go\nDESCRIPTION: Basic import statement to include gRPC package in Go code. This import allows automatic fetching of dependencies when building or running the code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests in Race Mode\nDESCRIPTION: This command runs Go tests for the project in race mode with specific CPU and timeout settings.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Hex Colors from Databases using Go\nDESCRIPTION: This Go code snippet illustrates how to use a custom type `HexColor` (presumably from `go-colorful` or related code) for database interactions. By implementing the `database/sql.Scanner` and `database/sql/driver.Value` interfaces, `HexColor` allows seamless conversion between its internal representation (likely RGB) and a hex string format (e.g., '#ff0000') commonly stored in database columns. The example shows scanning a query result directly into a `HexColor` variable.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar hc HexColor\n_, err := db.QueryRow(\"SELECT '#ff0000';\").Scan(&hc)\n// hc == HexColor{R: 1, G: 0, B: 0}; err == nil\n```\n\n----------------------------------------\n\nTITLE: Displaying Incorrect Go Module Requirement for ANTLR4 Runtime\nDESCRIPTION: This snippet shows the unexpected and unclear module requirement that results from using 'go get' with the main ANTLR repository. It demonstrates why a separate repository for the Go runtime was created.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/antlr4-go/antlr/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrequire (\n\tgithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230219212500-1f9a474cc2dc\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Global Logger References\nDESCRIPTION: Code formatting commands to update global logger references from zap.L/S to zap.L()/S() for concurrency safety.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngofmt -r \"zap.L -> zap.L()\" -w .\ngofmt -r \"zap.S -> zap.S()\" -w .\n```\n\n----------------------------------------\n\nTITLE: Go Package Dependencies Documentation - Markdown\nDESCRIPTION: Structured list of Go package dependencies showing package import paths and their corresponding licenses. Each entry includes a link to the package documentation and license file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/licenses/tailscale.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Go Packages\n\nSome packages may only be included on certain architectures or operating systems.\n\n\n - [filippo.io/edwards25519](https://pkg.go.dev/filippo.io/edwards25519) ([BSD-3-Clause](https://github.com/FiloSottile/edwards25519/blob/v1.1.0/LICENSE))\n - [github.com/akutz/memconn](https://pkg.go.dev/github.com/akutz/memconn) ([Apache-2.0](https://github.com/akutz/memconn/blob/v0.1.0/LICENSE))\n - [github.com/alexbrainman/sspi](https://pkg.go.dev/github.com/alexbrainman/sspi) ([BSD-3-Clause](https://github.com/alexbrainman/sspi/blob/1a75b4708caa/LICENSE))\n```\n\n----------------------------------------\n\nTITLE: Installing go-ps Library using Go Get (Shell)\nDESCRIPTION: This shell command installs the 'go-ps' Go library from its GitHub repository using the standard 'go get' tool. This allows developers to use the library's functions for cross-platform process listing and manipulation in their Go projects. The '...' indicates potential output from the go get command during the download and installation process.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mitchellh/go-ps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/go-ps\n...\n```\n\n----------------------------------------\n\nTITLE: Converting Struct to String in Go with GoValidator\nDESCRIPTION: Shows how to use the ToString function to convert a struct into a string representation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog with Git Log Output - Bash\nDESCRIPTION: This Bash snippet gathers all commits between the latest tag and HEAD, formats them, and prepends them to the existing CHANGELOG.md. It sorts git tags by version, prepares an enumerated list of commit messages, and builds a template for new changelog entries including placeholders for Features, Fixes, and Maintenance. Dependencies: git with proper repository initialization. Inputs: none (reads directly from git and CHANGELOG.md). Outputs: Overwrites CHANGELOG.md with an updated changelog. Limitations: Must be run in the root of a Git repository and requires valid git history and existing CHANGELOG.md.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\necho -e \"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Panic Check Pattern Example in Go\nDESCRIPTION: Example of an error handling pattern that should be replaced with DPanic level logging. Shows an anti-pattern of using panic for error handling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n  panic(fmt.Sprintf(\"shouldn't ever get here: %v\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Announcing Release in Slack (Markdown)\nDESCRIPTION: This snippet provides a template for announcing a new release of Controller-Runtime in Slack. It includes the version number, key changes, and a link to the release page.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:announce: Controller-Runtime v0.12.0 has been released!\nThis release includes a Kubernetes dependency bump to v1.24.\nFor more info, see the release page: https://github.com/kubernetes-sigs/controller-runtime/releases.\n :tada:  Thanks to all our contributors!\n```\n\n----------------------------------------\n\nTITLE: Custom Unmarshaling of TOML Data in Go\nDESCRIPTION: This complex example demonstrates how to implement custom unmarshaling for TOML data. It shows how to parse email addresses from a TOML file into Go's mail.Address type using the encoding.TextUnmarshaler interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ncontacts = [\n    \"Donald Duck <donald@duckburg.com>\",\n    \"Scrooge McDuck <scrooge@duckburg.com>\",\n]\n```\n\nLANGUAGE: go\nCODE:\n```\n// Create address type which satisfies the encoding.TextUnmarshaler interface.\ntype address struct {\n\t*mail.Address\n}\n\nfunc (a *address) UnmarshalText(text []byte) error {\n\tvar err error\n\ta.Address, err = mail.ParseAddress(string(text))\n\treturn err\n}\n\n// Decode it.\nfunc decode() {\n\tblob := `\n\t\tcontacts = [\n\t\t\t\"Donald Duck <donald@duckburg.com>\",\n\t\t\t\"Scrooge McDuck <scrooge@duckburg.com>\",\n\t\t]\n\t`\n\n\tvar contacts struct {\n\t\tContacts []address\n\t}\n\n\t_, err := toml.Decode(blob, &contacts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, c := range contacts.Contacts {\n\t\tfmt.Printf(\"%#v\\n\", c.Address)\n\t}\n\n\t// Output:\n\t// &mail.Address{Name:\"Donald Duck\", Address:\"donald@duckburg.com\"}\n\t// &mail.Address{Name:\"Scrooge McDuck\", Address:\"scrooge@duckburg.com\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Proxy for Corporate Networks\nDESCRIPTION: Optional bash script to configure proxy settings for the Docker daemon when behind a corporate firewall. Creates a systemd configuration file with proxy environment variables and restarts Docker services.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# If your machine is behind corporate firewall, \n# make sure to define your HTTP_PROXY and HTTPS_PROXY before running the command below\n\nsudo mkdir -p /etc/systemd/system/docker.service.d\nsudo touch /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"[Service]\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='HTTP_PROXY=$HTTP_PROXY'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='HTTPS_PROXY=$HTTPS_PROXY'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='NO_PROXY=$NO_PROXY'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='http_proxy=$http_proxy'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='https_proxy=$https_proxy'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\necho \"Environment='no_proxy=$no_proxy'\" | sudo tee -a /etc/systemd/system/docker.service.d/http-proxy.conf\n\n# restart docker daemon\nsudo systemctl daemon-reload\nsudo systemctl restart docker.service\nsudo systemctl restart containerd.service\n```\n\n----------------------------------------\n\nTITLE: ECR Public Change Log Entry\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, features, bug fixes and dependency changes for the AWS SDK ECR Public client.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/ecrpublic/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.16.2 (2023-05-04)\n\n* No change notes available for this release.\n\n# v1.16.1 (2023-04-24)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.16.0 (2023-04-11)\n\n* **Feature**: This release will allow using registry alias as registryId in BatchDeleteImage request.\n```\n\n----------------------------------------\n\nTITLE: Installing multierr Go Library\nDESCRIPTION: This command installs the latest version of the multierr library using Go's package management system. It fetches the package from the go.uber.org/multierr repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/multierr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Loft Deployment\nDESCRIPTION: Sets the LOFTDEBUG environment variable to true for the Loft deployment in the devpod-pro namespace using kubectl.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n devpod-pro set env deployment/loft LOFTDEBUG=true\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Version History Changelog Entry\nDESCRIPTION: A markdown-formatted version history entry documenting changes made in SDK releases, including dependency updates, features, bug fixes and documentation changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.27.27 (2024-07-18)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Adding float64 arithmetic functions in Go\nDESCRIPTION: Adds new float64 arithmetic functions like addf, add1f, subf, divf, mulf, maxf, and minf.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nAdded float64 arithmetic addf, add1f, subf, divf, mulf, maxf, and minf\n```\n\n----------------------------------------\n\nTITLE: Controlling Terminal Screen with termenv in Go\nDESCRIPTION: This Go code shows functions available on the `termenv.Output` object for manipulating the terminal screen. Capabilities include resetting styles, saving/restoring the screen state, switching to/from the alternate screen buffer, clearing the screen or lines, changing the scrolling region, and inserting/deleting lines within the scrollable region.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Reset the terminal to its default style, removing any active styles\noutput.Reset()\n\n// RestoreScreen restores a previously saved screen state\noutput.RestoreScreen()\n\n// SaveScreen saves the screen state\noutput.SaveScreen()\n\n// Switch to the altscreen. The former view can be restored with ExitAltScreen()\noutput.AltScreen()\n\n// Exit the altscreen and return to the former terminal view\noutput.ExitAltScreen()\n\n// Clear the visible portion of the terminal\noutput.ClearScreen()\n\n// Clear the current line\noutput.ClearLine()\n\n// Clear a given number of lines\noutput.ClearLines(n)\n\n// Set the scrolling region of the terminal\noutput.ChangeScrollingRegion(top, bottom)\n\n// Insert the given number of lines at the top of the scrollable region, pushing\n// lines below down\noutput.InsertLines(n)\n\n// Delete the given number of lines, pulling any lines in the scrollable region\n// below up\noutput.DeleteLines(n)\n```\n\n----------------------------------------\n\nTITLE: Changing Help Input Rune in Survey\nDESCRIPTION: Demonstrates how to change the help input rune from the default '?' to a custom character.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_17\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/AlecAivazis/survey/v2\"\n)\n\nnumber := \"\"\nprompt := &survey.Input{\n    Message: \"If you have this need, please give me a reasonable message.\",\n    Help:    \"I couldn't come up with one.\",\n}\n\nsurvey.AskOne(prompt, &number, survey.WithHelpInput('^'))\n```\n\n----------------------------------------\n\nTITLE: Marking a Flag as Hidden\nDESCRIPTION: Demonstrates how to mark a flag as hidden, which keeps it functional but prevents it from appearing in usage/help text.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Tables in Markdown Format with Custom Borders via Tablewriter in Go\nDESCRIPTION: Shows how to produce a markdown-friendly ASCII table by setting borders with Tablewriter.Border and customizing the center separator. Data is provided as an array of rows and configured with SetHeader and AppendBulk. The snippet is suitable for generating markdown tables to paste in documentation. All formatting options are handled within the tablewriter package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n\t[]string{\"1/1/2014\", \"Domain name\", \"2233\", \"$10.98\"},\n\t[]string{\"1/1/2014\", \"January Hosting\", \"2233\", \"$54.95\"},\n\t[]string{\"1/4/2014\", \"February Hosting\", \"2233\", \"$51.00\"},\n\t[]string{\"1/4/2014\", \"February Extra Bandwidth\", \"2233\", \"$30.00\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Date\", \"Description\", \"CV2\", \"Amount\"})\ntable.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})\ntable.SetCenterSeparator(\"|\")\ntable.AppendBulk(data) // Add Bulk Data\ntable.Render()\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History\nDESCRIPTION: Changelog entries documenting version updates, dependency changes, features, and bug fixes for an AWS SDK module over time.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/endpoints/v2/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v2.6.15 (2024-07-10.2)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v2.6.14 (2024-07-10)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n[...additional version history entries...]\n```\n\n----------------------------------------\n\nTITLE: Testing Set Containment - CEL Sets Library - Pseudocode\nDESCRIPTION: Documents the 'sets.contains' function for determining if the first list contains all elements from the second list, using CEL's equality rules. If the second list is empty, the result is always true; otherwise, checks all elements for membership. Works with mixed types and different numeric representations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_12\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.contains(list(T), list(T)) -> bool\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.contains([], []) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.contains([], [1]) // false\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.contains([1, 2, 3, 4], [2, 3]) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.contains([1, 2.0, 3u], [1.0, 2u, 3]) // true\n```\n\n----------------------------------------\n\nTITLE: Building DevPod E2E Test Binaries\nDESCRIPTION: Shell command to build the necessary binaries for E2E testing, specifying build directory and source directory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/e2e/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBUILDDIR=bin SRCDIR=\"..\" ../hack/build-e2e.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pattern Matching in Doublestar v4\nDESCRIPTION: This code snippet shows how pattern matching works in Doublestar v4, specifically demonstrating that a pattern like 'path/to/a/**' will now match 'path/to/a', which is a change from previous versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/UPGRADING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nMatch(\"path/to/a/**\", \"path/to/a\")\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The official Developer Certificate of Origin v1.1 text that contributors must agree to when signing off their contributions. This document outlines the terms and conditions for contributing code to the project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: YAML Marshaling and Unmarshaling Example in Go\nDESCRIPTION: Demonstrates how to marshal and unmarshal YAML data in Go using both struct and map types. Shows handling of nested structures, custom tags, and flow style arrays.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Compressing and Uncompressing a String in Go using LZ4\nDESCRIPTION: This Go code snippet demonstrates how to compress a string using 'lz4.NewWriter' and then uncompress it using 'lz4.NewReader'. It utilizes 'io.Pipe' to connect the writer and reader in a streaming fashion within a goroutine, copying the original string to the compressing writer and the decompressed result from the reader to standard output. Dependencies include the 'strings', 'io', 'os', and 'github.com/pierrec/lz4/v4' packages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Compress and uncompress an input string.\ns := \"hello world\"\nr := strings.NewReader(s)\n\n// The pipe will uncompress the data from the writer.\npr, pw := io.Pipe()\nzw := lz4.NewWriter(pw)\nzr := lz4.NewReader(pr)\n\ngo func() {\n\t// Compress the input string.\n\t_, _ = io.Copy(zw, r)\n\t_ = zw.Close() // Make sure the writer is closed\n\t_ = pw.Close() // Terminate the pipe\n}()\n\n_, _ = io.Copy(os.Stdout, zr)\n\n// Output:\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Example Output of Kubernetes Cluster Check\nDESCRIPTION: Sample output from the kubectl get all command showing the default Kubernetes service.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get all\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/kubernetes   ClusterIP   xxx.yyy.zzz.qqq    <none>        443/TCP   4d14h\n```\n\n----------------------------------------\n\nTITLE: Basic Expression Evaluation in Gval\nDESCRIPTION: Example of evaluating a simple boolean expression (10 > 0) using Gval. This demonstrates the basic usage of the library for boolean comparison operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n10 > 0\n```\n\n----------------------------------------\n\nTITLE: Adding Kubernetes Provider to DevPod\nDESCRIPTION: Command to add a local Kubernetes provider configuration to DevPod using a provider.yaml file\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/simple-k8s-provider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod provider add ./examples/provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Catppuccin Go Package\nDESCRIPTION: Command to install the Catppuccin Go package using go get command.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/catppuccin/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/catppuccin/go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Character at Index - CEL String Extension - Pseudocode\nDESCRIPTION: Shows how to use the 'charAt' method to retrieve a single-character substring at a specific index in a string. Negative indices or those past length are errors. Returns an empty string if the index equals string length. Only applies to strings, inputs and outputs are string type.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_15\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.charAt(<int>) -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello'.charAt(4)  // return 'o'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello'.charAt(5)  // return ''\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello'.charAt(-1) // error\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests with Make (Make)\nDESCRIPTION: Executes the project's test suite using the `make test` command. This should be run before committing changes to ensure all tests pass. Requires the `make` utility and a correctly configured Makefile with a `test` target.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) v1.1 Text\nDESCRIPTION: Displays the full text of the Developer Certificate of Origin Version 1.1. Contributors must understand and certify these terms to contribute, typically by adding a 'Signed-off-by' line to their Git commit messages.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for DevPod Documentation\nDESCRIPTION: Command to generate static content into the 'build' directory that can be deployed to any static content hosting service.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Soft Palettes with Constraints using Go\nDESCRIPTION: This Go snippet illustrates advanced random palette generation using `colorful.SoftPaletteEx`. It defines a custom constraint function `isbrowny` that checks if a color in Lab space falls within a specific brownish range (by converting to HCL). This function is then passed to `SoftPaletteEx` within a `SoftPaletteSettings` struct, along with iteration count and the `ManySamples` flag (set to true due to the restrictive nature of `isbrowny`). This allows generating palettes with a specific 'feel'. Depends on `go-colorful`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc isbrowny(l, a, b float64) bool {\n    h, c, L := colorful.LabToHcl(l, a, b)\n    return 10.0 < h && h < 50.0 && 0.1 < c && c < 0.5 && L < 0.5\n}\n// Since the above function is pretty restrictive, we set ManySamples to true.\nbrownies := colorful.SoftPaletteEx(10, colorful.SoftPaletteSettings{isbrowny, 50, true})\n```\n\n----------------------------------------\n\nTITLE: Adding randInt function in Go\nDESCRIPTION: Adds a new randInt function to generate random integers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nAdded randInt function\n```\n\n----------------------------------------\n\nTITLE: Running Development Tools in Go\nDESCRIPTION: Commands for running tests, formatting code, and performing code quality checks using Go tools.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/square/go-jose.v2/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test\ngo fmt\ngolint\nerrcheck\n```\n\n----------------------------------------\n\nTITLE: Adding array chunking function in Go\nDESCRIPTION: Adds a new chunk function to split arrays into smaller subarrays.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nAdded chunk function to split array into smaller arrays\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Community Calls Documentation\nDESCRIPTION: Markdown formatted document that lists community call recordings and provides incident reporting instructions\nSOURCE: https://github.com/loft-sh/devpod/blob/main/COMMUNITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Community Calls \n\nThis repository contains the maintainer community calls from the DevPod Community. Join us on [Slack](https://slack.loft.sh/) if you have feedback, want to ask questions, or see something covered in the maintainers meeting. The complete Playlist is on [YouTube](https://youtube.com/playlist?list=PL8MSvTvMDqe5hZFjZX9lw1Ecq2xwWivp7&feature=shared).\n\n- [DevPod Maintainers Meeting : 03/07/2024](https://www.youtube.com/live/pYtQtQh6Zp4?si=DPqTYE1JfewMCBdm)\n- [DevPod Maintainers Meeting : 02/29/2024](https://www.youtube.com/live/btYC7VpJZws?si=nDBcMk2GDnI5Xtyo)\n- [DevPod Maintainers Meeting : 02/22/2024](https://youtu.be/2NmGUsj7LFw?feature=shared)\n- [DevPod Maintainers Meeting : 02/19/2024](https://youtu.be/-1EqOf8A-7c?feature=shared)\n\nFeel free to explore past discussions and catch up on what you might have missed. \n\n## Reporting An Incident\n\nPlease email hrittik@loft.sh to initiate an incident report. **Please do not make reports via our public slack channel.**\n```\n\n----------------------------------------\n\nTITLE: Using Go Test Install Flag (Deprecated) with Ginkgo using Shell\nDESCRIPTION: Shows the usage of the '-i' argument with 'go test'. This flag, which installed dependencies to speed up subsequent builds, was noted in version 1.7.0 as being avoided for Go versions 1.10 and later, as its behavior changed and became less relevant with the build cache.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngo test -i\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for go-units Contributions\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must agree to when submitting patches to the go-units project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Fuzzed Values for a Simple Struct in Go\nDESCRIPTION: Demonstrates how to use the Consumer to fill a simple struct with fuzzed values. The GenerateStruct method handles the struct field detection and value assignment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n    Age  int\n}\np := Person{}\n// Fill p with values based on the data provided by the fuzzing engine:\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod Workspace\nDESCRIPTION: Command to initialize a new DevPod workspace using the VS Code sample repository\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/simple-k8s-provider/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up github.com/microsoft/vscode-course-sample\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Testing Gitignore Behavior\nDESCRIPTION: A shell script that creates a test directory structure with a nested file, initializes a git repository, and sets up a gitignore file to demonstrate how git excludes matching files.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/shibumi/go-pathspec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /tmp/test/internal/util\ntouch /tmp/test/internal/util/parse.go\ncd /tmp/test/\ngit init\necho \"parse.go\" > .gitignore\n```\n\n----------------------------------------\n\nTITLE: Installing termenv Library using Go\nDESCRIPTION: This command uses the Go toolchain to download and install the `termenv` library from its GitHub repository. This is the standard way to add the dependency to a Go project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/muesli/termenv\n```\n\n----------------------------------------\n\nTITLE: Generating Random Colors in HCL Space using Go\nDESCRIPTION: This Go snippet demonstrates generating random colors within specific HCL (Hue, Chroma, Lightness) ranges using `colorful.Hcl` and `rand.Float64` from the standard `math/rand` package. It shows examples of creating random blue shades, random dark colors, and random light colors by constraining the H, C, and L parameters to desired intervals. This requires the `go-colorful` library and initialization of the random seed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nrandom_blue := colorful.Hcl(180.0+rand.Float64()*50.0, 0.2+rand.Float64()*0.8, 0.3+rand.Float64()*0.7)\nrandom_dark := colorful.Hcl(rand.Float64()*360.0, rand.Float64(), rand.Float64()*0.4)\nrandom_light := colorful.Hcl(rand.Float64()*360.0, rand.Float64(), 0.6+rand.Float64()*0.4)\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits Since a Tag - Shell\nDESCRIPTION: This snippet uses git to display concise commit messages between a specified tag and the current HEAD. Requires Git, and '<last tag>' should be replaced by the relevant version tag. The output is a one-line summary for each commit, useful for compiling changelogs.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \\\"<last tag>..HEAD\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic ASCII Table with Tablewriter in Go\nDESCRIPTION: Demonstrates the creation of a simple ASCII table in Go using the tablewriter.NewWriter function. No external dependencies beyond the tablewriter package and os.Stdout are required. Data is iteratively appended to the table and rendered, resulting in a padded and aligned text-based table suitable for CLI output. Inputs are hardcoded data rows and headers; output is formatted ASCII displayed to Stdout.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/olekukonko/tablewriter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ndata := [][]string{\n    []string{\"A\", \"The Good\", \"500\"},\n    []string{\"B\", \"The Very very Bad Man\", \"288\"},\n    []string{\"C\", \"The Ugly\", \"120\"},\n    []string{\"D\", \"The Gopher\", \"800\"},\n}\n\ntable := tablewriter.NewWriter(os.Stdout)\ntable.SetHeader([]string{\"Name\", \"Sign\", \"Rating\"})\n\nfor _, v := range data {\n    table.Append(v)\n}\ntable.Render() // Send output\n\n```\n\n----------------------------------------\n\nTITLE: DevPod Version Specification\nDESCRIPTION: This specifies the version number 1.78.1 for the DevPod project. Version numbers typically follow semantic versioning (MAJOR.MINOR.PATCH) format and are used for release tracking and dependency management.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/VERSION.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.78.1\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action Workflow for DevPod\nDESCRIPTION: This YAML configuration sets up a GitHub Action workflow for building and testing DevPod. It runs on multiple operating systems (Ubuntu, macOS, Windows) and Go versions (1.20, 1.21), with specific steps for each OS.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/docker/go-connections/sockets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test\non:\n  push:\n    branches:\n      - main\n      - dev\n  pull_request:\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        go: [\"1.20\", \"1.21\"]\n    runs-on: ${{ matrix.os }}\n    env:\n      GOTESTSUM_FORMAT: standard-verbose\n    steps:\n      - name: Set up Go ${{ matrix.go }}\n        uses: actions/setup-go@v4\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Check out code\n        uses: actions/checkout@v3\n      - name: Install Task\n        uses: arduino/setup-task@v1\n        with:\n          version: 3.x\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Install Dependencies\n        if: runner.os != 'Windows'\n        run: |\n          go install github.com/vektra/mockery/v2@v2.32.0\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.52.2\n          go install gotest.tools/gotestsum@v1.10.0\n      - name: Install Dependencies (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          go install github.com/vektra/mockery/v2@v2.32.0\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.52.2\n          go install gotest.tools/gotestsum@v1.10.0\n        shell: bash\n      - name: Build\n        run: task build\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.52.2\n      - name: Test\n        run: task test\n      - name: Generate\n        run: task generate\n      - name: Check for uncommitted changes\n        run: |\n          git diff --exit-code || (\n            echo \"Detected uncommitted changes after build. Please run 'task generate' and commit changes.\"\n            git diff\n            exit 1\n          )\n\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in Go Validator\nDESCRIPTION: Demonstrates how to add custom error messages to validation rules using the tilde separator.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using All Comprehension with Two Variables in CEL\nDESCRIPTION: Tests whether all elements in a list or map satisfy a given predicate. Evaluates similarly to logical AND and short-circuits on first false value.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_27\n\nLANGUAGE: cel\nCODE:\n```\n[1, 2, 3].all(i, j, i < j) // returns true\n{'hello': 'world', 'taco': 'taco'}.all(k, v, k != v) // returns false\n\n// Combines two-variable comprehension with single variable\n{'h': ['hello', 'hi'], 'j': ['joke', 'jog']}\n  .all(k, vals, vals.all(v, v.startsWith(k))) // returns true\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables and Generating Semantic Conventions - Shell\nDESCRIPTION: This snippet demonstrates preparing for and executing OpenTelemetry semantic convention schema generation using shell commands. It requires Docker to be installed for pulling the 'otel/semconvgen:latest' image, and GNU Make to trigger the correct Makefile target. The TAG and OTEL_SEMCONV_REPO environment variables must be set to the desired version and path before running 'make semconv-generate'. The expected output is a new sub-package of 'semconv'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\\\"v1.21.0\\\" # Change to the release version you are generating.\\nexport OTEL_SEMCONV_REPO=\\\"/absolute/path/to/opentelemetry/semantic-conventions\\\"\\ndocker pull otel/semconvgen:latest\\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Commas in Large Numbers in Go\nDESCRIPTION: This example shows how to use the humanize.Comma() function to insert commas into large numbers for better readability.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You owe $%s.\\n\", humanize.Comma(6582491)) // You owe $6,582,491.\n```\n\n----------------------------------------\n\nTITLE: Converting Hex Color to Fast Linear RGB using Go\nDESCRIPTION: This Go snippet demonstrates converting a color defined by a hex string (`#FF0000`) to its linear RGB representation using the `FastLinearRgb` method provided by the `go-colorful` library. This method offers a quick conversion, though potentially less precise than alternative methods for achieving linear RGB values. The result is returned as three float64 values (r, g, b).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nr, g, b := colorful.Hex(\"#FF0000\").FastLinearRgb()\n```\n\n----------------------------------------\n\nTITLE: Windows Console Input Library Heading\nDESCRIPTION: Markdown header defining the library name 'coninput' and its purpose for handling Windows Console API input in Go\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/erikgeiser/coninput/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# coninput\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Options for gorilla/csrf in Go\nDESCRIPTION: This snippet illustrates how to configure multiple options for the gorilla/csrf middleware in Go. It initializes csrf.Protect with a secret key and sets a custom request header (`Authenticity-Token`) using csrf.RequestHeader, a custom form field name (`authenticity_token`) using csrf.FieldName, and a custom error handler using csrf.ErrorHandler. The configured middleware is then applied to a gorilla/mux router.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    CSRF := csrf.Protect(\n            []byte(\"a-32-byte-long-key-goes-here\"),\n            csrf.RequestHeader(\"Authenticity-Token\"),\n            csrf.FieldName(\"authenticity_token\"),\n            csrf.ErrorHandler(http.HandlerFunc(serverError(403))),\n    )\n\n    r := mux.NewRouter()\n    r.HandleFunc(\"/signup\", GetSignupForm)\n    r.HandleFunc(\"/signup/post\", PostSignupForm)\n\n    http.ListenAndServe(\":8000\", CSRF(r))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching a Container Image using `go-containerregistry/pkg/v1/remote` in Go\nDESCRIPTION: This Go code snippet demonstrates fetching a container image from a remote registry using the `remote.Image` function from the `go-containerregistry` library. It first parses the image reference using `name.ParseReference` and then retrieves the image, authenticating via the default keychain using `remote.WithAuthFromKeychain` and `authn.DefaultKeychain`. Basic error handling is included.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/remote/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/google/go-containerregistry/pkg/authn\"\n\t\"github.com/google/go-containerregistry/pkg/name\"\n\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n)\n\nfunc main() {\n\tref, err := name.ParseReference(\"gcr.io/google-containers/pause\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\timg, err := remote.Image(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// do stuff with img\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Random Warm/Happy Colors in Go\nDESCRIPTION: This Go snippet shows the usage of helper functions from the `go-colorful` library to generate random 'warm' and 'happy' colors. `colorful.WarmColor()` and `colorful.HappyColor()` use the CIE-L*C*h° space for better perceptual uniformity, while `colorful.FastWarmColor()` and `colorful.FastHappyColor()` use the HSV space for faster generation but potentially less coherent results. Depends on the `go-colorful` library and requires random seed initialization.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ncolorful.WarmColor()\ncolorful.HappyColor()\ncolorful.FastWarmColor()\ncolorful.FastHappyColor()\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Dependency for Python Project - Text\nDESCRIPTION: This snippet defines codespell version 2.3.0 as a required dependency, likely in a requirements.txt file for Python projects. Codespell is a tool that detects and corrects common spelling mistakes in source code. The specified version ensures consistent development environments by locking the dependency version.\nInputs: The file is read by tools like pip; no runtime parameters. Outputs: Enables project-wide spelling checks via codespell. Requires an environment with Python and pip. Limitation: Only manages codespell, no other dependencies listed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncodespell==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Wrapping DevPod execution in a shell script for PATH resolution\nDESCRIPTION: This shell script wraps the DevPod executable in a shell environment to resolve issues with utilities not being found in the PATH. It uses /usr/bin/env to locate the shell interpreter and then executes DevPod within a new shell instance.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/troubleshooting/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#! /usr/bin/env sh\n\nexec $SHELL -c 'exec /Applications/DevPod.app/Contents/MacOS/DevPod'\n```\n\n----------------------------------------\n\nTITLE: Testing Kubernetes Installation\nDESCRIPTION: Verifies that Kubernetes is running by listing all resources in the current namespace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get all\n```\n\n----------------------------------------\n\nTITLE: Running a Local Go Documentation Server (Shell)\nDESCRIPTION: Installs the 'pkgsite' tool using 'go install' and then runs it. This command starts a local web server that serves Go documentation for the project, allowing developers to preview how their Go Doc comments and examples will render on sites like pkg.go.dev.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure Library in Go\nDESCRIPTION: Command to install the mapstructure library using Go modules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-viper/mapstructure/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/go-viper/mapstructure/v2\n```\n\n----------------------------------------\n\nTITLE: Using Strip ANSI package in Go\nDESCRIPTION: This Go code demonstrates how to use the 'stripansi' package to remove ANSI escape codes from a string. It imports the package, applies the Strip function to a string containing ANSI codes, and prints the cleaned result.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/acarl005/stripansi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"github.com/acarl005/stripansi\"\n)\n\nfunc main() {\n\tmsg := \"\\x1b[38;5;140m foo\\x1b[0m bar\"\n\tcleanMsg := stripansi.Strip(msg)\n\tfmt.Println(cleanMsg) // \" foo bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: DevPod Navigation Links HTML\nDESCRIPTION: HTML implementation of the main navigation links for DevPod documentation and social media, including website, quickstart, documentation, blog, Twitter, and Slack links.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n### **[Website](https://www.devpod.sh)** • **[Quickstart](https://www.devpod.sh/docs/getting-started/install)** • **[Documentation](https://www.devpod.sh/docs/what-is-devpod)** • **[Blog](https://loft.sh/blog)** • **[𝕏 (Twitter)](https://x.com/loft_sh)** • **[Slack](https://slack.loft.sh/)**\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of errwrap Package in Go\nDESCRIPTION: Demonstrates how to use the errwrap package to wrap errors, check for contained errors, and extract specific error types. It includes examples of Contains, ContainsType, and GetType functions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic fsnotify Implementation in Go\nDESCRIPTION: Example showing basic usage of fsnotify to watch for filesystem events. Creates a watcher, sets up event handling in a goroutine, and monitors a directory for changes. Demonstrates handling of both events and errors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Using xxhash Hashing Functions in Go\nDESCRIPTION: Demonstrates the main API functions and types provided by the xxhash Go library, including functions to compute the 64-bit hash of byte slices and strings, as well as the Digest type for incremental hashing. Relies on importing the github.com/cespare/xxhash/v2 package. Input parameters include byte slices or strings; outputs are 64-bit hashes as uint64 values. The Digest type allows streaming/incremental hashing with Write methods.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Proxying Credential Helper Output with tee - Bash\nDESCRIPTION: Implements a credential helper that invokes 'docker-credential-gcr', piping its output through 'tee' to display it both to stderr and stdout for diagnosis. This approach facilitates visibility into the underlying credential process by duplicating output while maintaining compatibility with Docker and related tools. Requires 'docker-credential-gcr', 'tee', and 'cat' to be available, and passes through all arguments securely.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/authn/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\ndocker-credential-gcr $@ | tee >(cat 1>&2)\n\n```\n\n----------------------------------------\n\nTITLE: Converting Standard Color to colorful.Color (Go)\nDESCRIPTION: Illustrates how to convert any type implementing Go's standard `image/color.Color` interface into a `colorful.Color` using the `colorful.MakeColor` function. It demonstrates this with `color.Gray16` and shows how to check the boolean return value (`ok`) which indicates if the conversion was successful (it might fail for alpha=0 due to premultiplied alpha).\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nc, ok := colorful.MakeColor(color.Gray16{12345})\n```\n\n----------------------------------------\n\nTITLE: Initializing Blockdevice Access for ProcFS/SysFS in Go\nDESCRIPTION: This Go snippet shows how to initialize access to both the `/proc` and `/sys` filesystems using the `blockdevice` sub-package. It creates a new filesystem object with `blockdevice.NewFS(\"/proc\", \"/sys\")` and then fetches process disk statistics using `fs.ProcDiskstats()`. This is necessary for components like blockdevice monitoring that require data from both pseudo-filesystems.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    fs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\n    stats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Simple ICMP Ping Example in Go\nDESCRIPTION: Demonstrates basic usage of the `pro-bing` library to send a fixed number (3) of ICMP echo requests to a target host (\"www.google.com\"). It initializes a pinger, sets the count, runs the ping operation synchronously (blocking until finished), handles potential errors, and retrieves the final statistics.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\npinger, err := probing.NewPinger(\"www.google.com\")\nif err != nil {\n\tpanic(err)\n}\npinger.Count = 3\nerr = pinger.Run() // Blocks until finished.\nif err != nil {\n\tpanic(err)\n}\nstats := pinger.Statistics() // get send/receive/duplicate/rtt stats\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling DevPod Telemetry via Context Options\nDESCRIPTION: Command to disable telemetry for a specific DevPod context by setting the TELEMETRY option to false. This provides a targeted way to opt out of telemetry without affecting the entire environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevpod context set-options -o TELEMETRY=false\n```\n\n----------------------------------------\n\nTITLE: Creating the PersistentVolume in Kubernetes\nDESCRIPTION: Applies the PersistentVolume YAML definition to create the resource in the Kubernetes cluster.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create -f ~/devpods/devpod-pv.yml\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.6.0 Release Notes in Markdown\nDESCRIPTION: This snippet details the changes in v1.6.0 of the AWS SDK, including new error handling for deferred close calls and dependency updates.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.6.0 (2021-08-04)\n\n* **Feature**: adds error handling for defered close calls\n* **Dependency Update**: Updated `github.com/aws/smithy-go` to latest version.\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla WebSocket Package in Go\nDESCRIPTION: Command to install the Gorilla WebSocket package using Go's package management system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/websocket/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/gorilla/websocket\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Before Performance Improvement\nDESCRIPTION: Benchmark results for various name mangling functions at commit b3e7a5386f996177e4808f11acb2aa93a0f660df, showing performance metrics and memory allocations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t  862623\t     44101 ns/op\t   10450 B/op\t     732 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t  853656\t     40728 ns/op\t   10468 B/op\t     734 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t 1268312\t     27813 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t 1276322\t     27903 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t  895334\t     40354 ns/op\t   10472 B/op\t     731 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t  882441\t     40678 ns/op\t   10566 B/op\t     749 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions via Environment Variable - Console\nDESCRIPTION: This snippet demonstrates how to enable experimental OpenTelemetry resource semantic conventions by setting the OTEL_GO_X_RESOURCE environment variable to \\\"true\\\" in the shell. No additional dependencies are required other than having the environment recognize the variable, and the input must be the case-insensitive string \\\"true\\\". Once set, resource detectors in the OpenTelemetry Go SDK will add experimental attributes as defined in the semantic conventions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: Prerelease Make Target Usage - Shell\nDESCRIPTION: This command invokes the 'prerelease' Makefile target, creating a branch named 'prerelease_<module set>_<new tag>' which accumulates all release changes for the specified module set. GNU Make must be installed, and MODSET should be set to the correct module set. No outputs are written to stdout directly except by the Makefile recipes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\\n\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod Build Example\nDESCRIPTION: Command to initialize and start a DevPod project using a local build configuration from the examples directory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/build/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevpod up ./examples/build\n```\n\n----------------------------------------\n\nTITLE: Retrieving Machine ID on Windows\nDESCRIPTION: Batch command to retrieve the machine ID on Windows systems using the registry.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-23_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n```\n\n----------------------------------------\n\nTITLE: Running Tests to View Color Combinations\nDESCRIPTION: This command executes the Go tests for the 'ansi' package. Running the tests typically includes output demonstrating various color and attribute combinations available in the library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mgutz/ansi/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Examples\nDESCRIPTION: Examples of struct definitions with different validation tag configurations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running pro-bing Executable\nDESCRIPTION: Commands to install the native Go `ping` executable provided by the `pro-bing` project using `go get` with the `...` wildcard, which installs commands within the package. Followed by an example of how to run the installed binary assuming `$GOPATH/bin` is in the system's PATH. Requires the Go toolchain.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngo get -u github.com/prometheus-community/pro-bing/...\n$GOPATH/bin/ping\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting DevPod Environment\nDESCRIPTION: Forces deletion of the current DevPod environment.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevpod delete . --force\n```\n\n----------------------------------------\n\nTITLE: Command-Line Output for Provider Options\nDESCRIPTION: Sample output from the 'devpod provider options' command showing how options are displayed to the user. Password fields are masked with asterisks for security.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n~$ adevpod provider options civo\n\n          NAME            | REQUIRED |          DESCRIPTION           |               DEFAULT                |                VALUE\n----------------------------+----------+--------------------------------+--------------------------------------+---------------------------------------\nAGENT_PATH                | false    | The path where to inject the   | /var/lib/toolbox/devpod              | /var/lib/toolbox/devpod\n                          |          | DevPod agent to.               |                                      |\nCIVO_API_KEY              | true     | The civo api key to use        |                                      | ********\nCIVO_DISK_IMAGE           | false    | The disk image to use.         | d927ad2f-5073-4ed6-b2eb-b8e61aef29a8 | d927ad2f-5073-4ed6-b2eb-b8e61aef29a8\n\n...\n```\n\n----------------------------------------\n\nTITLE: Querying 99th Percentile Latency of Unary Requests - Prometheus - JSONiq\nDESCRIPTION: Retrieves a 99th-percentile (p99) quantile estimate of the handling time for unary RPCs per service, using Prometheus' histogram_quantile function over a 5-minute window. This surfaces high-latency outliers and helps diagnose performance bottlenecks across services.\nDependencies: 'grpc_server_handling_seconds_bucket' metric with buckets and 'grpc_type'; correct histogram configuration required. Input: Prometheus histograms; Output: p99 latency in seconds.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/README.md#2025-04-23_snippet_7\n\nLANGUAGE: JSONiq\nCODE:\n```\nhistogram_quantile(0.99, \n  sum(rate(grpc_server_handling_seconds_bucket{job=\\\"foo\\\",grpc_type=\\\"unary\\\"}[5m])) by (grpc_service,le)\n)\n```\n\n----------------------------------------\n\nTITLE: Map Fuzzing with Controlled Elements\nDESCRIPTION: Shows how to fuzz a map with specific constraints on number of elements and nil values\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(0).NumElements(1, 1)\nvar myMap map[ComplexKeyType]string\nf.Fuzz(&myMap) // myMap will have exactly one element.\n```\n\n----------------------------------------\n\nTITLE: Using Ethtool Go Package to Retrieve Network Interface Statistics\nDESCRIPTION: Example code demonstrating how to use the ethtool package to retrieve statistics from network interfaces. It shows how to create an ethtool handle, get TX bytes from eth0, and retrieve the peer index of a veth interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/safchain/ethtool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/safchain/ethtool\"\n)\n\nfunc main() {\n\tethHandle, err := ethtool.NewEthtool()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer ethHandle.Close()\n\n\t// Retrieve tx from eth0\n\tstats, err := ethHandle.Stats(\"eth0\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"TX: %d\\n\", stats[\"tx_bytes\"])\n\n\t// Retrieve peer index of a veth interface\n\tstats, err = ethHandle.Stats(\"veth0\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"Peer Index: %d\\n\", stats[\"peer_ifindex\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Distinct Elements from a List - CEL Extension - Pseudocode\nDESCRIPTION: Describes how to use the 'distinct' method to return a list of unique elements from an existing list, deduplicating entries. Supports lists with mixed types and non-primitive types. No external dependencies. Examples show usage with numbers and strings, and the method maintains the original order of first appearances.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_5\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list(T)>.distinct() -> <list(T)>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1, 2, 2, 3, 3, 3].distinct() // return [1, 2, 3]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[\"b\", \"b\", \"c\", \"a\", \"c\"].distinct() // return [\"b\", \"c\", \"a\"]\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[1, \"b\", 2, \"b\"].distinct() // return [1, \"b\", 2]\n```\n\n----------------------------------------\n\nTITLE: Handling nil Panic in Ginkgo Tests in Go\nDESCRIPTION: Illustrates a specific edge case fixed in Ginkgo version 1.3.0. Previously, panicking with 'nil' (i.e., 'panic(nil)') might not have been correctly caught and reported as a test failure. This fix ensures such panics now properly fail the test.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npanic(nil)\n```\n\n----------------------------------------\n\nTITLE: Example Windows Socket Error Message\nDESCRIPTION: An example error message that may be encountered on Windows when attempting to use the `pro-bing` library for ICMP ping without setting privileged mode via `pinger.SetPrivileged(true)`. The error indicates that the necessary protocol (raw ICMP) is unavailable or not configured for unprivileged use.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n```\nsocket: The requested protocol has not been configured into the system, or no implementation for it exists.\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists by Key Expression - CEL Extension - Pseudocode\nDESCRIPTION: Explains 'sortBy', which sorts a list according to a key provided by a lambda or key expression. Only key expressions that return standard primitive types are allowed. Used typically with lists of complex objects. Returned list maintains sorted order; errors occur if key expression type is unsupported.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_11\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list(T)>.sortBy(<bindingName>, <keyExpr>) -> <list(T)>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[\n  Player { name: \"foo\", score: 0 },\n  Player { name: \"bar\", score: -10 },\n  Player { name: \"baz\", score: 1000 },\n].sortBy(e, e.score).map(e, e.name)\n== [\"bar\", \"foo\", \"baz\"]\n```\n\n----------------------------------------\n\nTITLE: Controller-Runtime Version Compatibility Table\nDESCRIPTION: A markdown table showing version compatibility between Controller-Runtime, Kubernetes dependencies, and minimum Go versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|          | k8s.io/*, client-go | minimum Go version |\n|----------|:-------------------:|:------------------:|\n| CR v0.20 |        v0.32        |        1.23        |\n| CR v0.19 |        v0.31        |        1.22        |\n| CR v0.18 |        v0.30        |        1.22        |\n| CR v0.17 |        v0.29        |        1.21        |\n| CR v0.16 |        v0.28        |        1.20        |\n| CR v0.15 |        v0.27        |        1.20        |\n```\n\n----------------------------------------\n\nTITLE: Installing the SemVer Library in Go\nDESCRIPTION: Shows how to install the semver library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/blang/semver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/blang/semver\n```\n\n----------------------------------------\n\nTITLE: Creating a RESTful WebService in Go\nDESCRIPTION: Illustrates how to create a basic RESTful WebService using go-restful. It sets up a route for retrieving a user by ID, demonstrating path parameters, documentation, and response writing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nws := new(restful.WebService)\nws.\n\tPath(\"/users\").\n\tConsumes(restful.MIME_XML, restful.MIME_JSON).\n\tProduces(restful.MIME_JSON, restful.MIME_XML)\n\nws.Route(ws.GET(\"/{user-id}\").To(u.findUser).\n\tDoc(\"get a user\").\n\tParam(ws.PathParameter(\"user-id\", \"identifier of the user\").DataType(\"string\")).\n\tWrites(User{}))\n...\n\nfunc (u UserResource) findUser(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"user-id\")\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Machine Status Check\nDESCRIPTION: Sample output from the machine status command showing that a machine is in the 'Running' state.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-machines/manage-machines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n08:48:58 info Machine '<name-of-machine>' is 'Running'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Formatters by Environment in Go\nDESCRIPTION: This snippet conditionally sets the Logrus formatter to JSON or the default text formatter based on the value of a global Environment variable. The pattern supports using structured JSON logs in production environments while keeping logs human-readable during development. The code assumes the presence of a string variable 'Environment', which should be set according to application context (e.g., from an environment variable or flag). Requires LoGrus imported as 'log'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Tests without Running using Shell\nDESCRIPTION: Uses the 'go test -c' command to compile the test executable but does not run it. Ginkgo previously needed to fix compilation output paths relative to the CWD, but this is noted as no longer necessary due to improvements in 'go test -c' as of version 1.4.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo test -c\n```\n\n----------------------------------------\n\nTITLE: Testing Set Equivalence - CEL Sets Library - Pseudocode\nDESCRIPTION: Details the 'sets.equivalent' function, which checks if two lists represent the same set, regardless of element multiplicity or order. Useful when the semantic requirement is for set equivalence rather than list equality. Uses CEL equality rules and ignores list length differences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_13\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.equivalent(list(T), list(T)) -> bool\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.equivalent([], []) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.equivalent([1], [1, 1]) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.equivalent([1], [1u, 1.0]) // true\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nsets.equivalent([1, 2, 3], [3u, 2.0, 1]) // true\n```\n\n----------------------------------------\n\nTITLE: Fetching Go Module Dependencies (Bash)\nDESCRIPTION: Demonstrates using the `go get` command to add or update Go module dependencies. The first command fetches the latest tagged release, while the second fetches a specific version (`vX.Y.Z`). Requires Go 1.12+ installed and Go modules enabled.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Formatting Byte Sizes as Integers in Go\nDESCRIPTION: Illustrates using Go's `fmt.Printf` with the integer verb (`%d`) to display byte sizes. The `%d` specifier outputs the raw byte count, while the `#` flag (`%#d`) appends the 'B' unit suffix. Assumes a defined byte constant `B`.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tonistiigi/units/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%d\", 1234 * B)    => \"1234\"\nfmt.Printf(\"%#d\", 1234 * B)   => \"1234B\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git (Shell)\nDESCRIPTION: Clones the opentelemetry-go source code repository from GitHub using the git command. This command downloads the project files into a new directory named 'opentelemetry-go' in the current location. It's the standard way to obtain the source code for development.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Marshaling Data using json-iterator/go\nDESCRIPTION: This snippet demonstrates how to use the `json-iterator/go` library for JSON marshaling as a replacement for the standard library. It imports the library aliased as `jsoniter`, configures it for standard library compatibility, and then calls the `Marshal` method. This approach aims for higher performance.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n```\n\n----------------------------------------\n\nTITLE: Using ExistsOne Comprehension with Two Variables in CEL\nDESCRIPTION: Tests whether exactly one element in a list or map satisfies a given predicate. Unlike exists, this doesn't short-circuit to ensure exactly one match is found.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_29\n\nLANGUAGE: cel\nCODE:\n```\n[1, 2, 1, 3, 1, 4].existsOne(i, v, i == 1 || v == 1) // returns false\n[1, 1, 2, 2, 3, 3].existsOne(i, v, i == 2 && v == 2) // returns true\n{'i': 0, 'j': 1, 'k': 2}.existsOne(i, v, i == 'l' || v == 1) // returns true\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Library for Go\nDESCRIPTION: This command installs the clipboard library for Go using the go get command. It retrieves the package from the specified GitHub repository.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/atotto/clipboard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/atotto/clipboard\n```\n\n----------------------------------------\n\nTITLE: Using TransformMap Comprehension in CEL\nDESCRIPTION: Converts a map or list into a map value. The output expression determines the value of each map entry while keys remain fixed. Optional filtering is available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_31\n\nLANGUAGE: cel\nCODE:\n```\n[1, 2, 3].transformMap(indexVar, valueVar,\n  (indexVar * valueVar) + valueVar) // returns {0: 1, 1: 4, 2: 9}\n[1, 2, 3].transformMap(indexVar, valueVar, indexVar % 2 == 0\n  (indexVar * valueVar) + valueVar) // returns {0: 1, 2: 9}\n{'greeting': 'hello'}.transformMap(k, v, v + '!') // returns {'greeting': 'hello!'}\n```\n\n----------------------------------------\n\nTITLE: Installing Strip ANSI package using Go\nDESCRIPTION: This command installs the 'stripansi' package using the Go package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/acarl005/stripansi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/acarl005/stripansi\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Interface and RealTimer in Go\nDESCRIPTION: This snippet defines a Timer interface and implements a realTimer struct that wraps the standard time.Timer. It provides methods to reset, stop, and access the timer's channel, allowing for consistent time-based operations across real and mocked implementations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/clock/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Timer represents a single event.\ntype Timer interface {\n\tC() <-chan time.Time\n\tReset(d time.Duration) bool\n\tStop() bool\n}\n\ntype realTimer struct {\n\ttimer *time.Timer\n}\n\nfunc (r *realTimer) C() <-chan time.Time {\n\treturn r.timer.C\n}\n\nfunc (r *realTimer) Reset(d time.Duration) bool {\n\treturn r.timer.Reset(d)\n}\n\nfunc (r *realTimer) Stop() bool {\n\treturn r.timer.Stop()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ethtool Go Package\nDESCRIPTION: Command to install the ethtool Go package using go get.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/safchain/ethtool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/safchain/ethtool\n```\n\n----------------------------------------\n\nTITLE: Installing go-gitconfig Package using Go Get\nDESCRIPTION: This Bash command installs the `go-gitconfig` package source code using the `go get` tool. The `-d` flag ensures that the package is only downloaded and not built or installed into the GOBIN directory. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d github.com/tcnksm/go-gitconfig\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice Template\nDESCRIPTION: Standard copyright and license notice template to be included in source files. Includes placeholders for copyright year and owner information that should be replaced with actual values.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Merge Patches in Go\nDESCRIPTION: Example demonstrating how to create a merge patch from two JSON documents and apply it to a third document.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\ttarget := []byte(`{\"name\": \"Jane\", \"age\": 24}`)\n\n\tpatch, err := jsonpatch.CreateMergePatch(original, target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\talternative := []byte(`{\"name\": \"Tina\", \"age\": 28, \"height\": 3.75}`)\n\tmodifiedAlternative, err := jsonpatch.MergePatch(alternative, patch)\n\n\tfmt.Printf(\"patch document:   %s\\n\", patch)\n\tfmt.Printf(\"updated alternative doc: %s\\n\", modifiedAlternative)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents in Go\nDESCRIPTION: Example demonstrating how to compare JSON documents for structural equality while ignoring whitespace and ordering differences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ginkgo Test Suite Timeout using Shell\nDESCRIPTION: Executes the Ginkgo test suite with a custom timeout duration specified via the '-timeout' flag. The 'DURATION' should be a string parseable by Go's time.ParseDuration (e.g., '1h', '5m', '10s'). The default timeout is 24 hours. Introduced in version 1.4.0.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -timeout=DURATION\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty Package Using go get - Shell\nDESCRIPTION: This shell command shows how to install the go-isatty package using the Go toolchain. It fetches and installs the go-isatty library from GitHub into the Go workspace. This step is necessary before importing and using go-isatty in Go projects, ensuring all relevant functions are available.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Joining String List Elements - CEL String Extension - Pseudocode\nDESCRIPTION: Explains the 'join' method, used to concatenate elements of a list of strings into a single string, with an optional separator inserted between elements. Handles empty lists (returns empty string) and accepts custom separators. Compatible only with string lists.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_17\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list<string>>.join() -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<list<string>>.join(<string>) -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n['hello', 'mellow'].join() // returns 'hellomellow'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n['hello', 'mellow'].join(' ') // returns 'hello mellow'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[].join() // returns ''\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n[].join('/') // returns ''\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Documents in Go\nDESCRIPTION: Example demonstrating how to compare JSON documents for structural equality, ignoring whitespace and ordering differences.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tjsonpatch \"github.com/evanphx/json-patch\"\n)\n\nfunc main() {\n\toriginal := []byte(`{\"name\": \"John\", \"age\": 24, \"height\": 3.21}`)\n\tsimilar := []byte(`\n\t\t{\n\t\t\t\"age\": 24,\n\t\t\t\"height\": 3.21,\n\t\t\t\"name\": \"John\"\n\t\t}\n\t`)\n\tdifferent := []byte(`{\"name\": \"Jane\", \"age\": 20, \"height\": 3.37}`)\n\n\tif jsonpatch.Equal(original, similar) {\n\t\tfmt.Println(`\"original\" is structurally equal to \"similar\"`)\n\t}\n\n\tif !jsonpatch.Equal(original, different) {\n\t\tfmt.Println(`\"original\" is _not_ structurally equal to \"different\"`)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Last Occurrence of Substring - CEL String Extension - Pseudocode\nDESCRIPTION: Documents the 'lastIndexOf' method, which searches for the last occurrence of a substring in a string, optionally restricting the search to a prefix substring ending at a given index. Returns -1 if not found, or the string length if searching for the empty string; errors on negative positions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_18\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.lastIndexOf(<string>) -> <int>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.lastIndexOf(<string>, <int>) -> <int>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('')         // returns 12\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('ello')     // returns 7\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('jello')    // returns -1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('ello', 6)  // returns 1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('ello', 20) // returns -1\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello mellow'.lastIndexOf('ello', -1) // error\n```\n\n----------------------------------------\n\nTITLE: Testing the netns Package with Root Privileges using Go\nDESCRIPTION: This command executes the tests for the `netns` package using `go test`. The `sudo -E` prefix runs the command with root privileges while preserving the environment variables, which is necessary because manipulating network namespaces requires elevated permissions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/vishvananda/netns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo -E go test github.com/vishvananda/netns\n```\n\n----------------------------------------\n\nTITLE: Loading a Schema from HTTP Using gojsonschema in Go\nDESCRIPTION: Shows how to load a JSON schema remotely via HTTP by creating a ReferenceLoader with a URL string. Requires the gojsonschema library; input is a URL pointing to a remotely hosted schema file. Returns a loader object to be used in subsequent validation calls.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"http://www.some_host.com/schema.json\")\n\n```\n\n----------------------------------------\n\nTITLE: Filing Issues Checklist for Go Project\nDESCRIPTION: A numbered list of questions to answer when filing an issue for the Go project. This includes version information, system details, steps to reproduce, expected behavior, and actual behavior.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/golang.org/x/term/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Creating DevPod Workspaces\nDESCRIPTION: Executes a shell script to create DevPod workspaces for load testing.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./startWorkspaces.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flag Name Normalization Function for Separator Consistency\nDESCRIPTION: Demonstrates implementing a custom normalization function that treats -, _, and . as equivalent in flag names, allowing users to use any of these separators interchangeably.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: gRPC Connection Error Example\nDESCRIPTION: Example of a common connection error message when accessing the gRPC package from restricted networks.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for DevPod GUI\nDESCRIPTION: Command to install the required Linux dependencies for building the DevPod GUI application. These packages include GTK libraries, WebKit, and other essential components for the desktop interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libappindicator3-1 libgdk-pixbuf2.0-0 libbsd0 libxdmcp6 \\\n  libwmf-0.2-7 libwmf-0.2-7-gtk libgtk-3-0 libwmf-dev libwebkit2gtk-4.0-37 \\\n  librust-openssl-sys-dev librust-glib-sys-dev\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings Within Strings - CEL String Extension - Pseudocode\nDESCRIPTION: Outlines the 'replace' method for strings, accepting a search, replacement string, and optional replacement count limit. With a count of zero, the input string is unchanged. If the count is negative, all occurrences are replaced. Returns the modified string.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_21\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.replace(<string>, <string>) -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n<string>.replace(<string>, <string>, <int>) -> <string>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello'.replace('he', 'we')     // returns 'wello wello'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello'.replace('he', 'we', -1) // returns 'wello wello'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello'.replace('he', 'we', 1)  // returns 'wello hello'\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\n'hello hello'.replace('he', 'we', 0)  // returns 'hello hello'\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive JSON Unmarshaling in Go\nDESCRIPTION: Function that provides case-sensitive JSON unmarshaling while preserving integers as int64 instead of float64. Handles syntax errors differently from standard encoding/json, providing custom offset information for error handling.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/json/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nUnmarshalCaseSensitivePreserveInts()\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for HuJSON Files\nDESCRIPTION: Configuration snippet for Visual Studio Code that associates *.hujson files with jsonc (JSON with comments) and enables trailing commas. This allows proper syntax highlighting and validation for HuJSON files in VS Code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/hujson/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n    \"*.hujson\": \"jsonc\"\n},\n\"json.schemas\": [{\n    \"fileMatch\": [\"*.hujson\"],\n    \"schema\": {\n        \"allowTrailingCommas\": true\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Running All Ginkgo Tests in Parallel - Shell\nDESCRIPTION: Executes all Ginkgo tests recursively across subdirectories in the project. The '-r' flag enables recursion, while '-p' executes the tests in parallel. This command assumes Ginkgo is installed and used for comprehensive testing before submitting contributions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/onsi/ginkgo/v2/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nginkgo -r -p\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown Format\nDESCRIPTION: Markdown formatted changelog entries showing version updates, dependency changes, bug fixes and feature additions for the AWS SDK modules over time.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/sso/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.22.4 (2024-07-18)\\n\\n* No change notes available for this release.\\n\\n# v1.22.3 (2024-07-10.2)\\n\\n* **Dependency Update**: Updated to the latest SDK module versions\\n\\n# v1.22.2 (2024-07-10)\\n\\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from a String Using gojsonschema in Go\nDESCRIPTION: Shows how to create a StringLoader to load a schema directly from a JSON string. Input is a schema as a JSON literal string; output is a loader usable for validation. Requires gojsonschema, no additional file or network access needed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewStringLoader(`{\"type\": \"string\"}`)\n\n```\n\n----------------------------------------\n\nTITLE: Getting Arbitrary Value from Global Git Config in Go\nDESCRIPTION: This Go code demonstrates fetching a specific configuration value (e.g., 'core.editor') from the global Git configuration (~/.gitconfig) using its key. It calls `gitconfig.Global()` with the key as an argument, returning the value string and an error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\neditor, err := gitconfig.Global(\"core.editor\")\n```\n\n----------------------------------------\n\nTITLE: Generating Integer Ranges as Lists - CEL Extension - Pseudocode\nDESCRIPTION: Illustrates the use of 'lists.range' to create a list of consecutive integers from 0 up to but not including n. The function takes a single integer as input and outputs a list of integers, or an empty list if n is zero. No dependencies required.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_7\n\nLANGUAGE: pseudocode\nCODE:\n```\nlists.range(<int>) -> <list(int)>\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nlists.range(5) -> [0, 1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Loading a Schema from a Local File Using gojsonschema in Go\nDESCRIPTION: Demonstrates creation of a ReferenceLoader targeting a local schema file using a file URI scheme. Requires gojsonschema; input is a file URI string, output is a loader usable for validation. The URI must include the prefix 'file://'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/xeipuuv/gojsonschema/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nloader := gojsonschema.NewReferenceLoader(\"file:///home/me/schema.json\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Zap development environment in Go\nDESCRIPTION: This snippet shows how to fork, clone, and set up the Zap repository for development. It includes steps to add the upstream remote and fetch the latest changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/zap.git\ncd zap\ngit remote add upstream https://github.com/uber-go/zap.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch and Submitting Changes\nDESCRIPTION: Workflow commands for creating a branch, making changes, running tests, and pushing to the fork. This shows the complete flow from creating a feature branch to preparing it for a pull request.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b <BRANCH_NAME>\n# edit files\n$ make style vet test\n$ git add <CHANGED_FILES>\n$ git commit -s\n$ git push <FORK> <BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Adding randBytes function in Go\nDESCRIPTION: Adds a new randBytes function to generate random byte slices.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nAdded randBytes function\n```\n\n----------------------------------------\n\nTITLE: Building Ztunnel Project\nDESCRIPTION: Cleans and builds the Ztunnel project using Cargo with specific configuration flags.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/examples/ztunnel/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo clean\n\n\nRUST_LOG=\"debug\" CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=\"sudo -E\" cargo build --bin=ztunnel --package=ztunnel --message-format=json\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Copy Utility for Go\nDESCRIPTION: This command installs the 'gocopy' utility, which is a command-line tool for copying content to the clipboard. The example demonstrates how to use it to copy the contents of a file to the clipboard.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/atotto/clipboard/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/atotto/clipboard/cmd/gocopy\n$ # example:\n$ cat document.txt | gocopy\n```\n\n----------------------------------------\n\nTITLE: Working with Custom White Reference Points in Lab Space using Go\nDESCRIPTION: This Go snippet shows how to define a color using CIE Lab values relative to a specific white reference point (Illuminant D50 in this example) using `colorful.LabWhiteRef`. It also demonstrates retrieving the Lab values of an existing `colorful.Color` object (`c`) relative to a specified white reference point (again, D50) using the `LabWhiteRef` method. This is useful for color calculations requiring specific illuminant assumptions. Depends on the `go-colorful` library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nc := colorful.LabWhiteRef(0.507850, 0.040585,-0.370945, colorful.D50)\nl, a, b := c.LabWhiteRef(colorful.D50)\n```\n\n----------------------------------------\n\nTITLE: Defining the Style Format String for 'ansi'\nDESCRIPTION: Illustrates the syntax used by the 'ansi' package functions (like `Color`, `ColorFunc`, `ColorCode`) to specify foreground color, background color, and text attributes. Attributes are appended using '+' and colors/attributes are separated by ':'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/mgutz/ansi/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"foregroundColor+attributes:backgroundColor+attributes\"\n```\n\n----------------------------------------\n\nTITLE: Decompressing a File using the gxz Tool\nDESCRIPTION: This shell command shows how to decompress an xz-compressed file (`bigfile.xz`) using the `gxz` tool. The `-d` flag indicates decompression. This command restores the original file from its compressed version. Requires the `gxz` tool to be installed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gxz -d bigfile.xz\n```\n\n----------------------------------------\n\nTITLE: Creating Flag Aliases with Normalization Function\nDESCRIPTION: Shows how to create flag aliases by implementing a normalization function that maps an old flag name to a new one, making them functionally equivalent.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Message Frame Structure ASCII Diagram\nDESCRIPTION: Visual representation of the ttrpc message frame structure showing the header layout including data length, stream ID, message type, flags and data fields.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/containerd/ttrpc/PROTOCOL.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n+---------------------------------------------------------------+\n|                       Data Length (32)                        |\n+---------------------------------------------------------------+\n|                        Stream ID (32)                         |\n+---------------+-----------------------------------------------+\n| Msg Type (8)  |\n+---------------+\n|   Flags (8)   |\n+---------------+-----------------------------------------------+\n|                           Data (*)                            |\n+---------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Installing pro-bing Go Library\nDESCRIPTION: Command to download and install the `pro-bing` Go library using the `go get` tool. This makes the library available for use in other Go projects. Requires the Go toolchain to be installed and configured.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus-community/pro-bing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```\ngo get -u github.com/prometheus-community/pro-bing\n```\n```\n\n----------------------------------------\n\nTITLE: Forwarding Environment Variables in Provider Options\nDESCRIPTION: Example of using the command attribute to forward environment variables from the host machine to the provider. This pattern allows reusing existing AWS credentials.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  AWS_ACCESS_KEY_ID:\n    description: The aws access key id\n    required: false\n    command: printf \"%s\" \"${AWS_ACCESS_KEY_ID:-}\"\n  AWS_SECRET_ACCESS_KEY:\n    description: The aws secret access key\n    required: false\n    command: printf \"%s\" \"${AWS_SECRET_ACCESS_KEY:-}\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies Declaration\nDESCRIPTION: A structured list of Go module dependencies with their versions and import paths. Each entry specifies a module with its version constraint, expected Go version, and included package paths.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/modules.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/fsnotify/fsnotify\n# github.com/fxamacker/cbor/v2 v2.7.0\n## explicit; go 1.17\ngithub.com/fxamacker/cbor/v2\n# github.com/gaissmai/bart v0.11.1\n## explicit; go 1.21\ngithub.com/gaissmai/bart\n```\n\n----------------------------------------\n\nTITLE: Creating MemConn Server Listener in Go\nDESCRIPTION: Creates a new net.Listener instance using memconn.Listen for serving HTTP, gRPC, or other network protocols. The listener is created with a network type 'memu' and requires a unique name identifier.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/akutz/memconn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlis, err := memconn.Listen(\"memu\", \"UniqueName\")\n```\n\n----------------------------------------\n\nTITLE: Key Rotation Setup in Go\nDESCRIPTION: Demonstrates how to set up multiple SecureCookie instances for key rotation using a map to store previous and current keys.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/securecookie/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// keys stored in a map will not be persisted between restarts\n// a more persistent storage should be considered for production applications.\nvar cookies = map[string]*securecookie.SecureCookie{\n\t\"previous\": securecookie.New(\n\t\tsecurecookie.GenerateRandomKey(64),\n\t\tsecurecookie.GenerateRandomKey(32),\n\t),\n\t\"current\": securecookie.New(\n\t\tsecurecookie.GenerateRandomKey(64),\n\t\tsecurecookie.GenerateRandomKey(32),\n\t),\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library\nDESCRIPTION: Commands for installing different versions of the json-patch library using Go modules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/evanphx/json-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\n----------------------------------------\n\nTITLE: Importing Catppuccin Package in Go\nDESCRIPTION: Import statement to use the Catppuccin package in Go code.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/catppuccin/go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport catppuccin \"github.com/catppuccin/go\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Config with Options in Go\nDESCRIPTION: Demonstrates how to create a new config instance with default values and apply options using a functional approach.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ProcFS Test Fixtures using Make and Bash\nDESCRIPTION: These Bash commands outline the process for updating test fixtures for the `procfs` package. First, the existing `testdata/fixtures` directory is removed. Then, `make test` is run, which implicitly extracts the `fixtures.ttar` archive (using `make fixtures/.unpacked`). After modifying the extracted files, `make update_fixtures` (not shown here, but mentioned in surrounding text) would be used to rebuild the archive.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: English Pluralization in Go\nDESCRIPTION: These snippets demonstrate the use of english.PluralWord() and english.Plural() functions for simple English pluralization.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenglish.PluralWord(1, \"object\", \"\") // object\nenglish.PluralWord(42, \"object\", \"\") // objects\nenglish.PluralWord(2, \"bus\", \"\") // buses\nenglish.PluralWord(99, \"locus\", \"loci\") // loci\n\nenglish.Plural(1, \"object\", \"\") // 1 object\nenglish.Plural(42, \"object\", \"\") // 42 objects\nenglish.Plural(2, \"bus\", \"\") // 2 buses\nenglish.Plural(99, \"locus\", \"loci\") // 99 loci\n```\n\n----------------------------------------\n\nTITLE: Filtering and Counting Slices in Go with GoValidator\nDESCRIPTION: Demonstrates how to use the Filter and Count functions to filter elements and count occurrences based on a condition.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Series in Go\nDESCRIPTION: These examples show how to use english.WordSeries() and english.OxfordWordSeries() functions to format comma-separated word lists with conjunctions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nenglish.WordSeries([]string{\"foo\"}, \"and\") // foo\nenglish.WordSeries([]string{\"foo\", \"bar\"}, \"and\") // foo and bar\nenglish.WordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar and baz\n\nenglish.OxfordWordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar, and baz\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List in Go Multierror\nDESCRIPTION: This snippet demonstrates how to use type switches to access the list of errors in a multierror.Error. It's useful when you're aware that a multierror might be returned.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Expected Go Module Requirement for ANTLR4 Runtime\nDESCRIPTION: This snippet shows the expected and clear module requirement that should result from using the new separate repository for the ANTLR4 Go runtime. It demonstrates the improved clarity and versioning.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/antlr4-go/antlr/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrequire (\n    github.com/antlr/antlr4/runtime/Go/antlr/v4 v4.13.0\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitPattern Function in Go\nDESCRIPTION: SplitPattern splits a given pattern into a base path and a pattern. It's useful for initializing os.DirFS() to call Glob(), preventing silent failures due to '../' in patterns.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc SplitPattern(p string) (base, pattern string)\n```\n\n----------------------------------------\n\nTITLE: Importing Google Package in Go\nDESCRIPTION: This code snippet demonstrates how to import the 'google' package from the go-containerregistry library. It's used for Google-specific container registry operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/go-containerregistry/pkg/v1/google/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![GoDoc](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/google?status.svg)](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/google)\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag with Usage Message\nDESCRIPTION: Demonstrates how to mark a flag as deprecated while providing users with information about what flag they should use instead.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: DERP Map Package Reference\nDESCRIPTION: Reference to the DERPMap type documentation in the tailcfg package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/derp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkg.go.dev/tailscale.com/tailcfg#DERPMap\n```\n\n----------------------------------------\n\nTITLE: Basic GoDotEnv Usage in Go\nDESCRIPTION: Example showing how to load and use environment variables from a .env file in a Go application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"github.com/joho/godotenv\"\n)\n\nfunc main() {\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  s3Bucket := os.Getenv(\"S3_BUCKET\")\n  secretKey := os.Getenv(\"SECRET_KEY\")\n\n  // now do something with s3 or whatever\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Applying Custom ANSI Sequences in Go\nDESCRIPTION: This Go snippet showcases the builder pattern provided by the 'aec' library. It starts with an `EmptyBuilder`, chains methods to move the cursor right, set an 8-bit foreground color, set a red background color, converts it to an ANSI sequence (`.ANSI`), and then applies this sequence to the string 'Hello World'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncustom := aec.EmptyBuilder.Right(2).RGB8BitF(128, 255, 64).RedB().ANSI\ncustom.Apply(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to DevPod Workspace via SSH\nDESCRIPTION: Command to establish an SSH connection to a DevPod workspace. Replace MY_WORKSPACE_NAME with the name of your workspace.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/quickstart/ssh.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh MY_WORKSPACE_NAME.devpod\n```\n\n----------------------------------------\n\nTITLE: VSCode Linting Configuration for go-winio\nDESCRIPTION: JSON configuration for setting up golangci-lint in VSCode to automatically lint go-winio code on save. This configuration helps maintain code quality according to the project's linting standards.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tailscale/go-winio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\",\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Slices in Go with GoValidator's Map Function\nDESCRIPTION: Shows how to use the Map function to transform each element of a slice based on a given function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Values in Go Structs for JSON Encoding\nDESCRIPTION: Demonstrates the use of pointers to distinguish between empty and unchanged values when encoding structs to JSON, using the to package from go-autorest.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ns := struct {\n  S *string\n}{ S: to.StringPtr(\"foo\") }\n```\n\n----------------------------------------\n\nTITLE: Installing the LZ4 Go Library\nDESCRIPTION: This command uses the Go toolchain to download and install version 4 of the 'pierrec/lz4' Go package. This library provides LZ4 compression and decompression capabilities for Go applications.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pierrec/lz4/v4\n```\n\n----------------------------------------\n\nTITLE: Gitignore Pattern Example for Filename Matching\nDESCRIPTION: A simple gitignore file example demonstrating global filename pattern matching. This example shows how to ignore all files named 'parse.go' in any directory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/shibumi/go-pathspec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n# gitignore test file\nparse.go\n```\n\n----------------------------------------\n\nTITLE: Handling SIGHUP Signal for Log Rotation\nDESCRIPTION: Example demonstrating how to implement log rotation in response to SIGHUP signals using a goroutine and channel.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/lumberjack.v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nl := &lumberjack.Logger{}\nlog.SetOutput(l)\nc := make(chan os.Signal, 1)\nsignal.Notify(c, syscall.SIGHUP)\n\ngo func() {\n    for {\n        <-c\n        l.Rotate()\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK v1.4.1 Release Notes in Markdown\nDESCRIPTION: This snippet documents the changes in v1.4.1 of the AWS SDK, which only includes dependency updates to the latest SDK module versions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/config/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.4.1 (2021-07-01)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag's Shorthand\nDESCRIPTION: Shows how to deprecate only the shorthand version of a flag while keeping the long-form flag name active.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Unexported Fields Fuzzing in Go\nDESCRIPTION: Controls whether the Consumer should set values for unexported (private) fields in structs. By default, only exported fields are modified.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf.AllowUnexportedFields()\n```\n\nLANGUAGE: go\nCODE:\n```\nf.DisallowUnexportedFields()\n```\n\n----------------------------------------\n\nTITLE: Go HTTP Client References\nDESCRIPTION: Code references showing the default HTTP client and transport implementations in Go's standard library that are shared globally and can cause race conditions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/hashicorp/go-cleanhttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp.DefaultClient\nhttp.Client{}\nhttp.DefaultTransport\n```\n\n----------------------------------------\n\nTITLE: Converting Between BitSet and Roaring Bitmap in Go\nDESCRIPTION: This snippet demonstrates how to convert between the conventional BitSet instances and compressed Roaring bitmaps using the roaring library.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bits-and-blooms/bitset/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmybitset := roaringbitmap.ToBitSet()\nnewroaringbitmap := roaring.FromBitSet(mybitset)\n```\n\n----------------------------------------\n\nTITLE: Azure Resource Manager Environment Variables\nDESCRIPTION: Environment variables used for logging request/response data in the Azure SDK. Controls log level and output destination.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nAZURE_GO_SDK_LOG_LEVEL=LogInfo\nAZURE_GO_SDK_LOG_FILE=<file_path>\n```\n\n----------------------------------------\n\nTITLE: Fetching the Repository using go get (Shell)\nDESCRIPTION: Downloads the opentelemetry-go source code into the GOPATH using the 'go get -d' command. The '-d' flag prevents building the package after downloading. This method is presented as part of the Pull Request setup instructions, and users are advised to ignore potential warnings about 'build constraints exclude all Go files'.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu 24.04 WSL Distribution\nDESCRIPTION: Command to install the Ubuntu 24.04 distribution in WSL. This creates a Linux environment where Docker will be installed.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/docker-provider-via-wsl.mdx#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install Ubuntu-24.04\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Trace Operation in Go\nDESCRIPTION: Demonstrates how to create a basic trace operation with custom fields and deferred logging for operations exceeding a time threshold.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/k8s.io/utils/trace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc doSomething() {\n    opTrace := trace.New(\"operation\", Field{Key: \"fieldKey1\", Value: \"fieldValue1\"})\n    defer opTrace.LogIfLong(100 * time.Millisecond)\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Struct Access in Gval\nDESCRIPTION: Example of accessing fields and methods on a struct that is directly provided as a parameter. This demonstrates how to work with a struct parameter directly in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nHello + World()\n```\n\n----------------------------------------\n\nTITLE: Creating MemConn Client Connection in Go\nDESCRIPTION: Establishes a client connection to a named MemConn server using memconn.Dial. The connection requires the same network type and unique name used by the server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/akutz/memconn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := memconn.Dial(\"memu\", \"UniqueName\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments\nDESCRIPTION: Demonstrates how to parse command line arguments into defined flags using flag.Parse() after all flags have been defined.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Using String Reverse Function in CEL\nDESCRIPTION: Returns a new string with characters in reverse order. This function relies on converting strings to rune arrays to perform the reversal.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_26\n\nLANGUAGE: cel\nCODE:\n```\n'gums'.reverse() // returns 'smug'\n'John Smith'.reverse() // returns 'htimS nhoJ'\n```\n\n----------------------------------------\n\nTITLE: Core xxHash API Functions in Go\nDESCRIPTION: Basic API functions provided by the xxHash package, including Sum64 for byte slices and strings, and the Digest struct constructor.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: String Length Function in Gval\nDESCRIPTION: Example of using a string length function to validate input length. This demonstrates how to use custom functions for string manipulation in Gval expressions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/PaesslerAG/gval/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nstrlen(\"someReallyLongInputString\") <= 16\n```\n\n----------------------------------------\n\nTITLE: Preparing HTTP Request URL with Multiple Paths in Go\nDESCRIPTION: Shows how to use multiple WithPath decorators to build a URL for an HTTP request using the go-autorest package.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreq, err := Prepare(&http.Request{},\n  WithBaseURL(\"https://microsoft.com/\"),\n  WithPath(\"a\"),\n  WithPath(\"b\"),\n  WithPath(\"c\"))\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Authentication in Go\nDESCRIPTION: Implementation of client credentials flow using service principal and secret\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\napplicationSecret := \"APPLICATION_SECRET\"\n\nspt, err := adal.NewServicePrincipalToken(\n\t*oauthConfig,\n\tappliationID,\n\tapplicationSecret,\n\tresource,\n\tcallbacks...)\nif err != nil {\n\treturn nil, err\n}\n\n// Acquire a new access token\nerr  = spt.Refresh()\nif (err == nil) {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Variables in Go\nDESCRIPTION: Defines the variables needed to store form responses for a burger ordering system.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/huh/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/charmbracelet/huh\"\n\nvar (\n    burger       string\n    toppings     []string\n    sauceLevel   int\n    name         string\n    instructions string\n    discount     bool\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SemVer in Go\nDESCRIPTION: Demonstrates how to import the semver package and perform basic version comparison operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/blang/semver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport github.com/blang/semver\nv1, err := semver.Make(\"1.0.0-beta\")\nv2, err := semver.Make(\"2.0.0-beta\")\nv1.Compare(v2)\n```\n\n----------------------------------------\n\nTITLE: Basic CSRF Protection Setup in Go\nDESCRIPTION: Demonstrates how to add CSRF protection middleware to a Go HTTP server. It uses a 32-byte authentication key for CSRF token generation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/gorilla/csrf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nCSRF := csrf.Protect([]byte(\"32-byte-long-auth-key\"))\nhttp.ListenAndServe(\":8000\", CSRF(r))\n```\n\n----------------------------------------\n\nTITLE: Installing ADAL Module in Go\nDESCRIPTION: Command to install the Azure Active Directory authentication library via go get\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/autorest/adal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/Azure/go-autorest/autorest/adal\n```\n\n----------------------------------------\n\nTITLE: Proto Extension Retrieval in CEL\nDESCRIPTION: Macro for retrieving extension fields from proto2 syntax messages, returning the default value if the field is not set.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cel\nCODE:\n```\nproto.getExt(<msg>, <fully.qualified.extension.name>) -> <field-type>\n```\n\nLANGUAGE: cel\nCODE:\n```\nproto.getExt(msg, google.expr.proto2.test.int32_ext) // returns int value\n```\n\n----------------------------------------\n\nTITLE: Named Pipe Dial Examples\nDESCRIPTION: Examples showing how to connect to both local and remote named pipes using the Dial function.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/natefinch/npipe.v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// local pipe\nconn, err := Dial(`\\\\.\\pipe\\mypipename`)\n\n// remote pipe\nconn, err := Dial(`\\\\othercomp\\pipe\\mypipename`)\n```\n\n----------------------------------------\n\nTITLE: Importing OpenCensus Tracing for Azure Go AutoRest\nDESCRIPTION: To enable the previous tracing behavior with OpenCensus, you must add this import to your source file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport _ \"github.com/Azure/go-autorest/tracing/opencensus\"\n```\n\n----------------------------------------\n\nTITLE: Using Binaries in Provider Options with YAML\nDESCRIPTION: Example demonstrating how to use binaries within the option 'command' attribute in a provider configuration to retrieve option values.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/binaries.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbinaries:\n  MY_BINARY:\n    ....\n\noptions:\n  MY_OPTION:\n    command: ${MY_BINARY} retrieve-option\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository Directly with Git (Alternative) (Shell)\nDESCRIPTION: Provides an alternative method to clone the opentelemetry-go repository directly using git, similar to the first snippet but mentioned specifically within the Pull Request context. It highlights that 'git clone' uses the GitHub URL directly, unlike 'go get' which uses the vanity import path, and clones into the current directory.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Using Helper Commands in Provider Options\nDESCRIPTION: Example of running a helper command defined in the binaries section and forwarding the result as an option value. Includes caching to refresh token after expiration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-providers/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  AWS_TOKEN:\n    local: true\n    hidden: true\n    cache: 5m\n    description: \"The AWS auth token to use\"\n    command: |-\n      ${AWS_PROVIDER} token\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator Example\nDESCRIPTION: Demonstrates the new thread-safe way to add custom validators using Set method.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library with Go Get\nDESCRIPTION: Command to install the latest version of the Cobra library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Edwards25519 Package in Go\nDESCRIPTION: This code snippet demonstrates how to import the edwards25519 package in a Go program. The package provides implementation of the edwards25519 elliptic curve for cryptographic operations.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/filippo.io/edwards25519/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"filippo.io/edwards25519\"\n```\n\n----------------------------------------\n\nTITLE: Package Reference for Environment Testing\nDESCRIPTION: Import path reference for the envtest package in controller-runtime, recommended for testing controllers against a real API server.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/FAQ.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsigs.k8s.io/controller-runtime/pkg/envtest#Environment\n```\n\n----------------------------------------\n\nTITLE: Type Checking in Go with GoValidator's IsType Function\nDESCRIPTION: Shows how to use the IsType function to verify the type of various variables, including pointers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Nil Pointer Probability Control\nDESCRIPTION: Example of customizing the probability of getting nil pointers when fuzzing struct fields\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New().NilChance(.5)\nvar fancyStruct struct {\n  A, B, C, D *string\n}\nf.Fuzz(&fancyStruct) // About half the pointers should be set.\n```\n\n----------------------------------------\n\nTITLE: Adding Ordinal Suffixes to Numbers in Go\nDESCRIPTION: This snippet demonstrates the use of humanize.Ordinal() function to add appropriate ordinal suffixes to numbers.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You're my %s best friend.\", humanize.Ordinal(193)) // You are my 193rd best friend.\n```\n\n----------------------------------------\n\nTITLE: Configured Endpoints Support\nDESCRIPTION: Added support for configured endpoints via environment variables and AWS shared configuration file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.15.0 (2023-11-01)\n\n* **Feature**: Adds support for configured endpoints via environment variables and the AWS shared configuration file.\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Init Method\nDESCRIPTION: Defines the Init method that returns initial commands for the application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m model) Init() tea.Cmd {\n    // Just return `nil`, which means \"no I/O right now, please.\"\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure\nDESCRIPTION: Markdown formatted release notes showing version updates and changes over time. Each version includes sections for New Features, Bug Fixes, and Breaking Changes.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/Azure/go-autorest/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Use correct AAD and Graph endpoints for US Gov environment.\n\n## v9.7.0\n\n### New Features\n\n- Added support for application/octet-stream MIME types.\n```\n\n----------------------------------------\n\nTITLE: Updating No-op Logger Creation\nDESCRIPTION: Code formatting command to update no-op logger creation from zap.New(nil) to the preferred zap.NewNop().\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngofmt -r 'zap.New(nil) -> zap.NewNop()' -w .\n```\n\n----------------------------------------\n\nTITLE: Module Dependencies for DevPod Project\nDESCRIPTION: A list of Kubernetes API server package dependencies required by the DevPod project, specifying Go version 1.23.0. The list includes various packages for admission control, authentication, server configuration, and storage.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/modules.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n## explicit; go 1.23.0\nk8s.io/apiserver/pkg/admission\nk8s.io/apiserver/pkg/admission/configuration\nk8s.io/apiserver/pkg/admission/initializer\nk8s.io/apiserver/pkg/admission/metrics\nk8s.io/apiserver/pkg/admission/plugin/authorizer\nk8s.io/apiserver/pkg/admission/plugin/cel\nk8s.io/apiserver/pkg/admission/plugin/namespace/lifecycle\nk8s.io/apiserver/pkg/admission/plugin/policy/generic\nk8s.io/apiserver/pkg/admission/plugin/policy/internal/generic\nk8s.io/apiserver/pkg/admission/plugin/policy/matching\nk8s.io/apiserver/pkg/admission/plugin/policy/mutating\nk8s.io/apiserver/pkg/admission/plugin/policy/mutating/patch\nk8s.io/apiserver/pkg/admission/plugin/policy/validating\nk8s.io/apiserver/pkg/admission/plugin/policy/validating/metrics\nk8s.io/apiserver/pkg/admission/plugin/webhook\nk8s.io/apiserver/pkg/admission/plugin/webhook/config\nk8s.io/apiserver/pkg/admission/plugin/webhook/config/apis/webhookadmission\nk8s.io/apiserver/pkg/admission/plugin/webhook/config/apis/webhookadmission/v1\nk8s.io/apiserver/pkg/admission/plugin/webhook/config/apis/webhookadmission/v1alpha1\nk8s.io/apiserver/pkg/admission/plugin/webhook/errors\nk8s.io/apiserver/pkg/admission/plugin/webhook/generic\nk8s.io/apiserver/pkg/admission/plugin/webhook/matchconditions\nk8s.io/apiserver/pkg/admission/plugin/webhook/mutating\nk8s.io/apiserver/pkg/admission/plugin/webhook/predicates/namespace\nk8s.io/apiserver/pkg/admission/plugin/webhook/predicates/object\nk8s.io/apiserver/pkg/admission/plugin/webhook/predicates/rules\nk8s.io/apiserver/pkg/admission/plugin/webhook/request\nk8s.io/apiserver/pkg/admission/plugin/webhook/validating\nk8s.io/apiserver/pkg/apis/apidiscovery/v2\nk8s.io/apiserver/pkg/apis/apiserver\nk8s.io/apiserver/pkg/apis/apiserver/install\nk8s.io/apiserver/pkg/apis/apiserver/v1\nk8s.io/apiserver/pkg/apis/apiserver/v1alpha1\nk8s.io/apiserver/pkg/apis/apiserver/v1beta1\nk8s.io/apiserver/pkg/apis/audit\nk8s.io/apiserver/pkg/apis/audit/v1\nk8s.io/apiserver/pkg/apis/cel\nk8s.io/apiserver/pkg/apis/flowcontrol/bootstrap\nk8s.io/apiserver/pkg/audit\nk8s.io/apiserver/pkg/authentication/authenticator\nk8s.io/apiserver/pkg/authentication/authenticatorfactory\nk8s.io/apiserver/pkg/authentication/group\nk8s.io/apiserver/pkg/authentication/request/anonymous\nk8s.io/apiserver/pkg/authentication/request/bearertoken\nk8s.io/apiserver/pkg/authentication/request/headerrequest\nk8s.io/apiserver/pkg/authentication/request/union\nk8s.io/apiserver/pkg/authentication/request/websocket\nk8s.io/apiserver/pkg/authentication/request/x509\nk8s.io/apiserver/pkg/authentication/serviceaccount\nk8s.io/apiserver/pkg/authentication/token/cache\nk8s.io/apiserver/pkg/authentication/token/tokenfile\nk8s.io/apiserver/pkg/authentication/user\nk8s.io/apiserver/pkg/authorization/authorizer\nk8s.io/apiserver/pkg/cel\nk8s.io/apiserver/pkg/cel/common\nk8s.io/apiserver/pkg/cel/environment\nk8s.io/apiserver/pkg/cel/lazy\nk8s.io/apiserver/pkg/cel/library\nk8s.io/apiserver/pkg/cel/mutation\nk8s.io/apiserver/pkg/cel/mutation/dynamic\nk8s.io/apiserver/pkg/cel/openapi\nk8s.io/apiserver/pkg/cel/openapi/resolver\nk8s.io/apiserver/pkg/endpoints\nk8s.io/apiserver/pkg/endpoints/deprecation\nk8s.io/apiserver/pkg/endpoints/discovery\nk8s.io/apiserver/pkg/endpoints/discovery/aggregated\nk8s.io/apiserver/pkg/endpoints/filterlatency\nk8s.io/apiserver/pkg/endpoints/filters\nk8s.io/apiserver/pkg/endpoints/handlers\nk8s.io/apiserver/pkg/endpoints/handlers/fieldmanager\nk8s.io/apiserver/pkg/endpoints/handlers/finisher\nk8s.io/apiserver/pkg/endpoints/handlers/metrics\nk8s.io/apiserver/pkg/endpoints/handlers/negotiation\nk8s.io/apiserver/pkg/endpoints/handlers/responsewriters\nk8s.io/apiserver/pkg/endpoints/metrics\nk8s.io/apiserver/pkg/endpoints/openapi\nk8s.io/apiserver/pkg/endpoints/request\nk8s.io/apiserver/pkg/endpoints/responsewriter\nk8s.io/apiserver/pkg/endpoints/warning\nk8s.io/apiserver/pkg/features\nk8s.io/apiserver/pkg/quota/v1\nk8s.io/apiserver/pkg/registry/generic\nk8s.io/apiserver/pkg/registry/generic/registry\nk8s.io/apiserver/pkg/registry/rest\nk8s.io/apiserver/pkg/server\nk8s.io/apiserver/pkg/server/dynamiccertificates\nk8s.io/apiserver/pkg/server/egressselector\nk8s.io/apiserver/pkg/server/egressselector/metrics\nk8s.io/apiserver/pkg/server/filters\nk8s.io/apiserver/pkg/server/healthz\nk8s.io/apiserver/pkg/server/httplog\nk8s.io/apiserver/pkg/server/mux\nk8s.io/apiserver/pkg/server/routes\nk8s.io/apiserver/pkg/server/routine\nk8s.io/apiserver/pkg/server/storage\nk8s.io/apiserver/pkg/storage\nk8s.io/apiserver/pkg/storage/cacher\nk8s.io/apiserver/pkg/storage/cacher/metrics\nk8s.io/apiserver/pkg/storage/errors\nk8s.io/apiserver/pkg/storage/etcd3\nk8s.io/apiserver/pkg/storage/etcd3/metrics\nk8s.io/apiserver/pkg/storage/feature\nk8s.io/apiserver/pkg/storage/names\nk8s.io/apiserver/pkg/storage/storagebackend\nk8s.io/apiserver/pkg/storage/storagebackend/factory\nk8s.io/apiserver/pkg/storage/value\nk8s.io/apiserver/pkg/storage/value/encrypt/identity\nk8s.io/apiserver/pkg/storageversion\nk8s.io/apiserver/pkg/util/apihelpers\nk8s.io/apiserver/pkg/util/dryrun\nk8s.io/apiserver/pkg/util/feature\nk8s.io/apiserver/pkg/util/flowcontrol\nk8s.io/apiserver/pkg/util/flowcontrol/debug\nk8s.io/apiserver/pkg/util/flowcontrol/fairqueuing\nk8s.io/apiserver/pkg/util/flowcontrol/fairqueuing/eventclock\nk8s.io/apiserver/pkg/util/flowcontrol/fairqueuing/promise\nk8s.io/apiserver/pkg/util/flowcontrol/fairqueuing/queueset\nk8s.io/apiserver/pkg/util/flowcontrol/format\nk8s.io/apiserver/pkg/util/flowcontrol/metrics\nk8s.io/apiserver/pkg/util/flowcontrol/request\nk8s.io/apiserver/pkg/util/flushwriter\nk8s.io/apiserver/pkg/util/peerproxy/metrics\nk8s.io/apiserver/pkg/util/shufflesharding\nk8s.io/apiserver/pkg/util/webhook\nk8s.io/apiserver/pkg/util/x509metrics\nk8s.io/apiserver/pkg/warning\nk8s.io/apiserver/plugin/pkg/authenticator/token/webhook\n# k8s.io/cli-runtime v0.29.1\n## explicit; go 1.21\nk8s.io/cli-runtime/pkg/printers\n# k8s.io/client-go v0.32.1\n```\n\n----------------------------------------\n\nTITLE: Adding a DevPod Provider from URL\nDESCRIPTION: This command shows how to add a provider to DevPod by specifying the URL to the provider.yaml file using the CLI.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/managing-providers/add-provider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndevpod provider add https://github.com/loft-sh/devpod-provider-ssh/releases/download/v0.0.3/provider.yaml\n```\n\n----------------------------------------\n\nTITLE: Validating URL in Go using GoValidator\nDESCRIPTION: Demonstrates how to use the IsURL function from GoValidator to check if a given string is a valid URL.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: Declaring the goautoneg Package in Go\nDESCRIPTION: Declares the Go package named 'goautoneg', which encapsulates the HTTP content negotiation functionality described in the file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage goautoneg\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example in Bash\nDESCRIPTION: Example directory structure showing parent-child relationships that can be matched with doublestar patterns.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/bmatcuk/doublestar/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Fuzzing in Go\nDESCRIPTION: Demonstrates how to use gofuzz to populate a single integer variable with random values\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nf := fuzz.New()\nvar myInt int\nf.Fuzz(&myInt) // myInt gets a random value.\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks for Name Mangling Functions\nDESCRIPTION: Command to run Go benchmarks for specific functions, with a 30-second benchmark time.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench XXX -run XXX -benchtime 30s\n```\n\n----------------------------------------\n\nTITLE: Running Local Tests for DevPod\nDESCRIPTION: Command to execute the test suite locally before submitting changes to the project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Info Level\nDESCRIPTION: Example of structured logging using the Info level with separate message and key-value pairs for better searchability and correlation.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/sigs.k8s.io/controller-runtime/TMP-LOGGING.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogger.Info(\"starting reconciliation\", \"pod\", req.NamespacedName)\n```\n\n----------------------------------------\n\nTITLE: DevPod Logo HTML Implementation\nDESCRIPTION: HTML markup for displaying the DevPod logo with dark mode support using the picture element and conditional source selection.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.devpod.sh\">\n  <picture width=\"500\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/static/media/devpod_dark.png\">\n    <img alt=\"DevPod wordmark\" width=\"500\" src=\"docs/static/media/devpod.png\">\n  </picture>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding JSON parsing functions in Go\nDESCRIPTION: Adds new fromJson and mustFromJson functions to parse JSON data.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nAdded fromJson and mustFromJson functions\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for DevPod PersistentVolume YAML\nDESCRIPTION: Sets up a directory structure and creates a YAML file for the Kubernetes PersistentVolume definition.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmkdir ~/devpods\ncd ~/devpods\ntouch devpod-pv.yml\nvim devpod-pv.yml # or your preferred text editor\n```\n\n----------------------------------------\n\nTITLE: Starting DevPod\nDESCRIPTION: Command to start the DevPod application.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndev-pod\n```\n\n----------------------------------------\n\nTITLE: Adding logical AND functions in Go\nDESCRIPTION: Adds new and and all functions for testing multiple conditions.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nAdded and and all functions for testing conditions\n```\n\n----------------------------------------\n\nTITLE: Reading Env from IO.Reader\nDESCRIPTION: Example of parsing environment variables from an io.Reader interface.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nreader := getRemoteFile()\nmyEnv, err := godotenv.Parse(reader)\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-Patch Library\nDESCRIPTION: Commands for installing different versions of the JSON-patch library using Go modules.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/gopkg.in/evanphx/json-patch.v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/evanphx/json-patch/v5\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: Command and output showing available Kubernetes namespaces, which is needed for DevPod Kubernetes provider configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get ns\nNAME              STATUS   AGE\ndefault           Active   12d\nkube-node-lease   Active   12d\nkube-public       Active   12d\nkube-system       Active   12d\n```\n\n----------------------------------------\n\nTITLE: Running Survey Examples via Command Line\nDESCRIPTION: Commands to run the example Survey implementations from the examples directory\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/AlecAivazis/survey/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run examples/simple.go\ngo run examples/validation.go\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Sorting of Flags in Help Text\nDESCRIPTION: Shows how to disable the default behavior of sorting flags alphabetically in help and usage messages, preserving the order in which they were defined.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Installing DevPod CLI on Linux ARM64\nDESCRIPTION: This command downloads the DevPod CLI for Linux ARM64, installs it in /usr/local/bin, and removes the temporary file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/getting-started/install.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -o devpod \"https://github.com/loft-sh/devpod/releases/latest/download/devpod-linux-arm64\" && sudo install -c -m 0755 devpod /usr/local/bin && rm -f devpod\n```\n\n----------------------------------------\n\nTITLE: YAML-Style Environment Configuration\nDESCRIPTION: Example of YAML-style syntax for environment variable configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nFOO: bar\nBAR: baz\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package with Go\nDESCRIPTION: Command to install the Google UUID package using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/uuid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Library in Go\nDESCRIPTION: Command to install the WebSocket library using Go's package manager.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/coder/websocket\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for PersistentVolume Storage\nDESCRIPTION: Creates the directory that will be used as the hostPath for the Kubernetes PersistentVolume.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/tutorials/minikube-vscode-browser.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /home/dev/devpods/share\n```\n\n----------------------------------------\n\nTITLE: DevPod Kubernetes Persistent Volume Configuration\nDESCRIPTION: YAML configuration for creating a Kubernetes persistent volume for DevPod with 1Gi storage capacity and ReadWriteOnce access mode.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: devpod-pv\n  labels:\n    type: devpod\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/home/dev/devpods/share\"\n```\n\n----------------------------------------\n\nTITLE: Binding Local Variables in CEL\nDESCRIPTION: The cel.bind macro allows binding of simple identifiers to initialization expressions for use in subsequent result expressions. Bindings can be nested.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/google/cel-go/ext/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cel\nCODE:\n```\ncel.bind(<varName>, <initExpr>, <resultExpr>)\n```\n\nLANGUAGE: cel\nCODE:\n```\ncel.bind(a, 'hello',\ncel.bind(b, 'world', a + b + b + a)) // \"helloworldworldhello\"\n```\n\nLANGUAGE: cel\nCODE:\n```\ncel.bind(valid_values, [a, b, c],\n[d, e, f].exists(elem, elem in valid_values))\n```\n\n----------------------------------------\n\nTITLE: Running DevPod Load Test\nDESCRIPTION: Executes a shell script to run the load test and generate wait times. The load can be adjusted by modifying NUM_WORKSPACES or NUM_COMMANDS_PER_WORKSPACE variables.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/loadtest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Bracketed Paste Mode in Terminal using Bash\nDESCRIPTION: This Bash command uses an ANSI escape sequence (CSI ?2004h) to enable bracketed paste mode in the terminal emulator. When enabled, pasted text is wrapped with `\\033[200~` (start) and `\\033[201~` (end) sequences, allowing applications to distinguish pasted text from typed text. The `sleep 10` command pauses execution for 10 seconds to allow time for testing the paste functionality.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033[?2004h\" && sleep 10\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Persistent Volume Configuration\nDESCRIPTION: Command to create the persistent volume in Kubernetes using the YAML configuration file.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create -f ~/devpods/devpod-pv.yml\n```\n\n----------------------------------------\n\nTITLE: Debugging with Delve Commands\nDESCRIPTION: Commands for debugging Bubble Tea applications using Delve in headless mode.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/charmbracelet/bubbletea/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Start the debugger\n$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .\nAPI server listening at: 127.0.0.1:43000\n\n# Connect to it from another terminal\n$ dlv connect 127.0.0.1:43000\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Outputs for File Synchronization - Go (Benchmark Output)\nDESCRIPTION: This code snippet displays the results from running multiple Go benchmarks designed to test the performance of different file sync strategies (e.g., Tar, CPA, DiffCopy, Rsync, GnuTar) at various scales. There are no programming constructs; instead, it is a direct paste of Go benchmark console output, so it does not have code dependencies, but assumes prior execution of Go's testing/benchmarking functionality (go test). Key parameters include benchmark names (sync technique and file count) and measured time per operation. The output is useful for performance comparison, but not intended for programmatic execution.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tonistiigi/fsutil/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBENCH_FILE_SIZE=10000 ./bench.test --test.bench .\nBenchmarkCopyWithTar10-4                \t    2000\t    995242 ns/op\nBenchmarkCopyWithTar50-4                \t     300\t   4710021 ns/op\nBenchmarkCopyWithTar200-4               \t     100\t  16627260 ns/op\nBenchmarkCopyWithTar1000-4              \t      20\t  60031459 ns/op\nBenchmarkCPA10-4                        \t    1000\t   1678367 ns/op\nBenchmarkCPA50-4                        \t     500\t   3690306 ns/op\nBenchmarkCPA200-4                       \t     200\t   9495066 ns/op\nBenchmarkCPA1000-4                      \t      50\t  29769289 ns/op\nBenchmarkDiffCopy10-4                   \t    2000\t    943889 ns/op\nBenchmarkDiffCopy50-4                   \t     500\t   3285950 ns/op\nBenchmarkDiffCopy200-4                  \t     200\t   8563792 ns/op\nBenchmarkDiffCopy1000-4                 \t      50\t  29511340 ns/op\nBenchmarkDiffCopyProto10-4              \t    2000\t    944615 ns/op\nBenchmarkDiffCopyProto50-4              \t     500\t   3334940 ns/op\nBenchmarkDiffCopyProto200-4             \t     200\t   9420038 ns/op\nBenchmarkDiffCopyProto1000-4            \t      50\t  30632429 ns/op\nBenchmarkIncrementalDiffCopy10-4        \t    2000\t    691993 ns/op\nBenchmarkIncrementalDiffCopy50-4        \t    1000\t   1304253 ns/op\nBenchmarkIncrementalDiffCopy200-4       \t     500\t   3306519 ns/op\nBenchmarkIncrementalDiffCopy1000-4      \t     200\t  10211343 ns/op\nBenchmarkIncrementalDiffCopy5000-4      \t      20\t  55194427 ns/op\nBenchmarkIncrementalDiffCopy10000-4     \t      20\t  91759289 ns/op\nBenchmarkIncrementalCopyWithTar10-4     \t    2000\t   1020258 ns/op\nBenchmarkIncrementalCopyWithTar50-4     \t     300\t   5348786 ns/op\nBenchmarkIncrementalCopyWithTar200-4    \t     100\t  19495000 ns/op\nBenchmarkIncrementalCopyWithTar1000-4   \t      20\t  70338507 ns/op\nBenchmarkIncrementalRsync10-4           \t      30\t  45215754 ns/op\nBenchmarkIncrementalRsync50-4           \t      30\t  45837260 ns/op\nBenchmarkIncrementalRsync200-4          \t      30\t  48780614 ns/op\nBenchmarkIncrementalRsync1000-4         \t      20\t  54801892 ns/op\nBenchmarkIncrementalRsync5000-4         \t      20\t  84782542 ns/op\nBenchmarkIncrementalRsync10000-4        \t      10\t 103355108 ns/op\nBenchmarkRsync10-4                      \t      30\t  46776470 ns/op\nBenchmarkRsync50-4                      \t      30\t  48601555 ns/op\nBenchmarkRsync200-4                     \t      20\t  59642691 ns/op\nBenchmarkRsync1000-4                    \t      20\t 101343010 ns/op\nBenchmarkGnuTar10-4                     \t     500\t   3171448 ns/op\nBenchmarkGnuTar50-4                     \t     300\t   5030296 ns/op\nBenchmarkGnuTar200-4                    \t     100\t  10464313 ns/op\nBenchmarkGnuTar1000-4                   \t      50\t  30375257 ns/op\n```\n\n----------------------------------------\n\nTITLE: DERP Client Method Reference\nDESCRIPTION: Reference to the ClosePeer method used in the derpprune maintenance tool.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/derp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n(*derphttp.Client).ClosePeer\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Linux Development Dependencies\nDESCRIPTION: Command to install additional development libraries required for building the DevPod GUI on Linux. These include GTK development files, WebKit, and AppIndicator components.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \\\n  libayatana-appindicator3-dev librsvg2-dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Prerelease Changes via Git Diff - Shell\nDESCRIPTION: This git command compares the current state of the repository with a prerelease branch to verify all intended changes are present before merging. Git must be installed and the branch 'prerelease_<module set>_<new tag>' must exist. It is mainly informational and outputs the diff to the console.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\\n\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results After Performance Improvement (AMD CPU)\nDESCRIPTION: Benchmark results for name mangling functions after PR #79, showing performance metrics on an AMD Ryzen CPU, further demonstrating the improvements across different processors.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmarkToXXXName/ToGoName-16         \t18527378\t      1972 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-16        \t15552692\t      2093 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-16       \t32161176\t      1117 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-16    \t32256634\t      1137 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-16 \t18599661\t      1946 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-16 \t17581353\t      2054 ns/op\t     105 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Installing Ginkgo Testing Framework\nDESCRIPTION: Command to install the Ginkgo testing framework which is required for running E2E tests.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/e2e/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/onsi/ginkgo/ginkgo\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Version in Markdown\nDESCRIPTION: This snippet demonstrates how to include the Go version command in a markdown file. It's used to instruct users to provide their Go version when reporting issues.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/fxamacker/cbor/v2/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`go version`\n```\n\n----------------------------------------\n\nTITLE: Creating Share Directory for Persistent Volume\nDESCRIPTION: Command to create the directory path referenced in the persistent volume configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/other-topics/advanced-guides/minikube-vscode-browser.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /home/dev/devpods/share\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License for Tailscale in Go\nDESCRIPTION: This code snippet is a comment block that declares the copyright holder as Tailscale Inc & AUTHORS and specifies the BSD-3-Clause license for the project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/header.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright (c) Tailscale Inc & AUTHORS\n// SPDX-License-Identifier: BSD-3-Clause\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to a forked Zap repository\nDESCRIPTION: This snippet demonstrates how to push local changes to a forked Zap repository on GitHub after making and testing modifications.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.uber.org/zap/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Restarting SSH Service on Debian Linux\nDESCRIPTION: Command to restart the SSH service on Debian-based Linux distributions to apply changes made to the SSH server configuration.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/docs/pages/developing-in-workspaces/environment-variables-in-devcontainer-json.mdx#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsystemctl restart ssh.service\n```\n\n----------------------------------------\n\nTITLE: DERP Maintenance Tool Reference\nDESCRIPTION: Reference to the derpprune command tool path used for maintenance.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/tailscale.com/derp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\ncmd/derpprune\n```\n\n----------------------------------------\n\nTITLE: Getting Arbitrary Value from Local Git Config in Go\nDESCRIPTION: This Go snippet shows how to extract a specific configuration value (e.g., 'branch.master.remote') from the local Git configuration file (.git/config) of the current repository using its key. It utilizes the `gitconfig.Local()` function, providing the key and receiving the value string and an error.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/tcnksm/go-gitconfig/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nremote, err := gitconfig.Local(\"branch.master.remote\")\n```\n\n----------------------------------------\n\nTITLE: Running Vet Script in Bash\nDESCRIPTION: This command runs the vet.sh script to catch vet errors in the project.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vet.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Shows how to define an Option interface for configuring values with an unexported apply method.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Queries in Go\nDESCRIPTION: Explains how to pre-compile JMESPath queries for improved performance when running multiple searches. This method is useful for scenarios where the same query is executed repeatedly on different data.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n    // ... handle the error\n}\nresult, err := precompiled.Search(data)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the full license text.\nSOURCE: https://github.com/loft-sh/devpod/blob/main/vendor/github.com/digitalocean/go-smbios/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n```"
  }
]