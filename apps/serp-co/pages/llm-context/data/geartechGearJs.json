[
  {
    "owner": "gear-tech",
    "repo": "gear-js",
    "content": "TITLE: Uploading a Program to Gear Protocol\nDESCRIPTION: Creates and sends an upload_program extrinsic to deploy a program to the Gear Protocol blockchain. Requires program WASM code, gas limit, value, and initialization payload.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = fs.readFileSync('path/to/program.wasm');\n\nconst program = {\n  code,\n  gasLimit: 1000000,\n  value: 1000,\n  initPayload: somePayload,\n};\n\nconst { programId, codeId, salt, extrinsic } = gearApi.program.upload(program, meta);\n\nawait extrinsic.signAndSend(keyring, (event) => {\n  console.log(event.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Program\nDESCRIPTION: Creates and sends a send_message extrinsic to interact with a program on the blockchain. Requires the destination program ID, payload, gas limit, value, and keepAlive flag.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const message = {\n    destination: destination, // programId\n    payload: somePayload,\n    gasLimit: 10000000,\n    value: 1000,\n    keepAlive: true, // if set to true the account is protected against removal due to low balances.\n  };\n  // In that case payload will be encoded using meta.handle_input type\n  let extrinsic = await gearApi.message.send(message, meta);\n  // So if you want to use another type you can specify it\n  extrinsic = await gearApi.message.send(message, meta, meta.async_handle_input);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await extrinsic.signAndSend(keyring, (event) => {\n    console.log(events.toHuman());\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gear API Connection\nDESCRIPTION: Creates a connection to a Gear Protocol node. By default, it connects to a local node, but you can specify a different provider address.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GearApi } from '@gear-js/api';\n\nconst gearApi = await GearApi.create();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst gearApi = await GearApi.create({ providerAddress: 'wss://someIP:somePort' });\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Program Metadata\nDESCRIPTION: Demonstrates how to create and use ProgramMetadata for encoding/decoding messages to/from a program and reading program state. The metadata provides type information for all program entrypoints.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProgramMetadata } from '@gear-js/api';\n\nconst meta = ProgramMetadata.from(`0x...`);\nmeta.types.init.input; // can be used to encode input message for init entrypoint of the program\nmeta.types.init.output; // can be used to decode output message for init entrypoint of the program\n// the same thing available for all entrypoints of the program\n\nmeta.types.state; // contains type for decoding state output\n```\n\n----------------------------------------\n\nTITLE: Uploading Code to Gear Protocol\nDESCRIPTION: Creates and sends an upload_code extrinsic to upload program code to the Gear Protocol blockchain without instantiating it. Returns the code hash for future reference.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = fs.readFileSync('path/to/program.opt.wasm');\n\nconst { codeHash } = await gearApi.code.upload(code);\n\ngearApi.code.signAndSend(alice, () => {\n  events.forEach(({ event: { method, data } }) => {\n    if (method === 'ExtrinsicFailed') {\n      throw new Error(data.toString());\n    } else if (method === 'CodeChanged') {\n      console.log(data.toHuman());\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Send Message Command\nDESCRIPTION: Command to send a message to an uploaded program, requires programId as parameter\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn message:send <programId>\n```\n\n----------------------------------------\n\nTITLE: Upload Program Command\nDESCRIPTION: Command to upload a program to the Gear chain\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn program:upload\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas for Message Execution\nDESCRIPTION: Shows how to calculate the minimum gas required for message execution using the calculateGas methods. Returns detailed gas information including minimum limit, reserved amount, and burned gas.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = fs.readFileSync('demo_meta.opt.wasm');\nconst meta = ProgramMetadata.from('0x...');\nconst gas = await gearApi.program.calculateGas.handle(\n  '0x...', // source id\n  '0x...', //program id\n  {\n    id: {\n      decimal: 64,\n      hex: '0x...',\n    },\n  }, // payload\n  0, // value\n  false, // allow other panics\n  meta, // the metadata of the program\n);\nconsole.log(gas.toHuman());\n```\n\n----------------------------------------\n\nTITLE: Creating a Program from Existing Code\nDESCRIPTION: Creates and sends a create_program extrinsic to instantiate a program from code that has already been uploaded to the blockchain. Requires the code ID, gas limit, value, and initialization payload.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst codeId = '0x...';\n\nconst program = {\n  codeId,\n  gasLimit: 1000000,\n  value: 1000,\n  initPayload: somePayload,\n};\n\nconst { programId, salt, extrinsic } = gearApi.program.create(program, meta);\n\nawait extrinsic.signAndSend(keyring, (event) => {\n  console.log(event.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Keyring with Gear API in JavaScript\nDESCRIPTION: Demonstrates how to create a new keyring using the GearKeyring class. It requires a keyring name and a passphrase, and returns both the keyring and its JSON representation.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GearKeyring } from '@gear-js/api';\nconst { keyring, json } = await GearKeyring.create('keyringName', 'passphrase');\n```\n\n----------------------------------------\n\nTITLE: Program State Management in Gear JS\nDESCRIPTION: Shows various methods for reading and interacting with program states, checking program existence, and handling messages.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst programId = '0x..';\nconst origin = '0x...'; // the address of the sender\nconst meta = ProgramMetadata.from('0x...');\nconst result = await api.message.calculateReply({\n  origin,\n  destination: programId,\n  payload: { myPayload: [] },\n  value: 0\n}, meta);\n\nconsole.log(result.toJSON());\nconsole.log('reply payload:', meta.createType(meta.types.handle.output, result.payload).toJSON());\n```\n\n----------------------------------------\n\nTITLE: Sending a Reply Message\nDESCRIPTION: Creates and sends a send_reply extrinsic to respond to a previously received message. Requires the original message ID, payload, gas limit, value, and keepAlive flag.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst reply = {\n  replyToId: messageId,\n  payload: somePayload,\n  gasLimit: 10000000,\n  value: 1000,\n  keepAlive: true,\n};\nconst extrinsic = await gearApi.message.sendReply(reply, meta);\nawait extrinsic(keyring, (events) => {\n  console.log(events.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Data with CreateType\nDESCRIPTION: Uses the CreateType.create method to encode and decode data with standard types, returning a Codec object with various serialization methods.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CreateType } from '@gear-js/api';\n\nconst result = CreateType.create('TypeName', somePayload);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nresult.toHex(); // - returns a hex represetation of the value\nresult.toHuman(); // - returns human friendly object representation of the value\nresult.toString(); //  - returns a string represetation of the value\nresult.toU8a(); // - encodes the value as a Unit8Array\nresult.toJSON(); // - converts the value to JSON\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Gear JS\nDESCRIPTION: Demonstrates how to subscribe to and handle various events in the Gear network, including system events and specific Gear events.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsub = await gearApi.query.system.events((events) => {\n  console.log(events.toHuman());\n});\n// Unsubscribe\nunsub();\n```\n\n----------------------------------------\n\nTITLE: Using PrepareProgramTransaction Hook\nDESCRIPTION: Example showing how to use usePrepareProgramTransaction hook for preparing and validating transactions.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useProgram, usePrepareProgramTransaction } from '@gear-js/react-hooks';\nimport { Program } from './lib';\n\nfunction LogTransactionFeeButton() {\n  const { data: program } = useProgram({\n    library: Program,\n    id: '0x...',\n  });\n\n  const { data, prepareTransactionAsync } = usePrepareProgramTransaction({\n    program,\n    serviceName: 'service',\n    functionName: 'function',\n  });\n\n  const handleClick = async () => {\n    const transaction = await prepareTransactionAsync({\n      args: ['arg', 'anotherArg'],\n\n      // additional options:\n      account: { addressOrPair: '0x...' }, // if not provided, connected account from extension will be used by default\n      value: 1000000n, // if not provided, 0 is sent by default\n      gasLimit: 1000000000n, // if not provided, gas will be calculated automatically\n      voucherId: '0x...', // if not provided, transaction will be sent without voucher\n    });\n\n    const fee = await transaction.transactionFee();\n\n    console.log('fee: ', fee);\n  };\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      Log Transaction Fee\n    </button>\n  );\n}\n\nexport { LogTransactionFeeButton };\n```\n\n----------------------------------------\n\nTITLE: Creating and Using State Metadata\nDESCRIPTION: Shows how to create and use StateMetadata for encoding input/decoding output payloads when reading state with a specific WASM file. The metadata provides information about available functions and their input/output types.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getStateMetadata } from '@gear-js/api';\n\nconst fileBuffer = fs.readFileSync('path/to/state.meta.wasm');\nconst meta = await getStateMetadata(fileBuffer);\nmeta.functions; // is an object whose keys are names of funtions and values are objects of input/output types\n```\n\n----------------------------------------\n\nTITLE: Resuming Paused Programs with Gear JS\nDESCRIPTION: Shows how to resume a paused program using api.program.resumeSession methods including initialization, page pushing and session completion.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst program = await api.programStorage.getProgram(programId, oneBlockBeforePauseHash);\nconst initTx = api.program.resumeSession.init({\n  programId,\n  allocations: program.allocations,\n  codeHash: program.codeHash.toHex(),\n});\n\nlet sessionId: HexString;\ninitTx.signAndSend(account, ({ events }) => {\n  events.forEach(({ event: { method, data }}) => {\n    if (method === 'ProgramResumeSessionStarted') {\n      sessionId = data.sessionId.toNumber();\n    }\n  })\n})\n\nconst pages = await api.programStorage.getProgramPages(programId, program, oneBlockBeforePauseHash);\nfor (const memPage of Object.entries(page)) {\n  const tx = api.program.resumeSession.push({ sessionId, memoryPages: [memPage] });\n  tx.signAndSend(account);\n}\n\nconst tx = api.program.resumeSession.commit({ sessionId, blockCount: 20_000 });\ntx.signAndSend(account);\n```\n\n----------------------------------------\n\nTITLE: Issuing and Managing Vouchers in Gear JS\nDESCRIPTION: Demonstrates voucher issuance, checking existence, retrieval, and usage for sending messages and uploading code.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VoucherIssued } from '@gear-js/api';\n\nconst programs = ['0x1234...', '0x5678...'];\nconst spenderAddress = '0x...';\nconst validForOneHour = (60 * 60) / 3;\n\nconst { extrinsic } = await api.voucher.issue(spenderAddress, 100 * 10 ** 12, validForOneHour, programs, true);\n\nextrinsic.signAndSend(account, ({ events }) => {\n  const voucherIssuedEvent = events.find(({event: { method }}) => method === 'VoucherIssued')?.event as VoucherIssued;\n\n  if (voucherIssuedEvent) {\n    console.log(voucherIssuedEvent.toJSON());\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Fee Information\nDESCRIPTION: Demonstrates how to query the estimated transaction fee before sending an extrinsic. Uses the paymentInfo method to get the partial fee amount.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await GearApi.create();\napi.program.upload({ code, gasLimit });\n// same for api.message, api.reply and others\nconst paymentInfo = await api.program.paymentInfo(alice);\nconst transactionFee = paymentInfo.partialFee.toNumber();\nconsolg.log(transactionFee);\n```\n\n----------------------------------------\n\nTITLE: Using Program Hook Example\nDESCRIPTION: Example showing how to use the useProgram hook to get a generated library instance.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useProgram } from '@gear-js/react-hooks';\nimport { Program } from './lib';\n\nconst { data } = useProgram({\n  library: Program,\n  id: '0x...',\n});\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Using ReadFullState Hook Example\nDESCRIPTION: Example demonstrating how to use the useReadFullState hook to read program state with metadata.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgramMetadata } from '@gear-js/api';\nimport { useReadFullState } from '@gear-js/react-hooks';\n\nfunction State() {\n  const programId = '0x...';\n  const metadataHex = '0x...';\n  const payload = null;\n\n  const { state } = useReadFullState(programId, ProgramMetadata.from(METADATA_HEX), payload);\n\n  return <div>{JSON.stringify(state)}</div>;\n}\n\nexport { State };\n```\n\n----------------------------------------\n\nTITLE: Defining Transactions in Gear-JS Workflow YAML\nDESCRIPTION: YAML structure for specifying transactions to perform in a Gear-JS workflow file, including program uploads and message sending with dynamic payload elements.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntransactions:\n  - type: upload_program\n    program: 1\n    account: alice\n\n  - type: send_message\n    program: 0\n    account: bob\n    payload:\n      Mint:\n        transaction_id: 0\n        token_metadata:\n          TokenMetadata:\n            name: $cli token_name\n            description: $program 1\n            media: https://\n            reference: https://\n    value: 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information\nDESCRIPTION: Fetches basic information about the connected Gear node, including chain information, node name, version, and genesis hash.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chain = await gearApi.chain();\nconst nodeName = await gearApi.nodeName();\nconst nodeVersion = await gearApi.nodeVersion();\nconst genesis = gearApi.genesisHash.toHex();\n```\n\n----------------------------------------\n\nTITLE: Loading Keyring from JSON with Gear API in JavaScript\nDESCRIPTION: Shows how to load a keyring from a JSON file using the GearKeyring class. It reads the JSON file and uses the fromJson method with a passphrase to recreate the keyring.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonKeyring = fs.readFileSync('path/to/keyring.json').toString();\nconst keyring = GearKeyring.fromJson(jsonKeyring, 'passphrase');\n```\n\n----------------------------------------\n\nTITLE: Block Operations in Gear JS\nDESCRIPTION: Shows methods for interacting with blocks including retrieving block data, timestamps, and converting between block numbers and hashes.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await gearApi.blocks.get(blockNumberOrBlockHash);\nconsole.log(data.toHuman());\n\nconst ts = await gearApi.blocks.getBlockTimestamp(blockNumberOrBlockHash);\nconsole.log(ts.toNumber());\n\nconst hash = await gearApi.blocks.getBlockHash(blockNumber);\nconsole.log(hash.toHex());\n\nconst hash = await gearApi.blocks.getBlockNumber(blockHash);\nconsole.log(hash.toNumber());\n```\n\n----------------------------------------\n\nTITLE: Utilizing Metadata Helper Methods\nDESCRIPTION: Demonstrates the additional helper methods available on metadata instances to understand type structures, get type names, and encode/decode data.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ProgramMetadata } from '@gear-js/api';\n\nconst meta = ProgramMetadata.from(`0x...`);\n\nmeta.getTypeName(4); // will return name of type with this index\n// or\nmeta.getTypeName(meta.types.handle.input);\n\nmeta.getTypeDef(4); // will return structure of this type\nmeta.getTypeDef(4, true); // if you need to get type structre with additional field (name, type, kind, len) you have to pass the second argument\n\nmeta.getAllTypes(); // will return all custom types existed in the registry of the program\n\nmeta.createType(4, { value: 'value' }); // to encode or decode data\n```\n\n----------------------------------------\n\nTITLE: Generating Mnemonic and Seed with Gear API in JavaScript\nDESCRIPTION: Shows how to generate a new mnemonic phrase and its corresponding seed using the GearKeyring class. It also demonstrates how to derive a seed from an existing mnemonic.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mnemonic, seed } = GearKeyring.generateMnemonic();\n\n// Getting a seed from mnemonic\nconst { seed } = GearKeyring.generateSeed(mnemonic);\n```\n\n----------------------------------------\n\nTITLE: Using SendProgramTransaction Hook\nDESCRIPTION: Example demonstrating how to use useSendProgramTransaction hook for signing and sending transactions.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useProgram, useSendProgramTransaction } from '@gear-js/react-hooks';\nimport { Program } from './lib';\n\nfunction SendTransaction() {\n  const { data: program } = useProgram({\n    library: Program,\n    id: '0x...',\n  });\n\n  const { sendTransactionAsync } = useSendProgramTransaction({\n    program,\n    serviceName: 'service',\n    functionName: 'function',\n  });\n\n  const handleClick = async () => {\n    const result = await sendTransactionAsync({\n      args: ['arg', 'anotherArg'],\n\n      // additional options:\n      account: { addressOrPair: '0x...' }, // if not provided, connected account from extension will be used by default\n      value: 1000000n, // if not provided, 0 is sent by default\n      gasLimit: 1000000000n, // if not provided, gas will be calculated automatically\n      voucherId: '0x...', // if not provided, transaction will be sent without voucher\n    });\n\n    const response = await result.response;\n\n    console.log('response: ', response);\n  };\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      Send Transaction\n    </button>\n  );\n}\n\nexport { SendTransaction };\n```\n\n----------------------------------------\n\nTITLE: Exporting Keyring to JSON with Gear API in JavaScript\nDESCRIPTION: Demonstrates how to export a keyring to JSON format using the GearKeyring class. It uses the toJson method with the keyring and a passphrase to create the JSON representation.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = GearKeyring.toJson(keyring, 'passphrase');\n```\n\n----------------------------------------\n\nTITLE: Read Mailbox Command\nDESCRIPTION: Command to read the user's mailbox messages\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn mailbox:read\n```\n\n----------------------------------------\n\nTITLE: Defining Programs in Gear-JS Workflow YAML\nDESCRIPTION: YAML structure for specifying programs to upload or interact with in a Gear-JS workflow file, including program IDs, addresses, and metadata paths.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprograms:\n  - id: 0\n    address: '0xa5291ad71150456ecf304d12c8e4bc0d01fbcc203b9fa92532bf50c0377f87c4'\n    path_to_meta: ./programs/nft.meta.txt\n\n  - name: Non-Fungible Token 1\n    id: 1\n    path_to_wasm: ./programs/nft.opt.wasm\n    path_to_meta: ./programs/nft.meta.txt\n    payload:\n      name: GNFT\n      symbol: GNFT\n      base_uri: https://gear-tech.io\n      royalties: null\n```\n\n----------------------------------------\n\nTITLE: Claim Value Command\nDESCRIPTION: Command to claim value sent from a program\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn mailbox:claimValue\n```\n\n----------------------------------------\n\nTITLE: Read Program State Command\nDESCRIPTION: Command to read the state of a specific program, requires programId as parameter\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn state:read <programId>\n```\n\n----------------------------------------\n\nTITLE: Basic Wallet Component Implementation\nDESCRIPTION: Example of implementing the Wallet component in a React header component with theme and balance display options.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/wallet-connect/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Wallet } from '@gear-js/wallet-connect';\nimport Logo from './logo.svg?react';\n\nfunction Header() {\n  return (\n    <header>\n      <Logo />\n\n      <Wallet\n        theme=\"vara\" // 'vara' (default) or 'gear' theme variation\n        displayBalance={true} // true (default) or false\n      />\n    </header>\n  );\n}\n\nexport { Header };\n```\n\n----------------------------------------\n\nTITLE: Creating Keyring from Seed with Gear API in JavaScript\nDESCRIPTION: Shows how to create a keyring from a seed using the GearKeyring class. It uses the fromSeed method with a hexadecimal seed and a name to generate the keyring.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst seed = '0x496f9222372eca011351630ad276c7d44768a593cecea73685299e06acef8c0a';\nconst keyring = await GearKeyring.fromSeed(seed, 'name');\n```\n\n----------------------------------------\n\nTITLE: Running Gear-JS Workflow with Arguments\nDESCRIPTION: Command to run a Gear-JS workflow with additional arguments for payload customization.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngear-js workflow path/to/workflow.yaml -a token_name=MY_NFT url=https://gear-tech.io\n```\n\n----------------------------------------\n\nTITLE: Creating Keyring from Mnemonic with Gear API in JavaScript\nDESCRIPTION: Demonstrates how to create a keyring from a mnemonic phrase using the GearKeyring class. It uses the fromMnemonic method with a mnemonic string and a name to generate the keyring.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst mnemonic = 'slim potato consider exchange shiver bitter drop carpet helmet unfair cotton eagle';\nconst keyring = GearKeyring.fromMnemonic(mnemonic, 'name');\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Endpoint for Gear-JS Workflow\nDESCRIPTION: Command to run a Gear-JS workflow with a custom WebSocket endpoint for node connection.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngear-js workflow path/to/wotkflow.yaml --ws wss://rpc-node.gear-tech.io\n```\n\n----------------------------------------\n\nTITLE: Signing Data with Gear Keyring in JavaScript\nDESCRIPTION: Demonstrates how to sign a message using a Gear keyring. It uses the GearKeyring.sign method to create a signature for the given message and keyring.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GearKeyring } from '@gear-js/api';\nconst message = 'your message';\nconst signature = GearKeyring.sign(keyring, message);\n```\n\n----------------------------------------\n\nTITLE: Running the sendMessage example\nDESCRIPTION: Commands to install dependencies and run the sendMessage example after setting up a local Gear node.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/txwrapper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\nyarn sendMessageExample\n```\n\n----------------------------------------\n\nTITLE: Using ProgramQuery Hook\nDESCRIPTION: Example demonstrating how to use useProgramQuery hook to read program state.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useProgram, useProgramQuery } from '@gear-js/react-hooks';\nimport { Program } from './lib';\n\nfunction State() {\n  const { data: program } = useProgram({\n    library: Program,\n    id: '0x...',\n  });\n\n  const { data } = useProgramQuery({\n    program,\n    serviceName: 'service',\n    functionName: 'function',\n    args: ['arg', 'anotherArg'],\n\n    // additional options:\n    // if true, subscription to a program's stateChanges in Gear MessagesDispatched event will be initialized.\n    // network traffic heavy, proceed with caution\n    watch: false,\n  });\n\n  return <div>{JSON.stringify(data)}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sails Hook Example\nDESCRIPTION: Example showing how to use the useSails hook to interact with a Sails instance.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSails } from '@gear-js/react-hooks';\n\nconst prorgramId = '0x...';\nconst idl = '...';\n\nconst { data } = useSails({\n  programId,\n  idl,\n});\n\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Using ProgramEvent Hook\nDESCRIPTION: Example showing how to use useProgramEvent hook to subscribe to program events.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useProgram, useProgramEvent } from '@gear-js/react-hooks';\nimport { Routing } from './pages';\nimport { Program } from './lib';\n\nfunction App() {\n  const { data: program } = useProgram({\n    library: Program,\n    id: '0x...',\n  });\n\n  useProgramEvent({\n    program,\n    serviceName: 'service',\n    functionName: 'function',\n    onData: (data) => console.log(data),\n  });\n\n  return (\n    <main>\n      <Routing />\n    </main>\n  );\n}\n\nexport { App };\n```\n\n----------------------------------------\n\nTITLE: NFT Protocol Binary Structure Implementation\nDESCRIPTION: Binary encoded data structure that defines an NFT protocol implementation including token metadata, transfers, approvals, and ownership management. Contains definitions for actions like minting, burning, transferring tokens and managing token approvals.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/examples/programs/nft.meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: binary\nCODE:\n```\n010000000000010c0000000114000000000000000001190000008d28a00008186e66745f696f1c496e69744e465400001001106e616d65040118537472696e6700011873796d626f6c040118537472696e67000120626173655f757269040118537472696e67000124726f79616c746965730801444f7074696f6e3c526f79616c746965733e00000400000502000804184f7074696f6e040454010c0108104e6f6e6500000010536f6d6504000c00000100000c1020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e24726f79616c7469657324526f79616c7469657300000801206163636f756e74731001185061796f757400011c70657263656e742c010c753136000010042042547265654d617008044b011404560120000400240000001410106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004001801205b75383b2033325d000018000003200000001c001c000005030020000005070024000002280028000004081420002c00000504003008186e66745f696f244e4654416374696f6e000128104d696e740801387472616e73616374696f6e5f696434010c753634000138746f6b656e5f6d65746164617461380134546f6b656e4d65746164617461000000104275726e0801387472616e73616374696f6e5f696434010c753634000120746f6b656e5f69643c011c546f6b656e4964000100205472616e736665720c01387472616e73616374696f6e5f696434010c753634000108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e4964000200385472616e736665725061796f75741001387472616e73616374696f6e5f696434010c753634000108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e4964000118616d6f756e7420011075313238000300244e46545061796f75740801146f776e657214011c4163746f724964000118616d6f756e74200110753132380004001c417070726f76650c01387472616e73616374696f6e5f696434010c753634000108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e49640005004044656c656761746564417070726f76650c01387472616e73616374696f6e5f696434010c75363400011c6d65737361676544015c44656c656761746564417070726f76654d6573736167650001247369676e61747572654801205b75383b2036345d000600144f776e6572040120746f6b656e5f69643c011c546f6b656e4964000700284973417070726f766564080108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e496400080014436c6561720401407472616e73616374696f6e5f686173684c01104832353600090000340000050600381020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e14746f6b656e34546f6b656e4d6574616461746100001001106e616d65040118537472696e6700012c6465736372697074696f6e040118537472696e670001146d65646961040118537472696e670001247265666572656e6365040118537472696e6700003c083c7072696d69746976655f74797065731055323536000004004001205b7536343b20345d000040000003040000003400441020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e2464656c6567617465645c44656c656761746564417070726f76654d6573736167650000140138746f6b656e5f6f776e65725f696414011c4163746f724964000144617070726f7665645f6163746f725f696414011c4163746f7249640001386e66745f70726f6772616d5f696414011c4163746f724964000120746f6b656e5f69643c011c546f6b656e496400015065787069726174696f6e5f74696d657374616d7034010c753634000048000003400000001c004c083c7072696d69746976655f74797065731048323536000004001801205b75383b2033325d00005008186e66745f696f204e46544576656e74000118205472616e73666572040054012c4e46545472616e73666572000000385472616e736665725061796f757404005801444e46545472616e736665725061796f7574000100244e46545061796f757404001001185061796f757400020020417070726f76616c04005c012c4e4654417070726f76616c000300144f776e65720801146f776e657214011c4163746f724964000120746f6b656e5f69643c011c546f6b656e4964000400284973417070726f7665640c0108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e4964000120617070726f766564600110626f6f6c00050000541020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e08696f2c4e46545472616e7366657200000c011066726f6d14011c4163746f724964000108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e49640000581020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e08696f444e46545472616e736665725061796f7574000010011066726f6d14011c4163746f724964000108746f14011c4163746f724964000120746f6b656e5f69643c011c546f6b656e496400011c7061796f7574731001185061796f757400005c1020676561725f6c6962486e6f6e5f66756e6769626c655f746f6b656e08696f2c4e4654417070726f76616c00000c01146f776e657214011c4163746f724964000140617070726f7665645f6163636f756e7414011c4163746f724964000120746f6b656e5f69643c011c546f6b656e496400006000000500006408186e66745f696f14496f4e46540000100114746f6b656e680128496f4e46545374617465000120746f6b656e5f69643c011c546f6b656e49640001146f776e657214011c4163746f7249640001307472616e73616374696f6e739801545665633c28483235362c204e46544576656e74293e00006808186e66745f696f28496f4e4654537461746500002001106e616d65040118537472696e6700011873796d626f6c040118537472696e67000120626173655f757269040118537472696e6700012c6f776e65725f62795f69646c015c5665633c28546f6b656e49642c204163746f724964293e00013c746f6b656e5f617070726f76616c737401705665633c28546f6b656e49642c205665633c4163746f7249643e293e000150746f6b656e5f6d657461646174615f62795f69648001945665633c28546f6b656e49642c204f7074696f6e3c546f6b656e4d657461646174613e293e000140746f6b656e735f666f725f6f776e65728c01705665633c284163746f7249642c205665633c546f6b656e49643e293e000124726f79616c746965730801444f7074696f6e3c526f79616c746965733e00006c000002700070000004083c140074000002780078000004083c7c007c000002140080000002840084000004083c88008804184f7074696f6e04045401380108104e6f6e6500000010536f6d6504003800000100008c00000290009000000408149400940000023c00980000029c009c000004084c5000\n```\n\n----------------------------------------\n\nTITLE: Validating Signatures with Gear API in JavaScript\nDESCRIPTION: Shows how to validate a signature using the Gear API. It uses the signatureIsValid function to verify if the signature matches the given public key and message.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signatureIsValid } from '@gear-js/api';\nconst publicKey = keyring.address;\nconst verified = signatureIsValid(publicKey, signature, message);\n```\n\n----------------------------------------\n\nTITLE: Converting Public Key to SS58 Format with Gear API in JavaScript\nDESCRIPTION: Shows how to convert a public key from raw format to ss58 format using the encodeAddress function from the Gear API.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { encodeAddress } from '@gear-js/api';\nconsole.log(encodeAddress('0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'));\n```\n\n----------------------------------------\n\nTITLE: Converting Public Key to Raw Format with Gear API in JavaScript\nDESCRIPTION: Demonstrates how to convert a public key from ss58 format to raw format using the decodeAddress function from the Gear API.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeAddress } from '@gear-js/api';\nconsole.log(decodeAddress('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'));\n```\n\n----------------------------------------\n\nTITLE: Installing Gear-JS React Hooks\nDESCRIPTION: Commands to install the @gear-js/react-hooks package using npm or yarn package managers.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-hooks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/react-hooks\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @gear-js/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Installing Gear-JS CLI via npm\nDESCRIPTION: Command to install the Gear-JS CLI tool globally using npm.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @gear-js/cli\n```\n\n----------------------------------------\n\nTITLE: Running Gear-JS Workflow with YAML File\nDESCRIPTION: Basic command to execute a Gear-JS workflow using a specified YAML file.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngear-js workflow path/to/workflow.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with tsconfig.node.json\nDESCRIPTION: Example of extending the provided TypeScript configuration for Node.js code in tsconfig.node.json.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@gear-js/frontend-configs/tsconfig.node.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gear-JS Wallet Connect Package\nDESCRIPTION: Commands for installing the @gear-js/wallet-connect package using npm or yarn package managers.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/wallet-connect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @gear-js/wallet-connect\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @gear-js/wallet-connect\n```\n\n----------------------------------------\n\nTITLE: Implementing a Button Component with Gear UI\nDESCRIPTION: Example of how to use the Button component from the Gear UI library. This code creates a BackButton component that logs a message when clicked and displays with custom text and an icon.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@gear-js/ui';\nimport arrowIcon from './images/arrow.svg';\n\nfunction BackButton() {\n  const handleClick = () => {\n    console.log('Going back!');\n  };\n\n  return <Button text=\"Go back\" icon={arrowIcon} onClick={handleClick} />;\n}\n\nexport { BackButton };\n```\n\n----------------------------------------\n\nTITLE: Gear Theme Wallet Implementation\nDESCRIPTION: Implementation of the Wallet component with Gear UI theme, including necessary style imports.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/wallet-connect/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Wallet } from '@gear-js/wallet-connect';\nimport './index.scss';\n\nfunction GearWallet() {\n  return <Wallet theme=\"gear\" />;\n}\n\nexport { GearWallet };\n```\n\n----------------------------------------\n\nTITLE: Creating a Back Button Component with Vara UI\nDESCRIPTION: Example of using the Button component from Vara UI to create a custom BackButton component in React. This demonstrates importing the Button, using an SVG icon, and handling a click event.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/vara-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@gear-js/vara-ui';\nimport ArrowSVG from './images/arrow.svg?react';\n\nfunction BackButton() {\n  const handleClick = () => {\n    console.log('Going back!');\n  };\n\n  return <Button text=\"Go back\" icon={ArrowSVG} onClick={handleClick} />;\n}\n\nexport { BackButton };\n```\n\n----------------------------------------\n\nTITLE: Vara Theme Wallet Implementation\nDESCRIPTION: Implementation of the Wallet component with Vara UI theme, including necessary style imports.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/wallet-connect/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Wallet } from '@gear-js/wallet-connect';\nimport '@gear-js/vara-ui/dist/style.css';\n\nfunction VaraWallet() {\n  return <Wallet theme=\"vara\" />;\n}\n\nexport { VaraWallet };\n```\n\n----------------------------------------\n\nTITLE: Installing Gear-JS API Package\nDESCRIPTION: Instructions for installing the @gear-js/api package using npm or yarn package managers.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/api\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @gear-js/api\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Events with Gear API in JavaScript\nDESCRIPTION: Demonstrates how to fetch all events from a specific block using the Gear API. It iterates through the events and logs each one in a human-readable format.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst events = await gearApi.blocks.getEvents(blockHash);\nevents.forEach((event) => {\n  console.log(event.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Submit Code Command\nDESCRIPTION: Command to submit code to the chain\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/examples/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn code:submit\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Extrinsics with Gear API in JavaScript\nDESCRIPTION: Shows how to retrieve all extrinsics from a specific block using the Gear API. It loops through the extrinsics and logs each one in a human-readable format.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/apis/gear/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst extrinsics = await gearApi.blocks.getExtrinsics(blockHash);\nextrinsics.forEach((extrinsic) => {\n  console.log(extrinsic.toHuman());\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @gear-js/txwrapper with npm\nDESCRIPTION: Command to install the @gear-js/txwrapper package using npm package manager.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/txwrapper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/txwrapper\n```\n\n----------------------------------------\n\nTITLE: Defining Accounts in Gear-JS Workflow YAML\nDESCRIPTION: YAML structure for specifying accounts in a Gear-JS workflow file, including various methods of account definition.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naccounts:\n  alice: bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice\n  bob: //Bob\n  my_account: '0x...seed'\n```\n\n----------------------------------------\n\nTITLE: Funding Accounts in Gear-JS Workflow YAML\nDESCRIPTION: YAML structure for specifying prefunded accounts and funding other accounts in a Gear-JS workflow file.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprefunded_account:\n  alice\n\nfund_accounts:\n  my_account: 1000000000\n```\n\n----------------------------------------\n\nTITLE: Gear Theme Styles Configuration\nDESCRIPTION: SCSS configuration required for the Gear UI theme implementation.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/wallet-connect/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@gear-js/ui/resets';\n@use '@gear-js/ui/typography';\n```\n\n----------------------------------------\n\nTITLE: Importing Vara UI Components Styles in React\nDESCRIPTION: Code snippet to import the CSS styles for Vara UI Components in a React application. This should be done in the application's root file.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/vara-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@gear-js/vara-ui/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Installing @gear-js/txwrapper with yarn\nDESCRIPTION: Command to install the @gear-js/txwrapper package using yarn package manager.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/txwrapper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add  @gear-js/txwrapper\n```\n\n----------------------------------------\n\nTITLE: Installing @gear-js/frontend-configs with yarn\nDESCRIPTION: Command to install the @gear-js/frontend-configs library using yarn package manager.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @gear-js/frontend-configs\n```\n\n----------------------------------------\n\nTITLE: Installing Gear UI Components with npm\nDESCRIPTION: Command to install the Gear UI Components library using npm package manager. This adds the package to your project's dependencies.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/ui\n```\n\n----------------------------------------\n\nTITLE: Decoding Binary Smart Contract Interface for Gear Protocol Marketplace\nDESCRIPTION: This binary-encoded data represents the interface definition for a marketplace smart contract on the Gear Protocol. It defines data structures for NFT and FT contracts, market actions, events, and state management in a compact binary format.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/tools/cli/examples/programs/nft_marketplace.meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: binary\nCODE:\n```\n0100000000000105000000010c0000000000000000010d0000007935780008246d61726b65745f696f28496e69744d61726b657400000c012061646d696e5f696404011c4163746f72496400012c74726561737572795f696404011c4163746f72496400013074726561737572795f66656510010c75313600000410106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004000801205b75383b2033325d000008000003200000000c000c00000503001000000504001408246d61726b65745f696f304d61726b6574416374696f6e000128384164644e6674436f6e74726163740400040128436f6e74726163744964000000344164644654436f6e74726163740400040128436f6e74726163744964000100344164644d61726b65744461746110013c6e66745f636f6e74726163745f6964040128436f6e7472616374496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e000120746f6b656e5f69641c011c546f6b656e496400011470726963652801304f7074696f6e3c753132383e0002001c4275794974656d08013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e49640003003443726561746541756374696f6e18013c6e66745f636f6e74726163745f6964040128436f6e7472616374496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e000120746f6b656e5f69641c011c546f6b656e49640001246d696e5f70726963652c0110753132380001286269645f706572696f6424010c7536340001206475726174696f6e24010c753634000400184164644269640c013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400011470726963652c01107531323800050034536574746c6541756374696f6e08013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011055323536000600204164644f6666657210013c6e66745f636f6e74726163745f6964040128436f6e7472616374496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e000120746f6b656e5f69641c011c546f6b656e496400011470726963652c01107531323800070020576974686472617710013c6e66745f636f6e74726163745f6964040128436f6e7472616374496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e000120746f6b656e5f69641c011c546f6b656e496400011470726963652c011450726963650008002c4163636570744f6666657210013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e00011470726963652c01145072696365000900001804184f7074696f6e04045401040108104e6f6e6500000010536f6d6504000400000100001c083c7072696d69746976655f74797065731055323536000004002001205b7536343b20345d0000200000030400000024002400000506002804184f7074696f6e040454012c0108104e6f6e6500000010536f6d6504002c00000100002c00000507003008246d61726b65745f696f2c4d61726b65744576656e7400013c404e6674436f6e747261637441646465640400040128436f6e747261637449640000003c4674436f6e747261637441646465640400040128436f6e747261637449640001003c4d61726b65744461746141646465640c013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400011470726963652801304f7074696f6e3c753132383e000200204974656d536f6c640c01146f776e657204011c4163746f72496400013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e49640003002042696441646465640c013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400011470726963652c0110753132380004003841756374696f6e437265617465640c013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400011470726963652c0110753132380005003841756374696f6e536574746c65640c013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e496400011470726963652c0110753132380006004041756374696f6e43616e63656c6c656408013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e4964000700244e46544c697374656410013c6e66745f636f6e74726163745f6964040128436f6e747261637449640001146f776e657204011c4163746f724964000120746f6b656e5f69641c011c546f6b656e496400011470726963652801304f7074696f6e3c753132383e000800284f66666572416464656410013c6e66745f636f6e74726163745f6964040128436f6e7472616374496400013866745f636f6e74726163745f696418013c4f7074696f6e3c4163746f7249643e000120746f6b656e5f69641c011c546f6b656e496400011470726963652c011075313238000900344f66666572416363657074656410013c6e66745f636f6e74726163745f6964040128436f6e74726163744964000120746f6b656e5f69641c011c546f6b656e49640001246e65775f6f776e657204011c4163746f72496400011470726963652c011075313238000a002057697468647261770c013c6e66745f636f6e74726163745f696404011c4163746f724964000120746f6b656e5f69641c011c546f6b656e496400011470726963652c011075313238000b00445472616e73616374696f6e4661696c6564000c0040526572756e5472616e73616374696f6e000d00345472616e7366657256616c7565000e00003408246d61726b65745f696f184d61726b657400001c012061646d696e5f696404011c4163746f72496400012c74726561737572795f696404011c4163746f72496400013074726561737572795f66656510010c7531360001146974656d7338019442547265654d61703c28436f6e747261637449642c20546f6b656e4964292c204974656d3e000158617070726f7665645f6e66745f636f6e74726163747370014442547265655365743c4163746f7249643e000154617070726f7665645f66745f636f6e74726163747370014442547265655365743c4163746f7249643e00011474785f69642401345472616e73616374696f6e4964000038042042547265654d617008044b013c04560140000400680000003c00000408041c004008246d61726b65745f696f104974656d00001c0120746f6b656e5f69641c011c546f6b656e49640001146f776e657204011c4163746f72496400013866745f636f6e74726163745f69641801484f7074696f6e3c436f6e747261637449643e00011470726963652801344f7074696f6e3c50726963653e00011c61756374696f6e44013c4f7074696f6e3c41756374696f6e3e0001186f66666572734c01b842547265654d61703c284f7074696f6e3c436f6e747261637449643e2c205072696365292c204163746f7249643e00010874785c01844f7074696f6e3c285472616e73616374696f6e49642c204d61726b65745478293e00004404184f7074696f6e04045401480108104e6f6e6500000010536f6d6504004800000100004808246d61726b65745f696f1c41756374696f6e00001401286269645f706572696f6424010c753634000128737461727465645f617424010c753634000120656e6465645f617424010c75363400013463757272656e745f70726963652c0114507269636500013863757272656e745f77696e6e657204011c4163746f72496400004c042042547265654d617008044b015004560104000400540000005000000408182c0054000002580058000004085004005c04184f7074696f6e04045401600108104e6f6e6500000010536f6d65040060000001000060000004082464006408246d61726b65745f696f204d61726b6574547800011c3443726561746541756374696f6e0000000c42696408011c6163636f756e7404011c4163746f72496400011470726963652c0114507269636500010034536574746c6541756374696f6e0002001053616c65040114627579657204011c4163746f724964000300144f666665720c011466745f6964040128436f6e7472616374496400011470726963652c0114507269636500011c6163636f756e7404011c4163746f7249640004002c4163636570744f666665720005002057697468647261770c011466745f6964040128436f6e7472616374496400011470726963652c0114507269636500011c6163636f756e7404011c4163746f72496400060000680000026c006c000004083c40007004204254726565536574040454010400040074000000740000020400\n```\n\n----------------------------------------\n\nTITLE: Installing @gear-js/frontend-configs with npm\nDESCRIPTION: Command to install the @gear-js/frontend-configs library using npm package manager.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/frontend-configs\n```\n\n----------------------------------------\n\nTITLE: Installing Gear UI Components with yarn\nDESCRIPTION: Command to install the Gear UI Components library using yarn package manager. This is an alternative to npm for adding the package to your project.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/gear-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @gear-js/ui\n```\n\n----------------------------------------\n\nTITLE: Installing Vara UI Components with npm\nDESCRIPTION: Command to install the Vara UI Components package using npm. This adds the library to your project's dependencies.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/vara-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @gear-js/vara-ui\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with tsconfig.app.json\nDESCRIPTION: Example of extending the provided TypeScript configuration for application code in tsconfig.app.json.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@gear-js/frontend-configs/tsconfig.app.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Gear Idea Frontend\nDESCRIPTION: Command to install required packages using Yarn package manager for the Gear Idea Frontend application.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/idea/gear/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Setting up tsconfig.json references\nDESCRIPTION: Example of configuring the main tsconfig.json file to reference both app and node configurations.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [{ \"path\": \"./tsconfig.app.json\" }, { \"path\": \"./tsconfig.node.json\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ESLint configuration\nDESCRIPTION: Example of importing and using the provided ESLint configuration in a project.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { eslintConfig } from '@gear-js/frontend-configs';\n\nexport default eslintConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vite configuration\nDESCRIPTION: Example of importing and using the provided Vite application configuration in a project.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { viteConfigs } from '@gear-js/frontend-configs';\n\nexport default viteConfigs.app;\n```\n\n----------------------------------------\n\nTITLE: Implementing Prettier configuration\nDESCRIPTION: Example of importing and using the provided Prettier configuration in a project.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/frontend-configs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { prettierConfig } from '@gear-js/frontend-configs';\n\nexport default prettierConfig;\n```\n\n----------------------------------------\n\nTITLE: Running Gear Idea Frontend Application\nDESCRIPTION: Command to start the Gear Idea Frontend React application after installing dependencies and configuring environment variables.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/idea/gear/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Simple Markdown Header\nDESCRIPTION: Basic markdown header for the gear-logger project documentation\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/logger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# gear-logger\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Gear.exe Idea React App\nDESCRIPTION: This command installs the necessary packages for the Gear.exe Idea React application using Yarn package manager.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/idea/gearexe/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running Gear.exe Idea React Application\nDESCRIPTION: This command starts the Gear.exe Idea React application in development mode using Yarn.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/idea/gearexe/frontend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Vara UI Components with yarn\nDESCRIPTION: Command to install the Vara UI Components package using yarn. This is an alternative to npm for adding the library to your project.\nSOURCE: https://github.com/gear-tech/gear-js/blob/main/utils/vara-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @gear-js/vara-ui\n```"
  }
]