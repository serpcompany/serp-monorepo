[
  {
    "owner": "cube-js",
    "repo": "cube",
    "content": "TITLE: Creating a Basic Cube in JavaScript and YAML\nDESCRIPTION: This snippet shows how to create a basic cube named 'users' with a SQL table definition in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Count Measure with Dimension\nDESCRIPTION: This SQL snippet demonstrates the generated query for the count measure grouped by the city dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT city, COUNT(id) AS count\nFROM users\nGROUP BY 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships Between Users and Companies in Cube.js\nDESCRIPTION: This code snippet demonstrates how to set up a many-to-many relationship between users and companies through an associative cube (companies_to_users). It shows how to define the data model with primary keys, relationships, and join conditions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql: `\n    SELECT 1 AS id, 'Ali' AS name UNION ALL\n    SELECT 2 AS id, 'Bob' AS name UNION ALL\n    SELECT 3 AS id, 'Eve' AS name\n  `,\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `string`,\n      primary_key: true\n    }\n  }\n})\n\ncube(`companies`, {\n  sql: `\n    SELECT 11 AS id, 'Acme Corporation' AS name UNION ALL\n    SELECT 12 AS id, 'Stark Industries' AS name\n  `,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `string`,\n      primary_key: true\n    },\n\n    name: {\n      sql: `name`,\n      type: `string`\n    }\n  }\n})\n\ncube(`companies_to_users`, {\n  sql: `\n    SELECT 11 AS company_id, 1 AS user_id UNION ALL\n    SELECT 11 AS company_id, 2 AS user_id UNION ALL\n    SELECT 12 AS company_id, 3 AS user_id\n  `,\n\n  joins: {\n    users: {\n      sql: `${CUBE}.user_id = ${users.id}`,\n      relationship: `one_to_many`\n    },\n\n    companies: {\n      sql: `${CUBE}.company_id = ${companies.id}`,\n      relationship: `one_to_many`\n    }\n  },\n\n  dimensions: {\n    id: {\n      // Joins require a primary key, so we'll create one on-the-fly\n      sql: `CONCAT(${CUBE}.user_id, ':', ${CUBE}.company_id)`,\n      type: `string`,\n      primary_key: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Cube.js REST API (POST)\nDESCRIPTION: Example of using the /v1/load endpoint to fetch data from Cube.js using a POST request. This method is useful for longer queries that might exceed URL length limits.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST  \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n --data '{\"query\": {\"measures\":[\"users.count\"]}}' \\\n http://localhost:4000/cubejs-api/v1/load\n```\n\n----------------------------------------\n\nTITLE: Defining Time Dimension in Cube.js\nDESCRIPTION: Shows how to define a time dimension for timestamp columns in both JavaScript and YAML formats. Used for working with time series data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    completed_at: {\n      sql: `completed_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: completed_at\n        sql: completed_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Defining Dimensions in Orders Cube using JavaScript and YAML\nDESCRIPTION: Shows how to define dimensions in a Cube.js schema, including setting a primary key. Demonstrates syntax for both JavaScript and YAML configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      // Here we explicitly let Cube know this field is the primary key\n      // This is required for de-duplicating results when using joins\n      primary_key: true,\n    },\n\n    status: {\n      sql: `status`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        # Here we explicitly let Cube know this field is the primary key\n        # This is required for de-duplicating results when using joins\n        primary_key: true\n\n      - name: status\n        sql: status\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Constructing a Query Object in JSON for Cube.js REST API\nDESCRIPTION: This snippet demonstrates how to structure a query object with various properties including measures, dimensions, filters, time dimensions, limit, offset, order, and timezone.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"stories.count\"],\n  \"dimensions\": [\"stories.category\"],\n  \"filters\": [\n    {\n      \"member\": \"stories.isDraft\",\n      \"operator\": \"equals\",\n      \"values\": [\"No\"]\n    }\n  ],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"stories.time\",\n      \"dateRange\": [\"2015-01-01\", \"2015-12-31\"],\n      \"granularity\": \"month\"\n    }\n  ],\n  \"limit\": 100,\n  \"offset\": 50,\n  \"order\": {\n    \"stories.time\": \"asc\",\n    \"stories.count\": \"desc\"\n  },\n  \"timezone\": \"America/Los_Angeles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube with Custom SQL Query in JavaScript and YAML\nDESCRIPTION: Illustrates how to define a cube using a custom SQL query instead of a simple table reference. Shows syntax for both JavaScript and YAML configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT *\n    FROM orders, line_items\n    WHERE orders.id = line_items.order_id\n  `\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT *\n      FROM orders, line_items\n      WHERE orders.id = line_items.order_id\n\n```\n\n----------------------------------------\n\nTITLE: Basic Cube Definition - JavaScript vs YAML Syntax\nDESCRIPTION: Demonstrates equivalent cube definitions using both JavaScript and YAML syntax with SQL table selection.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT *\n    FROM orders, line_items\n    WHERE orders.id = line_items.order_id\n  `,\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT *\n      FROM orders, line_items\n      WHERE orders.id = line_items.order_id\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Cube.js REST API (GET)\nDESCRIPTION: Example of using the /v1/load endpoint to fetch data from Cube.js using a GET request. It demonstrates how to structure the query and includes the expected response format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -G \\\n  --data-urlencode 'query={\"measures\":[\"users.count\"]}' \\\n  http://localhost:4000/cubejs-api/v1/load\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"measures\": [\"users.count\"],\n    \"filters\": [],\n    \"timezone\": \"UTC\",\n    \"dimensions\": [],\n    \"timeDimensions\": []\n  },\n  \"data\": [\n    {\n      \"users.count\": \"700\"\n    }\n  ],\n  \"annotation\": {\n    \"measures\": {\n      \"users.count\": {\n        \"title\": \"Users Count\",\n        \"shortTitle\": \"Count\",\n        \"type\": \"number\"\n      }\n    },\n    \"dimensions\": {},\n    \"segments\": {},\n    \"timeDimensions\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cube JavaScript Client and Angular Package\nDESCRIPTION: Commands for installing required Cube packages using npm or Yarn package managers. Installs both the core client (@cubejs-client/core) and Angular-specific package (@cubejs-client/ngx).\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/angular.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save @cubejs-client/core @cubejs-client/ngx\n\n# Yarn\nyarn add @cubejs-client/core @cubejs-client/ngx\n```\n\n----------------------------------------\n\nTITLE: Defining Cubes for Customers and Orders in YAML\nDESCRIPTION: This snippet demonstrates how to define 'customers' and 'orders' cubes with their respective dimensions in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: customers\n    # ...\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: company\n        sql: company\n        type: string\n\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: customer_id\n        sql: customer_id\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Adding Measures and Dimensions to a Cube\nDESCRIPTION: This snippet demonstrates how to add a count measure and two dimensions (city and company_name) to the users cube in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    city: {\n      sql: `city`,\n      type: `string`,\n    },\n\n    company_name: {\n      sql: `company_name`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    measures:\n      - name: count\n        sql: id\n        type: count\n\n    dimensions:\n      - name: city\n        sql: city\n        type: string\n\n      - name: company_name\n        sql: company_name\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Title and Description in JavaScript\nDESCRIPTION: This snippet shows how to set a custom title and description for a cube using the title and description parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n  title: `Product Orders`,\n  description: `All orders-related information`,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Metrics-First View in Cube\nDESCRIPTION: A YAML example showing the metrics-first approach for creating a view focused on a single measure (average_order_value) with all relevant dimensions for analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: average_order_value\n\n    cubes:\n      - join_path: orders\n        includes:\n          - average_order_value\n\n          - status\n          - created_at\n\n      - join_path: orders.users\n        prefix: true\n        includes: \n          - city\n          - age\n          - gender\n```\n\n----------------------------------------\n\nTITLE: Private Dimension Configuration in JavaScript\nDESCRIPTION: Example showing how to configure private dimensions in a cube using JavaScript syntax, with a calculated dimension based on a private field.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/member-level-security.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  dimensions: {\n    first_name: {\n      sql: `first_name`,\n      type: `string`,\n      public: false\n    },\n\n    initial: {\n      sql: `LEFT(${first_name}, 1)`,\n      type: `string`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Count Distinct Measure in Cube.js\nDESCRIPTION: This example demonstrates how to create a count distinct measure in Cube.js. It counts the number of unique user IDs in the orders cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    unique_user_count: {\n      sql: `user_id`,\n      type: `count_distinct`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: unique_user_count\n        sql: user_id\n        type: count_distinct\n```\n\n----------------------------------------\n\nTITLE: Defining a View in JavaScript and YAML\nDESCRIPTION: Demonstrates how to create a view in Cube.js, which references multiple cubes and includes specific members. Shows syntax for both JavaScript and YAML configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nview(`orders`, {\n  cubes: [\n    {\n      join_path: base_orders,\n      includes: [\n        `status`,\n        `created_date`,\n        `total_amount`,\n        `total_amount_shipped`,\n        `count`,\n        `average_order_value`,\n      ],\n    },\n    {\n      join_path: base_orders.line_items.products,\n      includes: [\n        {\n          name: `name`,\n          alias: `product`,\n        },\n      ],\n    },\n    {\n      join_path: base_orders.users,\n      prefix: true,\n      includes: `*`,\n      excludes: [`company`],\n    },\n  ],\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders\n\n    cubes:\n      - join_path: base_orders\n        includes:\n          - status\n          - created_date\n          - total_amount\n          - total_amount_shipped\n          - count\n          - average_order_value\n\n      - join_path: base_orders.line_items.products\n        includes:\n          - name: name\n            alias: product\n\n      - join_path: base_orders.users\n        prefix: true\n        includes: \"*\"\n        excludes:\n          - company\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryBuilder with Vue.js and Cube\nDESCRIPTION: This snippet demonstrates how to use the QueryBuilder component from @cubejs-client/vue to create an interactive analytics query builder in a Vue.js application. It shows the component structure, data binding, and integration with a multiselect input for measure selection.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-vue.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <query-builder :cube-api=\"cubeApi\" :query=\"query\">\n    <template #builder=\"{ measures, setMeasures, availableMeasures }\">\n      <multiselect\n        placeholder=\"Please Select\"\n        label=\"Title\"\n        track-by=\"name\"\n        multiple\n        :customLabel=\"customLabel\"\n        :value=\"measures\"\n        :options=\"availableMeasures\"\n        @input=\"(...args) => set(setMeasures, ...args)\"\n      />\n    </template>\n\n    <template #default=\"{ resultSet }\">\n      <chart-renderer v-if=\"resultSet\" :result-set=\"resultSet\" />\n    </template>\n\n    <template #empty>Loading...</template>\n  </query-builder>\n</template>\n\n<script>\n  import cube from \"@cubejs-client/core\";\n  import Multiselect from \"vue-multiselect\";\n  import { QueryBuilder } from \"@cubejs-client/vue\";\n  import ChartRenderer from \"./ChartRenderer.vue\";\n\n  const API_URL =\n    \"https://awesome-ecom.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1\";\n  const CUBE_TOKEN =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTQ2NjY4OTR9.0fdi5cuDZ2t3OSrPOMoc3B1_pwhnWj4ZmM3FHEX7Aus\";\n\n  const cubeApi = cube(CUBE_TOKEN, { apiUrl: API_URL });\n\n  export default {\n    name: \"QueryBuilderExample\",\n    components: {\n      Multiselect,\n      QueryBuilder,\n      ChartRenderer,\n    },\n    data() {\n      const query = {\n        measures: [],\n        timeDimensions: [\n          {\n            dimension: \"LineItems.createdAt\",\n            granularity: \"month\",\n          },\n        ],\n      };\n\n      return {\n        cubeApi,\n        selected: undefined,\n        query,\n      };\n    },\n    methods: {\n      customLabel(a) {\n        return a.title;\n      },\n      set(setMeasures, value) {\n        setMeasures(value.map((e) => e.name));\n      },\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Measures in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to define basic measures with name, SQL, and type parameters in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n\n    total_amount: {\n      sql: `amount`,\n      type: `sum`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using sql Parameter in JavaScript\nDESCRIPTION: This snippet shows how to use the sql parameter to define a custom SQL query for a cube, including referencing another cube's SQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`companies`, {\n  sql: `\n    SELECT\n      users.company_name,\n      users.company_id\n    FROM ${users.sql()} AS users\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Non-SQL References in Data Models\nDESCRIPTION: Examples of referencing members outside SQL expressions without using curly braces in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    dimensions:\n      - name: status\n        sql: status\n        type: string\n\n    measures:\n      - name: count\n        type: count\n\n    pre_aggregations:\n      - name: orders_by_status\n        dimensions:\n          - CUBE.status\n        measures:\n          - CUBE.count\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  dimensions: {\n    status: {\n      sql: `status`,\n      type: `string`\n    }\n  },\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  },\n\n  pre_aggregations: {\n    orders_by_status: {\n      dimensions: [CUBE.status],\n      measures: [CUBE.count]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Data Casting in Cube API\nDESCRIPTION: Example showing how to configure the Cube API client to automatically cast numeric strings to numbers using the castNumerics option.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from '@cubejs-client/core'\n \nconst cubeApi = cube(CUBE_API_TOKEN, {\n  apiUrl: CUBE_API_URL\n})\n\nconst resultSet = await cubeApi.load(query, {\n  castNumerics: true\n})\n\nconsole.log(resultSet.tablePivot())\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Many-to-Many Relationships in Cube.js\nDESCRIPTION: This YAML snippet provides the equivalent configuration for defining the many-to-many relationship between users and companies through an associative cube. It shows the same data model structure as the JavaScript version but in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql: >\n      SELECT 1 AS id, 'Ali' AS name UNION ALL\n      SELECT 2 AS id, 'Bob' AS name UNION ALL\n      SELECT 3 AS id, 'Eve' AS name\n \n    measures:\n      - name: count\n        type: count\n \n    dimensions:\n      - name: id\n        sql: id\n        type: string\n        primary_key: true\n \n  - name: companies\n    sql: >\n      SELECT 11 AS id, 'Acme Corporation' AS name UNION ALL\n      SELECT 12 AS id, 'Stark Industries' AS name\n \n    dimensions:\n      - name: id\n        sql: id\n        type: string\n        primary_key: true\n \n      - name: name\n        sql: name\n        type: string\n \n  - name: companies_to_users\n    sql: >\n      SELECT 11 AS company_id, 1 AS user_id UNION ALL\n      SELECT 11 AS company_id, 2 AS user_id UNION ALL\n      SELECT 12 AS company_id, 3 AS user_id\n \n    joins:\n      - name: users\n        sql: \"{CUBE}.user_id = {users.id}\"\n        relationship: one_to_many\n \n      - name: companies\n        sql: \"{CUBE}.company_id = {companies.id}\"\n        relationship: one_to_many\n \n    dimensions:\n      - name: id\n        # Joins require a primary key, so we'll create one on-the-fly\n        sql: \"CONCAT({CUBE}.user_id, ':', {CUBE}.company_id)\"\n        type: string\n        primary_key: true\n```\n\n----------------------------------------\n\nTITLE: Decomposing Non-Additive Measures into Additive Formulas in Cube.js\nDESCRIPTION: This snippet demonstrates how to rewrite a non-additive average measure as a calculated measure using additive measures in Cube.js. It also shows how to define pre-aggregations using these additive measures for better performance.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/non-additivity.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    measures:\n      - name: avg_age\n        sql: \"{age_sum} / {count}\"\n        type: number\n\n      - name: age_sum\n        sql: age\n        type: sum\n\n      - name: count\n        type: count\n\n    pre_aggregations:\n      - name: main\n        measures:\n          - age_sum\n          - count\n        dimensions:\n          - gender\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  measures: {\n    avg_age: {\n      sql: `${age_sum} / ${count}`,\n      type: `number`,\n    },\n\n    age_sum: {\n      sql: `age`,\n      type: `sum`,\n    },\n\n    count: {\n      type: `count`,\n    },\n  },\n\n  pre_aggregations: {\n    main: {\n      measures: [age_sum, count],\n      dimensions: [gender],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-aggregations in Cube.js using JavaScript\nDESCRIPTION: This example shows how to define a pre-aggregation named 'main' for an orders cube. It specifies which measures and dimensions to include, along with time dimension settings for daily granularity to accelerate queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    main: {\n      measures: [CUBE.count],\n      dimensions: [CUBE.status],\n      timeDimension: CUBE.created_at,\n      granularity: `day`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Join Path Issues in Cube.js Data Model\nDESCRIPTION: This code snippet demonstrates how to restructure join definitions to create a valid join path between users and companies. It moves one join from the companies_to_users cube to the users cube to establish a directed path.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  joins: {\n    companies_to_users: {\n      sql: `${CUBE}.id = ${companies_to_users}.user_id`,\n      relationship: `one_to_many`\n    }\n  }\n\n  // ...\n})\n\ncube(`companies_to_users`, {\n  joins: {\n    // users: {\n    //   sql: `${CUBE}.user_id = ${users.id}`,\n    //   relationship: `one_to_many`\n    // },\n\n    companies: {\n      sql: `${CUBE}.company_id = ${companies.id}`,\n      relationship: `one_to_many`\n    }\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Cube in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a basic cube named 'users' with joins, measures, and dimensions using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    organizations: {\n      relationship: `many_to_one`,\n      sql: `${users.organization_id} = ${organizations.id}`,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n      sql: `id`,\n    },\n  },\n\n  dimensions: {\n    organization_id: {\n      sql: `organization_id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n\n    country: {\n      sql: `country`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated SQL from {cube.sql()} Function\nDESCRIPTION: Example of the generated SQL query when using nested {cube.sql()} references, showing how Cube.js creates nested subqueries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) \"dogs__count\"\nFROM (\n  SELECT *\n  FROM (\n    SELECT *\n    FROM organisms\n    WHERE kingdom = 'animals'\n  )\n  WHERE species = 'dogs'\n) AS \"dogs\"\n```\n\n----------------------------------------\n\nTITLE: Defining Lessons Cube with Joins in JavaScript\nDESCRIPTION: JavaScript version of the 'lessons' cube with joins to the 'students' and 'teachers' cubes, establishing the relationships between lessons and users.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`lessons`, {\n  sql_table: `lessons`,\n\n  joins: {\n    students: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.student_id = ${students.id}`,\n    },\n\n    teachers: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.teacher_id = ${teachers.id}`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Access Policies for Different Roles in Cube.js\nDESCRIPTION: This snippet demonstrates how to define access policies for different roles, including a policy that applies to all users. It shows the structure for both YAML and JavaScript configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/data-access-policies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    access_policy:\n        # Applies to any role\n      - role: \"*\"\n        # ...\n\n      - role: marketing\n        # ...\n\n      - role: finance\n        # ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      // Applies to any role\n      role: `*`,\n      // ...\n    },\n    {\n      role: `marketing`,\n      // ...\n    },\n    {\n      role: `finance`,\n      // ...\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a One-to-Many Join to Customers Cube in YAML\nDESCRIPTION: This snippet demonstrates how to add a one-to-many join from the 'customers' cube to the 'orders' cube in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: customers\n    # ...\n\n    joins:\n      - name: orders\n        relationship: one_to_many\n        sql: \"{CUBE}.id = {orders.customer_id}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boolean Measure in Cube.js\nDESCRIPTION: This snippet illustrates how to create a boolean measure in Cube.js. It uses the BOOL_AND function to check if all orders have a 'completed' status.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    is_completed: {\n      sql: `BOOL_AND(status = 'completed')`,\n      type: `boolean`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: is_completed\n        sql: \"BOOL_AND(status = 'completed')\"\n        type: boolean\n```\n\n----------------------------------------\n\nTITLE: Using Python Data in Jinja Templates\nDESCRIPTION: Shows how to use Python-generated data within Jinja templates to create dynamic Cube data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  {%- for cube in load_data()[\"cubes\"] %}\n\n  - name: {{ cube.name }}\n\n  {%- if cube.measures is not none and cube.measures|length > 0 %}\n    measures:\n      {%- for measure in cube.measures %}\n      - name: {{ measure.name }}\n        type: {{ measure.type }}\n      {%- if measure.sql %}\n        sql: {{ measure.sql }}\n      {%- endif %}\n      {%- endfor %}\n  {%- endif %}\n\n  {%- if cube.dimensions is not none and cube.dimensions|length > 0 %}\n    dimensions:\n      {%- for dimension in cube.dimensions %}\n      - name: {{ dimension.name }}\n        type: {{ dimension.type }}\n        sql: {{ dimension.sql }}\n      {%- endfor %}\n  {%- endif %}\n  {%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync with Schedule Interval in JavaScript\nDESCRIPTION: This snippet shows how to configure semantic layer sync for Superset in JavaScript for Cube.js. It exports a function that returns configuration including authentication details, URL, database, and a schedule interval of every 10 minutes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"superset\",\n        name: \"Superset Sync\",\n        active: false,\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"superset.example.com\",\n          database: \"Cube Cloud: staging-deployment\",\n          scheduleInterval: \"every 10 minutes\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions Cube in Cube.js (YAML)\nDESCRIPTION: This YAML version creates a new 'sessions' cube that groups events into sessions based on user activity. It uses window functions to calculate inactivity time and determine session boundaries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sessions\n    sql: >\n      SELECT\n        ROW_NUMBER() OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) || ' - '|| event.anonymous_id AS session_id\n        , event.anonymous_id\n        , event.timestamp AS session_start_at\n        , ROW_NUMBER() OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) AS session_sequence\n        , LEAD(timestamp) OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) AS next_session_start_at\n      FROM (\n        SELECT e.anonymous_id\n          , e.timestamp\n          , DATEDIFF(minutes\n          , LAG(e.timestamp) OVER(PARTITION BY e.anonymous_id ORDER BY e.timestamp)\n          , e.timestamp) AS inactivity_time\n        FROM {events.sql()} AS e\n      ) AS event\n      WHERE (event.inactivity_time > 30 OR event.inactivity_time IS NULL)\n```\n\n----------------------------------------\n\nTITLE: Enabling Value Search for Dimensions in YAML\nDESCRIPTION: Example of enabling the value search feature for a dimension to allow the AI API to introspect actual values in the dimension for more accurate query generation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: order_status\n      sql: order_status\n      type: string\n      meta:\n        ai:\n          searchable: true\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_PARAMS with Extended Cubes\nDESCRIPTION: Demonstrates two approaches for handling FILTER_PARAMS with cube extension: overriding SQL in target cubes or combining all filters in the base cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/code-reusability-extending-cubes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: product_purchases\n    sql: >\n      SELECT *\n      FROM events\n      WHERE {FILTER_PARAMS.product_purchases.timestamp.filter('time')}\n\n      # ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`product_purchases`, {\n  sql: `\n    SELECT *\n    FROM events\n    WHERE ${FILTER_PARAMS.product_purchases.timestamp.filter(\"time\")}\n  `,\n\n  // ...\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: base_events\n    sql: >\n      SELECT *\n      FROM events\n      WHERE\n        {FILTER_PARAMS.base_events.timestamp.filter('time')} AND\n        {FILTER_PARAMS.product_purchases.timestamp.filter('time')} AND\n        {FILTER_PARAMS.page_views.timestamp.filter('time')}\n\n      # ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`base_events`, {\n  sql: `\n    SELECT *\n    FROM events\n    WHERE\n      {$FILTER_PARAMS.base_events.timestamp.filter('time')} AND\n      {$FILTER_PARAMS.product_purchases.timestamp.filter('time')} AND\n      {$FILTER_PARAMS.page_views.timestamp.filter('time')}\n  `,\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time Data Fetching with React Hooks\nDESCRIPTION: This code demonstrates how to use the useCubeQuery hook from @cubejs-client/react to implement real-time data fetching in a React component.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/real-time-data-fetch.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCubeQuery } from \"@cubejs-client/react\";\n\nconst Chart = ({ query }) => {\n  const { resultSet, error, isLoading } = useCubeQuery(query, {\n    // The component will automatically unsubscribe when unmounted\n    subscribe: true,\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <pre>{error.toString()}</pre>;\n  }\n\n  if (!resultSet) {\n    return null;\n  }\n\n  return <LineChart resultSet={resultSet} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using CUBE Reference in YAML Data Model\nDESCRIPTION: YAML example showing how to use the CUBE reference to specify column names without ambiguity in data modeling. This helps avoid mistakes when referencing columns across multiple cubes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    dimensions:\n      - name: name\n        sql: \"{CUBE}.name\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Connection in .env File\nDESCRIPTION: This snippet shows the required environment variables to set up a Snowflake database connection in a Cube project's .env file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/snowflake.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=snowflake\nCUBEJS_DB_SNOWFLAKE_ACCOUNT=XXXXXXXXX.us-east-1\nCUBEJS_DB_SNOWFLAKE_WAREHOUSE=MY_SNOWFLAKE_WAREHOUSE\nCUBEJS_DB_NAME=my_snowflake_database\nCUBEJS_DB_USER=snowflake_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Using useCubeQuery Hook in React\nDESCRIPTION: Demonstrates how to use the useCubeQuery hook to execute Cube queries and render the results in a table. It handles loading states, errors, and data rendering.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Table } from 'antd';\nimport { useCubeQuery }  from '@cubejs-client/react';\n\nexport default function App() {\n  const { resultSet, isLoading, error, progress } = useCubeQuery({\n    measures: ['Orders.count'],\n    dimensions: ['Orders.createdAt.month'],\n  });\n\n  if (isLoading) {\n    return <div>{progress && progress.stage && progress.stage.stage || 'Loading...'}</div>;\n  }\n\n  if (error) {\n    return <div>{error.toString()}</div>;\n  }\n\n  if (!resultSet) {\n    return null;\n  }\n\n  const dataSource = resultSet.tablePivot();\n  const columns = resultSet.tableColumns();\n\n  return <Table columns={columns} dataSource={dataSource} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data with CubeApi in JavaScript\nDESCRIPTION: Fetches data for a specified query and visualizes it using Chart.js. This example demonstrates a full workflow from querying to visualization.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from '@cubejs-client/core';\nimport Chart from 'chart.js';\nimport chartjsConfig from './toChartjsData';\n\nconst cubeApi = cube('CUBE_TOKEN');\n\nconst resultSet = await cubeApi.load({\n measures: ['Stories.count'],\n timeDimensions: [{\n   dimension: 'Stories.time',\n   dateRange: ['2015-01-01', '2015-12-31'],\n   granularity: 'month'\n  }]\n});\n\nconst context = document.getElementById('myChart');\nnew Chart(context, chartjsConfig(resultSet));\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Paying Percentage Measure\nDESCRIPTION: This SQL snippet demonstrates the generated query for the paying_percentage calculated measure when requested via the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  100.0 * COUNT(\n    CASE WHEN (users.paying = 'true') THEN users.id END\n  ) / COUNT(users.id) AS paying_percentage\nFROM users\n```\n\n----------------------------------------\n\nTITLE: Creating Blended Sales Cube in Cube.js\nDESCRIPTION: Implementation of data blending pattern combining online and retail sales into a single cube with unified metrics and additional calculated measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/data-blending.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`all_sales`, {\n  sql: `\n    SELECT\n      amount,\n      user_id AS customer_id,\n      created_at,\n      'online' AS row_type\n    FROM ${online_orders.sql()} AS online\n    UNION ALL\n    SELECT\n      amount,\n      customer_id,\n      created_at,\n      'retail' AS row_type\n    FROM ${retail_orders.sql()} AS retail\n `,\n\n  measures: {\n    customer_count: {\n      sql: `customer_id`,\n      type: `count_distinct`,\n    },\n\n    revenue: {\n      sql: `amount`,\n      type: `sum`,\n    },\n\n    online_revenue: {\n      sql: `amount`,\n      type: `sum`,\n      filters: [{ sql: `${CUBE}.row_type = 'online'` }],\n    },\n\n    offline_revenue: {\n      sql: `amount`,\n      type: `sum`,\n      filters: [{ sql: `${CUBE}.row_type = 'retail'` }],\n    },\n\n    online_revenue_percentage: {\n      sql: `\n        ${online_revenue} /\n        NULLIF(${online_revenue} + ${offline_revenue}, 0)\n      `,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n\n    revenue_type: {\n      sql: `row_type`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: all_sales\n    sql: >\n      SELECT\n        amount,\n        user_id AS customer_id,\n        created_at,\n        'online' AS row_type\n      FROM {online_orders.sql()} AS online\n      UNION ALL\n      SELECT\n        amount,\n        customer_id,\n        created_at,\n        'retail' AS row_type\n      FROM {retail_orders.sql()} AS retail\n\n    measures:\n      - name: customer_count\n        sql: customer_id\n        type: count_distinct\n\n      - name: revenue\n        sql: amount\n        type: sum\n\n      - name: online_revenue\n        sql: amount\n        type: sum\n        filters:\n          - sql: \"{CUBE}.row_type = 'online'\"\n\n      - name: offline_revenue\n        sql: amount\n        type: sum\n        filters:\n          - sql: \"{CUBE}.row_type = 'retail'\"\n\n      - name: online_revenue_percentage\n        sql: >\n          {online_revenue} /\n          NULLIF({online_revenue} + {offline_revenue}, 0)\n        type: number\n        format: percent\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n\n      - name: revenue_type\n        sql: row_type\n        type: string\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with Joins and Filtering\nDESCRIPTION: Example SQL query demonstrating cross joins, filtering, and aggregation capabilities of the SQL API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  users.state,\n  users.city,\n  orders.status,\n  MEASURE(orders.count)\nFROM orders\nCROSS JOIN users\nWHERE\n  users.state != 'us-wa'\n  AND orders.created_at BETWEEN '2020-01-01' AND '2021-01-01'\nGROUP BY 1, 2, 3\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Model Generation with API Integration\nDESCRIPTION: Implementation of dynamic cube generation using asyncModule() to fetch and transform cube definitions from an API endpoint.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/javascript.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require(\"node-fetch\");\nimport {\n  convertStringPropToFunction,\n  transformDimensions,\n  transformMeasures,\n} from \"./utils\";\n\nasyncModule(async () => {\n  const dynamicCubes = await (\n    await fetch(\"http://your-api-endpoint/dynamicCubes\")\n  ).json();\n\n  console.log(dynamicCubes);\n\n  dynamicCubes.forEach((dynamicCube) => {\n    const dimensions = transformDimensions(dynamicCube.dimensions);\n    const measures = transformMeasures(dynamicCube.measures);\n\n    cube(dynamicCube.name, {\n      sql: dynamicCube.sql,\n      dimensions,\n      measures,\n      pre_aggregations: {\n        main: {\n          // ...\n        },\n      },\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculated Measures in Cube.js\nDESCRIPTION: Demonstrates how to create a calculated measure 'completed_ratio' by dividing completed orders count by total orders count. Shows implementation in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT 1 AS id, 'processing' AS status UNION ALL\n      SELECT 2 AS id, 'completed'  AS status UNION ALL\n      SELECT 3 AS id, 'completed'  AS status\n\n    measures:\n      - name: count\n        type: count\n\n      - name: completed_count\n        type: count\n        filters:\n          - sql: \"{CUBE}.status = 'completed'\"\n\n      - name: completed_ratio\n        sql: \"1.0 * {completed_count} / {count}\"\n        type: number\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT 1 AS id, 'processing' AS status UNION ALL\n    SELECT 2 AS id, 'completed'  AS status UNION ALL\n    SELECT 3 AS id, 'completed'  AS status\n  `,\n\n  measures: {\n    count: {\n      type: `count`\n    },\n\n    completed_count: {\n      type: `count`,\n      filters: [{\n        sql: `${CUBE}.status = 'completed'`\n      }]\n    },\n\n    completed_ratio: {\n      sql: `1.0 * ${completed_count} / ${count}`,\n      type: `number`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship Cubes in YAML\nDESCRIPTION: This snippet demonstrates how to define cubes for a many-to-many relationship between 'posts' and 'topics' using an associative cube 'post_topics' in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: posts\n    sql_table: posts\n\n    joins:\n      - name: post_topics\n        relationship: one_to_many\n        sql: \"{CUBE}.id = {post_topics.post_id}\"\n\n  - name: topics\n    sql_table: topics\n\n    dimensions:\n      - name: post_id\n        sql: id\n        type: string\n        primary_key: true\n\n  - name: post_topics\n    sql_table: post_topics\n\n    joins:\n      - name: topic\n        relationship: many_to_one\n        sql: \"{CUBE}.topic_id = {topics.id}\"\n\n    dimensions:\n      - name: post_id\n        sql: post_id\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Cube.js\nDESCRIPTION: List of environment variables that control various aspects of Cube.js functionality including SQL API behavior, authentication, telemetry, metrics collection, and cloud storage settings. Each variable has specific valid values and default settings for both development and production environments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# SQL API Configuration\nCUBEJS_ALLOW_UNGROUPED_WITHOUT_PRIMARY_KEY=false\nCUBESQL_SQL_PUSH_DOWN=true\nCUBESQL_STREAM_MODE=false\nCUBESQL_SQL_NO_IMPLICIT_ORDER=true\nCUBEJS_MAX_SESSIONS=1024\n\n# Query Planning Configuration\nCUBESQL_REWRITE_MAX_NODES=10000\nCUBESQL_REWRITE_MAX_ITERATIONS=300\nCUBESQL_REWRITE_TIMEOUT=30\nCUBESQL_AUTH_EXPIRE_SECS=300\n\n# Feature Flags\nCUBEJS_DAX_CREATE_DATE_HIERARCHIES=true\nCUBEJS_TELEMETRY=true\nCUBEJS_TRANSPILATION_WORKER_THREADS=false\nCUBEJS_WEB_SOCKETS=true\nCUBEJS_TESSERACT_ORCHESTRATOR=true\n\n# Metrics Collection\nCUBESTORE_METRICS_FORMAT=statsd\nCUBESTORE_METRICS_ADDRESS=127.0.0.1\nCUBESTORE_METRICS_PORT=8125\n\n# Pre-aggregation Settings\nCUBEJS_TOUCH_PRE_AGG_TIMEOUT=86400\n\n# Cloud Storage Configuration\nCUBESTORE_AWS_CREDS_REFRESH_EVERY_MINS=180\nCUBESTORE_BIND_ADDR=0.0.0.0:3306\nCUBESTORE_DATA_DIR=.cubestore/data\n```\n\n----------------------------------------\n\nTITLE: Cube REST API Endpoint Structure in YAML\nDESCRIPTION: Displays the structure of a Cube REST API endpoint in development mode. The endpoint includes the deployment ID, region, and development branch name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-react-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://<deployment-id>.<region>.cubecloudapp.dev/dev-mode/<dev-branch-name>/cubejs-api/v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolling Windows for Measures in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to configure rolling windows for measure calculations in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    rolling_count_month: {\n      sql: `id`,\n      type: `count`,\n      rolling_window: {\n        trailing: `1 month`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Logger in Python\nDESCRIPTION: This Python snippet demonstrates how to define a custom logger function using a decorator from the `cube` package. It logs a message along with additional parameters. Dependencies include the `cube` package, and it requires the `message` and `params` arguments. The function prints the logged message and parameters to the console.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nfrom cube import config\n\n@config('logger')\ndef logger(message: str, params: dict) -> None:\n  print(f\"{message}: {params}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Data Access Policies in JavaScript for Cube.js\nDESCRIPTION: This JavaScript snippet demonstrates how to define data access policies for different roles in Cube.js. It includes examples of member-level and row-level security rules, as well as conditional access based on the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/data-access-policies.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      // For all roles, restrict access entirely\n      role: `*`,\n      member_level: {\n        includes: []\n      }\n    },\n    {\n      // For the `manager` role,\n      //   allow access to all members\n      //   but filter rows by the user's country\n      role: `manager`,\n      conditions: [\n        { if: securityContext.is_EMEA_based }\n      ],\n      member_level: {\n        includes: `*`\n      },\n      row_level: {\n        filters: [\n          {\n            member: `country`,\n            operator: `equals`,\n            values: [ securityContext.country ]\n          }\n        ]\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Query Renderer with Cube.js\nDESCRIPTION: Example implementation of a Vue component using QueryRenderer to fetch and display analytics data from Cube.js. Demonstrates setup of cube API connection, query configuration, and template structure with loading states.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-vue.mdx#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <query-renderer :cube-api=\"cubeApi\" :query=\"query\" v-if=\"cubeApi\">\n    <template #default=\"{ resultSet }\"> </template>\n\n    <template #empty> Loading... </template>\n  </query-renderer>\n</template>\n\n<script>\n  import cube from \"@cubejs-client/core\";\n  import { QueryRenderer } from \"@cubejs-client/vue\";\n\n  const cubeApi = cube(\"YOUR-CUBE-API-TOKEN\", {\n    apiUrl: \"http://localhost:4000/cubejs-api/v1\",\n  });\n\n  export default {\n    name: \"QueryRendererExample\",\n    components: {\n      QueryRenderer,\n    },\n    data() {\n      const query = {\n        measures: [\"LineItems.count\", \"LineItems.quantity\", \"Orders.count\"],\n        timeDimensions: [\n          {\n            dimension: \"LineItems.createdAt\",\n            granularity: \"month\",\n          },\n        ],\n      };\n\n      return {\n        cubeApi,\n        query,\n      };\n    },\n  };\n</script>\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>\n\n<style scoped>\n  h3 {\n    margin: 40px 0 0;\n  }\n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n  li {\n    display: inline-block;\n    margin: 0 10px;\n  }\n  a {\n    color: #42b983;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Lessons Cube with Joins in YAML\nDESCRIPTION: Creates a 'lessons' cube with joins to the 'students' and 'teachers' cubes, establishing the relationships between lessons and users.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: lessons\n    sql_table: lessons\n\n    joins:\n      - name: students\n        relationship: many_to_one\n        sql: \"{CUBE}.student_id = {students.id}\"\n\n      - name: teachers\n        relationship: many_to_one\n        sql: \"{CUBE}.teacher_id = {teachers.id}\"\n```\n\n----------------------------------------\n\nTITLE: Using CUBE Reference in JavaScript Data Model\nDESCRIPTION: Example of using the CUBE reference in JavaScript to specify column names without ambiguity. CUBE acts as an alias for the basic cube during query implementation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  dimensions: {\n    name: {\n      sql: `${CUBE}.name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SELECT Query Syntax in Cube.js SQL API\nDESCRIPTION: Demonstrates the basic syntax for SELECT queries including FROM, JOIN, WHERE, GROUP BY, HAVING, and LIMIT clauses. Retrieves and filters data from cube tables with optional grouping and pagination.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT select_expr [, ...]\n  FROM from_item\n    CROSS JOIN join_item\n    ON join_criteria]*\n  [ WHERE where_condition ]\n  [ GROUP BY grouping_expression ]\n  [ HAVING having_expression ]\n  [ LIMIT number ] [ OFFSET number ];\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Measures in Cube.js (JavaScript)\nDESCRIPTION: Illustrates how to add human-readable descriptions to measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    orders_count: {\n      sql: `id`,\n      type: `count`,\n      description: `Count of all orders`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Apache Superset in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to configure Semantic Layer Sync for Apache Superset using a module export. It includes authentication details and specifies the Superset URL and database.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/superset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"superset\",\n        name: \"Superset Sync\",\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"superset.example.com\",\n          database: \"Cube Cloud: production-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Calculated Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to create calculated measures using formulas in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: purchases_to_created_account_ratio\n        sql: \"{purchases} / {users.count} * 100.0\"\n        type: number\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Expressions for Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to define SQL expressions for measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: users_count\n        sql: \"COUNT(*)\"\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Parameter Passing in Cube.js Data Model\nDESCRIPTION: Data model implementation showing how to use cross joins and FILTER_PARAMS to create a dimension that can be used for partial filtering. This allows calculating the ratio of people in a selected city to the total number of women in the dataset.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/passing-dynamic-parameters-in-a-query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql: >\n      WITH data AS (\n        SELECT\n          users.id AS id,\n          users.city AS city,\n          users.gender AS gender\n        FROM public.users\n      ),\n      cities AS (\n        SELECT city\n        FROM data\n        WHERE {FILTER_PARAMS.users.city.filter('city')}\n      ),\n      grouped AS (\n        SELECT\n          cities.city AS city_filter,\n          data.id AS id,\n          data.city AS city,\n          data.gender AS gender\n        FROM cities, data\n        GROUP BY 1, 2, 3, 4\n      )\n      SELECT *\n      FROM grouped\n\n    measures:\n      - name: total_number_of_women\n        sql: id\n        type: count\n        filters:\n          - sql: \"gender = 'female'\"\n\n      - name: number_of_people_of_any_gender_in_the_city:\n        sql: id\n        type: count\n        filters:\n          - sql: \"city = city_filter\"\n\n      - name: ratio\n        title: Ratio Women in the City to Total Number of People\n        sql: >\n          1.0 * {number_of_people_of_any_gender_in_the_city} /\n          {total_number_of_women}\n        type: number\n\n    dimensions:\n      - name: city_filter\n        sql: city_filter\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql: `\n    WITH data AS (\n      SELECT\n        users.id AS id,\n        users.city AS city,\n        users.gender AS gender\n      FROM public.users\n    ),\n\n    cities AS (\n      SELECT city\n      FROM data\n      WHERE ${FILTER_PARAMS.users.city.filter('city')}\n    ),\n\n    grouped AS (\n      SELECT\n        cities.city AS city_filter,\n        data.id AS id,\n        data.city AS city,\n        data.gender AS gender\n      FROM cities, data\n      GROUP BY 1, 2, 3, 4\n    )\n\n    SELECT *\n    FROM grouped\n  `,\n\n  measures: {\n    total_number_of_women: {\n      sql: \"id\",\n      type: \"count\",\n      filters: [{ sql: `${CUBE}.gender = 'female'` }],\n    },\n\n    number_of_people_of_any_gender_in_the_city: {\n      sql: \"id\",\n      type: \"count\",\n      filters: [{ sql: `${CUBE}.city = ${CUBE}.city_filter` }],\n    },\n\n    ratio: {\n      title: \"Ratio Women in the City to Total Number of People\",\n      sql: `\n        1.0 * ${CUBE.number_of_people_of_any_gender_in_the_city} /\n        ${CUBE.total_number_of_women}`,\n      type: `number`,\n    },\n  },\n\n  dimensions: {\n    city_filter: {\n      sql: `city_filter`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up CubeProvider in React Application\nDESCRIPTION: Demonstrates how to set up the CubeProvider component to provide Cube context to the entire React application. It initializes the CubeApi instance and wraps the app with CubeProvider.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport cube from '@cubejs-client/core';\nimport { CubeProvider } from '@cubejs-client/react';\n\nconst API_URL = 'https://harsh-eel.aws-us-east-2.cubecloudapp.dev';\nconst CUBE_TOKEN =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.* eyJpYXQiOjE1OTE3MDcxNDgsImV4cCI6MTU5NDI5OTE0OH0.* n5jGLQJ14igg6_Hri_Autx9qOIzVqp4oYxmX27V-4T4';\n\nconst cubeApi = cube(CUBE_TOKEN, {\n  apiUrl: `${API_URL}/cubejs-api/v1`,\n});\n\nexport default function App() {\n  return (\n    <CubeProvider cubeApi={cubeApi}>\n      //...\n    </CubeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Count Measure in Cube.js\nDESCRIPTION: This snippet shows how to add a simple count measure to a Cube.js data model. It demonstrates the basic structure for defining measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Helper Functions in Cube Data Models\nDESCRIPTION: This example demonstrates how to import the parseDateWithTimeZone helper function and use it within a cube definition to create a time dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// in events.js\nimport { parseDateWithTimeZone } from \"./helpers\";\n\ncube(`events`, {\n  sql_table: `events`,\n  // ...\n\n  dimensions: {\n    date: {\n      sql: `${parseDateWithTimeZone(\"date\")}`,\n      type: `time`\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query for Subquery Dimensions in Cube.js\nDESCRIPTION: SQL query automatically generated by Cube.js when querying for users.name and users.order_count. This demonstrates how Cube.js implements subquery dimensions through optimized SQL joins to maintain performance and portability.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"users\".name \"users__name\",\n  \"users__order_count\" \"users__order_count\"\nFROM (\n  SELECT 1 AS id, 'Alice' AS name UNION ALL\n  SELECT 2 AS id, 'Bob' AS name\n) AS \"users\"\nLEFT JOIN (\n  SELECT\n    \"users_order_count_subquery__users\".id \"users__id\",\n    count(distinct \"users_order_count_subquery__orders\".id) \"users__order_count\"\n  FROM (\n    SELECT 1 AS id, 1 AS user_id UNION ALL\n    SELECT 2 AS id, 1 AS user_id UNION ALL\n    SELECT 3 AS id, 2 AS user_id\n  ) AS \"users_order_count_subquery__orders\"\n  LEFT JOIN (\n    SELECT 1 AS id, 'Alice' AS name UNION ALL\n    SELECT 2 AS id, 'Bob' AS name\n  ) AS \"users_order_count_subquery__users\" ON \"users_order_count_subquery__users\".id = \"users_order_count_subquery__orders\".user_id\n  GROUP BY 1\n) AS \"users_order_count_subquery\" ON \"users_order_count_subquery\".\"users__id\" = \"users\".id\nGROUP BY 1, 2\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attributes Implementation Using asyncModule in Cube.js\nDESCRIPTION: This implementation uses Cube.js's asyncModule to dynamically create the cube definition. It fetches statuses from the database and generates SQL joins, values, and dimensions at runtime, making the model fully adaptive to changing attributes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchStatuses = require(\"../fetch\").fetchStatuses;\n\nasyncModule(async () => {\n  const statuses = await fetchStatuses();\n\n  const createValue = (status, index) =>\n    `MIN(orders_${index}.created_at) AS created_at_${index}`;\n\n  const createJoin = (status, index) =>\n    `LEFT JOIN public.orders AS orders_${index}\n      ON users.id = orders_${index}.user_id\n      AND orders_${index}.status = '${status}'`;\n\n  const createDimension = (status, index) => ({\n    [`${status}_created_at`]: {\n      sql: (CUBE) => `created_at_${index}`,\n      type: `time`,\n    },\n  });\n\n  cube(`users_statuses_dynamic`, {\n    sql: `\n      SELECT\n        users.first_name,\n        users.last_name,\n        ${statuses.map(createValue).join(\",\")}\n      FROM public.users AS users\n      ${statuses.map(createJoin).join(\"\")}\n      GROUP BY 1, 2\n    `,\n\n    dimensions: Object.assign(\n      {\n        name: {\n          sql: `first_name || ' ' || last_name`,\n          type: `string`,\n        },\n      },\n      statuses.reduce(\n        (all, status, index) => ({\n          ...all,\n          ...createDimension(status, index),\n        }),\n        {}\n      )\n    ),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a One-to-Many Join to Customers Cube in JavaScript\nDESCRIPTION: This snippet shows how to add a one-to-many join from the 'customers' cube to the 'orders' cube in JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`customers`, {\n  // ...\n\n  joins: {\n    orders: {\n      relationship: `one_to_many`,\n      sql: `${CUBE}.id = ${orders.customer_id}`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Orders to Products Join Example\nDESCRIPTION: Example showing how to join products cube to orders cube with a many-to-one relationship.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  joins: {\n    products: {\n      relationship: `many_to_one`,\n      sql: `${CUBE.id} = ${products.order_id}`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    joins:\n      - name: products\n        relationship: many_to_one\n        sql: \"{CUBE.id} = {products.order_id}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions in Parent Directories for Cube Data Models\nDESCRIPTION: This example defines a utility function (capitalize) in a parent directory, which can be imported and used across multiple cube definitions in the data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// in model/shared_utils/utils.js\nexport const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions in PostgreSQL\nDESCRIPTION: General-purpose aggregate functions for statistical calculations including AVG, COUNT, MAX, MIN, SUM, and special MEASURE function for custom types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nAVG\nCOUNT\nCOUNT(DISTINCT)\nMAX\nMIN\nSUM\nMEASURE\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated from JSON Query with Many-to-One Join\nDESCRIPTION: This SQL query is generated from the JSON query, using a LEFT JOIN from orders to customers based on the many-to-one relationship.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"orders\".status \"orders__status\",\n  \"customers\".company \"customers__company\",\n  count(\"orders\".id) \"orders__count\"\nFROM\n  public.orders AS \"orders\"\n  LEFT JOIN public.customers AS \"customers\"\n    ON \"orders\".customer_id = \"customers\".id\nGROUP BY 1, 2\nORDER BY 2 ASC\nLIMIT 10000\n```\n\n----------------------------------------\n\nTITLE: Sample Order Statuses Data in Cube.js\nDESCRIPTION: This code snippet shows the available order statuses in the dataset: 'completed', 'processing', and 'shipped'. These represent the attribute values in the EAV model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.status\": \"completed\",\n  },\n  {\n    \"orders.status\": \"processing\",\n  },\n  {\n    \"orders.status\": \"shipped\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Data Models and Drivers in Cube.js\nDESCRIPTION: This code snippet shows how to dynamically set database types, security contexts, and data models for different tenants using the driverFactory, contextToAppId, contextToOrchestratorId, and repositoryFactory options in Cube.js configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileRepository } = require(\"@cubejs-backend/server-core\");\n\nmodule.exports = {\n  contextToAppId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.appId}_${securityContext.userId}`,\n  contextToOrchestratorId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.appId}_${securityContext.userId}`,\n  driverFactory: ({ securityContext }) => {\n    if (securityContext.appId === 3) {\n      return {\n        type: \"mongobi\",\n        database: `my_app_${securityContext.appId}_${securityContext.userId}`,\n        port: 3307,\n      };\n    } else {\n      return {\n        type: \"postgres\",\n        database: `my_app_${securityContext.appId}_${securityContext.userId}`,\n      };\n    }\n  },\n  repositoryFactory: ({ securityContext }) =>\n    new FileRepository(`model/${securityContext.appId}`),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Constants in Cube Data Models\nDESCRIPTION: This example shows how to import the TEST_USER_IDs constant and use it within a cube definition. The constant is used to create a segment that excludes test users from the analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in Users.js\nimport { TEST_USER_IDS } from \"./constants\";\n\ncube(`users`, {\n  // ...\n\n  measures: {\n    // ...\n  },\n\n  dimensions: {\n    // ...\n  },\n\n  segments: {\n    exclude_test_users: {\n      sql: `${CUBE}.id NOT IN (${TEST_USER_IDS.join(\", \")})`\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Campaigns Cube\nDESCRIPTION: Defines a virtual campaigns cube by extracting campaign data from emails table using SQL aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`campaigns`, {\n  sql: `\n    SELECT\n      campaign_id,\n      campaign_name,\n      customer_name,\n      MIN(created_at) AS started_at\n    FROM emails\n    GROUP BY 1, 2, 3\n  `,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `campaign_id`,\n      type: `string`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `campaign_name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Tenant Pre-Aggregations in Cube.js\nDESCRIPTION: This snippet demonstrates how to configure per-tenant pre-aggregation of data within the same database instance using the preAggregationsSchema and contextToAppId options in the Cube.js configuration file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.userId}`,\n  preAggregationsSchema: ({ securityContext }) =>\n    `pre_aggregations_${securityContext.userId}`,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Segments in Cube.js Data Models using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a segment named 'only_completed' which filters for completed orders in a Cube.js data model. Segments are pre-defined filters stored in the data model for reuse across queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  segments: {\n    only_completed: {\n      sql: `${CUBE}.status = 'completed'`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Calculated Measures to a Cube\nDESCRIPTION: This snippet demonstrates how to add a calculated measure 'paying_percentage' to compute the percentage of paying users in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n\n    paying_count: {\n      sql: `id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.paying = 'true'` }],\n    },\n\n    paying_percentage: {\n      sql: `100.0 * ${paying_count} / ${count}`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n\n  // ...\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    measures:\n      - name: count\n        sql: id\n        type: count\n\n      - name: paying_count\n        sql: id\n        type: count\n        filters:\n          - sql: \"{CUBE}.paying = 'true'\"\n\n      - name: paying_percentage\n        sql: \"100.0 * {paying_count} / {count}\"\n        type: number\n        format: percent\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Multiple Data Sources Configuration in Cube.js\nDESCRIPTION: Basic configuration example showing how to set up multiple PostgreSQL data sources using environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  driverFactory: ({ dataSource } = {}) => {\n    if (dataSource === \"db1\") {\n      return {\n        type: \"postgres\",\n        database: process.env.DB1_NAME,\n        host: process.env.DB1_HOST,\n        user: process.env.DB1_USER,\n        password: process.env.DB1_PASS,\n        port: process.env.DB1_PORT,\n      };\n    } else {\n      return {\n        type: \"postgres\",\n        database: process.env.DB2_NAME,\n        host: process.env.DB2_HOST,\n        user: process.env.DB2_USER,\n        password: process.env.DB2_PASS,\n        port: process.env.DB2_PORT,\n      };\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Cubes in JavaScript\nDESCRIPTION: This snippet shows how to extend a cube to reuse its properties and add new measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`,\n      sql: `id`,\n    },\n  },\n});\n\ncube(`extended_order_facts`, {\n  extends: order_facts,\n\n  measures: {\n    double_count: {\n      type: `number`,\n      sql: `${count} * 2`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating String Dimension with Concatenation\nDESCRIPTION: Demonstrates creating a string dimension by concatenating multiple fields using SQL CONCAT function.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    full_name: {\n      sql: `CONCAT(${first_name}, ' ', ${last_name})`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: full_name\n        sql: \"CONCAT({first_name}, ' ', {last_name})\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Tableau in JavaScript\nDESCRIPTION: This code snippet shows how to configure Semantic Layer Sync for Tableau using JavaScript in Cube.js. It sets up the connection details including region, site, personal access token, and database information.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/tableau.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"tableau\",\n        name: \"Tableau Sync\",\n        config: {\n          region: \"10ax\",\n          site: \"mytableausite\",\n          personalAccessToken: \"cube-cloud\",\n          personalAccessTokenSecret: \"HW8TFrBfJyen+JQleh0/bw==:1BvJLIti9Fud04rN021EfHMnh4yYD3p4\",\n          database: \"Cube Cloud: production-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example View Definition in YAML\nDESCRIPTION: Example of a well-structured view definition optimized for data consumers and visualization tools, showing proper join paths and includes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders\n\n    cubes:\n      - join_path: base_orders\n        includes:\n          # dimensions\n          - status\n          - created_date\n\n          # measures\n          - total_amount\n          - total_amlunt_shipped\n          - count\n          - average_order_value\n\n      - join_path: base_orders.line_items.products\n        includes:\n          - name: name\n            alias: product\n\n      - join_path: base_orders.line_items.products.product_categories\n        includes:\n          - name: name\n            alias: product_category\n\n      - join_path: base_orders.users\n        prefix: true\n        includes:\n          - city\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control with queryRewrite in Cube.js\nDESCRIPTION: This code configures the queryRewrite function in Cube.js to filter data based on user roles. Managers can only view shipped and completed orders, while operators can only view processing orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/role-based-access.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    if (!securityContext.role) {\n      throw new Error(\"No role found in Security Context!\");\n    }\n\n    if (securityContext.role == \"manager\") {\n      query.filters.push({\n        member: \"orders.status\",\n        operator: \"equals\",\n        values: [\"shipped\", \"completed\"],\n      });\n    }\n\n    if (securityContext.role == \"operator\") {\n      query.filters.push({\n        member: \"orders.status\",\n        operator: \"equals\",\n        values: [\"processing\"],\n      });\n    }\n\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Logical Operators in Cube.js Query Filters\nDESCRIPTION: Demonstrates the use of 'or' and 'and' logical operators in Cube.js query filters. These operators can combine multiple filters or other logical operators.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"or\": [\n    {\n      \"member\": \"visitors.source\",\n      \"operator\": \"equals\",\n      \"values\": [\"some\"]\n    },\n    {\n      \"and\": [\n        {\n          \"member\": \"visitors.source\",\n          \"operator\": \"equals\",\n          \"values\": [\"other\"]\n        },\n        {\n          \"member\": \"visitor_checkins.cards_count\",\n          \"operator\": \"equals\",\n          \"values\": [\"0\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Row-Level Access with Filters in Cube.js\nDESCRIPTION: This snippet shows how to configure row-level access using filters. It demonstrates allowing access to specific rows for managers based on a security context attribute, while disallowing access for all other roles.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/data-access-policies.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n    \n    access_policy:\n      - role: \"*\"\n        row_level:\n          allow_all: false\n      \n      - role: manager\n        row_level:\n          filters:\n            - member: state\n              operator: equals\n              values: [ \"{ securityContext.state }\" ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      role: `*`,\n      row_level: {\n        allow_all: false\n      }\n    },\n    {\n      role: `manager`,\n      row_level: {\n        filters: [\n          {\n            member: `state`,\n            operator: `equals`,\n            values: [ securityContext.state ]\n          }\n        ]\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Filter Object Structure in Cube.js Query\nDESCRIPTION: This snippet demonstrates the structure of a filter object used in Cube.js queries, including the member, operator, and values properties.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"users.country\",\n  \"operator\": \"equals\",\n  \"values\": [\"US\", \"Germany\", \"Israel\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions Cube in Cube.js (JavaScript)\nDESCRIPTION: This code creates a new 'sessions' cube that groups events into sessions based on user activity. It uses window functions to calculate inactivity time and determine session boundaries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create new cube for sessions with the following content\ncube(`sessions`, {\n  sql: `\n    SELECT\n      ROW_NUMBER() OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) || ' - '|| event.anonymous_id AS session_id\n      , event.anonymous_id\n      , event.timestamp AS session_start_at\n      , ROW_NUMBER() OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) AS session_sequence\n      , LEAD(timestamp) OVER(PARTITION BY event.anonymous_id ORDER BY event.timestamp) AS next_session_start_at\n    FROM (\n      SELECT\n        e.anonymous_id\n        , e.timestamp\n        , DATEDIFF(minutes, LAG(e.timestamp) OVER(PARTITION BY e.anonymous_id ORDER BY e.timestamp), e.timestamp) AS inactivity_time\n      FROM ${events.sql()} AS e\n    ) AS event\n    WHERE (event.inactivity_time > 30 OR event.inactivity_time IS NULL)\n    `,\n});\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_PARAMS with Function Argument in YAML\nDESCRIPTION: Shows how to use FILTER_PARAMS context variable with a function argument in YAML. This example filters BigQuery events table based on a date range.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    sql: >\n      SELECT *\n      FROM schema.`events*`\n      WHERE {FILTER_PARAMS.events.date.filter(\n        lambda x, y: f\"\"\"\n          _TABLE_SUFFIX >= FORMAT_TIMESTAMP('%Y%m%d', TIMESTAMP({x})) AND\n          _TABLE_SUFFIX <= FORMAT_TIMESTAMP('%Y%m%d', TIMESTAMP({y}))\n        \"\"\"\n      )}\n\n    dimensions:\n      - name: date\n        sql: date\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Using MemberUpdater in QueryBuilder for React\nDESCRIPTION: Demonstrates how to use the MemberUpdater methods within a QueryBuilder component to add and remove measures dynamically. It shows the usage of updateMeasures.add and updateMeasures.remove in a Select component.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<QueryBuilder\n  // ...\n  cubeApi={cubeApi}\n  render={({\n    // ...\n    availableMeasures,\n    updateMeasures,\n  }) => {\n    return (\n      // ...\n      <Select\n        mode=\"multiple\"\n        placeholder=\"Please select\"\n        onSelect={(measure) => updateMeasures.add(measure)}\n        onDeselect={(measure) => updateMeasures.remove(measure)}\n      >\n        {availableMeasures.map((measure) => (\n          <Select.Option key={measure.name} value={measure}>\n            {measure.title}\n          </Select.Option>\n        ))}\n      </Select>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Microsoft SQL Server in Cube.js\nDESCRIPTION: This snippet shows the required environment variables to set up a connection to a Microsoft SQL Server database in Cube.js. It includes the database type, host, name, user, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/ms-sql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=mssql\nCUBEJS_DB_HOST=my.mssql.host\nCUBEJS_DB_NAME=my_mssql_database\nCUBEJS_DB_USER=mssql_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Masked Helper Function Implementation\nDESCRIPTION: Implementation of a masking helper function that controls data visibility based on team membership.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n \ntemplate = TemplateContext()\n\n@template.function('masked')\ndef masked(sql, security_context):\n  trusted_teams = ['cx', 'exec' ]\n  is_trusted_team = security_context.setdefault('team') in trusted_teams\n  if is_trusted_team:\n    return sql\n  else:\n    return \"'--- masked ---'\"\n```\n\n----------------------------------------\n\nTITLE: Basic Dimension Definition in Cube.js\nDESCRIPTION: Shows how to define basic dimensions with name, sql, and type parameters in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  dimensions: {\n    price: {\n      sql: `price`,\n      type: `number`,\n    },\n\n    brand_name: {\n      sql: `brand_name`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n\n    dimensions:\n      - name: price\n        sql: price\n        type: number\n\n      - name: brand_name\n        sql: brand_name\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Dimensions Within Same Cube\nDESCRIPTION: Shows how to create proxy dimensions that reference other dimensions in the same cube, using a full_name dimension that combines initials and last_name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    dimensions:\n      - name: initials\n        sql: \"SUBSTR(first_name, 1, 1)\"\n        type: string\n\n      - name: last_name\n        sql: \"UPPER(last_name)\"\n        type: string\n\n      - name: full_name\n        sql: \"{initials} || '. ' || {last_name}\"\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  dimensions: {\n    initials: {\n      sql: `SUBSTR(first_name, 1, 1)`,\n      type: `string`\n    },\n\n    last_name: {\n      sql: `UPPER(last_name)`,\n      type: `string`\n    },\n\n    full_name: {\n      sql: `${initials} || '. ' || ${last_name}`,\n      type: `string`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Dimensions in Line Items Cube using JavaScript and YAML\nDESCRIPTION: Illustrates how to define dimensions for a line items cube, including setting a primary key. Shows syntax for both JavaScript and YAML configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`line_items`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      // Again, we explicitly let Cube know this field is the primary key\n      // This is required for de-duplicating results when using joins\n      primary_key: true,\n    },\n\n    order_id: {\n      sql: `order_id`,\n      type: `number`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: line_items\n    # ...\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        # Again, we explicitly let Cube know this field is the primary key\n        # This is required for de-duplicating results when using joins\n        primary_key: true\n\n      - name: order_id\n        sql: order_id\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-aggregation in Cube.js (JavaScript)\nDESCRIPTION: This snippet shows how to define a pre-aggregation named 'main' in Cube.js using JavaScript. It includes measures, dimensions, time dimension, granularity, and refresh key settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"orders\", {\n  // ...\n\n  pre_aggregations: {\n    main: {\n      measures: [order_total],\n      dimensions: [product_name, product_category, zip_code],\n      time_dimension: timestamp,\n      granularity: `hour`,\n      partition_granularity: `day`,\n      allow_non_strict_date_range_match: true,\n      refresh_key: {\n        every: `1 hour`,\n        incremental: true,\n        update_window: `1 day`,\n      },\n      build_range_start: {\n        sql: `SELECT DATE_SUB(NOW(), 365)`,\n      },\n      build_range_end: {\n        sql: `SELECT NOW()`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube Data Model in YAML\nDESCRIPTION: This YAML snippet defines a cube named 'orders' with dimensions and measures, including calculated measures like 'completed_percentage'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n\n    dimensions:\n      - name: id\n        sql: ID\n        type: number\n        primary_key: true\n\n      - name: status\n        sql: STATUS\n        type: string\n        description: The status of the order (completed etc)\n\n      - name: created_at\n        sql: \"{CUBE}.CREATED_AT\"\n        type: time\n\n    measures:\n      - name: count\n        type: count\n\n      - name: completed_count\n        type: count\n        filters:\n          - sql: \"{CUBE}.STATUS = 'completed'\"\n\n      - name: completed_percentage\n        type: number\n        sql: \"(100.0 * {CUBE.completed_count} / NULLIF({CUBE.count}, 0))\"\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: Executing REST API Query with curl\nDESCRIPTION: Example of sending a complex query to Cube's REST API using curl, including dimensions, measures, filters, and time dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: JSON.WEB.TOKEN\" \\\n  -G \\\n  --data-urlencode 'query={\n    \"dimensions\": [\n      \"users.state\",\n      \"users.city\",\n      \"orders.status\"\n    ],\n    \"measures\": [\n      \"orders.count\"\n    ],\n    \"filters\": [\n      {\n        \"member\": \"users.state\",\n        \"operator\": \"notEquals\",\n        \"values\": [\"us-wa\"]\n      }\n    ],\n    \"timeDimensions\": [\n      {\n        \"dimension\": \"orders.created_at\",\n        \"dateRange\": [\"2020-01-01\", \"2021-01-01\"]\n      }\n    ],\n    \"limit\": 10\n  }' \\\n  http://localhost:4000/cubejs-api/v1/load\n```\n\n----------------------------------------\n\nTITLE: Dynamic Union Table Generation in Cube.js\nDESCRIPTION: Shows how to dynamically generate union table SQL using data modeling features. Uses a configuration object to define table mappings and generates UNION ALL statements programmatically.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/dynamic-union-tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{%- set customer_tables = {\n  \"einstein_data\": \"Einstein\",\n  \"pascal_data\": \"Pascal\",\n  \"newton_data\": \"Newton\"\n} -%}\n \ncubes:\n  - name: customers\n    sql: >\n      {%- for table, name in customer_tables | items %}\n      SELECT *, '{{ name | safe }}' AS name FROM {{ table | safe }}\n      {% if not loop.last %}UNION ALL{% endif %}\n      {% endfor %}\n  \n    measures:\n      - name: count\n        type: count\n  \n    dimensions:\n      - name: name\n        sql: name\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst customer_tables = [\n  { table: \"einstein_data\", name: \"Einstein\" },\n  { table: \"pascal_data\", name: \"Pascal\" },\n  { table: \"newton_data\", name: \"Newton\" }\n]\n\ncube(`customers`, {\n  sql: customer_tables\n    .map(entry => `SELECT *, '${entry.name}' AS name FROM ${entry.table}`)\n    .join(` UNION ALL `),\n \n  measures: {\n    count: {\n      type: `count`,\n    }\n  },\n \n  dimensions: {\n    name: {\n      sql: `name`,\n      type: `string`,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Measure Additivity in Cube.js\nDESCRIPTION: This example shows how to define a cube with both additive and non-additive measures, illustrating the concept of measure additivity in Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: employees\n    sql: >\n      SELECT 1 AS id, 'Ali' AS first_name, 20 AS age, 'Los Gatos' AS city UNION ALL\n      SELECT 2 AS id, 'Bob' AS first_name, 30 AS age, 'San Diego' AS city UNION ALL\n      SELECT 3 AS id, 'Eve' AS first_name, 40 AS age, 'San Diego' AS city\n\n    measures:\n      - name: count\n        type: count\n\n      - name: avg_age\n        sql: age\n        type: avg\n\n    dimensions:\n      - name: city\n        sql: city\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`employees`, {\n  sql: `\n    SELECT 1 AS id, 'Ali' AS first_name, 20 AS age, 'Los Gatos' AS city UNION ALL\n    SELECT 2 AS id, 'Bob' AS first_name, 30 AS age, 'San Diego' AS city UNION ALL\n    SELECT 3 AS id, 'Eve' AS first_name, 40 AS age, 'San Diego' AS city\n  `,\n\n  measures: {\n    count: {\n      type: `count`\n    },\n\n    avg_age: {\n      sql: `age`,\n      type: `avg`\n    }\n  },\n\n  dimensions: {\n    city: {\n      sql: `city`,\n      type: `string`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Data Sources Using Environment Variables\nDESCRIPTION: Example of setting up multiple data sources using environment variables in Cube. Shows configuration for a default PostgreSQL database and an additional data source named 'datasource1'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multiple-data-sources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DATASOURCES=default,datasource1\nCUBEJS_DB_TYPE=postgres\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_HOST=localhost\nCUBEJS_DS_DATASOURCE1_DB_TYPE=postgres\nCUBEJS_DS_DATASOURCE1_DB_NAME=ecom\nCUBEJS_DS_DATASOURCE1_DB_HOST=remotehost\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Join Pre-aggregations\nDESCRIPTION: Demonstrates setting up a rollup_join pre-aggregation that combines data from orders and users pre-aggregations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    pre_aggregations:\n      - name: orders_with_users_rollup\n        type: rollup_join\n        measures:\n          - CUBE.count\n        dimensions:\n          - users.name\n        time_dimension: CUBE.created_at\n        granularity: day\n        rollups:\n          - users.users_rollup\n          - CUBE.orders_rollup\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  pre_aggregations: {\n    orders_with_users_rollup: {\n      type: `rollup_join`,\n      measures: [CUBE.count],\n      dimensions: [users.name],\n      time_dimension: CUBE.created_at,\n      granularity: `day`,\n      rollups: [users.users_rollup, CUBE.orders_rollup],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LDAP Authentication in Cube\nDESCRIPTION: Example of custom authentication implementation using LDAP server for user verification and security context setting.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  checkAuth: async (req, auth) => {\n    try {\n      const userInfo = await getUserFromLDAP(req.get(\"X-LDAP-User-ID\"))\n      return { security_context: userInfo }\n    }\n    catch {\n      throw new Error(\"Could not authenticate user from LDAP\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filtered Measures to a Cube\nDESCRIPTION: This snippet shows how to add a filtered measure 'paying_count' to count only paying users in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n\n    paying_count: {\n      sql: `id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.paying = 'true'` }],\n    },\n  },\n\n  // ...\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    measures:\n      - name: count\n        sql: id\n        type: count\n\n      - name: paying_count\n        sql: id\n        type: count\n        filters:\n          - sql: \"{CUBE}.paying = 'true'\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Views in Cube.js\nDESCRIPTION: Example of creating a view that joins orders and users data. The view includes specific fields from both cubes and demonstrates both YAML and JavaScript configuration options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/joins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_users\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - count\n\n      - join_path: orders.users\n        prefix: true\n        includes: \n          - id\n          - city\n          - state\n```\n\nLANGUAGE: javascript\nCODE:\n```\nview(`orders_users`, {\n  cubes: [\n    {\n      join_path: orders,\n      includes: ['status', 'count']\n    },\n    {\n      join_path: orders,\n      includes: ['id', 'city', 'state']\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using sql Parameter in YAML\nDESCRIPTION: This example demonstrates how to use the sql parameter in YAML format to define a custom SQL query for a cube, including referencing another cube's SQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: companies\n    sql:\n      SELECT\n        users.company_name,\n        users.company_id\n      FROM {users.sql()} AS users\n```\n\n----------------------------------------\n\nTITLE: Defining Cubes with CUBE Context Variable in JavaScript\nDESCRIPTION: Demonstrates how to use the CUBE context variable to reference columns or members of the current cube in JavaScript. This example defines two cubes, 'users' and 'contacts', with dimensions and joins.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    contacts: {\n      sql: `${CUBE}.contact_id = ${contacts.id}`,\n      relationship: `one_to_one`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `${CUBE}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `COALESCE(${CUBE}.name, ${contacts.name})`,\n      type: `string`,\n    },\n  },\n});\n\ncube(`contacts`, {\n  sql_table: `contacts`,\n\n  dimensions: {\n    id: {\n      sql: `${CUBE}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `${CUBE}.name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Regular Query Example Using SQL API\nDESCRIPTION: Example of a regular query using SQL API syntax to select user state, city, order status and count with filtering and grouping.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  users.state,\n  users.city,\n  orders.status,\n  MEASURE(orders.count)\nFROM orders\nCROSS JOIN users\nWHERE\n  users.state != 'us-wa'\n  AND orders.created_at BETWEEN '2020-01-01' AND '2021-01-01'\nGROUP BY 1, 2, 3\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pre-aggregations and Joins in Cube.js\nDESCRIPTION: Demonstrates setting up pre-aggregations for orders and users cubes with joins. Includes configuration for measures, dimensions, and time dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    pre_aggregations:\n      - name: orders_rollup\n        measures:\n          - CUBE.count\n        dimensions:\n          - CUBE.user_id\n          - CUBE.status\n        time_dimension: CUBE.created_at\n        granularity: day\n\n    joins:\n      - name: users\n        sql: \"{CUBE.user_id} = ${users.id}\"\n        relationship: many_to_one\n\n  - name: users\n    pre_aggregations:\n      - name: users_rollup\n        dimensions:\n          - CUBE.id\n          - CUBE.name\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  pre_aggregations: {\n    orders_rollup: {\n      measures: [CUBE.count],\n      dimensions: [CUBE.user_id, CUBE.status],\n      time_dimension: CUBE.created_at,\n      granularity: `day`,\n    },\n  },\n\n  joins: {\n    users: {\n      sql: `${CUBE.user_id} = ${users.id}`,\n      relationship: `many_to_one`,\n    },\n  },\n});\n\ncube(`users`, {\n  pre_aggregations: {\n    users_rollup: {\n      dimensions: [CUBE.id, CUBE.name],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Event-Based Measures in Cube.js JavaScript Data Model\nDESCRIPTION: Demonstrates how to dynamically generate measure definitions for different event types using JavaScript array methods. The code creates distinct user count measures for each event type from a single events table, utilizing Object.assign, Array.map, and Array.reduce.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/schema-generation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst events = [\"app_engagement\", \"login\", \"purchase\"];\n\ncube(`events`, {\n  sql_table: `events`,\n\n  measures: Object.assign(\n    {\n      count: {\n        type: `count`,\n      },\n    },\n    events\n      .map((e) => ({\n        [`${e}_user_count`]: {\n          type: `count_distinct`,\n          sql: `user_id`,\n          filters: [\n            {\n              sql: `${CUBE}.event_type = '${e}'`,\n            },\n          ],\n        },\n      }))\n      .reduce((a, b) => Object.assign(a, b))\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining 'orders' Cube in JavaScript\nDESCRIPTION: JavaScript configuration for the 'orders' cube with count measure and status and created_at dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    status: {\n      sql: `status`,\n      type: `string`,\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Tags for AI Assistant in Cube Data Model\nDESCRIPTION: Example of using the 'ai' meta tag to provide context about possible values for a categorical dimension in a Cube data model. This helps the AI Assistant understand valid values for the 'status' field.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/ai-assistant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: status\n        sql: status\n        type: string\n        meta:\n          ai:\n            values:\n              - shipped\n              - processing\n              - completed\n```\n\n----------------------------------------\n\nTITLE: Importing from Parent Directories in Cube Data Models\nDESCRIPTION: This snippet shows how to correctly import a helper function from a parent directory in a Cube data model. It assumes a specific directory structure where the utils.js file is in a shared_utils folder.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// in model/sales/orders.js\nimport { capitalize } from \"./shared_utils/utils\";\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Count by Status with GraphQL\nDESCRIPTION: GraphQL query to retrieve the number of orders by status and creation date (daily granularity).\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  cube {\n    orders {\n      count\n      status\n      created_at {\n        day\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Average Measure in Cube.js\nDESCRIPTION: This example illustrates how to define an average measure in Cube.js. It calculates the average transaction amount from the orders cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    avg_transaction: {\n      sql: `${transaction_amount}`,\n      type: `avg`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: avg_transaction\n        sql: \"{transaction_amount}\"\n        type: avg\n```\n\n----------------------------------------\n\nTITLE: Defining Retail Orders Cube in Cube.js\nDESCRIPTION: Cube definition for retail orders with measures for customer count and revenue, along with a time dimension for created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/data-blending.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: retail_orders\n    sql_table: retail_orders\n\n    measures:\n      - name: customer_count\n        sql: customer_id\n        type: count_distinct\n\n      - name: revenue\n        sql: amount\n        type: sum\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`retail_orders`, {\n  sql_table: `retail_orders`,\n\n  measures: {\n    customer_count: {\n      sql: `customer_id`,\n      type: `count_distinct`,\n    },\n\n    revenue: {\n      sql: `amount`,\n      type: `sum`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Based Metrics Views in Cube\nDESCRIPTION: A YAML example showing how to create separate metrics views for the same measure (order_count) but with different time dimensions (order date vs. ship date).\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: order_count_by_order_date\n\n    cubes:\n      - join_path: orders\n        includes:\n          - order_count\n\n          - status\n          - created_at\n\n  - name: order_count_by_ship_date\n\n    cubes:\n      - join_path: orders\n        includes:\n          - order_count\n\n          - status\n          - shipped_at\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertica Connection in Cube using Environment Variables\nDESCRIPTION: This code snippet demonstrates how to set up the necessary environment variables in a .env file to connect Cube to a Vertica database. It includes the database type, host, user, password, and schema.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/vertica.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=vertica\nCUBEJS_DB_HOST=my.vertica.host\nCUBEJS_DB_USER=vertica_user\nCUBEJS_DB_PASS=**********\nCUBEJS_DB_SCHEMA=my_vertica_schema\n```\n\n----------------------------------------\n\nTITLE: Using data_source Parameter in JavaScript\nDESCRIPTION: This snippet shows how to specify a custom data source for a cube using the data_source parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  data_source: `prod_db`,\n  sql_table: `orders`,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Index to Pre-aggregation in Cube.js (JavaScript)\nDESCRIPTION: This snippet shows how to add an index named 'category_productname_zipcode_index' to the 'main' pre-aggregation in Cube.js using JavaScript. The index is optimized for the example query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    main: {\n      // ...\n\n      indexes: {\n        category_productname_zipcode_index: {\n          columns: [\n            product_category,\n            zip_code,\n            product_name\n          ],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Generation Endpoint\nDESCRIPTION: Example of creating a protected endpoint for generating JWT tokens in a web server.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.use((req, res, next) => {\n  if (!req.user) {\n    res.redirect(\"/login\");\n    return;\n  }\n  next();\n});\n\napp.get(\"/auth/cubejs-token\", (req, res) => {\n  res.json({\n    token: jwt.sign(req.user, process.env.CUBEJS_API_SECRET, {\n      expiresIn: \"1d\",\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Jinja Macros for SQL Transformations\nDESCRIPTION: Example of using Jinja macros to generate SQL snippets for currency conversion in Cube data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{%- macro cents_to_dollars(column_name, precision=2) -%}\n  ({{ column_name }} / 100)::NUMERIC(16, {{ precision }})\n{%- endmacro -%}\n\ncubes:\n  - name: payments\n    sql: >\n      SELECT\n        id AS payment_id,\n        {{ cents_to_dollars('amount') }} AS amount_usd\n      FROM app_data.payments\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Column OR Logic in Segments\nDESCRIPTION: This example demonstrates how to use segments to implement more complex filtering logic, specifically cross-column OR conditions. It's shown in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  segments: {\n    sf_users: {\n      sql: `\n        ${CUBE}.location = 'San Francisco' OR\n        ${CUBE}.state = 'CA'\n      `,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    segments:\n      - name: sf_users\n        sql: >\n          {CUBE}.location = 'San Francisco' OR {CUBE}.state = 'CA'\n```\n\n----------------------------------------\n\nTITLE: Basic Orders Cube Definition in YAML\nDESCRIPTION: Initial definition of the orders cube with basic dimensions and measures, including table reference, joins, and basic metrics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/create-data-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n\n    joins:\n      - name: users\n        sql: \"{CUBE}.USER_ID = {users}.ID\"\n        relationship: many_to_one\n\n    dimensions:\n      - name: status\n        sql: STATUS\n        type: string\n\n      - name: id\n        sql: ID\n        type: number\n        primary_key: true\n\n      - name: created_at\n        sql: CREATED_AT\n        type: time\n\n      - name: completed_at\n        sql: COMPLETED_AT\n        type: time\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Setting up Google BigQuery connection in Cube\nDESCRIPTION: This code snippet shows the required environment variables to set up a Google BigQuery connection in Cube. It includes the database type, project ID, and path to the key file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/google-bigquery.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=bigquery\nCUBEJS_DB_BQ_PROJECT_ID=my-bigquery-project-12345\nCUBEJS_DB_BQ_KEY_FILE=/path/to/my/keyfile.json\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options in Python for Cube.js\nDESCRIPTION: Demonstrates how to use the 'config' object to set various configuration options for Cube.js, including setting properties directly and using decorators.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.base_path = '/cube-api'\n\nconfig.context_to_app_id = lambda ctx: ctx['securityContext']['tenant_id']\n\ndef rewrite(query, ctx):\n  query['measures'].append('orders.count')\n  return query\n\nconfig.query_rewrite = rewrite\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_app_id')\ndef app_id(ctx):\n  return ctx['securityContext']['tenant_id']\n\n@config('query_rewrite')\ndef rewrite(query, ctx):\n  query['measures'].append('orders.count')\n  return query\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Introspection Queries\nDESCRIPTION: Examples of how to inspect the data model using standard PostgreSQL information schema queries and backslash commands.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM information_schema.tables\nWHERE table_schema = 'public';\n```\n\nLANGUAGE: sql\nCODE:\n```\n\\d\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity-First View for Orders in Cube\nDESCRIPTION: A YAML example showing how to create an entity-first view called 'orders_view' that includes various dimensions and measures from the orders cube and the related users cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - created_at\n\n          - completed_count\n          - count\n          - total_amount\n          - average_order_value\n\n      - join_path: orders.users\n        prefix: true\n        includes: \n          - city\n          - age\n          - gender\n```\n\n----------------------------------------\n\nTITLE: Defining Monthly Retention Cube in YAML\nDESCRIPTION: This YAML snippet defines a cube for monthly retention analysis. It includes the SQL query to generate the base table and defines measures for total count, active count, and percentage of active users.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/cohort-retention.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: monthly_retention\n    sql: >\n      SELECT\n        users.id as user_id,\n        date_trunc('month', users.created_at) as signup_month,\n        months_list.activity_month as activity_month,\n        data.monthly_pageviews\n      FROM users LEFT JOIN (\n        SELECT\n          DISTINCT (date_trunc('month', pages.original_timestamp)) as\n      activity_month\n        FROM pages\n      ) as months_list ON months_list.activity_month >= date_trunc('month',\n      users.created_at) LEFT JOIN (\n        SELECT\n          p.user_id,\n          date_trunc('month', p.original_timestamp) as activity_month,\n          COUNT(DISTINCT p.id) as monthly_pageviews\n        FROM pages p\n        GROUP BY 1,2\n      ) as data ON data.activity_month = months_list.activity_month AND\n      data.user_id = users.id\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: monthly_retention\n    # ...\n    measures:\n      - name: total_count\n        sql: user_id\n        type: count_distinct\n        public: false\n\n      - name: total_active_count\n        sql: user_id\n        type: count_distinct\n        filters:\n          - sql: monthly_pageviews > 0\n        drill_members:\n          - users.id\n          - users.email\n\n      - name: percentage_of_active\n        sql: \"100.0 * {total_active_count} / NULLIF({total_count}, 0)\"\n        type: number\n        format: percent\n        drill_members:\n          - users.email\n          - bots.team\n          - bots.last_seen\n          - percentage_of_active\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: monthly_retention\n    # ...\n    dimensions:\n      - name: months_since_signup\n        sql: \"DATEDIFF('month', signup_month, activity_month)\"\n        type: number\n\n      - name: signup_date\n        sql: \"(signup_month AT TIME ZONE 'America/Los_Angeles')\"\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for Cube Projects\nDESCRIPTION: Example of the recommended folder organization for Cube projects, showing how to structure cubes and views by business units.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\ncube_project\n└── model\n    ├── cubes\n    │   ├── finance\n    │   │   ├── stripe_invoices.yml\n    │   │   └── stripe_payments.yml\n    │   └── sales\n    │       └── base_opportunities.yml\n    └── views\n        ├── product\n        │   └── cloud_tenants.yml\n        └── sales\n            └── opportunities.yml\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unsupported Custom Type in Cube Store\nDESCRIPTION: Example error message that occurs when Cube Store encounters an unsupported data type during pre-aggregation table creation. The error specifically shows a case where a 'fixed' type is not recognized.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nError during create table: CREATE TABLE <REDACTED>:\nCustom type 'fixed' is not supported\n```\n\n----------------------------------------\n\nTITLE: Defining Time Dimensions in Cube.js\nDESCRIPTION: This snippet demonstrates how to add time dimensions to a Cube.js data model, including a custom granularity. It shows both default and custom time granularities.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`\n      // You can use this time dimension with all default granularities:\n      // year, quarter, month, week, day, hour, minute, second\n    },\n\n    completed_at: {\n      sql: `completed_at`,\n      type: `time`,\n      // You can use this time dimension with all default granularities\n      // and an additional custom granularity defined below\n      granularities: {\n        fiscal_year_starting_on_february_01: {\n          interval: `1 year`,\n          offset: `1 month`\n        }\n      }\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n        # You can use this time dimension with all default granularities:\n        # year, quarter, month, week, day, hour, minute, second\n\n      - name: completed_at\n        sql: completed_at\n        type: time\n        # You can use this time dimension with all default granularities\n        # and an additional custom granularity defined below\n        granularities:\n          - name: fiscal_year_starting_on_february_01\n            interval: 1 year\n            offset: 1 month\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Redshift Connection in .env File\nDESCRIPTION: This code snippet shows the required environment variables to be added to the .env file for connecting Cube to an AWS Redshift database. It includes the database type, host, name, user, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/aws-redshift.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=redshift\nCUBEJS_DB_HOST=my-redshift-cluster.cfbs3dkw1io8.eu-west-1.redshift.amazonaws.com\nCUBEJS_DB_NAME=my_redshift_database\nCUBEJS_DB_USER=redshift_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Environment Variables in Cube.js\nDESCRIPTION: Essential environment variables configuration for connecting Cube.js to MongoDB using the BI Connector. Includes host configuration, authentication credentials, and SSL settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/mongodb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=mongobi\n# The MongoBI connector host. If using on local machine, it should be either `localhost` or `127.0.0.1`:\nCUBEJS_DB_HOST=my.mongobi.host\n# The default port of the MongoBI connector service\nCUBEJS_DB_PORT=3307\nCUBEJS_DB_NAME=my_mongodb_database\nCUBEJS_DB_USER=mongodb_server_user\nCUBEJS_DB_PASS=mongodb_server_password\n# MongoBI requires SSL connections, so set the following to `true`:\nCUBEJS_DB_SSL=true\n```\n\n----------------------------------------\n\nTITLE: JWT Security Context Structure Example\nDESCRIPTION: Example of a typical JWT security context object structure containing user information and nested properties.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"iat\": 1516239022,\n  \"user_name\": \"John Doe\",\n  \"user_id\": 42,\n  \"location\": {\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Security Context Helper Function\nDESCRIPTION: Helper function implementation that checks if a specific team has access to a view based on the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/member-level-security.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n\ntemplate = TemplateContext()\n\n@template.function('is_accessible_by_team')\ndef is_accessible_by_team(team: str, ctx: dict) -> bool:\n  return team == ctx['securityContext'].setdefault('team', 'default')\n```\n\n----------------------------------------\n\nTITLE: Using {cube.sql()} Function for Reusing SQL Definitions\nDESCRIPTION: Example of using the {cube.sql()} function to reference and reuse SQL queries from other cubes, which is useful for polymorphic cubes or data blending.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`organisms`, {\n  sql_table: `organisms`\n})\n\ncube(`animals`, {\n  sql: `\n    SELECT *\n    FROM ${organisms.sql()}\n    WHERE kingdom = 'animals'\n  `\n})\n\ncube(`dogs`, {\n  sql: `\n    SELECT *\n    FROM ${animals.sql()}\n    WHERE species = 'dogs'\n  `,\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: organisms\n    sql_table: organisms\n\n  - name: animals\n    sql: >\n      SELECT *\n      FROM {organisms.sql()}\n      WHERE kingdom = 'animals'\n\n  - name: dogs\n    sql: >\n      SELECT *\n      FROM {animals.sql()}\n      WHERE species = 'dogs'\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-aggregations in Cube.js using YAML\nDESCRIPTION: This snippet demonstrates how to create a pre-aggregation named 'main' for an orders cube using YAML syntax. It defines the measures, dimensions, time dimension, and granularity settings to optimize query performance.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: main\n        measures:\n          - count\n        dimensions:\n          - status\n        time_dimension: created_at\n        granularity: day\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Time Granularities in Cube.js\nDESCRIPTION: Demonstrates how to define custom time granularities with various parameters including interval, offset, and origin settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT '2025-01-01T00:12:00.000Z'::TIMESTAMP AS time UNION ALL\n      SELECT '2025-02-01T00:15:00.000Z'::TIMESTAMP AS time UNION ALL\n      SELECT '2025-03-01T00:18:00.000Z'::TIMESTAMP AS time\n\n    dimensions:\n      - name: time\n        sql: time\n        type: time\n\n        granularities:\n          - name: quarter_hour\n            interval: 15 minutes\n\n          - name: week_starting_on_sunday\n            interval: 1 week\n            offset: -1 day\n\n          - name: fiscal_year_starting_on_april_01\n            title: Corporate and government fiscal year in the United Kingdom\n            interval: 1 year\n            origin: \"2025-04-01\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT '2025-01-01T00:12:00.000Z'::TIMESTAMP AS time UNION ALL\n    SELECT '2025-02-01T00:15:00.000Z'::TIMESTAMP AS time UNION ALL\n    SELECT '2025-03-01T00:18:00.000Z'::TIMESTAMP AS time\n  `,\n\n  dimensions: {\n    time: {\n      sql: `time`,\n      type: `time`,\n      granularities: {\n        quarter_hour: {\n          interval: `15 minutes`\n        },\n        week_starting_on_sunday: {\n          interval: `1 week`,\n          offset: `-1 day`\n        },\n        fiscal_year_starting_on_april_01: {\n          title: `Corporate and government fiscal year in the United Kingdom`,\n          interval: `1 year`,\n          origin: `2025-04-01`\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with Many-to-One Relationships in JavaScript\nDESCRIPTION: JavaScript example of defining orders and customers cubes with a many-to-one relationship, showing primary keys and dimension definitions. Used to demonstrate chasm and fan trap detection.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true\n    },\n    city: {\n      sql: `city`,\n      type: `string`\n    }\n  },\n\n  joins: {\n    customers: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.customer_id = ${customers.id}`,\n    },\n  },\n});\n\ncube(`customers`, {\n  sql_table: `customers`\n\n  measures: {\n    count: {\n      type: `count`,\n    }\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Curly Braces and Escaping in YAML Data Models\nDESCRIPTION: Examples of using curly braces for references in YAML data models and how to escape literal curly braces when needed, such as when defining JSON objects.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT id, created_at\n      FROM {other_cube.sql()}\n\n    dimensions:\n      - name: status\n        sql: status\n        type: string\n\n      - name: status_x2\n        sql: \"{status} || ' ' || {status}\"\n        type: string\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: json_object_in_postgres\n    sql: SELECT CAST('\\{\"key\":\"value\"\\}'::JSON AS TEXT) AS json_column\n\n  - name: csv_from_s3_in_duckdb\n    sql: >\n      SELECT *\n      FROM read_csv(\n        's3://bbb/aaa.csv',\n        delim = ',',\n        header = true,\n        columns=\\{'time':'DATE','count':'NUMERIC'\\}\n      )\n```\n\n----------------------------------------\n\nTITLE: Disabling Development Mode in Cube\nDESCRIPTION: Configuration to disable development mode in production environments to prevent security vulnerabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/production-checklist.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\n# Set this to false or leave unset to disable development mode\nCUBEJS_DEV_MODE=false\n```\n\n----------------------------------------\n\nTITLE: Session Duration Calculation in Cube.js\nDESCRIPTION: Implements session duration calculation using subquery dimensions and measures for tracking session end times and average duration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"events\", {\n  measures: {\n    last_event_timestamp: {\n      sql: `timestamp`,\n      type: `max`,\n      public: false,\n    },\n  },\n});\n\ncube(\"sessions\", {\n  dimensions: {\n    end_raw: {\n      sql: `${events.last_event_timestamp}`,\n      type: `time`,\n      sub_query: true,\n      public: false,\n    },\n    end_at: {\n      sql: `CASE WHEN ${end_raw} + INTERVAL '1 minutes' > ${CUBE}.next_session_start_at\n         THEN ${CUBE}.next_session_start_at\n         ELSE ${end_raw} + INTERVAL '30 minutes'\n         END`,\n      type: `time`,\n    },\n    duration_minutes: {\n      sql: `datediff(minutes, ${CUBE}.session_start_at, ${end_at})`,\n      type: `number`,\n    },\n  },\n  measures: {\n    average_duration_minutes: {\n      type: `avg`,\n      sql: `${duration_minutes}`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Measures to Events Cube in Cube.js (JavaScript)\nDESCRIPTION: This snippet adds measures to the 'events' cube to calculate the total number of events and the number of page views. It uses filters to distinguish between different event types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"events\", {\n  // ...,\n\n  measures: {\n    count: {\n      sql: `event_id`,\n      type: `count`,\n    },\n\n    page_views_count: {\n      sql: `event_id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.event = 'pageview'` }],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Segment with Description and Public Parameters\nDESCRIPTION: This example shows how to define a segment with additional parameters like description and public visibility flag. It's presented in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  segments: {\n    sf_users: {\n      sql: `${CUBE}.location = 'San Francisco'`,\n      description: `Users from San Francisco`,\n      public: false\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    segments:\n      - name: sf_users\n        sql: \"{CUBE}.location = 'San Francisco'\"\n        description: Users from San Francisco\n        public: false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Cube Cloud Deployment\nDESCRIPTION: GitHub Actions configuration for automated deployment to Cube Cloud. Triggers on push to master branch and uses Node.js 20.x environment to deploy using Cube CLI.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/continuous-deployment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Cube App\non:\n  push:\n    paths:\n      - \"**\"\n    branches:\n      - \"master\"\njobs:\n  deploy:\n    name: Deploy My Cube App\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Use Node.js 20.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 20.x\n      - name: Install Cube backend server core\n        run: npm i @cubejs-backend/server-core\n      - name: Deploy to Cube Cloud\n        run: npx cubejs-cli deploy --token ${{ secrets.CUBE_CLOUD_DEPLOY_AUTH }}\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Configuration with Dynamic App ID\nDESCRIPTION: Configuration for multiple database instances using dynamic app and orchestrator IDs based on security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.appId}_${securityContext.userId}`,\n  contextToOrchestratorId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.appId}_${securityContext.userId}`,\n  driverFactory: ({ securityContext }) => ({\n    type: \"postgres\",\n    database: `my_app_${securityContext.appId}_${securityContext.userId}`,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining 4-5-4 Calendar Cube in YAML\nDESCRIPTION: Creates a base calendar cube that generates a 4-5-4 retail calendar structure with fiscal years, weeks, and months. The SQL recursively generates weeks following the 4-5-4 pattern and includes handling for 53-week years.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/custom-calendar.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: calendar_454\n    public: false\n    sql: >\n      WITH RECURSIVE fiscal_weeks AS (\n          -- Step 1: Define the start of the fiscal years (Sunday closest to Feb 1st)\n          SELECT \n              year AS fiscal_year, \n              CASE \n                  WHEN strftime('%w', date_trunc('week', make_date(year, 2, 1)))::INTEGER <= 3 \n                  THEN date_trunc('week', make_date(year, 2, 1)) + INTERVAL 6 DAY \n                  ELSE date_trunc('week', make_date(year, 2, 1) + INTERVAL 7 DAY) + INTERVAL 7 DAY\n              END AS week_start,\n              1 AS week_number,\n              1 AS month_number,\n              1 AS month_week_count\n          FROM range(2015, 2031) t(year)\n          \n          UNION ALL\n          \n          -- Step 2: Generate weeks recursively following the 4-5-4 pattern\n          SELECT \n              fiscal_year,\n              week_start + INTERVAL 7 DAY AS week_start,\n              week_number + 1,\n              CASE \n                  WHEN month_number = 12 AND ((month_week_count = 4 AND month_number % 3 = 1) OR \n                                              (month_week_count = 5 AND month_number % 3 = 2) OR \n                                              (month_week_count = 4 AND month_number % 3 = 0)) \n                  THEN 1 \n                  WHEN month_week_count = 4 AND (month_number % 3 = 1) THEN month_number + 1\n                  WHEN month_week_count = 5 AND (month_number % 3 = 2) THEN month_number + 1\n                  WHEN month_week_count = 4 AND (month_number % 3 = 0) THEN month_number + 1\n                  ELSE month_number\n              END AS month_number,\n              CASE \n                  WHEN month_week_count = 4 AND (month_number % 3 = 1) THEN 1\n                  WHEN month_week_count = 5 AND (month_number % 3 = 2) THEN 1\n                  WHEN month_week_count = 4 AND (month_number % 3 = 0) THEN 1\n                  ELSE month_week_count + 1\n              END AS month_week_count\n          FROM fiscal_weeks\n          WHERE week_number < 52 OR (week_number = 52 AND (fiscal_year % 5 = 2)) -- Account for 53rd week\n      )\n\n      SELECT \n          fiscal_year,\n          week_number,\n          month_number,\n          make_timestamp(fiscal_year, month_number, 1, 0, 0, 0) AS fiscal_month_date,\n          week_start AS week_start_date,\n          make_timestamp(year(week_start + INTERVAL 6 DAY), \n              month(week_start + INTERVAL 6 DAY), \n              day(week_start + INTERVAL 6 DAY), \n              23, 59, 59.999) AS week_end_date\n      FROM fiscal_weeks\n      ORDER BY fiscal_year, week_number\n\n    dimensions:\n      - name: retail_year\n        sql: fiscal_year\n        type: number\n\n      - name: week_number\n        sql: week_number\n        type: number\n\n      - name: month_number\n        sql: month_number\n        type: number\n\n      - name: retail_month_date\n        sql: fiscal_month_date\n        type: time\n\n      - name: week_start_date\n        sql: week_start_date\n        type: time\n\n      - name: week_end_date\n        sql: week_end_date\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Unifying Events and Page Views in Cube.js (JavaScript)\nDESCRIPTION: This code snippet creates a cube called 'events' that combines page view data and event data from Segment into a single table. It assigns unique event IDs and unifies the structure of both data types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`events`, {\n  sql: `\n     SELECT\n      t.id || '-e' as event_id\n      , t.anonymous_id as anonymous_id\n      , t.timestamp\n      , t.event\n      , t.context_page_path as page_path\n      , NULL as referrer\n    from javascript.tracks as t\n\n    UNION ALL\n\n    SELECT\n      p.id as event_id\n      , p.anonymous_id\n      , p.timestamp\n      , 'pageview' as event\n      , p.context_page_path as page_path\n      , p.referrer as referrer\n    FROM javascript.pages as p\n    `,\n});\n```\n\n----------------------------------------\n\nTITLE: Security Context Usage Example\nDESCRIPTION: Demonstrates how to use SECURITY_CONTEXT in cube definitions for filtering data based on user context, including required filters and direct value access.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT *\n    FROM orders\n    WHERE ${SECURITY_CONTEXT.email.filter(\"email\")}\n  `,\n\n  dimensions: {\n    date: {\n      sql: `date`,\n      type: `time`,\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT *\n    FROM ${\n      SECURITY_CONTEXT.type.unsafeValue() === \"employee\" ? \"employee\" : \"public\"\n    }.orders\n  `,\n\n  dimensions: {\n    date: {\n      sql: `date`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Time-Based Pre-aggregation Definition\nDESCRIPTION: Definition of a pre-aggregation that includes time dimension with monthly granularity, shown in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/getting-started-pre-aggregations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: orders_by_completed_at\n        measures:\n          - count\n        time_dimension: completed_at\n        granularity: month\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    orders_by_completed_at: {\n      measures: [count],\n      time_dimension: completed_at,\n      granularity: `month`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Data Blending with Cube.js API\nDESCRIPTION: Example of using Cube.js client API to load and blend data from multiple cubes for correlation analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/data-blending.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\n\nconst API_URL = \"http://localhost:4000\";\nconst CUBE_TOKEN = \"YOUR_TOKEN\";\n\nconst cubeApi = cube(CUBE_TOKEN, {\n  apiUrl: `${API_URL}/cubejs-api/v1`,\n});\n\nconst queries = [\n  {\n    measures: [\"online_orders.revenue\"],\n    timeDimensions: [\n      {\n        dimension: \"online_orders.created_at\",\n        granularity: \"day\",\n        dateRange: [\"2020-08-01\", \"2020-08-07\"],\n      },\n    ],\n  },\n  {\n    measures: [\"retail_orders.revenue\"],\n    timeDimensions: [\n      {\n        dimension: \"retail_orders.created_at\",\n        granularity: \"day\",\n        dateRange: [\"2020-08-01\", \"2020-08-07\"],\n      },\n    ],\n  },\n];\n\nconst resultSet = await cubeApi.load(queries);\n```\n\n----------------------------------------\n\nTITLE: Filtering Time Dimension with inDateRange in Cube.js Query\nDESCRIPTION: Demonstrates the use of the 'inDateRange' operator to filter a time dimension into a specific date range. The values must be an array of dates in 'YYYY-MM-DD' format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.time\",\n  \"operator\": \"inDateRange\",\n  \"values\": [\"2015-01-01\", \"2015-12-31\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Joins with Jinja Loops in YAML\nDESCRIPTION: Example of using Jinja loops to generate LEFT JOIN UNNEST clauses for multiple nested properties in a Cube data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{%- set nested_properties = [\n  \"referrer\",\n  \"href\",\n  \"host\",\n  \"pathname\",\n  \"search\"\n] -%}\n\ncubes:\n  - name: analytics\n    sql: >\n      SELECT\n      {%- for prop in nested_properties %}\n        {{ prop }}_prop.value AS {{ prop }}\n      {%- endfor %}\n      FROM public.events\n      {%- for prop in nested_properties %}\n      LEFT JOIN UNNEST(properties) AS {{ prop }}_prop ON {{ prop }}_prop.key = '{{ prop }}'\n      {%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Dimension Definitions with Jinja Macros\nDESCRIPTION: Shows how to create and use Jinja macros to generate reusable dimension definitions in Cube data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{%- macro dimension(column_name, type='string', primary_key=False) -%}\n      - name: {{ column_name }}\n        sql: {{ column_name }}\n        type: {{ type }}\n        {% if primary_key -%}\n        primary_key: true\n        {% endif -%}\n{% endmacro -%}\n\ncubes:\n  - name: orders\n    sql_table: public.orders\n\n    dimensions:\n      {{ dimension('id', 'number', primary_key=True) }}\n      {{ dimension('status') }}\n      {{ dimension('created_at', 'time') }}\n      {{ dimension('completed_at', 'time') }}\n```\n\n----------------------------------------\n\nTITLE: Using updateQuery for Bulk Member Updates in QueryBuilder\nDESCRIPTION: Illustrates the correct way to perform bulk updates on members using the updateQuery prop of QueryBuilderRenderProps. It shows an example of removing all measures at once, contrasting the incorrect approach with the correct one.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<QueryBuilder\n  // ...\n  cubeApi={cubeApi}\n  render={({\n    // ...\n    measures,\n    updateMeasures,\n    updateQuery,\n  }) => {\n    // ...\n    return (\n      <>\n        // WRONG: This code will not work properly\n        <button\n          onClick={() =>\n            measures.forEach((measure) => updateMeasures.remove(measure))\n          }\n        >\n          Remove all\n        </button>\n\n        // CORRECT: Using `updateQuery` for removing all measures\n        <button\n          onClick={() =>\n            updateQuery({\n              measures: [],\n            })\n          }\n        >\n          Remove all\n        </button>\n      </>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube with JavaScript\nDESCRIPTION: Example of configuring Cube using JavaScript in cube.js file. Demonstrates setting base path and implementing query rewrite functionality for filtering queries based on security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // Base path for the REST API\n  basePath: '/cube-api',\n\n  // Inspect, modify, or restrict every query\n  queryRewrite: (query, { securityContext }) => {\n    if (securityContext.order_id) {\n      query.filters.push({\n        member: 'orders_view.id',\n        operator: 'equals',\n        values: [securityContext.order_id]\n      });\n    }\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Cubes with CUBE Context Variable in YAML\nDESCRIPTION: Shows how to use the CUBE context variable to reference columns or members of the current cube in YAML. This example defines two cubes, 'users' and 'contacts', with dimensions and joins.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    joins:\n      - name: contacts\n        sql: \"{CUBE}.contact_id = {contacts.id}\"\n        relationship: one_to_one\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"COALESCE({CUBE.name}, {contacts.name})\"\n        type: string\n\n  - name: contacts\n    sql_table: contacts\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"{CUBE}.name\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivot Axes in Cube.js Query Results\nDESCRIPTION: This example demonstrates how to use the pivotConfig object to arrange query results along different axes. It shows various configurations for displaying country and gender dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Example query\n{\n  measures: ['Orders.count'],\n  dimensions: ['Users.country', 'Users.gender']\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nresultSet.tablePivot({\n  x: ['Users.country'],\n  y: ['Users.gender', 'measures']\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nresultSet.tablePivot({\n  x: ['Users.gender'],\n  y: ['Users.country', 'measures'],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nresultSet.tablePivot({\n  x: ['Users.gender', 'measures'],\n  y: ['Users.country'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Sum Measure in Cube.js\nDESCRIPTION: This snippet shows how to create sum measures in Cube.js. It includes examples of summing a single column, referencing another measure, and performing a calculation within the sum.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    revenue: {\n      sql: `amount`,\n      type: `sum`,\n    },\n\n    revenue_2: {\n      sql: `${charges_amount}`,\n      type: `sum`,\n    },\n\n    revenue_3: {\n      sql: `fee * 0.1`,\n      type: `sum`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: revenue\n        sql: amount\n        type: sum\n\n      - name: revenue_2\n        sql: \"{charges_amount}\"\n        type: sum\n\n      - name: revenue_3\n        sql: fee * 0.1\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Comparing Segment Usage with Dimension Filters\nDESCRIPTION: This example compares the use of segments with dimension filters, showing equivalent queries using both approaches. It includes cube definition and corresponding query objects.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  dimensions: {\n    location: {\n      sql: `location`,\n      type: `string`,\n    },\n  },\n\n  segments: {\n    sf_users: {\n      sql: `${CUBE}.location = 'San Francisco'`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    dimensions:\n      - name: location\n        sql: location\n        type: string\n\n    segments:\n      - name: sf_users\n        sql: \"{CUBE}.location = 'San Francisco'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"users.count\"],\n  \"filters\": [\n    {\n      \"member\": \"users.location\",\n      \"operator\": \"equals\",\n      \"values\": [\"San Francisco\"]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"users.count\"],\n  \"segments\": [\"users.sf_users\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Compare Date Range Query Example in Cube REST API\nDESCRIPTION: Example of a compare date range query that compares order amounts across three years (2022-2024) by city. The query uses compareDateRange option to specify multiple date ranges and requires queryType: 'multi' parameter when sent to the /v1/load endpoint.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"orders.city\"],\n  \"measures\": [\"orders.amount\"],\n  \"filters\": [\n    {\n      \"member\": \"orders.status\",\n      \"operator\": \"equals\",\n      \"values\": [\"shipped\"]\n    }\n  ],\n  \"timeDimensions\": [{\n    \"dimension\": \"orders.created_at\",\n    \"compareDateRange\": [\n      [\"2024-01-01\", \"2024-12-31\"],\n      [\"2023-01-01\", \"2023-12-31\"],\n      [\"2022-01-01\", \"2022-12-31\"]\n    ],\n    \"granularity\": \"year\"\n  }],\n  \"limit\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse Database Connection in Cube.js\nDESCRIPTION: Basic environment variables configuration for connecting Cube.js to a ClickHouse database. Includes essential parameters like database host, name, user credentials, and access settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/clickhouse.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=clickhouse\nCUBEJS_DB_HOST=my.clickhouse.host\nCUBEJS_DB_NAME=my_clickhouse_database\nCUBEJS_DB_USER=clickhouse_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube.js for Multi-Tenant Data Models\nDESCRIPTION: This snippet shows how to configure Cube.js to use different data model paths for each tenant. It uses the securityContext to determine the tenant and sets up caching and scheduled refreshes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileRepository } = require(\"@cubejs-backend/server-core\");\n\nmodule.exports = {\n  contextToAppId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.tenant}`,\n\n  repositoryFactory: ({ securityContext }) =>\n    new FileRepository(`model/${securityContext.tenant}`),\n\n  scheduledRefreshContexts: () => [\n    { securityContext: { tenant: \"avocado\" } },\n    { securityContext: { tenant: \"mango\" } },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Drill Members for Measures in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to define drill-down fields for measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    revenue: {\n      type: `sum`,\n      sql: `price`,\n      drill_members: [id, price, status, products.name, products.id],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Approximate Additive Measures in Cube.js\nDESCRIPTION: This snippet shows how to replace a non-additive count_distinct measure with an approximate additive count_distinct_approx measure in Cube.js. This approach can improve performance and allow the measure to be used in pre-aggregations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/non-additivity.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    measures:\n      - name: distinct_ages\n        sql: age\n        type: count_distinct_approx\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  measures: {\n    distinct_ages: {\n      sql: `age`,\n      type: `count_distinct_approx`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a String Measure in Cube.js\nDESCRIPTION: This snippet demonstrates how to create a string measure in Cube.js. It uses a CASE statement to convert a numerical value to a string, labeling it as 'high' or 'low' based on a condition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    high_or_low: {\n      type: `string`,\n      sql: `CASE WHEN ${CUBE.number} > 100 THEN 'high' ELSE 'low' END`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: high_or_low\n        sql: \"CASE WHEN {CUBE.number} > 100 THEN 'high' ELSE 'low' END\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Export Bucket for Snowflake\nDESCRIPTION: This snippet demonstrates how to configure an AWS S3 export bucket for Snowflake in Cube using environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/snowflake.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=s3\nCUBEJS_DB_EXPORT_BUCKET=my.bucket.on.s3\nCUBEJS_DB_EXPORT_BUCKET_AWS_KEY=<AWS_KEY>\nCUBEJS_DB_EXPORT_BUCKET_AWS_SECRET=<AWS_SECRET>\nCUBEJS_DB_EXPORT_BUCKET_AWS_REGION=<AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Sending a Query Request to the AI API in JSON\nDESCRIPTION: Example of a basic request to the AI API with a natural language query asking about highest AOV this year. This is the simplest form of interaction with the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Where do we have the highest aov this year?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Row-Level Security in Cube.js\nDESCRIPTION: This snippet demonstrates how to implement basic Row-Level Security in Cube.js using the queryRewrite function. It filters queries based on the tenantId in the Security Context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/faqs/tips-and-tricks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    if (!securityContext.tenantId) {\n      throw new Error(\"No id found in Security Context!\");\n    } else {\n      query.filters.push({\n        member: \"orders.tenant_id\",\n        operator: \"equals\",\n        values: [securityContext.tenantId],\n      });\n\n      return query;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Calculated Measures in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to create calculated measures using formulas in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    purchases_to_created_account_ratio: {\n      sql: `${purchases} / ${users.count} * 100.0`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryBuilder Component in React\nDESCRIPTION: Shows how to use the QueryBuilder component to create an interactive analytics query builder. It includes measure selection and chart rendering based on the selected measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Layout, Divider, Empty, Select } from 'antd';\nimport { QueryBuilder } from '@cubejs-client/react';\nimport cube from '@cubejs-client/core';\nimport 'antd/dist/antd.css';\n\nimport ChartRenderer from './ChartRenderer';\n\nconst cubeApi = cube('YOUR-CUBE-API-TOKEN', {\n  apiUrl: 'http://localhost:4000/cubejs-api/v1',\n});\n\nconst App = () => (\n  <QueryBuilder\n    query={{\n      timeDimensions: [\n        {\n          dimension: 'LineItems.createdAt',\n          granularity: 'month',\n        },\n      ],\n    }}\n    cubeApi={cubeApi}\n    render={({ resultSet, measures, availableMeasures, updateMeasures }) => (\n      <Layout.Content style={{ padding: '20px' }}>\n        <Select\n          mode=\"multiple\"\n          style={{ width: '100%' }}\n          placeholder=\"Please select\"\n          onSelect={(measure) => updateMeasures.add(measure)}\n          onDeselect={(measure) => updateMeasures.remove(measure)}\n        >\n          {availableMeasures.map((measure) => (\n            <Select.Option key={measure.name} value={measure}>\n              {measure.title}\n            </Select.Option>\n          ))}\n        </Select>\n        <Divider />\n        {measures.length > 0 ? (\n          <ChartRenderer resultSet={resultSet} />\n        ) : (\n          <Empty description=\"Select measure or dimension to get started\" />\n        )}\n      </Layout.Content>\n    )}\n  />\n);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Extending User Cube for Teachers and Students in JavaScript\nDESCRIPTION: Creates 'teachers' and 'students' cubes by extending the base 'users' cube and applying specific filters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`teachers`, {\n  extends: users,\n  sql: `\n    SELECT *\n    FROM ${users.sql()}\n    WHERE type = 'teacher'\n  `,\n});\n\ncube(`students`, {\n  extends: users,\n  sql: `\n    SELECT *\n    FROM ${users.sql()}\n    WHERE type = 'student'\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base User Cube in YAML\nDESCRIPTION: Creates a base 'users' cube with common measures and dimensions for both teachers and students. This cube will be extended by specific teacher and student cubes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql: SELECT * FROM users\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: name\n        sql: name\n        type: string\n\n      - name: school\n        sql: school\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Cross-Cube References and Joins\nDESCRIPTION: Illustrates how to reference columns and members across different cubes when implementing joins.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    joins:\n      - name: contacts\n        sql: \"{users}.contact_id = {contacts.id}\"\n        relationship: one_to_one\n\n    dimensions:\n      - name: id\n        sql: \"{users}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"COALESCE({users.name}, {contacts.name})\"\n        type: string\n\n  - name: contacts\n    sql_table: contacts\n\n    dimensions:\n      - name: id\n        sql: \"{contacts}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"{contacts}.name\"\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    contacts: {\n      sql: `${users}.contact_id = ${contacts.id}`,\n      relationship: `one_to_one`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `${users}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `COALESCE(${users}.name, ${contacts.name})`,\n      type: `string`,\n    },\n  },\n});\n\ncube(`contacts`, {\n  sql_table: `contacts`,\n\n  dimensions: {\n    id: {\n      sql: `${contacts}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `${contacts}.name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Athena Environment Variables in Cube\nDESCRIPTION: Basic environment configuration for connecting Cube to AWS Athena. Includes essential settings for AWS credentials, region, S3 output location, and Athena-specific configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/aws-athena.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=athena\nCUBEJS_AWS_KEY=AKIA************\nCUBEJS_AWS_SECRET=****************************************\nCUBEJS_AWS_REGION=us-east-1\nCUBEJS_AWS_S3_OUTPUT_LOCATION=s3://my-athena-output-bucket\nCUBEJS_AWS_ATHENA_WORKGROUP=primary\nCUBEJS_AWS_ATHENA_CATALOG=AwsDataCatalog\n```\n\n----------------------------------------\n\nTITLE: Row-Level Security Configuration\nDESCRIPTION: Implementation of row-level security using queryRewrite to filter data based on user ID.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    const user = securityContext;\n    if (user.id) {\n      query.filters.push({\n        member: \"users.id\",\n        operator: \"equals\",\n        values: [user.id],\n      });\n    }\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Percent Format Dimension\nDESCRIPTION: Demonstrates formatting numeric values as percentages with calculations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    open_rate: {\n      sql: `COALESCE(100.0 * ${uniq_open_count} / NULLIF(${delivered_count}, 0), 0)`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: open_rate\n        sql: \"COALESCE(100.0 * {uniq_open_count} / NULLIF({delivered_count}, 0), 0)\"\n        type: number\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: SQL Utils Timezone Conversion Example\nDESCRIPTION: Shows how to use SQL_UTILS.convertTz() for timezone conversion in cube definitions, with separate dimensions for converted and non-converted timestamps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`visitors`, {\n  // ...\n\n  dimensions: {\n    // Do not use in timeDimensions query property\n    created_at_converted: {\n      sql: SQL_UTILS.convertTz(`created_at`),\n      type: `time`,\n    },\n\n    // Use in timeDimensions query property\n    created_at: {\n      sql: `created_at`,\n      type: \"time\",\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: visitors\n    # ...\n\n    dimensions:\n      # Do not use in timeDimensions query property\n      - name: created_at_converted\n        sql: \"{SQL_UTILS.convertTz(`created_at`)}\"\n        type: time\n\n      # Use in timeDimensions query property\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Implementing Month-Over-Month Comparison in Cube.js with YAML\nDESCRIPTION: This YAML configuration defines a cube with rolling window measures to calculate month-over-month comparisons. It creates current_month_sum and previous_month_sum measures with different window offsets, then calculates a ratio between them.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/period-over-period.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: month_over_month\n    sql: >\n      SELECT 1 AS value, '2024-01-01'::TIMESTAMP AS date UNION ALL\n      SELECT 2 AS value, '2024-01-01'::TIMESTAMP AS date UNION ALL\n      SELECT 3 AS value, '2024-02-01'::TIMESTAMP AS date UNION ALL\n      SELECT 4 AS value, '2024-02-01'::TIMESTAMP AS date UNION ALL\n      SELECT 5 AS value, '2024-03-01'::TIMESTAMP AS date UNION ALL\n      SELECT 6 AS value, '2024-03-01'::TIMESTAMP AS date UNION ALL\n      SELECT 7 AS value, '2024-04-01'::TIMESTAMP AS date UNION ALL\n      SELECT 8 AS value, '2024-04-01'::TIMESTAMP AS date\n\n    dimensions:\n      - name: date\n        sql: date\n        type: time\n\n    measures:\n      - name: current_month_sum\n        sql: value\n        type: sum\n        rolling_window:\n          trailing: 1 month\n          offset: end\n\n      - name: previous_month_sum\n        sql: value\n        type: sum\n        rolling_window:\n          trailing: 1 month\n          offset: start\n\n      - name: month_over_month_ratio\n        sql: \"{current_month_sum} / {previous_month_sum}\"\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Settings\nDESCRIPTION: JavaScript configuration example demonstrating how to set up CORS for specific domains in Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  http: {\n    cors: {\n      origin: \"https://example.com\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube-Dagster Integration Workflows\nDESCRIPTION: Python code defining two Dagster assets: one for querying Cube via the REST API and another for triggering pre-aggregation builds via the Orchestration API\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/dagster.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dagster import asset\nfrom dagster_cube.cube_resource import CubeResource\n\n@asset\ndef cube_query_workflow():\n  my_cube_resource = CubeResource(\n    instance_url=\"https://awesome-ecom.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1/\",\n    api_key=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEwMDAwMDAwMDAsImV4cCI6NTAwMDAwMDAwMH0.OHZOpOBVKr-sCwn8sbZ5UFsqI3uCs6e4omT7P6WVMFw\"\n  )\n\n  response = my_cube_resource.make_request(\n    method=\"POST\",\n    endpoint=\"load\",\n    data={\n      'query': {\n        'measures': ['Orders.count'],\n        'dimensions': ['Orders.status']\n      }\n    }\n  )\n\n  return response\n\n@asset\ndef cube_build_workflow():\n  my_cube_resource = CubeResource(\n    instance_url=\"https://awesome-ecom.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1/\",\n    api_key=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEwMDAwMDAwMDAsImV4cCI6NTAwMDAwMDAwMH0.OHZOpOBVKr-sCwn8sbZ5UFsqI3uCs6e4omT7P6WVMFw\"\n  )\n\n  response = my_cube_resource.make_request(\n    method=\"POST\",\n    endpoint=\"pre-aggregations/jobs\",\n    data={\n      'action': 'post',\n      'selector': {\n        'timezones': ['UTC'],\n        'contexts': [{'securityContext': {}}]\n      }\n    }\n  )\n\n  return response\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube with SQL Table in JavaScript and YAML\nDESCRIPTION: Shows how to define a basic cube in Cube.js using the sql_table property to point to a database table. Demonstrates syntax for both JavaScript and YAML.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n```\n\n----------------------------------------\n\nTITLE: Orders and Customers Data Model\nDESCRIPTION: Defines base cubes for orders and customers with measures and dimensions for revenue analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    customer_id: {\n      sql: `customer_id`,\n      type: `number`,\n    },\n  },\n});\n\ncube(`customers`, {\n  sql_table: `customers`,\n\n  measures: {\n    count: {\n      sql: `id`,\n      type: `count`,\n    },\n\n    total_revenue: {\n      sql: `revenue`,\n      type: `sum`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to add custom metadata to measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: revenue\n        type: sum\n        sql: price\n        meta:\n          any: value\n```\n\n----------------------------------------\n\nTITLE: Defining Active Users Metrics with Rolling Windows in Cube.js\nDESCRIPTION: This code defines an active_users cube with measures for monthly, weekly, and daily active users using the rolling_window parameter. It also includes a derived WAU to MAU ratio measure to analyze user engagement.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/active-users.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: active_users\n    sql: >\n      SELECT user_id, created_at FROM public.orders\n\n    measures:\n      - name: monthly_active_users\n        type: count_distinct\n        sql: user_id\n        rolling_window:\n          trailing: 30 day\n          offset: start\n\n      - name: weekly_active_users\n        type: count_distinct\n        sql: user_id\n        rolling_window:\n          trailing: 7 day\n          offset: start\n\n      - name: daily_active_users\n        type: count_distinct\n        sql: user_id\n        rolling_window:\n          trailing: 1 day\n          offset: start\n\n      - name: wau_to_mau\n        title: WAU to MAU\n        type: number\n        sql:\n          \"100.000 * {weekly_active_users} / NULLIF({monthly_active_users}, 0)\"\n        format: percent\n\n    dimensions:\n      - name: created_at\n        type: time\n        sql: created_at\n```\n\n----------------------------------------\n\nTITLE: Basic Cube GraphQL Query Structure\nDESCRIPTION: Demonstrates the fundamental structure of a GraphQL query for Cube. The query allows specifying cube query arguments and cube-specific arguments to retrieve specific cube members.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  cube [([cubeQueryArgs])] {\n    <cubeName> [([cubeArgs])] {\n      <cubeMember>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-database Dynamic Data Model Configuration\nDESCRIPTION: Configuration for handling multiple data sources in dynamic data models, including driver factory setup for MySQL and Postgres.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/javascript.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require(\"node-fetch\");\nimport {\n  convertStringPropToFunction,\n  transformDimensions,\n  transformMeasures,\n} from \"./utils\";\n\nasyncModule(async () => {\n  const dynamicCubes = await (\n    await fetch(\"http://your-api-endpoint/dynamicCubes\")\n  ).json();\n\n  dynamicCubes.forEach((dynamicCube) => {\n    const dimensions = transformDimensions(dynamicCube.dimensions);\n    const measures = transformMeasures(dynamicCube.measures);\n\n    cube(dynamicCube.name, {\n      data_source: dynamicCube.data_source,\n      sql: dynamicCube.sql,\n      dimensions,\n      measures,\n      pre_aggregations: {\n        main: {\n          // ...\n        },\n      },\n    });\n  });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst MySQLDriver = require(\"@cubejs-backend/mysql-driver\");\nconst PostgresDriver = require(\"@cubejs-backend/postgres-driver\");\n\nmodule.exports = {\n  driverFactory: ({ dataSource }) => {\n    if (dataSource === \"mysql\") {\n      return new MySQLDriver({ database: dataSource });\n    }\n\n    return new PostgresDriver({ database: dataSource });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Fixed Join Path in Cube.js\nDESCRIPTION: This YAML snippet shows the equivalent configuration for the fixed join path between users and companies. It demonstrates the same restructuring of join definitions as in the JavaScript version to create a valid path.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    joins:\n      - name: companies_to_users\n        sql: \"{CUBE}.id = {companies_to_users}.user_id\"\n        relationship: one_to_many\n\n    # ...\n\n  - name: companies_to_users\n\n    joins:\n      # - name: users\n      #   sql: \"{CUBE}.user_id = {users.id}\"\n      #   relationship: one_to_many\n \n      - name: companies\n        sql: \"{CUBE}.company_id = {companies.id}\"\n        relationship: one_to_many\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Drilldowns in Cube.js Data Model (JavaScript)\nDESCRIPTION: JavaScript example of defining drilldowns in a Cube.js data model for an e-commerce store. The example shows how to configure drill_members on a measure to enable data exploration across multiple dimensions including order status, product names, and user cities.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/drilldowns.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  joins: {\n    users: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.user_id = ${users.id}`,\n    },\n\n    products: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.product_id = ${products.id}`,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n      // Here we define all possible properties we might want\n      // to \"drill down\" on from our front-end\n      drill_members: [id, status, products.name, users.city],\n    },\n  },\n\n  dimensions: {\n    id: {\n      type: `number`,\n      sql: `id`,\n      primary_key: true,\n      public: true,\n    },\n\n    status: {\n      type: `string`,\n      sql: `status`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Keys in Cube (YAML and JavaScript)\nDESCRIPTION: This snippet shows how to set up refresh keys for cubes in Cube. It includes examples of time-based refresh (every 5 minutes) and SQL-based refresh using MAX(created_at) from the orders table.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    refresh_key:\n      every: 5 minute\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  refresh_key: {\n    every: `5 minute`,\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    refresh_key:\n      sql: SELECT MAX(created_at) FROM orders\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  refresh_key: {\n    sql: `SELECT MAX(created_at) FROM orders`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Emails Cube in Cube.js\nDESCRIPTION: Creates a cube definition for emails table with count measure and dimensions for campaign tracking.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`emails`, {\n  sql_table: `emails`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    campaign_name: {\n      sql: `campaign_name`,\n      type: `string`,\n    },\n\n    campaign_id: {\n      sql: `campaign_id`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Cube.js Server Metrics to Prometheus using TOML configuration\nDESCRIPTION: A TOML configuration example that demonstrates how to set up a prometheus_exporter sink to export CPU, memory, request counts and other metrics from a Cube.js server. This configuration enables monitoring of key Cube.js server performance metrics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring.mdx#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.prometheus]\ntype = \"prometheus_exporter\"\ninputs = [\n  \"metrics\"\n]\n\n[sinks.prometheus.metrics]\nlist = [\n  \"cpu\",\n  \"memory\",\n  \"requests-count\",\n  \"requests-errors-count\",\n  \"requests-success-count\",\n  \"requests-duration\"\n]\ninputs = [\n  \"cubejs-server\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Aggregations for Non-Additive Measures in Cube.js\nDESCRIPTION: This snippet demonstrates how to define pre-aggregations for non-additive measures in Cube.js. It includes multiple non-additive measures and a dimension in the pre-aggregation definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/non-additivity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n\n    pre_aggregations:\n      - name: main\n        measures:\n          - distinct_ages\n          - avg_age\n          - p90_age\n        dimensions:\n          - gender\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n  pre_aggregations: {\n    main: {\n      measures: [distinct_ages, avg_age, p90_age],\n      dimensions: [gender],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship Cubes in JavaScript\nDESCRIPTION: This snippet shows how to define cubes for a many-to-many relationship between 'posts' and 'topics' using an associative cube 'post_topics' in JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`posts`, {\n  sql_table: `posts`,\n\n  joins: {\n    post_topics: {\n      relationship: `one_to_many`,\n      sql: `${CUBE}.id = ${post_topics.post_id}`,\n    },\n  },\n});\n\ncube(`topics`, {\n  sql_table: `topics`,\n\n  dimensions: {\n    post_id: {\n      sql: `id`,\n      type: `string`,\n      primary_key: true,\n    },\n  },\n});\n\ncube(`post_topics`, {\n  sql_table: `post_topics`,\n\n  joins: {\n    topic: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.topic_id = ${topics.id}`,\n    },\n  },\n\n  dimensions: {\n    post_id: {\n      sql: `post_id`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Rolling Window Measures with Jinja Dictionary Loops\nDESCRIPTION: Demonstrates using Jinja to loop over a dictionary of metrics to generate multiple rolling window measures in a Cube data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{%- set metrics = {\n  \"mau\": 30,\n  \"wau\": 7,\n  \"day\": 1\n} %}\n\ncubes:\n  - name: orders\n    sql_table: public.orders\n\n    measures:\n      {%- for name, days in metrics | items %}\n      - name: {{ name | safe }}\n        type: count_distinct\n        sql: user_id\n        rolling_window:\n          trailing: {{ days }} day\n          offset: start\n      {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Cube Proxy Dimensions\nDESCRIPTION: Demonstrates how to create proxy dimensions that reference dimensions from other cubes using joins, showing implementation for orders and users cubes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT 1 AS id, 1 AS user_id UNION ALL\n      SELECT 2 AS id, 1 AS user_id UNION ALL\n      SELECT 3 AS id, 2 AS user_id\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: user_name\n        sql: \"{users.name}\"\n        type: string\n\n    measures:\n      - name: count\n        type: count\n\n    joins:\n      - name: users\n        sql: \"{users}.id = {orders}.user_id\"\n        relationship: one_to_many\n\n  - name: users\n    sql: >\n      SELECT 1 AS id, 'Alice' AS name UNION ALL\n      SELECT 2 AS id, 'Bob'   AS name\n\n    dimensions:\n      - name: name\n        sql: name\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT 1 AS id, 1 AS user_id UNION ALL\n    SELECT 2 AS id, 1 AS user_id UNION ALL\n    SELECT 3 AS id, 2 AS user_id\n  `,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true\n    },\n\n    user_name: {\n      sql: `${users.name}`,\n      type: `string`\n    }\n  },\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  },\n\n  joins: {\n    users: {\n      sql: `${users}.id = ${orders}.user_id`,\n      relationship: `one_to_many`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Time Granularities in Cube.js (JavaScript)\nDESCRIPTION: This JavaScript code defines a cube with custom time dimension granularities. It includes definitions for Sunday week, fiscal year, and fiscal quarter, along with proxy dimensions and a fiscal quarter label calculation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/custom-granularity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`custom_granularities`, {\n  sql: `\n    SELECT '2024-01-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-02-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-03-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-04-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-05-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-06-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-07-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-08-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-09-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-10-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-11-15'::TIMESTAMP AS timestamp UNION ALL\n    SELECT '2024-12-15'::TIMESTAMP AS timestamp\n  `,\n\n  dimensions: {\n    timestamp: {\n      sql: `timestamp`,\n      type: `time`,\n\n      granularities: {\n        sunday_week: {\n          interval: `1 week`,\n          offset: `-1 day`\n        },\n\n        fiscal_year: {\n          title: `Federal fiscal year in the United States`,\n          interval: `1 year`,\n          offset: `-3 months`\n        },\n\n        fiscal_quarter: {\n          title: `Federal fiscal quarter in the United States`,\n          interval: `1 quarter`,\n          offset: `-3 months`\n        }\n      }\n    },\n    \n    sunday_week: {\n      sql: `${timestamp.sunday_week}`,\n      type: `time`\n    },\n\n    fiscal_year: {\n      sql: `${timestamp.fiscal_year}`,\n      type: `time`\n    },\n      \n    fiscal_quarter: {\n      sql: `${timestamp.fiscal_quarter}`,\n      type: `time`\n    },\n\n    fiscal_quarter_label: {\n      sql: `\n          'FY' || (EXTRACT(YEAR FROM {timestamp.fiscal_year}) + 1) ||\n          '-Q' || EXTRACT(QUARTER FROM {timestamp.fiscal_quarter} + INTERVAL '3 MONTHS')\n      `,\n      type: `string`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Client-side Token Fetching Implementation\nDESCRIPTION: Example of fetching and caching JWT token on the client side for Cube API authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet apiTokenPromise;\n\nconst cubeApi = cube(\n  () => {\n    if (!apiTokenPromise) {\n      apiTokenPromise = fetch(`${API_URL}/auth/cubejs-token`)\n        .then((res) => res.json())\n        .then((r) => r.token);\n    }\n    return apiTokenPromise;\n  },\n  {\n    apiUrl: `${API_URL}/cubejs-api/v1`,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using RxJS Subject with CubeClient.watch() method\nDESCRIPTION: Example demonstrating how to use RxJS Subject with the CubeClient watch method to dynamically change queries based on user interactions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-ngx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate query;\n\nngOnInit() {\n  this.query = new Subject();\n  this.cube.watch(this.query).subscribe(\n    resultSet => {\n      console.log(resultSet.chartPivot()[0].x);\n      console.log(resultSet.seriesNames()[0]);\n    },\n    err => console.log('HTTP Error', err)\n  );\n}\n\nbutton1ClickHandler() {\n  this.query.next({ query_1 });\n}\n\nbutton2ClickHandler() {\n  this.query.next({ query_2 });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Context in Cube.js\nDESCRIPTION: Configuration setup for managing app IDs and extending security context with department-based access control. Defines contextToAppId and extendContext functions to handle company and department permissions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/controlling-access-to-cubes-and-views.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.company}`;\n  },\n  extendContext: ({ securityContext }) => {\n    return {\n      securityContext: {\n        ...securityContext,\n        isFinance: securityContext.department === \"finance\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Logs Export with Input Filters\nDESCRIPTION: Configuration example showing how to export logs from specific Cube Cloud components to Datadog with compression enabled.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring.mdx#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.datadog]\ntype = \"datadog_logs\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\ndefault_api_key = \"da8850ce554b4f03ac50537612e48fb1\"\ncompression = \"gzip\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Logs Sink in Vector TOML for Cube Cloud\nDESCRIPTION: This TOML configuration sets up a Datadog logs sink in Vector to export logs from different Cube Cloud components. It specifies the API key, site location, and compression settings to properly connect with Datadog's observability platform.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/datadog.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.datadog_logs]\ntype = \"datadog_logs\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\ndefault_api_key = \"$CUBE_CLOUD_MONITORING_DATADOG_API_KEY\"\nsite = \"datadoghq.eu\"\ncompression = \"gzip\"\nhealthcheck = false\n```\n\n----------------------------------------\n\nTITLE: Defining Cubes for Customers and Orders in JavaScript\nDESCRIPTION: This snippet shows how to define 'customers' and 'orders' cubes with their respective dimensions in JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`customers`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    company: {\n      sql: `company`,\n      type: `string`,\n    },\n  },\n});\n\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    customer_id: {\n      sql: `customer_id`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using runQuery Parameter in AI API Request\nDESCRIPTION: Example of using the runQuery parameter to have the AI API automatically execute the generated query and return results alongside the query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Where do we have the highest aov this year?\"\n    }\n  ],\n  \"runQuery\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Funnel in Cube.js\nDESCRIPTION: Demonstrates how to create a purchase funnel by requiring the Funnel package and defining the funnel with user ID, time, and steps for tracking product view and purchase events.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// First step is to require the Funnel package\nconst Funnels = require(`Funnels`);\n\ncube(`PurchaseFunnel`, {\n  extends: Funnels.eventFunnel({\n    userId: {\n      sql: `user_id`,\n    },\n    time: {\n      sql: `timestamp`,\n    },\n    steps: [\n      {\n        name: `view_product`,\n        eventsView: {\n          sql: `select * from events where event = 'view_product'`,\n        },\n      },\n      {\n        name: `purchase_product`,\n        eventsView: {\n          sql: `select * from events where event = 'purchase_product'`,\n        },\n        timeToConvert: \"1 day\",\n      },\n    ],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cubes in a View with Join Paths and Includes\nDESCRIPTION: Demonstrates how to include cubes in a view, specifying join paths, included members, and prefixing options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nview(`orders`, {\n  cubes: [\n    {\n      join_path: base_orders,\n      includes: [\n        `status`,\n        `created_date`,\n        `total_amount`,\n        `total_amount_shipped`,\n        `count`,\n        `average_order_value`\n      ]\n    },\n    {\n      join_path: base_orders.line_items.products,\n      includes: [\n        {\n          name: `name`,\n          alias: `product`\n        }\n      ]\n    },\n    {\n      join_path: base_orders.users,\n      prefix: true\n      includes: `*`,\n      excludes: [\n        `company`\n      ]\n    }\n  ]\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders\n\n    cubes:\n      - join_path: base_orders\n        includes:\n          - status\n          - created_date\n          - total_amount\n          - total_amount_shipped\n          - count\n          - average_order_value\n\n      - join_path: base_orders.line_items.products\n        includes:\n          - name: name\n            alias: product\n\n      - join_path: base_orders.users\n        prefix: true\n        includes: \"*\"\n        excludes:\n          - company\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Cube in YAML\nDESCRIPTION: This snippet shows how to define the same 'users' cube with joins, measures, and dimensions using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    joins:\n      - name: organizations\n        relationship: many_to_one\n        sql: \"{CUBE.organization_id} = {organizations.id}\"\n\n    measures:\n      - name: count\n        type: count\n        sql: id\n\n    dimensions:\n      - name: organization_id\n        sql: organization_id\n        type: number\n        primary_key: true\n\n      - name: created_at\n        sql: created_at\n        type: time\n\n      - name: country\n        sql: country\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Measures in Cube.js using YAML\nDESCRIPTION: YAML configuration for a users cube that defines measures for average age, median age, and 95th percentile age using SQL functions like PERCENTILE_CONT.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/percentiles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    measures:\n      - name: avg_age\n        type: avg\n        sql: age\n\n      - name: median_age\n        type: number\n        sql: PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY age)\n\n      - name: p95_age\n        type: number\n        sql: PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY age)\n```\n\n----------------------------------------\n\nTITLE: Customizing SQL Table Sources for Different Tenants\nDESCRIPTION: Shows how to configure tenant-specific data sources by dynamically setting the sql_table parameter. This approach ensures each tenant reads from their own database schema while using the same cube definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/multitenancy/custom-data-model-per-tenant.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% set tenant_id = COMPILE_CONTEXT['securityContext']['tenant_id'] %}\n\ncubes:\n  - name: cube_x\n    sql_table: {{ tenant_id | safe }}.table_x\n \n    measures:\n      - name: count\n        type: count\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tenant_id } = COMPILE_CONTEXT.securityContext\n\ncube(`cube_x`, {\n  sql_table: `${tenant_id}.table_x`,\n  \n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant Dynamic Data Model Implementation\nDESCRIPTION: Implementation of tenant-specific dynamic data models using COMPILE_CONTEXT to fetch and apply tenant-specific configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/javascript.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require(\"node-fetch\");\nimport {\n  convertStringPropToFunction,\n  transformDimensions,\n  transformMeasures,\n} from \"./utils\";\n\nasyncModule(async () => {\n  const {\n    securityContext: { tenantId },\n  } = COMPILE_CONTEXT;\n\n  const dynamicCubes = await (\n    await fetch(`http://your-api-endpoint/dynamicCubes`)\n  ).json();\n\n  const allowedDimensions = await (\n    await fetch(`http://your-api-endpoint/dynamicDimensions/${tenantId}`)\n  ).json();\n\n  const allowedMeasures = await (\n    await fetch(`http://your-api-endpoint/dynamicMeasures/${tenantId}`)\n  ).json();\n\n  dynamicCubes.forEach((dynamicCube) => {\n    const dimensions = transformDimensions(allowedDimensions);\n    const measures = transformMeasures(allowedMeasures);\n\n    cube(dynamicCube.name, {\n      sql: dynamicCube.sql,\n      title: `${dynamicCube.title}-${tenantId}`,\n      dimensions,\n      measures,\n      pre_aggregations: {\n        main: {\n          // ...\n        },\n      },\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Aggregating Index in Cube.js (JavaScript)\nDESCRIPTION: This snippet shows how to define an aggregating index named 'zip_code_index' in Cube.js using JavaScript. Aggregating indexes are used when only a subset of dimensions from a wide rollup pre-aggregation is queried.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"orders\", {\n  // ...\n\n  pre_aggregations: {\n    main: {\n      // ...\n\n      indexes: {\n        // ...\n\n        zip_code_index: {\n          columns: [zip_code],\n          type: `aggregate`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Model with COMPILE_CONTEXT\nDESCRIPTION: Example of using COMPILE_CONTEXT in a YAML data model definition with masking functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: ECOM.USERS\n    public: false\n\n    dimensions:\n      - name: last_name\n        sql: {{ masked('LAST_NAME', COMPILE_CONTEXT.securityContext) }}\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Filter Group Example Cube Definition\nDESCRIPTION: Demonstrates how to define a cube with filter parameters and filter groups in both YAML and JavaScript formats. Shows proper handling of SQL filters and logical operators.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: filter_group\n    sql: >\n      SELECT *\n        FROM (\n          SELECT 1 AS a, 3 AS b UNION ALL\n          SELECT 2 AS a, 2 AS b UNION ALL\n          SELECT 3 AS a, 1 AS b\n        ) AS data\n        WHERE\n          {FILTER_PARAMS.filter_group.a.filter(\"a\")} OR\n          {FILTER_PARAMS.filter_group.b.filter(\"b\")}\n\n    dimensions:\n      - name: a\n        sql: a\n        type: number\n\n      - name: b\n        sql: b\n        type: number\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`filter_group`, {\n  sql: `\n    SELECT *\n      FROM (\n        SELECT 1 AS a, 3 AS b UNION ALL\n        SELECT 2 AS a, 2 AS b UNION ALL\n        SELECT 3 AS a, 1 AS b\n      ) AS data\n      WHERE\n        ${FILTER_PARAMS.filter_group.a.filter('a')} OR\n        ${FILTER_PARAMS.filter_group.b.filter('b')}\n  `,\n\n  dimensions: {\n    a: {\n      sql: `a`,\n      type: `number`\n    },\n\n    b: {\n      sql: `b`,\n      type: `number`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Cube with Custom Sorting in YAML\nDESCRIPTION: This YAML code defines a cube named 'sort_nulls' with dimensions for value and a custom sorting dimension that replaces NULL with 0.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sort_nulls\n    sql: >\n      SELECT 1234 AS value UNION ALL\n      SELECT 5678 AS value UNION ALL\n      SELECT NULL AS value\n\n    dimensions:\n      - name: value\n        sql: value\n        type: number\n\n      - name: value_for_sorting\n        sql: \"COALESCE({value}, 0)\"\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Using {CUBE} Variable in JavaScript and YAML Data Models\nDESCRIPTION: Example of using the {CUBE} context variable to reference the current cube in both JavaScript and YAML data models, demonstrating joins and dimension definitions without repeating the cube name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    contacts: {\n      sql: `${CUBE}.contact_id = ${contacts.id}`,\n      relationship: `one_to_one`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `${CUBE}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `COALESCE(${CUBE}.name, ${contacts.name})`,\n      type: `string`,\n    },\n  },\n});\n\ncube(`contacts`, {\n  sql_table: `contacts`,\n\n  dimensions: {\n    id: {\n      sql: `${CUBE}.id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    name: {\n      sql: `${CUBE}.name`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    joins:\n      - name: contacts\n        sql: \"{CUBE}.contact_id = {contacts.id}\"\n        relationship: one_to_one\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"COALESCE({CUBE.name}, {contacts.name})\"\n        type: string\n\n  - name: contacts\n    sql_table: contacts\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: \"{CUBE}.name\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Partitioned Pre-aggregation in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a partitioned pre-aggregation in JavaScript. It partitions data by month and refreshes the last 3 months daily.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  preAggregations: {\n    category_and_date: {\n      measures: [count, revenue],\n      dimensions: [category],\n      time_dimension: created_at,\n      granularity: `day`,\n      partition_granularity: `month`,\n      refresh_key: {\n        every: `1 day`,\n        incremental: true,\n        update_window: `3 months`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Tags with AI Hints in YAML\nDESCRIPTION: Example of adding meta tags to a dimension to provide the AI API with contextual information about possible values, improving query generation accuracy.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: status\n        sql: status\n        type: string\n        meta:\n          ai:\n            values:\n              - shipped\n              - processing\n              - completed\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Environment Variables for Auth0\nDESCRIPTION: This snippet shows the necessary environment variables to be added to the .env file in a Cube project for Auth0 integration. It includes settings for JWK URL, JWT audience, issuer, algorithms, and claims namespace.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/auth0-guide.mdx#2025-04-17_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_JWK_URL=https://<AUTH0-SUBDOMAIN>.auth0.com/.well-known/jwks.json\nCUBEJS_JWT_AUDIENCE=<APPLICATION_URL>\nCUBEJS_JWT_ISSUER=https://<AUTH0-SUBDOMAIN>.auth0.com/\nCUBEJS_JWT_ALGS=RS256\nCUBEJS_JWT_CLAIMS_NAMESPACE=<CLAIMS_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Submission Count Dimension in Sessions Cube\nDESCRIPTION: This snippet shows how to create a dimension in the sessions cube that references the form submission count from the events cube using a sub-query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  // ...,\n\n  // Add this dimension to the `sessions` cube\n  dimensions: {\n    form_submitted_count: {\n      sql: `${events.form_submitted_count}`,\n      type: `number`,\n      sub_query: true,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sessions\n    # ...\n\n    # Add this dimension to the `sessions` cube\n    dimensions:\n      - name: form_submitted_count\n        sql: \"{events.form_submitted_count}\"\n        type: number\n        sub_query: true\n```\n\n----------------------------------------\n\nTITLE: Adding Measures to Events Cube in Cube.js (YAML)\nDESCRIPTION: This YAML version adds measures to the 'events' cube to calculate the total number of events and the number of page views. It uses filters to distinguish between different event types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    # ...\n\n    measures:\n      - name: count\n        sql: event_id\n        type: count\n\n      - name: page_views_count\n        sql: event_id\n        type: count\n        filters: [{ sql: \"{CUBE}.event = 'pageview'\" }]\n```\n\n----------------------------------------\n\nTITLE: Initializing Cube API in React\nDESCRIPTION: This code initializes the Cube API client in a React application. It requires a JWT token for authentication and the API URL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-react-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\n\nconst cubeApi = cube(\"your-token\", {\n  apiUrl:\n    \"https://<delpoyment-id>.<region>.cubecloudapp.dev/dev-mode/<dev-branch-name>/cubejs-api/v1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Dynamic Data Model Properties\nDESCRIPTION: Helper functions to convert static string properties to dynamic functions for dimensions and measures in Cube.js data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/javascript.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const convertStringPropToFunction = (propNames, dimensionDefinition) => {\n  let newResult = { ...dimensionDefinition };\n  propNames.forEach((propName) => {\n    const propValue = newResult[propName];\n\n    if (!propValue) {\n      return;\n    }\n\n    newResult[propName] = () => propValue;\n  });\n  return newResult;\n};\n\nexport const transformDimensions = (dimensions) => {\n  return Object.keys(dimensions).reduce((result, dimensionName) => {\n    const dimensionDefinition = dimensions[dimensionName];\n    return {\n      ...result,\n      [dimensionName]: convertStringPropToFunction(\n        [\"sql\"],\n        dimensionDefinition\n      ),\n    };\n  }, {});\n};\n\nexport const transformMeasures = (measures) => {\n  return Object.keys(measures).reduce((result, dimensionName) => {\n    const dimensionDefinition = measures[dimensionName];\n    return {\n      ...result,\n      [dimensionName]: convertStringPropToFunction(\n        [\"sql\", \"drill_members\"],\n        dimensionDefinition\n      ),\n    };\n  }, {});\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Cube API in JavaScript\nDESCRIPTION: Shows how to initialize the Cube API using the @cubejs-client/core package. It requires an authentication token and the API URL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-react-app.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\n\nconst cubeApi = cube(\"your-token\", {\n  apiUrl:\n    \"https://<delpoyment-id>.<region>.cubecloudapp.dev/dev-mode/<dev-branch-name>/cubejs-api/v1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Partition Pre-aggregation with Basic RefreshKey in Cube.js\nDESCRIPTION: This snippet shows how to define a pre-aggregation with monthly partitioning by created_at dimension and a refresh key that checks for updates to the updated_at property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/refreshing-select-partitions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: orders\n        type: rollup\n        dimensions:\n          - number\n          - status\n          - created_at\n          - updated_at\n        time_dimension: created_at\n        granularity: day\n        partition_granularity: month # this is where we specify the partition\n        refreshKey:\n          sql: SELECT max(updated_at) FROM public.orders # check for updates of the updated_at property\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  pre_aggregations: {\n    orders: {\n      type: `rollup`,\n      dimensions: [number, status, created_at, updated_at],\n      time_dimension: created_at,\n      granularity: `day`,\n      partition_granularity: `month`, // this is where we specify the partition\n      refresh_key: {\n        sql: `SELECT max(updated_at) FROM public.orders`, // check for updates of the updated_at property\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Data Access Policies in YAML for Cube.js\nDESCRIPTION: This YAML snippet shows how to define data access policies for different roles in Cube.js. It includes examples of member-level and row-level security rules, as well as conditional access based on the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/data-access-policies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    access_policy:\n        # For all roles, restrict access entirely\n      - role: \"*\"\n        member_level:\n          includes: []\n\n        # For the `manager` role,\n        #   allow access to all members\n        #   but filter rows by the user's country\n      - role: manager\n        conditions:\n          - if: \"{ securityContext.is_EMEA_based }\"\n        member_level:\n          includes: \"*\"\n        row_level:\n          filters:\n            - member: country\n              operator: equals\n              values: [ \"{ securityContext.country }\" ]\n```\n\n----------------------------------------\n\nTITLE: Second Page Query in Cube.js\nDESCRIPTION: JSON query to fetch the second page of orders using offset and limit.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"orders.number\"],\n  \"order\": {\n    \"orders.number\": \"asc\"\n  },\n  \"limit\": 5,\n  \"offset\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic.co Hosted Connection\nDESCRIPTION: Environment variables setup for connecting to an Elastic.co hosted Elasticsearch instance. Includes API key authentication credentials.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/elasticsearch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=elasticsearch\nCUBEJS_DB_URL=https://my.elasticsearch.host:9200\nCUBEJS_DB_ELASTIC_APIKEY_ID=VuaCfGcBCdbkQm-e5aOx\nCUBEJS_DB_ELASTIC_APIKEY_KEY=ui2lp2axTNmsyakw9tvNnw\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Additive Measures in Cube.js\nDESCRIPTION: This snippet shows how to define non-additive measures such as distinct count, average, and percentile in a Cube.js data model. It demonstrates the use of different measure types and SQL functions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/non-additivity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    measures:\n      - name: distinct_ages\n        sql: age\n        type: count_distinct\n\n      - name: avg_age\n        sql: age\n        type: avg\n\n      - name: p90_age\n        sql: PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY age)\n        type: number\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  measures: {\n    distinct_ages: {\n      sql: `age`,\n      type: `count_distinct`,\n    },\n\n    avg_age: {\n      sql: `age`,\n      type: `avg`,\n    },\n\n    p90_age: {\n      sql: `PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY age)`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security in Cube Data Model\nDESCRIPTION: This snippet demonstrates how to use securityContext in a Cube data model to implement row-level security. It masks certain fields based on the user's team membership and defines dimensions and measures for the 'users' cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/security.mdx#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set trusted_teams = ['cx', 'exec' ] %}\n{% set is_trusted_team = COMPILE_CONTEXT.securityContext.team in trusted_teams %}\n\n{% macro masked(sql, is_visible) -%}\n{{ sql if is_visible else \"\\\"'--- masked ---'\\\"\" }}\n{%- endmacro %}\n\ncubes:\n  - name: users\n    sql_table: users\n    public: false\n\n    dimensions:\n\n      - name: first_name\n        sql: {{ masked('first_name', is_trusted_team) }}\n        type: string\n\n      - name: last_name\n        sql: {{ masked('last_name', is_trusted_team) }}\n        type: string\n\n      - name: state\n        sql: state\n        type: string\n\n      - name: city\n        sql: city\n        type: string\n\n      - name: created_at\n        sql: created_at\n        type: time\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Authentication Check in JavaScript\nDESCRIPTION: This JavaScript code shows how to implement the checkSqlAuth function in Cube.js to verify user credentials. It provides a template for authenticating requests and adding user attributes to the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/sql-api-ldap.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  checkSqlAuth: async (req, user_name, password) => {\n    // Verify user_name and password\n    let authenticated = /* ... */;\n\n    if (authenticated) {\n      return {\n        password,\n        securityContext: {\n          // You can user-related attributes to the security context\n        }\n      }\n    }\n\n    throw new Error('Incorrect user name or password');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Member-Level Access for Different Roles in Cube.js\nDESCRIPTION: This example demonstrates how to configure member-level access for different roles, including allowing all members, excluding specific members, and allowing only specific members.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/data-access-policies.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n    \n    access_policy:\n      - role: \"*\"\n        member_level:\n          # Includes nothing, i.e., excludes all members\n          includes: []\n      \n      - role: manager\n        member_level:\n          # Includes all members except for `count`\n          excludes:\n            - count\n      \n      - role: observer\n        member_level:\n          # Includes all members except for `count` and `count_7d`\n          excludes:\n            - count\n            - count_7d\n      \n      - role: guest\n        # Includes only `count_30d`, excludes all other members\n        member_level:\n          includes:\n            - count_30d\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      role: `*`,\n      // Includes nothing, i.e., excludes all members\n      member_level: {\n        includes: []\n      }\n    },\n    {\n      role: `manager`,\n      // Includes all members except for `count`\n      member_level: {\n        excludes: [\n          `count`\n        ]\n      }\n    },\n    {\n      role: `observer`,\n      // Includes all members except for `count` and `count_7d`\n      member_level: {\n        excludes: [\n          `count`,\n          `count_7d`\n        ]\n      }\n    },\n    {\n      role: `guest`,\n      // Includes only `count_30d`, excludes all other members\n      member_level: {\n        includes: [\n          `count_30d`\n        ]\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Log Export in Vector for Grafana Cloud\nDESCRIPTION: TOML configuration for setting up Loki sink in Vector to export Cube Cloud logs to Grafana Cloud. Includes input sources, authentication, encoding settings, and log level configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/grafana-cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.loki]\ntype = \"loki\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\nendpoint = \"https://logs-prod-012.grafana.net\"\n\n[sinks.loki.auth]\nstrategy = \"basic\"\nuser = \"$CUBE_CLOUD_MONITORING_GRAFANA_CLOUD_USER\"\npassword = \"$CUBE_CLOUD_MONITORING_GRAFANA_CLOUD_PASSWORD\"\n\n[sinks.loki.encoding]\ncodec = \"json\"\n\n[sinks.loki.cubestore]\nlevels = [\n  \"trace\",\n  \"info\",\n  \"debug\",\n  \"error\"\n]\n\n[sinks.loki.labels]\napp = \"cube-cloud\"\nenv = \"production\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Subquery Dimensions in Cube.js with YAML and JavaScript\nDESCRIPTION: Complete example showing how to define subquery dimensions between two cubes ('users' and 'orders') using both YAML and JavaScript syntax. The example demonstrates how to bring a count measure from the orders cube into the users cube as a dimension and then use it in an aggregate measure.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: >\n      SELECT 1 AS id, 1 AS user_id UNION ALL\n      SELECT 2 AS id, 1 AS user_id UNION ALL\n      SELECT 3 AS id, 2 AS user_id\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n    measures:\n      - name: count\n        type: count\n\n    joins:\n      - name: users\n        sql: \"{users}.id = {orders}.user_id\"\n        relationship: one_to_many\n\n  - name: users\n    sql: >\n      SELECT 1 AS id, 'Alice' AS name UNION ALL\n      SELECT 2 AS id, 'Bob'   AS name\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: name\n        sql: name\n        type: string\n\n      - name: order_count\n        sql: \"{orders.count}\"\n        type: number\n        sub_query: true\n\n    measures:\n      - name: avg_order_count\n        sql: \"{order_count}\"\n        type: avg\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT 1 AS id, 1 AS user_id UNION ALL\n    SELECT 2 AS id, 1 AS user_id UNION ALL\n    SELECT 3 AS id, 2 AS user_id\n  `,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true\n    }\n  },\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  },\n\n  joins: {\n    users: {\n      sql: `${users}.id = ${orders}.user_id`,\n      relationship: `one_to_many`\n    }\n  }\n})\n\ncube(`users`, {\n  sql: `\n    SELECT 1 AS id, 'Alice' AS name UNION ALL\n    SELECT 2 AS id, 'Bob'   AS name\n  `,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true\n    },\n\n    name: {\n      sql: `name`,\n      type: `string`\n    },\n\n    order_count: {\n      sql: `${orders.count}`,\n      type: `number`,\n      sub_query: true\n    }\n  },\n\n  measures: {\n    avg_order_count: {\n      sql: `${order_count}`,\n      type: `avg`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0Provider in React Application\nDESCRIPTION: This TSX code snippet shows how to configure the Auth0Provider component in a React application. It sets up the necessary props including domain, client_id, redirect_uri, and audience.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/auth0-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Auth0Provider\n  domain={process.env.AUTH_DOMAIN}\n  client_id={process.env.AUTH_CLIENT_ID}\n  redirect_uri={window.location.origin}\n  onRedirectCallback={() => {}}\n  audience=\"cube\"\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Cube.js project with PostgreSQL database\nDESCRIPTION: Command to create a new Cube.js project named 'hello-world' with PostgreSQL as the database. The -d flag specifies the database type to use for the project.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cli/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncubejs create hello-world -d postgres\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Cube.js API Scopes\nDESCRIPTION: Example showing how to configure API scopes to enable Orchestration API access by setting the CUBEJS_DEFAULT_API_SCOPES environment variable.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCUBEJS_DEFAULT_API_SCOPES=meta,data,graphql,jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store with AWS S3 Storage\nDESCRIPTION: This YAML snippet shows how to configure Cube Store to use AWS S3 for storage. It sets up a router and a worker service with environment variables for S3 bucket access and cluster communication.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cubestore_router:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_router:9999\n      - CUBESTORE_META_PORT=9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001\n      - CUBESTORE_S3_BUCKET=<BUCKET_NAME_IN_S3>\n      - CUBESTORE_S3_REGION=<BUCKET_REGION_IN_S3>\n      - CUBESTORE_AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\n      - CUBESTORE_AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\n  cubestore_worker_1:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_worker_1:9001\n      - CUBESTORE_WORKER_PORT=9001\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001\n      - CUBESTORE_S3_BUCKET=<BUCKET_NAME_IN_S3>\n      - CUBESTORE_S3_REGION=<BUCKET_REGION_IN_S3>\n      - CUBESTORE_AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\n      - CUBESTORE_AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\n    depends_on:\n      - cubestore_router\n```\n\n----------------------------------------\n\nTITLE: SELECT Query Example with Filtering and Grouping\nDESCRIPTION: Example SELECT query showing practical usage with joins, filtering, grouping, and pagination. Demonstrates combining orders and users tables with city-based filtering.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), orders.status, users.city\nFROM orders\n  CROSS JOIN users\nWHERE city IN ('San Francisco', 'Los Angeles')\nGROUP BY orders.status, users.city\nHAVING status = 'shipped'\nLIMIT 1 OFFSET 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Power BI Connection Documentation\nDESCRIPTION: Markdown documentation detailing the setup and configuration options for connecting Microsoft Power BI to Cube, including both Cloud and Core deployment options, with emphasis on DAX API as the preferred method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/powerbi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Microsoft Power BI\n\n[Microsoft Power BI][link-powerbi] is a popular business intelligence tool.\n\nCube Cloud works with both [Power BI Desktop and Power BI service][link-powerbi-desktop-vs-service].\nIf you're using Power BI service, you need to set up an [on-premises data gateway][link-powerbi-gateway].\n```\n\n----------------------------------------\n\nTITLE: Applying Conditions to Access Policies in Cube.js\nDESCRIPTION: This example shows how to use the conditions parameter to apply a policy only when certain conditions are met. It demonstrates checking a security context attribute for EMEA-based users.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/data-access-policies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    access_policy:\n      - role: \"*\"\n        conditions:\n          - if: \"{ securityContext.is_EMEA_based }\"\n        member_level:\n          includes: \"*\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      role: `*`,\n      conditions: [\n        { if: securityContext.is_EMEA_based }\n      ],\n      member_level: {\n        includes: `*`\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolling Windows for Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to configure rolling windows for measure calculations in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: rolling_count_month\n        sql: id\n        type: count\n        rolling_window:\n          trailing: 1 month\n```\n\n----------------------------------------\n\nTITLE: Defining Product Cube for Mango Tenant (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the 'products' cube for the 'mango' tenant, selecting products with even id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql: `SELECT *\n    FROM public.Products\n    WHERE MOD (id, 2) = 0`,\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Title and Description in YAML\nDESCRIPTION: This example demonstrates how to set a custom title and description for a cube using the title and description parameters in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n    title: Product Orders\n    description: All orders-related information\n```\n\n----------------------------------------\n\nTITLE: Unifying Events and Page Views in Cube.js (YAML)\nDESCRIPTION: This YAML version of the code creates a cube called 'events' that combines page view data and event data from Segment into a single table. It assigns unique event IDs and unifies the structure of both data types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    sql: >\n      SELECT\n        t.id || '-e' as event_id\n        , t.anonymous_id as anonymous_id\n        , t.timestamp\n        , t.event\n        , t.context_page_path as page_path\n        , NULL as referrer\n      from javascript.tracks as t\n\n      UNION ALL\n\n      SELECT\n        p.id as event_id\n        , p.anonymous_id\n        , p.timestamp\n        , 'pageview' as event\n        , p.context_page_path as page_path\n        , p.referrer as referrer\n      FROM javascript.pages as p\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Pre-aggregations in YAML Data Model\nDESCRIPTION: This YAML snippet demonstrates how to use Jinja templating with the env_var function to conditionally enable pre-aggregations based on an environment variable.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/disabling-pre-aggregations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n \n    measures:\n      - name: count\n        type: count\n    \n    {% if env_var('PRE_AGGREGATIONS_ENABLED', True) %}\n    pre_aggregations:\n      - name: count\n        measures:\n          - count\n    {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Cube with Custom Sorting in JavaScript\nDESCRIPTION: This JavaScript code defines the same 'sort_nulls' cube with custom sorting, equivalent to the YAML version.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`sort_nulls`, {\n  sql: `\n    SELECT 1234 AS value UNION ALL\n    SELECT 5678 AS value UNION ALL\n    SELECT NULL AS value\n  `,\n\n  dimensions: {\n    value: {\n      sql: `value`,\n      type: `number`\n    },\n\n    value_for_sorting: {\n      sql: `COALESCE(${value}, 0)`,\n      type: `number`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Cube in Streamlit\nDESCRIPTION: Example showing how to execute SQL queries against Cube and visualize results using Streamlit's dataframe display. Demonstrates grouping and aggregation functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/streamlit.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ...\n\nwith streamlit.echo():\n  query = \"SELECT sum(count) AS orders_count, status FROM orders GROUP BY status;\"\ndf = pandas.read_sql_query(query, connection)\nstreamlit.dataframe(df)\n```\n\n----------------------------------------\n\nTITLE: Querying Data with useCubeQuery Hook in React\nDESCRIPTION: This code shows how to use the useCubeQuery hook to fetch data from Cube in a React component. It includes a sample query for order counts by month.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-react-app.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCubeQuery } from '@cubejs-client/react';\n...\nconst { resultSet, isLoading, error, progress } = useCubeQuery({\n  \"measures\": [\"orders_view.completed_count\"],\n\t\"timeDimensions\": [\n    {\n      \"dimension\": \"orders_view.created_at\",\n      \"granularity\": \"month\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters and Ranges in GraphQL Query\nDESCRIPTION: GraphQL query with filters, limits, offsets, and ordering applied to the 'orders' cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  cube(limit: 100, offset: 50, timezone: \"America/Los_Angeles\") {\n    orders(\n      orderBy: { created_at: asc, count: desc }\n      where: { status: { equals: \"completed\" } }\n    ) {\n      count\n      status\n      created_at\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Measures and Dimensions to Sessions Cube in Cube.js (YAML)\nDESCRIPTION: This YAML version adds measures and dimensions to the 'sessions' cube, allowing for counting sessions and filtering by various attributes such as start time and anonymous ID.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sessions\n    # ...\n\n    measures:\n      - name: count\n        sql: session_id\n        type: count\n\n    dimensions:\n      - name: anonymous_id\n        sql: anonymous_id\n        type: number\n        primary_key: true\n\n      - name: session_id\n        sql: session_id\n        type: number\n        primary_key: true\n\n      - name: start_at\n        sql: session_start_at\n        type: time\n\n      - name: next_start_at\n        sql: next_session_start_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Combining SQL and Interval Refresh Keys in JavaScript\nDESCRIPTION: This snippet demonstrates how to combine both SQL and interval-based refresh keys for a pre-aggregation in JavaScript. It refreshes every 12 hours if the SQL query returns new results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    amount_by_created: {\n      measures: [amount],\n      time_dimension: created_at,\n      granularity: `month`,\n      refresh_key: {\n        every: `12 hour`,\n        sql: `SELECT MAX(created_at) FROM orders`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Snapshots Cube in JavaScript\nDESCRIPTION: JavaScript definition of a status_snapshots cube that extends the statuses cube. It uses SQL generation to create a date range and join with statuses to capture point-in-time status values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/snapshots.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`status_snapshots`, {\n  extends: statuses,\n\n  sql: `\n    -- Create a range from the earlist date to the latest date\n    WITH range AS (\n      SELECT date\n      FROM GENERATE_SERIES(\n        (SELECT MIN(changed_at) FROM ${statuses.sql()} AS statuses),\n        (SELECT MAX(changed_at) FROM ${statuses.sql()} AS statuses),\n        INTERVAL '1 DAY'\n      ) AS date\n    )\n\n    -- Calculate snapshots for every date in the range\n    SELECT range.date, statuses.*\n    FROM range\n    LEFT JOIN ${statuses.sql()} AS statuses\n      ON range.date >= statuses.changed_at\n      AND statuses.changed_at = (\n        SELECT MAX(changed_at)\n        FROM ${statuses.sql()} AS sub_statuses\n        WHERE sub_statuses.order_id = statuses.order_id\n      )\n  `,\n\n  dimensions: {\n    date: {\n      sql: `date`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Count Measure with Drill Members in Cube.js\nDESCRIPTION: This snippet shows how to define a count measure with drill members in Cube.js. It creates a measure to count the number of users and specifies drill-down fields.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    number_of_users: {\n      type: `count`,\n      // optional\n      drill_members: [id, name, email, company],\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: number_of_users\n        type: count\n        drill_members:\n          - id\n          - name\n          - email\n          - company\n```\n\n----------------------------------------\n\nTITLE: Exporting Constants in Cube Data Model (JavaScript)\nDESCRIPTION: This snippet shows how to export constants from a separate file and import them into a cube definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/schema-execution-environment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const TEST_USER_IDS = [1, 2, 3, 4, 5];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (usersTable) => `select * from ${usersTable}`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// in users.js\nimport { TEST_USER_IDS } from \"./constants\";\nimport usersSql from \"./usersSql\";\n\ncube(`users`, {\n  sql: usersSql(`users`),\n  measures: {\n    /* ... */\n  },\n\n  dimensions: {\n    /* ... */\n  },\n\n  segments: {\n    excludeTestUsers: {\n      sql: `${CUBE}.id NOT IN (${TEST_USER_IDS.join(\", \")})`\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using sql_alias Parameter in YAML\nDESCRIPTION: This example shows how to use the sql_alias parameter in YAML format to provide a shorter alias for a cube with a long name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts_about_literally_everything_in_the_world\n    sql_table: orders\n    sql_alias: order_facts\n```\n\n----------------------------------------\n\nTITLE: Initializing CubeApi with Async Token in JavaScript\nDESCRIPTION: Creates a CubeApi instance using an async function that resolves to an API token. This approach is useful for dynamic token generation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from '@cubejs-client/core';\nconst cubeApi = cube(\n  async () => await Auth.getJwtToken(),\n  { apiUrl: 'http://localhost:4000/cubejs-api/v1' }\n);\n```\n\n----------------------------------------\n\nTITLE: Using sql_alias Parameter in JavaScript\nDESCRIPTION: This example demonstrates how to use the sql_alias parameter to provide a shorter alias for a cube with a long name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts_about_literally_everything_in_the_world`, {\n  sql_table: `orders`,\n  sql_alias: `order_facts`,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Tokens for Cube\nDESCRIPTION: The 'token' command generates a JWT Cube token. It uses either the CUBEJS_API_SECRET environment variable or a provided secret. The command allows setting token expiry and payload.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli/reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli token -e TOKEN-EXPIRY -s SECRET -p FOO=BAR\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli token -e \"1 day\" -p appId=1 -p userId=2\n```\n\n----------------------------------------\n\nTITLE: Creating POST Request with JSON Query in Appsmith\nDESCRIPTION: This snippet demonstrates how to create a POST request in Appsmith to query data from Cube. It includes setting up the request body with a JSON query and specifying the correct endpoint.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/appsmith.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"measures\": [\"Orders.count\"],\n    \"timeDimensions\": [{\n      \"dimension\": \"Orders.createdAt\",\n      \"dateRange\": \"This year\",\n      \"granularity\": \"month\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Authentication in Cube.js SQL API\nDESCRIPTION: This function is used for authentication in the Cube.js SQL API. It verifies username and password, and can be customized to implement specific authentication logic for SQL connections.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('check_sql_auth')\ndef check_sql_auth(req: dict, user_name: str, password: str) -> dict:\n  if user_name == 'my_user':\n    if password and password != 'my_password':\n      raise Exception('Access denied')\n    return {\n      'password': password,\n      'securityContext': {\n        'some': 'data'\n      }\n    }\n\n  raise Exception('Access denied')\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  checkSqlAuth: (req, user_name, password) => {\n    if (user_name === 'my_user') {\n      if (password && password !== 'my_password') {\n        throw new Error('Access denied');\n      }\n      return {\n        password,\n        securityContext: {\n          some: 'data'\n        },\n      };\n    }\n\n    throw new Error('Access denied');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Trino Environment Variables in .env File\nDESCRIPTION: This snippet shows the required environment variables to set up a connection to a Trino database in Cube. It includes the database type, host, user credentials, catalog, and schema.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/trino.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=trino\nCUBEJS_DB_HOST=my.trino.host\nCUBEJS_DB_USER=trino_user\nCUBEJS_DB_PASS=**********\nCUBEJS_DB_PRESTO_CATALOG=my_trino_catalog\nCUBEJS_DB_SCHEMA=my_trino_schema\n```\n\n----------------------------------------\n\nTITLE: Optimized Pre-aggregation with FILTER_PARAMS in Cube.js\nDESCRIPTION: This snippet demonstrates how to optimize partition refreshing by using FILTER_PARAMS to filter data by created_at before applying the refresh key, ensuring only relevant partitions get updated.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/refreshing-select-partitions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: orders\n        type: rollup\n        dimensions:\n          - number\n          - status\n          - created_at\n          - updated_at\n        time_dimension: created_at\n        granularity: day\n        partition_granularity: month # this is where we specify the partition\n        refreshKey:\n          sql: >\n            SELECT max(updated_at) FROM public.orders WHERE\n            {FILTER_PARAMS.orders.created_at.filter('created_at')}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  pre_aggregations: {\n    orders: {\n      type: `rollup`,\n      dimensions: [number, status, created_at, updated_at],\n      time_dimension: created_at,\n      granularity: `day`,\n      partition_granularity: `month`,\n      refresh_key: {\n        sql: `\n          SELECT max(updated_at)\n          FROM public.orders\n          WHERE ${FILTER_PARAMS.orders.created_at.filter(\"created_at\")}`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Data Model Definition\nDESCRIPTION: JavaScript version of the data model configuration defining cubes and views with access control. Includes order and user cubes plus a total revenue view with finance department access restriction.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/controlling-access-to-cubes-and-views.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// orders.js\ncube(`orders`, {\n  sql_table: `orders`,\n  public: false,\n\n  // ...\n});\n\n// users.js\ncube(`users`, {\n  sql_table: `users`,\n  public: false,\n\n  // ...\n});\n\n// total_revenue_per_customer.js\nview(`total_revenue_per_customer`, {\n  description: `Total revenue per customer`,\n  public: COMPILE_CONTEXT.securityContext.isFinance,\n\n  cubes: [\n    {\n      join_path: orders,\n      includes: [\n        `total_revenue`\n      ]\n    },\n    {\n      join_path: orders.users,\n      includes: [\n        `company`\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Measures for Order Status Analysis in Cube.js\nDESCRIPTION: This code snippet defines a Cube.js data model that dynamically creates measures for calculating total orders and percentage distribution by status. It uses helper functions to generate measures for each status, allowing for easy addition of new statuses.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/using-dynamic-measures.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst statuses = [\"processing\", \"shipped\", \"completed\"];\n\nconst createTotalByStatusMeasure = (status) => ({\n  [`total_${status}_orders`]: {\n    title: `Total ${status} orders`,\n    type: `count`,\n    filters: [\n      {\n        sql: (CUBE) => `${CUBE}.\"status\" = '${status}'`,\n      },\n    ],\n  },\n});\n\nconst createPercentageMeasure = (status) => ({\n  [`percentage_of_${status}`]: {\n    title: `Percentage of ${status} orders`,\n    type: `number`,\n    format: `percent`,\n    sql: (CUBE) =>\n      `ROUND(${CUBE[`total_${status}_orders`]}::NUMERIC / ${\n        CUBE.total_orders\n      }::NUMERIC * 100.0, 2)`,\n  },\n});\n\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: Object.assign(\n    {\n      total_orders: {\n        type: `count`,\n        title: `Total orders`,\n      },\n    },\n    statuses.reduce(\n      (all, status) => ({\n        ...all,\n        ...createTotalByStatusMeasure(status),\n        ...createPercentageMeasure(status),\n      }),\n      {}\n    )\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Cloud Drivers in Shell\nDESCRIPTION: Commands to run integration tests for Athena, BigQuery, and Firebolt drivers. These tests use the environment variables set in the previous step.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd packages/cubejs-athena-driver\n$ env $(cat ~/.env.athena | xargs) yarn test\n\n$ cd packages/cubejs-bigquery-driver\n$ env $(cat ~/.env.bigquery | xargs) yarn test\n\n$ cd packages/cubejs-firebolt-driver\n$ env $(cat ~/.env.firebolt | xargs) yarn test\n```\n\n----------------------------------------\n\nTITLE: Extending Security Context in Cube.js\nDESCRIPTION: This function extends the security context with additional data. It is called on each request and appends data to the request context, which is used in other functions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n \n@config('extend_context')\ndef extend_context(req: dict) -> dict:\n  req.setdefault('securityContext', {}).update({'active_organization': 123})\n  # req.setdefault('securityContext', {}).update({'active_organization': req['headers']['active_organization']})\n  return req\n \n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> dict:\n  return f\"CUBE_APP_{ctx['securityContext']['active_organization']}\"\n \n \n \n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extendContext: (req) => {\n    return {\n      securityContext: {\n        ...req.securityContext,\n        active_organization: 123\n        // active_organization: req.headers.active_organization\n      }\n    }\n  },\n\n  contextToAppId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.active_organization}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry in Python\nDESCRIPTION: This Python snippet shows how to enable telemetry in Cube.js by setting the `telemetry` property in the `cube` configuration to `True`. This setting is used to collect anonymous usage statistics in development mode. The required dependency is the `cube` package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nfrom cube import config\n\nconfig.telemetry = True\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Docker Image for Cube with Embedded Schema\nDESCRIPTION: Dockerfile to create a custom Cube.js Docker image with schema files embedded directly in the image. This approach eliminates the need for a ConfigMap by baking schema files into the image.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM cubejs/cube\nWORKDIR /cube/conf/schema\nCOPY ./schema /cube/conf/schema\nRUN npm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections in Cube.js\nDESCRIPTION: This snippet shows how to define database connections for multiple data sources using the driverFactory option in the Cube.js configuration file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  driverFactory: ({ dataSource }) => {\n    if (dataSource === \"suppliers\") {\n      return {\n        type: \"postgres\",\n        database: \"recipes\",\n        host: \"demo-db-recipes.cube.dev\",\n        user: \"cube\",\n        password: \"12345\",\n        port: \"5432\",\n      };\n    }\n\n    if (dataSource === \"products\") {\n      return {\n        type: \"postgres\",\n        database: \"ecom\",\n        host: \"demo-db-recipes.cube.dev\",\n        user: \"cube\",\n        password: \"12345\",\n        port: \"5432\",\n      };\n    }\n\n    throw new Error(\"dataSource is undefined\");\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Cube Definition from dbt Model\nDESCRIPTION: Shows basic cube definition structure for a dbt model table in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n  - sql_table: my_dbt_schema.my_dbt_orders_model\n\n    dimensions: []\n    measures: []\n    joins: []\n    pre_aggregations: []\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `my_dbt_schema.my_dbt_orders_model`,\n\n  dimensions: {},\n  measures: {},\n  joins: {},\n  pre_aggregations: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Refresh Worker in Kubernetes\nDESCRIPTION: YAML configuration snippet showing how to configure a Cube Refresh Worker in Kubernetes by setting the CUBEJS_REFRESH_WORKER environment variable to true. This worker handles background refresh tasks for pre-aggregations.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  containers:\n    - env:\n      - name: CUBEJS_REFRESH_WORKER\n        value: \"true\"\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Cube with Custom Calendar Joins\nDESCRIPTION: Defines the base orders cube with joins to the calendar cubes and creates proxy dimensions for retail weeks and months. Includes measures for order counts and completed orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/custom-calendar.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: base_orders\n    sql: SELECT * FROM 's3://cube-tutorial/orders.csv'\n\n    joins:\n      # BEGIN — Joins to calendar tables\n      - name: calendar_454__base_orders__created_at\n        sql: \"{CUBE.created_at} BETWEEN {calendar_454__base_orders__created_at.week_start_date} AND {calendar_454__base_orders__created_at.week_end_date}\"\n        relationship: many_to_one\n\n      - name: calendar_454__base_orders__completed_at\n        sql: \"{CUBE.completed_at} BETWEEN {calendar_454__base_orders__completed_at.week_start_date} AND {calendar_454__base_orders__completed_at.week_end_date}\"\n        relationship: many_to_one\n      # END — Joins to calendar tables\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: status\n        sql: status\n        type: string\n\n      # BEGIN — Regular time dimension + ones derived from calendar table\n      - name: created_at\n        sql: \"{CUBE}.created_at::TIMESTAMP\"\n        type: time\n\n      - name: created_at_retail_month\n        sql: \"{calendar_454__base_orders__created_at.retail_month_date}\"\n        type: time\n\n      - name: created_at_retail_week\n        sql: \"{calendar_454__base_orders__created_at.week_number}\"\n        type: number\n\n      - name: completed_at\n        sql: \"{CUBE}.completed_at::TIMESTAMP\"\n        type: time\n\n      - name: completed_at_retail_month\n        sql: \"{calendar_454__base_orders__completed_at.retail_month_date}\"\n        type: time\n\n      - name: completed_at_retail_week\n        sql: \"{calendar_454__base_orders__completed_at.week_number}\"\n        type: number\n      # END — Regular time dimension + ones derived from calendar table\n\n    measures:\n      - name: count\n        type: count\n\n      - name: completed_count\n        type: count\n        filters:\n          - sql: \"{CUBE}.status = 'completed'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Dimension\nDESCRIPTION: Shows how to define a boolean dimension for true/false values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    is_enabled: {\n      sql: `is_enabled`,\n      type: `boolean`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: is_enabled\n        sql: is_enabled\n        type: boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Original SQL and Rollup Pre-aggregations in JavaScript\nDESCRIPTION: JavaScript configuration example demonstrating the setup of an original_sql pre-aggregation 'base' and a rollup pre-aggregation 'main'. Shows how to configure dimensions, measures, and time-based granularity while utilizing the original_sql pre-aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/using-originalsql-and-rollups-effectively.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"orders\", {\n  sql: `<YOUR_EXPENSIVE_SQL_QUERY HERE>`,\n\n  pre_aggregations: {\n    base: {\n      type: `original_sql`,\n      external: false\n    },\n\n    main: {\n      dimensions: [id, name],\n      measures: [count],\n      time_dimension: created_at,\n      granularity: `day`,\n      use_original_sql_pre_aggregations: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Dimensions in Cube.js (YAML)\nDESCRIPTION: This snippet shows how to define dimensions for city and state in a Cube.js data model using YAML syntax. It creates a 'users' cube with 'city' and 'state' dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    dimensions:\n      - name: city\n        sql: city\n        type: string\n\n      - name: state\n        sql: state\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Complex Post-Processing Query Example\nDESCRIPTION: Advanced example of a post-processing query with derived dimensions, post-aggregated measures, and additional filtering.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  UPPER(SUBSTRING(state FROM 4)) AS state,\n  CHAR_LENGTH(city) AS city_name_length,\n  CASE WHEN status = 'completed' THEN 'done' ELSE 'pending' END AS status,\n  SUM(count) AS total_count\nFROM (\n  SELECT\n    users.state,\n    users.city,\n    orders.status,\n    MEASURE(orders.count) AS count\n  FROM orders\n  CROSS JOIN users\n  WHERE\n    users.state != 'us-wa'\n    AND orders.created_at BETWEEN '2020-01-01' AND '2021-01-01'\n  GROUP BY 1, 2, 3\n  LIMIT 10\n) AS regular_query\nGROUP BY 1, 2, 3\nHAVING city_name_length > 10;\n```\n\n----------------------------------------\n\nTITLE: Setting View Visibility with the Public Parameter\nDESCRIPTION: Demonstrates how to use the public parameter to control the visibility of a view, including dynamic visibility using COMPILE_CONTEXT.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders\n    public: false\n```\n\nLANGUAGE: javascript\nCODE:\n```\nview(`orders`, {\n  public: false,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nview(`arr`, {\n  description: `Annual Recurring Revenue`,\n  public: COMPILE_CONTEXT.security_context.is_finance,\n\n  cubes: [\n    {\n      join_path: revenue,\n      includes: [\n        `arr`,\n        `date`\n      ]\n    },\n    {\n      join_path: revenue.customers,\n      includes: `plan`\n    }\n  ]\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: arr\n    description: Annual Recurring Revenue\n    public: COMPILE_CONTEXT.security_context.is_finance\n\n    cubes:\n      - join_path: revenue\n        includes:\n          - arr\n          - date\n\n      - join_path: revenue.customers\n        includes:\n          - plan\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hierarchy Structure in Cube.js\nDESCRIPTION: Shows how to define a basic location hierarchy with name and levels parameters in both JavaScript and YAML formats. The hierarchy groups state and city dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/hierarchies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  // ...\n\n  hierarchies: {\n    location: {\n      title: `User Location`,\n      levels: [\n        state,\n        city\n      ]\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    # ...\n\n    hierarchies:\n      - name: location\n        title: User Location\n        levels:\n          - state\n          - city\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Policies for the Same Role with Different Conditions in Cube.js\nDESCRIPTION: This snippet illustrates how to define multiple policies for the same role with different conditions, providing varying levels of access based on user attributes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/data-access-policies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    access_policy:\n      - role: manager\n        conditions:\n          - if: \"{ securityContext.is_full_time_employee }\"\n        member_level:\n          includes:\n            - status\n            - count\n\n      - role: manager\n        conditions:\n          - if: \"{ securityContext.is_full_time_employee }\"\n          - if: \"{ securityContext.has_completed_privacy_training }\"\n        member_level:\n          includes: \"*\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  access_policy: [\n    {\n      role: `manager`,\n      conditions: [\n        { if: securityContext.is_full_time_employee }\n      ],\n      member_level: {\n        includes: [\n          `status`,\n          `count`\n        ]\n      }\n    },\n    {\n      role: `manager`,\n      conditions: [\n        { if: securityContext.is_full_time_employee },\n        { if: securityContext.has_completed_privacy_training }\n      ],\n      member_level: {\n        includes: `*`\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Scopes in Cube.js\nDESCRIPTION: This function selects accessible API scopes based on the security context. It is called on each request and determines which REST API endpoints are allowed.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_api_scopes')\ndef context_to_api_scopes(context: dict, default_scopes: list[str]) -> list[str]:\n  return ['meta', 'data', 'graphql', 'sql']\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToApiScopes: (securityContext, defaultScopes) => {\n    return ['meta', 'data', 'graphql', 'sql'];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Dbt Metadata from URL in Python\nDESCRIPTION: Shows how to use the Dbt.from_url static method to load dbt metadata from a manifest.json file via URL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Export Bucket for Redshift\nDESCRIPTION: This code snippet demonstrates how to configure an AWS S3 export bucket for improved pre-aggregation performance with large datasets in Redshift. It includes environment variables for the bucket type, name, AWS credentials, and region.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/aws-redshift.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=s3\nCUBEJS_DB_EXPORT_BUCKET=my.bucket.on.s3\nCUBEJS_DB_EXPORT_BUCKET_AWS_KEY=<AWS_KEY>\nCUBEJS_DB_EXPORT_BUCKET_AWS_SECRET=<AWS_SECRET>\nCUBEJS_DB_EXPORT_BUCKET_AWS_REGION=<AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Generating a Primary Key for post_topics Cube in JavaScript\nDESCRIPTION: This snippet shows how to generate a primary key for the 'post_topics' cube when a table doesn't define one, using SQL concatenation in JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`post_topics`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `CONCAT(${CUBE}.post_id, ${CUBE}.topic_id)`,\n      type: `number`,\n      primary_key: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: User Identification Cube Configuration\nDESCRIPTION: Creates an identifies cube to map anonymous sessions to identified users using Segment tracking data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`identifies`, {\n  sql: `SELECT distinct user_id, anonymous_id FROM javascript.identifies`,\n\n  dimensions: {\n    id: {\n      sql: `user_id || '-' || anonymous_id`,\n      type: `string`,\n      primary_key: true,\n    },\n    anonymous_id: {\n      sql: `anonymous_id`,\n      type: `number`,\n    },\n    user_id: {\n      sql: `user_id`,\n      type: `number`,\n      format: `id`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Schema Version Configuration with Dynamic Updates\nDESCRIPTION: Configuration for dynamic schema versioning using async functions to fetch version information based on security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/javascript.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  schemaVersion: async ({ securityContext }) => {\n    const schemaVersions = await (\n      await fetch(\"http://your-api-endpoint/schema_version\")\n    ).json();\n\n    return schemaVersions[securityContext.tenantId];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deriving User Roles from Security Context in Python for Cube.js\nDESCRIPTION: This snippet shows how to use the 'context_to_roles' configuration option in Python to derive user roles from the security context. It returns a list of roles, defaulting to ['default'] if no roles are specified.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/data-access-policies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_roles')\ndef context_to_roles(ctx: dict) -> list[str]:\n  return ctx['securityContext'].get('roles', ['default'])\n```\n\n----------------------------------------\n\nTITLE: Query Example with Implicit Join\nDESCRIPTION: Example of querying a dimension that references another cube, which results in an implicit join in the generated SQL query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"users.name\"]\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COALESCE(\"users\".name, \"contacts\".name) \"users__name\"\nFROM users \"users\"\nLEFT JOIN contacts \"contacts\"\n  ON \"users\".contact_id = \"contacts\".id\n```\n\n----------------------------------------\n\nTITLE: Accessing process.env in Cube Data Model (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access process.env in a Cube Data Model by creating a utility function outside the model/ directory and importing it into a cube definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/schema-execution-environment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.tableSchema = () => process.env.TABLE_SCHEMA;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tableSchema } from \"../tablePrefix\";\n\ncube(`users`, {\n  sql_table: `${tableSchema()}.users`,\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Transitive Joins in JavaScript Data Model\nDESCRIPTION: JavaScript example defining three cubes (a, b, c) with join relationships between them. Demonstrates how Cube automatically resolves transitive joins when querying across multiple joined cubes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`a`, {\n  // ...\n\n  joins: {\n    b: {\n      sql: `${a}.b_id = ${b.id}`,\n      relationship: `many_to_one`,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n});\n\ncube(`b`, {\n  // ...\n\n  joins: {\n    c: {\n      sql: `${b}.c_id = ${c.id}`,\n      relationship: `many_to_one`,\n    },\n  },\n});\n\ncube(`c`, {\n  // ...\n\n  dimensions: {\n    category: {\n      sql: `category`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Combining SQL and Interval Refresh Keys in YAML\nDESCRIPTION: This example shows how to combine both SQL and interval-based refresh keys for a pre-aggregation in YAML. It refreshes every 12 hours if the SQL query returns new results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: amount_by_created\n        measures:\n          - amount\n        time_dimension: created_at\n        granularity: month\n        refresh_key:\n          every: 12 hour\n          sql: SELECT MAX(created_at) FROM orders\n```\n\n----------------------------------------\n\nTITLE: Complete Hierarchy Example with Dimensions\nDESCRIPTION: Demonstrates a full hierarchy implementation including dimension definitions and hierarchy configuration with multiple levels of granularity.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/hierarchies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  dimensions: {\n    state: {\n      sql: `state`,\n      type: `string`\n    },\n\n    city: {\n      sql: `city`,\n      type: `string`\n    }\n  },\n\n  hierarchies: {\n    location: {\n      title: `User Location`,\n      levels: [\n        state,\n        city\n      ]\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    dimensions:\n      - name: state\n        sql: state\n        type: string\n\n      - name: city\n        sql: city\n        type: string\n\n    hierarchies:\n      - name: location\n        title: User Location\n        levels:\n          - state\n          - city\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relationships\nDESCRIPTION: Establishes many-to-many relationships between emails, campaigns, and transactions using joins.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`emails`, {\n  sql_table: `emails`,\n\n  joins: {\n    campaigns: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.campaign_id = ${campaigns.id}\n      AND ${CUBE}.customer_name = ${campaigns.customer_name}`,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    campaign_name: {\n      sql: `campaign_name`,\n      type: `string`,\n    },\n\n    campaign_id: {\n      sql: `campaign_id`,\n      type: `number`,\n    },\n  },\n});\n\ncube(`campaigns`, {\n  joins: {\n    transactions: {\n      relationship: `one_to_many`,\n      sql: `${CUBE}.customer_name = ${transactions.customer_name}\n      AND ${CUBE}.campaign_id = ${transactions.campaign_id}`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    customer_name: {\n      sql: `customer_name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Data Source Configuration in JavaScript Data Model\nDESCRIPTION: Shows how to specify data sources for different cubes using JavaScript configuration format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multiple-data-sources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  data_source: `default`,\n});\n\ncube(`orders_from_other_data_source`, {\n  // ...\n\n  data_source: `other_data_source`,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining New vs Returning Sessions in Cube.js\nDESCRIPTION: This snippet shows how to create dimensions and measures in Cube.js to distinguish between first-time and repeat sessions using the session_sequence field.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  // ...,\n\n  dimensions: {\n    is_first: {\n      type: `string`,\n      case: {\n        when: [{ sql: `${CUBE}.session_sequence = 1`, label: `First` }],\n        else: { label: `Repeat` },\n      },\n    },\n  },\n\n  measures: {\n    repeat_count: {\n      description: `Repeat Sessions Count`,\n      sql: `session_id`,\n      type: `count`,\n      filters: [{ sql: `${is_first} = 'Repeat'` }],\n    },\n\n    repeat_percent: {\n      description: `Percent of Repeat Sessions`,\n      sql: `100.00 * ${repeat_count} / NULLIF(${count}, 0)`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sessions\n    # ...\n\n    dimensions: \n      - name: is_first\n        type: string\n        case:\n          when: [{ sql: \"{CUBE}.session_sequence = 1\", label: \"First\" }]\n          else: { label: \"Repeat\" }\n\n    measures:\n      - name: repeat_count\n        description: Repeat Sessions Count\n        sql: session_id\n        type: count\n        filters: [{ sql: \"{is_first} = 'Repeat'\" }]\n\n      - name: repeat_percent\n        description: Percent of Repeat Sessions\n        sql: \"100.00 * {repeat_count} / NULLIF({count}, 0)\"\n        type: number\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebolt Connection in Cube using Environment Variables\nDESCRIPTION: This snippet shows the necessary environment variables to set up a connection to Firebolt in a Cube project. It includes the database name, user credentials, account name, and engine name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/firebolt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_NAME=firebolt_database\nCUBEJS_DB_USER=aaaa-bbb-3244-wwssd\nCUBEJS_DB_PASS=**********\nCUBEJS_FIREBOLT_ACCOUNT=cube\nCUBEJS_FIREBOLT_ENGINE_NAME=engine_name\n```\n\n----------------------------------------\n\nTITLE: Adding Dimensions to Events Cube in Cube.js (JavaScript)\nDESCRIPTION: This code adds dimensions to the 'events' cube, allowing for filtering events by time range and specific types. It includes primary keys and various data types for different fields.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"events\", {\n  // ...,\n\n  dimensions: {\n    anonymous_id: {\n      sql: `anonymous_id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    event_id: {\n      sql: `event_id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    timestamp: {\n      sql: `timestamp`,\n      type: `time`,\n    },\n\n    event: {\n      sql: `event`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Image URL Dimension Format\nDESCRIPTION: Shows how to create a dimension that displays images using imageUrl format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    image: {\n      sql: `CONCAT('https://img.example.com/id/', ${id})`,\n      type: `string`,\n      format: `imageUrl`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: image\n        sql: \"CONCAT('https://img.example.com/id/', {id})\"\n        type: string\n        format: imageUrl\n```\n\n----------------------------------------\n\nTITLE: Dynamic Case Labels in Cube.js\nDESCRIPTION: Shows how to use dynamic SQL-based labels in case statements for more flexible dimension value mapping.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  dimensions: {\n    size: {\n      type: `string`,\n      case: {\n        when: [\n          {\n            sql: `${CUBE}.meta_value = 'xl-en'`,\n            label: { sql: `${CUBE}.english_size` },\n          },\n          {\n            sql: `${CUBE}.meta_value = 'xl'`,\n            label: { sql: `${CUBE}.euro_size` },\n          },\n          {\n            sql: `${CUBE}.meta_value = 'xxl-en'`,\n            label: { sql: `${CUBE}.english_size` },\n          },\n          {\n            sql: `${CUBE}.meta_value = 'xxl'`,\n            label: { sql: `${CUBE}.euro_size` },\n          },\n        ],\n        else: { label: `Unknown` },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Dbt Models in Python\nDESCRIPTION: Demonstrates filtering dbt models by path prefixes, tags, and names using the Dbt.filter method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url).filter(\n  paths=['marts/'],  # Only models under the 'marts/' path\n  tags=['cube'],     # Only models with the 'cube' tag\n  names=['orders']   # Only the 'orders' model \n)\n```\n\n----------------------------------------\n\nTITLE: Time Dimension References with Granularity\nDESCRIPTION: Shows how to define and reference time dimensions with custom granularities in both syntax formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n\n        granularities:\n          - name: sunday_week\n            interval: 1 week\n            offset: -1 day\n\n      - name: created_at__year\n        sql: \"{created_at.year}\"\n        type: time\n\n      - name: created_at__sunday_week\n        sql: \"{created_at.sunday_week}\"\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n\n      granularities: {\n        sunday_week: {\n          interval: `1 week`,\n          offset: `-1 day`\n        }\n      }\n    },\n\n    created_at__year: {\n      sql: `${created_at.year}`,\n      type: `time`\n    },\n\n    created_at__sunday_week: {\n      sql: `${created_at.sunday_week}`,\n      type: `time`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: DrillDown Query Structure Example\nDESCRIPTION: Shows the structure of a drill down query with filters and dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  measures: ['Orders.count'],\n  dimensions: ['Orders.status', 'Users.city'],\n  filters: [\n    // dimension and measure filters\n  ],\n  timeDimensions: [\n    //...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch and Source Data Lambda Pre-aggregations\nDESCRIPTION: Configuration example showing how to set up Lambda pre-aggregations combining batch data from pre-aggregations with real-time source data. Includes definition of batch pre-aggregation with time dimensions and lambda pre-aggregation with source data union.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/lambda-pre-aggregations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    pre_aggregations:\n      - name: lambda\n        type: rollup_lambda\n        union_with_source_data: true\n        rollups:\n          - CUBE.batch\n\n      - name: batch\n        measures:\n          - users.count\n        dimensions:\n          - users.name\n        time_dimension: users.created_at\n        granularity: day\n        partition_granularity: day\n        build_range_start:\n          sql: SELECT '2020-01-01'\n        build_range_end:\n          sql: SELECT '2022-05-30'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"users\", {\n  // ...\n\n  pre_aggregations: {\n    lambda: {\n      type: `rollup_lambda`,\n      union_with_source_data: true,\n      rollups: [CUBE.batch],\n    },\n\n    batch: {\n      measures: [users.count],\n      dimensions: [users.name],\n      time_dimension: users.created_at,\n      granularity: `day`,\n      partition_granularity: `day`,\n      build_range_start: {\n        sql: `SELECT '2020-01-01'`,\n      },\n      build_range_end: {\n        sql: `SELECT '2022-05-30'`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_GROUP in YAML\nDESCRIPTION: Shows how to use FILTER_GROUP context variable in YAML when multiple FILTER_PARAMS are used in a query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: cube_name\n    sql: >\n      SELECT *\n      FROM table\n      WHERE {FILTER_GROUP(\n        FILTER_PARAMS.cube_name.member_name.filter(sql_expression),\n        FILTER_PARAMS.cube_name.another_member_name.filter(sql_expression)\n      )}\n\n    dimensions:\n      - name: member_name\n        # ...\n\n      - name: another_member_name\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Orders View Definition\nDESCRIPTION: Creating a view that combines data from orders and users cubes, selecting specific dimensions and measures to include.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/create-data-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - created_at\n          - count\n          - completed_count\n          - completed_percentage\n\n      - join_path: orders.users\n        prefix: true\n        includes:\n          - city\n          - age\n          - state\n```\n\n----------------------------------------\n\nTITLE: Running Cube Store with Docker\nDESCRIPTION: This command runs Cube Store as a Docker container, exposing port 3030.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3030:3030 cubejs/cubestore\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Data Source Configuration\nDESCRIPTION: Extended configuration example demonstrating multiple data sources including Athena, BigQuery, and PostgreSQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  driverFactory: ({ dataSource } = {}) => {\n    if (dataSource === \"web\") {\n      return {\n        type: \"athena\",\n        database: dataSource,\n        // ...\n      };\n    } else if (dataSource === \"googleAnalytics\") {\n      return {\n        type: \"bigquery\",\n        // ...\n      };\n    } else if (dataSource === \"financials\") {\n      return {\n        type: \"postgres\",\n        database: \"financials\",\n        host: \"financials-db.acme.com\",\n        user: process.env.FINANCIALS_DB_USER,\n        password: process.env.FINANCIALS_DB_PASS,\n      };\n    } else {\n      return {\n        type: \"postgres\",\n        // ...\n      };\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using DrillDown with React useCubeQuery Hook\nDESCRIPTION: Example of using drillDown query with additional parameters in a React component.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst drillDownResponse = useCubeQuery(\n   {\n     ...drillDownQuery,\n     limit: 30,\n     order: {\n       'Orders.ts': 'desc'\n     }\n   },\n   {\n     skip: !drillDownQuery\n   }\n );\n```\n\n----------------------------------------\n\nTITLE: Example Result of Dynamic Measures for Order Status Analysis\nDESCRIPTION: This code snippet shows an example of the result obtained from using the dynamic measures defined in the previous snippet. It displays the percentage distribution of orders across different statuses.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/using-dynamic-measures.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.percentage_of_processing\": \"33.54\",\n    \"orders.percentage_of_shipped\": \"33.00\",\n    \"orders.percentage_of_completed\": \"33.46\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Dynamic View Access Control with YAML\nDESCRIPTION: Demonstrates how to dynamically control view accessibility based on tenant team information in the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/member-level-security.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: customers\n    public: \"{{ is_accessible_by_team('marketing', COMPILE_CONTEXT) }}\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Dimension in SQL API\nDESCRIPTION: Shows how to reference a dimension called 'status' as a column in the SELECT clause, including the necessary GROUP BY clause.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT status\nFROM orders\nGROUP BY 1;\n```\n\n----------------------------------------\n\nTITLE: Formatting Measure Output in Cube.js (YAML)\nDESCRIPTION: Shows how to format the output of measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: total\n        sql: amount\n        type: sum\n        format: currency\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Expressions for Measures in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to define SQL expressions for measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    users_count: {\n      sql: `COUNT(*)`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Joining Funnels with User Cubes\nDESCRIPTION: Shows how to join a funnel with other cubes (e.g., Users) to provide additional dimensions for analysis using a many-to-one relationship.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`PurchaseFunnel`, {\n  joins: {\n    Users: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.first_step_user_id = ${Users.id}`,\n    },\n  },\n\n  extends: Funnels.eventFunnel({\n    // ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Cube with Virtual User Filter\nDESCRIPTION: This SQL query demonstrates how to use a virtual user filter to query Cube with a specific user context. It selects user data for a user that is part of a trusted team.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/security.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT users_city, users_first_name, users_last_name\nFROM users\nWHERE __user = 'cx'\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-aggregation in Cube.js (YAML)\nDESCRIPTION: This snippet demonstrates how to define the same pre-aggregation named 'main' in Cube.js using YAML format. It includes the same settings as the JavaScript version.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: main\n        measures:\n          - order_total\n        dimensions:\n          - product_name\n          - product_category\n          - zip_code\n        time_dimension: timestamp\n        granularity: hour\n        partition_granularity: day\n        allow_non_strict_date_range_match: true\n        refresh_key:\n          every: 1 hour\n          incremental: true\n          update_window: 1 day\n        build_range_start:\n          sql: SELECT DATE_SUB(NOW(), 365)\n        build_range_end:\n          sql: SELECT NOW()\n```\n\n----------------------------------------\n\nTITLE: Adding Measures and Dimensions to Sessions Cube in Cube.js (JavaScript)\nDESCRIPTION: This code adds measures and dimensions to the 'sessions' cube, allowing for counting sessions and filtering by various attributes such as start time and anonymous ID.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  // ...,\n\n  measures: {\n    count: {\n      sql: `session_id`,\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    anonymous_id: {\n      sql: `anonymous_id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    session_id: {\n      sql: `session_id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    start_at: {\n      sql: `session_start_at`,\n      type: `time`,\n    },\n\n    next_start_at: {\n      sql: `next_session_start_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Bypassing Row-Level Security for SQL API Queries in Cube.js\nDESCRIPTION: This code snippet shows how to bypass Row-Level Security for queries made through the SQL API in Cube.js. It uses checkSqlAuth to create a superuser context and modifies queryRewrite to handle this special case.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/faqs/tips-and-tricks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // Create a \"superuser\" security context for the SQL API\n  checkSqlAuth: async (req, username) => {\n    if (username === process.env.CUBEJS_SQL_USER) {\n      return {\n        password: process.env.CUBEJS_SQL_PASSWORD,\n        securityContext: { isSuperUser: true },\n      };\n    }\n  },\n  queryRewrite: (query, { securityContext }) => {\n    // Bypass row-level-security when connected from the SQL API\n    if (securityContext.isSuperUser) {\n      return query;\n    } else if (!securityContext.tenantId) {\n      throw new Error(\"No id found in Security Context!\");\n    } else {\n      query.filters.push({\n        member: \"orders.tenant_id\",\n        operator: \"equals\",\n        values: [securityContext.tenantId],\n      });\n\n      return query;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dbt Models in Python\nDESCRIPTION: Example of iterating over loaded dbt models using the Dbt.models property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\n\nfor model in dbt.models:\n  print(model)\n```\n\n----------------------------------------\n\nTITLE: Querying Period-Over-Period Data with Cube.js REST API\nDESCRIPTION: This JSON query demonstrates how to request period-over-period data from the Cube.js API. It specifies a time dimension with monthly granularity and retrieves current month sum, previous month sum, and the calculated change measure.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/period-over-period.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"month_over_month.date\",\n      \"granularity\": \"month\",\n      \"dateRange\": \"this year\"\n    }\n  ],\n  \"measures\": [\n    \"month_over_month.current_month_sum\",\n    \"month_over_month.previous_month_sum\",\n    \"month_over_month.change\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Pre-aggregation with FILTER_PARAMS\nDESCRIPTION: Enhanced cube definition using FILTER_PARAMS to push down date predicates to the inner SQL query, allowing for more efficient date range filtering at the source level.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/incrementally-building-pre-aggregations-for-a-date-range.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users_with_organizations\n    sql: >\n      WITH users AS (\n        SELECT\n          md5(company) AS organization_id,\n          id AS user_id,\n          created_at\n        FROM public.users\n        WHERE\n      {FILTER_PARAMS.users_with_organizations.created_at.filter('created_at')}\n      ), organizations AS (\n        (\n          SELECT\n            md5(company) AS id,\n            company AS name,\n            MIN(created_at)\n          FROM\n            public.users\n          GROUP BY\n            1,\n            2\n        )\n      ) SELECT\n        users.*,\n        organizations.name AS org_name\n      FROM\n        users\n      LEFT JOIN organizations\n        ON users.organization_id = organizations.id\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"users_with_organizations\", {\n  sql: `\nWITH users AS (\n    SELECT\n      md5(company) AS organization_id,\n      id AS user_id,\n      created_at\n    FROM public.users\n    WHERE ${FILTER_PARAMS.users_with_organizations.created_at.filter(\n      \"created_at\"\n    )}\n),\norganizations AS (\n  (\n    SELECT\n      md5(company) AS id,\n      company AS name,\n      MIN(created_at)\n    FROM\n      public.users\n    GROUP BY\n      1,\n      2\n  )\n)\nSELECT\n  users.*,\n  organizations.name AS org_name\nFROM\n  users\nLEFT JOIN organizations\n  ON users.organization_id = organizations.id\n`\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Funnel Analysis\nDESCRIPTION: Shows the complex SQL query that Cube.js automatically generates for funnel analysis, including steps for joining events, filtering by time window, and calculating conversions between steps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  purchase_funnel.step \"purchase_funnel.step\",\n  count(purchase_funnel.user_id) \"purchase_funnel.conversions\"\nFROM\n  (\n    WITH joined_events AS (\n      select\n        view_product_events.user_id view_product_user_id,\n        purchase_product_events.user_id purchase_product_user_id,\n        view_product_events.t\n      FROM\n        (\n          select\n            user_id user_id,\n            timestamp t\n          from\n            (\n              select\n                *\n              from\n                events\n              where\n                event = 'view_product'\n            ) e\n        ) view_product_events\n        LEFT JOIN (\n          select\n            user_id user_id,\n            timestamp t\n          from\n            (\n              select\n                *\n              from\n                events\n              where\n                event = 'purchase_product'\n            ) e\n        ) purchase_product_events ON view_product_events.user_id = purchase_product_events.user_id\n        AND purchase_product_events.t >= view_product_events.t\n        AND (\n          purchase_product_events.t :: timestamptz AT TIME ZONE 'America/Los_Angeles'\n        ) <= (\n          view_product_events.t :: timestamptz AT TIME ZONE 'America/Los_Angeles'\n        ) + interval '1 day'\n    )\n    select\n      user_id,\n      first_step_user_id,\n      step,\n      max(t) t\n    from\n      (\n        SELECT\n          view_product_user_id user_id,\n          view_product_user_id first_step_user_id,\n          t,\n          'View Product' step\n        FROM\n          joined_events\n        UNION ALL\n        SELECT\n          purchase_product_user_id user_id,\n          view_product_user_id first_step_user_id,\n          t,\n          'Purchase Product' step\n        FROM\n          joined_events\n      ) as event_steps\n    GROUP BY\n      1,\n      2,\n      3\n  ) AS purchase_funnel\nWHERE\n  (\n    purchase_funnel.t >= '2018-07-01T07:00:00Z' :: timestamptz\n    AND purchase_funnel.t <= '2018-07-31T06:59:59Z' :: timestamptz\n  )\nGROUP BY\n  1\nORDER BY\n  2 DESC\nLIMIT\n  5000\n```\n\n----------------------------------------\n\nTITLE: Implement Cube Query DAG\nDESCRIPTION: Python DAG implementation using CubeQueryOperator to execute queries against Cube's REST API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/airflow.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom pendulum import datetime\nfrom airflow.decorators import dag, task\nfrom cube_provider.operators.cube import CubeQueryOperator\n\n@dag(\n  start_date=datetime(2023, 6, 1),\n  schedule='*/1 * * * *',\n  max_active_runs=1,\n  concurrency=1,\n  default_args={\"retries\": 1, \"cube_conn_id\": \"cube_default\"},\n  tags=[\"cube\"],\n)\ndef cube_query_workflow():\n  query_op = CubeQueryOperator(\n    task_id=\"query_op\",\n    query={\n      \"measures\": [\"Orders.count\"],\n      \"dimensions\": [\"Orders.status\"]\n    }\n  )\n\n  @task()\n  def print_op(data: Any):\n    print(f\"Result: {data}\")\n\n  print_op(query_op.output)\n\ncube_query_workflow()\n```\n\n----------------------------------------\n\nTITLE: Deriving User Roles from Security Context in JavaScript for Cube.js\nDESCRIPTION: This JavaScript snippet demonstrates how to use the 'contextToRoles' configuration option to derive user roles from the security context. It returns the roles from the security context or ['default'] if no roles are specified.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/data-access-policies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToRoles: ({ securityContext }) => {\n    return securityContext.roles || ['default']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Union Table Definition in Cube.js\nDESCRIPTION: Demonstrates how to create a cube that unions multiple customer tables using static SQL UNION ALL statements. Includes basic measure and dimension definitions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/dynamic-union-tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: customers\n    sql: >\n      SELECT *, 'Einstein' AS name FROM einstein_data UNION ALL\n      SELECT *, 'Pascal'   AS name FROM pascal_data   UNION ALL\n      SELECT *, 'Newton'   AS name FROM newton_data\n  \n    measures:\n      - name: count\n        type: count\n  \n    dimensions:\n      - name: name\n        sql: name\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`customers`, {\n  sql: `\n    SELECT *, 'Einstein' AS name FROM einstein_data UNION ALL\n    SELECT *, 'Pascal'   AS name FROM pascal_data   UNION ALL\n    SELECT *, 'Newton'   AS name FROM newton_data\n  `,\n \n  measures: {\n    count: {\n      type: `count`,\n    }\n  },\n \n  dimensions: {\n    name: {\n      sql: `name`,\n      type: `string`,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: API Response Structure\nDESCRIPTION: Example JSON response from the /meta endpoint showing the structure of available cubes and views with their measures and dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/controlling-access-to-cubes-and-views.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cubes\": [\n    {\n      \"name\": \"total_revenue_per_customer\",\n      \"title\": \"Total Revenue Per Customer\",\n      \"description\": \"Total revenue per customer\",\n      \"measures\": [\n        {\n          \"name\": \"total_revenue_per_customer.total_revenue\",\n          \"title\": \"Total Revenue Per Customer Total Revenue\",\n          \"shortTitle\": \"Total Revenue\",\n          \"cumulativeTotal\": false,\n          \"cumulative\": false,\n          \"type\": \"number\",\n          \"aggType\": \"number\",\n          \"drillMembers\": [],\n          \"drillMembersGrouped\": {\n            \"measures\": [],\n            \"dimensions\": []\n          },\n          \"isVisible\": true\n        }\n      ],\n      \"dimensions\": [\n        {\n          \"name\": \"total_revenue_per_customer.company\",\n          \"title\": \"Total Revenue Per Customer Company\",\n          \"type\": \"string\",\n          \"shortTitle\": \"Company\",\n          \"suggestFilterValues\": true,\n          \"isVisible\": true\n        }\n      ],\n      \"segments\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to define basic measures with name, SQL, and type parameters in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: count\n        sql: id\n        type: count\n\n      - name: total_amount\n        sql: amount\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Visibility in YAML\nDESCRIPTION: This example demonstrates how to set the visibility of a cube using the public parameter in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: public.orders\n    public: false\n```\n\n----------------------------------------\n\nTITLE: AI Query Request With Query Execution\nDESCRIPTION: Example cURL request showing how to generate and execute a Cube query in one call, including the runQuery parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api/reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST  \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n --data '{ \"messages\": [{ \"role\": \"user\", \"content\": \"What cities had the highest aov last year?\" }], \"runQuery\": true}' \\\n https://YOUR_CUBE_API/cubejs-api/v1/ai/query/completions\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Time Granularities in Cube.js (YAML)\nDESCRIPTION: This YAML code defines a cube with custom time dimension granularities. It includes definitions for Sunday week, fiscal year, and fiscal quarter, along with proxy dimensions and a fiscal quarter label calculation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/custom-granularity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: custom_granularities\n    sql: >\n      SELECT '2024-01-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-02-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-03-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-04-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-05-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-06-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-07-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-08-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-09-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-10-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-11-15'::TIMESTAMP AS timestamp UNION ALL\n      SELECT '2024-12-15'::TIMESTAMP AS timestamp\n\n    dimensions:\n      - name: timestamp\n        sql: timestamp\n        type: time\n\n        granularities:\n          - name: sunday_week\n            interval: 1 week\n            offset: -1 day\n\n          - name: fiscal_year\n            title: Federal fiscal year in the United States\n            interval: 1 year\n            offset: -3 months\n\n          - name: fiscal_quarter\n            title: Federal fiscal quarter in the United States\n            interval: 1 quarter\n            offset: -3 months\n      \n      - name: sunday_week\n        sql: \"{timestamp.sunday_week}\"\n        type: time\n      \n      - name: fiscal_year\n        sql: \"{timestamp.fiscal_year}\"\n        type: time\n      \n      - name: fiscal_quarter\n        sql: \"{timestamp.fiscal_quarter}\"\n        type: time\n\n      - name: fiscal_quarter_label\n        sql: >\n          'FY' || (EXTRACT(YEAR FROM {timestamp.fiscal_year}) + 1) ||\n          '-Q' || EXTRACT(QUARTER FROM {timestamp.fiscal_quarter} + INTERVAL '3 MONTHS')\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Extending Calendar Cube for Multiple Time Dimensions\nDESCRIPTION: Creates auxiliary calendar cubes by extending the base calendar_454 cube for different time dimensions in the orders cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/custom-calendar.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: calendar_454__base_orders__created_at\n    extends: calendar_454\n\n  - name: calendar_454__base_orders__completed_at\n    extends: calendar_454\n```\n\n----------------------------------------\n\nTITLE: Configuring Partitioned Pre-aggregation in YAML\nDESCRIPTION: This example shows how to configure a partitioned pre-aggregation in YAML. It partitions data by month and refreshes the last 3 months daily.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: category_and_date\n        measures:\n          - count\n          - revenue\n        dimensions:\n          - category\n        time_dimension: created_at\n        granularity: day\n        partition_granularity: month\n        refresh_key:\n          every: 1 day\n          incremental: true\n          update_window: 3 months\n```\n\n----------------------------------------\n\nTITLE: Querying Pre-aggregation Tables in Cube Store\nDESCRIPTION: SQL query to list all pre-aggregation tables stored in Cube Store using information schema.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM information_schema.tables;\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Cache Size in Python and JavaScript\nDESCRIPTION: Shows how to set the maximum number of compiled data models to persist in the in-memory cache using the compiler_cache_size option.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.compiler_cache_size = 100\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  compilerCacheSize: 100\n};\n```\n\n----------------------------------------\n\nTITLE: Case Statement Dimension in Cube.js\nDESCRIPTION: Demonstrates how to create a dimension using case statements for conditional value mapping with when/else logic.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  dimensions: {\n    size: {\n      type: `string`,\n      case: {\n        when: [\n          { sql: `${CUBE}.size_value = 'xl-en'`, label: `xl` },\n          { sql: `${CUBE}.size_value = 'xl'`, label: `xl` },\n          { sql: `${CUBE}.size_value = 'xxl-en'`, label: `xxl` },\n          { sql: `${CUBE}.size_value = 'xxl'`, label: `xxl` },\n        ],\n        else: { label: `Unknown` },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using data_source Parameter in YAML\nDESCRIPTION: This example demonstrates how to specify a custom data source for a cube using the data_source parameter in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    data_source: prod_db\n    sql_table: orders\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Handling Measure Multiplication in Fan/Chasm Traps\nDESCRIPTION: SQL query generated by Cube to handle measure multiplication when querying customers.average_age by orders.city. Shows how Cube generates deduplication queries to solve chasm and fan traps during query time.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"keys\".\"orders__city\",\n  avg(\"customers_key__customers\".age) \"customers__average_age\"\nFROM\n  (\n    SELECT\n      DISTINCT \"customers_key__orders\".city \"orders__city\",\n      \"customers_key__customers\".id \"customers__id\"\n    FROM\n      orders AS \"customers_key__orders\"\n      LEFT JOIN customers AS \"customers_key__customers\" ON \"customers_key__orders\".customer_id = \"customers_key__customers\".id\n  ) AS \"keys\"\n  LEFT JOIN customers AS \"customers_key__customers\" ON \"keys\".\"customers__id\" = \"customers_key__customers\".id\nGROUP BY\n  1\n```\n\n----------------------------------------\n\nTITLE: JSON Query for Retrieving Order and Customer Data\nDESCRIPTION: This JSON query retrieves order status, customer company, and order count, grouped by order status and customer company.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"orders.status\", \"customers.company\"],\n  \"measures\": [\"orders.count\"],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"orders.created_at\"\n    }\n  ],\n  \"order\": { \"customers.company\": \"asc\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Cube for Users in Cube.js\nDESCRIPTION: This snippet creates a basic 'users' cube that represents entities in the EAV model. It defines a SQL table source, joins to orders, and creates a name dimension by concatenating first and last names.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    orders: {\n      relationship: \"one_to_many\",\n      sql: `${CUBE}.id = ${orders.user_id}`,\n    },\n  },\n\n  dimensions: {\n    name: {\n      sql: `first_name || ' ' || last_name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing driver_factory for Custom Data Source Configuration\nDESCRIPTION: Illustrates how to use the driver_factory function to provide custom configuration for the data source driver, useful for dynamic configuration in multitenancy scenarios.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('driver_factory')\ndef driver_factory(ctx: dict) -> None:\n  context = ctx['securityContext']\n  data_source = ctx['dataSource']\n \n  return {\n    'type': 'postgres',\n    'host': 'demo-db-examples.cube.dev',\n    'user': 'cube',\n    'password': '12345',\n    'database': data_source\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  driverFactory: ({ securityContext, dataSource }) => {\n    return {\n      type: 'postgres',\n      host: 'demo-db-examples.cube.dev',\n      user: 'cube',\n      password: '12345',\n      database: dataSource\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orchestrator Options in Cube.js\nDESCRIPTION: Examples showing how to configure advanced orchestrator options in Cube.js, including cache settings, timeouts, concurrency, and pre-aggregation options. These settings control the behavior of the query orchestrator, though it's recommended to use environment variables instead of directly modifying these system-level settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.orchestrator_options = {\n  'continueWaitTimeout': 10,\n  'rollupOnlyMode': False,\n  'queryCacheOptions': {\n    'refreshKeyRenewalThreshold': 30,\n    'backgroundRenew': True,\n    'queueOptions': {\n      'concurrency': 3,\n      'executionTimeout': 1000,\n      'orphanedTimeout': 1000,\n      'heartBeatInterval': 1000\n    }\n  },\n  'preAggregationsOptions': {\n    'externalRefresh': False,\n    'maxPartitions': 100,\n    'queueOptions': {\n      'concurrency': 3,\n      'executionTimeout': 1000,\n      'orphanedTimeout': 1000,\n      'heartBeatInterval': 1000\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  orchestratorOptions: {\n    continueWaitTimeout: 10,\n    rollupOnlyMode: false,\n    queryCacheOptions: {\n      refreshKeyRenewalThreshold: 30,\n      backgroundRenew: true,\n      queueOptions: {\n        concurrency: 3,\n        executionTimeout: 1000,\n        orphanedTimeout: 1000,\n        heartBeatInterval: 1000\n      }\n    },\n    preAggregationsOptions: {\n      externalRefresh: false,\n      maxPartitions: 100,\n      queueOptions: {\n        concurrency: 3,\n        executionTimeout: 1000,\n        orphanedTimeout: 1000,\n        heartBeatInterval: 1000\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Monthly Retention Cube in JavaScript\nDESCRIPTION: Creates a cube definition for monthly retention analysis with dimensions for tracking months since signup and signup date with timezone handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/docs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`monthly_retention`, {\n  // ...\n\n  dimensions: {\n    months_since_signup: {\n      sql: `DATEDIFF('month', ${CUBE}.signup_month, ${CUBE}.activity_month)`,\n      type: `number`,\n    },\n\n    signup_date: {\n      sql: `(signup_month AT TIME ZONE 'America/Los_Angeles')`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_PARAMS with String Argument in JavaScript\nDESCRIPTION: Demonstrates how to use FILTER_PARAMS context variable with a string argument in JavaScript. This example filters orders based on a date range.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  sql: `\n    SELECT *\n    FROM orders\n    WHERE ${FILTER_PARAMS.order_facts.date.filter('date')}\n  `,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    date: {\n      sql: `date`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying a Measure in SQL API\nDESCRIPTION: Illustrates how to reference a measure called 'count' by wrapping it with the MEASURE aggregate function.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MEASURE(count)\nFROM orders;\n```\n\n----------------------------------------\n\nTITLE: Defining Orders Cube Structure\nDESCRIPTION: Basic cube definition for an orders table including measures and dimensions, implemented in both YAML and JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/getting-started-pre-aggregations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: status\n        sql: status\n        type: string\n\n      - name: completed_at\n        sql: completed_at\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    status: {\n      sql: `status`,\n      type: `string`,\n    },\n\n    completed_at: {\n      sql: `completed_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Measure Output in Cube.js (JavaScript)\nDESCRIPTION: Demonstrates how to format the output of measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    total: {\n      sql: `amount`,\n      type: `sum`,\n      format: `currency`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Segments in a Query Object\nDESCRIPTION: This JSON snippet demonstrates how to include a defined segment in a query object when querying data using Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"users.count\"],\n  \"segments\": [\"users.sf_users\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preset Sync in JavaScript\nDESCRIPTION: JavaScript configuration for Semantic Layer Sync with Preset. Exports a configuration object with sync settings including API credentials and workspace details. Requires valid Preset API token, secret, workspace URL, and database name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/preset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"preset\",\n        name: \"Preset Sync\",\n        config: {\n          api_token: \"07988f63-c200-499e-97c9-ba137d8918aa\",\n          api_secret: \"c19fbab4fd4945899795d32898f2e1165bef8e5ee653499e92f083b3d088aecb\",\n          workspace_url: \"12345678.us1a.app.preset.io\",\n          database: \"Cube Cloud: production-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting Events to Sessions with Cube.js Joins\nDESCRIPTION: Implements a many-to-one relationship between events and sessions cubes to track events within session boundaries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"events\", {\n  joins: {\n    sessions: {\n      relationship: `many_to_one`,\n      sql: `\n        ${events.anonymous_id} = ${sessions.anonymous_id}\n        AND ${events.timestamp} >= ${sessions.start_at}\n        AND (${events.timestamp} < ${sessions.next_start_at} or ${sessions.next_start_at} is null)\n      `,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    joins:\n      - name: sessions\n        relationship: many_to_one\n        sql: >\n          {events.anonymous_id} = {sessions.anonymous_id}\n          AND {events.timestamp} >= {sessions.start_at}\n          AND ({events.timestamp} < {sessions.next_start_at} or {sessions.next_start_at} is null)\n```\n\n----------------------------------------\n\nTITLE: Setting SQL-based Refresh Key in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a SQL-based refresh key for a pre-aggregation in JavaScript. It uses a SQL query to determine when to refresh the pre-aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    amount_by_created: {\n      measures: [amount],\n      time_dimension: created_at,\n      granularity: `month`,\n      refresh_key: {\n        // every will default to `10 seconds` here\n        sql: `SELECT MAX(created_at) FROM orders`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync in Python\nDESCRIPTION: Example of configuring a single disabled sync for Superset using the semantic_layer_sync function in Python. It demonstrates how to set up the sync with necessary credentials and options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'superset',\n      'name': 'Superset Sync',\n      'active': False,\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'superset.example.com',\n        'database': 'Cube Cloud: staging-deployment'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining Dimension Keys in YAML\nDESCRIPTION: Shows how to configure dimension keys in the cube's model file. The example demonstrates setting up a primary key and defining a key member for a dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/mdx-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: USERS\n    public: false\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.ID\"\n        type: number\n        primary_key: true\n\n      - name: first_name\n        sql: FIRST_NAME\n        type: string\n        meta:\n          key_member: users_id\n```\n\n----------------------------------------\n\nTITLE: Starting Cube Server with Docker\nDESCRIPTION: Docker command to run a local Cube server instance with development mode enabled. Maps ports 4000 and 15432, mounts the current directory for configuration, and enables development mode.\nSOURCE: https://github.com/cube-js/cube/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4000:4000 \\\n  -p 15432:15432 \\\n  -v ${PWD}:/cube/conf \\\n  -e CUBEJS_DEV_MODE=true \\\n  cubejs/cube\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Data Modeling for Tenants\nDESCRIPTION: Demonstrates dynamic data modeling where different measures are conditionally added to a cube based on the tenant identity. This approach creates fully customized data models programmatically for each tenant.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/multitenancy/custom-data-model-per-tenant.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% set tenant_id = COMPILE_CONTEXT['securityContext']['tenant_id'] %}\n\ncubes:\n  - name: cube_x\n    sql_table: table_x\n \n    measures:\n      - name: count\n        type: count\n\n      {% if tenant_id == 'Alice' %}\n        - name: count_a\n          sql: column_a\n          type: count\n      {% endif %}\n\n      {% if tenant_id == 'Bob' %}\n        - name: count_b\n          sql: column_b\n          type: count\n      {% endif %}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tenant_id } = COMPILE_CONTEXT.securityContext\n\nconst measures = {\n  count: {\n    type: `count`\n  }\n}\n\nif (tenant_id == 'Alice') {\n  measures['count_a'] = {\n    sql: () => `column_a`,\n    type: `count`\n  }\n}\n\nif (tenant_id == 'Bob') {\n  measures['count_b'] = {\n    sql: () => `column_b`,\n    type: `count`\n  }\n}\n\ncube(`cube_x`, {\n  sql_table: `table_x`,\n\n  measures\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SQL from Cube.js Query (REST API Format)\nDESCRIPTION: Example of using the /v1/sql endpoint to generate SQL from a Cube.js query in REST API format. This is useful for debugging and understanding how Cube.js translates queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: TOKEN\" \\\n  -G \\\n  --data-urlencode 'query={\"measures\":[\"orders.count\"]}' \\\n  --data-urlencode 'format=rest'  \\\n  http://localhost:4000/cubejs-api/v1/sql\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sql\": {\n    \"sql\": [\n      \"SELECT sum(`base_orders__count`) `orders__count` FROM prod_pre_aggregations.base_orders_orders_by_month AS `base_orders__orders_by_month`  LIMIT 10000\",\n      []\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQL-based Refresh Key in YAML\nDESCRIPTION: This example shows how to set a SQL-based refresh key for a pre-aggregation in YAML. It uses a SQL query to determine when to refresh the pre-aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: amount_by_created\n        measures:\n          - amount\n        time_dimension: created_at\n        granularity: month\n        refresh_key:\n          # every will default to `10 seconds` here\n          sql: SELECT MAX(created_at) FROM orders\n```\n\n----------------------------------------\n\nTITLE: Private Dimension Configuration in YAML\nDESCRIPTION: Example showing how to configure private dimensions in a cube using YAML syntax, with a calculated dimension based on a private field.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/member-level-security.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    dimensions:\n      - name: first_name\n        sql: first_name\n        type: string\n        public: false\n\n      - name: initial\n        sql: \"LEFT({first_name}, 1)\"\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Refresh Key with SQL\nDESCRIPTION: Example showing how to configure a custom refresh key using SQL MAX timestamp to determine when to refresh cube data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  sql_table: `orders`,\n\n  // With this refresh_key Cube will only refresh the data if\n  // the value of previous MAX(updated_at_timestamp) changed.\n  // By default Cube will check this refreshKey every 10 seconds\n  refresh_key: {\n    sql: `SELECT MAX(updated_at_timestamp) FROM orders`,\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    sql_table: orders\n    refresh_key:\n      sql: SELECT MAX(updated_at_timestamp) FROM orders\n```\n\n----------------------------------------\n\nTITLE: Basic Pre-aggregation Configuration in Cube.js\nDESCRIPTION: Initial cube definition with pre-aggregation settings for users and organizations data. Includes basic date range filtering at the aggregation level using build_range_start and build_range_end.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/incrementally-building-pre-aggregations-for-a-date-range.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users_with_organizations\n    sql: >\n      WITH users AS (\n        SELECT\n          md5(company) AS organization_id,\n          id AS user_id,\n          created_at\n        FROM public.users\n      ), organizations AS (\n        (\n          SELECT\n            md5(company) AS id,\n            company AS name,\n            MIN(created_at)\n          FROM\n            public.users\n          GROUP BY\n            1,\n            2\n        )\n      ) SELECT\n        users.*,\n        organizations.name AS org_name\n      FROM\n        users\n      LEFT JOIN organizations\n        ON users.organization_id = organizations.id\n\n    pre_aggregations:\n      - name: main\n        dimensions:\n          - id\n          - organization_id\n        time_dimension: created_at\n        refresh_key:\n          every: 1 day\n          incremental: true\n        granularity: day\n        partition_granularity: month\n        build_range_start:\n          sql: SELECT DATE('2021-01-01')\n        build_range_end:\n          sql: SELECT NOW()\n\n    dimensions:\n      - name: id\n        sql: user_id\n        type: number\n        primary_key: true\n\n      - name: organization_id\n        sql: organization_id\n        type: string\n\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube('users_with_organizations', {\n\n  sql: `\n    WITH users AS (\n      SELECT\n        md5(company) AS organization_id,\n        id AS user_id,\n        created_at\n      FROM public.users\n    ),\n    organizations AS (\n      (\n        SELECT\n          md5(company) AS id,\n          company AS name,\n          MIN(created_at)\n        FROM\n          public.users\n        GROUP BY\n          1,\n          2\n      )\n    )\n    SELECT\n      users.*,\n      organizations.name AS org_name\n    FROM\n      users\n    LEFT JOIN organizations\n      ON users.organization_id = organizations.id\n    `,\n\n  pre_aggregations: {\n    main: {\n      dimensions: [CUBE.id, CUBE.organization_id]\n      time_dimension: CUBE.created_at,\n      refresh_key: {\n        every: `1 day`,\n        incremental: true,\n      },\n      granularity: `day`,\n      partition_granularity: `month`,\n      build_range_start: { sql: `SELECT DATE('2021-01-01')` },\n      build_range_end: { sql: `SELECT NOW()` },\n    },\n  },\n\n  dimensions: {\n    id: {\n      sql: `user_id`,\n      type: `number`\n      primary_key: true,\n    },\n\n    organization_id: {\n      sql: `organization_id`,\n      type: `string`\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube API with JSON Web Tokens\nDESCRIPTION: This YAML configuration demonstrates how to set up Cube API with JSON Web Token authentication, including specifying the JWK URL, audience, issuer, and other JWT-related settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube_api:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_DB_TYPE=bigquery\n      - CUBEJS_DB_BQ_PROJECT_ID=cube-bq-cluster\n      - CUBEJS_DB_BQ_CREDENTIALS=<BQ-KEY>\n      - CUBEJS_DB_EXPORT_BUCKET=cubestore\n      - CUBEJS_CUBESTORE_HOST=cubestore_router\n      - CUBEJS_API_SECRET=secret\n      - CUBEJS_JWK_URL=https://cognito-idp.<AWS_REGION>.amazonaws.com/<USER_POOL_ID>/.well-known/jwks.json\n      - CUBEJS_JWT_AUDIENCE=<APPLICATION_URL>\n      - CUBEJS_JWT_ISSUER=https://cognito-idp.<AWS_REGION>.amazonaws.com/<USER_POOL_ID>\n      - CUBEJS_JWT_ALGS=RS256\n      - CUBEJS_JWT_CLAIMS_NAMESPACE=<CLAIMS_NAMESPACE>\n    volumes:\n      - .:/cube/conf\n    depends_on:\n      - cubestore_worker_1\n      - cubestore_worker_2\n      - cube_refresh_worker\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Measure with Formatting in Cube.js\nDESCRIPTION: This example demonstrates how to create a number measure with percentage formatting in Cube.js. It calculates a ratio and formats it as a percentage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    purchases_ratio: {\n      sql: `${purchases} / ${count} * 100.0`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: purchases_ratio\n        sql: \"{purchases} / {count} * 100.0\"\n        type: number\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: Adding a Many-to-One Join to Orders Cube in YAML\nDESCRIPTION: This snippet demonstrates how to add a many-to-one join from the 'orders' cube to the 'customers' cube in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    joins:\n      - name: customers\n        relationship: many_to_one\n        sql: \"{CUBE}.customer_id = {customers.id}\"\n```\n\n----------------------------------------\n\nTITLE: Deriving Data Access Roles with LDAP Integration in Cube.js\nDESCRIPTION: This function demonstrates how to derive data access roles when using LDAP integration and authentication in Cube.js. It extracts roles from the cloud context in the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_roles')\ndef context_to_roles(ctx: dict) -> list[str]:\n  cloud_ctx = ctx['securityContext'].get('cloud', {'roles': []})\n  return cloud_ctx.get('roles', [])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToRoles: ({ securityContext }) => {\n    const cloud_ctx = securityContext.cloud || { roles: [] }\n    return cloud_ctx.roles || []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Dimension\nDESCRIPTION: Shows how to define a number dimension for numeric data types.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    amount: {\n      sql: `amount`,\n      type: `number`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: amount\n        sql: amount\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Organizing View Members into Folders\nDESCRIPTION: Shows how to use the folders parameter to organize view members into logical groups for better organization and display.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nview(`customers`, {\n  cubes: [\n    {\n      join_path: `users`,\n      includes: `*`\n    },\n    {\n      join_path: `users.orders`,\n      prefix: true,\n      includes: [\n        `status`,\n        `price`,\n        `count`\n      ]\n    }\n  ],\n\n  folders: [\n    {\n      name: `Basic Details`,\n      includes: [\n        `created_at`,\n        `location`,\n        `orders_status`,\n        `orders_count`\n      ]\n    },\n\n    {\n      name: `Sensitive Details`,\n      includes: [\n        `name`,\n        `gender`\n      ]\n    }\n  ]\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: customers\n\n    cubes:\n      - join_path: users\n        includes: \"*\"\n\n      - join_path: users.orders\n        prefix: true\n        includes:\n          - status\n          - price\n          - count\n\n    folders:\n      - name: Basic Details\n        includes:\n          - created_at\n          - location\n          - orders_status\n          - orders_count\n\n      - name: Sensitive Details\n        includes:\n          - name\n          - gender\n```\n\n----------------------------------------\n\nTITLE: Creating a Measure for Sessions with Form Submissions in Cube.js\nDESCRIPTION: This snippet demonstrates how to create a measure in the sessions cube that counts only sessions where a form was submitted, using the previously defined form_submitted_count dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  // ...,\n\n  // Add this measure to the `sessions` cube\n  measures: {\n    with_form_submitted_count: {\n      type: `count`,\n      sql: `session_id`,\n      filters: [{ sql: `${form_submitted_count} > 0` }],\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: sessions\n    # ...\n\n    # Add this measure to the `sessions` cube\n    measures:\n      - name: with_form_submitted_count\n        sql: session_id\n        type: count\n        filters: [{ sql: \"{form_submitted_count} > 0\" }]\n```\n\n----------------------------------------\n\nTITLE: Extending Base Events Cube\nDESCRIPTION: Shows how to extend the base_events cube to create specific event types (product_purchases and page_views) with additional dimensions. Demonstrates inheritance pattern in both YAML and JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/code-reusability-extending-cubes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: product_purchases\n    sql_table: product_purchases\n    extends: base_events\n\n    dimensions:\n      - name: product_name\n        sql: product_name\n        type: string\n\n  - name: page_views\n    sql_table: page_views\n    extends: base_events\n\n    dimensions:\n      - name: page_path\n        sql: page_path\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`product_purchases`, {\n  sql_table: `product_purchases`,\n  extends: base_events,\n\n  dimensions: {\n    product_name: {\n      sql: `product_name`,\n      type: `string`,\n    },\n  },\n});\n\ncube(`page_views`, {\n  sql_table: `page_views`,\n  extends: base_events,\n\n  dimensions: {\n    page_path: {\n      sql: `page_path`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing CubeContext in React Component\nDESCRIPTION: Shows how to use the CubeContext to access the cubeApi directly within a React component. It demonstrates loading data using the cubeApi and rendering the results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-react.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CubeContext } from '@cubejs-client/react';\n\nexport default function DisplayComponent() {\n  const { cubeApi } = React.useContext(CubeContext);\n  const [rawResults, setRawResults] = React.useState([]);\n  const query = {\n    ...\n  };\n\n  React.useEffect(() => {\n    cubeApi.load(query).then((resultSet) => {\n      setRawResults(resultSet.rawData());\n    });\n  }, [query]);\n\n  return (\n    <>\n      {rawResults.map(row => (\n        ...\n      ))}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Index to Pre-aggregation in Cube.js (YAML)\nDESCRIPTION: This snippet demonstrates how to add the same 'category_productname_zipcode_index' to the 'main' pre-aggregation in Cube.js using YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: main\n        # ...\n\n        indexes:\n          - name: category_productname_zipcode_index\n            columns:\n              - product_category\n              - zip_code\n              - product_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube with Python\nDESCRIPTION: Example of configuring Cube using Python in cube.py file. Shows how to set base path and implement query rewrite functionality for filtering queries based on security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n# Base path for the REST API\nconfig.base_path = '/cube-api'\n\n# Inspect, modify, or restrict every query\n@config('query_rewrite')\ndef query_rewrite(query: dict, ctx: dict) -> dict:\n  if 'order_id' in ctx['securityContext']:\n    query['filters'].append({\n      'member': 'orders_view.id',\n      'operator': 'equals',\n      'values': [ctx['securityContext']['order_id']]\n    })\n  return query\n```\n\n----------------------------------------\n\nTITLE: Complete Updated Orders Cube\nDESCRIPTION: Full definition of the orders cube including all measures and dimensions after adding completed count and percentage calculations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/create-data-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n\n    joins:\n      - name: users\n        sql: \"{CUBE}.USER_ID = {users}.ID\"\n        relationship: many_to_one\n\n    dimensions:\n      - name: status\n        sql: STATUS\n        type: string\n\n      - name: id\n        sql: ID\n        type: number\n        primary_key: true\n\n      - name: created_at\n        sql: CREATED_AT\n        type: time\n\n      - name: completed_at\n        sql: COMPLETED_AT\n        type: time\n\n    measures:\n      - name: count\n        type: count\n\n      - name: completed_count\n        type: count\n        filters:\n          - sql: \"{CUBE}.status = 'completed'\"\n\n      - name: completed_percentage\n        type: number\n        sql: \"(100.0 * {CUBE.completed_count} / NULLIF({CUBE.count}, 0))\"\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: Enabling Mixed rolling window queries in Cube.js\nDESCRIPTION: This feature allows combining rolling window queries with regular measure queries from rollup tables. This addition enhances query flexibility and performance when working with time-series data. Further details can be found in commit 3147e33.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n3147e33\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration Components\nDESCRIPTION: Lists the main components of the Kubernetes configuration including Cube API deployment and service, Cube Store deployment and service, and Redis deployment and service. Uses hostPath volumes for data persistence.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/minikube/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nContains:\\n- Cube API - `Deployment` and `Service`\\n- Cube Store - `Deployment` and `Service`\\n- Redis - `Deployment` and `Service`\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Real-Time Data Updates in Cube.js\nDESCRIPTION: Sets up a subscription to receive real-time data updates. This method allows continuous monitoring of data changes over time with a callback function to handle updates.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncubeApi.subscribe(\n  {\n    measures: ['Logs.count'],\n    timeDimensions: [\n      {\n        dimension: 'Logs.time',\n        granularity: 'hour',\n        dateRange: 'last 1440 minutes',\n      },\n    ],\n  },\n  options,\n  (error, resultSet) => {\n    if (!error) {\n      // handle the update\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-aggregation Refresh Key in YAML\nDESCRIPTION: This snippet shows how to configure the refresh key for a pre-aggregation in YAML format. It sets the refresh interval to 12 hours.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: amount_by_created\n        type: rollup\n        measures:\n          - amount\n        time_dimension: created_at\n        granularity: month\n        refresh_key:\n          every: 12 hour\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Python Configuration\nDESCRIPTION: Demonstrates three ways to access environment variables in a cube.py configuration file using Python's os module: os.getenv() with None as fallback, os.getenv() with a default value, and os.environ[] which raises an error if the variable doesn't exist.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nvalue_or_none = os.getenv('MY_ENV_VAR')\nprint(value_or_none)\n\nvalue_or_default = os.getenv('MY_OTHER_ENV_VAR', 'my_default_value')\nprint(value_or_default)\n\nvalue_or_error = os.environ['MY_OTHER_ENV_VAR']\nprint(value_or_error)\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_PARAMS with Function Argument in JavaScript\nDESCRIPTION: Demonstrates how to use FILTER_PARAMS context variable with a function argument in JavaScript. This example filters BigQuery events table based on a date range.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`events`, {\n  sql: `\n    SELECT *\n    FROM schema.\\`events*\\`\n    WHERE ${FILTER_PARAMS.events.date.filter(\n      (x, y) => `\n        _TABLE_SUFFIX >= FORMAT_TIMESTAMP('%Y%m%d', TIMESTAMP(${x})) AND\n        _TABLE_SUFFIX <= FORMAT_TIMESTAMP('%Y%m%d', TIMESTAMP(${y}))\n      `\n    )}\n  `,\n\n  dimensions: {\n    date: {\n      sql: `date`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Composite Primary Key Definition\nDESCRIPTION: Example showing how to create a composite primary key by concatenating multiple columns.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  dimensions: {\n    id: {\n      sql: `${CUBE}.user_id || '-' || ${CUBE}.signup_week || '-' || ${CUBE}.activity_week`,\n      type: `string`,\n      primary_key: true,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.user_id || '-' || {CUBE}.signup_week || '-' || {CUBE}.activity_week\"\n        type: string\n        primary_key: true\n```\n\n----------------------------------------\n\nTITLE: Query Results for Status Counts on Different Dates\nDESCRIPTION: JSON responses showing the count of orders with 'shipped' status on two different dates. The change in numbers demonstrates how the status snapshots capture the evolving data state.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/snapshots.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Shipped as of April 1, 2019:\n[\n  {\n    \"status_snapshots.count\": 16,\n  }\n];\n```\n\nLANGUAGE: json\nCODE:\n```\n// Shipped as of May 1, 2019:\n[\n  {\n    \"status_snapshots.count\": 25,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Min and Max Measures in Cube.js\nDESCRIPTION: This snippet demonstrates how to create min and max measures in Cube.js. It shows examples of finding the earliest and latest purchase dates.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    date_first_purchase: {\n      sql: `date_purchase`,\n      type: `min`,\n    },\n    date_last_purchase: {\n      sql: `date_purchase`,\n      type: `max`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: date_first_purchase\n        sql: date_purchase\n        type: min\n      - name: date_last_purchase\n        sql: date_purchase\n        type: max\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store Cluster with Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to set up a Cube Store cluster using Docker Compose. It defines services for a router and two workers, configuring environment variables for cluster communication and data storage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cubestore_router:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_PORT=9999\n      - CUBESTORE_SERVER_NAME=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n    depends_on:\n      - cubestore_worker_1\n      - cubestore_worker_2\n\n  cubestore_worker_1:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_SERVER_NAME=cubestore_worker_1:10001\n      - CUBESTORE_WORKER_PORT=10001\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n\n  cubestore_worker_2:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_SERVER_NAME=cubestore_worker_2:10002\n      - CUBESTORE_WORKER_PORT=10002\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Dimensions in Cube.js Query\nDESCRIPTION: Illustrates how to use the 'timeDimensions' property to specify a time dimension, date range, and granularity in a Cube.js query. This is a convenient shortcut for grouping and filtering by time.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"stories.count\"],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"stories.time\",\n      \"dateRange\": [\"2015-01-01\", \"2015-12-31\"],\n      \"granularity\": \"month\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Completion Percentage Measure\nDESCRIPTION: Creating a derived measure to calculate the percentage of completed orders based on existing count measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/create-data-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: completed_percentage\n  type: number\n  sql: \"(100.0 * {CUBE.completed_count} / NULLIF({CUBE.count}, 0))\"\n  format: percent\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval-based Refresh Key\nDESCRIPTION: Example demonstrating how to set up an interval-based refresh key that updates data on an hourly basis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  sql_table: `orders`,\n\n  refresh_key: {\n    every: `1 hour`,\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    sql_table: orders\n    refresh_key:\n      every: 1 hour\n```\n\n----------------------------------------\n\nTITLE: Configuring Preset Sync in Python\nDESCRIPTION: Python configuration for Semantic Layer Sync with Preset. Uses the @config decorator to define sync settings including API credentials and workspace details. Requires valid Preset API token, secret, workspace URL, and database name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/preset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'preset',\n      'name': \"Preset Sync\",\n      'config': {\n        'api_token': '07988f63-c200-499e-97c9-ba137d8918aa',\n        'api_secret': 'c19fbab4fd4945899795d32898f2e1165bef8e5ee653499e92f083b3d088aecb',\n        'workspace_url': '12345678.us1a.app.preset.io',\n        'database': 'Cube Cloud: production-deployment'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Pivot Result Example\nDESCRIPTION: Shows the structure of data returned by the pivot method for time-based measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    xValues: [\"2015-01-01T00:00:00\"],\n    yValuesArray: [\n      [['Stories.count'], 27120]\n    ]\n  },\n  {\n    xValues: [\"2015-02-01T00:00:00\"],\n    yValuesArray: [\n      [['Stories.count'], 25861]\n    ]\n  },\n  {\n    xValues: [\"2015-03-01T00:00:00\"],\n    yValuesArray: [\n      [['Stories.count'], 29661]\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Pre-aggregation Definition for Order Statuses\nDESCRIPTION: Definition of a pre-aggregation to optimize status-based queries, shown in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/getting-started-pre-aggregations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: order_statuses\n        dimensions:\n          - status\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    order_statuses: {\n      dimensions: [status],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Query Using Pre-aggregations\nDESCRIPTION: Shows a sample query that utilizes the configured pre-aggregations to retrieve data efficiently.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"users.name\"],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"orders.created_at\",\n      \"dateRange\": \"This month\"\n    }\n  ],\n  \"order\": {\n    \"orders.count\": \"desc\"\n  },\n  \"measures\": [\"orders.count\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Meta Information from Cube.js\nDESCRIPTION: Example of using the /v1/meta endpoint to retrieve meta-information about cubes and views defined in the Cube.js data model. This includes details about measures, dimensions, and other cube properties.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -G \\\n  http://localhost:4000/cubejs-api/v1/meta\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cubes\": [\n    {\n      \"name\": \"Users\",\n      \"title\": \"Users\",\n      \"meta\": {\n          \"someKey\": \"someValue\",\n          \"nested\": {\n            \"someKey\": \"someValue\"\n          }\n      },\n      \"connectedComponent\": 1,\n      \"measures\": [\n        {\n          \"name\": \"users.count\",\n          \"title\": \"Users Count\",\n          \"shortTitle\": \"Count\",\n          \"aliasName\": \"users.count\",\n          \"type\": \"number\",\n          \"aggType\": \"count\",\n          \"drillMembers\": [\"users.id\", \"users.city\", \"users.createdAt\"]\n        }\n      ],\n      \"dimensions\": [\n        {\n          \"name\": \"users.city\",\n          \"title\": \"Users City\",\n          \"type\": \"string\",\n          \"aliasName\": \"users.city\",\n          \"shortTitle\": \"City\",\n          \"suggestFilterValues\": true\n        }\n      ],\n      \"segments\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Expressions with Measures and Dimensions\nDESCRIPTION: Shows how to define measures and dimensions with SQL expressions in both YAML and JavaScript formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: statuses\n        sql: \"STRING_AGG(status)\"\n        type: string\n\n    dimensions:\n      - name: status\n        sql: \"UPPER(status)\"\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    statuses: {\n      sql: `STRING_AGG(status)`,\n      type: `string`,\n    },\n  },\n\n  dimensions: {\n    status: {\n      sql: `UPPER(status)`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Stack for Cube Deployment\nDESCRIPTION: This YAML configuration sets up a Docker Compose stack for Cube, including API instances, refresh worker, and Cube Store nodes. It uses BigQuery as a data source and includes environment variables for configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube_api:\n    restart: always\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_DB_TYPE=bigquery\n      - CUBEJS_DB_BQ_PROJECT_ID=cube-bq-cluster\n      - CUBEJS_DB_BQ_CREDENTIALS=<BQ-KEY>\n      - CUBEJS_DB_EXPORT_BUCKET=cubestore\n      - CUBEJS_CUBESTORE_HOST=cubestore_router\n      - CUBEJS_API_SECRET=secret\n    volumes:\n      - .:/cube/conf\n    depends_on:\n      - cube_refresh_worker\n      - cubestore_router\n      - cubestore_worker_1\n      - cubestore_worker_2\n\n  cube_refresh_worker:\n    restart: always\n    image: cubejs/cube:latest\n    environment:\n      - CUBEJS_DB_TYPE=bigquery\n      - CUBEJS_DB_BQ_PROJECT_ID=cube-bq-cluster\n      - CUBEJS_DB_BQ_CREDENTIALS=<BQ-KEY>\n      - CUBEJS_DB_EXPORT_BUCKET=cubestore\n      - CUBEJS_CUBESTORE_HOST=cubestore_router\n      - CUBEJS_API_SECRET=secret\n      - CUBEJS_REFRESH_WORKER=true\n    volumes:\n      - .:/cube/conf\n\n  cubestore_router:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_PORT=9999\n      - CUBESTORE_SERVER_NAME=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n\n  cubestore_worker_1:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_SERVER_NAME=cubestore_worker_1:10001\n      - CUBESTORE_WORKER_PORT=10001\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n    depends_on:\n      - cubestore_router\n\n  cubestore_worker_2:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_WORKERS=cubestore_worker_1:10001,cubestore_worker_2:10002\n      - CUBESTORE_SERVER_NAME=cubestore_worker_2:10002\n      - CUBESTORE_WORKER_PORT=10002\n      - CUBESTORE_REMOTE_DIR=/cube/data\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n    volumes:\n      - .cubestore:/cube/data\n    depends_on:\n      - cubestore_router\n```\n\n----------------------------------------\n\nTITLE: Products Cube Definition\nDESCRIPTION: Data model definition for products using both YAML and JavaScript syntax with security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    sql_table: products\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql_table: `products`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Authentication Check in Python\nDESCRIPTION: This Python code demonstrates implementing the check_sql_auth function for Cube to validate user credentials. It provides a basic structure for authenticating requests to the SQL API and adding user attributes to the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/sql-api-ldap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n \n@config('check_sql_auth')\ndef check_sql_auth(req: dict, user_name: str, password: str) -> dict:\n  # Verify user_name and password\n  authenticated = # ...\n  \n  if authenticated:\n    return {\n      'password': password,\n      'securityContext': {\n        # You can user-related attributes to the security context\n      }\n    }\n \n  raise Exception('Incorrect user name or password')\n```\n\n----------------------------------------\n\nTITLE: Advanced Hierarchy with Joins\nDESCRIPTION: Shows how to create hierarchies that include dimensions from joined cubes and multiple hierarchy definitions within the same cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/hierarchies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  joins: {\n    orders: {\n      sql: `${CUBE.id} = ${orders.user_id}`,\n      relationship: `one_to_many`\n    }\n  },\n\n  dimensions: {\n    state: {\n      sql: `state`,\n      type: `string`\n    },\n\n    city: {\n      sql: `city`,\n      type: `string`\n    },\n\n    status: {\n      sql: `status`,\n      type: `string`\n    }\n  },\n\n  hierarchies: {\n    location: {\n      title: `User Location`,\n      levels: [\n        state,\n        city\n      ]\n    },\n\n    statuses: {\n      title: `User & Order Statuses`,\n      levels: [\n        status,\n        orders.status\n      ]\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    joins:\n      - name: orders\n        sql: \"{CUBE.id} = {orders.user_id}\"\n        relationship: one_to_many\n\n    dimensions:\n      - name: state\n        sql: state\n        type: string\n\n      - name: city\n        sql: city\n        type: string\n\n      - name: status\n        sql: status\n        type: string\n\n    hierarchies:\n      - name: details\n        title: User Details\n        levels:\n          - status\n          - state\n          - city\n\n      - name: statuses\n        title: User & Order Statuses\n        levels:\n          - status\n          - orders.status\n```\n\n----------------------------------------\n\nTITLE: Defining Product Cube for Avocado Tenant (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the 'products' cube for the 'avocado' tenant, selecting products with odd id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql: `SELECT *\n    FROM public.Products\n    WHERE MOD (id, 2) = 1`,\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base Events Cube\nDESCRIPTION: Demonstrates creating a base cube with common events measures, dimensions and joins that can be extended by other cubes. Shows implementation in both YAML and JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/code-reusability-extending-cubes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: base_events\n    sql_table: events\n\n    joins:\n      - name: users\n        relationship: many_to_one\n        sql: \"{CUBE}.user_id = {users.id}\"\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: timestamp\n        sql: time\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`base_events`, {\n  sql_table: `events`,\n\n  joins: {\n    users: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.user_id = ${users.id}`,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    timestamp: {\n      sql: `time`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Firebolt Driver Feature Update\nDESCRIPTION: Automatic engine start functionality was added to the Firebolt driver to initialize the engine after establishing a connection.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-firebolt-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **firebolt:** Automatically start the engine after connection ([#9001](https://github.com/cube-js/cube/issues/9001)) ([8f45afa](https://github.com/cube-js/cube/commit/8f45afa28d568ad48b52b44a167f945b61a6e5eb))\n```\n\n----------------------------------------\n\nTITLE: Implement Cube Build DAG\nDESCRIPTION: Python DAG implementation using CubeBuildOperator to trigger and monitor pre-aggregation builds.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/airflow.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom pendulum import datetime\nfrom airflow.decorators import dag, task\nfrom cube_provider.operators.cube import CubeBuildOperator\n\n@dag(\n  start_date=datetime(2023, 6, 1),\n  schedule='*/1 * * * *',\n  max_active_runs=1,\n  concurrency=1,\n  default_args={\"retries\": 1, \"cube_conn_id\": \"cube_default\"},\n  tags=[\"cube\"],\n)\ndef cube_build_workflow():\n  build_op = CubeBuildOperator(\n      task_id=\"build_op\",\n      selector={\n        \"contexts\": [\n          {\"securityContext\": {}}\n        ],\n        \"timezones\": [\"UTC\"]\n      },\n      complete=True,\n      wait=10,\n  )\n\n  @task()\n  def print_op(data: Any):\n    print(f\"Result: {data}\")\n\n  print_op(build_op.output)\n\ncube_build_workflow()\n```\n\n----------------------------------------\n\nTITLE: ID Format Dimension\nDESCRIPTION: Demonstrates using the ID format to display numeric IDs without comma formatting.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    image: {\n      sql: `id`,\n      type: `number`,\n      format: `id`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: image\n        sql: id\n        type: number\n        format: id\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to a View\nDESCRIPTION: Shows how to add custom metadata to a view using the meta parameter, which can be used to pass any information to the frontend.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nview(`active_users`, {\n  meta: {\n    any: `value`\n  }\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: active_users\n    meta:\n      any: value\n```\n\n----------------------------------------\n\nTITLE: Defining Segments in Cube.js Data Models using YAML\nDESCRIPTION: This snippet shows how to create a segment named 'only_completed' which filters for completed orders in a Cube.js data model using YAML syntax. Segments provide reusable filters across multiple queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    segments:\n      - name: only_completed\n        sql: \"{CUBE}.status = 'completed'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dimensions in Cube.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define dimensions for city and state in a Cube.js data model using JavaScript syntax. It creates a 'users' cube with 'city' and 'state' dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  dimensions: {\n    city: {\n      sql: `city`,\n      type: `string`,\n    },\n\n    state: {\n      sql: `state`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Filters to Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to add conditional filters to measure calculations in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: orders_completed_count\n        sql: id\n        type: count\n        filters:\n          - sql: \"{CUBE}.status = 'completed'\"\n```\n\n----------------------------------------\n\nTITLE: Reuse DuckDB connection in Cube.js\nDESCRIPTION: This commit introduces connection reuse to the DuckDB driver in Cube.js. This optimization avoids the overhead of establishing new connections for each query, leading to improved performance and reduced resource consumption.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Implementing Drilldowns in Cube.js Data Model (YAML)\nDESCRIPTION: YAML configuration example showing how to define drilldowns in a Cube.js data model. This demonstrates the same e-commerce drilldown functionality as the JavaScript example but using YAML syntax for data modeling.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/drilldowns.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    joins:\n      - name: users\n        relationship: many_to_one\n        sql: \"{CUBE}.user_id = {users.id}\"\n\n      - name: products\n        relationship: many_to_one\n        sql: \"{CUBE}.product_id = {products.id}\"\n\n    measures:\n      - name: count\n        type: count\n        # Here we define all possible properties we might want\n        # to \"drill down\" on from our front-end\n        drill_members:\n          - id\n          - status\n          - products.name\n          - users.city\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n        public: true\n\n      - name: status\n        sql: status\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Fix for ClickHouse Driver: Empty Schema Issue\nDESCRIPTION: This commit addresses a bug in the ClickHouse driver that resulted in an empty schema when the CUBEJS_DB_NAME environment variable was provided. The fix ensures that the schema is correctly populated even when the database name is explicitly specified via the environment variable.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n### Bug Fixes\n\n- **clickhouse-driver:** Empty schema when CUBEJS_DB_NAME is provided ([7117e89](https://github.com/statsbotco/cubejs-client/commit/7117e89))\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-aggregation Refresh Key in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the refresh key for a pre-aggregation in JavaScript. It sets the refresh interval to 12 hours.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  pre_aggregations: {\n    amount_by_created: {\n      type: `rollup`,\n      measures: [amount],\n      time_dimension: created_at,\n      granularity: `month`,\n      refresh_key: {\n        every: `12 hour`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Cube Cloud Deployment\nDESCRIPTION: Commands to set up Git credentials and add Cube Cloud as a remote repository for deployment\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/continuous-deployment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config credential.helper store\ngit remote add cubecloud <YOUR-CUBE-CLOUD-GIT-URL>\ngit push cubecloud master\n```\n\n----------------------------------------\n\nTITLE: Cube.js Data Model for Nested Aggregates\nDESCRIPTION: Complete Cube.js data model showing how to implement nested aggregates using two cubes with joins and subquery dimensions. Includes sample data and measure definitions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/nested-aggregates.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: nested_agg_sales\n    sql: >\n      SELECT 1 AS id, 1 AS store_id, 1 AS product_id, 10 AS sales UNION ALL\n      SELECT 2 AS id, 1 AS store_id, 1 AS product_id, 20 AS sales UNION ALL\n      SELECT 3 AS id, 1 AS store_id, 2 AS product_id, 30 AS sales UNION ALL\n      SELECT 4 AS id, 1 AS store_id, 2 AS product_id, 40 AS sales UNION ALL\n      SELECT 5 AS id, 2 AS store_id, 1 AS product_id, 50 AS sales UNION ALL\n      SELECT 6 AS id, 2 AS store_id, 1 AS product_id, 60 AS sales UNION ALL\n      SELECT 7 AS id, 2 AS store_id, 2 AS product_id, 70 AS sales UNION ALL\n      SELECT 8 AS id, 2 AS store_id, 2 AS product_id, 80 AS sales\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: store_id\n        sql: store_id\n        type: number\n\n      - name: product_id\n        sql: product_id\n        type: number\n\n      - name: store_product_id\n        sql: \"CONCAT({store_id}, '-', {product_id})\"\n        type: string\n\n    measures:\n      - name: sales\n        sql: sales\n        type: sum\n\n  - name: nested_agg_stores_orders\n    sql: >\n      SELECT store_id, product_id\n      FROM (\n        SELECT 1 AS id, 1 AS store_id, 1 AS product_id, 10 AS sales UNION ALL\n        SELECT 2 AS id, 1 AS store_id, 1 AS product_id, 20 AS sales UNION ALL\n        SELECT 3 AS id, 1 AS store_id, 2 AS product_id, 30 AS sales UNION ALL\n        SELECT 4 AS id, 1 AS store_id, 2 AS product_id, 40 AS sales UNION ALL\n        SELECT 5 AS id, 2 AS store_id, 1 AS product_id, 50 AS sales UNION ALL\n        SELECT 6 AS id, 2 AS store_id, 1 AS product_id, 60 AS sales UNION ALL\n        SELECT 7 AS id, 2 AS store_id, 2 AS product_id, 70 AS sales UNION ALL\n        SELECT 8 AS id, 2 AS store_id, 2 AS product_id, 80 AS sales\n      ) AS raw\n      GROUP BY 1, 2\n\n    joins:\n      - name: nested_agg_sales\n        sql: \"{nested_agg_stores_orders.store_product_id} = {nested_agg_sales.store_product_id}\"\n        relationship: one_to_many\n\n    dimensions:\n      - name: store_id\n        sql: store_id\n        type: number\n\n      - name: product_id\n        sql: product_id\n        type: number\n\n      - name: store_product_id\n        sql: \"CONCAT({store_id}, '-', {product_id})\"\n        type: string\n        primary_key: true\n\n      - name: sales_sum\n        sql: \"{nested_agg_sales.sales}\"\n        type: number\n        sub_query: true\n\n    measures:\n      - name: median_sales\n        sql: \"PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY {sales_sum})\"\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Connection in Cube.js\nDESCRIPTION: This snippet shows the required environment variables to set up a connection to a SQLite database in a Cube.js project. It specifies the database type as SQLite and provides a name for the database.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/sqlite.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=sqlite\nCUBEJS_DB_NAME=my_sqlite_database\n```\n\n----------------------------------------\n\nTITLE: Introducing Multiple Data Source Support in MySQL Driver\nDESCRIPTION: Feature enhancement for supporting multiple data sources in the MySQL driver, enabling more flexible database connections and query handling\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Multiple data source feature implementation\nmultiple data source ([#5326](https://github.com/cube-js/cube.js/issues/5326)) ([334af8c](https://github.com/cube-js/cube.js/commit/334af8c56cd02ae551844e9d1e9ab5e107fb1555))\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy in Cube.js\nDESCRIPTION: Configuration for scheduled_refresh_contexts and context_to_app_id to support multitenancy. This code enables Cube to distinguish between tenants by setting up security contexts for different users and mapping those contexts to tenant identifiers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/multitenancy/custom-data-model-per-tenant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('scheduled_refresh_contexts')\ndef scheduled_refresh_contexts() -> list[object]:\n  return [\n    {\n      'securityContext': { 'tenant_id': 'Alice' }\n    },\n    {\n      'securityContext': { 'tenant_id': 'Bob' }\n    }\n  ]\n\n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> str:\n  return ctx['securityContext']['tenant_id']\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  scheduledRefreshContexts: () => {\n    return [\n      {\n        securityContext: { tenant_id: 'Alice' }\n      },\n      {\n        securityContext: { tenant_id: 'Bob' }\n      }\n    ]\n  },\n\n  contextToAppId: ({ securityContext }) => {\n    return securityContext.tenant_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Completed Count Measure\nDESCRIPTION: Definition of a new measure to count only completed orders using a filter condition on the status dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/create-data-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: completed_count\n  type: count\n  filters:\n    - sql: \"{CUBE}.status = 'completed'\"\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token in Node.js\nDESCRIPTION: Example showing how to generate a JWT token with 30-day expiration using the jsonwebtoken package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\nconst CUBE_API_SECRET = \"secret\";\n\nconst cubeToken = jwt.sign({}, CUBE_API_SECRET, { expiresIn: \"30d\" });\n```\n\n----------------------------------------\n\nTITLE: Defining Joins in Cube.js\nDESCRIPTION: This snippet illustrates how to define a join between two cubes in Cube.js. It shows a left join from the 'orders' cube to the 'line_items' cube with a many-to-one relationship.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  joins: {\n    line_items: {\n      relationship: `many_to_one`,\n      // Here we use the `CUBE` global to refer to the current cube,\n      // so the following is equivalent to `orders.id = line_items.order_id`\n      sql: `${CUBE}.id = ${line_items.order_id}`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    joins:\n      - name: line_items\n        # Here we use the `CUBE` global to refer to the current cube,\n        # so the following is equivalent to `orders.id = line_items.order_id`\n        sql: \"{CUBE}.id = {line_items.order_id}\"\n        relationship: many_to_one\n```\n\n----------------------------------------\n\nTITLE: Triggering Pre-aggregation Jobs with Curl (Bash)\nDESCRIPTION: This snippet demonstrates how to trigger pre-aggregation builds using a POST request with curl. It includes examples for triggering all pre-aggregations, specific cube pre-aggregations, and pre-aggregations with date range and security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d '{\n    \"action\": \"post\",\n    \"selector\": {\n      \"contexts\": [{ \"securityContext\": {} }],\n      \"timezones\": [\"UTC\"]\n    }\n  }' \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  https://localhost:4000/cubejs-api/v1/pre-aggregations/jobs\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d '{\n    \"action\": \"post\",\n    \"selector\": {\n      \"contexts\": [{ \"securityContext\": {} }],\n      \"timezones\": [\"UTC\"],\n      \"cubes\": [\"orders\"]\n    }\n  }' \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  https://localhost:4000/cubejs-api/v1/pre-aggregations/jobs\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d '{\n    \"action\": \"post\",\n    \"selector\": {\n      \"contexts\": [{ \"securityContext\": {} }],\n      \"timezones\": [\"UTC\"],\n      \"preAggregations\": [\"orders.main\"]\n    }\n  }' \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  https://localhost:4000/cubejs-api/v1/pre-aggregations/jobs\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d '{\n    \"action\": \"post\",\n    \"selector\": {\n      \"contexts\": [{ \"securityContext\": { \"tenantId\": \"tenant1\" } }],\n      \"timezones\": [\"America/Los_Angeles\"],\n      \"preAggregations\": [\"orders.main\"],\n      \"dateRange\": [\"2020-01-01\", \"2020-02-01\"]\n    }\n  }' \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  https://localhost:4000/cubejs-api/v1/pre-aggregations/jobs\n```\n\n----------------------------------------\n\nTITLE: Query Demonstrating Transitive Join Resolution in JSON\nDESCRIPTION: A JSON query that requests measures from cube 'a' and dimensions from cube 'c'. Cube will automatically resolve the transitive joins a→b→c using Dijkstra's algorithm to find the optimal join path.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"a.count\"],\n  \"dimensions\": [\"c.category\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Snapshots Cube in YAML\nDESCRIPTION: YAML definition of a status_snapshots cube that extends the statuses cube. It includes the same SQL query as the JavaScript version to generate a date range and join with statuses.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/snapshots.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: status_snapshots\n    extends: statuses\n    sql: >\n      -- Create a range from the earlist date to the latest date\n      WITH range AS (\n        SELECT date\n        FROM GENERATE_SERIES(\n          (SELECT MIN(changed_at) FROM {statuses.sql()} AS statuses),\n          (SELECT MAX(changed_at) FROM {statuses.sql()} AS statuses),\n          INTERVAL '1 DAY'\n        ) AS date\n      )\n\n      -- Calculate snapshots for every date in the range\n      SELECT range.date, statuses.*\n      FROM range\n      LEFT JOIN {statuses.sql()} AS statuses\n        ON range.date >= statuses.changed_at\n        AND statuses.changed_at = (\n          SELECT MAX(changed_at)\n          FROM {statuses.sql()} AS sub_statuses\n          WHERE sub_statuses.order_id = statuses.order_id\n        )\n    dimensions:\n      date:\n        sql: date\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Measures in Cube.js using JavaScript\nDESCRIPTION: JavaScript configuration for a users cube that defines measures for average age, median age, and 95th percentile age using SQL functions like PERCENTILE_CONT.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/percentiles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"users\", {\n  measures: {\n    avg_age: {\n      sql: `age`,\n      type: `avg`,\n    },\n\n    median_age: {\n      sql: `PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY age)`,\n      type: `number`,\n    },\n\n    p95_age: {\n      sql: `PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY age)`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Vector Sink for Cube Cloud Logging\nDESCRIPTION: TOML configuration for setting up an AWS S3 sink in Vector to export Cube Cloud logs. Specifies bucket settings, authentication, encoding format, and input sources including cubejs-server, refresh-scheduler, warmup-job, and cubestore logs.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/s3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.aws_s3]\ntype = \"aws_s3\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\nbucket = \"your-s3-bucket-name\"\nregion = \"us-east-1\"\ncompression = \"gzip\"\n\n[sinks.aws_s3.auth]\naccess_key_id = \"$CUBE_CLOUD_MONITORING_AWS_ACCESS_KEY_ID\"\nsecret_access_key = \"$CUBE_CLOUD_MONITORING_AWS_SECRET_ACCESS_KEY\"\n\n[sinks.aws_s3.encoding]\ncodec = \"json\"\n\n[sinks.aws_s3.healthcheck]\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: SQL Logs for Optimized Refresh Key in Cube.js\nDESCRIPTION: These logs demonstrate how the optimized refresh key with FILTER_PARAMS applies date range filtering, ensuring only specific partitions are checked and updated when necessary.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/refreshing-select-partitions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nExecuting SQL: e1155b2f-859b-4e61-a760-17af891f5f0b\n--\n  select min((\"updated_orders\".created_at::timestamptz AT TIME ZONE 'UTC')) from public.orders AS \"updated_orders\"\n--\nExecuting SQL: e1155b2f-859b-4e61-a760-17af891f5f0b\n--\n  select max((\"updated_orders\".created_at::timestamptz AT TIME ZONE 'UTC')) from public.orders AS \"updated_orders\"\n--\nPerforming query completed: e1155b2f-859b-4e61-a760-17af891f5f0b (10ms)\nPerforming query completed: e1155b2f-859b-4e61-a760-17af891f5f0b (13ms)\nPerforming query: e1155b2f-859b-4e61-a760-17af891f5f0b\nPerforming query: e1155b2f-859b-4e61-a760-17af891f5f0b\nExecuting SQL: e1155b2f-859b-4e61-a760-17af891f5f0b\n--\n  SELECT max(updated_at) FROM public.orders WHERE created_at >= '2021-08-01T00:00:00.000Z'::timestamptz AND created_at <= '2021-08-31T23:59:59.999Z'::timestamptz\n--\nExecuting SQL: e1155b2f-859b-4e61-a760-17af891f5f0b\n--\n  SELECT max(updated_at) FROM public.orders WHERE created_at >= '2021-09-01T00:00:00.000Z'::timestamptz AND created_at <= '2021-09-30T23:59:59.999Z'::timestamptz\n```\n\n----------------------------------------\n\nTITLE: Tenant-Specific Products Cube Definition\nDESCRIPTION: Multi-tenant data model definition using compile context for dynamic table names.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    sql_table: \"{COMPILE_CONTEXT.security_context.userId}.products\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql_table: `${COMPILE_CONTEXT.security_context.userId}.products`,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to add human-readable descriptions to measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: orders_count\n        description: Count of all orders\n        sql: id\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Rewritten Query with Nested SELECT in SQL API\nDESCRIPTION: Demonstrates how to rewrite a query using a nested SELECT statement to perform calculations with expressions like CASE that are not supported in direct cube queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  city,\n  MAX(CASE\n    WHEN status = 'shipped' THEN '2-done'\n    ELSE '1-in-progress'\n  END) real_status,\n  SUM(amount) AS total\nFROM (\n  SELECT\n    users.city AS city,\n    SUM(number) AS amount,\n    orders.status\n  FROM orders\n  CROSS JOIN users\n  GROUP BY 1, 3\n) AS inner\nGROUP BY 1, 2\nORDER BY 1;\n```\n\n----------------------------------------\n\nTITLE: Result Data for Shipped Orders in Cube.js\nDESCRIPTION: This is the JSON response showing shipped orders after applying the mandatory filter. The results only include orders created after December 30th, 2019, sorted by creation date in ascending order.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/enforcing-mandatory-filters.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.number\": 57,\n    \"orders.created_at\": \"2019-12-31T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 38,\n    \"orders.created_at\": \"2020-01-01T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 10,\n    \"orders.created_at\": \"2020-01-02T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 19,\n    \"orders.created_at\": \"2020-01-02T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 15,\n    \"orders.created_at\": \"2020-01-02T00:00:00.000\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Dbt Model Column in Python\nDESCRIPTION: Shows how to access a specific column of a dbt model by name using the Model.column method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\ncolumn = model.column('status')\nprint(column)\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to a View in JavaScript and YAML\nDESCRIPTION: Shows how to add a human-readable description to a view, which can be displayed in Playground and exposed via APIs.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nview(`active_users`, {\n  description: `14 days rolling count of active users`,\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: active_users\n    description: 14 days rolling count of active users\n```\n\n----------------------------------------\n\nTITLE: Executing an Ungrouped SQL Query on Cube\nDESCRIPTION: This SQL query demonstrates an ungrouped query against the 'orders' cube, selecting individual order details including the calculated 'completed_percentage' measure.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, status, created_at, completed_percentage FROM orders\n```\n\n----------------------------------------\n\nTITLE: Configuring Dimension Title in Cube.js\nDESCRIPTION: Demonstrates how to override the default dimension display name using the title parameter in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  // ...\n\n  dimensions: {\n    meta_value: {\n      title: `Size`,\n      sql: `meta_value`,\n      type: `string`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    # ...\n\n    dimensions:\n      - name: meta_value\n        title: Size\n        sql: meta_value\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Docker Compose configuration for Cube Store with AWS S3 storage\nDESCRIPTION: This Docker Compose configuration sets up a Cube Store cluster using AWS S3 for persistent storage, including a router and a worker node.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cubestore_router:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_router:9999\n      - CUBESTORE_META_PORT=9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001\n      - CUBESTORE_S3_BUCKET=<BUCKET_NAME_IN_S3>\n      - CUBESTORE_S3_REGION=<BUCKET_REGION_IN_S3>\n      - CUBESTORE_AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\n      - CUBESTORE_AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\n\n  cubestore_worker_1:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_worker_1:9001\n      - CUBESTORE_WORKER_PORT=9001\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001\n      - CUBESTORE_S3_BUCKET=<BUCKET_NAME_IN_S3>\n      - CUBESTORE_S3_REGION=<BUCKET_REGION_IN_S3>\n      - CUBESTORE_AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\n      - CUBESTORE_AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\n    depends_on:\n      - cubestore_router\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Connections with Environment Variables in Cube Core\nDESCRIPTION: This snippet demonstrates how to set up SSL connections using environment variables in Cube Core. It shows how to specify paths to SSL certificate files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/using-ssl-connections-to-data-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_SSL_CA=/path/to/ssl/ca.pem\nCUBEJS_DB_SSL_CERT=/path/to/ssl/cert.pem\nCUBEJS_DB_SSL_KEY=/path/to/ssl/key.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Measure for Completed Percentage in YAML\nDESCRIPTION: This snippet shows how to create a derived measure 'completed_percentage' based on existing measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/create-data-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: completed_percentage\n  type: number\n  sql: \"(100.0 * {CUBE.completed_count} / NULLIF({CUBE.count}, 0))\"\n  format: percent\n```\n\n----------------------------------------\n\nTITLE: Generating Confluent Cloud API Keys using CLI\nDESCRIPTION: Commands to install the Confluent CLI tool and generate API keys for ksqlDB cluster access. These commands authenticate the user, select an environment, list available clusters, and create API credentials.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/ksqldb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask confluent-cli\nconfluent login\nconfluent environment use <YOUR-ENVIRONMENT-ID>\nconfluent ksql cluster list\nconfluent api-key create --resource <YOUR-KSQL-CLUSTER-ID>\n```\n\n----------------------------------------\n\nTITLE: Link Format Dimension\nDESCRIPTION: Shows how to create clickable links with optional custom labels using the link format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    order_link: {\n      sql: `'http://myswebsite.com/orders/' || id`,\n      type: `string`,\n      format: `link`,\n    },\n\n    crm_link: {\n      sql: `'https://na1.salesforce.com/' || id`,\n      type: `string`,\n      format: {\n        label: `View in Salesforce`,\n        type: `link`,\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: order_link\n        sql: \"'http://myswebsite.com/orders/' || id\"\n        type: string\n        format: link\n\n      - name: crm_link\n        sql: \"'https://na1.salesforce.com/' || id\"\n        type: string\n        format:\n          label: View in Salesforce\n          type: link\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy Sync in JavaScript\nDESCRIPTION: Example of configuring multitenancy support for Semantic Layer Sync in JavaScript. It shows how to set up different syncs for each department using Metabase.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    const department = securityContext.department;\n\n    return [\n      {\n        type: \"metabase\",\n        name: `Metabase Sync for ${department}`,\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"example.metabaseapp.com\",\n          database: `Cube Cloud: ${department}`,\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Measure Titles in Cube.js (JavaScript)\nDESCRIPTION: Illustrates how to customize the displayed names of measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    orders_count: {\n      title: `Number of Orders Placed`,\n      sql: `id`,\n      type: `count`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Trino driver feature\nDESCRIPTION: This commit introduces the Trino driver as a new feature within the Cube.js backend. The driver enables Cube.js to connect to and interact with Trino data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-trino-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n([e58c392](https://github.com/cube-js/cube.js/commit/e58c3924781b65f5631ee241b39a0bee1366273d))\n```\n\n----------------------------------------\n\nTITLE: Extending User Cube for Teachers and Students in YAML\nDESCRIPTION: YAML version of creating 'teachers' and 'students' cubes by extending the base 'users' cube with specific filters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: teachers\n    extends: users\n    sql: >\n      SELECT *\n      FROM {users.sql()}\n      WHERE type = 'teacher'\n\n  - name: students\n    extends: users\n    sql: >\n      SELECT *\n      FROM {users.sql()}\n      WHERE type = 'student'\n```\n\n----------------------------------------\n\nTITLE: Advanced Session Metrics Configuration\nDESCRIPTION: Implements advanced session metrics including events per session, bounce rate calculation, and referrer tracking.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  dimensions: {\n    number_events: {\n      sql: `${events.count}`,\n      type: `number`,\n      sub_query: true,\n    },\n    is_bounced: {\n      type: `string`,\n      case: {\n        when: [{ sql: `${number_events} = 1`, label: `True` }],\n        else: { label: `False` },\n      },\n    },\n  },\n  measures: {\n    bounced_count: {\n      sql: `session_id`,\n      type: `count`,\n      filters: [\n        {\n          sql: `${is_bounced} = 'True'`,\n        },\n      ],\n    },\n    bounce_rate: {\n      sql: `100.00 * ${bounced_count} / NULLIF(${count}, 0)`,\n      type: `number`,\n      format: `percent`,\n    },\n    first_referrer: {\n      type: `string`,\n      sql: `first_referrer`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Feature: Add pre-aggregations build jobs API endpoint\nDESCRIPTION: This feature introduces an API endpoint for managing pre-aggregations build jobs. This allows for programmatic control and monitoring of pre-aggregation build processes, enabling more efficient data processing and querying.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: DRY Implementation of Static Attributes in Cube.js\nDESCRIPTION: This snippet implements the same functionality as the static attributes approach but follows the DRY principle. It uses helper functions to generate SQL joins, values, and dimensions based on a statuses array.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst statuses = [\"completed\", \"processing\", \"shipped\"];\n\nconst createValue = (status, index) =>\n  `MIN(orders_${index}.created_at) AS created_at_${index}`;\n\nconst createJoin = (status, index) =>\n  `LEFT JOIN public.orders AS orders_${index}\n    ON users.id = orders_${index}.user_id\n    AND orders_${index}.status = '${status}'`;\n\nconst createDimension = (status, index) => ({\n  [`${status}_created_at`]: {\n    sql: (CUBE) => `created_at_${index}`,\n    type: `time`,\n  },\n});\n\ncube(`users_statuses_DRY`, {\n  sql: `\n    SELECT\n      users.first_name,\n      users.last_name,\n      ${statuses.map(createValue).join(\",\")}\n    FROM public.users AS users\n    ${statuses.map(createJoin).join(\"\")}\n    GROUP BY 1, 2\n  `,\n\n  dimensions: Object.assign(\n    {\n      name: {\n        sql: `first_name || ' ' || last_name`,\n        type: `string`,\n      },\n    },\n    statuses.reduce(\n      (all, status, index) => ({\n        ...all,\n        ...createDimension(status, index),\n      }),\n      {}\n    )\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing Testing Package\nDESCRIPTION: Introduction of the @cubejs-backend/testing package for testing functionality in Cube.js\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\nintroduce @cubejs-backend/testing ([c38ce23](https://github.com/cube-js/cube.js/commit/c38ce23f3658effb8ef26f14148bffab3aafb3e5))\n```\n\n----------------------------------------\n\nTITLE: YAML Style Guide Example for Cube\nDESCRIPTION: Example of YAML formatting best practices for Cube data modeling, showing proper indentation, list formatting, and string quoting conventions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: public.users\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: city\n        sql: city\n        type: string\n\n      - name: lifetime_value\n        sql: \"{line_items.total_amount}\"\n        type: number\n        sub_query: true\n\n    measures:\n      - name: count\n        type: count\n\n      - name: total_orders_amount\n        sql: \"{lifetime_value}\"\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Basic Join Definition in Cube.js\nDESCRIPTION: Basic structure for defining joins between cubes, showing the required parameters including relationship type and SQL condition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`my_cube`, {\n  // ...\n\n  joins: {\n    target_cube: {\n      relationship: `one_to_one` || `one_to_many` || `many_to_one`,\n      sql: `SQL ON clause`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: my_cube\n    # ...\n\n    joins:\n      - name: target_cube\n        relationship: one_to_one || one_to_many || many_to_one\n        sql: SQL ON clause\n```\n\n----------------------------------------\n\nTITLE: Example Folder Structure for Cube.js Models\nDESCRIPTION: Shows the recommended folder structure for organizing cube and view files within the model directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\nmodel\n├── cubes\n│   ├── orders.yml\n│   ├── products.yml\n│   └── users.yml\n└── views\n    └── revenue.yml\n```\n\n----------------------------------------\n\nTITLE: AI API Response with Generated Cube Query in JSON\nDESCRIPTION: Example response from the AI API containing a natural language explanation and the corresponding Cube query that answers the original question.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"To find where we have the highest Average Order Value (AOV) this year, we can analyze the data by comparing the AOV across different dimensions such as cities or states.\",\n  \"cube_query\": {\n    \"measures\": [\"orders_view.average_order_value\"],\n    \"dimensions\": [\"orders_view.users_city\"],\n    \"timeDimensions\": [\n      {\n        \"dimension\": \"orders_view.created_at\",\n        \"dateRange\": \"this year\"\n      }\n    ],\n    \"order\": {\n      \"orders_view.average_order_value\": \"desc\"\n    },\n    \"limit\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rewrite Engine Decimal Measure Support\nDESCRIPTION: This bug fix addresses an issue in the rewrite engine related to decimal measure support in CubeSQL. The fix ensures correct handling of decimal data types during query rewriting. This resolves potential inaccuracies or errors when working with decimal measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Rewrite engine decimal measure support ([8a0fa98](https://github.com/cube-js/cube.js/commit/8a0fa981b87b67281867c6073903fa9bb6826570))\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Measures in Cube.js (JavaScript)\nDESCRIPTION: Illustrates how to add custom metadata to measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    revenue: {\n      type: `sum`,\n      sql: `price`,\n      meta: {\n        any: \"value\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing CubeApi with Static Token in JavaScript\nDESCRIPTION: Creates an instance of the CubeApi using a static API token. This is the entry point for interacting with the Cube.js API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from '@cubejs-client/core';\nconst cubeApi = cube(\n  'CUBE-API-TOKEN',\n  { apiUrl: 'http://localhost:4000/cubejs-api/v1' }\n);\n```\n\n----------------------------------------\n\nTITLE: Complex Segment Definition for Multiple Cities\nDESCRIPTION: This snippet demonstrates a more complex segment definition that filters users from multiple cities using OR conditions. It's shown in both JavaScript and YAML formats.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  segments: {\n    sf_ny_users: {\n      sql: `\n        ${CUBE}.location = 'San Francisco' OR\n        ${CUBE}.location like '%New York%'\n      `,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    segments:\n      - name: sf_ny_users\n        sql: >\n          {CUBE}.location = 'San Francisco' OR {CUBE}.location like '%New York%'\n```\n\n----------------------------------------\n\nTITLE: Introduce React Hook and Provider\nDESCRIPTION: Introduces the `useCubeQuery` React hook and `CubeProvider` cubejsApi context provider for easier data fetching and management in React applications.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n- **react:** Introduce `useCubeQuery` react hook and `CubeProvider` cubejsApi context provider ([19b6fac](https://github.com/statsbotco/cubejs-client/commit/19b6fac))\n```\n\n----------------------------------------\n\nTITLE: Query Rewrite Implementation\nDESCRIPTION: Examples of implementing query rewrite functionality in both Python and JavaScript to filter data based on user_id from security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('query_rewrite')\ndef query_rewrite(query: dict, ctx: dict) -> dict:\n  if 'user_id' in ctx['securityContext']:\n    query['filters'].append({\n      'member': 'orders_view.users_id',\n      'operator': 'equals',\n      'values': [ctx['securityContext']['user_id']]\n    })\n  return query\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    \n    if (securityContext.user_id) {\n      query.filters.push({\n        member: \"orders_view.users_id\",\n        operator: \"equals\",\n        values: [securityContext.user_id],\n      });  \n    }\n\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Orders Cube Structure in YAML\nDESCRIPTION: This snippet shows the initial structure of the orders cube, including dimensions and a count measure.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/create-data-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n\n    joins:\n      - name: users\n        sql: \"{CUBE}.USER_ID = {users}.USER_ID\"\n        relationship: many_to_one\n\n    dimensions:\n      - name: status\n        sql: STATUS\n        type: string\n\n      - name: id\n        sql: ID\n        type: number\n        primary_key: true\n\n      - name: created_at\n        sql: CREATED_AT\n        type: time\n\n      - name: completed_at\n        sql: COMPLETED_AT\n        type: time\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Defining Transitive Joins in YAML Data Model\nDESCRIPTION: YAML configuration for three cubes (a, b, c) with join relationships defined between them. Shows how Cube handles transitive joins when querying measures and dimensions from cubes that aren't directly joined.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: a\n    # ...\n\n    joins:\n      - name: b\n        sql: \"{a}.b_id = {b.id}\"\n        relationship: many_to_one\n\n    measures:\n      - name: count\n        type: count\n\n  - name: b\n    # ...\n\n    joins:\n      - name: c\n        sql: \"{b}.c_id = {c.id}\"\n        relationship: many_to_one\n\n  - name: c\n    # ...\n\n    dimensions:\n      - name: category\n        sql: category\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Docker Compose configuration for Cube and Cube Store\nDESCRIPTION: This Docker Compose configuration sets up Cube and Cube Store services, including volume mounts and environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cubestore:\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_REMOTE_DIR=/cube/data\n    volumes:\n      - .cubestore:/cube/data\n\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_CUBESTORE_HOST=localhost\n    depends_on:\n      - cubestore\n    links:\n      - cubestore\n    volumes:\n      - ./model:/cube/conf/model\n```\n\n----------------------------------------\n\nTITLE: Async API Token Functionality\nDESCRIPTION: This commit introduces the feature to support `apiToken` as an async function for more flexible authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n- Support `apiToken` to be an async function ([3a3b5f5](https://github.com/statsbotco/cubejs-client/commit/3a3b5f5))\n```\n\n----------------------------------------\n\nTITLE: Defining Online Orders Cube in Cube.js\nDESCRIPTION: Cube definition for online orders with measures for customer count and revenue, along with a time dimension for created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/data-blending.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: online_orders\n    sql_table: online_orders\n\n    measures:\n      - name: customer_count\n        sql: user_id\n        type: count_distinct\n\n      - name: revenue\n        sql: amount\n        type: sum\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`online_orders`, {\n  sql_table: `online_orders`,\n\n  measures: {\n    customer_count: {\n      sql: `user_id`,\n      type: `count_distinct`,\n    },\n\n    revenue: {\n      sql: `amount`,\n      type: `sum`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Currency Format for Measures in Cube.js\nDESCRIPTION: This example shows how to apply currency formatting to a measure in Cube.js. It formats the total amount measure as a currency value.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    total_amount: {\n      sql: `amount`,\n      type: `sum`,\n      format: `currency`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: total_amount\n        sql: amount\n        type: sum\n        format: currency\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN ANALYZE Query Example\nDESCRIPTION: Shows EXPLAIN ANALYZE usage with detailed execution metrics including timing and resource usage statistics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE WITH cte AS (\n  SELECT o.count as count, p.name as product_name, p.description as product_description\n  FROM orders o\n    CROSS JOIN products p\n)\nSELECT COUNT(*) FROM cte;\n```\n\n----------------------------------------\n\nTITLE: Generating a Primary Key for post_topics Cube in YAML\nDESCRIPTION: This snippet demonstrates how to generate a primary key for the 'post_topics' cube when a table doesn't define one, using SQL concatenation in YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: post_topics\n    # ...\n\n    dimensions:\n      - name: id\n        sql: \"CONCAT({CUBE}.post_id, {CUBE}.topic_id)\"\n        type: number\n        primary_key: true\n```\n\n----------------------------------------\n\nTITLE: Configuring ksqlDB Environment Variables\nDESCRIPTION: Environment variable configuration for connecting Cube to a ksqlDB instance. Includes database type, URL, authentication credentials stored in a .env file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/ksqldb.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=ksql\nCUBEJS_DB_URL=https://xxxxxx-xxxxx.us-west4.gcp.confluent.cloud:443\nCUBEJS_DB_USER=username\nCUBEJS_DB_PASS=password\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Dimension Granularity\nDESCRIPTION: Shows how to implement time dimensions with custom granularities and reference them in other dimensions, including year and custom sunday_week granularity.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/calculated-members.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql: >\n      SELECT '2025-01-01T00:00:00Z' AS created_at UNION ALL\n      SELECT '2025-02-01T00:00:00Z' AS created_at UNION ALL\n      SELECT '2025-03-01T00:00:00Z' AS created_at\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n\n        granularities:\n          - name: sunday_week\n            interval: 1 week\n            offset: -1 day\n\n      - name: created_at__year\n        sql: \"{created_at.year}\"\n        type: time\n\n      - name: created_at__sunday_week\n        sql: \"{created_at.sunday_week}\"\n        type: time\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql: `\n    SELECT '2025-01-01T00:00:00Z' AS created_at UNION ALL\n    SELECT '2025-02-01T00:00:00Z' AS created_at UNION ALL\n    SELECT '2025-03-01T00:00:00Z' AS created_at\n  `,\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n\n      granularities: {\n        sunday_week: {\n          interval: `1 week`,\n          offset: `-1 day`\n        }\n      }\n    },\n\n    created_at__year: {\n      sql: `${created_at.year}`,\n      type: `time`\n    },\n\n    created_at__sunday_week: {\n      sql: `${created_at.sunday_week}`,\n      type: `time`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Member-Level Access for Tenants\nDESCRIPTION: Data model implementation that uses the 'public' parameter to control which cubes and measures each tenant can access. This ensures Alice and Bob see different perspectives of the data model based on their tenant_id.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/multitenancy/custom-data-model-per-tenant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% set tenant_id = COMPILE_CONTEXT['securityContext']['tenant_id'] %}\n\ncubes:\n  - name: cube_a\n    sql_table: table_a\n    public: {{ tenant_id == 'Alice' }}\n  \n    measures:\n      - name: count\n        type: count\n\n  - name: cube_b\n    sql_table: table_b\n    public: {{ tenant_id == 'Bob' }}\n  \n    measures:\n      - name: count\n        type: count\n\n  - name: cube_x\n    sql_table: table_x\n \n    measures:\n      - name: count\n        type: count\n\n      - name: count_a\n        type: count\n        public: {{ tenant_id == 'Alice' }}\n\n      - name: count_b\n        type: count\n        public: {{ tenant_id == 'Bob' }}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tenant_id } = COMPILE_CONTEXT.securityContext\n\ncube(`cube_a`, {\n  sql_table: `table_a`,\n  public: tenant_id == 'Alice',\n  \n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n\ncube(`cube_b`, {\n  sql_table: `table_b`,\n  public: tenant_id == 'Bob',\n  \n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n\ncube(`cube_x`, {\n  sql_table: `table_x`,\n  \n  measures: {\n    count: {\n      type: `count`\n    },\n\n    count_a: {\n      type: `count`,\n      public: tenant_id == 'Alice'\n    },\n\n    count_b: {\n      type: `count`,\n      public: tenant_id == 'Bob'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Indexes to Pre-aggregations\nDESCRIPTION: Shows how to add an index to the orders_rollup pre-aggregation to support rollup_join functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    pre_aggregations:\n      - name: orders_rollup\n        indexes:\n          - name: user_index\n            columns:\n              - CUBE.user_id\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  pre_aggregations: {\n    orders_rollup: {\n      indexes: {\n        user_index: {\n          columns: [CUBE.user_id],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Constants in JavaScript for Cube Data Models\nDESCRIPTION: This snippet demonstrates how to define and export an array of test user IDs as a constant. This constant can be reused across multiple files in the data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in constants.js\nexport const TEST_USER_IDS = [1, 2, 3, 4, 5];\n```\n\n----------------------------------------\n\nTITLE: Using __cubeJoinField for Direct Joins\nDESCRIPTION: Example of joining orders and products tables using the __cubeJoinField virtual column, demonstrating both LEFT JOIN and CROSS JOIN approaches.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/joins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT p.name, SUM(o.count) FROM orders o LEFT JOIN products p ON o.__cubeJoinField = p.__cubeJoinField GROUP BY 1 LIMIT 5;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT p.name, sum(o.count) FROM orders o CROSS JOIN products p GROUP BY 1 LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Databricks test suite\nDESCRIPTION: This feature adds a test suite specifically designed for Databricks. It ensures the compatibility and functionality of Cube.js within a Databricks environment, covering various aspects of data querying and processing.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Creating a Funnel with Changing User IDs\nDESCRIPTION: Shows how to implement a funnel where the user identifier changes between steps (e.g., anonymous to identified user tracking) using the nextStepUserId parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Funnels = require(`Funnels`);\n\ncube(`OnboardingFunnel`, {\n  extends: Funnels.eventFunnel({\n    userId: {\n      sql: `id`,\n    },\n    time: {\n      sql: `timestamp`,\n    },\n    steps: [\n      {\n        name: `View Page`,\n        eventsView: {\n          sql: `select anonymous_id as id, timestamp from pages`,\n        },\n      },\n      {\n        name: `Sign Up`,\n        eventsView: {\n          sql: `select anonymous_id as id, user_id, timestamp from sign_ups`,\n        },\n        nextStepUserId: {\n          sql: `user_id`,\n        },\n        timeToConvert: \"1 day\",\n      },\n      {\n        name: `Action`,\n        eventsView: {\n          sql: `select user_id as id from actions`,\n        },\n        timeToConvert: \"1 day\",\n      },\n    ],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Orders View in YAML\nDESCRIPTION: This snippet demonstrates how to create a view that combines measures and dimensions from multiple cubes to explore orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/create-data-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - created_at\n          - count\n          - completed_count\n          - completed_percentage\n\n      - join_path: orders.users\n        prefix: true\n        includes:\n          - city\n          - age\n          - state\n```\n\n----------------------------------------\n\nTITLE: Python Integration for Dynamic Data Model Generation\nDESCRIPTION: Demonstrates how to use Python functions with Cube's template context to generate data models from external API data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/jinja.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n \ntemplate = TemplateContext()\n\n@template.function('load_data')\ndef load_data():\n   client = MyApiClient(\"example.com\")\n   return client.load_data()\n\n\nclass MyApiClient:\n  def __init__(self, api_url):\n    self.api_url = api_url\n\n  # mock API call\n  def load_data(self):\n    api_response = {\n      \"cubes\": [\n        {\n          \"name\": \"cube_from_api\",\n          \"measures\": [\n            { \"name\": \"count\", \"type\": \"count\" },\n            { \"name\": \"total\", \"type\": \"sum\", \"sql\": \"amount\" }\n          ],\n          \"dimensions\": []\n        },\n        {\n          \"name\": \"cube_from_api_with_dimensions\",\n          \"measures\": [\n            { \"name\": \"active_users\", \"type\": \"count_distinct\", \"sql\": \"user_id\" }\n          ],\n          \"dimensions\": [\n            { \"name\": \"city\", \"sql\": \"city_column\", \"type\": \"string\" }\n          ]\n        }\n      ]\n    }\n    return api_response\n```\n\n----------------------------------------\n\nTITLE: Changing Security Context with Virtual Filter in SQL Query\nDESCRIPTION: This SQL query shows how to change the security context for a specific query using a virtual filter. It selects all columns from the 'orders' table for a different user context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/security.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders WHERE __user = 'anotheruser';\n```\n\n----------------------------------------\n\nTITLE: Supporting Streaming in MySQL Driver - Javascript\nDESCRIPTION: This feature introduces streaming support in the MySQL driver. Streaming allows for efficient handling of large result sets by processing data in smaller chunks, reducing memory usage and improving performance.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **mysql-driver:** Support streaming ([d694c91](https://github.com/cube-js/cube.js/commit/d694c91370ceb703a50aefdd42ae3a9834e9884c))\n```\n```\n\n----------------------------------------\n\nTITLE: Data Source Configuration in YAML Data Model\nDESCRIPTION: Shows how to specify data sources for different cubes using YAML configuration format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multiple-data-sources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    data_source: default\n\n  - name: orders_from_other_data_source\n    # ...\n\n    data_source: other_data_source\n```\n\n----------------------------------------\n\nTITLE: Alternative Order Format in Cube.js Query\nDESCRIPTION: This snippet shows an alternative way to specify the order in a Cube.js query using an array of tuples instead of an object.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\": [\n      [\"stories.time\", \"asc\"],\n      [\"stories.count\", \"asc\"]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Values in Cube.js\nDESCRIPTION: This JSON query retrieves all unique values for the 'city' dimension from the 'users' cube in Cube.js. It demonstrates how to structure a query to get distinct values for a specific field.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"users.city\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Client Core Feature - Date Filtering Enhancement\nDESCRIPTION: Added ability to filter dates inclusively when using <= or >= operators in CubeSQL queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-core/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nAdd ability to filter dates inclusive of date being passed in when using `<=` or `>=` (#7041)\n```\n\n----------------------------------------\n\nTITLE: Bugfix for Angular Package FilterMember in v0.28.51\nDESCRIPTION: Fix for FilterMember.replace() to avoid updating all filters when replacing one\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **cubejs-client-ngx:** FilterMember.replace() will no longer update all filters with replacement ([#3597](https://github.com/cube-js/cube/issues/3597)) ([f972ad3](https://github.com/cube-js/cube/commit/f972ad375a7baccf3f67b58a8f2148ab8b278201))\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installing the necessary Python packages sqlalchemy and pandas for connecting Jupyter to Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/jupyter.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sqlalchemy\npip install pandas\n```\n\n----------------------------------------\n\nTITLE: Setting Dimension Type in Cube.js\nDESCRIPTION: Shows how to set the required type parameter for a dimension, using a number type as an example.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    rating: {\n      sql: `rating`,\n      type: `number`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: rating\n        sql: rating\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Apache Superset in Python\nDESCRIPTION: This Python code snippet demonstrates how to configure Semantic Layer Sync for Apache Superset using the Cube configuration decorator. It includes authentication details and specifies the Superset URL and database.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/superset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'superset',\n      'name': 'Superset Sync',\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'superset.example.com',\n        'database': 'Cube Cloud: production-deployment'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Visibility in JavaScript\nDESCRIPTION: This snippet shows how to set the visibility of a cube using the public parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `public.orders`,\n  public: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Initial pg-wire Protocol Support\nDESCRIPTION: This feature introduces initial support for the pg-wire protocol in CubeSQL. The pg-wire protocol is the standard protocol for communicating with PostgreSQL databases. This enhances Cube.js's ability to interact with PostgreSQL and potentially other databases that support the protocol.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Initial support for pg-wire protocol ([1b87c8c](https://github.com/cube-js/cube.js/commit/1b87c8cc67055ab0be0c208505d2bd50b7abffc8))\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Configuration in Cube\nDESCRIPTION: Basic environment variables configuration for connecting Cube to a MySQL database. Includes required settings for host, database name, user credentials, and database type.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/mysql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=mysql\nCUBEJS_DB_HOST=my.mysql.host\nCUBEJS_DB_NAME=my_mysql_database\nCUBEJS_DB_USER=mysql_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Implementing contextToAppId for Multi-Cluster Routing in JavaScript\nDESCRIPTION: This JavaScript function implements contextToAppId for routing requests between multiple production clusters in a Cube Cloud production multi-cluster deployment. It ensures that requests from a particular tenant are always routed to the same production cluster.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/deployment-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.tenant_id}`;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Driver Implementations in JavaScript\nDESCRIPTION: Demonstrates how to load custom driver implementations in JavaScript using the driverFactory configuration option.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst VeryCustomDriver = require('cube-custom-driver');\n\nmodule.exports = {\n  driverFactory: ({ securityContext, dataSource }) => {\n    return new VeryCustomDriver({\n      /* options */\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP CORS Settings in Cube.js\nDESCRIPTION: Configures CORS settings for the Cube REST API including origin, methods, and other CORS-related options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.http = {\n  'cors': {\n    'origin': '*',\n    'methods': 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    'preflightContinue': False,\n    'optionsSuccessStatus': 204,\n    'maxAge': 86400,\n    'credentials': True\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  http: {\n    cors: {\n      origin: '*',\n      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n      preflightContinue: false,\n      optionsSuccessStatus: 204,\n      maxAge: 86400,\n      credentials: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Path in Python and JavaScript\nDESCRIPTION: Demonstrates how to set the path to data model files using the schema_path configuration option in both Python and JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.schema_path = 'my-data-model'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  schemaPath: 'my-data-model'\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Dimensions to Events Cube in Cube.js (YAML)\nDESCRIPTION: This YAML version adds dimensions to the 'events' cube, allowing for filtering events by time range and specific types. It includes primary keys and various data types for different fields.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    # ...\n\n    dimensions:\n      - name: anonymous_id\n        sql: anonymous_id\n        type: number\n        primary_key: true\n\n      - name: event_id\n        sql: event_id\n        type: number\n        primary_key: true\n\n      - name: timestamp\n        sql: timestamp\n        type: time\n\n      - name: event\n        sql: event\n        type: string\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Nested Aggregation\nDESCRIPTION: Example SQL query showing how to calculate median sales per product for each store using a CTE and double aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/nested-aggregates.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWITH sales_per_store_product AS (\n  SELECT store_id, product_id, SUM(sales) AS sales\n  FROM line_items\n  GROUP BY 1, 2\n)\n\nSELECT store_id, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY sales) AS sales_median\nFROM sales_per_store_product\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Export Bucket for Snowflake\nDESCRIPTION: This snippet shows how to set up a Google Cloud Storage export bucket for Snowflake in Cube using environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/snowflake.mdx#2025-04-17_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET=snowflake-export-bucket\nCUBEJS_DB_EXPORT_BUCKET_TYPE=gcs\nCUBEJS_DB_EXPORT_GCS_CREDENTIALS=<BASE64_ENCODED_SERVICE_CREDENTIALS_JSON>\nCUBEJS_DB_EXPORT_INTEGRATION=gcs_int\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Configuration for ClickHouse Driver\nDESCRIPTION: This bug fix enables HTTP protocol configuration to be passed to the ClickHouse driver, allowing more flexible connection options. Implemented in PR #9195.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Allow config http protocol to be passed to clickhouse driver. ([#9195](https://github.com/cube-js/cube/issues/9195)) ([0c15b01](https://github.com/cube-js/cube/commit/0c15b016359037281da856d72846c19b1bfb39aa))\n```\n\n----------------------------------------\n\nTITLE: Rendering dbt Models as YAML Cubes\nDESCRIPTION: YAML template showing how to render dbt models as Cube definitions with dimensions and measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  {% for model in dbt_models() %}\n  - {{ model.as_cube() }}\n\n    dimensions:\n      {{ model.as_dimensions(skip=['very_private_column']) }}\n\n    measures:\n      - name: count\n        type: count\n  {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy with contextToAppId and driverFactory in Cube.js\nDESCRIPTION: Implementation of Cube.js configuration for multitenancy, using contextToAppId to provide distinct cache identifiers for each tenant and driverFactory to select the appropriate database connection based on the tenant name from the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // Provides distinct identifiers for each tenant which are used as caching keys\n  contextToAppId: ({ securityContext }) =>\n    `CUBE_APP_${securityContext.tenant}`,\n\n  // Selects the database connection configuration based on the tenant name\n  driverFactory: ({ securityContext }) => {\n    if (!securityContext.tenant) {\n      throw new Error(\"No tenant found in Security Context!\");\n    }\n\n    if (securityContext.tenant === \"Avocado Inc\") {\n      return {\n        type: \"postgres\",\n        database: \"localDB\",\n        host: \"postgres\",\n        user: \"postgres\",\n        password: \"example\",\n        port: \"5432\",\n      };\n    }\n\n    if (securityContext.tenant === \"Mango Inc\") {\n      return {\n        type: \"postgres\",\n        database: \"ecom\",\n        host: \"demo-db.cube.dev\",\n        user: \"cube\",\n        password: \"12345\",\n        port: \"5432\",\n      };\n    }\n\n    throw new Error(\"Unknown tenant in Security Context\");\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CubeClientModule in Angular app.module.ts\nDESCRIPTION: Setup code for adding the CubeClientModule to an Angular application's module file, including configuration with API token and URL from environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-ngx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CubeClientModule } from '@cubejs-client/ngx';\nimport { environment } from '../../environments/environment';\n\nconst cubeOptions = {\n  token: environment.CUBE_API_TOKEN,\n  options: { apiUrl: environment.CUBE_API_URL }\n};\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...,\n    CubeClientModule.forRoot(cubeOptions)\n  ],\n  providers: [...],\n  bootstrap: [...]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Query Results for Manager Role in Cube.js\nDESCRIPTION: Sample JSON5 response showing the query results for a manager role. The data only includes orders with 'completed' and 'shipped' statuses, as filtered by the queryRewrite function.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/role-based-access.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\n// Manager\n[\n  {\n    \"orders.status\": \"completed\",\n    \"orders.count\": \"3346\",\n  },\n  {\n    \"orders.status\": \"shipped\",\n    \"orders.count\": \"3300\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering dbt Models by Tags\nDESCRIPTION: Python code showing how to filter dbt models by tags.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\ndbt = Dbt.from_url(manifest_url).filter(tags=['cube'])\n```\n\n----------------------------------------\n\nTITLE: Configuring queryRewrite for Mandatory Filters in Cube.js\nDESCRIPTION: This code configures the queryRewrite function in the cube.js configuration file to add a mandatory filter to all queries. It ensures that only orders created after December 30th, 2019 are returned in any query results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/enforcing-mandatory-filters.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query) => {\n    query.filters.push({\n      member: `orders.created_at`,\n      operator: \"afterDate\",\n      values: [\"2019-12-30\"],\n    });\n\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Measure in Cube.js\nDESCRIPTION: This example shows how to define a time measure in Cube.js. It creates a measure called 'last_order' by using the MAX aggregate function on a 'created_at' dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    last_order: {\n      sql: `MAX(created_at)`,\n      type: `time`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: last_order\n        sql: \"MAX(created_at)\"\n        type: time\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Composite Primary Key Definition in Cube.js\nDESCRIPTION: Demonstrates how to define multiple primary key dimensions to create a composite key for a cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/dimensions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql: `\n    SELECT 1 AS column_a, 1 AS column_b UNION ALL\n    SELECT 2 AS column_a, 1 AS column_b UNION ALL\n    SELECT 1 AS column_a, 2 AS column_b UNION ALL\n    SELECT 2 AS column_a, 2 AS column_b\n  `,\n\n  dimensions: {\n    composite_key_a: {\n      sql: `column_a`,\n      type: `number`,\n      primary_key: true\n    },\n\n    composite_key_b: {\n      sql: `column_b`,\n      type: `number`,\n      primary_key: true\n    }\n  },\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Payload for Avocado Inc Tenant\nDESCRIPTION: JSON Web Token payload configuration for the \"Avocado Inc\" tenant, including subject, tenant identifier, issued-at and expiration timestamps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n// JWT payload for \"Avocado Inc\"\n{\n  sub: \"1234567890\",\n  tenant: \"Avocado Inc\",\n  iat: 1000000000,\n  exp: 5000000000,\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload for Mango Inc Tenant\nDESCRIPTION: JSON Web Token payload configuration for the \"Mango Inc\" tenant, including subject, tenant identifier, issued-at and expiration timestamps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n// JWT payload for \"Mango Inc\"\n{\n  sub: \"1234567890\",\n  tenant: \"Mango Inc\",\n  iat: 1000000000,\n  exp: 5000000000,\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Security Context Examples\nDESCRIPTION: Example JWT payloads used for testing different supplier access scenarios.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/column-based-access.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1000000000,\n  \"exp\": 5000000000,\n  \"email\": \"purus.accumsan@Proin.org\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1000000000,\n  \"exp\": 5000000000,\n  \"email\": \"gravida.sit.amet@risus.net\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sum Measure in Cube.js\nDESCRIPTION: This example demonstrates how to create a sum measure in a Cube.js data model, specifically for summing up the total value of line items sold.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`line_items`, {\n  // ...\n\n  measures: {\n    total: {\n      sql: `price`,\n      type: `sum`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: line_items\n    # ...\n\n    measures:\n      - name: total\n        sql: price\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Executing a Grouped SQL Query on Cube\nDESCRIPTION: This SQL query shows a typical grouped query that BI tools might generate, aggregating the 'completed_percentage' measure by day.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date_trunc('day', created_at), MEASURE(completed_percentage)\nFROM (\n  SELECT id, status, created_at, completed_percentage FROM orders\n) inner_query\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Count Query in Cube.js\nDESCRIPTION: JSON query to get the total count of orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"orders.count\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing String Dates in Cube.js for BigQuery (YAML)\nDESCRIPTION: This code snippet shows the YAML equivalent of parsing a string date column into a timestamp using the PARSE_TIMESTAMP function in BigQuery within a Cube.js cube definition. It uses the '%Y-%m-%d' format for parsing.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/string-time-dimensions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    sql_table: schema.events\n\n    dimensions:\n      - name: date\n        sql: PARSE_TIMESTAMP('%Y-%m-%d', date)\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Querying Active Users Metrics with cURL in Cube.js\nDESCRIPTION: A cURL command example showing how to query the active_users cube to retrieve monthly, weekly, and daily active user metrics for a specific date range.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/active-users.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl cube:4000/cubejs-api/v1/load \\\n  'query={\n    \"measures\": [\n      \"active_users.monthly_active_users\",\n      \"active_users.weekly_active_users\",\n      \"active_users.daily_active_users\",\n      \"active_users.wau_to_mau\"\n    ],\n    \"timeDimensions\": [\n      {\n        \"dimension\": \"active_users.created_at\",\n        \"dateRange\": [\n          \"2020-01-01\",\n          \"2020-12-31\"\n        ]\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Databricks JDBC Driver NULL Boolean Fix in v0.33.32\nDESCRIPTION: Bug fix for Databricks JDBC driver to correctly return NULL as NULL instead of false for boolean values, ensuring proper NULL handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **databricks-jdbc-driver:** Return NULL as NULL instead of false for boolean ([#6791](https://github.com/cube-js/cube.js/issues/6791)) ([7eb02f5](https://github.com/cube-js/cube.js/commit/7eb02f569464d801ec71215503bc9b3679b5e856))\n```\n\n----------------------------------------\n\nTITLE: Creating New Cube.js Project with Database\nDESCRIPTION: Command to create a new Cube.js project with a specified database type. The command requires a project name and database type flag (-d) to generate the necessary project scaffolding.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli create <project name> -d <database type>\n```\n\n----------------------------------------\n\nTITLE: Defining Rollup Pre-aggregations for Suppliers in Cube.js\nDESCRIPTION: This snippet shows how to define rollup pre-aggregations for the suppliers cube, including dimensions and indexes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: suppliers\n    # ...\n\n    pre_aggregations:\n      - name: suppliers_rollup\n        type: rollup\n        dimensions:\n          - id\n          - company\n          - email\n        indexes:\n          - name: category_index\n            columns:\n              - id\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"suppliers\", {\n  // ...\n\n  pre_aggregations: {\n    suppliers_rollup: {\n      type: `rollup`,\n      dimensions: [id, company, email],\n      indexes: {\n        category_index: {\n          columns: [id],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Databricks JDBC Driver NULL Decimal Fix in v0.33.31\nDESCRIPTION: Bug fix for Databricks JDBC driver to correctly return NULL decimal values as NULL instead of 0, ensuring proper NULL handling for numeric data.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **databricks-jdbc-driver:** Return NULL decimal as NULL instead of 0 ([#6768](https://github.com/cube-js/cube.js/issues/6768)) ([c2ab19d](https://github.com/cube-js/cube.js/commit/c2ab19d86d6144e4f91f9e8fb681e17e87bfcef3))\n```\n\n----------------------------------------\n\nTITLE: Implementing context_to_app_id for Multitenancy\nDESCRIPTION: Shows how to implement the context_to_app_id function for multitenancy, determining the app id used as a caching key for in-memory structures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> str:\n  return f\"CUBE_APP_{ctx['securityContext']['tenant_id']}\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.tenant_id}`;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Result of Joined Data Query in Cube.js\nDESCRIPTION: This snippet shows a sample JSON result of the query, displaying product names and their suppliers' information from the joined data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"products.name\": \"Awesome Cotton Sausages\",\n    \"suppliers.company\": \"Justo Eu Arcu Inc.\",\n    \"suppliers.email\": \"id.risus@luctuslobortisClass.net\"\n  },\n  {\n    \"products.name\": \"Awesome Fresh Keyboard\",\n    \"suppliers.company\": \"Quisque Purus Sapien Limited\",\n    \"suppliers.email\": \"Cras@consectetuercursuset.co.uk\"\n  },\n  {\n    \"products.name\": \"Awesome Rubber Soap\",\n    \"suppliers.company\": \"Tortor Inc.\",\n    \"suppliers.email\": \"Mauris@ac.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Drill Members for Measures in Cube.js (YAML)\nDESCRIPTION: Shows how to define drill-down fields for measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: revenue\n        type: sum\n        sql: price\n        drill_members:\n          - id\n          - price\n          - status\n          - products.name\n          - products.id\n```\n\n----------------------------------------\n\nTITLE: Executing Cube REST API Request in Observable\nDESCRIPTION: Sends a POST request to Cube's REST API with the defined query, headers, and authentication token. The response data is then processed for use in Observable.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/observable.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\norders_over_time = fetch(cubeRestApi, {\n  method: \"POST\",\n  headers: {\n    Authorization: cubeRestApiJwtToken,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(jsonQuery),\n})\n  .then((response) => response.json())\n  .then((json) => json.data);\n```\n\n----------------------------------------\n\nTITLE: Building Development Docker Image for Cube.js\nDESCRIPTION: Docker build commands for creating development images from the cubejs-docker directory, including multi-platform build for AMD64.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t cubejs/cube:dev -f dev.Dockerfile ../../\ndocker buildx build --platform linux/amd64 -t cubejs/cube:dev -f dev.Dockerfile ../../\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Databricks JDBC Connection in Cube\nDESCRIPTION: Configures the necessary environment variables for connecting Cube to Databricks via JDBC. Includes database type, name, URL, authentication token, and usage policy acceptance.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=databricks-jdbc\n# CUBEJS_DB_NAME is optional\nCUBEJS_DB_NAME=default\n# You can find this inside the cluster's configuration\nCUBEJS_DB_DATABRICKS_URL=jdbc:databricks://dbc-XXXXXXX-XXXX.cloud.databricks.com:443/default;transportMode=http;ssl=1;httpPath=sql/protocolv1/o/XXXXX/XXXXX;AuthMech=3;UID=token\n# You can specify the personal access token separately from `CUBEJS_DB_DATABRICKS_URL` by doing this:\nCUBEJS_DB_DATABRICKS_TOKEN=XXXXX\n# This accepts the Databricks usage policy and must be set to `true` to use the Databricks JDBC driver\nCUBEJS_DB_DATABRICKS_ACCEPT_POLICY=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Bucket for AWS Athena Pre-aggregations\nDESCRIPTION: Environment configuration for setting up an S3 export bucket to improve pre-aggregation performance with large datasets in AWS Athena.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/aws-athena.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=s3\nCUBEJS_DB_EXPORT_BUCKET=my.bucket.on.s3\nCUBEJS_DB_EXPORT_BUCKET_AWS_KEY=<AWS_KEY>\nCUBEJS_DB_EXPORT_BUCKET_AWS_SECRET=<AWS_SECRET>\nCUBEJS_DB_EXPORT_BUCKET_AWS_REGION=<AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Implementing context_to_app_id for Multi-Cluster Routing in Python\nDESCRIPTION: This Python function implements context_to_app_id for routing requests between multiple production clusters in a Cube Cloud production multi-cluster deployment. It ensures that requests from a particular tenant are always routed to the same production cluster.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/deployment-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> str:\n  return f\"CUBE_APP_{ctx['securityContext']['tenant_id']}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Rewrite in Cube.js\nDESCRIPTION: Security hook for checking and modifying queries before processing. Can be used to implement custom security checks or add row-level security filters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('query_rewrite')\ndef query_rewrite(query: dict, ctx: dict) -> dict:\n  context = ctx['securityContext']\n\n  if 'filter_by_region' in context:\n    query['filters'].append({\n      'member': 'regions.id',\n      'operator': 'equals',\n      'values': [context['region_id']],\n    })\n\n  return query\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    if (securityContext.filter_by_region) {\n      query.filters.push({\n        member: 'regions.id',\n        operator: 'equals',\n        values: [securityContext.region_id]\n      })\n    }\n    return query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Postgres Environment Variables in Cube.js\nDESCRIPTION: This snippet shows how to configure the necessary environment variables for connecting to a Postgres database in Cube.js. It includes the database type, host, name, user, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/postgres.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=postgres\nCUBEJS_DB_HOST=my.postgres.host\nCUBEJS_DB_NAME=my_postgres_database\nCUBEJS_DB_USER=postgres_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Defining an Aggregating Index in Cube.js (YAML)\nDESCRIPTION: This snippet demonstrates how to define the same 'zip_code_index' aggregating index in Cube.js using YAML format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    pre_aggregations:\n      - name: main\n        # ...\n\n        indexes:\n          # ...\n\n          - name: zip_code_index\n            columns:\n              - zip_code\n            type: aggregate\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-aggregations in Cube (YAML and JavaScript)\nDESCRIPTION: This snippet demonstrates how to define pre-aggregations in a Cube data model using both YAML and JavaScript syntax. It includes setting up measures, dimensions, and a pre-aggregation for total amount by created date.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: total_amount\n        sql: amount\n        type: sum\n\n    dimensions:\n      - name: created_at\n        sql: created_at\n        type: time\n\n    pre_aggregations:\n      - name: amount_by_created\n        measures:\n          - total_amount\n        time_dimension: created_at\n        granularity: month\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    total_amount: {\n      sql: `amount`,\n      type: `sum`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n\n  pre_aggregations: {\n    amount_by_created: {\n      measures: [total_amount],\n      time_dimension: created_at,\n      granularity: `month`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Form Submission Event Count in Cube.js\nDESCRIPTION: This snippet demonstrates how to create a measure in the events cube to count specific events, in this case, form submissions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"events\", {\n  // ...,\n\n  // Add this measure to the `events` cube\n  measures: {\n    form_submitted_count: {\n      sql: `event_id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.event = 'form_submitted'` }],\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: events\n    # ...\n\n    # Add this measure to the `events` cube\n    measures:\n      - name: form_submitted_count\n        sql: event_id\n        type: count\n        filters: [{ sql: \"{CUBE}.event = 'form_submitted'\" }]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Export Bucket for ClickHouse\nDESCRIPTION: Environment variables configuration for setting up AWS S3 export bucket functionality with ClickHouse for improved pre-aggregation performance with large datasets.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/clickhouse.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=s3\nCUBEJS_DB_EXPORT_BUCKET=my.bucket.on.s3\nCUBEJS_DB_EXPORT_BUCKET_AWS_KEY=<AWS_KEY>\nCUBEJS_DB_EXPORT_BUCKET_AWS_SECRET=<AWS_SECRET>\nCUBEJS_DB_EXPORT_BUCKET_AWS_REGION=<AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Querying Cube.js REST API with JSON\nDESCRIPTION: This JSON snippet shows a query to the Cube.js REST API, requesting the 'number' dimension and 'sum' measure from the 'cube_with_big_numbers' cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/cast-numerics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\n    \"cube_with_big_numbers.number\"\n  ],\n  \"measures\": [\n    \"cube_with_big_numbers.sum\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Context to App ID Mapping\nDESCRIPTION: Implementation of context_to_app_id configuration for mapping security context to data model IDs.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n \n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> str:\n  return ctx['securityContext']['team']\n```\n\n----------------------------------------\n\nTITLE: Defining Base User Cube in JavaScript\nDESCRIPTION: JavaScript version of the base 'users' cube with common measures and dimensions for both teachers and students.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/polymorphic-cubes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql: `SELECT * FROM users`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    name: {\n      sql: `name`,\n      type: `string`,\n    },\n\n    school: {\n      sql: `school`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dimension Hierarchies in YAML\nDESCRIPTION: Defines dimension hierarchies for MDX API using view configuration. This example shows how to structure geographic hierarchies with multiple levels including country, state, and city.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/mdx-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n    description: \"Data about orders, amount, count and breakdown by status and geography.\"\n    meta:\n      hierarchies:\n        - name: \"Geography\"\n          levels:\n            - country\n            - state\n            - city\n```\n\n----------------------------------------\n\nTITLE: Adding a Many-to-One Join to Orders Cube in JavaScript\nDESCRIPTION: This snippet shows how to add a many-to-one join from the 'orders' cube to the 'customers' cube in JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  joins: {\n    customers: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.customer_id = ${customers.id}`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin-only Sync in JavaScript\nDESCRIPTION: Example of configuring Semantic Layer Sync in JavaScript to only synchronize the admin data model with multiple BI tools. It shows conditional sync setup based on user role.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    if (securityContext.role === \"admin\") {\n      return [\n        {\n          type: \"superset\",\n          name: \"Superset Sync\",\n          config: {\n            user: \"mail@example.com\",\n            password: \"4dceae-606a03-93ae6dc7\",\n            url: \"superset.example.com\",\n            database: \"Cube Cloud: sls-test (admin)\",\n          },\n        },\n        {\n          type: \"preset\",\n          name: \"Preset Sync\",\n          config: {\n            api_token: \"07988f63-c200-499e-97c9-ba137d8918aa\",\n            api_secret: \"c19fbab4fd4945899795d32898f2e1165bef8e5ee653\",\n            workspace_url: \"12345678.us1a.app.preset.io\",\n            database: \"Cube Cloud: sls-test (admin)\",\n          },\n        },\n      ];\n    } else {\n      // Only sync the 'admin' data model\n      return [];\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Query Example with CTE\nDESCRIPTION: Demonstrates EXPLAIN command usage with a Common Table Expression (CTE) showing logical and physical execution plans.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN WITH cte AS (\n  SELECT o.count as count, p.name as product_name, p.description as product_description\n  FROM orders o\n    CROSS JOIN products p\n)\nSELECT COUNT(*) FROM cte;\n```\n\n----------------------------------------\n\nTITLE: Defining Rollup Pre-aggregations for Products in Cube.js\nDESCRIPTION: This snippet demonstrates how to define rollup pre-aggregations for the products cube, including dimensions, indexes, and joins.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    # ...\n\n    pre_aggregations:\n      - name: products_rollup\n        type: rollup\n        dimensions:\n          - name\n          - supplier_id\n        indexes:\n          - name: category_index\n            columns:\n              - supplier_id\n\n    joins:\n      suppliers:\n        sql: \"{supplier_id} = ${suppliers.id}\"\n        relationship: many_to_one\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"products\", {\n  // ...\n\n  pre_aggregations: {\n    products_rollup: {\n      type: `rollup`,\n      dimensions: [name, supplier_id],\n      indexes: {\n        category_index: {\n          columns: [supplier_id],\n        },\n      },\n    },\n  },\n\n  joins: {\n    suppliers: {\n      sql: `${supplier_id} = ${suppliers.id}`,\n      relationship: `many_to_one`,\n    },\n  },\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Example SQL for Interval-based Refresh Keys\nDESCRIPTION: SQL examples showing how interval-based refresh keys are implemented for different time intervals.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FLOOR(EXTRACT(EPOCH FROM NOW()) / 600)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FLOOR(EXTRACT(EPOCH FROM NOW()) / 5)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Access Control\nDESCRIPTION: YAML configuration for orders, users, and total revenue per customer views with conditional access based on security context. Sets public access flags and defines cube relationships.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/controlling-access-to-cubes-and-views.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# orders.yml\ncubes:\n  - name: orders\n    sql_table: orders\n    public: false\n    # ...\n\n# users.yml\ncubes:\n  - name: users\n    sql_table: users\n    public: false\n    # ...\n\n# total_revenue_per_customer.yml\nviews:\n  - name: total_revenue_per_customer\n    public: {{ COMPILE_CONTEXT['securityContext']['isFinance'] }}\n\n    cubes:\n      - join_path: orders\n        includes:\n          - total_revenue\n\n      - join_path: orders.users\n        includes:\n          - company\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Cube REST API Query\nDESCRIPTION: Example JSON query demonstrating how to retrieve rows 101-200 from the Orders cube using limit and offset parameters. The query includes dimensions, measures, and time dimensions with pagination parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"Orders.status\"],\n  \"measures\": [\"Orders.count\"],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"Orders.createdAt\",\n      \"dateRange\": \"last year\",\n      \"granularity\": \"day\"\n    }\n  ],\n  \"limit\": 100,\n  \"offset\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Databricks Driver Case-Insensitive Filter Fix in v0.33.49\nDESCRIPTION: Bug fix for Databricks driver to properly handle uppercase filter values in contains filters, ensuring case-insensitive matching works correctly.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **databricks-driver:** Uppercase filter values doesn't match in contains filter ([#7067](https://github.com/cube-js/cube/issues/7067)) ([1e29bb3](https://github.com/cube-js/cube/commit/1e29bb396434730fb705c5406c7a7f3df91b7edf))\n```\n\n----------------------------------------\n\nTITLE: Querying a Metrics-First View with SQL in Cube\nDESCRIPTION: A SQL example demonstrating how to query a metrics-first view, grouping the average order value by order status.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  status,\n  MEASURE(average_order_value)\nFROM average_order_value\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Simple Post-Processing Query Example\nDESCRIPTION: Basic example of a post-processing query that executes a version function without querying the upstream data source.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT VERSION();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Active Users Cube in Cube.js\nDESCRIPTION: JavaScript version of the active_users cube definition with rolling window configurations for calculating MAU, WAU, DAU metrics and the WAU to MAU ratio.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/active-users.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`active_users`, {\n  sql: `SELECT user_id, created_at\n    FROM public.orders`,\n\n  measures: {\n    monthly_active_users: {\n      sql: `user_id`,\n      type: `count_distinct`,\n      rolling_window: {\n        trailing: `30 day`,\n        offset: `start`,\n      },\n    },\n\n    weekly_active_users: {\n      sql: `user_id`,\n      type: `count_distinct`,\n      rolling_window: {\n        trailing: `7 day`,\n        offset: `start`,\n      },\n    },\n\n    daily_active_users: {\n      sql: `user_id`,\n      type: `count_distinct`,\n      rolling_window: {\n        trailing: `1 day`,\n        offset: `start`,\n      },\n    },\n\n    wau_to_mau: {\n      title: `WAU to MAU`,\n      sql: `100.000 * ${weekly_active_users} / NULLIF(${monthly_active_users}, 0)`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n\n  dimensions: {\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Expressions in PostgreSQL\nDESCRIPTION: Conditional logic functions including CASE, COALESCE, NULLIF, GREATEST, and LEAST. These functions provide flexible control flow and NULL handling capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCASE\nCOALESCE\nNULLIF\nGREATEST\nLEAST\n```\n\n----------------------------------------\n\nTITLE: Cube.js REST API Response in JSON\nDESCRIPTION: This JSON snippet shows the response from the Cube.js REST API, demonstrating how numeric values are returned as strings to preserve precision for large numbers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/cast-numerics.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"cube_with_big_numbers.number\": \"9999999999999999\",\n    \"cube_with_big_numbers.sum\": \"9999999999999999\"\n  },\n  {\n    \"cube_with_big_numbers.number\": \"9007199254740991\",\n    \"cube_with_big_numbers.sum\": \"9007199254740991\"\n  },\n  {\n    \"cube_with_big_numbers.number\": \"123\",\n    \"cube_with_big_numbers.sum\": \"123\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Monthly Retention Cube Configuration in YAML\nDESCRIPTION: YAML configuration for monthly retention cube defining dimensions for tracking signup metrics and timezone-aware date handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/docs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: monthly_retention\n    # ...\n    dimensions:\n      - name: months_since_signup\n        sql: \"DATEDIFF('month', signup_month, activity_month)\"\n        type: number\n\n      - name: signup_date\n        sql: \"(signup_month AT TIME ZONE 'America/Los_Angeles')\"\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync in JavaScript\nDESCRIPTION: Example of configuring a single disabled sync for Superset using the semanticLayerSync function in JavaScript. It shows how to set up the sync with necessary credentials and options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"superset\",\n        name: \"Superset Sync\",\n        active: false,\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"superset.example.com\",\n          database: \"Cube Cloud: staging-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example Cube Definition in YAML\nDESCRIPTION: Demonstration of a well-structured cube definition following the recommended style guide. Shows proper ordering of parameters, join relationships, dimensions, and measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: line_items\n    sql_table: public.line_items\n    public: false\n\n    joins:\n      - name: products\n        sql: \"{CUBE}.product_id = {products.id}\"\n        relationship: many_to_one\n\n      - name: orders\n        sql: \"{CUBE}.order_id = {orders.id}\"\n        relationship: many_to_one\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: created_date\n        sql: created_at\n        type: time\n\n    measures:\n      - name: count\n        type: count\n\n      - name: total_amount\n        sql: price\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Fix Internal Error: No field named for pre-aggregat...\nDESCRIPTION: This code snippet addresses an internal error encountered during planning when no field name was found for pre-aggregates. This fix prevents the error and ensures that the planning process completes successfully. It addresses issue #7554.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n### Bug Fixes\n\n- Internal: Error during planning: No field named for pre-aggregat… ([#7554](https://github.com/cube-js/cube.js/issues/7554)) ([412213c](https://github.com/cube-js/cube.js/commit/412213cbec40748d0de6f54731686c3d0b263e5c))\n```\n\n----------------------------------------\n\nTITLE: Loading PostgreSQL Sample Data\nDESCRIPTION: Commands to download and import sample e-commerce data into a PostgreSQL database\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-query-builder/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://cube.dev/downloads/ecom-dump.sql > ecom-dump.sql\n$ createdb ecom\n$ psql --dbname ecom -f ecom-dump.sql\n```\n\n----------------------------------------\n\nTITLE: Split BaseDriver for Reusability\nDESCRIPTION: This commit splits the BaseDriver into a separate package, @cubejs-backend/base-driver. This improves modularity and allows other packages to reuse the base driver functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Generating SQL from Cube.js Query (SQL API Format)\nDESCRIPTION: Example of using the /v1/sql endpoint to generate SQL from a Cube.js query in SQL API format. This demonstrates how to use raw SQL queries with Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: TOKEN\" \\\n  -G \\\n  --data-urlencode 'query=SELECT COUNT(*) FROM orders' \\\n  --data-urlencode 'format=sql'  \\  \n  http://localhost:4000/cubejs-api/v1/sql\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sql\": {\n    \"status\": \"ok\",\n    \"sql\": [\n      \"SELECT\\n      count(\\\"base_orders\\\".id) \\\"count_uint8_1__\\\"\\n    FROM\\n      (SELECT * FROM 's3://cube-tutorial/orders.csv') AS \\\"base_orders\\\"  LIMIT 50000\",\n      []\n    ],\n    \"query_type\": \"regular\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory for Databricks Export Bucket in Cube\nDESCRIPTION: Sets up environment variables to use Azure Active Directory for authentication with Azure Blob Storage as an export bucket for Databricks pre-aggregations in Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_AZURE_TENANT_ID=<AZURE_TENANT_ID>\nCUBEJS_DB_EXPORT_BUCKET_AZURE_CLIENT_ID=<AZURE_CLIENT_ID>\nCUBEJS_DB_EXPORT_BUCKET_AZURE_CLIENT_SECRET=<AZURE_CLIENT_SECRET>\n```\n\n----------------------------------------\n\nTITLE: Building Cube.js Docker Image for Debian\nDESCRIPTION: Docker build commands for creating Cube.js images on Debian, including multi-platform builds for AMD64 and ARM64 architectures.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t cubejs/cube:latest -f latest.Dockerfile .\ndocker buildx build --platform linux/amd64 -t cubejs/cube:latest -f latest.Dockerfile .\ndocker buildx build --platform linux/amd64,linux/arm64 -t cubejs/cube:latest -f latest.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring RisingWave Database Connection Environment Variables\nDESCRIPTION: Environment variable configuration for connecting Cube.js to a RisingWave database instance. These settings specify the connection details including host, port, database name, and authentication credentials.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/risingwave.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=postgres\nCUBEJS_DB_HOST=risingwave_host\nCUBEJS_DB_PORT=risingwave_port\nCUBEJS_DB_NAME=risingwave_database\nCUBEJS_DB_USER=risingwave_user\nCUBEJS_DB_PASS=risingwave_password\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC URL for Microsoft Fabric Connection in Cube Cloud\nDESCRIPTION: This JDBC URL format is used to connect Cube Cloud to Microsoft Fabric. It includes placeholders for server name, database name, authentication type, username, and password. The connection uses encryption and supports different authentication methods.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/ms-fabric.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njdbc:sqlserver://;serverName=<SERVER_NAME>.datawarehouse.pbidedicated.windows.net;database=<DATABASE_NAME>;encrypt=true;Authentication=<AUTH_TYPE>;UserName=<USER_NAME>;Password=<PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Connection to Cube\nDESCRIPTION: Establishing a connection to Cube's SQL API using SQLAlchemy engine configuration. The code demonstrates how to set up connection parameters including host, port, credentials, and database name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/jupyter.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sqlalchemy\nimport pandas\n\nengine = sqlalchemy.create_engine(\n    sqlalchemy.engine.url.URL(\n        drivername=\"postgresql\",\n        username=\"cube\",\n        password=\"9943f670fd019692f58d66b64e375213\",\n        host=\"thirsty-raccoon.sql.aws-eu-central-1.cubecloudapp.dev\",\n        port=\"5432\",\n        database=\"db@thirsty-raccoon\",\n    ),\n    echo_pool=True,\n)\nprint(\"connecting with engine \" + str(engine))\nconnection = engine.connect()\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Query Rewrite Security Configuration\nDESCRIPTION: Configuration for implementing row-level security using queryRewrite function to filter data based on category access.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    if (securityContext.categoryId) {\n      query.filters.push({\n        member: \"products.category_id\",\n        operator: \"equals\",\n        values: [securityContext.categoryId],\n      });\n    }\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Cubes in YAML\nDESCRIPTION: This YAML snippet demonstrates how to make a cube private by setting the 'public' parameter to false. This is recommended when using Semantic Layer Sync to only expose views.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-bi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n    public: false\n```\n\n----------------------------------------\n\nTITLE: Static Attributes Implementation with Manual Joins in Cube.js\nDESCRIPTION: This cube definition uses manual LEFT JOINs for each order status (completed, processing, shipped) to create separate dimensions for each status's earliest created_at date, implementing the EAV model with static attributes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users_statuses_joins`, {\n  sql: `\n    SELECT\n      users.first_name,\n      users.last_name,\n      MIN(cOrders.created_at) AS cCreatedAt,\n      MIN(pOrders.created_at) AS pCreatedAt,\n      MIN(sOrders.created_at) AS sCreatedAt\n    FROM public.users AS users\n    LEFT JOIN public.orders AS cOrders\n      ON users.id = cOrders.user_id AND cOrders.status = 'completed'\n    LEFT JOIN public.orders AS pOrders\n      ON users.id = pOrders.user_id AND pOrders.status = 'processing'\n    LEFT JOIN public.orders AS sOrders\n      ON users.id = sOrders.user_id AND sOrders.status = 'shipped'\n    GROUP BY 1, 2\n  `,\n\n  dimensions: {\n    name: {\n      sql: `first_name || ' ' || last_name`,\n      type: `string`,\n    },\n\n    completed_created_at: {\n      sql: `cCreatedAt`,\n      type: `time`,\n    },\n\n    processing_created_at: {\n      sql: `pCreatedAt`,\n      type: `time`,\n    },\n\n    shipped_created_at: {\n      sql: `sCreatedAt`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 as Export Bucket for Databricks in Cube\nDESCRIPTION: Sets up environment variables to use AWS S3 as an export bucket for Databricks pre-aggregations in Cube. Includes bucket type, name, AWS credentials, and region.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=s3\nCUBEJS_DB_EXPORT_BUCKET=s3://my.bucket.on.s3\nCUBEJS_DB_EXPORT_BUCKET_AWS_KEY=<AWS_KEY>\nCUBEJS_DB_EXPORT_BUCKET_AWS_SECRET=<AWS_SECRET>\nCUBEJS_DB_EXPORT_BUCKET_AWS_REGION=<AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Run Airflow Workflows\nDESCRIPTION: Commands to execute the DAGs using Astro CLI or start the Airflow web server.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/airflow.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nastro run cube_query_workflow\nastro run cube_build_workflow\n```\n\nLANGUAGE: bash\nCODE:\n```\nastro dev start\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Cube.js with QuestDB\nDESCRIPTION: Docker Compose configuration that sets up both Cube.js and QuestDB services. Exposes Cube.js on port 4000 and QuestDB on ports 9000 and 8812.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/questdb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube:\n    environment:\n      - CUBEJS_DEV_MODE=true\n    image: \"cubejs/cube:latest\"\n    ports:\n      - \"4000:4000\"\n    volumes:\n      - \".:/cube/conf\"\n  questdb:\n    container_name: questdb\n    hostname: questdb\n    image: \"questdb/questdb:latest\"\n    ports:\n      - \"9000:9000\"\n      - \"8812:8812\"\n```\n\n----------------------------------------\n\nTITLE: Docker Component Version 0.36.0 Breaking Changes\nDESCRIPTION: Major version update that includes upgrading core components and removing rxvt-unicode dependency. Upgrades include Node.js 20.17.0, JDK 17, Python 3.11, OpenSSL 3, and OS to bookworm.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- feat(docker)!: Remove rxvt-unicode (was used as TERM) ([fb9cb75](https://github.com/cube-js/cube/commit/fb9cb75ed747f804e31768b91913e0b4f38f173c))\n\n### Features\n\n- **docker-jdk:** Upgrade JDK to 17 from 11 ([c3a1ccd](https://github.com/cube-js/cube/commit/c3a1ccd04a600951c8a1729cea40601714f173a8))\n- **docker:** Upgrade Node.js to 20.17.0 ([9fedf78](https://github.com/cube-js/cube/commit/9fedf784a1567d4e8190f3a24b46f2bc7adc4996))\n- **docker:** Upgrade OpenSSL to 3 from (1.1) ([97159e7](https://github.com/cube-js/cube/commit/97159e747faa391922bd435dffa40c70256a4fe8))\n- **docker:** Upgrade OS to bookworm from bullseye ([67e9521](https://github.com/cube-js/cube/commit/67e9521d71a5f6feb779217eb81830bc695f09d0))\n- **docker:** Upgrade Python to 3.11 from 3.9 ([7684579](https://github.com/cube-js/cube/commit/76845792ad3cb6aa790f606c452453cc663039a7))\n```\n\n----------------------------------------\n\nTITLE: Loading dbt Project from Local File\nDESCRIPTION: Python code to load dbt project metadata from a local manifest.json file using cube_dbt package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\ndbt = Dbt.from_file('./manifest.json')\n```\n\n----------------------------------------\n\nTITLE: Updating Cube to a Specific Version\nDESCRIPTION: This YAML snippet shows how to update the Cube API service to use a specific version instead of the latest tag, which is recommended for production deployments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube_api:\n    image: cubejs/cube:v0.36.0\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_DB_TYPE=bigquery\n      - CUBEJS_DB_BQ_PROJECT_ID=cube-bq-cluster\n      - CUBEJS_DB_BQ_CREDENTIALS=<BQ-KEY>\n      - CUBEJS_DB_EXPORT_BUCKET=cubestore\n      - CUBEJS_CUBESTORE_HOST=cubestore_router\n      - CUBEJS_API_SECRET=secret\n    volumes:\n      - .:/cube/conf\n    depends_on:\n      - cubestore_router\n      - cube_refresh_worker\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Cube Development\nDESCRIPTION: Docker Compose configuration that sets up Cube with development mode enabled, exposes necessary ports, and mounts configuration volume\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/core/create-a-project.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n      - 15432:15432\n    environment:\n      - CUBEJS_DEV_MODE=true\n    volumes:\n      - .:/cube/conf\n```\n\n----------------------------------------\n\nTITLE: Defining Monthly Retention Cube in JavaScript\nDESCRIPTION: This JavaScript snippet defines a cube for monthly retention analysis using Cube.js. It includes the SQL query to generate the base table and defines measures and dimensions for retention analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/cohort-retention.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`monthly_retention`, {\n  sql: `SELECT\n    users.id as user_id,\n    date_trunc('month', users.created_at) as signup_month,\n    months_list.activity_month as activity_month,\n    data.monthly_pageviews\n  FROM users\n  LEFT JOIN\n    (\n      SELECT\n        DISTINCT (date_trunc('month', pages.original_timestamp)) as activity_month\n      FROM pages\n    ) as months_list\n  ON months_list.activity_month >= date_trunc('month', users.created_at)\n  LEFT JOIN\n    (\n      SELECT\n        p.user_id,\n        date_trunc('month', p.original_timestamp) as activity_month,\n        COUNT(DISTINCT p.id) as monthly_pageviews\n      FROM pages p\n      GROUP BY 1,2\n    ) as data\n  ON data.activity_month = months_list.activity_month\n  AND data.user_id = users.id`,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`monthly_retention`, {\n  // ...\n\n  measures: {\n    total_count: {\n      sql: `user_id`,\n      type: `count_distinct`,\n      public: false,\n    },\n\n    total_active_count: {\n      sql: `user_id`,\n      type: `count_distinct`,\n      filters: [{ sql: `${CUBE}.monthly_pageviews > 0` }],\n      drill_members: [users.id, users.email],\n    },\n\n    percentage_of_active: {\n      sql: `100.0 * ${total_active_count} / NULLIF(${total_count}, 0)`,\n      type: `number`,\n      format: `percent`,\n      drill_members: [\n        users.email,\n        bots.team,\n        bots.last_seen,\n        percentage_of_active,\n      ],\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`monthly_retention`, {\n  // ...\n\n  dimensions: {\n    months_since_signup: {\n      sql: `DATEDIFF('month', ${CUBE}.signup_month, ${CUBE}.activity_month)`,\n      type: `number`,\n    },\n\n    signup_date: {\n      sql: `(signup_month AT TIME ZONE 'America/Los_Angeles')`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Python Function for Converting Context to App ID\nDESCRIPTION: A Python function that converts a context object to an application ID by formatting the user ID from the security context. This function prints the context and returns a string in the format 'CUBEJS_APP_{userId}'.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/TECH.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef context_to_app_id(ctx):\n    print('content_to_app_id', ctx)\n\n    return 'CUBEJS_APP_{}'.format(ctx.securityContext.userId)\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Cube with Databricks JDBC Driver\nDESCRIPTION: Extends the cubejs/cube:jdk Docker image to include the JDBC driver for Databricks. Copies the current directory and installs dependencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM cubejs/cube:jdk\n\nCOPY . .\nRUN npm install\n```\n\n----------------------------------------\n\nTITLE: HTTPS Support for Dremio Driver\nDESCRIPTION: This feature adds HTTPS support for the Dremio driver within the Cube.js backend.  This enhancement allows secure connections to Dremio instances, improving data security. Requires the @cubejs-backend/dremio-driver package.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **@cubejs-backend/dremio-driver:** Add HTTPS support for Dremio ([#1666](https://github.com/cube-js/cube.js/issues/1666)), Thanks [@chipblox](https://github.com/chipblox) ([1143e9c](https://github.com/cube-js/cube.js/commit/1143e9cbdb78059a93e1419feff80c34ee29bdbf))\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Connection Environment Variables\nDESCRIPTION: Basic environment variable configuration for connecting Cube.js to an Oracle database. Includes essential parameters like database type, host, name, user, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/oracle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=oracle\nCUBEJS_DB_HOST=my.oracle.host\nCUBEJS_DB_NAME=my_oracle_database\nCUBEJS_DB_USER=oracle_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Customizing Measure Titles in Cube.js (YAML)\nDESCRIPTION: Shows how to customize the displayed names of measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: orders_count\n        title: Number of Orders Placed\n        sql: id\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Query Result for Mango Inc Users\nDESCRIPTION: JSON response showing the last users from the Mango Inc tenant's database, demonstrating tenant-specific data retrieval from a different data source.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\n// Mango Inc last users:\n[\n  {\n    \"Users.id\": 705,\n    \"Users.name\": \"Zora Vallery\",\n  },\n  {\n    \"Users.id\": 704,\n    \"Users.name\": \"Fawn Danell\",\n  },\n  {\n    \"Users.id\": 703,\n    \"Users.name\": \"Moyra Denney\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using Extended Context in Cube.js Data Model\nDESCRIPTION: This snippet demonstrates how to use custom values from the extended context in a Cube.js data model. It filters data based on the active organization from the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n{% set securityContext = COMPILE_CONTEXT['securityContext'] %}\n\ncubes:\n  - name: users\n    sql: >\n      SELECT *\n      FROM users\n      WHERE organization_id={{ securityContext['active_organization'] }}\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { securityContext } = COMPILE_CONTEXT\n\ncube(`users`, {\n  sql: `\n    SELECT *\n    FROM users\n    WHERE organization_id=${securityContext.active_organization}\n  `\n})\n```\n\n----------------------------------------\n\nTITLE: Session to User Mapping Implementation\nDESCRIPTION: Configures the relationship between sessions and user identities, including user counting metrics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/event-analytics.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"sessions\", {\n  joins: {\n    identifies: {\n      relationship: `many_to_one`,\n      sql: `${identifies.anonymous_id} = ${sessions.anonymous_id}`,\n    },\n  },\n  dimensions: {\n    user_id: {\n      sql: `coalesce(${identifies.user_id}, ${CUBE}.anonymous_id)`,\n      type: `string`,\n    },\n  },\n  measures: {\n    users_count: {\n      sql: `${user_id}`,\n      type: `count_distinct`,\n    },\n    average_sessions_per_user: {\n      sql: `${count}::NUMERIC / NULLIF(${users_count}, 0)`,\n      type: `number`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Metadata Response in Cube.js\nDESCRIPTION: This JSON snippet shows a sample response from the Cube.js /meta endpoint. It includes information about the 'users' cube and its dimensions, which can be used to dynamically generate queries or UI elements.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cubes\": [\n    {\n      \"name\": \"users\",\n      \"title\": \"Users\",\n      \"measures\": [],\n      \"dimensions\": [\n        {\n          \"name\": \"users.city\",\n          \"title\": \"Users City\",\n          \"type\": \"string\",\n          \"shortTitle\": \"City\",\n          \"suggestFilterValues\": true\n        },\n        {\n          \"name\": \"users.state\",\n          \"title\": \"Users State\",\n          \"type\": \"string\",\n          \"shortTitle\": \"State\",\n          \"suggestFilterValues\": true\n        }\n      ],\n      \"segments\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cube JavaScript Client and Vue Package\nDESCRIPTION: Commands to install the necessary Cube packages for Vue integration using npm or Yarn. It includes both the core client and Vue-specific package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/vue.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save @cubejs-client/core @cubejs-client/vue3\n\n# Yarn\nyarn add @cubejs-client/core @cubejs-client/vue3\n```\n\n----------------------------------------\n\nTITLE: Creating a Lambda Function for Custom JWT Claims in AWS Cognito\nDESCRIPTION: This Lambda function adds custom claims to the JWT token generated by AWS Cognito. It adds company_id, user_id, and roles information to the token, which can then be used by Cube for authorization purposes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/aws-cognito.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.handler = (event, context, callback) => {\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        \"http://localhost:4000/\": JSON.stringify({\n          company_id: \"company1\",\n          user_id: event.request.userAttributes.sub,\n          roles: [\"user\"],\n        }),\n      },\n    },\n  };\n  callback(null, event);\n};\n```\n\n----------------------------------------\n\nTITLE: Preparing PostgreSQL Database for Cube.js Dashboard\nDESCRIPTION: These commands download a sample e-commerce dataset, create a new PostgreSQL database named 'ecom', and import the dataset into it. This provides the data foundation for the Cube.js dashboard.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://cube.dev/downloads/ecom-dump.sql > ecom-dump.sql\n$ createdb ecom\n$ psql --dbname ecom -f ecom-dump.sql\n```\n\n----------------------------------------\n\nTITLE: Loading dbt Project from URL\nDESCRIPTION: Python code to load dbt project metadata from a remote URL using cube_dbt package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\ndbt = Dbt.from_url(manifest_url)\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Twitter Stream Producer\nDESCRIPTION: Docker commands to build a Linux/AMD64 image for a Twitter stream producer and push it to Google Container Registry. The image is tagged for the Cube.js Twitter stream project repository.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/twitter-stream/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build \\\n  -t us-docker.pkg.dev/cube-devrel-team/cube-twitter-stream/producer \\\n  --platform linux/amd64 .\n\ndocker push \\\n  us-docker.pkg.dev/cube-devrel-team/cube-twitter-stream/producer\n```\n\n----------------------------------------\n\nTITLE: Improve polling similar to BigQuery driver\nDESCRIPTION: This feature improves the polling mechanism for the Dremio driver. The polling mechanism is responsible for checking the status of queries or operations executed on the Dremio database.  The updated polling method aims to provide more efficient and reliable query execution by emulating the polling behavior of the BigQuery driver, potentially reducing latency or improving resource utilization.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Connecting to SQL API using PSQL - Core and Cloud Examples\nDESCRIPTION: Examples showing how to connect to Cube's SQL API using the psql utility for both Cube Core and Cube Cloud environments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Cube Core\nPGPASSWORD=password \\\n  psql -h localhost \\\n  -p 15432 \\\n  -U user cube\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Cube Cloud\nPGPASSWORD=password \\\n  psql -h awesome-ecom.sql.gcp-us-central1.cubecloudapp.dev \\\n  -p 5432 \\\n  -U cube awesome-ecom\n```\n\n----------------------------------------\n\nTITLE: Configuring Hive / SparkSQL Environment Variables in Cube\nDESCRIPTION: This snippet shows the necessary environment variables to set up a connection to a Hive / SparkSQL database in a Cube project. It includes the database type, host, name, user, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/hive.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=hive\nCUBEJS_DB_HOST=my.hive.host\nCUBEJS_DB_NAME=my_hive_database\nCUBEJS_DB_USER=hive_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Excluding Date Range with notInDateRange in Cube.js Query\nDESCRIPTION: Shows how to use the 'notInDateRange' operator to exclude specific dates from a time dimension. The values format is the same as for 'inDateRange'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.time\",\n  \"operator\": \"notInDateRange\",\n  \"values\": [\"2015-01-01\", \"2015-12-31\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Streamlit-Cube Connection Using SQLAlchemy\nDESCRIPTION: Python code demonstrating how to establish a connection to Cube's SQL API using SQLAlchemy engine with PostgreSQL driver. Includes connection parameters like username, password, host, port, and database.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/streamlit.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit\nimport sqlalchemy\nimport pandas\n\nengine = sqlalchemy.create_engine(\n  sqlalchemy.engine.url.URL(\n    drivername=\"postgresql\",\n    username=\"cube\",\n    password=\"9943f670fd019692f58d66b64e375213\",\n    host=\"thirsty-raccoon.sql.aws-eu-central-1.cubecloudapp.dev\",\n    port=\"5432\",\n    database=\"db@thirsty-raccoon\",\n  ),\n  echo_pool=True,\n)\nprint(\"connecting with engine \" + str(engine))\nconnection = engine.connect()\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-hosted Elasticsearch Connection\nDESCRIPTION: Environment variables setup for connecting to a self-hosted Elasticsearch instance. Requires the database type, URL, and query format specification.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/elasticsearch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=elasticsearch\nCUBEJS_DB_URL=https://my.elasticsearch.host:9200\nCUBEJS_DB_ELASTIC_QUERY_FORMAT=json\n```\n\n----------------------------------------\n\nTITLE: Query Results for Operator Role in Cube.js\nDESCRIPTION: Sample JSON5 response showing the query results for an operator role. The data only includes orders with 'processing' status, as filtered by the queryRewrite function.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/role-based-access.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n// Operator\n[\n  {\n    \"orders.status\": \"processing\",\n    \"orders.count\": \"3354\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Optimizing Funnel Performance with Pre-Aggregations\nDESCRIPTION: Shows how to add pre-aggregations to optimize funnel performance using an originalSql type, which is recommended for funnels with steps that can be computationally expensive.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`PurchaseFunnel`, {\n  extends: Funnels.eventFunnel({\n    // ...\n  }),\n\n  preAggregations: {\n    main: {\n      type: `originalSql`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting LookML Explores to Cubes and Views\nDESCRIPTION: Command to convert LookML explore files into Cube's data model format, generating both cube and view definitions including join relationships.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/lkml2cube.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlkml2cube views path/to/file.explore.lkml --outputdir ./\n```\n\n----------------------------------------\n\nTITLE: JWT Token for Operator Role in Cube.js Authentication\nDESCRIPTION: A JSON Web Token payload for an operator role with issue and expiration timestamps. This token grants access to processing order data only.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/role-based-access.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1000000000,\n  \"exp\": 5000000000,\n  \"role\": \"operator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Airflow Connection for Cube\nDESCRIPTION: YAML configuration for setting up the Cube connection in Airflow, including host URL, API secret, and security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/airflow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nairflow:\n  connections:\n    - conn_id: cube_default\n      conn_type: generic\n      conn_host: https://awesome-ecom.gcp-us-central1.cubecloudapp.dev\n      conn_schema:\n      conn_login:\n      conn_password: SECRET\n      conn_port:\n      conn_extra:\n        security_context: {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Rewrite for Access Control\nDESCRIPTION: Implements a queryRewrite function that filters product data based on supplier email from the security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/column-based-access.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  queryRewrite: (query, { securityContext }) => {\n    const cubeNames = [\n      ...(query.dimensions || []),\n      ...(query.measures || []),\n    ].map((e) => e.split(\".\")[0]);\n\n    if (cubeNames.includes(\"products\")) {\n      if (!securityContext.email) {\n        throw new Error(\"No email found in Security Context!\");\n      }\n\n      query.filters.push({\n        member: `suppliers.email`,\n        operator: \"equals\",\n        values: [securityContext.email],\n      });\n    }\n\n    return query;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Query Result for Avocado Inc Users\nDESCRIPTION: JSON response showing the last users from the Avocado Inc tenant's database, demonstrating successful tenant-specific data retrieval.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n// Avocado Inc last users:\n[\n  {\n    \"Users.id\": 700,\n    \"Users.name\": \"Freddy Gulgowski\",\n  },\n  {\n    \"Users.id\": 699,\n    \"Users.name\": \"Julie Crooks\",\n  },\n  {\n    \"Users.id\": 698,\n    \"Users.name\": \"Macie Ryan\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Jinja Template Context\nDESCRIPTION: Python code to set up Jinja template context for rendering dbt models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\ndbt = Dbt.from_url(manifest_url).filter(paths=['marts/'])\n\ntemplate = TemplateContext()\n\n@template.function('dbt_models')\ndef dbt_models():\n  return dbt.models\n\n@template.function('dbt_model')\ndef dbt_model(name):\n  return dbt.model(name)\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as Reverse Proxy for Cube API\nDESCRIPTION: This NGINX configuration sets up a reverse proxy for the Cube API, enabling HTTPS connections and improving security. It includes SSL configuration and proxies requests to the Cube API service.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 443 ssl;\n  server_name cube.my-domain.com;\n\n  ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ecdh_curve              secp384r1;\n  # Replace the ciphers with the appropriate values\n  ssl_ciphers                 \"ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384 OLD_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 OLD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\";\n  ssl_prefer_server_ciphers   on;\n  ssl_certificate             /etc/ssl/private/cert.pem;\n  ssl_certificate_key         /etc/ssl/private/key.pem;\n  ssl_session_timeout         10m;\n  ssl_session_cache           shared:SSL:10m;\n  ssl_session_tickets         off;\n  ssl_stapling                on;\n  ssl_stapling_verify         on;\n\n  location / {\n    proxy_pass http://cube:4000/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Heroku Postgres in Cube.js\nDESCRIPTION: This code snippet demonstrates how to configure SSL for a Heroku Postgres database connection in Cube.js when verifiable certificates are not supported. It sets the 'rejectUnauthorized' option to false in the Postgres driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/postgres.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst PostgresDriver = require(\"@cubejs-backend/postgres-driver\");\nmodule.exports = {\n  driverFactory: () =>\n    new PostgresDriver({\n      ssl: {\n        rejectUnauthorized: false,\n      },\n    }),\n};\n```\n\n----------------------------------------\n\nTITLE: Refresh Key SQL Definition for Updated Timestamp\nDESCRIPTION: SQL query to define a refresh key based on updated_at column in a dbt model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MAX(updated_at)\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Configuring CRON-based Refresh Key with Timezone\nDESCRIPTION: Example showing how to configure a refresh key using CRON expression with timezone specification.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`order_facts`, {\n  sql_table: `orders`,\n\n  refresh_key: {\n    every: \"30 5 * * 5\",\n    timezone: \"America/Los_Angeles\",\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    sql_table: orders\n\n    refresh_key:\n      every: 30 5 * * 5\n      timezone: America/Los_Angeles\n```\n\n----------------------------------------\n\nTITLE: Querying a Cube as a Table in SQL API\nDESCRIPTION: Demonstrates how to query a cube or view named 'orders' as if it were a table in the SQL API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders;\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin-only Sync in Python\nDESCRIPTION: Example of configuring Semantic Layer Sync in Python to only synchronize the admin data model with multiple BI tools. It demonstrates conditional sync setup based on user role.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  if ctx['securityContext']['role'] == 'admin':\n    return [\n      {\n        'type': 'superset',\n        'name': 'Superset Sync',\n        'config': {\n          'user': 'mail@example.com',\n          'password': '4dceae-606a03-93ae6dc7',\n          'url': 'superset.example.com',\n          'database': 'Cube Cloud: sls-test (admin)'\n        }\n      },\n      {\n        'type': 'preset',\n        'name': 'Preset Sync',\n        'config': {\n          'api_token': '07988f63-c200-499e-97c9-ba137d8918aa',\n          'api_secret': 'c19fbab4fd4945899795d32898f2e1165bef8e5ee653',\n          'workspace_url': '12345678.us1a.app.preset.io',\n          'database': 'Cube Cloud: sls-test (admin)'\n        }\n      }\n    ]\n  else:\n    # Only sync the 'admin' data model\n    return []\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Claims in Environment Variables\nDESCRIPTION: Example of setting JWT claims verification using environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_JWT_AUDIENCE='<AUDIENCE_FROM_IDENTITY_PROVIDER>'\nCUBEJS_JWT_ISSUER='<ISSUER_FROM_IDENTITY_PROVIDER>'\nCUBEJS_JWT_SUBJECT='<SUBJECT_FROM_IDENTITY_PROVIDER>'\n```\n\n----------------------------------------\n\nTITLE: Defining Orders Cube Schema in YAML\nDESCRIPTION: YAML configuration for the orders cube defining measures and dimensions including count, number, and created_at fields.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: number\n        sql: number\n        type: number\n\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Querying Joined Data from Multiple Sources in Cube.js\nDESCRIPTION: This snippet shows a JSON query to retrieve product names and their suppliers' information from the joined data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order\": {\n    \"products.name\": \"asc\"\n  },\n  \"dimensions\": [\"products.name\", \"suppliers.company\", \"suppliers.email\"],\n  \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Request Duration Percentiles for 200 Concurrent Users using Cube Cloud\nDESCRIPTION: This snippet provides performance metrics for a Node.js application using Cube Cloud to access PostgreSQL with 200 concurrent requests, illustrating how the system manages higher loads efficiently.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"p(90)=1.51s\\np(95)=1.63s\"\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Table References\nDESCRIPTION: Demonstrates how to reference case-sensitive table names in both YAML and JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: 'public.\"Orders\"'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `public.\"Orders\"`,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Segment in JavaScript and YAML\nDESCRIPTION: This snippet shows how to define a basic segment for San Francisco users in both JavaScript and YAML formats. It demonstrates the use of the 'segments' parameter within a cube definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n  segments: {\n    sf_users: {\n      sql: `${CUBE}.location = 'San Francisco'`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    segments:\n      - name: sf_users\n        sql: \"{CUBE}.location = 'San Francisco'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store Workers Address List in dotenv\nDESCRIPTION: Example configuration for setting up multiple Cube Store worker addresses and ports. This setting is used to implement stateless addressing within a Cube Store cluster and helps determine each node's position and pre-aggregation partition ownership.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBESTORE_WORKERS=worker-1:3123,localhost:3124,123.124.125.128:3123\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage export bucket for Cube\nDESCRIPTION: This code shows the environment variables needed to enable export bucket functionality for improved pre-aggregation performance with large datasets in Google BigQuery.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/google-bigquery.mdx#2025-04-17_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET=export_data_58148478376\nCUBEJS_DB_EXPORT_BUCKET_TYPE=gcp\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Dremio Time Series SQL Generation\nDESCRIPTION: Fix implemented in version 0.34.38 to address issues with generating time series SQL queries in the Dremio driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **dremio-driver:** Fix generation of time series SQL ([#7503](https://github.com/cube-js/cube/issues/7503)) ([7e84d4c](https://github.com/cube-js/cube/commit/7e84d4c0eb3639893faf11a10a11316b9870a0d5))\n```\n\n----------------------------------------\n\nTITLE: Regenerating models using Open API Generator with Docker\nDESCRIPTION: This snippet shows how to regenerate Cube.js models using Open API Generator within a Docker container.  It mounts the current directory and specifies the input file, generator, and output directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/cubeclient/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"docker run --rm -v \\\".:/cube\\\" --workdir /cube/rust/cubesql openapitools/openapi-generator-cli:v6.6.0 generate -i ../../packages/cubejs-api-gateway/openspec.yml -g rust -o cubeclient\"\n```\n\n----------------------------------------\n\nTITLE: Building production bundle with npm run build\nDESCRIPTION: Creates a production-ready build of the React application in the build folder. The output is minified, and filenames include content hashes for optimal performance.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing context_to_orchestrator_id for Query Orchestrator\nDESCRIPTION: Shows how to implement the context_to_orchestrator_id function to determine a caching key for the query orchestrator instance in a multi-tenant environment.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_app_id')\ndef context_to_app_id(ctx: dict) -> str:\n  return f\"CUBE_APP_{ctx['securityContext']['tenant_id']}\"\n\n@config('context_to_orchestrator_id')\ndef context_to_orchestrator_id(ctx: dict) -> str:\n  return f\"CUBE_APP_{ctx['securityContext']['tenant_id']}\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.tenant_id}`;\n  },\n\n  contextToOrchestratorId: ({ securityContext }) => {\n    return `CUBE_APP_${securityContext.tenant_id}`;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Optimize Redshift Connection Test\nDESCRIPTION: This feature optimizes the `testConnection()` function within the Redshift driver. Instead of executing a real query, it now only establishes a connection to improve efficiency and reduce resource consumption during testing.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\noptimize testConnection() with just establishing connection without real query\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in YAML Data Models with Jinja\nDESCRIPTION: Demonstrates how to access environment variables in YAML data model files using the built-in env_var Jinja function, which can raise an error for missing variables or provide default values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: my_cube\n    description: \"{{ env_var('MY_ENV_VAR') | safe }}\"\n    sql_table: \"{{ env_var('MY_OTHER_ENV_VAR', 'my_default_value') | safe }}.table\"\n \n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Defining 'orders' Cube in JavaScript\nDESCRIPTION: This JavaScript snippet defines the same 'orders' cube as the YAML version, with a count measure and status and created_at dimensions. It provides an alternative syntax for defining the Cube data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/superset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    status: {\n      sql: `status`,\n      type: `string`,\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading dbt Project with Custom Logic\nDESCRIPTION: Python code to load dbt project metadata using custom file handling with smart-open package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\nfrom smart_open import open\nimport json\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\nmanifest = None\n\nwith open(manifest_url) as file:\n  manifest_json = file.read()\n  manifest = json.loads(manifest_json)\n\ndbt = Dbt(manifest)\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Cubes in GraphQL\nDESCRIPTION: GraphQL query to retrieve data from both 'orders' and 'products' cubes simultaneously.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  cube {\n    orders {\n      status\n      count\n      created_at {\n        month\n      }\n    }\n    products {\n      count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Meta Information Endpoint\nDESCRIPTION: Example of how to introspect the data model using the /v1/meta endpoint with curl and jq.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: JSON.WEB.TOKEN\" \\\n  http://localhost:4000/cubejs-api/v1/meta | jq\n```\n\n----------------------------------------\n\nTITLE: Customizing Repository Factory for Data Model Files\nDESCRIPTION: Illustrates how to customize the repository for Cube data model files using the repository_factory option, allowing dynamic provision of data model files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config, file_repository\n\n@config('repository_factory')\ndef repository_factory(ctx: dict) -> list[dict]:\n  return file_repository(f\"model/{ctx['securityContext']['tenant_id']}\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileRepository } = require(\"@cubejs-backend/server-core\");\n\nmodule.exports = {\n  repositoryFactory: ({ securityContext }) => {\n    return new FileRepository(`model/${securityContext.tenant_id}`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Configuration Files in Bash\nDESCRIPTION: Commands to create a Dockerfile and .dockerignore file for extending the Cube Docker image.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch Dockerfile\ntouch .dockerignore\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Compose for Cube Store\nDESCRIPTION: This Docker Compose configuration defines services for running Cube Store and Cube.js together, enabling them to communicate via links.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nversion: '2.2'\nservices:\n  cubestore:\n    image: cubejs/cubestore:edge\n\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000  # Cube.js API and Developer Playground\n      - 3000:3000  # Dashboard app, if created\n    env_file: .env\n    depends_on:\n      - cubestore\n    links:\n      - cubestore\n    volumes:\n      - ./schema:/cube/conf/schema\n```\n\n----------------------------------------\n\nTITLE: Count Query Result Example\nDESCRIPTION: Example response showing total order count.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.count\": \"10000\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Docker Compose configuration for Cube Store cluster\nDESCRIPTION: This Docker Compose configuration sets up a Cube Store cluster with a router and two worker nodes, along with a Cube instance.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cubestore_router:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_router:9999\n      - CUBESTORE_META_PORT=9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001,cubestore_worker_2:9001\n      - CUBESTORE_REMOTE_DIR=/cube/data\n    volumes:\n      - .cubestore:/cube/data\n  cubestore_worker_1:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_worker_1:9001\n      - CUBESTORE_WORKER_PORT=9001\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001,cubestore_worker_2:9001\n      - CUBESTORE_REMOTE_DIR=/cube/data\n    depends_on:\n      - cubestore_router\n    volumes:\n      - .cubestore:/cube/data\n  cubestore_worker_2:\n    restart: always\n    image: cubejs/cubestore:latest\n    environment:\n      - CUBESTORE_SERVER_NAME=cubestore_worker_2:9001\n      - CUBESTORE_WORKER_PORT=9001\n      - CUBESTORE_META_ADDR=cubestore_router:9999\n      - CUBESTORE_WORKERS=cubestore_worker_1:9001,cubestore_worker_2:9001\n      - CUBESTORE_REMOTE_DIR=/cube/data\n    depends_on:\n      - cubestore_router\n    volumes:\n      - .cubestore:/cube/data\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_CUBESTORE_HOST=cubestore_router\n    depends_on:\n      - cubestore_router\n    volumes:\n      - .:/cube/conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Authentication in Cube.js\nDESCRIPTION: This snippet demonstrates how to set up a checkSqlAuth() function in the Cube.js configuration file to verify username and password dynamically. It returns a password and security context object for authenticated users.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/security.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  checkSqlAuth: async (req, username) => {\n    if (username === \"fooUser\") {\n      return {\n        password: \"mypassword\",\n        securityContext: {},\n      };\n    }\n\n    throw new Error(\"Incorrect user name or password\");\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Query for Custom Sorting\nDESCRIPTION: This JSON query is equivalent to the SQL query for custom sorting behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\n    \"sort_nulls.value\",\n    \"sort_nulls.value_for_sorting\"\n  ],\n  \"order\": {\n    \"sort_nulls.value_for_sorting\": \"asc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use ILIKE for contains operator\nDESCRIPTION: This change modifies the Dremio driver to use the `ILIKE` operator instead of `LIKE` for the `contains` operator.  This modification ensures that the `contains` operator performs case-insensitive matching when searching for substrings within data in Dremio, improving the flexibility and user experience of data queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updated Docker-Based package.json Configuration for Cube.js\nDESCRIPTION: Shows the restructured package.json with Cube.js dependencies moved to devDependencies and updated script to use cubejs-server directly, suitable for Docker deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/upgrading-cube/migrating-from-express-to-docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cube-app\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"./node_modules/.bin/cubejs-server server\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@cubejs-backend/postgres-driver\": \"^0.23.6\",\n    \"@cubejs-backend/server\": \"^0.23.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Tableau in Python\nDESCRIPTION: This code snippet demonstrates how to configure Semantic Layer Sync for Tableau using Python in Cube.js. It sets up the connection details including region, site, personal access token, and database information.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/tableau.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'tableau',\n      'name': 'Tableau Sync',\n      'config': {\n        'region': '10ax',\n        'site': 'mytableausite',\n        'personalAccessToken': 'cube-cloud',\n        'personalAccessTokenSecret': 'HW8TFrBfJyen+JQleh0/bw==:1BvJLIti9Fud04rN021EfHMnh4yYD3p4',\n        'database': 'Cube Cloud: production-deployment',\n      },\n    },\n  ]\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication in Cube.js REST API\nDESCRIPTION: This function is used for custom authentication in the Cube.js REST API. It verifies a token and sets the security context. It can be customized to implement specific authentication logic.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('check_auth')\ndef check_auth(ctx: dict, token: str) -> None:\n  if token == 'my_secret_token':\n    return {\n      'security_context': {\n        'user_id': 42\n      }\n    }\n\n  raise Exception('Access denied')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  checkAuth: (ctx, token) => {\n    if (token === 'my_secret_token') {\n      return {\n        security_context: {\n          user_id: 42\n        }\n      }\n    }\n\n    throw new Error('Access denied');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing String Dates in Cube.js for BigQuery (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to parse a string date column into a timestamp using the PARSE_TIMESTAMP function in BigQuery within a Cube.js cube definition. It uses the '%Y-%m-%d' format for parsing.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/string-time-dimensions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`events`, {\n  sql_table: `schema.events`,\n\n  dimensions: {\n    date: {\n      sql: `PARSE_TIMESTAMP('%Y-%m-%d', date)`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: File System Error Log for Cube Store\nDESCRIPTION: Error message displayed when the filesystem does not support retrieving file creation time, which is required for garbage collection functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nERROR [cubestore::remotefs::cleanup] <pid:1>\nerror while getting created time for file \"<name>.chunk.parquet\":\ncreation time is not available for the filesystem\n```\n\n----------------------------------------\n\nTITLE: Querying a Segment in SQL API\nDESCRIPTION: Demonstrates how to use a segment called 'is_completed' as a boolean column in the WHERE clause.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM orders\nWHERE is_completed IS TRUE;\n```\n\n----------------------------------------\n\nTITLE: Non-Aggregated SQL Query on Cube\nDESCRIPTION: This SQL query demonstrates a non-aggregated query against the 'orders' cube, selecting a dimension and a measure without grouping.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  status,  -- dimension\n  count    -- measure\nFROM orders\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for DAX API\nDESCRIPTION: Configuration option to control whether the DAX API exposes time dimensions as calendar hierarchies. Setting CUBEJS_DAX_CREATE_DATE_HIERARCHIES to false disables this default behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/dax-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCUBEJS_DAX_CREATE_DATE_HIERARCHIES=false\n```\n\n----------------------------------------\n\nTITLE: Creating a Rollup Join Pre-aggregation in Cube.js\nDESCRIPTION: This snippet demonstrates how to define a rollup join pre-aggregation in the products cube to enable aggregating data from multiple data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/joining-multiple-data-sources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    # ...\n\n    pre_aggregations:\n      - name: combined_rollup\n        type: rollup_join\n        dimensions:\n          - suppliers.email\n          - suppliers.company\n          - name\n        rollups:\n          - suppliers.suppliers_rollup\n          - products_rollup\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(\"products\", {\n  // ...\n\n  pre_aggregations: {\n    combined_rollup: {\n      type: `rollup_join`,\n      dimensions: [suppliers.email, suppliers.company, name],\n      rollups: [suppliers.suppliers_rollup, products_rollup],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: First Page Query in Cube.js\nDESCRIPTION: JSON query to fetch the first page of orders with limit 5 and ascending order.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"orders.number\"],\n  \"order\": {\n    \"orders.number\": \"asc\"\n  },\n  \"limit\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Time Dimension Granularity in GraphQL\nDESCRIPTION: GraphQL query demonstrating how to change the granularity of a time dimension to month.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  cube {\n    orders {\n      created_at {\n        month\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres-based Cube.js Project Example\nDESCRIPTION: Example command showing how to create a new Cube.js project named 'hello-world' with PostgreSQL database integration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli create hello-world -d postgres\n```\n\n----------------------------------------\n\nTITLE: Generating Segments Dynamically in JavaScript\nDESCRIPTION: This snippet illustrates how to dynamically generate segments using JavaScript. It creates segments for different user locations using a predefined object and array methods.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/segments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSegments = {\n  sf_users: [\"San Francisco\", \"CA\"],\n  ny_users: [\"New York City\", \"NY\"],\n};\n\ncube(`users`, {\n  // ...\n\n  segments: {\n    ...Object.keys(userSegments)\n      .map((segment) => ({\n        [segment]: {\n          sql: `${CUBE}.location = '${userSegments[segment][0]}' or ${CUBE}.state = '${userSegments[segment][1]}'`,\n        },\n      }))\n      .reduce((a, b) => ({ ...a, ...b })),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pre-aggregation Job Statuses with Curl (Bash)\nDESCRIPTION: This snippet shows how to retrieve the statuses of previously triggered pre-aggregation jobs using a POST request with curl. It includes an example request and response.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -d '{\n    \"action\": \"get\",\n    \"tokens\": [\n      \"e9a6a0c55885cea5371348500ce7d7dc\",\n      \"d1329b6c8d152e734fc4dcf7307b1b58\"\n    ]\n  }' \\\n  -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  https://localhost:4000/cubejs-api/v1/pre-aggregations/jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics Export in Vector for Grafana Cloud\nDESCRIPTION: TOML configuration for setting up Prometheus remote write sink in Vector to export Cube Cloud metrics to Grafana Cloud. Includes endpoint configuration and basic authentication settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/grafana-cloud.mdx#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.prometheus]\ntype = \"prometheus_remote_write\"\ninputs = [\n  \"metrics\"\n]\nendpoint = \"https://prometheus-prod-24-prod-eu-west-2.grafana.net/api/prom/push\"\n\n[sinks.prometheus.auth]\nstrategy = \"basic\"\nuser = \"1033221\"\npassword = \"eyJrIjoiYTg1OTQ2OGY4Yzg3MTQxODc5OTA4NDUxMGM4NTA2ZDQ3ZjliYWZjOCIsIm4iOiJwcnciLCJpZCI6ODc1NzE5fQ==\"\n```\n\n----------------------------------------\n\nTITLE: Fix ILIKE operator\nDESCRIPTION: This bug fix corrects the implementation of the `ILIKE` operator in the Dremio driver. The `ILIKE` operator performs a case-insensitive pattern matching, which did not behave as expected in previous versions. The fix ensures that the driver can accurately perform case-insensitive searches when using the `ILIKE` operator in queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Implementing schema_version for Dynamic Data Model Recompilation\nDESCRIPTION: Demonstrates how to use schema_version to trigger data model recompilation based on dynamic definitions from external sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\nimport random\n\n@config('schema_version')\ndef schema_version(ctx: dict) -> str:\n  # Don't do this!\n  # Data model would be recompiled on each request\n  context = ctx['securityContext']\n\n  return random.random()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  schemaVersion: ({ securityContext }) => {\n    // Don't do this!\n    // Data model would be recompiled on each request\n    return Math.random();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: New feature: oAuth headers support\nDESCRIPTION: Code commit adding optional oAuth headers support to the Pinot driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-pinot-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **pinot-driver:** add optional oAuth headers ([#8953](https://github.com/cube-js/cube/issues/8953)) ([7b1f797](https://github.com/cube-js/cube/commit/7b1f7975102d204c8ca5cf08d91acb9352d63a08))\n```\n\n----------------------------------------\n\nTITLE: Extending Cubes in YAML\nDESCRIPTION: This example demonstrates how to extend a cube using YAML syntax to reuse its properties and add new measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    sql_table: orders\n\n    measures:\n      - name: count\n        type: count\n        sql: id\n\n  - name: extended_order_facts\n    extends: order_facts\n\n    measures:\n      - name: double_count\n        type: number\n        sql: \"{count} * 2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Completed Orders with cURL in Cube.js\nDESCRIPTION: This cURL command queries the Cube.js API for completed orders. It includes dimensions for order number and creation date, with a filter for orders with 'completed' status and a limit of 5 results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/enforcing-mandatory-filters.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Completed orders\ncurl cube:4000/cubejs-api/v1/load \\\n  -H \"Authorization: eeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoib3BlcmF0b3IiLCJpYXQiOjE2Mjg3NDUwNDUsImV4cCI6MTgwMTU0NTA0NX0.VErb2t7Bc43ryRwaOiEgXuU5KiolCT-69eI_i2pRq4o\" \\\n  'query={\"measures\": [], \"order\": [[\"Users.created_at\", \"asc\"]], \"dimensions\": [\"orders.number\", \"orders.created_at\"],\n    \"filters\": [\n      {\n        \"member\": \"orders.status\",\n        \"operator\": \"equals\",\n        \"values\": [\"completed\"]\n      }\n    ],\n    \"limit\": 5\n  }'\n```\n\n----------------------------------------\n\nTITLE: Starting CubeJS Backend Server\nDESCRIPTION: Commands to install dependencies and start the CubeJS backend server for data processing and API endpoints.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Querying Shipped Orders with cURL in Cube.js\nDESCRIPTION: This cURL command queries the Cube.js API for shipped orders. It includes dimensions for order number and creation date, with a filter for orders with 'shipped' status and a limit of 5 results.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/enforcing-mandatory-filters.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Shipped orders\ncurl cube:4000/cubejs-api/v1/load \\\n  -H \"Authorization: eeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoib3BlcmF0b3IiLCJpYXQiOjE2Mjg3NDUwNDUsImV4cCI6MTgwMTU0NTA0NX0.VErb2t7Bc43ryRwaOiEgXuU5KiolCT-69eI_i2pRq4o\" \\\n  'query={\"measures\": [], \"order\": [[\"orders.created_at\", \"asc\"]], \"dimensions\": [\"orders.number\", \"orders.created_at\"],\n    \"filters\": [\n      {\n        \"member\": \"orders.status\",\n        \"operator\": \"equals\",\n        \"values\": [\"shipped\"]\n      }\n    ],\n    \"limit\": 5\n  }'\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Sockets in Cube.js Environment\nDESCRIPTION: This snippet shows how to enable Web Sockets on the backend using an environment variable in a .env file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/real-time-data-fetch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_WEB_SOCKETS=true\n```\n\n----------------------------------------\n\nTITLE: ResultSet Serialization Example\nDESCRIPTION: Shows how to serialize and deserialize a ResultSet object for storage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ResultSet } from '@cubejs-client/core';\n\nconst resultSet = await cubeApi.load(query);\n// You can store the result somewhere\nconst tmp = resultSet.serialize();\n\n// and restore it later\nconst resultSet = ResultSet.deserialize(tmp);\n```\n\n----------------------------------------\n\nTITLE: Database Utility for Fetching Dynamic Statuses in Node.js\nDESCRIPTION: This utility function connects to a PostgreSQL database using the pg package and credentials from environment variables. It queries distinct order statuses to be used in the dynamic attribute implementation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Pool } = require(\"pg\");\n\nconst pool = new Pool({\n  host: process.env.CUBEJS_DB_HOST,\n  port: process.env.CUBEJS_DB_PORT,\n  user: process.env.CUBEJS_DB_USER,\n  password: process.env.CUBEJS_DB_PASS,\n  database: process.env.CUBEJS_DB_NAME,\n});\n\nconst statusesQuery = `\n  SELECT DISTINCT status\n  FROM public.orders\n`;\n\nexports.fetchStatuses = async () => {\n  const client = await pool.connect();\n  const result = await client.query(statusesQuery);\n  client.release();\n\n  return result.rows.map((row) => row.status);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone Configuration in Python\nDESCRIPTION: Configuration reference for setting scheduled refresh timezones in cube.py file to enable proper pre-aggregation functionality across different timezones.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/faqs/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscheduled_refresh_time_zones\n```\n\n----------------------------------------\n\nTITLE: First Page Query Result Example\nDESCRIPTION: Example response showing the first five orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.number\": 1,\n  },\n  {\n    \"orders.number\": 2,\n  },\n  {\n    \"orders.number\": 3,\n  },\n  {\n    \"orders.number\": 4,\n  },\n  {\n    \"orders.number\": 5,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims Verification\nDESCRIPTION: Example of configuring JWT claims verification in Cube.js configuration file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jwt: {\n    audience: \"<AUDIENCE_FROM_IDENTITY_PROVIDER>\",\n    issuer: [\"<ISSUER_FROM_IDENTITY_PROVIDER>\"],\n    subject: \"<SUBJECT_FROM_IDENTITY_PROVIDER>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for SQL API\nDESCRIPTION: Docker Compose configuration example showing how to enable and configure the SQL API in Cube Core.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n      - 15432:15432\n    environment:\n      - CUBEJS_DEV_MODE=true\n      - CUBEJS_API_SECRET=SECRET\n\n      - CUBEJS_DB_USER=cube\n      - CUBEJS_DB_PASS=12345\n      - CUBEJS_DB_HOST=demo-db-examples.cube.dev\n      - CUBEJS_DB_NAME=ecom\n      - CUBEJS_DB_TYPE=postgres\n\n      - CUBEJS_PG_SQL_PORT=15432      # SQL API credential\n      - CUBEJS_SQL_USER=user          # SQL API credential\n      - CUBEJS_SQL_PASSWORD=password  # SQL API credential\n    volumes:\n      - .:/cube/conf\n```\n\n----------------------------------------\n\nTITLE: Sample Result of Unique Values Query\nDESCRIPTION: This JSON snippet shows a sample result of querying unique values for the 'city' dimension. It returns an array of objects, each containing a unique city value.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"users.city\": \"Austin\"\n  },\n  {\n    \"users.city\": \"Chicago\"\n  },\n  {\n    \"users.city\": \"Los Angeles\"\n  },\n  {\n    \"users.city\": \"Mountain View\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Optimizing timestamp formatting in Cube.js\nDESCRIPTION: This commit optimizes timestamp formatting and table names loading for scenarios with large partition ranges.  This aims to improve query performance when dealing with partitioned pre-aggregations by reducing overhead in timestamp handling. Further details can be found in commit e1f8dc5.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: none\nCODE:\n```\ne1f8dc5\n```\n\n----------------------------------------\n\nTITLE: Installing @cubejs-client/ngx with npm or yarn\nDESCRIPTION: Command line instructions to install the @cubejs-client/ngx package using either npm or yarn package managers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-ngx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @cubejs-client/ngx\n# or\nyarn add @cubejs-client/ngx\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch and Streaming Lambda Pre-aggregations\nDESCRIPTION: Configuration example demonstrating how to combine batch data with streaming pre-aggregations. Shows setup for both streaming and batch cubes with their respective pre-aggregations and lambda configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/lambda-pre-aggregations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: streaming_users\n    # This cube uses a streaming SQL data source such as ksqlDB\n    # ...\n\n    pre_aggregations:\n      - name: streaming\n        type: rollup\n        measures:\n          - CUBE.count\n        dimensions:\n          - CUBE.name\n        time_dimension: CUBE.created_at\n      granularity: day,\n      partition_granularity: day\n\n  - name: users\n    # This cube uses a data source such as ClickHouse or BigQuery\n    # ...\n\n    pre_aggregations:\n      - name: batch_streaming_lambda\n        type: rollup_lambda\n        rollups:\n          - users.batch\n          - streaming_users.streaming\n\n      - name: batch\n        type: rollup\n        measures:\n          - users.count\n        dimensions:\n          - users.name\n        time_dimension: users.created_at\n        granularity: day\n        partition_granularity: day\n        build_range_start:\n          sql: SELECT '2020-01-01'\n        build_range_end:\n          sql: SELECT '2022-05-30'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This cube uses a streaming SQL data source such as ksqlDB\ncube(\"streaming_users\", {\n  // ...\n\n  pre_aggregations: {\n    streaming: {\n      type: `rollup`,\n      measures: [CUBE.count],\n      dimensions: [CUBE.name],\n      time_dimension: CUBE.created_at,\n      granularity: `day`,\n      partition_granularity: `day`,\n    },\n  },\n});\n\n// This cube uses a data source such as ClickHouse or BigQuery\ncube(\"users\", {\n  // ...\n\n  pre_aggregations: {\n    batch_streaming_lambda: {\n      type: `rollup_lambda`,\n      rollups: [users.batch, streaming_users.streaming],\n    },\n\n    batch: {\n      type: `rollup`,\n      measures: [users.count],\n      dimensions: [users.name],\n      time_dimension: users.created_at,\n      granularity: `day`,\n      partition_granularity: `day`,\n      build_range_start: {\n        sql: `SELECT '2020-01-01'`,\n      },\n      build_range_end: {\n        sql: `SELECT '2022-05-30'`,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Context and Authentication in Cube.js\nDESCRIPTION: This snippet shows how to configure contextToAppId(), extendContext(), and checkSqlAuth() in the Cube.js configuration file. It creates a new appId for each team, enforces a default team value, and sets up authentication with security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/security.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToAppId: ({ securityContext }) => {\n    return securityContext.team;\n  },\n\n  extendContext: ({ securityContext }) => {\n    if (!securityContext.team) {\n      securityContext.team = \"public\";\n    }\n\n    return {\n      securityContext,\n    };\n  },\n\n  checkSqlAuth: (query, username) => {\n    const securityContext = {\n      team: username,\n    };\n\n    return {\n      password: process.env.CUBEJS_SQL_PASSWORD,\n      securityContext: securityContext,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Cube JavaScript Client\nDESCRIPTION: Commands to install the Cube JavaScript client using either npm or Yarn package managers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save @cubejs-client/core\n\n# Yarn\nyarn add @cubejs-client/core\n```\n\n----------------------------------------\n\nTITLE: SQL Interval Multiplication\nDESCRIPTION: Added support for multiplying UTF8 strings with intervals for time-based calculations.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nutf8_string * interval\n```\n\n----------------------------------------\n\nTITLE: Date/Time Functions in PostgreSQL\nDESCRIPTION: Standard PostgreSQL date and time manipulation functions including DATE_ADD, DATE_TRUNC, DATEDIFF, EXTRACT, LOCALTIMESTAMP, and NOW. These functions support both query pushdown and various post-processing operations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nDATE_ADD\nDATE_TRUNC\nDATEDIFF\nEXTRACT\nLOCALTIMESTAMP\nNOW\n```\n\n----------------------------------------\n\nTITLE: Installing Cube JavaScript Client and React Package with npm or Yarn\nDESCRIPTION: Commands to install the necessary Cube packages for React integration. This snippet shows how to install @cubejs-client/core and @cubejs-client/react using either npm or Yarn package managers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/react.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save @cubejs-client/core @cubejs-client/react\n\n# Yarn\nyarn add @cubejs-client/core @cubejs-client/react\n```\n\n----------------------------------------\n\nTITLE: Defining Product Cube for Avocado Tenant (YAML)\nDESCRIPTION: This YAML snippet defines the 'products' cube for the 'avocado' tenant, selecting products with odd id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    sql: >\n      SELECT * FROM public.Products WHERE MOD (id, 2) = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Environment Variables in Cube\nDESCRIPTION: Environment variables configuration for setting up Azure Blob Storage as an export bucket in Cube. Requires Azure storage account access key and Snowflake integration name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/snowflake.mdx#2025-04-17_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=azure\nCUBEJS_DB_EXPORT_BUCKET=wasbs://my-bucket@my-account.blob.core.windows.net\nCUBEJS_DB_EXPORT_BUCKET_AZURE_KEY=<AZURE_STORAGE_ACCOUNT_ACCESS_KEY>\nCUBEJS_DB_EXPORT_INTEGRATION=azure_int\n```\n\n----------------------------------------\n\nTITLE: Filtering Before Date with beforeDate in Cube.js Query\nDESCRIPTION: Illustrates the use of the 'beforeDate' operator to retrieve all results before a specific date. The values should be an array with one element in 'YYYY-MM-DD' format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.time\",\n  \"operator\": \"beforeDate\",\n  \"values\": [\"2015-01-01\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Dbt Model in Python\nDESCRIPTION: Shows how to retrieve a specific dbt model by name using the Dbt.model method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\n\nmodel = dbt.model('orders')\nprint(model)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchy Visibility\nDESCRIPTION: Shows how to use the public parameter to control hierarchy visibility in the API. When set to false, the hierarchy cannot be queried through the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/hierarchies.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `users`,\n\n  // ...\n\n  hierarchies: {\n    location: {\n      title: `User Location`,\n      levels: [\n        state,\n        city\n      ],\n      public: false\n    }\n  }\n})\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: users\n\n    # ...\n\n    hierarchies:\n      - name: location\n        title: User Location\n        levels:\n          - state\n          - city\n        public: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Properties in YAML\nDESCRIPTION: Shows how to define custom properties for dimensions in the cube's model file, including both column-based and value-based properties.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/mdx-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: USERS\n    public: false\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.ID\"\n        type: number\n        meta:\n          properties:\n            - name: \"Property A\"\n              column: users_first_name\n            - name: \"Property B\"\n              value: users_city\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Database Structure\nDESCRIPTION: Creates a new warehouse, database, and schema in Snowflake for the demo application.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE WAREHOUSE cube_demo_wh;\nCREATE DATABASE cube_demo;\nCREATE SCHEMA cube_demo.ecom;\n```\n\n----------------------------------------\n\nTITLE: Commit - Add Support for GREATEST/LEAST SQL Functions\nDESCRIPTION: Git commit adding support for GREATEST and LEAST SQL functions in CubeSQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nc13a28e21514c0e06e41c0ed14e97621bd777cf7\n```\n\n----------------------------------------\n\nTITLE: Setting JWK URL Configuration\nDESCRIPTION: Example of configuring JWK URL in environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_JWK_URL='<URL_TO_JWKS_JSON>'\n```\n\n----------------------------------------\n\nTITLE: Fixing Athena Driver Quote Identifier\nDESCRIPTION: Bug fix for the Athena driver that corrects the quoteIdentifier function, addressing issue #2363.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **athena-driver:** Use correct quoteIdentifier, fix [#2363](https://github.com/cube-js/cube.js/issues/2363) ([968b3b7](https://github.com/cube-js/cube.js/commit/968b3b7363b0d2c6c8385c717f3d1f29300c5caf))\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_GROUP in JavaScript\nDESCRIPTION: Demonstrates how to use FILTER_GROUP context variable in JavaScript when multiple FILTER_PARAMS are used in a query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`cube_name`, {\n  sql: `\n    SELECT *\n    FROM table\n    WHERE ${FILTER_GROUP(\n      FILTER_PARAMS.cube_name.member_name.filter(sql_expression),\n      FILTER_PARAMS.cube_name.another_member_name.filter(sql_expression)\n    )}\n  `,\n\n  dimensions: {\n    member_name: {\n      // ...\n    },\n    \n    another_member_name: {\n      // ...\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Metabase Semantic Layer Sync in Python\nDESCRIPTION: Python configuration for setting up Semantic Layer Sync with Metabase. Defines authentication credentials and connection details using the @config decorator.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/metabase.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'metabase',\n      'name': 'Metabase Sync',\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'example.metabaseapp.com',\n        'database': 'Cube Cloud: production-deployment'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Queue Operations with Sequence Diagrams\nDESCRIPTION: These mermaid sequence diagrams depict the interactions within the queue system, illustrating how various components communicate during query processing and management. The diagrams emphasize the flow of data through different stages of queue operations and background execution processes.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-query-orchestrator/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant BackgroundQueryQueue\n    participant QueueQueue\n    participant QueueDriverInterface\n    participant CubeStore\n\n    QueueQueue->>QueueDriverInterface: getResult\n    QueueDriverInterface->>+CubeStore: QUEUE RESULT ?path\n    QueueDriverInterface-->>+QueueQueue: ResultResponse|null\n    deactivate CubeStore\n\n    QueueQueue->>QueueDriverInterface: addToQueue\n    QueueDriverInterface->>+CubeStore: QUEUE ADD PRIORITY N ?path ?payload\n    QueueDriverInterface-->>+QueueQueue: AddToQueueResponse\n\n    loop reconcileQueueImpl\n        QueueQueue->>QueueDriverInterface: getQueriesToCancel\n        QueueQueue->>QueueDriverInterface: getQueryAndRemove\n        QueueDriverInterface->>CubeStore: QUEUE TO_CANCEL ?stalled_timeout ?orphaned_timeout ?prefix\n\n        QueueQueue->>QueueDriverInterface: getActiveQueries\n        QueueDriverInterface->>CubeStore: QUEUE ACTIVE ?prefix\n        QueueDriverInterface-->>+QueueQueue: getActiveQueriesResponse\n\n        QueueQueue->>QueueDriverInterface: getToProcessQueries\n        QueueDriverInterface->>CubeStore: QUEUE PENDING ?prefix\n        QueueDriverInterface-->>+QueueQueue: getToProcessQueriesResponse\n\n        QueueQueue-)+BackgroundQueryQueue: processQuery\n        Note over QueueQueue,BackgroundQueryQueue: Async call to processQuery, which doesnt block here\n    end\n\n    alt lookUpInActive: Lookup query in processing\n        QueueQueue->>QueueDriverInterface: getQueryDef\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE GET ?key\n        CubeStore-->>+QueueQueue: QueryDef|null\n        deactivate CubeStore\n\n        QueueQueue->>QueueDriverInterface: getQueryStageState\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE LIST\n        CubeStore-->>+QueueQueue: TODO\n        deactivate CubeStore\n        Note over QueueQueue,QueueDriverInterface: Show waiting for query\n    end\n\n    QueueQueue->>QueueDriverInterface: getResultBlocking\n    activate CubeStore\n    QueueDriverInterface->>CubeStore: QUEUE RESULT_BLOCKING ?timeout ?key\n    CubeStore-->>+QueueQueue: ResultBlockingResponse|null\n    deactivate CubeStore\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant QueryOrchestrator\n    participant BackgroundQueryQueue\n    participant QueueDriverInterface\n    participant CubeStore\n\n    loop processQuery: Background execution\n        BackgroundQueryQueue->>QueueDriverInterface: retrieveForProcessing\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE RETRIEVE CONCURRENCY ?number ?path\n        CubeStore-->>+BackgroundQueryQueue: RetrieveResponse\n        deactivate CubeStore\n\n        BackgroundQueryQueue->>QueueDriverInterface: optimisticQueryUpdate\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE MERGE_EXTRA ?key {\"startTime\"}\n        CubeStore-->>+BackgroundQueryQueue: ok\n        deactivate CubeStore\n\n        BackgroundQueryQueue->>QueueDriverInterface: optimisticQueryUpdate\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE MERGE_EXTRA ?key {\"cancelHandler\"}\n        CubeStore-->>+BackgroundQueryQueue: ok\n        deactivate CubeStore\n\n        par executing: Query\n            BackgroundQueryQueue->>QueueDriverInterface: updateHeartBeat\n            QueueDriverInterface-->>BackgroundQueryQueue: ok\n            Note over BackgroundQueryQueue,QueueDriverInterface: intervalTimer\n\n            BackgroundQueryQueue->>QueryOrchestrator: execute\n            QueryOrchestrator-->>BackgroundQueryQueue: result\n        end\n\n        BackgroundQueryQueue->>QueueDriverInterface: setResultAndRemoveQuery\n        activate CubeStore\n        QueueDriverInterface->>CubeStore: QUEUE ACK ?key ?result\n        CubeStore-->>+BackgroundQueryQueue: AckResponse\n        deactivate CubeStore\n    end\n```\n\n----------------------------------------\n\nTITLE: Aggregated SQL Query on Cube\nDESCRIPTION: This SQL query shows an aggregated query using the MEASURE function to aggregate the 'count' measure, grouped by the 'status' dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  status,         -- dimension\n  MEASURE(count)  -- measure\nFROM orders\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in JavaScript Configuration\nDESCRIPTION: Shows how to access environment variables in a cube.js configuration file using the global process.env object, with examples of handling undefined values and providing default values using the || operator.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvalue_or_undefined = process.env.MY_ENV_VAR\nconsole.log(value_or_undefined)\n\nvalue_or_default = process.env.MY_OTHER_ENV_VAR || 'my_default_value'\nconsole.log(value_or_default)\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Time Zones in Cube.js\nDESCRIPTION: Specifies the list of time zones for pre-aggregation building. Can be configured as a static array or dynamically based on security context.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n# An array of time zones\nconfig.scheduled_refresh_time_zones = [\n  'America/Vancouver',\n  'America/Toronto'\n]\n\n# Alternatively, a function returning an array of time zones\n@config('scheduled_refresh_time_zones')\ndef scheduled_refresh_time_zones(ctx: dict) -> list[str]:\n  time_zones = {\n    'tenant_1': ['America/New_York'],\n    'tenant_2': ['America/Chicago'],\n    'tenant_3': ['America/Los_Angeles']\n  }\n  default_time_zones = ['UTC']\n  tenant_id = ctx['securityContext']['tenant_id']\n  return time_zones.get(tenant_id, default_time_zones)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // An array of time zones\n  scheduledRefreshTimeZones: [\n    'America/Vancouver',\n    'America/Toronto'\n  ],\n\n  // Alternatively, a function returning an array of time zones\n  scheduledRefreshTimeZones: ({ securityContext }) => {\n    let time_zones = {\n      'tenant_1': ['America/New_York'],\n      'tenant_2': ['America/Chicago'],\n      'tenant_3': ['America/Los_Angeles']\n    }\n    let default_time_zones = ['UTC']  \n    let tenant_id = securityContext.tenant_id\n    return time_zones[tenant_id] || default_time_zones\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Dbt Class from JSON File in Python\nDESCRIPTION: Example of initializing the Dbt class by loading a dbt manifest.json file and parsing its contents.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom cube_dbt import Dbt\n\nmanifest_path = './manifest.json'\n\nwith open(manifest_path, 'r') as file:\n  manifest = json.loads(file.read())\n  dbt = Dbt(manifest)\n```\n\n----------------------------------------\n\nTITLE: Encoding Google BigQuery credentials for Cube\nDESCRIPTION: This snippet demonstrates how to encode the Google BigQuery key file using Base64 and set it as an environment variable for Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/google-bigquery.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_BQ_CREDENTIALS=$(cat /path/to/my/keyfile.json | base64)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Default Sorting\nDESCRIPTION: This SQL query demonstrates the default sorting behavior where NULL values appear last.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT value\nFROM sort_nulls\nGROUP BY 1\nORDER BY 1 ASC;\n```\n\n----------------------------------------\n\nTITLE: Set and NotSet Operators in Cube.js Filters\nDESCRIPTION: These snippets demonstrate the use of set and notSet operators in Cube.js filters to check for NULL and non-NULL values respectively.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.author_name\",\n  \"operator\": \"set\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.author_name\",\n  \"operator\": \"notSet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Druid Database Connection in Cube.js\nDESCRIPTION: This code snippet demonstrates how to set up the necessary environment variables for connecting Cube.js to a Druid database. It includes the database type, URL, username, and password.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/druid.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=druid\nCUBEJS_DB_URL=https://my.druid.host:8082\nCUBEJS_DB_USER=druid\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore for Cube\nDESCRIPTION: Configuration for .dockerignore file to exclude model files, configuration files, environment variables, and dependencies from being copied to the Docker image.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_7\n\nLANGUAGE: gitignore\nCODE:\n```\nmodel\ncube.py\ncube.js\n.env\nnode_modules\nnpm-debug.log\n```\n\n----------------------------------------\n\nTITLE: Fix for HLL Rolling window query failure in Cube.js\nDESCRIPTION: This commit addresses a bug that caused HLL rolling window queries to fail. The specific cause of the failure and the implemented fix are not detailed, but can be found using the commit hash 581a52a. The fix likely involves changes to the query processing logic or data aggregation methods.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n581a52a\n```\n\n----------------------------------------\n\nTITLE: JWT for Avocado Tenant Query\nDESCRIPTION: This JSON snippet shows the JWT structure for querying the Avocado tenant's data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"tenant\": \"Avocado\",\n  \"iat\": 1000000000,\n  \"exp\": 5000000000\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation for Multi-tenant Setup\nDESCRIPTION: Example of generating JWT tokens with tenant-specific information for authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multitenancy.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\nconst CUBE_API_SECRET = \"secret\";\n\nconst cubeToken = jwt.sign({ appId: \"1\", userId: \"2\" }, CUBE_API_SECRET, {\n  expiresIn: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Environment Variables for AWS Cognito Integration\nDESCRIPTION: This configuration sets up the necessary environment variables in Cube to validate JWT tokens issued by AWS Cognito. It specifies the JWK URL, audience, issuer, algorithm, and claims namespace to properly verify tokens.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/aws-cognito.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_JWK_URL=https://cognito-idp.<AWS_REGION>.amazonaws.com/<USER_POOL_ID>/.well-known/jwks.json\nCUBEJS_JWT_AUDIENCE=<APPLICATION_URL>\nCUBEJS_JWT_ISSUER=https://cognito-idp.<AWS_REGION>.amazonaws.com/<USER_POOL_ID>\nCUBEJS_JWT_ALGS=RS256\nCUBEJS_JWT_CLAIMS_NAMESPACE=<CLAIMS_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-aggregations Schema in Cube.js\nDESCRIPTION: Sets up the database schema name for storing pre-aggregations. Can be configured dynamically based on security context, with different schemas for development and production environments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('pre_aggregations_schema')\ndef pre_aggregations_schema(ctx: dict) -> str:\n  return f\"pre_aggregations_{ctx['securityContext']['tenant_id']}\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preAggregationsSchema: ({ securityContext }) => {\n    return `pre_aggregations_${securityContext.tenant_id}`;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running Cube Docker Image with Databricks JDBC\nDESCRIPTION: Commands to build the Docker image with the Databricks JDBC driver and run it, using the environment variables from the .env file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t cube-jdk .\ndocker run -it -p 4000:4000 --env-file=.env cube-jdk\n```\n\n----------------------------------------\n\nTITLE: Example Query JSON for Cube.js\nDESCRIPTION: This JSON represents a query to be executed against the pre-aggregation. It includes measures, time dimensions, filters, and dimensions to be retrieved.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\n    \"orders.order_total\"\n  ],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"orders.timestamp\",\n      \"granularity\": \"hour\",\n      \"dateRange\": [\n        \"2022-12-14T06:00:00.000\",\n        \"2023-01-13T06:00:00.000\"\n      ]\n    }\n  ],\n  \"order\": {\n    \"orders.timestamp\": \"asc\"\n  },\n  \"filters\": [\n    {\n      \"member\": \"orders.product_category\",\n      \"operator\": \"equals\",\n      \"values\": [\n        \"Electronics\"\n      ]\n    },\n    {\n      \"member\": \"orders.product_name\",\n      \"operator\": \"equals\",\n      \"values\": [\n        \"Keyboard\",\n        \"Mouse\"\n      ]\n    }\n  ],\n  \"dimensions\": [\n    \"orders.zip_code\"\n  ],\n  \"limit\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Username and Password Override for ClickHouse Driver\nDESCRIPTION: This enhancement allows overriding Username and Password from Driver Config, providing more flexibility for connection management. Implemented in PR #9085.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **clickhouse-driver:** Support overriding Username & Password from Driver Config ([#9085](https://github.com/cube-js/cube/issues/9085)) ([c5aa6cc](https://github.com/cube-js/cube/commit/c5aa6cc4aca0c22dacd24253fe116f8619f96601))\n```\n\n----------------------------------------\n\nTITLE: SHOW Command Syntax\nDESCRIPTION: Syntax for SHOW command to display runtime parameters, either specific named parameters or all parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW name\nSHOW ALL\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Individual File Mounts\nDESCRIPTION: Docker Compose configuration snippet showing how to mount individual files instead of the entire directory when working with npm dependencies to avoid hiding the node_modules folder.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    # ...\n    volumes:\n      - ./model:/cube/conf/model\n      - ./cube.js:/cube/conf/cube.js\n      # Other necessary files\n```\n\n----------------------------------------\n\nTITLE: Applying Measure Filter in Cube.js Query\nDESCRIPTION: Shows how to use the 'measureFilter' operator to apply an existing measure's filters to the current query. This is typically used in drilldown queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"Orders.count\",\n  \"operator\": \"measureFilter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Worker in Cube\nDESCRIPTION: Setting up a dedicated Refresh Worker instance to handle cache and pre-aggregation updates in the background.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/production-checklist.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\n# Set to true so a Cube instance acts as a refresh worker\nCUBEJS_REFRESH_WORKER=true\n```\n\n----------------------------------------\n\nTITLE: Exporting Helper Functions for Cube Data Models\nDESCRIPTION: This snippet defines a helper function for parsing dates with time zones. The function is exported so it can be used in multiple cube definitions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/code-reusability-export-and-import.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in helpers.js\nexport const parseDateWithTimeZone = (column) =>\n  `PARSE_TIMESTAMP('%F %T %Ez', ${column})`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Cube in YAML\nDESCRIPTION: YAML configuration to make a cube private by setting the public parameter to false. This prevents the cube from being automatically synchronized with BI tools.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-bi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n    public: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Retool Query Data with Handlebars\nDESCRIPTION: Shows how to reference Cube query data in Retool charts using Handlebars syntax. The example accesses data from a query named 'OrdersByMonth' to populate chart components.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/retool.mdx#2025-04-17_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{OrdersByMonth.data.data}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Materialize Database Connection in Cube Using Environment Variables\nDESCRIPTION: This code snippet demonstrates how to set up the necessary environment variables for connecting Cube to a Materialize database. It includes the database type, host, port, name, user, password, and cluster name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/materialize.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=materialize\nCUBEJS_DB_HOST=my.materialize.host\nCUBEJS_DB_PORT=6875\nCUBEJS_DB_NAME=materialize\nCUBEJS_DB_USER=materialize\nCUBEJS_DB_PASS=materialize\nCUBEJS_DB_MATERIALIZE_CLUSTER=quickstart\n```\n\n----------------------------------------\n\nTITLE: Native X-Pack SQL ElasticSearch Driver Feature\nDESCRIPTION: This feature introduces native support for X-Pack SQL within the ElasticSearch driver for Cube.js. It enhances the driver's capabilities by allowing the use of SQL queries directly against ElasticSearch, providing more flexibility and power in data retrieval and analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: SQL Query Generated from JSON Query with One-to-Many Join\nDESCRIPTION: This SQL query is generated from the JSON query, using a LEFT JOIN from customers to orders based on the one-to-many relationship.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/concepts/working-with-joins.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"orders\".status \"orders__status\",\n  \"customers\".company \"customers__company\",\n  count(\"orders\".id) \"orders__count\"\nFROM\n  public.customers AS \"customers\"\n  LEFT JOIN public.orders AS \"orders\"\n    ON \"customers\".id = \"orders\".customer_id\nGROUP BY 1, 2\nORDER BY 2 ASC\nLIMIT 10000\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File for Cube\nDESCRIPTION: Generates a docker-compose.yml file that configures Cube to run in Docker, exposing necessary ports and mounting the current directory as a volume for configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat > docker-compose.yml << EOL\nversion: '2.2'\nservices:\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n      - 3306:3306\n    env_file: .env\n    volumes:\n      - .:/cube/conf\nEOL\n```\n\n----------------------------------------\n\nTITLE: Server Core Concurrency Update\nDESCRIPTION: Introduction of CUBEJS_REFRESH_WORKER_CONCURRENCY environment variable and updated default concurrency settings for database drivers.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-firebolt-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **server-core:** Introduce CUBEJS_REFRESH_WORKER_CONCURRENCY env and update default concurrency settings for drivers ([#9168](https://github.com/cube-js/cube/issues/9168)) ([7ef6282](https://github.com/cube-js/cube/commit/7ef628273905d47996b108862a52dde89b9525e3))\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Dataset Example\nDESCRIPTION: Example of creating a custom SQL dataset using joins, which can be used in BI tools.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/joins.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT o.count as count, p.name as product_name, p.description as product_description\nFROM orders o\nCROSS JOIN products p;\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database for Cube.js Dashboard\nDESCRIPTION: Commands to download and import sample e-commerce data into a PostgreSQL database. Creates a new database named 'ecom' and imports data from a SQL dump file.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://cube.dev/downloads/ecom-dump.sql > ecom-dump.sql\n$ createdb ecom\n$ psql --dbname ecom -f ecom-dump.sql\n```\n\n----------------------------------------\n\nTITLE: Simplified Cross Join Implementation in Cube.js\nDESCRIPTION: A more concise way to implement the cross join technique for dynamic parameter passing in Cube.js data modeling. This approach uses a simpler SQL structure while achieving the same result.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/passing-dynamic-parameters-in-a-query.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql: >\n      WITH \n      city AS (\n        SELECT DISTINCT city AS city_filter\n        FROM public.users\n        WHERE {FILTER_PARAMS.users.city.filter('city')}\n        )\n      SELECT city.city_filter, users.*\n      FROM city, public.users\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql: `\n    WITH \n    city AS (\n      SELECT DISTINCT city AS city_filter\n      FROM public.users\n      WHERE {FILTER_PARAMS.users.city.filter('city')}\n      )\n    SELECT city.city_filter, users.*\n    FROM city, public.users\n  `,\n```\n\n----------------------------------------\n\nTITLE: YAML Data Model Editing\nDESCRIPTION: The Visual Model editor provides a YAML mode for advanced data modeling features not supported in the visual interface. This allows users to edit data models using YAML syntax while staying within the Visual Model editor.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/visual-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Since no explicit code snippets are shown in the content, \n# but YAML is referenced as the supported syntax\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduled Refresh Contexts in Cube.js\nDESCRIPTION: Sets up security contexts for scheduled refreshes of pre-aggregations, necessary when using securityContext inside context_to_app_id or context_to_orchestrator_id.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('scheduled_refresh_contexts')\ndef scheduled_refresh_contexts() -> list[object]:\n  return [\n    {\n      'securityContext': {\n        'tenant_id': 123,\n        'bucket': 'demo'\n      }\n    },\n    {\n      'securityContext': {\n        'tenant_id': 456,\n        'bucket': 'demo_2'\n      }\n    }\n  ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  scheduledRefreshContexts: () => [\n    {\n      securityContext: {\n        tenant_id: 123,\n        bucket: 'demo'\n      }\n    },\n    {\n      securityContext: {\n        tenant_id: 456,\n        bucket: 'demo_2'\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Dbt Model Dimensions in Python\nDESCRIPTION: Demonstrates rendering the columns of a dbt model as dimensions for use in Cube data models using the Model.as_dimensions method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.as_dimensions(skip=['status']))\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for Streamlit-Cube Integration\nDESCRIPTION: Installation commands for required Python packages including streamlit, sqlalchemy, and pandas needed for connecting Streamlit to Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/streamlit.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install streamlit\npip install sqlalchemy\npip install pandas\n```\n\n----------------------------------------\n\nTITLE: Fetching Metadata in Cube.js\nDESCRIPTION: This bash command demonstrates how to fetch metadata about available cubes and dimensions from the Cube.js /meta endpoint. It's useful for dynamically generating dimension lists or dropdowns.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/getting-unique-values-for-a-field.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:4000/cubejs-api/v1/meta\n```\n\n----------------------------------------\n\nTITLE: Regular Query Example Using REST API\nDESCRIPTION: The same regular query expressed using REST API JSON syntax with dimensions, measures, filters, and time dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\n    \"users.state\",\n    \"users.city\",\n    \"orders.status\"\n  ],\n  \"measures\": [\n    \"orders.count\"\n  ],\n  \"filters\": [\n    {\n      \"member\": \"users.state\",\n      \"operator\": \"notEquals\",\n      \"values\": [\"us-wa\"]\n    }\n  ],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"orders.created_at\",\n      \"dateRange\": [\"2020-01-01\", \"2021-01-01\"]\n    }\n  ],\n  \"limit\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Orders Cube with Attribute Information in Cube.js\nDESCRIPTION: This snippet creates an 'orders' cube that contains the attributes in the EAV model. It includes dimensions for user_id (foreign key), status (attribute name), and created_at (timestamp).\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  dimensions: {\n    user_id: {\n      sql: `user_id`,\n      type: `string`,\n    },\n\n    status: {\n      sql: `status`,\n      type: `string`,\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Custom Cube Docker Image\nDESCRIPTION: Command to build a custom Docker image for Cube with the specified username or organization name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <YOUR-USERNAME>/cube-custom-image .\n```\n\n----------------------------------------\n\nTITLE: Vue Client Bug Fix - Boolean Filter\nDESCRIPTION: Fix for handling boolean operators in filters without using builderProps in the Vue client\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **client-vue:** Fix boolean operator in filter without using builderProps ([#4782](https://github.com/cube-js/cube.js/issues/4782)) ([904171e](https://github.com/cube-js/cube.js/commit/904171ee85185f1ba1fcf812ba58ae6bc11b8407))\n```\n\n----------------------------------------\n\nTITLE: Fixing File Not Found for S3 During Uploads - Javascript\nDESCRIPTION: This commit fixes a bug where files could not be found in S3 during upload processes when using cubestore. It addresses issues related to locating files in S3 buckets during upload operations, ensuring proper file handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **cubestore:** File not found for S3 during uploads ([a1b0087](https://github.com/cube-js/cube.js/commit/a1b00876c64e3206a9e0cbfa39f0440a865125a2))\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Cube Query in JSON Format for Observable\nDESCRIPTION: Creates a JSON query object for Cube, specifying measures, time dimensions, and order. This query structure is used to request data from Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/observable.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njsonQuery = {\n  query: {\n    measures: [\"orders.count\"],\n    timeDimensions: [\n      {\n        dimension: \"orders.created_at\",\n        granularity: \"month\",\n      },\n    ],\n    order: {\n      \"orders.created_at\": \"asc\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: LDAP Roles Security Context Example\nDESCRIPTION: Example JSON showing how LDAP mapped roles appear in the security context. The context includes both default and mapped roles in the cubeCloud.roles array.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/sso.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cubeCloud\": {\n    \"roles\": [\n      \"Everyone\",\n      \"manager\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage as Export Bucket for Databricks in Cube\nDESCRIPTION: Sets up environment variables to use Google Cloud Storage as an export bucket for Databricks pre-aggregations in Cube. Includes bucket type, name, and GCS credentials.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET=gs://databricks-export-bucket\nCUBEJS_DB_EXPORT_BUCKET_TYPE=gcs\nCUBEJS_DB_EXPORT_GCS_CREDENTIALS=<BASE64_ENCODED_SERVICE_CREDENTIALS_JSON>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - KSQL Query Handling\nDESCRIPTION: Implements a fix to only allow select queries for KSQL from Cube Store, requiring pre-aggregation creation if Kafka download is not enabled.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **ksql-driver:** Select queries for ksql allowed only from Cube Store. In order to query ksql create pre-aggregation first if Kafka download isn't enabled ([0c2f701](https://github.com/cube-js/cube/commit/0c2f7015d7b2949009fd4aa5c0974547f7463748))\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Socket Transport in Cube.js Client\nDESCRIPTION: This code demonstrates how to set up Web Socket transport for the Cube.js client using the WebSocketTransport class.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/real-time-data-fetch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\nimport WebSocketTransport from \"@cubejs-client/ws-transport\";\n\nconst cubeApi = cube({\n  transport: new WebSocketTransport({\n    authorization: CUBE_TOKEN,\n    apiUrl: \"ws://localhost:4000/\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MSSQL Driver Domain Environment Variable\nDESCRIPTION: This commit introduces a new feature to the MSSQL driver that allows setting the domain via an environment variable. This provides greater flexibility in configuring the MSSQL driver, especially in environments where the domain is not fixed or is dynamically determined.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Result Data for Completed Orders in Cube.js\nDESCRIPTION: This is the JSON response showing completed orders after applying the mandatory filter. The results only include orders created after December 30th, 2019, sorted by creation date in ascending order.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/enforcing-mandatory-filters.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.number\": 78,\n    \"orders.created_at\": \"2020-01-01T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 43,\n    \"orders.created_at\": \"2020-01-02T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 87,\n    \"orders.created_at\": \"2020-01-04T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 45,\n    \"orders.created_at\": \"2020-01-04T00:00:00.000\",\n  },\n  {\n    \"orders.number\": 28,\n    \"orders.created_at\": \"2020-01-05T00:00:00.000\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Jinja Template Support in Cube.js Schema\nDESCRIPTION: This snippet introduces initial support for Jinja templates within the Cube.js schema definition. Jinja templates allow for dynamic generation of schema configurations, enabling more flexible and reusable data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Using EXPLAIN ANALYZE for Detailed Query Execution Plan\nDESCRIPTION: Example of using EXPLAIN ANALYZE to view the physical execution plan including router and worker node details.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE SELECT orders__platform, orders__gender, sum(orders__count) FROM dev_pre_aggregations.orders_general_o32v4dvq_vbyemtl2_1h5hs8r\nGROUP BY orders__gender, orders__platform\n```\n\n----------------------------------------\n\nTITLE: DAX Function Reference Table\nDESCRIPTION: Tabular listing of DAX functions with their support status, unsupported features, and implementation caveats. Organized by function categories including statistical, table manipulation, text, and miscellaneous functions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/dax-api/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | <nobr>Unsupported features</nobr> | Caveats |\n| --- | --- | --- |\n| [`ADDCOLUMNS`](https://learn.microsoft.com/en-us/dax/addcolumns-function-dax) | Aggregate expressions | — |\n| [`CURRENTGROUP`](https://learn.microsoft.com/en-us/dax/currentgroup-function-dax) | — | — |\n| [`DISTINCT`](https://learn.microsoft.com/en-us/dax/distinct-function-dax) | — | — |\n| [`GROUPBY`](https://learn.microsoft.com/en-us/dax/groupby-function-dax) | — | — |\n```\n\n----------------------------------------\n\nTITLE: Sample Users Data Structure in JavaScript\nDESCRIPTION: An array of user objects showing the structure of the data, including name and age properties, which will be used for calculating statistical measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/percentiles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"users.name\": \"Abbott, Breanne\",\n    \"users.age\": 52,\n  },\n  {\n    \"users.name\": \"Abbott, Dallas\",\n    \"users.age\": 43,\n  },\n  {\n    \"users.name\": \"Abbott, Gia\",\n    \"users.age\": 36,\n  },\n  {\n    \"users.name\": \"Abbott, Tom\",\n    \"users.age\": 39,\n  },\n  {\n    \"users.name\": \"Abbott, Ward\",\n    \"users.age\": 67,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage as Export Bucket for Databricks in Cube\nDESCRIPTION: Sets up environment variables to use Azure Blob Storage as an export bucket for Databricks pre-aggregations in Cube. Includes bucket type, name, and Azure storage account access key.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/databricks-jdbc.mdx#2025-04-17_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=azure\nCUBEJS_DB_EXPORT_BUCKET=wasbs://my-bucket@my-account.blob.core.windows.net\nCUBEJS_DB_EXPORT_BUCKET_AZURE_KEY=<AZURE_STORAGE_ACCOUNT_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Scopes for Service Accounts\nDESCRIPTION: JavaScript configuration example showing how to restrict meta endpoint access to service accounts using contextToApiScopes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToApiScopes: (securityContext, defaultScopes) => {\n    if (securityContext.service) {\n      return [\"meta\", ...defaultScopes];\n    }\n\n    return defaultScopes;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB as Data Source in Cube\nDESCRIPTION: This code snippet shows how to set up DuckDB as the data source for Cube using a .env file. It specifies the database type as DuckDB.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/duckdb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=duckdb\n```\n\n----------------------------------------\n\nTITLE: Vue3 Client Bug Fix - setQuery Warning Fix\nDESCRIPTION: Fix to avoid Vue3 warnings related to setQuery functionality in version 0.30.54\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-client/vue3:** avoid setQuery Vue3 warnings ([#5084](https://github.com/cube-js/cube.js/issues/5084)) ([#5120](https://github.com/cube-js/cube.js/issues/5120)) ([d380da4](https://github.com/cube-js/cube.js/commit/d380da4e2db09c3eccd8d175287db314568638b1))\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Driver Bug Fix\nDESCRIPTION: This bug fix addresses a TypeError that occurred when the Elasticsearch driver attempted to convert an undefined or null value to an object. The fix ensures that the driver handles null or undefined values correctly, preventing runtime errors and improving stability.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Setting Up Superset Roles\nDESCRIPTION: Initializes default roles and permissions in Superset. This is the final step in the Superset setup process.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it superset superset init\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Cloud Driver Tests in Shell\nDESCRIPTION: Creates environment variable files for Athena and BigQuery configurations. These files contain necessary credentials and settings for running cloud driver tests.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cat <<EOF > ~/.env.athena\nCUBEJS_AWS_KEY=...\nCUBEJS_AWS_SECRET=...\nCUBEJS_AWS_REGION=...\nCUBEJS_AWS_S3_OUTPUT_LOCATION=...\nCUBEJS_DB_EXPORT_BUCKET=...\nEOF\n$ cat <<EOF > ~/.env.athena\nCUBEJS_DB_BQ_PROJECT_ID=...\nCUBEJS_DB_BQ_CREDENTIALS=...\nCUBEJS_DB_EXPORT_BUCKET=...\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Product Cube for Mango Tenant (YAML)\nDESCRIPTION: This YAML snippet defines the 'products' cube for the 'mango' tenant, selecting products with even id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    sql: >\n      SELECT * FROM public.Products WHERE MOD (id, 2) = 0\n```\n\n----------------------------------------\n\nTITLE: Query Timeout Configuration\nDESCRIPTION: Introduction of a unified database query timeout environment variable CUBEJS_DB_QUERY_TIMEOUT to control various timeout settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Introduce single unified CUBEJS_DB_QUERY_TIMEOUT env variable to set all various variables that control database query timeouts\n```\n\n----------------------------------------\n\nTITLE: Defining a Cube with Numeric Dimensions and Measures in YAML\nDESCRIPTION: This YAML snippet defines a cube named 'cube_with_big_numbers' with a numeric dimension and measure. It includes SQL for selecting large numbers to demonstrate handling of big integers.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/cast-numerics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: cube_with_big_numbers\n    sql: >\n      SELECT              123::BIGINT AS number UNION ALL\n      SELECT 9007199254740991::BIGINT AS number UNION ALL\n      SELECT 9999999999999999::BIGINT AS number\n\n    dimensions:\n      - name: number\n        sql: number\n        type: number\n\n    measures:\n      - name: sum\n        sql: number\n        type: sum\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Superset in Python\nDESCRIPTION: Python configuration for setting up Semantic Layer Sync with Apache Superset, including authentication credentials and endpoint URL. This enables automated synchronization between Cube and Superset.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-bi.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list:\n   return [{\n      'type': 'superset',\n      'name': 'Superset Sync',\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'superset.example.com',\n      }\n    }]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dbt Model Columns in Python\nDESCRIPTION: Example of iterating over columns of a dbt model using the Model.columns property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nfor column in model.columns:\n  print(column)\n```\n\n----------------------------------------\n\nTITLE: Feature: LambdaView hybrid query\nDESCRIPTION: This feature introduces LambdaView, which allows hybrid queries that combine data from source tables and pre-aggregation tables. This enables more efficient querying by leveraging pre-aggregated data where available, while still accessing raw data when necessary.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Starting Cube Development Server\nDESCRIPTION: Command to start the Cube development server using Docker Compose in detached mode\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/core/create-a-project.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with Many-to-One Relationships in YAML\nDESCRIPTION: YAML configuration for orders and customers cubes with a many-to-one relationship, defining primary keys, dimensions, and measures. Used to demonstrate chasm and fan trap detection.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n      - name: city\n        sql: city\n        type: string\n\n    joins:\n      - name: customers\n        relationship: many_to_one\n        sql: \"{orders}.customer_id = {customers.id}\"\n\n- name: customers\n    sql_table: customers\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n    measures:\n      - name: average_age\n        sql: age\n        type: avg\n```\n\n----------------------------------------\n\nTITLE: Organizing Measure Groups in YAML\nDESCRIPTION: Demonstrates how to organize measures into groups (folders) in the view's model file for better organization in the MDX API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/mdx-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n    description: \"Data about orders, amount, count and breakdown by status and geography.\"\n    meta:\n      folders:\n          - name: \"Folder A\"\n            members:\n              - total_amount\n              - average_order_value\n          - name: \"Folder B\"\n            members:\n              - completed_count\n              - completed_percentage\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Authentication for Microsoft SQL Server in Cube.js\nDESCRIPTION: This code demonstrates how to set up Windows Authentication (trusted connection) for Microsoft SQL Server in Cube.js. It requires creating a custom driver instance with the trustedConnection option set to true.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/ms-sql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MssqlDriver = require(\"@cubejs-backend/mssql-driver\");\nmodule.exports = {\n  driverFactory: ({ dataSource }) =>\n    new MssqlDriver({ database: dataSource, trustedConnection: true }),\n};\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Certificate Contents as Environment Variables in Cube Core\nDESCRIPTION: This snippet shows how to directly set the contents of SSL certificate files as environment variables in Cube Core, using a CA certificate as an example.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/using-ssl-connections-to-data-source.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_SSL_CA=\"-----BEGIN CERTIFICATE-----\nMIIDDjCCAfYCCQCN/HhSZ3ofTDANBgkqhkiG9w0BAQsFADBJMQswCQYDVQQGEwJV\nSzEMMAoGA1UECgwDSUJNMQ0wCwYDVQQLDARBSU9TMR0wGwYDVQQDDBRhaW9zLW9y\nY2gtZGV2LWVudi1DQTAeFw0yMTAyMTUyMzIyMTZaFw0yMzEyMDYyMzIyMTZaMEkx\nCzAJBgNVBAYTAlVLMQwwCgYDVQQKDANJQk0xDTALBgNVBAsMBEFJT1MxHTAbBgNV\nBAMMFGFpb3Mtb3JjaC1kZXYtZW52LUNBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEAyhYY9+4TduTsNRh/6MaRtE59j8HkAkoQYvNYZN7D1j1oV6yhzitn\noN4bD+HiQWe4J3mwAaJOAAJRCkIVyUXxwZUCPxGN/KVha/pcB8hN6LHfI6vInixp\nU9kHNYWWBn428nMeMqts7yqly/HwG1/qO+j4178c8lZNS7Uwh76y+lAEaIkeBipq\ni4WuCOiChFc/sIV7g4DcLKKbqzDWtRDjbsg7JRfsALO5gM360GrNYkhV4C5lm8Eh\nozNuaPhS65zO93PMj/3UTyuctXKa7WpaHJHoKZRXAuOwSamvqvFgIQ0SSnW+qcud\nfL3GAPJn7d065gh7JvgcT86v7WWBiUNs0QIDAQABMA0GCSqGSIb3DQEBCwUAA4IB\nAQCzw00d8e0e5AYZtzIk9hjczta7JHy2/cwTMv0opzBk6C26G6YZww+9brHW2w5U\nmY/HKBnGnMadjMWOZmm9Vu0B0kalYY0lJdE8alO1aiv5B9Ms/XIt7FzzGtfv9gYJ\ncw5/nzGBBMJNICC1kVLnzzlllLferhCIrczDyPcu16o1Flc7q1p8AbwQpC+A2I/L\n8nWlFeHZ+watLtQ1lF3qDzzCumPHrJqAGmlp0265owCM8Q5zv8AL5DStIZvtexrI\nJqbwLdbA8smyOFRwCckOWcWjnrEDjO2e3NLWINbB7Z4ZRviZSEH5UZlDLVu+ahGV\nKmZIuh7+XpXzJ1MN0SBZXgXH\n-----END CERTIFICATE-----\"\n```\n\n----------------------------------------\n\nTITLE: Vue Query Builder Event Handling\nDESCRIPTION: Code example showing reactive query handling in Vue components with events for query load and error states.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n9bce6ba964d71f0cba0e4d4e4e21a973309d77d4\n```\n\n----------------------------------------\n\nTITLE: Fixing Import Stream Stuck Issue - Javascript\nDESCRIPTION: This code snippet addresses an issue where the import stream would get stuck when dealing with large files in the Cubestore driver.  It implements a solution that handles larger uploads by utilizing temporary files, thus avoiding stream blockage.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **@cubejs-backend/cubestore-driver:** Import stream stuck if it's big: handle bigger uploads using temp files ([08155bc](https://github.com/cube-js/cube.js/commit/08155bc3ccc03f9bdcfa54a2ab6a2b10cd9edb39))\n```\n```\n\n----------------------------------------\n\nTITLE: Deriving Data Access Roles in Cube.js\nDESCRIPTION: This function is used to derive a list of data access roles from the security context. It is used by data access policies to determine user permissions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('context_to_roles')\ndef context_to_roles(ctx: dict) -> list[str]:\n  return ctx['securityContext'].get('roles', ['default'])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  contextToRoles: ({ securityContext }) => {\n    return securityContext.roles || ['default']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Results for Avocado Tenant\nDESCRIPTION: This JSON5 snippet shows the query results for the Avocado tenant, displaying products with odd id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json5\nCODE:\n```\n[\n  {\n    \"products.id\": 1,\n    \"products.name\": \"Generic Fresh Keyboard\",\n  },\n  {\n    \"products.id\": 3,\n    \"products.name\": \"Practical Wooden Keyboard\",\n  },\n  {\n    \"products.id\": 5,\n    \"products.name\": \"Handcrafted Rubber Chicken\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Pre-aggregation Configuration Example\nDESCRIPTION: YAML configuration example for defining a pre-aggregation with measures, dimensions, and time granularity.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npre_aggregations:\n  - name: main\n    measures:\n      - orders.count\n    dimensions:\n      - users.state\n      - users.city\n      - orders.status\n    time_dimension: orders.created_at\n    granularity: day\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for QuestDB Connection\nDESCRIPTION: Environment variable configuration for connecting Cube.js to QuestDB database, including database credentials and connection details.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/questdb.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=questdb\nCUBEJS_DB_HOST=my.questdb.host\nCUBEJS_DB_PORT=8812\nCUBEJS_DB_NAME=qdb\nCUBEJS_DB_USER=admin\nCUBEJS_DB_PASS=quest\n```\n\n----------------------------------------\n\nTITLE: Setting Data Source Concurrency in Cube.js\nDESCRIPTION: This snippet shows how to set the maximum number of concurrent queries to a data source using an environment variable. It's recommended to use the default configuration unless you're sure your data source can handle more concurrent queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/concurrency.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCUBEJS_CONCURRENCY=10\n```\n\n----------------------------------------\n\nTITLE: Cube.js Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for setting up Cube.js with Redis dependency. Includes port mappings, environment configuration, and volume mounting for custom dependencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\n\nservices:\n  cube:\n    image: cubejs/cube:latest\n    depends_on:\n      - redis\n    links:\n      - redis\n    ports:\n      # It's better to use random port binding for 4000/3000 ports\n      # without it you will not able to start multiple projects inside docker\n      - 4000:4000  # Cube.js API and Developer Playground\n      - 3000:3000  # Dashboard app, if created\n    env_file: .env\n    volumes:\n      # If you are going to use own dependencies, for example axios/vault or anything else for getting configuration\n      - .:/cube/conf\n\n  redis:\n    image: redis:6\n    restart: always\n```\n\n----------------------------------------\n\nTITLE: Checking Cube.js Deployment Readiness (Bash)\nDESCRIPTION: This snippet demonstrates how to check if a Cube.js deployment has successfully started by sending a GET request to the /readyz endpoint. It includes examples of successful and failed responses.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i http://localhost:4000/readyz\n```\n\n----------------------------------------\n\nTITLE: Table Column Precedence Over Projection\nDESCRIPTION: This bug fix ensures that table columns take precedence over projection in CubeSQL, mimicking the behavior of MySQL and Postgres. This resolves potential conflicts or ambiguities when column names appear in both the table and the projection. This ensures consistent and predictable query results.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Table columns should take precedence over projection to mimic MySQL and Postgres behavior ([60d6e45](https://github.com/cube-js/cube.js/commit/60d6e4511267b132df204fe7b637953d81e5f980))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Superset in Python\nDESCRIPTION: This Python code configures Semantic Layer Sync for Apache Superset using the 'semantic_layer_sync' option in the cube.py configuration file. It specifies the necessary credentials and settings for connecting to Superset.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-bi.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'superset',\n      'name': 'Superset Sync',\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'superset.example.com',\n        'database': 'Cube Cloud: production-deployment'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Fixing Daylight Saving Time in Druid Driver\nDESCRIPTION: This code snippet addresses an issue in the Druid driver related to daylight saving time. It ensures that the driver correctly handles timezones and adjusts for daylight saving, providing accurate time-based queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"### Bug Fixes\\n\\n- **druid-driver:** Respect day light saving ([#5613](https://github.com/cube-js/cube.js/issues/5613)) ([388c992](https://github.com/cube-js/cube.js/commit/388c992ca7a2d3730249fafb2a53b3accff21451))\"\n```\n\n----------------------------------------\n\nTITLE: Adding NGINX Service to Docker Compose Stack\nDESCRIPTION: This YAML configuration adds an NGINX service to the Docker Compose stack, mapping ports and volumes for SSL certificates and configuration files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ...\n  nginx:\n    image: nginx\n    ports:\n      - 443:443\n    volumes:\n      - ./nginx:/etc/nginx/conf.d\n      - ./ssl:/etc/ssl/private\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Credentials with Base64\nDESCRIPTION: Environment variables setup for BigQuery authentication using base64 encoded credentials and project ID.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/README.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCUBEJS_DB_BQ_PROJECT_ID=gcp-project-id\nCUBEJS_DB_BQ_CREDENTIALS=<base_64_credentials_json>\n```\n\n----------------------------------------\n\nTITLE: Custom dbt Model Column Rendering\nDESCRIPTION: YAML template showing custom rendering of dbt model columns as cube dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  {% for model in dbt_models() %}\n  - {{ model.as_cube() }}\n\n    dimensions:\n      {% for column in model.columns %}\n      - name: \"{{ column.name }}\"\n        sql: \"{{ column.sql }}\"\n        type: \"{{ column.type }}\"\n        description: \"{{ column.description }}\"\n        meta:\n          source: dbt\n      {% endfor %}\n\n    measures:\n      - name: count\n        type: count\n  {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Setting Cube REST API JWT Token in Observable\nDESCRIPTION: Sets the JWT token for authentication with Cube's REST API. This token is required to authorize requests to Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/observable.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncubeRestApiJwtToken = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTgzMzM3OTZ9.gUOoDgo_RJka_ZANdwSw3v8GkM4ZzH9LjxrxKxkGAk0\";\n```\n\n----------------------------------------\n\nTITLE: Refresh Key SQL for dbt Snapshots\nDESCRIPTION: SQL query to define a refresh key using dbt snapshot tracking columns.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CONCAT(COUNT(*), MAX(dbt_valid_from), MIN(dbt_valid_to))\nFROM orders_snapshot\n```\n\n----------------------------------------\n\nTITLE: Error: Join Path Not Found\nDESCRIPTION: Error occurs when a query includes members from cubes that cannot be joined to generate a valid query to the upstream data source.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCan't find join path to join 'cube_a', 'cube_b'\n```\n\n----------------------------------------\n\nTITLE: Updated Orders Cube with New Measures in YAML\nDESCRIPTION: This snippet presents the complete updated orders cube including the new measures for completed count and completed percentage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/create-data-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: ECOM.ORDERS\n\n    joins:\n      - name: users\n        sql: \"{CUBE}.USER_ID = {users}.USER_ID\"\n        relationship: many_to_one\n\n    dimensions:\n      - name: status\n        sql: STATUS\n        type: string\n\n      - name: id\n        sql: ID\n        type: number\n        primary_key: true\n\n      - name: created_at\n        sql: CREATED_AT\n        type: time\n\n      - name: completed_at\n        sql: COMPLETED_AT\n        type: time\n\n    measures:\n      - name: count\n        type: count\n\n      - name: completed_count\n        type: count\n        filters:\n          - sql: \"{CUBE}.status = 'completed'\"\n\n      - name: completed_percentage\n        type: number\n        sql: \"(100.0 * {CUBE.completed_count} / NULLIF({CUBE.count}, 0))\"\n        format: percent\n```\n\n----------------------------------------\n\nTITLE: SQL User Switching in Cube.js SQL API\nDESCRIPTION: This function defines the logic for allowing SQL user switching in the Cube.js SQL API. It determines whether a current user can switch to a new user based on custom rules.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('can_switch_sql_user')\ndef can_switch_sql_user(current_user: str, new_user: str) -> dict:\n  if current_user == 'admin':\n    return True\n\n  if current_user == 'service':\n    return new_user != 'admin'\n\n  return False\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  canSwitchSqlUser: (current_user, new_user) => {\n    if (current_user === \"admin\") {\n      return true;\n    }\n\n    if (current_user === \"service\") {\n      return new_user !== \"admin\";\n    }\n\n    return false;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: The npm run build command creates an optimized production build in the build folder. It bundles and minifies the React application with file hashing for cache management.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/external-rollups/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Completed Count Measure in YAML\nDESCRIPTION: This snippet demonstrates how to add a new measure 'completed_count' to calculate only completed orders using a filter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/create-data-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: completed_count\n  type: count\n  filters:\n    - sql: \"{CUBE}.status = 'completed'\"\n```\n\n----------------------------------------\n\nTITLE: Running Cube.js Docker Container with Environment Variables\nDESCRIPTION: Demonstrates how to pull and run a Cube.js Docker container with necessary environment variables for database connection and API configuration. Exposes ports 3000 and 4000 for the API and Developer Playground respectively.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull cubejs/cube:latest\ndocker run -d -p 3000:3000 -p 4000:4000 \\\n  -e CUBEJS_DB_HOST=postgres://hostname \\\n  -e CUBEJS_DB_NAME=<DB_NAME> \\\n  -e CUBEJS_DB_USER=<USER> \\\n  -e CUBEJS_DB_PASS=<PASS> \\\n  -e CUBEJS_DB_TYPE=<DB_TYPE> \\\n  -e CUBEJS_API_SECRET=<API_SECRET> \\\n  -v $(pwd):/cube/conf \\\n  cubejs/cube:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Column Primary Key Status in cube_dbt\nDESCRIPTION: Demonstrates how to check if a column is a primary key using the primary_key property. This property returns a boolean value based on whether the column has the primary_key tag in the DBT project metadata.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.primary_key)\n# For example, 'False'\n```\n\n----------------------------------------\n\nTITLE: Removing excessive limit on inner wrapped queries in cubesql\nDESCRIPTION: This code snippet fixes a bug in cubesql where an excessive limit was placed on inner wrapped queries. Removing this limit allows for more complex queries to be executed without encountering limitations. The change directly addresses issue #7864.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n### Bug Fixes\n\n- **cubesql:** Remove excessive limit on inner wrapped queries ([#7864](https://github.com/cube-js/cube.js/issues/7864)) ([b97268f](https://github.com/cube-js/cube.js/commit/b97268fe5caf55c5b7806c597b9f7b75410f6ba4))\n```\n\n----------------------------------------\n\nTITLE: Composing Supergraph with Rover CLI\nDESCRIPTION: This command uses the Rover CLI to compose a Supergraph based on the configuration file and output the result to a GraphQL file. This creates the Supergraph schema that can be used with Apollo Gateway.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/apollo-federation-with-cube/apollo-server-app/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrover supergraph compose --config ./graphql/supergraph.yaml > ./graphql/supergraph.graphql\n```\n\n----------------------------------------\n\nTITLE: Chart Specification Format for AI Query Response\nDESCRIPTION: JSON schema showing the format for chart specifications returned when the chart option is enabled in the query options.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"bar\" | \"line\" | \"pie\" | \"table\" | \"area\" | \"scatter\",\n    \"x\": string,\n    \"y\": string[],\n    \"pivot\": string // optional; the field to pivot by, if any\n}\n```\n\n----------------------------------------\n\nTITLE: Using CubeProvider in React Application\nDESCRIPTION: This snippet demonstrates how to use the CubeProvider component to wrap a React application, providing the Cube API context to child components.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-react-app.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CubeProvider } from \"@cubejs-client/react\";\n\n<CubeProvider cubeApi={cubeApi}>// your application</CubeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in globals.py for Jinja Templates\nDESCRIPTION: Shows how to access environment variables in a globals.py file and expose them to Jinja templates via TemplateContext, making them available in YAML data model files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\nimport os\n\ntemplate = TemplateContext()\n\nvalue_or_none = os.getenv('MY_ENV_VAR')\ntemplate.add_variable('value_or_none', value_or_none)\n\nvalue_or_default = os.getenv('MY_OTHER_ENV_VAR', 'my_default_value')\ntemplate.add_variable('value_or_default', value_or_default)\n```\n\n----------------------------------------\n\nTITLE: Adding Filters to Measures in Cube.js (JavaScript)\nDESCRIPTION: Illustrates how to add conditional filters to measure calculations in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    orders_completed_count: {\n      sql: `id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.status = 'completed'` }],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Reducing Vulnerabilities in package.json (JavaScript)\nDESCRIPTION: This change updates the package.json file for the cubejs-databricks-jdbc-driver package to address and reduce potential security vulnerabilities. This may involve updating dependencies or other configurations to improve the package's security posture.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\"Bug Fixes\\n\\n- packages/cubejs-databricks-jdbc-driver/package.json to reduce vulnerabilities ([#5429](https://github.com/cube-js/cube.js/issues/5429)) ([a45c9a8](https://github.com/cube-js/cube.js/commit/a45c9a828b38d13da9a4194fdfc23e11674aa7cd))\"\n```\n\n----------------------------------------\n\nTITLE: Vue Chart Renderer Implementation\nDESCRIPTION: Addition of Vue-specific chart rendering components for visualization of Cube.js query results.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nbc2cbab22fee860cfc846d1207f6a83899198dd8\n```\n\n----------------------------------------\n\nTITLE: Filtering After Date with afterDate in Cube.js Query\nDESCRIPTION: Demonstrates the use of the 'afterDate' operator to get all results after a specific date. The format is similar to 'beforeDate'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.time\",\n  \"operator\": \"afterDate\",\n  \"values\": [\"2015-01-01\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using CubeProvider in React\nDESCRIPTION: Demonstrates how to wrap a React application with the CubeProvider component from @cubejs-client/react, passing the initialized cubeApi as a prop.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-react-app.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CubeProvider } from \"@cubejs-client/react\";\n\n<CubeProvider cubeApi={cubeApi}>// your application</CubeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN for Query Analysis in Cube Store\nDESCRIPTION: Example of using EXPLAIN to view the logical query plan for analyzing pre-aggregation data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT orders__platform, orders__gender, sum(orders__count) FROM dev_pre_aggregations.orders_general_o32v4dvq_vbyemtl2_1h5hs8r\nGROUP BY orders__gender, orders__platform;\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtered Aggregates in Cube.js with Multiple Related Cubes\nDESCRIPTION: This code defines a data model with three related cubes (retailer, store, sales) to calculate filtered sales aggregations. It demonstrates how to pass measures upstream via join paths while passing dimensions downstream to filter aggregations based on parent cube attributes (like goal_start date).\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/filtered-aggregates.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\ncubes:\n  - name: retailer\n    sql: >\n      SELECT 101 AS id, 'Retailer 1' AS name, 10 AS sales_goal, '2025-02-01Z'::TIMESTAMP AS goal_start UNION ALL\n      SELECT 102 AS id, 'Retailer 2' AS name, 10 AS sales_goal, '2025-02-01Z'::TIMESTAMP AS goal_start UNION ALL\n      SELECT 103 AS id, 'Retailer 3' AS name, 10 AS sales_goal, '2025-02-01Z'::TIMESTAMP AS goal_start\n\n    joins:\n      - name: store\n        sql: '{CUBE.id} = {store.retailer_id}'\n        relationship: one_to_many\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n      \n      - name: name\n        sql: \"{CUBE}.name\"\n        type: string\n      \n      - name: goal_start\n        sql: \"{CUBE}.goal_start\"\n        type: time\n\n      - name: sales\n        sql: \"{store.total_sales}\"\n        type: number\n        sub_query: true\n\n      - name: sales_for_goal\n        sql: \"{store.total_sales_for_goal}\"\n        type: number\n        sub_query: true\n    \n    measures:\n      - name: sales_goal\n        sql: \"{CUBE}.sales_goal\"\n        type: sum\n\n      - name: sales_goal_achieved\n        type: number\n        sql: \"({CUBE.sales_for_goal} / NULLIF({CUBE.sales_goal}, 0))\"\n\n  - name: store\n    sql: >\n      SELECT 201 AS id, 'Store 1' AS name, 101 AS retailer_id UNION ALL\n      SELECT 202 AS id, 'Store 2' AS name, 101 AS retailer_id UNION ALL\n      SELECT 203 AS id, 'Store 3' AS name, 101 AS retailer_id UNION ALL\n      SELECT 204 AS id, 'Store 4' AS name, 102 AS retailer_id UNION ALL\n      SELECT 205 AS id, 'Store 5' AS name, 102 AS retailer_id UNION ALL\n      SELECT 206 AS id, 'Store 6' AS name, 102 AS retailer_id UNION ALL\n      SELECT 207 AS id, 'Store 7' AS name, 103 AS retailer_id UNION ALL\n      SELECT 208 AS id, 'Store 8' AS name, 103 AS retailer_id UNION ALL\n      SELECT 209 AS id, 'Store 9' AS name, 103 AS retailer_id\n\n    joins:\n      - name: sales\n        sql: '{CUBE.id} = {sales.store_id}'\n        relationship: one_to_many\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true\n      \n      - name: name\n        sql: \"{CUBE}.name\"\n        type: string\n      \n      - name: retailer_id\n        sql: \"{CUBE}.retailer_id\"\n        type: number\n\n      - name: goal_start\n        sql: \"{retailer.goal_start}\"\n        type: time\n\n      - name: sales\n        sql: \"{sales.total_sales}\"\n        type: number\n        sub_query: true\n\n      - name: sales_for_goal\n        sql: \"{sales.total_sales_for_goal}\"\n        type: number\n        sub_query: true\n\n    measures:\n      - name: total_sales\n        sql: \"{CUBE.sales}\"\n        type: sum\n\n      - name: total_sales_for_goal\n        sql: \"{CUBE.sales_for_goal}\"\n        type: sum\n\n  - name: sales\n    sql: >\n      SELECT 301 AS id, 201 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 302 AS id, 202 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 303 AS id, 203 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 304 AS id, 204 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 305 AS id, 205 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 306 AS id, 206 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 307 AS id, 207 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 5 AS sales UNION ALL\n      SELECT 308 AS id, 208 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 5 AS sales UNION ALL\n      SELECT 309 AS id, 209 AS store_id, '2025-01-01Z'::TIMESTAMP AS order_date, 5 AS sales UNION ALL\n      SELECT 310 AS id, 201 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 311 AS id, 202 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 312 AS id, 203 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 1 AS sales UNION ALL\n      SELECT 313 AS id, 204 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 314 AS id, 205 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 315 AS id, 206 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 3 AS sales UNION ALL\n      SELECT 316 AS id, 207 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 5 AS sales UNION ALL\n      SELECT 317 AS id, 208 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 5 AS sales UNION ALL\n      SELECT 318 AS id, 209 AS store_id, '2025-02-01Z'::TIMESTAMP AS order_date, 5 AS sales\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.id\"\n        type: number\n        primary_key: true \n\n      - name: store_id\n        sql: \"{CUBE}.store_id\"\n        type: number\n      \n      - name: order_date\n        sql: \"{CUBE}.order_date\"\n        type: time\n\n      - name: goal_start\n        sql: \"{store.goal_start}\"\n        type: time\n      \n      - name: sales\n        sql: \"{CUBE}.sales\"\n        type: number\n      \n    measures:\n      - name: total_sales\n        sql: \"{CUBE.sales}\"\n        type: sum\n\n      - name: total_sales_for_goal\n        sql: \"{CUBE.sales}\"\n        type: sum\n        filters:\n          - sql: \"{CUBE.order_date} >= {CUBE.goal_start}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Dbt Model as Cube in Python\nDESCRIPTION: Shows how to render a dbt model as a YAML snippet for use in Cube data models using the Model.as_cube method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.as_cube())\n```\n\n----------------------------------------\n\nTITLE: Migrated Docker-Based cube.js Configuration File\nDESCRIPTION: Shows the simplified cube.js configuration file that exports settings directly rather than initializing a server, designed for Docker deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/upgrading-cube/migrating-from-express-to-docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  logger: (msg, params) => {\n    console.log(`${msg}: ${JSON.stringify(params)}`);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Dimension Labels in YAML\nDESCRIPTION: Demonstrates how to set dimension labels in the cube's model file using the label_member meta property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/mdx-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    sql_table: USERS\n    public: false\n\n    dimensions:\n      - name: id\n        sql: \"{CUBE}.ID\"\n        type: number\n        meta:\n          label_member: users_first_name\n```\n\n----------------------------------------\n\nTITLE: Generating Data Models with Cube CLI\nDESCRIPTION: The 'generate' command helps build data models for existing database tables. It requires an active database connection and must be run from the Cube app directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli/reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli generate -t TABLE-NAMES\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli generate -t orders,customers\n```\n\n----------------------------------------\n\nTITLE: Creating Superset Admin Account\nDESCRIPTION: Executes a command inside the running Superset container to create an admin user with specified credentials. By default, it sets up an admin account with username and password both set to 'admin'.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it superset superset fab create-admin \\\n  --firstname Superset \\\n  --lastname Admin \\\n  --email admin@superset.com \\\n  --username admin \\\n  --password admin\n```\n\n----------------------------------------\n\nTITLE: Running Cube with Docker connecting to Cube Store\nDESCRIPTION: This command runs Cube as a Docker container, connecting to a Cube Store instance on localhost and exposing port 4000.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4000:4000 \\\n  -e CUBEJS_CUBESTORE_HOST=localhost \\\n  -v ${PWD}:/cube/conf \\\n  cubejs/cube\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Size in Cube.js\nDESCRIPTION: This snippet demonstrates how to set the maximum number of concurrent connections to the database using an environment variable. The new value must be greater than the number of concurrent connections used by Cube's query queues and the refresh worker.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/concurrency.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCUBEJS_DB_MAX_POOL=15\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Logs Export in Vector TOML\nDESCRIPTION: Example configuration for exporting logs to Datadog using environment variables for secure API key storage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.datadog]\ntype = \"datadog_logs\"\ndefault_api_key = \"$CUBE_CLOUD_MONITORING_DATADOG_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Driver to TypeScript\nDESCRIPTION: This change migrates the BigQuery driver to TypeScript. It's included in version 0.27.22 of the driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **bigquery-driver:** Migrate to TypeScript ([7c5b254](https://github.com/cube-js/cube.js/commit/7c5b25459cd3265587ddd8ed6dd23c944094254c))\n```\n\n----------------------------------------\n\nTITLE: Handling SIGINT in Docker Container for Cube.js Server\nDESCRIPTION: Implementation for handling Ctrl + C (SIGINT) signal in Docker containers for graceful shutdown of the Cube.js server.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nHandle Ctrl + C (SIGINT) in Docker\n```\n\n----------------------------------------\n\nTITLE: Querying Views in Cube.js\nDESCRIPTION: SQL query example showing how to retrieve order counts by city using the previously defined view.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/joins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count, city FROM orders_users;\n```\n\n----------------------------------------\n\nTITLE: Context Symbols Transpilation in Cube Data Model (JavaScript)\nDESCRIPTION: This snippet illustrates how Cube transpiles certain properties inside cube definitions to optimize boilerplate code around referencing cubes and cube members.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic/schema-execution-environment.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  measures: {\n    count: {\n      type: `count`\n    },\n\n    ratio: {\n      sql: `SUM(${CUBE}.amount) / ${count}`,\n      type: `number`\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  measures: {\n    count: {\n      type: `count`\n    },\n\n    ratio: {\n      sql: (CUBE, count) => `SUM(${CUBE}.amount) / ${count}`,\n      type: `number`\n    }\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst measureRatioDefinition = {\n  sql: (CUBE, count) => `sum(${CUBE}.amount) / ${count}`,\n  type: `number`\n};\n\ncube(`users`, {\n  // ...\n\n  measures: {\n    count: {\n      type: `count`\n    },\n\n    ratio: measureRatioDefinition\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Processing Twitter Data with ksqlDB\nDESCRIPTION: SQL statements for ksqlDB that create streams and tables to process Twitter data. The queries define a raw tweet stream, create a statistics table with aggregated metrics, and create streams for hashtags, mentions, and word analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/twitter-stream/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE STREAM TWEETS_4 (\n  ID STRING KEY,\n  LANG STRING,\n  PUBLIC_METRICS MAP<STRING, INT>,\n  REPLY_SETTINGS STRING,\n  SOURCE STRING,\n  TEXT STRING,\n  AUTHOR MAP<STRING, STRING>,\n  ENTITIES MAP<STRING, ARRAY<MAP<STRING, STRING>>>,\n  CREATED_AT STRING\n) WITH (\n  KAFKA_TOPIC='test_4',\n  KEY_FORMAT='json',\n  VALUE_FORMAT='json'\n);\n\nCREATE OR REPLACE TABLE STATS_4\nAS SELECT\n  ID,\n  UNIX_TIMESTAMP(PARSE_TIMESTAMP(LATEST_BY_OFFSET(CREATED_AT), 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z''')) AS CREATED_AT,\n  COALESCE(LATEST_BY_OFFSET(LANG), 'UNDEFINED') AS LANGUAGE,\n  COALESCE(LATEST_BY_OFFSET(PUBLIC_METRICS)['retweet_count'], 0) AS RETWEET_COUNT,\n  COALESCE(LATEST_BY_OFFSET(PUBLIC_METRICS)['reply_count'], 0) AS REPLY_COUNT,\n  COALESCE(LATEST_BY_OFFSET(PUBLIC_METRICS)['like_count'], 0) AS LIKE_COUNT,\n  COALESCE(LATEST_BY_OFFSET(PUBLIC_METRICS)['quote_count'], 0) AS QUOTE_COUNT,\n  COALESCE(LATEST_BY_OFFSET(REPLY_SETTINGS), 'UNDEFINED') AS REPLY_SETTINGS,\n  COALESCE(LATEST_BY_OFFSET(SOURCE), 'UNDEFINED') AS SOURCE,\n  LATEST_BY_OFFSET(TEXT) AS TEXT,\n  LEN(LATEST_BY_OFFSET(TEXT)) AS TEXT_LENGTH,\n  COALESCE(LATEST_BY_OFFSET(AUTHOR)['username'], 'UNDEFINED') AS AUTHOR_USERNAME,\n  COALESCE(LATEST_BY_OFFSET(AUTHOR)['name'], 'UNDEFINED') AS AUTHOR_NAME,\n  COALESCE(LATEST_BY_OFFSET(AUTHOR)['description'], 'UNDEFINED') AS AUTHOR_DESCRIPTION,\n  COALESCE(LATEST_BY_OFFSET(AUTHOR)['location'], 'UNDEFINED') AS AUTHOR_LOCATION,\n  COALESCE(LATEST_BY_OFFSET(AUTHOR)['verified'], 'UNDEFINED') AS AUTHOR_VERIFIED,\n  COALESCE(ARRAY_LENGTH(LATEST_BY_OFFSET(ENTITIES)['mentions']), 0) AS MENTION_COUNT,\n  COALESCE(ARRAY_LENGTH(LATEST_BY_OFFSET(ENTITIES)['hashtags']), 0) AS HASHTAG_COUNT,\n  COALESCE(ARRAY_LENGTH(LATEST_BY_OFFSET(ENTITIES)['urls']), 0) AS URL_COUNT\nFROM TWEETS_4\nGROUP BY ID;\n\nCREATE OR REPLACE STREAM HASHTAGS\nAS SELECT\n  ID,\n  CONCAT(ID, '_', EXPLODE(ENTITIES['hashtags'])['start']) AS TAG_ID,\n  EXPLODE(ENTITIES['hashtags'])['tag'] AS TAG\nFROM TWEETS_4;\n\nCREATE OR REPLACE STREAM MENTIONS\nAS SELECT\n  ID,\n  CONCAT(ID, '_', EXPLODE(ENTITIES['mentions'])['id']) AS MENTION_ID,\n  EXPLODE(ENTITIES['mentions'])['id'] AS USER_ID,\n  EXPLODE(ENTITIES['mentions'])['username'] AS USERNAME\nFROM TWEETS_4;\n\nCREATE OR REPLACE STREAM WORDS\nAS SELECT\n  ID,\n  CONCAT(ID, '_', EXPLODE(SPLIT(LCASE(REGEXP_REPLACE(TEXT, '\\W', ' ')), ' '))) AS WORD_ID,\n  EXPLODE(SPLIT(LCASE(REGEXP_REPLACE(TEXT, '\\W', ' ')), ' ')) AS WORD,\n  LEN(EXPLODE(SPLIT(LCASE(REGEXP_REPLACE(TEXT, '\\W', ' ')), ' '))) AS WORD_LENGTH\nFROM TWEETS_4;\n\nSELECT * FROM stats;\n```\n\n----------------------------------------\n\nTITLE: Connection Management Enhancement for Snowflake Driver\nDESCRIPTION: Added keepConnectionAlive functionality and connection release handling to improve connection management in the Snowflake driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-backend/snowflake-driver:** Add keepConnectionAlive and release ([#1379](https://github.com/cube-js/cube.js/issues/1379)) ([f1acae5](https://github.com/cube-js/cube.js/commit/f1acae5e00e37ba1ab2c9fab0f5f94f8e7d20283))\n```\n\n----------------------------------------\n\nTITLE: Refreshing Worker Concurrency Configuration\nDESCRIPTION: Introduction of CUBEJS_REFRESH_WORKER_CONCURRENCY environment variable and updated default concurrency settings for drivers, improving resource management. Implemented in PR #9168.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **server-core:** Introduce CUBEJS_REFRESH_WORKER_CONCURRENCY env and update default concurrency settings for drivers ([#9168](https://github.com/cube-js/cube/issues/9168)) ([7ef6282](https://github.com/cube-js/cube/commit/7ef628273905d47996b108862a52dde89b9525e3))\n```\n\n----------------------------------------\n\nTITLE: Transforming API Response Data in Budibase\nDESCRIPTION: This JavaScript snippet is used in Budibase to transform the response data from a Cube API request. It extracts and returns only the 'data' property from the response object.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/budibase.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn data.data;\n```\n\n----------------------------------------\n\nTITLE: Extending Cube Docker Image with Dockerfile\nDESCRIPTION: Dockerfile configuration that extends the base Cube image and installs Python pip, Python requirements, and npm packages for supporting native extensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM cubejs/cube:latest\n\nCOPY . .\nRUN apt update && apt install -y pip\nRUN pip install -r requirements.txt\nRUN npm install\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Column SQL in Python\nDESCRIPTION: Shows how to access the SQL name of a dbt column using the Column.sql property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.sql)\n# For example, 'status'\n```\n\n----------------------------------------\n\nTITLE: Supporting BigQuery Location Change\nDESCRIPTION: This feature adds support for changing the BigQuery location using the CUBEJS_DB_BQ_LOCATION environment variable. It's part of version 0.26.25 of the BigQuery driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **bigquery-driver:** Support changing location, CUBEJS_DB_BQ_LOCATION env variable ([204c73c](https://github.com/cube-js/cube.js/commit/204c73c4290760234242b1d3eecdd498bf848e0f))\n```\n\n----------------------------------------\n\nTITLE: Running Dagster Jobs\nDESCRIPTION: Command to load and run the Dagster jobs using the development server\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/dagster.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndagster dev -f cube.py\n```\n\n----------------------------------------\n\nTITLE: JWT Token for Manager Role in Cube.js Authentication\nDESCRIPTION: A JSON Web Token payload for a manager role with issue and expiration timestamps. This token grants access to shipped and completed order data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/role-based-access.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1000000000,\n  \"exp\": 5000000000,\n  \"role\": \"manager\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Query for Default Sorting\nDESCRIPTION: This JSON query is equivalent to the SQL query for default sorting behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\n    \"sort_nulls.value\"\n  ],\n  \"order\": {\n    \"sort_nulls.value\": \"asc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in YAML Data Models\nDESCRIPTION: Shows how to use variables exported from globals.py in YAML data model files via Jinja templating, providing a way to access environment variables indirectly.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: my_cube\n    description: \"{{ value_or_none | safe }}\"\n    sql_table: \"{{ value_or_default | safe }}.table\"\n \n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Project Structure with Bash Commands\nDESCRIPTION: Commands to create a new project directory and Docker Compose configuration file\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/core/create-a-project.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-first-cube-project\ncd my-first-cube-project\ntouch docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: SQL Query Support - Power Operator\nDESCRIPTION: Implementation of power/exponentiation operator (^) in SQL queries\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT column ^ 2 FROM table\n```\n\n----------------------------------------\n\nTITLE: React Hooks for React 18 StrictMode Update\nDESCRIPTION: Updated hooks implementation for React 18 StrictMode compatibility\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: git\nCODE:\n```\nfd6352c61a614afef61b2a9d4332ecf300594b3b\n```\n\n----------------------------------------\n\nTITLE: Filtering dbt Models by Path\nDESCRIPTION: Python code showing how to filter dbt models by directory path.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\ndbt = Dbt.from_url(manifest_url).filter(paths=['marts/'])\n```\n\n----------------------------------------\n\nTITLE: Cube REST API Endpoint Structure in YAML\nDESCRIPTION: This snippet shows the structure of a Cube REST API endpoint in development mode. It includes the deployment ID, region, and dev branch name.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/query-from-react-app.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://<deployment-id>.<region>.cubecloudapp.dev/dev-mode/<dev-branch-name>/cubejs-api/v1\n```\n\n----------------------------------------\n\nTITLE: Defining 'orders' Cube in YAML\nDESCRIPTION: YAML configuration for the 'orders' cube with count measure and status and created_at dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: status\n        sql: status\n        type: string\n\n      - name: created_at\n        sql: created_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Running Cube Store Docker Container with BigQuery Credentials\nDESCRIPTION: Launches the Cube Store Docker container with BigQuery credentials loaded from the environment file. Uses docker-compose to set up the benchmark environment for Cube Store.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/cubestore-benchmark/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv $(cat ~/.env.bigquery | xargs) docker-compose -p cubejs-cubestore -f cubejs-cubestore/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Querying Cube.js with JavaScript SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Cube.js JavaScript SDK to query data. It shows two methods: one using default formatting and another using the 'castNumerics' option to automatically convert string numbers to JavaScript Number type.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-exploration/cast-numerics.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\n\nconst apiUrl = \"...\";\nconst apiToken = \"...\";\nconst cubeApi = cube(apiToken, { apiUrl });\n\nconst query = {\n  dimensions: [\"cube_with_big_numbers.number\"],\n  measures: [\"cube_with_big_numbers.sum\"]\n};\n\n// 1. Default format\ncubeApi.load(query).then((resultSet) => {\n  console.log(resultSet.tablePivot());\n});\n\n// 2. Format with castNumerics\ncubeApi.load(query, { castNumerics: true }).then((resultSet) => {\n  console.log(resultSet.tablePivot());\n});\n```\n\n----------------------------------------\n\nTITLE: Query Pushdown Example\nDESCRIPTION: Example of a query with pushdown that uses a subquery in the WHERE clause, which cannot be executed as a post-processing query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  users.state,\n  users.city\nFROM users\nWHERE\n  users.orders_made = (\n    SELECT MAX(orders_made)\n    FROM users\n  )\nGROUP BY 1, 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy Schema in Python\nDESCRIPTION: Code reference showing the configuration property pre_aggregations_schema that needs to be set in cube.py file for multitenancy setup to avoid key existence errors.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/faqs/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncube.py\n```\n\n----------------------------------------\n\nTITLE: Google Workspace LDAP Authentication Integration for Cube.js\nDESCRIPTION: A complete implementation of the checkSqlAuth function that authenticates users against Google Workspace's Secure LDAP service. It establishes a secure LDAP connection, searches for the user, and verifies their credentials before granting access.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/sql-api-ldap.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('ldapjs');\n\nconst createLdapClient = () => ldap.createClient({\n  url: [ 'ldaps://ldap.google.com:636' ],\n  tlsOptions: {\n    key: process.env.GOOGLE_LDAP_KEY,\n    cert: process.env.GOOGLE_LDAP_CERT,\n    ca: [ process.env.GOOGLE_TRUST_SERVICES_CERT ],\n    requestCert: true,\n    rejectUnauthorized: false\n  }\n});\n\nconst client = createLdapClient();\n\nclient.on('connectError', (err) => {\n  console.log(`Can't connect to LDAP: ${err.stack || err}`);\n});\n\nmodule.exports = {\n  checkSqlAuth: async (req, user_name, password) => {\n    const ldapSearchResult = await new Promise((resolve, reject) => {\n      const resultArray = [];\n\n      const userId = `${user_name}@example.com`;\n      console.log(`User id`, userId);\n\n      const opts = {\n        filter: `mail=${userId}`,\n        scope: 'sub',\n        attributes: [ 'dn', 'sn', 'cn', 'memberOf' ]\n      };\n\n      client.search('dc=example, dc=com', opts, (err, res) => {\n        if (err) {\n          console.log(err);\n        }\n\n        res.on('searchRequest', (searchRequest) => {\n          console.log('Search request: ', searchRequest.messageId);\n        });\n\n        res.on('searchEntry', (entry) => {\n          console.log('Search entry: ' + JSON.stringify(entry.object));\n          resultArray.push(entry.object);\n        });\n\n        res.on('searchReference', (referral) => {\n          console.log('Referral: ' + referral.uris.join());\n        });\n\n        res.on('error', (err) => {\n          console.error('Error: ' + err.message);\n          reject(err);\n        });\n\n        res.on('end', (result) => {\n          console.log('Status: ' + result.status);\n          resolve(resultArray);\n        });\n      });\n    });\n\n    if (ldapSearchResult[0]) {\n      console.log(ldapSearchResult[0]);\n\n      const canBind = await new Promise((resolve, reject) => {\n        console.log(`Authenticating ${userId}`);\n\n        createLdapClient().bind(userId, password, (err) => {\n          if (err) {\n            console.log(`Error binding LDAP: ${err}`);\n            resolve(false);\n          }\n          else {\n            console.log(`Authentication for ${userId} has been successful`)\n            resolve(true);\n          }\n        });\n      });\n\n      if (canBind) {\n        return {\n          password,\n          securityContext: {\n            attributes: ldapSearchResult[0]\n          }\n        }\n      }\n    }\n\n    throw new Error('Incorrect user name or password');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store Workers in Kubernetes\nDESCRIPTION: YAML configuration for Cube Store Workers showing how to set up pod naming and worker connections. This configuration uses environment variables to dynamically resolve worker pod names and establish connections between them.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  containers:\n    - env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n          # The $(POD_NAME) is a way of referencing dependent env vars\n          # It will resolve to \"cubestore-workers-n\" where n is the replica number\n        - name: CUBESTORE_SERVER_NAME\n          value: \"$(POD_NAME).cubestore-workers:10000\"\n          # With 3 replicas the POD_NAMEs will be cubestore-workers-0,cubestore-workers-1, and cubestore-workers-2\n          # These will then be needed in the CUBESTORE_WORKERS env var as an array\n          # We use \"cubestore-workers-0.cubestore-workers:10000\" as it points to the headless service\n          # See also cubestore-router-statefulset.yaml\n        - name: CUBESTORE_WORKERS\n          value: cubestore-workers-0.cubestore-workers:10000,cubestore-workers-1.cubestore-workers:10000,cubestore-workers-2.cubestore-workers:10000\n        ...\n...\n```\n\n----------------------------------------\n\nTITLE: Feature: Bootstrap CrateDB driver\nDESCRIPTION: This feature bootstraps a new driver for CrateDB. This enables Cube.js to connect and query CrateDB databases, expanding its compatibility with various data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for Cube\nDESCRIPTION: Creates a .env file with database connection details for Cube to connect to a Postgres database. Includes credentials for a demo database and enables SQL API on port 3306.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat > .env << EOL\nCUBEJS_DB_TYPE=postgres\nCUBEJS_DB_HOST=demo-db-examples.cube.dev\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_USER=cube\nCUBEJS_DB_PASS=12345\nCUBEJS_API_SECRET=SECRET\nCUBEJS_SQL_PORT=3306\nCUBEJS_DEV_MODE=true\nCUBEJS_EXTERNAL_DEFAULT=true\nEOL\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Custom Cube Image\nDESCRIPTION: Docker Compose configuration that uses the custom Cube image, sets up environment variables, ports, and volume mounts for the entire configuration directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/core.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube_api:\n    image: <YOUR-USERNAME>/cube-custom-image\n    ports:\n      - 4000:4000\n    environment:\n      - CUBEJS_API_SECRET=secret\n      # Other environment variables\n    volumes:\n      - .:/cube/conf\n    depends_on:\n      - cubestore_router\n      - cube_refresh_worker\n      # Other container dependencies\n```\n\n----------------------------------------\n\nTITLE: Connecting to Cube Store via MySQL Protocol\nDESCRIPTION: Command to connect to Cube Store using MySQL CLI client. Requires Linux or Mac OS MySQL client installation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/using-pre-aggregations.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h <CUBESTORE_IP> --user=cubestore -pcubestore\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Command Syntax\nDESCRIPTION: Shows the syntax for the EXPLAIN command which displays query execution plans. Includes optional ANALYZE parameter for runtime statistics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN [ ANALYZE ] statement\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Bucket Settings in Cube.js\nDESCRIPTION: Example configuration for setting up database export bucket name with support for multiple data sources using environment variables.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET=exports-20210505\n\n# Decorated with a data source named `datasource1`\nCUBEJS_DS_DATASOURCE1_DB_EXPORT_BUCKET=exports-20210505\n```\n\n----------------------------------------\n\nTITLE: Defining Suppliers Cube Schema in Cube.js\nDESCRIPTION: Creates a suppliers cube with primary key and email dimensions, establishing the basic structure for supplier data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/column-based-access.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: suppliers\n    sql_table: suppliers\n\n    dimensions:\n      - name: id\n        sql: id\n        type: string\n        primary_key: true\n\n      - name: email\n        sql: email\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`suppliers`, {\n  sql_table: `suppliers`,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `string`,\n      primary_key: true,\n    },\n\n    email: {\n      sql: `email`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Support SHOW processlist\nDESCRIPTION: This feature adds support for the `SHOW processlist` command in CubeSQL. This command is commonly used in database systems like MySQL to view the current running processes or threads. This allows administrators to monitor and manage database activity.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Support SHOW processlist ([0194098](https://github.com/cube-js/cube.js/commit/0194098af10e77c84ef141dc372f3abc46b3b514))\"\n```\n\n----------------------------------------\n\nTITLE: Fixing MSSQL Driver Default Request Timeout\nDESCRIPTION: This commit fixes a bug in the MSSQL driver by setting the default request timeout to 10 minutes. This change ensures that long-running queries do not timeout prematurely, improving the reliability of the MSSQL driver when used with Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Creating and Managing Subscriptions in Vanilla JavaScript\nDESCRIPTION: This snippet shows how to create a subscription to real-time data updates and later unsubscribe from it using vanilla JavaScript.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/real-time-data-fetch.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport cube from \"@cubejs-client/core\";\nimport WebSocketTransport from \"@cubejs-client/ws-transport\";\n\nconst cubeApi = cube({\n  transport: new WebSocketTransport({\n    authorization: CUBE_TOKEN,\n    apiUrl: \"ws://localhost:4000/\",\n  }),\n});\n\n// Create a subscription\nconst subscription = cubeApi.subscribe(\n  {\n    measures: [\"logs.count\"],\n    timeDimensions: [\n      {\n        dimension: \"logs.time\",\n        granularity: \"hour\",\n        dateRange: \"last 1440 minutes\",\n      },\n    ],\n  },\n  options,\n  (error, resultSet) => {\n    if (!error) {\n      // handle the update\n    }\n  }\n);\n\n// Later on, unsubscribe from subscription\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata\nDESCRIPTION: Example showing how to add custom metadata to a cube definition that can be passed to the frontend.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/cube.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n  title: `Product Orders`,\n  meta: {\n    any: `value`\n  }\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n    title: Product Orders\n    meta:\n      any: value\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store Router in Kubernetes\nDESCRIPTION: YAML configuration snippet for the Cube Store Router that defines worker connections. The CUBESTORE_WORKERS environment variable specifies the addresses of worker pods using their DNS names within the Kubernetes cluster.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  containers:\n    - env:\n        ...\n        - name: CUBESTORE_WORKERS\n          value: cubestore-workers-0.cubestore-workers:10000,cubestore-workers-1.cubestore-workers:10000,cubestore-workers-2.cubestore-workers:10000\n          ...\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring JWK in Cube.js\nDESCRIPTION: Example of configuring JSON Web Key as a string in Cube.js configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jwt: {\n    key: \"<JWK_AS_STRING>\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Feature: Snowflake Security Upgrade\nDESCRIPTION: This snippet indicates a security upgrade for the snowflake-sdk dependency from version 1.6.14 to 1.6.18. The upgrade improves the security posture of the Cube.js application when interacting with Snowflake databases.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Initializing Superset Database\nDESCRIPTION: Upgrades the Superset database schema inside the container. This is required during the setup process.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it superset superset db upgrade\n```\n\n----------------------------------------\n\nTITLE: Sample Data Before and After Update in Cube.js\nDESCRIPTION: These JSON snippets show the sample order data before and after an update, demonstrating how only specific orders had their status changed, which would trigger a selective partition refresh.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/refreshing-select-partitions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// orders before update:\n[\n  {\n    \"orders.number\": \"1\",\n    \"orders.status\": \"processing\",\n    \"orders.created_at\": \"2021-08-10T14:26:40.000\",\n    \"orders.updated_at\": \"2021-08-10T14:26:40.000\"\n  },\n  {\n    \"orders.number\": \"2\",\n    \"orders.status\": \"completed\",\n    \"orders.created_at\": \"2021-08-20T13:21:38.000\",\n    \"orders.updated_at\": \"2021-08-20T13:21:38.000\"\n  },\n  {\n    \"orders.number\": \"3\",\n    \"orders.status\": \"shipped\",\n    \"orders.created_at\": \"2021-09-01T10:27:38.000\",\n    \"orders.updated_at\": \"2021-09-01T10:27:38.000\"\n  },\n  {\n    \"orders.number\": \"4\",\n    \"orders.status\": \"completed\",\n    \"orders.created_at\": \"2021-09-20T10:27:38.000\",\n    \"orders.updated_at\": \"2021-09-20T10:27:38.000\"\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n// orders after update:\n[\n  {\n    \"orders.number\": \"1\",\n    \"orders.status\": \"shipped\",\n    \"orders.created_at\": \"2021-08-10T14:26:40.000\",\n    \"orders.updated_at\": \"2021-09-30T06:45:28.000\"\n  },\n  {\n    \"orders.number\": \"2\",\n    \"orders.status\": \"completed\",\n    \"orders.created_at\": \"2021-08-20T13:21:38.000\",\n    \"orders.updated_at\": \"2021-08-20T13:21:38.000\"\n  },\n  {\n    \"orders.number\": \"3\",\n    \"orders.status\": \"shipped\",\n    \"orders.created_at\": \"2021-09-01T10:27:38.000\",\n    \"orders.updated_at\": \"2021-09-01T10:27:38.000\"\n  },\n  {\n    \"orders.number\": \"4\",\n    \"orders.status\": \"completed\",\n    \"orders.created_at\": \"2021-09-20T10:27:38.000\",\n    \"orders.updated_at\": \"2021-09-20T10:27:38.000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics Export\nDESCRIPTION: Configuration for exporting metrics to Prometheus using remote write protocol with specific metric filters and inputs.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring.mdx#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.prometheus]\ntype = \"prometheus_remote_write\"\ninputs = [\n  \"metrics\"\n]\nendpoint = \"https://prometheus.example.com:8087/api/v1/write\"\n\n[sinks.prometheus.auth]\n\n[sinks.prometheus.metrics]\nlist = [\n  \"cpu\",\n  \"memory\",\n  \"requests-count\",\n  \"requests-errors-count\",\n  \"requests-success-count\",\n  \"requests-duration\"\n]\ninputs = [\n  \"cubejs-server\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metabase Semantic Layer Sync in JavaScript\nDESCRIPTION: JavaScript configuration for setting up Semantic Layer Sync with Metabase. Exports a configuration object with authentication credentials and connection details.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync/metabase.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"metabase\",\n        name: \"Metabase Sync\",\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"example.metabaseapp.com\",\n          database: \"Cube Cloud: production-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Security Context JSON Example\nDESCRIPTION: Example showing how to provide a custom security context as a JSON string in SQL Runner\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/sql-runner.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"securityContext\": {\n    \"tenant\": \"example_tenant\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vue Production Bundle\nDESCRIPTION: Command to compile and minify the application for production deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Data Sources\nDESCRIPTION: This code snippet denotes the implementation of multiple data source support in Cube.js. This feature enhancement enables Cube.js to connect and query data from various sources simultaneously.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"### Features\\n\\n- multiple data source ([#5326](https://github.com/cube-js/cube.js/issues/5326)) ([334af8c](https://github.com/cube-js/cube.js/commit/334af8c56cd02ae551844e9d1e9ab5e107fb1555))\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Column Description in Python\nDESCRIPTION: Demonstrates accessing the description of a dbt column using the Column.description property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.description)\n# For example, 'Order execution status: new, in progress, delivered'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multitenancy Sync in Python\nDESCRIPTION: Example of configuring multitenancy support for Semantic Layer Sync in Python. It demonstrates how to set up different syncs for each department using Metabase.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  department = ctx['securityContext']['department']\n\n  return [\n    {\n      'type': 'metabase',\n      'name': f\"Metabase Sync for {department}\",\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'example.metabaseapp.com',\n        'database': f\"Cube Cloud: {department}\",\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Equivalent REST API Query for Orders\nDESCRIPTION: JSON representation of the equivalent query for the REST API endpoint.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"orders.count\"],\n  \"dimensions\": [\"orders.status\"],\n  \"timeDimensions\": [\n    {\n      \"dimension\": \"orders.created_at\",\n      \"granularity\": \"day\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Snowflake Statement Timeout Error\nDESCRIPTION: This commit addresses an issue related to the STATEMENT_TIMEOUT_IN_SECONDS parameter in the Snowflake driver that was causing SQL compilation errors. It resolves an invalid value being passed for the timeout setting.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Query for Status Snapshots at a Specific Date\nDESCRIPTION: JSON query to count orders that have the 'shipped' status on April 1, 2019. It demonstrates filtering by both date and status.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/snapshots.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"status_snapshots.count\"],\n  \"filters\": [\n    {\n      \"member\": \"status_snapshots.date\",\n      \"operator\": \"equals\",\n      \"values\": [\"2019-04-01\"]\n    },\n    {\n      \"member\": \"status_snapshots.status\",\n      \"operator\": \"equals\",\n      \"values\": [\"shipped\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simplified Entity-First View in Cube\nDESCRIPTION: A YAML example of creating a simplified view for orders without user information, containing only order-specific dimensions and measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_view\n\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - created_at\n\n          - completed_count\n          - count\n          - total_amount\n          - average_order_value\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Column Metadata in Python\nDESCRIPTION: Shows how to access the metadata of a dbt column using the Column.meta property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.meta)\n# For example, '{some: \"data\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Vertica Driver - YAML\nDESCRIPTION: This snippet outlines the required environment variables to configure the Cube.js Vertica database driver. It includes the database type, host, name, port, user, password, and development mode settings. All entries are necessary for establishing a connection with a Vertica database instance.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-vertica-driver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    environment:\n      - CUBEJS_DB_TYPE=vertica\n      - CUBEJS_DB_HOST= #host\n      - CUBEJS_DB_NAME= #database name\n      - CUBEJS_DB_PORT=5433\n      - CUBEJS_DB_USER= #database user\n      - CUBEJS_DB_PASS= #database password\n      - CUBEJS_DEV_MODE=true #if running locally\n\n```\n\n----------------------------------------\n\nTITLE: Support DATE with compound identifier\nDESCRIPTION: This feature introduces support for the `DATE` data type when used with a compound identifier in CubeSQL. Compound identifiers involve multiple parts separated by dots. This enhances the ability to handle date-related data in more complex scenarios.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Support DATE with compound identifier ([fa959d8](https://github.com/cube-js/cube.js/commit/fa959d89406ab84d6764e0cc035b819b2f7dae21))\"\n```\n\n----------------------------------------\n\nTITLE: Select JDBC Driver via Cube.js CLI\nDESCRIPTION: This feature enhances the Cube.js CLI with the ability to select a specific JDBC driver during project creation.  This provides a more streamlined and configurable setup process for users working with different JDBC data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Running Node.js App with Cube Cloud and Load Test\nDESCRIPTION: Commands to start a Node.js application that connects to BigQuery through Cube Cloud and run corresponding load tests with K6.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/bigquery/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode cube-api.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nk6 run k6-cube-local.js\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims to JWT Token in Auth0 Rule\nDESCRIPTION: This JavaScript function adds custom claims to the JWT token in Auth0. It sets a namespace and includes company_id, user_id, and roles in the token.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/auth/auth0-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (user, context, callback) {\n  const namespace = \"http://localhost:4000/\";\n  context.accessToken[namespace] =\n    {\n      'company_id': 'company1',\n      'user_id': user.user_id,\n      'roles': ['user'],\n    };\n  callback(null, user, context);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Cube\nDESCRIPTION: Example of executing a SQL query through the established connection to retrieve and analyze data using pandas DataFrame.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/jupyter.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# ...\n\nquery = \"SELECT SUM(count), status FROM orders GROUP BY status;\"\ndf = pandas.read_sql_query(query, connection)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supergraph with YAML\nDESCRIPTION: This YAML configuration file defines the Supergraph structure, including the routing URLs and schema files for the Apollo Server and Cube subgraphs. It's used with the Rover CLI to compose the Supergraph.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/apollo-federation-with-cube/apollo-server-app/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfederation_version: 2\nsubgraphs:\n  apolloserver:\n    routing_url: http://35.192.83.151/graphql\n    schema:\n      file: ./apollo.graphql\n  cube:\n    routing_url: https://coloured-iguana.aws-eu-central-1.cubecloudapp.dev/cubejs-api/graphql\n    schema:\n      file: ./cube.graphql\n```\n\n----------------------------------------\n\nTITLE: Starting Cube.js Vue Development Server\nDESCRIPTION: Command to start the development server with hot-reload functionality\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run serve\n```\n\n----------------------------------------\n\nTITLE: Query Results Examples\nDESCRIPTION: Example query results showing different product data returned based on supplier email authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/column-based-access.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// purus.accumsan@Proin.org\n[\n  {\n    \"products.name\": \"Awesome Soft Salad\",\n  },\n  {\n    \"products.name\": \"Rustic Granite Gloves\",\n  },\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// gravida.sit.amet@risus.net\n[\n  {\n    \"products.name\": \"Incredible Granite Cheese\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrade DuckDB to 0.8 in Cube.js\nDESCRIPTION: This feature upgrades the DuckDB version used by the Cube.js driver to version 0.8.  This upgrade incorporates performance improvements and new features offered by DuckDB 0.8, enhancing the driver's capabilities and efficiency.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Enabling Compression for ClickHouse Driver\nDESCRIPTION: This feature enhancement allows users to enable compression for the ClickHouse driver, improving performance for large data transfers. Implemented by Graphmaxer in PR #9341.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **clickhouse-driver:** Allow to enable compression, thanks @Graphmaxer ([#9341](https://github.com/cube-js/cube/issues/9341)) ([78ac7b2](https://github.com/cube-js/cube/commit/78ac7b2d93896bae0903ba5f8e4f055165791962))\n```\n\n----------------------------------------\n\nTITLE: Docker Node.js Security Upgrade to v18.19.1\nDESCRIPTION: Security upgrade of Node.js from version 18.19.0 to 18.19.1 in the Docker package\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **docker:** Security upgrade node from 18.19.0 to 18.19.1 ([#7924](https://github.com/cube-js/cube/issues/7924)) ([f33d03e](https://github.com/cube-js/cube/commit/f33d03ed293d489d109b3da774c22d8543c8a081))\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry in JavaScript\nDESCRIPTION: This JavaScript snippet sets the telemetry option for a Cube.js configuration module, disabling it by setting the `telemetry` property to `false`. This option prevents the collection of any usage statistics when set.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  telemetry: false\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Cube.js Backend Server\nDESCRIPTION: Commands to initialize and start the Cube.js backend server using Yarn package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Presto Database Connection in Cube.js\nDESCRIPTION: Environment variables configuration for connecting Cube.js to a Presto database. Includes essential parameters like host, user credentials, catalog, and schema settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/presto.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=prestodb\nCUBEJS_DB_HOST=my.presto.host\nCUBEJS_DB_USER=presto_user\nCUBEJS_DB_PASS=**********\nCUBEJS_DB_PRESTO_CATALOG=my_presto_catalog\nCUBEJS_DB_SCHEMA=my_presto_schema\n```\n\n----------------------------------------\n\nTITLE: Fixing Databricks pre-aggregations schema with UC (JavaScript)\nDESCRIPTION: Addresses an issue where Databricks pre-aggregations schema were not properly handled when using Unity Catalog (UC). The fix ensures compatibility and correct schema handling in this environment.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"Bug Fixes\\n\\n- **databricks-jdbc:** Databricks pre-aggregations schema with UC ([#5726](https://github.com/cube-js/cube.js/issues/5726)) ([6281471](https://github.com/cube-js/cube.js/commit/6281471ad981372a938449114cd51e5cf1326884))\"\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Creates a production build of the React application in the build folder, with optimized and minified bundles that include content hashes for cache management.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-data-table/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: null/undefined Measure Values Handling\nDESCRIPTION: Change to convert all undefined/null measure values to 0. This represents a breaking change in behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-core/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Converting nullish values to 0\nconst measureValue = originalValue ?? 0;\n```\n\n----------------------------------------\n\nTITLE: Creating Products Table\nDESCRIPTION: Creates the products table structure with columns for id, name, product_category, and created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cube_demo.ecom.products\n( id INTEGER,\n  name VARCHAR,\n  product_category VARCHAR,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata for BI Tool Integration in Cube\nDESCRIPTION: A YAML example demonstrating how to enhance a view with metadata like description, type, and owner for better integration with metrics-based BI tools.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: order_count_by_order_date\n    description: For finance team to track orders on accrual/earned basis.\n    meta:\n      type: metric\n      owner: alice@acme.com\n\n    cubes:\n      - join_path: orders\n        includes:\n          # MEASURE\n          - order_count\n\n          # TIME\n          - created_at\n\n          # DIMENSIONS\n          - status\n          - city\n```\n\n----------------------------------------\n\nTITLE: Move Execution to Query Engine\nDESCRIPTION: This feature moves query execution to the Query Engine in CubeSQL. This change likely involves a shift in responsibility for executing queries from one component to another. This may lead to better performance, scalability, or maintainability.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Move execution to Query Engine ([2d84b6b](https://github.com/cube-js/cube.js/commit/2d84b6b98fc03d84f858bd152f2359232e9ea8ed))\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Version History\nDESCRIPTION: Markdown formatted changelog showing version updates and changes to the @cubejs-client/vue3 package, with links to conventional commits guidelines and version comparisons.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [1.3.3](https://github.com/cube-js/cube.js/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-client/vue3\n```\n\n----------------------------------------\n\nTITLE: Adding Quarter time dimension in Cube.js\nDESCRIPTION: This feature introduces 'Quarter' as a supported time dimension within the Cube.js framework. This allows users to aggregate and analyze data at a quarterly granularity. Further details can be found in commit 3f62b2c.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n3f62b2c\n```\n\n----------------------------------------\n\nTITLE: Time-Based Orders Query\nDESCRIPTION: JSON query to count orders by completion date.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/getting-started-pre-aggregations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\"orders.count\"],\n  \"timeDimensions\": [\"orders.completed_at\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using TemplateContext for Jinja Templates in Cube.js\nDESCRIPTION: Shows how to use the TemplateContext class to register variables, functions, and filters for use in Jinja templates when defining data models in YAML.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n\ntemplate = TemplateContext()\n\n# Accessible from Jinja as 'my_var'\ntemplate.add_variable('my_var', 123)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n\ntemplate = TemplateContext()\n\n# Accessible from Jinja as 'get_data()'\ndef get_data_1():\n  return 1\ntemplate.add_function('get_data', get_data_1)\n\n# Accessible from Jinja as 'get_more_data()'\n@template.function('get_more_data')\ndef get_data_2():\n  return 2\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import TemplateContext\n\ntemplate = TemplateContext()\n\n# Accessible from Jinja as 'data | wrap'\ndef wrap_1(data):\n  return f\"< {data} >\"\ntemplate.add_filter('wrap', wrap_1)\n\n# Accessible from Jinja as 'data | wrap_more'\n@template.filter('wrap_more')\ndef wrap_2(data):\n  return f\"<<< {data} >>>\"\n```\n\n----------------------------------------\n\nTITLE: Installing cube Python package from TestPyPI\nDESCRIPTION: Command to install version 0.0.1 of the cube Python package from the TestPyPI repository using pip. This specifies the alternative package index URL rather than the default PyPI repository.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/python/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -i https://test.pypi.org/simple/ cube==0.0.1\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Remove empty hidden cubes from meta\nDESCRIPTION: This code snippet addresses a bug where empty hidden cubes were not being properly removed from the metadata. The fix ensures that the meta information is cleaned by removing these unnecessary cubes, improving performance and accuracy.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: API Query with JWT Authentication\nDESCRIPTION: Example cURL command demonstrating how to query the Cube.js API with JWT authentication containing department claims.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/controlling-access-to-cubes-and-views.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXBhcnRtZW50IjoiZmluYW5jZSIsImV4cCI6MTY2NzMzNzI1MH0.njfL7GMDNlzKaJDZA0OQ_b2u2JhuSm-WjnS0yVfB8NA\" \\\n  http://localhost:4000/cubejs-api/v1/meta\n```\n\n----------------------------------------\n\nTITLE: Feature: Export Bucket CSV Escape Symbol Support\nDESCRIPTION: This snippet highlights the addition of escape symbol support for exporting bucket CSV files. This feature allows for proper handling of special characters within CSV files, preventing data corruption or misinterpretation during export.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Running the Cube.js Backend\nDESCRIPTION: Commands to install dependencies and start the Cube.js backend development server. This backend will connect to the PostgreSQL database and serve data to the frontend dashboard.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Feature: JDBC Driver SparkSQL and Hive support\nDESCRIPTION: This commit adds support for SparkSQL and Hive to the Cube.js JDBC driver. This enhancement allows Cube.js to connect to and query data from SparkSQL and Hive data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: None\nCODE:\n```\nAdded SparkSQL and Hive support to the JDBC driver. ([#127](https://github.com/statsbotco/cubejs-client/issues/127)) ([659c24c](https://github.com/statsbotco/cubejs-client/commit/659c24c))\n```\n\n----------------------------------------\n\nTITLE: Return Errors to the Client\nDESCRIPTION: This fix ensures errors are properly returned to the client when a field is missing in CubeSQL/Native. This allows the client to handle these errors appropriately and provide more informative feedback to the user. This improvement is critical for debugging and preventing unexpected behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql/native: Return errors to the client (missing field ) ([82b22e4](https://github.com/cube-js/cube.js/commit/82b22e48c6fc4d61f62bf43795d5b50ba8a3fd67))\"\n```\n\n----------------------------------------\n\nTITLE: Feature: Add driver test suite\nDESCRIPTION: This feature adds a driver test suite to Cube.js. This suite enables thorough testing of database drivers, ensuring that they function correctly and are compatible with the Cube.js framework.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Building Angular Frontend for Production\nDESCRIPTION: This command builds the Angular frontend application for production deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ng build --prod\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation\nDESCRIPTION: Examples of generating JWT tokens in Python and JavaScript for testing security context implementation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth/context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Install the PyJWT with pip install PyJWT\nimport jwt\nimport datetime\n\n# Secret key to sign the token\nCUBE_API_SECRET = 'secret'\n\n# Create the token\ntoken_payload = {\n  'user_id': 42\n}\n\n# Generate the JWT token\ntoken = jwt.encode(token_payload, CUBE_API_SECRET, algorithm='HS256')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\");\nconst CUBE_API_SECRET = \"secret\";\n\nconst cubeToken = jwt.sign({ user_id: 42 }, CUBE_API_SECRET, {\n  expiresIn: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variable in JavaScript\nDESCRIPTION: This JavaScript snippet exports an environment variable that controls pre-aggregation settings. It's used as an auxiliary file for the main data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/disabling-pre-aggregations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pre_aggregations_enabled: process.env.PRE_AGGREGATIONS_ENABLED !== 'false'\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Style Guide Example for Cube\nDESCRIPTION: Example of JavaScript formatting best practices for Cube data modeling, demonstrating proper indentation, object formatting, and string templating with backticks.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  sql_table: `public.users`,\n\n  dimensions: {\n    id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n\n    city: {\n      sql: `city`,\n      type: `string`,\n    },\n\n    lifetime_value: {\n      sql: `${line_items.total_amount}`,\n      type: `number`,\n      sub_query: true,\n    },\n  },\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n\n    total_orders_amount: {\n      sql: `${lifetime_value}`,\n      type: `sum`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using FILTER_PARAMS with String Argument in YAML\nDESCRIPTION: Shows how to use FILTER_PARAMS context variable with a string argument in YAML. This example filters orders based on a date range.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/context-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: order_facts\n    sql: >\n      SELECT *\n      FROM orders\n      WHERE {FILTER_PARAMS.order_facts.date.filter('date')}\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: date\n        sql: date\n        type: time\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Bucket Region Mismatch Error Message\nDESCRIPTION: Example error message that occurs when there is a mismatch between the configured region in Vector and the actual S3 bucket region.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/s3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe bucket you are attempting to access must be addressed using the specified\nendpoint. Please send all future requests to this endpoint.\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade Snowflake SDK\nDESCRIPTION: This snippet documents the upgrade of the Snowflake SDK for the snowflake-driver. This upgrade likely includes bug fixes, performance improvements, or new features from the Snowflake SDK.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Enabling SSL Configuration via Environment Variable\nDESCRIPTION: This commit resolves an issue where the SSL configuration was not properly applied.  The fix ensures that the `CUBEJS_DB_SSL` environment variable must be set to `true` to enable SSL connections, addressing the reported problem where SSL settings were not being correctly applied to the database connection.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mongobi-driver/CHANGELOG.md#2025-04-17_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring Cube.js Environment Variables\nDESCRIPTION: This snippet shows the content of the .env file used to configure Cube.js. It specifies the database name, type, and API secret.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_TYPE=postgres\nCUBEJS_API_SECRET=SECRET\n```\n\n----------------------------------------\n\nTITLE: Filtering dbt Models by Names\nDESCRIPTION: Python code showing how to filter dbt models by specific model names.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/dbt.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://cube-dbt-integration.s3.amazonaws.com/manifest.json'\ndbt = Dbt.from_url(manifest_url).filter(names=['orders', 'customers'])\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Starts the React application in development mode, enabling live reloading and displaying lint errors in the console.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/analytics-dashboard/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Cube.js Deployment\nDESCRIPTION: Defines a docker-compose.yml file that configures the Cube.js Docker container, mapping ports, environment variables from .env file, and mounting the local configuration directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/upgrading-cube/migrating-from-express-to-docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  cube:\n    image: cubejs/cube:latest\n    ports:\n      - 4000:4000\n    env_file: .env\n    volumes:\n      - .:/cube/conf\n```\n\n----------------------------------------\n\nTITLE: Managing Stream Connection Release - Javascript\nDESCRIPTION: This code snippet describes a change where the management of stream connection release is handled by the orchestrator instead of the driver. This adjustment aims to improve the overall stability and resource management of stream connections.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- Manage stream connection release by orchestrator instead of driver ([adf059e](https://github.com/cube-js/cube.js/commit/adf059ec52e31e3ebc055b60a1ac6236c57251f8))\n```\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Yarn\nDESCRIPTION: Starts the development server for the React application on localhost:3000 with hot-reload functionality and error reporting.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/auth0/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Converting BigQuery Key File to Base64\nDESCRIPTION: Command to convert a BigQuery JSON key file to base64 format for environment variable configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /path/to/key-file.json | base64\n```\n\n----------------------------------------\n\nTITLE: Loading Products Data\nDESCRIPTION: Copies data from S3 CSV file into the products table using Snowflake's COPY command.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCOPY INTO cube_demo.ecom.products (id, name, created_at, product_category)\nFROM 's3://cube-tutorial/products.csv'\nFILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = ',' SKIP_HEADER = 1);\n```\n\n----------------------------------------\n\nTITLE: SHOW Command Examples\nDESCRIPTION: Examples of using SHOW command to display specific parameter (timezone) and all runtime parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW timezone;\n SETTING\n---------\n GMT\n(1 row)\n\nSHOW ALL;\n            name             |    setting     | description\n-----------------------------+----------------+-------------\n max_index_keys              | 32             |\n max_allowed_packet          | 67108864       |\n timezone                    | GMT            |\n client_min_messages         | NOTICE         |\n standard_conforming_strings | on             |\n extra_float_digits          | 1              |\n transaction_isolation       | read committed |\n application_name            | NULL           |\n lc_collate                  | en_US.utf8     |\n(9 rows)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fix API instance throw on missing partitions\nDESCRIPTION: This code snippet fixes a bug in the query orchestrator where the API instance would throw an error when encountering missing partitions. This ensures the API handles missing partitions gracefully, improving the stability and reliability of query execution.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Building Cube.js Docker Image with JDK\nDESCRIPTION: Docker build command for creating a Cube.js image with Java Development Kit (JDK) support.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t cubejs/cube:latest-jdk -f latest-debian-jdk.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Suggest Export/Unload for Large Pre-aggregations - Javascript\nDESCRIPTION: This feature suggests exporting or unloading large pre-aggregations, detected through streaming. This helps optimize performance by offloading large data sets, especially when streaming data is involved.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- Suggest export/unload for large pre-aggregations (detect via streaming) ([b20cdbc](https://github.com/cube-js/cube.js/commit/b20cdbc0b9fa98785d3ea46443492037017da12f))\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Cube REST API URL in Observable\nDESCRIPTION: Defines the Cube REST API URL for use in Observable. This URL is used to send queries to Cube's REST API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/observable.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncubeRestApi = \"https://thirsty-raccoon.aws-eu-central-1.cubecloudapp.dev/cubejs-api/v1/load\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Column Type in Python\nDESCRIPTION: Demonstrates accessing the data type of a dbt column using the Column.type property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.type)\n# For example, 'string'\n```\n\n----------------------------------------\n\nTITLE: Email Claim Configuration Examples\nDESCRIPTION: Example claim URIs for configuring email address mapping between Microsoft Entra ID and Cube Cloud\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/sso/microsoft-entra-id.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\\nhttp://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n```\n\n----------------------------------------\n\nTITLE: Feature: BigQuery Driver CI, Read-Only, Streaming, and Unloading\nDESCRIPTION: This entry highlights the addition of CI, read-only capabilities, streaming, and unloading features to the BigQuery driver. These enhancements improve the driver's functionality and integration within the Cube.js ecosystem.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Sample Query Results for Static Attributes in Cube.js\nDESCRIPTION: This snippet shows sample results when querying the static attributes implementation. Each user has dimensions for the earliest creation date of orders in each status, with null values where no orders exist in that status.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/entity-attribute-value.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"users_statuses_joins.name\": \"Ally Blanda\",\n    \"users_statuses_joins.completed_created_at\": \"2019-03-05T00:00:00.000\",\n    \"users_statuses_joins.processing_created_at\": null,\n    \"users_statuses_joins.shipped_created_at\": \"2019-04-06T00:00:00.000\",\n  },\n  {\n    \"users_statuses_joins.name\": \"Cayla Mayert\",\n    \"users_statuses_joins.completed_created_at\": \"2019-06-14T00:00:00.000\",\n    \"users_statuses_joins.processing_created_at\": \"2021-05-20T00:00:00.000\",\n    \"users_statuses_joins.shipped_created_at\": null,\n  },\n  {\n    \"users_statuses_joins.name\": \"Concepcion Maggio\",\n    \"users_statuses_joins.completed_created_at\": null,\n    \"users_statuses_joins.processing_created_at\": \"2020-07-14T00:00:00.000\",\n    \"users_statuses_joins.shipped_created_at\": \"2019-07-19T00:00:00.000\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Java and Configuring JDBC Driver on macOS\nDESCRIPTION: Commands for installing OpenJDK on macOS using Homebrew, setting up system Java wrappers, and configuring JAVA_HOME environment variable. Includes verification steps for Java installation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install openjdk\nsudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk\n/usr/libexec/java_home -V\nexport JAVA_HOME=`/usr/libexec/java_home -v 22.0.1`\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube.js Environment Variables\nDESCRIPTION: This snippet shows the required environment variables for configuring Cube.js to connect to the PostgreSQL database. It specifies the database name, type, and a secret key for the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_TYPE=postgres\nCUBEJS_API_SECRET=SECRET\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Client Library Migration\nDESCRIPTION: This feature update switches the ClickHouse driver from using apla-clickhouse to @clickhouse/client library, potentially improving compatibility and performance. Implemented in PR #8928.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **clickhouse-driver:** Switch from apla-clickhouse to @clickhouse/client ([#8928](https://github.com/cube-js/cube/issues/8928)) ([e25e65f](https://github.com/cube-js/cube/commit/e25e65fd578bef099c351393ae32da751be351dc))\n```\n\n----------------------------------------\n\nTITLE: Initializing CubeClient Configuration and Making Request\nDESCRIPTION: This snippet demonstrates how to initialize the CubeClient configuration, set an access token and base path, build a query, and make a request to the Cube.js API's load endpoint. It requires the 'cubeclient' crate for API interaction and the appropriate model entities like 'V1LoadRequest'. The expected input includes a valid access token and a properly constructed query object, and the output is the response from the Cube.js API.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/cubeclient/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse cubeclient::apis::{configuration::Configuration, default_api as cube_api};\nuse cubeclient::models::{V1LoadRequest, V1LoadRequestQuery};\n\nlet mut cube_config = Configuration::default();\ncube_config.bearer_access_token = Some(\"my token\".to_string());\ncube_config.base_path = Some(\"https://myapi.mydomain.mysubdomain/\".to_string());\n\nlet query = {}; // build your own query\nlet request = V1LoadRequest {\n    query: Some(query),\n    query_type: Some(\"multi\".to_string()),\n};\nlet response = cube_api::load_v1(&self.get_client_config_for_ctx(ctx), Some(request)).await?;\n```\n\n----------------------------------------\n\nTITLE: DuckDB Driver User Agent Declaration\nDESCRIPTION: Added user agent information declaration feature to the DuckDB driver for better request tracking and identification.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\\n\\n- **duckdb-driver:** Declare user agent information ([#7490](https://github.com/cube-js/cube/issues/7490)) ([59557e8](https://github.com/cube-js/cube/commit/59557e8492e4338c457b129c6c59bde542410577))\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube.js Environment Variables\nDESCRIPTION: Environment variable configuration for Cube.js backend, specifying database connection details and API secret. Sets up PostgreSQL connection and security parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/README.md#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_TYPE=postgres\nCUBEJS_API_SECRET=SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync with Schedule Interval in Python\nDESCRIPTION: This snippet demonstrates how to configure semantic layer sync for Superset in Python using the Cube.js config decorator. It includes settings for authentication, URL, database, and a schedule interval of every 10 minutes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/semantic-layer-sync.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\n@config('semantic_layer_sync')\ndef semantic_layer_sync(ctx: dict) -> list[dict]:\n  return [\n    {\n      'type': 'superset',\n      'name': 'Superset Sync',\n      'active': False,\n      'config': {\n        'user': 'mail@example.com',\n        'password': '4dceae-606a03-93ae6dc7',\n        'url': 'superset.example.com',\n        'database': 'Cube Cloud: staging-deployment',\n        'scheduleInterval': 'every 10 minutes'\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Custom Sorting\nDESCRIPTION: This SQL query demonstrates custom sorting behavior where NULL values appear first by using the 'value_for_sorting' dimension.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/sorting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT value, value_for_sorting\nFROM sort_nulls\nGROUP BY 1, 2\nORDER BY 2 ASC;\n```\n\n----------------------------------------\n\nTITLE: Support MotherDuck token in Cube.js\nDESCRIPTION: This feature adds support for using a MotherDuck token for authentication in Cube.js. This allows Cube.js to securely access data stored in MotherDuck's cloud-based DuckDB service.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode on localhost:3000 with hot reloading enabled\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-pivot-table/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Fixing Query Timezone in Druid Driver\nDESCRIPTION: This code snippet addresses a timezone issue in the Druid driver, ensuring accurate time handling during queries.  It's essential for applications that need correct time-based data aggregation and reporting from Druid.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"### Bug Fixes\\n\\n- **druid-driver:** query timezone fix ([#5372](https://github.com/cube-js/cube.js/issues/5372)) ([ccad5fc](https://github.com/cube-js/cube.js/commit/ccad5fc58e23c55283c8e3014908cb51fa5b5fbc))\"\n```\n\n----------------------------------------\n\nTITLE: Adding GCS Support for Snowflake UNLOAD Operation\nDESCRIPTION: A code snippet showing the addition of support for Snowflake's UNLOAD operation to Google Cloud Storage (GCS), implemented in commit 91691e9.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n**snowflake-driver:** Support UNLOAD to GCS ([91691e9](https://github.com/cube-js/cube.js/commit/91691e9513742496793d0d06a356976fc43b24fd))\n```\n\n----------------------------------------\n\nTITLE: Fix Snowflake Driver Agent Issue\nDESCRIPTION: This commit fixes an issue in the snowflake-driver by adding an agent. The agent likely resolves a connection or configuration problem with the Snowflake database.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Loading Dbt Metadata from File in Python\nDESCRIPTION: Demonstrates using the Dbt.from_file static method to load dbt metadata from a manifest.json file.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_path = './manifest.json'\n\ndbt = Dbt.from_file(manifest_path)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn in React App\nDESCRIPTION: Launches the test runner in interactive watch mode, which automatically reruns tests when code changes are detected. Used for running unit and integration tests of the React application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/hacktoberfest/dashboard/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: API Token Support\nDESCRIPTION: This commit introduces support for the apiToken to be an asynchronous function. It fixes an issue where the first request sends an incorrect token when using an async function for the apiToken.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n- Support `apiToken` to be an async function: first request sends incorrect token ([a2d0c77](https://github.com/statsbotco/cubejs-client/commit/a2d0c77))\n```\n\n----------------------------------------\n\nTITLE: Redshift Driver Introspection Enhancement\nDESCRIPTION: Adds introspection support for external schemas/tables (e.g. Spectrum) in the Redshift driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **redshift-driver:** introspection for external schemas/tables (e.g. Spectrum) ([#8849](https://github.com/cube-js/cube/issues/8849)) ([fa4b3b8](https://github.com/cube-js/cube/commit/fa4b3b8161c38cc7d26e9ab00e70892fcbc0b137))\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the application with optional production flag for deployment-ready artifacts\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Installing Cube.js CLI using npm\nDESCRIPTION: Command to install the Cube.js CLI globally using npm. This allows you to use the 'cubejs' command from any directory in your terminal.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cubejs-cli\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Restart Feature to Snowflake Driver\nDESCRIPTION: A code snippet showing the implementation of a connection restart feature when the connection to Snowflake is down, committed in dab86db.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n**snowflake-driver:** Restart connection if it's not up ([dab86db](https://github.com/cube-js/cube.js/commit/dab86dbe49137157b3e154eda61972d42dfb7e7f))\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Paying Count Measure\nDESCRIPTION: This SQL snippet shows the generated query for the paying_count measure when requested via the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  COUNT(\n    CASE WHEN (users.paying = 'true') THEN users.id END\n  ) AS paying_count\nFROM users\n```\n\n----------------------------------------\n\nTITLE: Introduce Unified Query Timeout\nDESCRIPTION: This commit introduces a single, unified CUBEJS_DB_QUERY_TIMEOUT environment variable to set various database query timeout-related variables. This simplifies the configuration of query timeouts across different database drivers.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Changelog Feature Entry\nDESCRIPTION: Example of a feature changelog entry with issue reference and commit hash\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-shared/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **duckdb-driver:** Add support for installing and loading DuckDB Community Extensions ([#9169](https://github.com/cube-js/cube/issues/9169)) ([c97f99a](https://github.com/cube-js/cube/commit/c97f99a27f2c95b1a58ea4863dfe0c4227e4c42d))\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing Databricks Driver\nDESCRIPTION: Commands to install dependencies and run tests for the Databricks database driver. Requires Java to be installed for running unit tests.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Defining Orders Cube Schema in JavaScript\nDESCRIPTION: JavaScript configuration for the orders cube with the same structure as the YAML version.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    number: {\n      sql: `number`,\n      type: `number`,\n    },\n\n    created_at: {\n      sql: `created_at`,\n      type: `time`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Querying Cube.js API with Shell Commands\nDESCRIPTION: This shell script demonstrates how to install Cube.js dependencies, start the development server by first removing any existing .cubestore directory, and then query the Cube.js API using curl. The query retrieves product names, supplier company names, and emails with ordering and limit parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/recipes/joining-multiple-databases-data/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn install\n$ rm -Rf .cubestore && yarn dev\n$ curl -G --data-urlencode 'query={\n  \"order\": {\n    \"Products.name\": \"asc\"\n  },\n  \"dimensions\": [\n    \"Products.name\",\n    \"Suppliers.company\",\n    \"Suppliers.email\"\n  ],\n  \"limit\": 3\n}' http://localhost:4000/cubejs-api/v1/load | jq '{data, usedPreAggregations, error}'\n```\n\n----------------------------------------\n\nTITLE: Installing cube_dbt Package in Cube Cloud\nDESCRIPTION: Instructions for adding the cube_dbt package to the requirements.txt file in a Cube Cloud project.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAdd the `cube_dbt` package to the `requirements.txt` file in the root\\ndirectory of your Cube project. Cube Cloud will install the dependencies\\nautomatically.\n```\n\n----------------------------------------\n\nTITLE: Response Error Handling Enhancement\nDESCRIPTION: Fixed response error handling in the core WebSocket client implementation for better error management.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ws-transport/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nresponse.error.handling\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables from JavaScript Module\nDESCRIPTION: Shows how to access environment variables in a JavaScript file outside the data model directory and export them as a module, since process.env is not directly available in data model files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  value_or_undefined: process.env.MY_ENV_VAR,\n  value_or_default: process.env.MY_OTHER_ENV_VAR || 'my_default_value'\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ILIKE Operator in Databricks Filter (JavaScript)\nDESCRIPTION: This snippet corrects the implementation of the likeIgnoreCase method in the DatabricksFilter. It ensures the correct usage of the ILIKE operator when performing case-insensitive 'like' queries against a Databricks database.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"Bug Fixes\\n\\n- **databricks-driver:** using the ILIKE operator in the DatabricksFilter.likeIgnoreCase method ([#5334](https://github.com/cube-js/cube.js/issues/5334)) ([a81ca35](https://github.com/cube-js/cube.js/commit/a81ca3507124ec213ae0158918ac231ab9387b26))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Credentials with Key File Path\nDESCRIPTION: Environment variables setup for BigQuery authentication using a key file path and project ID.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCUBEJS_DB_BQ_PROJECT_ID=gcp-project-id\nCUBEJS_DB_BQ_KEY_FILE=/path/to/key-file.json\n```\n\n----------------------------------------\n\nTITLE: Allow specifying memory limit as env variable in Cube.js DuckDB driver\nDESCRIPTION: This feature allows users to configure the memory limit for the DuckDB driver in Cube.js using an environment variable. This provides a flexible way to adjust memory allocation based on the available resources and workload requirements.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Accessing Dbt Model Name in Python\nDESCRIPTION: Demonstrates accessing the name of a dbt model using the Model.name property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.name)\n# For example, 'orders'\n```\n\n----------------------------------------\n\nTITLE: Aligning Driver Imports\nDESCRIPTION: This code snippet addresses an issue related to driver imports, ensuring consistency and proper module loading. This fix contributes to the stability and reliability of the Cube.js Druid driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"### Bug Fixes\\n\\n- drivers imports alignment ([#5448](https://github.com/cube-js/cube.js/issues/5448)) ([ab12426](https://github.com/cube-js/cube.js/commit/ab1242650ba0368b855176b9c6ca2d73073acf0e))\"\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with Yarn\nDESCRIPTION: Command to build the React application for production, creating optimized and minified bundles in the build folder with hashed filenames for improved caching.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/building-a-data-app-with-cube-workshop/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables in JavaScript Data Models\nDESCRIPTION: Demonstrates how to import environment variables from an external JavaScript module into a data model file, working around the limitation that process.env is not available in data model files.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/code-reusability/environment-variables.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { value_or_undefined, value_or_default } from '../env'\n\ncube(`my_cube`, {\n  description: `${value_or_undefined}`,\n  sql_table: `${value_or_default}.table`,\n  \n  measures: {\n    count: {\n      type: `count`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Column Name in Python\nDESCRIPTION: Shows how to access the name of a dbt column using the Column.name property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.name)\n# For example, 'status'\n```\n\n----------------------------------------\n\nTITLE: Make Java Dependencies Optional\nDESCRIPTION: This feature allows Java dependencies to be optional to avoid failures during development. This change improves the development experience by preventing build failures due to missing or incompatible Java dependencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Git Commit for TRUNC SQL Push Down Fix\nDESCRIPTION: Git commit hash for fixing TRUNC SQL push down functionality with Databricks\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n95088cc5a4ed54ec978c502a906eb9ebf2adb6d8\n```\n\n----------------------------------------\n\nTITLE: Running Vue Development Server\nDESCRIPTION: Command to start the development server with hot-reload capability for local development.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run serve\n```\n\n----------------------------------------\n\nTITLE: Fixing cubesql ORDER BY issue in Cube.js\nDESCRIPTION: This code snippet addresses an issue where SQL push down of ORDER BY clauses resulted in an invalid query format. The fix ensures that the order parameters adhere to the required pattern, preventing query failures. It directly addresses issue #8032.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n### Bug Fixes\n\n- **cubesql:** SQL push down of ORDER BY causes Invalid query format: \"order[0][0]\" with value fails to match the required pattern: /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/ ([#8032](https://github.com/cube-js/cube.js/issues/8032)) ([0681725](https://github.com/cube-js/cube.js/commit/0681725c921ea62f7ef813562be0202e93928889))\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration Bug Fix in Cube.js\nDESCRIPTION: Corrected SSL configuration handling to ensure CUBEJS_DB_SSL must be explicitly set to true for SSL connections to be established\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nCUBEJS_DB_SSL must be true to affect SSL ([#1252](https://github.com/cube-js/cube.js/issues/1252))\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube.js Environment Variables\nDESCRIPTION: Environment variables configuration for Cube.js database connection and API security\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-query-builder/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCUBEJS_DB_NAME=ecom\nCUBEJS_DB_TYPE=postgres\nCUBEJS_API_SECRET=SECRET\n```\n\n----------------------------------------\n\nTITLE: React Chart Render Optimization\nDESCRIPTION: This commit includes a bug fix to evade unnecessary heavy chart renders in React.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n- **react:** Evade unnecessary heavy chart renders ([b1eb63f](https://github.com/statsbotco/cubejs-client/commit/b1eb63f))\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute Karma-based unit tests for the Angular application\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Feature Addition: scheduledRefreshTimeZones function\nDESCRIPTION: New feature added in version 1.1.12 that adds support for scheduledRefreshTimeZones as a function with securityContext parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-dx/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **server-core:** Support for scheduledRefreshTimeZones as function, passing securityContext ([#9002](https://github.com/cube-js/cube/issues/9002)) ([10e47fc](https://github.com/cube-js/cube/commit/10e47fc5472a3532a8f40f6f980f9802536a39de))\n```\n\n----------------------------------------\n\nTITLE: Feature: BigQuery driver addition\nDESCRIPTION: This commit introduces a BigQuery driver to the Cube.js project. This driver enables Cube.js to connect and interact with Google BigQuery data warehouses.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: None\nCODE:\n```\nBigQuery driver ([654edac](https://github.com/statsbotco/cubejs-client/commit/654edac))\n```\n\n----------------------------------------\n\nTITLE: Basic AI Query Request Without Query Execution\nDESCRIPTION: Example cURL request demonstrating how to make an API call to generate a Cube query without executing it, asking about cities with highest AOV.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api/reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST  \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: EXAMPLE-API-TOKEN\" \\\n --data '{ \"messages\": [{ \"role\": \"user\", \"content\": \"What cities have the highest aov this year?\" }], \"views\": [\"orders_view\"] }' \\\n https://YOUR_CUBE_API/cubejs-api/v1/ai/query/completions\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Rust Implementation Overview\nDESCRIPTION: Direct port of HyperLogLog algorithm from AirLift Java library, enabling cardinality estimation and sketch reading across languages\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/cubehll/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Overview\\n\\nRust implementation of HyperLogLog directly ported from the Java code in [AirLift](https://github.com/airlift/airlift/tree/master/stats/src/main/java/io/airlift/stats/cardinality).\\nBased on commit `736098d96c8e7f9200ceb75438d85220def88d15`.\\n\\nThis library allows to directly read the sketches produced by `AirLift`.\n```\n\n----------------------------------------\n\nTITLE: Feature: Multiple Data Source Support\nDESCRIPTION: This snippet announces the addition of multiple data source support to Cube.js. This enhancement allows Cube.js to connect to and query data from various data sources simultaneously, providing greater flexibility and integration capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: NotContains Filter with NULL Handling in Cube.js\nDESCRIPTION: This snippet shows how to use the notContains filter operator while also handling NULL values in the filter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/query-format.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"member\": \"posts.title\",\n  \"operator\": \"notContains\",\n  \"values\": [\"ruby\", null]\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - BigQuery Driver Connection Test Optimization\nDESCRIPTION: Optimization of the testConnection() method in the BigQuery driver to use a free of charge request for testing connectivity.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **bigquery-driver:** optimize testConnection() with free of charge request ([#8845](https://github.com/cube-js/cube/issues/8845)) ([99ad335](https://github.com/cube-js/cube/commit/99ad335d5a48dd3bfab48720d23cb39773817b9f))\n```\n\n----------------------------------------\n\nTITLE: SingleStore Pre-Aggregation Support Table\nDESCRIPTION: Markdown table showing pre-aggregation build strategy support for SingleStore, indicating which features work with read-only mode and which are default\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/singlestore.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature       | Works with read-only mode? | Is default? |\n| ------------- | :------------------------: | :---------: |\n| Simple        |             ✅             |     ✅      |\n| Batching      |             -              |      -      |\n| Export Bucket |             -              |      -      |\n```\n\n----------------------------------------\n\nTITLE: Installing Cube.js Vue Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn package manager\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Formatting REST API Response with jq\nDESCRIPTION: Example showing how to use curl with jq to format API responses for better readability when querying measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  -H \"Authorization: JSON.WEB.TOKEN\" \\\n  -G \\\n  --data-urlencode 'query={\"measures\": [\"orders.count\"]}' \\\n  http://localhost:4000/cubejs-api/v1/load | jq .data\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Framework globally using npm\nDESCRIPTION: This command installs the Serverless Framework globally on the system, which is required for deploying the project.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/event-collection/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g serverless\n```\n\n----------------------------------------\n\nTITLE: Using DrillDown Method with ResultSet\nDESCRIPTION: Shows how to use the drillDown method to analyze contributing rows for a metric.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nresultSet.drillDown(\n  {\n    xValues,\n    yValues,\n  },\n  // you should pass the `pivotConfig` if you have used it for axes manipulation\n  pivotConfig\n)\n```\n\n----------------------------------------\n\nTITLE: Client Core Type Definition - Add Series ShortTitle\nDESCRIPTION: TypeScript definition update to expose shortTitle property in series names for type completeness.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-core/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexpose shortTitle in seriesNames (#5836)\n```\n\n----------------------------------------\n\nTITLE: Curly Braces in JavaScript Data Models\nDESCRIPTION: Example of using JavaScript template literals with curly braces for references in JavaScript data models.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/syntax.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  sql: `\n    SELECT id, created_at\n    FROM ${other_cube.sql()}\n  `,\n\n  dimensions: {\n    status: {\n      sql: `status`,\n      type: `string`\n    },\n\n    status_x2: {\n      sql: `${status} || ' ' || ${status}`,\n      type: `string`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding uniqueidentifier type support in MSSQL driver\nDESCRIPTION: This code snippet adds support for the 'uniqueidentifier' custom type in the MSSQL driver for Cube.js. It fixes an issue where this type was not previously supported.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **mssql:** Add uniqueidentifier type support -- Custom type 'uniqueidentifier' is not supported ([#4386](https://github.com/cube-js/cube.js/issues/4386)) Thanks [@jdeksup](https://github.com/jdeksup)! ([fb77332](https://github.com/cube-js/cube.js/commit/fb773325a7d2e8fa3c923a8c332e275e178b49c6))\n```\n\n----------------------------------------\n\nTITLE: Initial DuckDB driver support in Cube.js\nDESCRIPTION: This feature introduces initial support for DuckDB as a data source in Cube.js. The DuckDB driver enables Cube.js to query and analyze data stored in DuckDB, providing a fast and efficient data analysis solution.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Moving partition range evaluation in Cube.js\nDESCRIPTION: This feature moves the partition range evaluation from the Schema Compiler to the Query Orchestrator. This change allows for unbounded queries on partitioned pre-aggregations. Further details can be found in commit 8ea654e.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n8ea654e\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Model SQL Table in Python\nDESCRIPTION: Demonstrates accessing the fully-qualified SQL relation name of a dbt model using the Model.sql_table property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.sql_table)\n# For example, '\"db\".\"public\".\"orders\"'\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport Close Method\nDESCRIPTION: Introduction of close() method for the WebSocket transport implementation\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **ws-transport:** Introduce close() method ([47394c1](https://github.com/cube-js/cube.js/commit/47394c195fc7513c664c6e1e35b43a6883924491))\n```\n\n----------------------------------------\n\nTITLE: Running Apache Superset in Docker\nDESCRIPTION: Starts a Docker container with Apache Superset, making it available on port 8080. This command runs Superset in detached mode.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8088 --name superset apache/superset\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Pre-aggregations in JavaScript Data Model\nDESCRIPTION: This JavaScript snippet demonstrates how to use an imported environment variable to conditionally enable pre-aggregations in a Cube.js data model. It also accounts for context symbol transpilation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/disabling-pre-aggregations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pre_aggregations_enabled } from '../env'\n\ncube(`orders`, {\n  sql_table: `orders`,\n\n  measures: {\n    count: {\n      type: `count`\n    }\n  },\n  \n  pre_aggregations: pre_aggregations_enabled\n    ? {\n      main: {\n        measures: (CUBE) => [\n          `${CUBE}.count`\n        ]\n      }\n    }\n    : {}\n})\n```\n\n----------------------------------------\n\nTITLE: Converting LookML Views to Cubes\nDESCRIPTION: Command to convert LookML view files into Cube's data model format, generating cube definitions without join relationships.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/lkml2cube.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlkml2cube cubes path/to/file.view.lkml --outputdir ./\n```\n\n----------------------------------------\n\nTITLE: Preventing Cluster Start on Test Connection for Snowflake Driver\nDESCRIPTION: A code snippet showing a bug fix to prevent triggering cluster start when testing connection to Snowflake, implemented in commit 3bb2d8f.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n**@cubejs-backend/snowflake-driver:** Do not trigger cluster start on test connection ([3bb2d8f](https://github.com/cube-js/cube.js/commit/3bb2d8f466987402a9af6e5c0a7e6667846b1d19))\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Logger in JavaScript\nDESCRIPTION: This JavaScript snippet provides a custom logger function in a Node.js module format that logs a message and additional parameters. It uses Node.js `console.log` to output the message in string format, with dependencies on the Node environment. The function expects `message` and `params` as arguments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  logger: (message, params) => {\n    console.log(`${message}: ${JSON.stringify(params)}`);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Vue Linter\nDESCRIPTION: Command to run the linter and automatically fix formatting issues in the codebase.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Schema Generation Bug Fix for Case Sensitive Names\nDESCRIPTION: Fix for schema generation when handling joins with case sensitive table and column names, resolving issue #120.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Schema generation with joins having case sensitive table and column names ([#124](https://github.com/statsbotco/cubejs-client/issues/124)) ([c7b706a](https://github.com/statsbotco/cubejs-client/commit/c7b706a)), closes [#120](https://github.com/statsbotco/cubejs-client/issues/120) [#120](https://github.com/statsbotco/cubejs-client/issues/120)\n```\n\n----------------------------------------\n\nTITLE: Installing Hive Protocol Files Locally\nDESCRIPTION: Commands to download and generate Thrift protocol files for Hive integration using local Thrift installation. This process requires Apache Thrift to be installed on the local machine.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-hive-driver/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ thrift --gen js:node c TCLIService.thrift\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Primary Key Filter in Oracle Driver\nDESCRIPTION: This code snippet shows a bug fix in version 0.10.16 that removes unnecessary code related to primary key filtering for the dimensionColumns method in the Oracle driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-oracle-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- remove redundant hacks: primaryKey filter for method dimensionColumns ([#161](https://github.com/statsbotco/cubejs-client/issues/161)) ([f910a56](https://github.com/statsbotco/cubejs-client/commit/f910a56))\n```\n\n----------------------------------------\n\nTITLE: React Query Hook Fix\nDESCRIPTION: Fixes an issue in `useCubeQuery` where error and resultSet are not reset upon query change.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n- `useCubeQuery` doesn't reset error and resultSet on query change ([805d5b1](https://github.com/statsbotco/cubejs-client/commit/805d5b1))\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests which verify the application functionality from a user perspective.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Fix: Snowflake Decimal Export for Pre-Aggregations\nDESCRIPTION: This snippet refers to a bug fix in the snowflake-driver that addresses an issue where floating-point numbers were being exported as decimals for pre-aggregations. The fix ensures correct data type handling for pre-aggregations in Snowflake.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fixing Environment Variable Override\nDESCRIPTION: Bug fix to ensure environment variables are only overridden during reload operations, addressing issue #2267.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\noveride env variables only on reload, fix #2267\n```\n\n----------------------------------------\n\nTITLE: Query with Post-processing in SQL API\nDESCRIPTION: Shows a query that performs a SELECT from the 'orders' cube, which the SQL API transforms into a regular query format.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  city,\n  SUM(amount)\nFROM orders\nWHERE status = 'shipped'\nGROUP BY 1\n```\n\n----------------------------------------\n\nTITLE: Class Diagram for Query Execution\nDESCRIPTION: This Mermaid class diagram describes the components involved in executing queries within the Cube.js architecture. It highlights the roles of ServerManager and SessionManager among others, and shows the interactions between querying planning processes and execution contexts to facilitate query handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/DEVELOPMENT.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    ServerConfiguration <|-- ServerManager\n    Transport <|-- ServerManager\n    Auth <|-- ServerManager\n    class ServerManager {\n    }\n\n    ServerManager <|-- SessionManager\n    class SessionManager{\n    }\n\n    class MetaContext{\n    }\n\n    SessionState <|-- QueryPlanner\n    MetaContext <|-- QueryPlanner\n    SessionManager <|-- QueryPlanner\n    class QueryPlanner{\n    }\n\n    CubeQueryPlanner <|-- ExecutionContext\n    class ExecutionContext {\n    }\n\n    class CubeQueryPlanner {\n    }\n```\n\n----------------------------------------\n\nTITLE: Docker Node.js Major Version Upgrade to v18.x\nDESCRIPTION: Major version upgrade of Node.js to version 18.x in the Docker package\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **docker:** Upgrade Node.js to 18.x ([8b5b923](https://github.com/cube-js/cube/commit/8b5b9237a6822498829ec7e9fba39a1e02b4b7bd))\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query Example\nDESCRIPTION: Example showing how to write a SQL query in the SQL Runner editor\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/sql-runner.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM example_table WHERE column = 'value'\n```\n\n----------------------------------------\n\nTITLE: Database Schema Fetching Methods Implementation in v0.33.58\nDESCRIPTION: New methods for step-by-step database schema fetching were introduced in version 0.33.58, enabling more granular control over schema retrieval.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- new methods for step-by-step db schema fetching ([#7058](https://github.com/cube-js/cube/issues/7058)) ([a362c20](https://github.com/cube-js/cube/commit/a362c2042d4158ae735e9afe0cfeae15c331dc9d))\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Commit in Version 0.36.0\nDESCRIPTION: Commit message indicating the removal of Node.js 16 support from the Druid driver package, as Node.js 16 reached end-of-life. This was marked as a breaking change that was previously deprecated in v0.35.0.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nchore!: Support for Node.js 16 was removed ([8b83021](https://github.com/cube-js/cube/commit/8b830214ab3d16ebfadc65cb9587a08b0496fb93))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client Development Environment\nDESCRIPTION: Command for quickly setting up the development environment for Cube client packages by installing dependencies and creating package links.\nSOURCE: https://github.com/cube-js/cube/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd packages/cubejs-client-core && yarn && yarn link && cd ../.. && cd packages/cubejs-client-react && yarn && yarn link && cd ../..\n```\n\n----------------------------------------\n\nTITLE: Setting Scheduled Refresh Timer in Cube.js\nDESCRIPTION: Configures the background refresh worker's heartbeat interval. Used to check refresh keys for freshness in the background.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.scheduled_refresh_timer = 60\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  scheduledRefreshTimer: 60\n};\n```\n\n----------------------------------------\n\nTITLE: Publishing Apollo Server Subgraph to Apollo Studio\nDESCRIPTION: This command uses Rover to publish the Apollo Server subgraph to an Apollo Studio Supergraph. It requires an Apollo API key and specifies the schema file and routing URL for the Apollo Server.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/apollo-federation-with-cube/apollo-server-app/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPOLLO_KEY=service:Your-Graph:1234567890 \\\n  rover subgraph publish Your-Graph@current \\\n  --name apollo --schema ./graphql/apollo.graphql \\\n  --routing-url http://35.192.83.151/graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Server Endpoint in Cube Store\nDESCRIPTION: Example of setting the MinIO server endpoint environment variable for Cube Store to connect to a local MinIO instance.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBESTORE_MINIO_SERVER_ENDPOINT=http://localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Metrics Sink in Vector for Cube Cloud\nDESCRIPTION: Example configuration for exporting metrics from Cube Cloud to New Relic using the Vector sink. This setup uses the 'metrics' API endpoint, specifies the EU region, and includes the metrics input source.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/new-relic.mdx#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.new_relic_metrics]\ntype = \"new_relic\"\napi = \"metrics\"\ninputs = [\n  \"metrics\"\n]\nregion = \"eu\"\ncompression = \"gzip\"\naccount_id = \"$CUBE_CLOUD_MONITORING_NEW_RELIC_ACCOUNT_ID\"\nlicense_key = \"$CUBE_CLOUD_MONITORING_NEW_RELIC_LICENSE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Creating CubeCloudBYOC IAM Role Trust Policy in JSON\nDESCRIPTION: This JSON defines the trust policy for the CubeCloudBYOC IAM role. It allows the Cube Cloud BYOC provisioner account to assume this role, with a condition that the external ID must be 'cube-cloud-byoc'. This policy is crucial for secure cross-account access.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/byoc/aws.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::307491255751:root\"\n            },\n            \"Action\": \"sts:AssumeRole\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": \"cube-cloud-byoc\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache and Queue Driver\nDESCRIPTION: Demonstrates how to set the cache and queue driver for the Cube deployment using the cache_and_queue_driver option.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config\n\nconfig.cache_and_queue_driver = 'cubestore'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  cacheAndQueueDriver: 'cubestore'\n};\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Max Pool Size Configuration\nDESCRIPTION: Added CUBEJS_DB_MAX_POOL environment variable support to configure maximum connection pool size for Postgres database connections.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **postgres-driver:** `CUBEJS_DB_MAX_POOL` env variable ([#528](https://github.com/cube-js/cube.js/issues/528)) Thanks to [@chaselmann](https://github.com/chaselmann)! ([fb0d34b](https://github.com/cube-js/cube.js/commit/fb0d34b))\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Model Description in Python\nDESCRIPTION: Shows how to access the description of a dbt model using the Model.description property.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.description)\n# For example, 'All Jaffle Shop orders'\n```\n\n----------------------------------------\n\nTITLE: Worker Concurrency Feature Addition\nDESCRIPTION: Introduction of CUBEJS_REFRESH_WORKER_CONCURRENCY environment variable and updated default concurrency settings for drivers. Added in version 1.2.4.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **server-core:** Introduce CUBEJS_REFRESH_WORKER_CONCURRENCY env and update default concurrency settings for drivers ([#9168](https://github.com/cube-js/cube/issues/9168)) ([7ef6282](https://github.com/cube-js/cube/commit/7ef628273905d47996b108862a52dde89b9525e3))\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for Cube Schema in Kubernetes\nDESCRIPTION: YAML configuration for creating a ConfigMap that contains Cube.js schema files. The example includes two cube definitions (Cube1 and Cube2) with basic configurations. This approach allows schema files to be mounted in the Cube Server container.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cube-api-schema\ndata:\n  Cube1.js: |\n    cube(`Cube1`, {\n      sql: `SELECT * FROM cube1_data`,\n\n      measures: {\n        count: {\n          type: `count`,\n        },\n      },\n    });\n  Cube2.js: |\n    cube(`Cube2`, {\n      sql: `SELECT * FROM cube2_data`,\n\n      measures: {\n        count: {\n          type: `count`,\n        },\n      },\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for React TypeScript Project\nDESCRIPTION: This snippet shows how to configure ESLint for a React TypeScript project. It sets up parser options for the latest ECMAScript version, module sourcing, and TypeScript configuration files.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/apps/react-typescript-chartjs-area+bar+doughnut+line+pie/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Logs for Unoptimized Refresh Key in Cube.js\nDESCRIPTION: These logs show how the unoptimized refresh key queries for all partitions, causing unnecessary rebuilding of all partitions when only specific ones were updated.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/refreshing-select-partitions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nExecuting SQL: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6\n--\n  SELECT max(updated_at) FROM public.orders\n--\nPerforming query completed: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6 (15ms)\nPerforming query: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6\nPerforming query: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6\nExecuting SQL: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6\n--\n  select min((\"orders\".created_at::timestamptz AT TIME ZONE 'UTC')) from public.orders AS \"orders\"\n--\nExecuting SQL: 5b4c517f-b496-4c69-9503-f8cd2b4c73b6\n--\n  select max((\"orders\".created_at::timestamptz AT TIME ZONE 'UTC')) from public.orders AS \"orders\"\n--\n```\n\n----------------------------------------\n\nTITLE: Building Custom Docker Image for Cube.js\nDESCRIPTION: Bash command to build a custom Docker image for Cube.js that includes embedded schema files. The command creates an image tagged with the user's username.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <YOUR_USERNAME>/cubejs-custom-build .\n```\n\n----------------------------------------\n\nTITLE: Release DuckDB connection in Cube.js\nDESCRIPTION: This commit ensures that DuckDB connections are properly released after use in Cube.js. Releasing connections prevents resource leaks and ensures that the database server can efficiently manage concurrent requests.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to compile and minify the project for production deployment, creating optimized build files.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference - Playground Query Tabs\nDESCRIPTION: Git commit hash for implementing query tabs and history preservation in playground\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nd794d9ec1281a2bc66a9194496df0eeb97936217\n```\n\n----------------------------------------\n\nTITLE: Error: Nested Aggregate Function Calls\nDESCRIPTION: Error occurs when there is a nested aggregation in a query where a measure with an aggregation references another measure with an aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAggregate function calls cannot be nested\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Query Orchestrator Pre-aggregation Build Range\nDESCRIPTION: Fix addresses improper pre-aggregation buildRange construction for non UTC timezones in the query orchestrator.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **query-orchestrator:** Fix improper pre-aggregation buildRange construction for non UTC timezones ([#9284](https://github.com/cube-js/cube/issues/9284)) ([ef12d8d](https://github.com/cube-js/cube/commit/ef12d8d02702df7dcc1e6531c1b0aee6afa576ef))\n```\n\n----------------------------------------\n\nTITLE: Initialize Astro Project with Cube Integration\nDESCRIPTION: Commands to create a new Astro project directory and add the Cube Airflow provider package.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/airflow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cube-astro\ncd cube-astro\nastro dev init\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"airflow-provider-cube\" >> ./requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Java for JDBC Driver on Debian/Ubuntu\nDESCRIPTION: Command for installing OpenJDK 8 on Debian-based Linux distributions.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install openjdk-8-jdk\n```\n\n----------------------------------------\n\nTITLE: Postgres Driver Bug Fix - Timestamp Parsing\nDESCRIPTION: Fix for timestamp parsing in Postgres driver by implementing per-query type parser to handle timezone conversions correctly.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nFix postgres driver timestamp parsing by using pg per-query type parser ([#269](https://github.com/cube-js/cube.js/issues/269)) Thanks to [@berndartmueller](https://github.com/berndartmueller)! ([458c0c9](https://github.com/cube-js/cube.js/commit/458c0c9)), closes [#265](https://github.com/cube-js/cube.js/issues/265)\n```\n\n----------------------------------------\n\nTITLE: Adding Compatibility with CLI for External Commands\nDESCRIPTION: Bug fix to ensure compatibility between the server and CLI when running external commands.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nCompatibility with CLI to run external commands\n```\n\n----------------------------------------\n\nTITLE: Configuring Funnel Steps\nDESCRIPTION: Demonstrates how to set up a single step in a funnel with required fields (name, eventsView) and the optional timeToConvert parameter that defines the conversion window.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/funnels.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsteps: [\n  {\n    name: `purchase_product`,\n    eventsView: {\n      sql: `select * from events where event = 'purchase_product'`,\n    },\n    timeToConvert: \"1 day\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Fixing Athena Driver Escaping for Column Names\nDESCRIPTION: Bug fix for the Athena driver that corrects the escaping mechanism, using double quotes for column names and backticks for table/schema names.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **athena-driver:** Wrong escape, Use \" for column names, ` for table/schema ([62d8fcf](https://github.com/cube-js/cube.js/commit/62d8fcfb145ac04de72086b354bd583279617481))\n```\n\n----------------------------------------\n\nTITLE: Ignore KILL Statement Without Error\nDESCRIPTION: This feature modifies CubeSQL to ignore the `KILL` statement without raising an error. The `KILL` statement is used to terminate a running query or process. By ignoring it silently, Cube.js avoids unnecessary errors in environments where the `KILL` statement is not supported or should not be executed.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Ignore KILL statement without error ([20590f3](https://github.com/cube-js/cube.js/commit/20590f39bc1931f5b23b14d81aa48562e373c95b))\"\n```\n\n----------------------------------------\n\nTITLE: Generating YAML Dimension Definition using as_dimension Method\nDESCRIPTION: Shows how to generate a YAML snippet for a column that can be used in data models. The method includes name, description, SQL, type, primary key status, and metadata information.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\ncolumn = model.column('status')\n\nprint(column.as_dimension())\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Jinja template\ncubes:\n  - {{ model.as_cube() }}\n\n    dimensions:\n      {% for column in model.columns() %}\n      - {{ column.as_dimension() }}\n      {% endfor %}\n\n# YAML\ncubes:\n  - name: orders\n    description: All Jaffle Shop orders\n    sql_table: '\"db\".\"public\".\"orders\"'\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: status\n        description: 'Order execution status: new, in progress, delivered'\n        sql: status\n        type: string\n        meta:\n          some: data\n```\n\n----------------------------------------\n\nTITLE: Fix Trino driver CommonJS compatibility\nDESCRIPTION: This commit addresses a bug that prevented the Trino driver from being compatible with CommonJS modules. The fix ensures that the driver can be properly used in CommonJS environments.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-trino-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n([#5581](https://github.com/cube-js/cube.js/issues/5581)) ([ca8fd4e](https://github.com/cube-js/cube.js/commit/ca8fd4e42f4d8f87667507920f02cbb1a7072763))\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running and monitoring tests in the React application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/analytics-dashboard/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Feature Addition for Schema Compiler Named Timezones\nDESCRIPTION: Adds a flag for using named timezones in MySQL Query class within the schema compiler.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **schema-compiler:** Add flag for using named timezones in MySQL Query class ([#9111](https://github.com/cube-js/cube/issues/9111)) ([5a540db](https://github.com/cube-js/cube/commit/5a540db9228dcbb88c434123f13291202f6da9be))\n```\n\n----------------------------------------\n\nTITLE: Currency Format Dimension\nDESCRIPTION: Shows how to format numeric values as currency.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    amount: {\n      sql: `amount`,\n      type: `number`,\n      format: `currency`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: amount\n        sql: amount\n        type: number\n        format: currency\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App with BigQuery SDK and Load Test\nDESCRIPTION: Commands to start a Node.js application that connects directly to BigQuery via SDK and run load tests with K6 for 200 virtual users.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/bigquery/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode bq-api.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nk6 run k6-bq.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Pinot Environment Variables in Cube.js\nDESCRIPTION: Environment variable configuration required for connecting Cube.js to an Apache Pinot database. Includes settings for host, port, authentication, and optional parameters.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/pinot.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_TYPE=pinot\nCUBEJS_DB_HOST=http[s]://pinot.broker.host\nCUBEJS_DB_PORT=8099\nCUBEJS_DB_USER=pinot_user\nCUBEJS_DB_PASS=**********\n```\n\n----------------------------------------\n\nTITLE: Fixing WebSocket Closing Error in CubeStore Driver\nDESCRIPTION: Addresses an issue where a WebSocket closing error was occurring in the CubeStore driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\nError: WebSocket is not open: readyState 2 (CLOSING) ([#5846](https://github.com/cube-js/cube.js/issues/5846)) ([a5be099](https://github.com/cube-js/cube.js/commit/a5be099f1d339ceb17c89439d6195c5718c726bb))\n```\n\n----------------------------------------\n\nTITLE: Configuring aws_cloudwatch_logs Sink for Cube Cloud Log Export\nDESCRIPTION: This TOML configuration sets up the aws_cloudwatch_logs sink in vector.toml to export Cube Cloud logs to Amazon CloudWatch. It specifies the log inputs, AWS region, log group and stream names, and authentication details.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/cloudwatch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.aws_cloudwatch_logs]\ntype = \"aws_cloudwatch_logs\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\nregion = \"us-east-1\"\ngroup_name = \"your-group-name\"\nstream_name = \"your-stream-name\"\ncreate_missing_group = true\ncreate_missing_stream = true\n\n[sinks.aws_cloudwatch_logs.auth]\naccess_key_id = \"$CUBE_CLOUD_MONITORING_AWS_ACCESS_KEY_ID\"\nsecret_access_key = \"$CUBE_CLOUD_MONITORING_AWS_SECRET_ACCESS_KEY\"\n\n[sinks.aws_cloudwatch_logs.encoding]\ncodec = \"json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Claims Namespace\nDESCRIPTION: Example of configuring custom claims namespace in Cube.js configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/auth.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jwt: {\n    claimsNamespace: \"my-custom-namespace\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Orders Data\nDESCRIPTION: Copies data from S3 CSV file into the orders table using Snowflake's COPY command.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCOPY INTO cube_demo.ecom.orders (id, user_id, status, completed_at, created_at)\nFROM 's3://cube-tutorial/orders.csv'\nFILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = ',' SKIP_HEADER = 1);\n```\n\n----------------------------------------\n\nTITLE: Version 0.35.0 Bug Fix - Node.js 18 Compatibility\nDESCRIPTION: Fixed compatibility issue with Node.js 18 where localhost was being resolved to IPv6.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **cubestore-driver:** Compatibility with Node.js 18 (localhost resolved to ipv6) ([f7a4fab](https://github.com/cube-js/cube/commit/f7a4fabc28a81f238446c823794ae2938ecd7290))\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout Environment Variable\nDESCRIPTION: Introduces a single, unified environment variable `CUBEJS_DB_QUERY_TIMEOUT` to control various database query timeouts. This simplifies configuration by consolidating multiple timeout-related variables into one.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\nIntroduce single unified CUBEJS_DB_QUERY_TIMEOUT env variable to set all various variables that control database query timeouts ([#3864](https://github.com/cube-js/cube.js/issues/3864)) ([33c6292](https://github.com/cube-js/cube.js/commit/33c6292059e65e293a7e3d61e1f1e0c1413eeece))\n```\n\n----------------------------------------\n\nTITLE: Original Express-Based Cube.js Server Configuration\nDESCRIPTION: Shows the index.js file that initializes and starts a Cube.js server using CubeServer class with custom logging, typical of Express-based deployments.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/upgrading-cube/migrating-from-express-to-docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CubeServer = require(\"@cubejs-backend/server\");\n\nconst server = new CubeServer({\n  logger: (msg, params) => {\n    console.log(`${msg}: ${JSON.stringify(params)}`);\n  },\n});\n\nserver\n  .listen()\n  .then(({ version, port }) => {\n    console.log(`🚀 Cube API server (${version}) is listening on ${port}`);\n  })\n  .catch((e) => {\n    console.error(\"Fatal error during server start: \");\n    console.error(e.stack || e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Query Orchestrator Module\nDESCRIPTION: Core module for managing query execution and orchestration in Cube.js. Handles database connections, query queuing, caching, and pre-aggregation management. Recently upgraded with TypeScript support and additional Redis configuration options.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-query-orchestrator/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsyncRedisClient } from '@cubejs-backend/query-orchestrator';\n\ninterface RedisPoolOptions {\n  poolMin?: number;\n  poolMax?: number;\n  redisOptions?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Running development server with npm start\nDESCRIPTION: Runs the React application in development mode, which enables hot-reloading and displays lint errors in the console. The app will be available at localhost:3000.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Querying Encryption Key Usage in Cube Store\nDESCRIPTION: This SQL query retrieves information about which encryption key is used by pre-aggregation partitions in Cube Store. It's executed using the SQL Runner in Cube Cloud.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/encryption-keys.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name, encryption_key_id FROM system.tables WHERE encryption_key_id IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Fixing 'contains' filter using ILIKE in CubeStore Driver\nDESCRIPTION: This commit fixes a bug in the cubestore-driver related to the 'contains' filter. It replaces the standard LIKE operator with ILIKE, making the filter case-insensitive. The commit hash c1b2e10 is provided for further investigation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nc1b2e10\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to display help information for the Angular CLI, providing guidance on available commands and options.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Table Pivot Bug Fix\nDESCRIPTION: This commit fixes a bug in client-core where the table pivot incorrectly behaves with multiple measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n- **client-core:** Table pivot incorrectly behaves with multiple measures ([adb2270](https://github.com/statsbotco/cubejs-client/commit/adb2270))\n```\n\n----------------------------------------\n\nTITLE: Providing password for Postgres check_sql_auth function\nDESCRIPTION: This code snippet enhances the cubesql functionality by providing the Postgres connection password as the third argument to the `check_sql_auth()` function. This allows for more secure and flexible authentication processes when interacting with Postgres databases. This enhancement addresses issue #5430.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n### Features\n\n- **cubesql:** Provide password supplied by Postgres connection as a 3rd argument of `check_sql_auth()` ([#7471](https://github.com/cube-js/cube.js/issues/7471)) ([ee3c19f](https://github.com/cube-js/cube.js/commit/ee3c19f8d467056c90ee407b3ac386dc1892b678)), closes [#5430](https://github.com/cube-js/cube.js/issues/5430)\n```\n\n----------------------------------------\n\nTITLE: Client React Query Prop Fix\nDESCRIPTION: This commit addresses an issue in client-react where the query prop now has a default blank value.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: none\nCODE:\n```\n- client-react - query prop now has default blank value ([#54](https://github.com/statsbotco/cubejs-client/issues/54)) ([27e7090](https://github.com/statsbotco/cubejs-client/commit/27e7090))\n```\n\n----------------------------------------\n\nTITLE: Running Load Test with Configurable Parameters\nDESCRIPTION: Executes a load test with configurable requests per second (RPS) and duration parameters. This command allows for customizing the benchmark intensity and length to measure performance under different conditions.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/cubestore-benchmark/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nRPS=<requests per second> DURATION=<duration, seconds>s yarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robots.txt Permissions\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the entire website. It references the standard protocol documentation and uses the wildcard User-agent to apply permissions to all bots.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/d3-dashboard/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n\n```\n\n----------------------------------------\n\nTITLE: Feature: Add SSL CA Parameter Support in Postgres Driver\nDESCRIPTION: Added support for CUBEJS_DB_SSL_CA parameter in Postgres Driver to enable SSL certificate authority configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **postgres-driver:** Allow usage of CUBEJS_DB_SSL_CA parameter in postgres Driver. ([#582](https://github.com/cube-js/cube.js/issues/582)) Thanks to [@gauravlanjekar](https://github.com/gauravlanjekar)! ([158bd10](https://github.com/cube-js/cube.js/commit/158bd10))\n```\n\n----------------------------------------\n\nTITLE: Angular 12 Support Update in v0.29.0\nDESCRIPTION: Angular version compatibility update to support Angular 12, dropping support for versions 10/11\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### chore\\n\\n- angular 12 ([#2863](https://github.com/cube-js/cube/issues/2863)) ([18efb65](https://github.com/cube-js/cube/commit/18efb65b3acbbd7da00ae02967d13070e9a33a90))\\n\\n### BREAKING CHANGES\\n\\n- drop Angular 10/11 support\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Key in YAML\nDESCRIPTION: Example of defining a composite primary key by concatenating multiple columns when no natural primary key exists.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\ncubes:\\n  - name: cube_a\\n    # ...\\n\\n    dimensions:\\n      - name: composite_key\\n        sql: CONCAT(column_a, '-', column_b, '-', column_c)\\n        type: string\\n        primary_key: true\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for DuckDB TimeStamp and DateBin\nDESCRIPTION: Fix for timeStampCast and dateBin functionality in the DuckDB driver implementation\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **duckdb-driver:** fix timeStampCast and dateBin ([#8748](https://github.com/cube-js/cube/issues/8748)) ([a292c3f](https://github.com/cube-js/cube/commit/a292c3faea4abce13a527233df59a22be0577408))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fix schema query error for QuestDB driver\nDESCRIPTION: This code snippet fixes a schema query error related to system tables in the QuestDB driver. This prevents errors when querying the schema of a QuestDB database, ensuring accurate metadata retrieval and query planning.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: SQL Querying in Explo Dashboard\nDESCRIPTION: Example showing how to write SQL queries in Explo's dashboard interface to access data via Cube's SQL API. This enables creating interactive dashboards and reports for customer-facing analytics.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/explo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM customers\nWHERE country = 'USA'\n```\n\n----------------------------------------\n\nTITLE: Introduce Databricks JDBC Driver\nDESCRIPTION: This commit introduces a new Databricks JDBC driver. This allows Cube.js to connect to and query data from Databricks data sources, expanding its data connectivity options.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Migrating Base Driver to Typescript\nDESCRIPTION: This code snippet describes the migration of the base driver to TypeScript within the Cube.js project.  This enhances type safety and maintainability of the codebase. The commit included in the description provides more details on the specific changes made during the migration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-questdb-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Other\nCODE:\n```\n### Bug Fixes\n\n- migrate base driver to ts ([#5233](https://github.com/cube-js/cube.js/issues/5233)) ([c24f545](https://github.com/cube-js/cube.js/commit/c24f5450d68896e06ef6830d9348c0370c22b34c))\n```\n\n----------------------------------------\n\nTITLE: Second Page Query Result Example\nDESCRIPTION: Example response showing the next five orders.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/queries/pagination.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"orders.number\": 6,\n  },\n  {\n    \"orders.number\": 7,\n  },\n  {\n    \"orders.number\": 8,\n  },\n  {\n    \"orders.number\": 9,\n  },\n  {\n    \"orders.number\": 10,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Credentials Configuration File with Shell\nDESCRIPTION: Creates a configuration file with BigQuery credentials for connecting to the data source. The file includes project ID, export bucket, and credentials necessary for the benchmark setup.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/cubestore-benchmark/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cat <<EOF > ~/.env.bigquery\nCUBEJS_DB_BQ_PROJECT_ID=...\nCUBEJS_DB_EXPORT_BUCKET=...\nCUBEJS_DB_BQ_CREDENTIALS=...\nEOF\n```\n\n----------------------------------------\n\nTITLE: Decorated Environment Variable Example for Data Source\nDESCRIPTION: Demonstrates how to decorate environment variables with a data source name for specific database configurations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/multiple-data-sources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DS_DATASOURCE1_DB_TYPE=postgres\n```\n\n----------------------------------------\n\nTITLE: Postgres Driver Enhancement - External Pre-aggregations\nDESCRIPTION: Performance improvement for Postgres external pre-aggregations handling and processing.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nSpeedup PG external pre-aggregations ([#201](https://github.com/statsbotco/cubejs-client/issues/201)) ([7abf504](https://github.com/statsbotco/cubejs-client/commit/7abf504)), closes [#200](https://github.com/statsbotco/cubejs-client/issues/200)\n```\n\n----------------------------------------\n\nTITLE: SQL Query Analysis in Cube Cloud\nDESCRIPTION: Example showing SQL query inspection in Cube Cloud's Query History feature. The query is either executed against the data source or Cube Store if using pre-aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/query-history.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM your_table\n```\n\n----------------------------------------\n\nTITLE: Fix Post Installation Issue with npm\nDESCRIPTION: This bug fix addresses a post-installation issue with npm related to bundled dependencies. It prevents potential errors or issues that might occur after installing the package via npm. This ensures a smoother installation process for users.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n\"native: Post installation issue with npm (avoid bundledDependencies) ([6163838](https://github.com/cube-js/cube.js/commit/6163838926586cf1a17bea353cb23b61e48469ca))\"\n```\n\nLANGUAGE: none\nCODE:\n```\n\"native: Post installation issue with npm ([#4302](https://github.com/cube-js/cube.js/issues/4302)) ([8aa9c71](https://github.com/cube-js/cube.js/commit/8aa9c71b1ae473579b6d438aeebdac28a7fd3d19))\"\n```\n\n----------------------------------------\n\nTITLE: JWT Payload for Peach Inc Tenant\nDESCRIPTION: JSON Web Token payload configuration for the \"Peach Inc\" tenant (which is not defined in the driver factory), including subject, tenant identifier, issued-at and expiration timestamps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\n// JWT payload for \"Peach Inc\"\n{\n  sub: \"1234567890\",\n  tenant: \"Peach Inc\",\n  iat: 1000000000,\n  exp: 5000000000,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Status Query\nDESCRIPTION: JSON query to retrieve all possible order statuses from the cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/getting-started-pre-aggregations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dimensions\": [\"orders.status\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Support for CUBEJS_DB_EXPORT_BUCKET\nDESCRIPTION: This feature adds support for the CUBEJS_DB_EXPORT_BUCKET environment variable in the BigQuery driver. It's part of version 0.27.22.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n- **bigquery-driver:** Support CUBEJS_DB_EXPORT_BUCKET ([400c163](https://github.com/cube-js/cube.js/commit/400c1632e978de6c00b4c996088d1b61a9223404))\n```\n\n----------------------------------------\n\nTITLE: Migrating Base Driver to TypeScript\nDESCRIPTION: This code snippet represents the migration of the base driver to TypeScript, improving code maintainability and type safety.  This change likely impacts all drivers extending the base driver, including the Druid driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"### Bug Fixes\\n\\n- migrate base driver to ts ([#5233](https://github.com/cube-js/cube.js/issues/5233)) ([c24f545](https://github.com/cube-js/cube.js/commit/c24f5450d68896e06ef6830d9348c0370c22b34c))\"\n```\n\n----------------------------------------\n\nTITLE: Introducing CubeStoreQueueDriver in Query Orchestrator\nDESCRIPTION: Adds a new CubeStoreQueueDriver to the query orchestrator functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **query-orchestrator:** Introduce CubeStoreQueueDriver ([#6014](https://github.com/cube-js/cube.js/issues/6014)) ([f4744bf](https://github.com/cube-js/cube.js/commit/f4744bfb218a8a8cb28effe28237867157d01074))\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with Yarn\nDESCRIPTION: Command to eject from Create React App configuration, which exposes all configuration files and transitive dependencies, allowing for complete customization but preventing return to the managed workflow.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/building-a-data-app-with-cube-workshop/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Updating JDBC Driver for Databricks (JavaScript)\nDESCRIPTION: Updates the JDBC (JAR) driver used for connecting to Databricks. This update likely incorporates bug fixes, performance improvements, and support for new Databricks features within the JDBC driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"Features\\n\\n- **databricks-jdbc:** jdbc (jar) driver update ([#5610](https://github.com/cube-js/cube.js/issues/5610)) ([aacd8cd](https://github.com/cube-js/cube.js/commit/aacd8cd356429e4da21749b92eb457c03a1a3f76))\\n- **databricks-jdbc:** jdbc (jar) driver update ([#5612](https://github.com/cube-js/cube.js/issues/5612)) ([372ed71](https://github.com/cube-js/cube.js/commit/372ed71c6edd61d862d62cb0522fbc47c0f997b2))\"\n```\n\n----------------------------------------\n\nTITLE: Upgrade Rust Version\nDESCRIPTION: This feature upgrades the Rust version used in CubeSQL to 1.61.0-nightly (2022-02-22). This upgrade leverages the latest improvements, bug fixes, and performance enhancements in the Rust ecosystem. This potentially introduces new features and optimizes existing functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Upgrade rust to 1.61.0-nightly (2022-02-22) ([c836065](https://github.com/cube-js/cube.js/commit/c8360658ccb8e5e3e6cfcd62da2d156b44ee8456))\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Generated Chart Application in Bash\nDESCRIPTION: These commands install dependencies and start the development server for the generated chart application. Before running these commands, ensure you've unarchived the downloaded code and renamed the credentials file to '.env.local'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/vizard.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project for full control. This is a one-way operation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/analytics-dashboard/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Installing Hive Protocol Files Using Docker\nDESCRIPTION: Docker command to generate Thrift protocol files for Hive integration without requiring local Thrift installation. Maps the current directory to Docker container for file generation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-hive-driver/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"$PWD:/data\" thrift thrift -o /data --gen js:node /data/TCLIService.thrift\n```\n\n----------------------------------------\n\nTITLE: Feature update for connection validation\nDESCRIPTION: Added new features for connection validation and logging, referencing issue #6233\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- connection validation and logging ([#6233](https://github.com/cube-js/cube.js/issues/6233)) ([6dc48f8](https://github.com/cube-js/cube.js/commit/6dc48f8dc8045234dfa9fe8922534c5204e6e569))\n```\n\n----------------------------------------\n\nTITLE: Ejecting Configuration with Yarn\nDESCRIPTION: Ejects the application from Create React App configuration, exposing all configuration files and dependencies for custom configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/auth0/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Load httpfs for DuckDB in Cube.js\nDESCRIPTION: This commit ensures that the httpfs extension is loaded for DuckDB in Cube.js. Loading httpfs enables DuckDB to access data stored in HTTP-accessible locations, such as cloud storage services.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Docker Node.js Security Upgrade v18.19.1 to v18.20.1\nDESCRIPTION: Security upgrade of Node.js from version 18.19.1 to 18.20.1 in the Docker package\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **docker:** Security upgrade Node.js from 18.19.1 to 18.20.1 ([#8094](https://github.com/cube-js/cube/issues/8094)) ([51921cc](https://github.com/cube-js/cube/commit/51921ccfd60ff739a638b32205e2f4eb48110789))\n```\n\n----------------------------------------\n\nTITLE: Fix: Driver Imports Alignment\nDESCRIPTION: This snippet describes a fix for driver imports alignment. This fix ensures that the imports for different database drivers are consistent and correct, preventing potential issues with driver loading or functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Playground UX Improvements\nDESCRIPTION: This commit includes Playground UX improvements.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: none\nCODE:\n```\n- Playground UX improvements ([6760a1d](https://github.com/statsbotco/cubejs-client/commit/6760a1d))\n```\n\n----------------------------------------\n\nTITLE: Feature: Introduce `rollupLambda` rollup type\nDESCRIPTION: This feature introduces a new `rollupLambda` type. This expands the flexibility of rollups by allowing custom aggregation logic to be defined, providing more control over how data is summarized and presented.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Performance Optimization for Large Partition Range\nDESCRIPTION: Optimization of timestamp formatting and table names loading for improved performance when handling large partition ranges in the Cube.js Prestodb driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-prestodb-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n### Bug Fixes\n- Optimize timestamp formatting and table names loading for large partition range serving ([#3166](https://github.com/cube-js/cube.js/issues/3166)) ([e1f8dc5](https://github.com/cube-js/cube.js/commit/e1f8dc5aab469b060f0fe8c69467117171c070fd))\n```\n\n----------------------------------------\n\nTITLE: Fix readOnly external pre-aggregations\nDESCRIPTION: This bug fix addresses an issue where read-only external pre-aggregations were not functioning correctly with the Dremio driver. Pre-aggregations are precomputed results that are stored externally to improve query performance. The fix ensures that the driver can properly access and utilize these pre-aggregated results when querying Dremio, even when they are configured as read-only.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Configuring API Request Body in Bubble\nDESCRIPTION: Example JSON query format for making API requests from Bubble to Cube's REST API endpoint. The query parameter contains the actual query definition that will be executed by Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/bubble.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    // Your Cube query here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Build Fix\nDESCRIPTION: This commit fixes an issue with React Native builds by using cross-fetch instead of isomorphic-fetch.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: none\nCODE:\n```\n- Use cross-fetch instead of isomorphic-fetch to allow React-Native builds ([#92](https://github.com/statsbotco/cubejs-client/issues/92)) ([79150f4](https://github.com/statsbotco/cubejs-client/commit/79150f4))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: CubeStore Error Connection Update\nDESCRIPTION: Fix for error 'connect ECONNREFUSED 127.0.0.1:3030' in CubeStore driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n**@cubejs-backend/cubestore-driver:** Error: connect ECONNREFUSED 127.0.0.1:3030 ([74f4683](https://github.com/cube-js/cube.js/commit/74f468362b34f0decac67e48f52d3756ba4dc647))\n```\n\n----------------------------------------\n\nTITLE: Row and Array Comparison Operations in PostgreSQL\nDESCRIPTION: Functions for comparing values against sets including IN and NOT IN operators, supporting both pushdown and post-processing operations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nIN\nNOT IN\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Command to start the React development server on localhost:3000 with hot reload functionality\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multi-tenant-analytics/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Queue Responses\nDESCRIPTION: This TypeScript snippet defines several types related to a queue system, including responses for adding to the queue, retrieving items, acknowledging results, and result statuses. It establishes a clear data structure for handling responses in queue operations.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-query-orchestrator/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype integer = number;\n\ntype QueueId = number;\n\ntype AddToQueueResponse = {\n    id: QueueId,\n    added: boolean,\n    pending: string,\n}\ntype RetrieveResponse = {\n    payload: string,\n    extra:   string,\n    pending: integer,\n    active: string,\n    id: QueueId\n}\ntype AckResponse = {\n    success: boolean\n}\ntype ResultResponse = {\n    payload: string\n    'type': ResultStatus\n}\ntype ResultBlockingResponse = {\n    payload: string\n    'type': ResultStatus\n}\nenum ResultStatus {\n    Success = 'success'\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for useCubeQuery Initial Loading State\nDESCRIPTION: Git commit message documenting a bug fix related to the initial loading state in useCubeQuery React hook.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **cubejs-client-react:** useCubeQuery initial loading state ([#9117](https://github.com/cube-js/cube/issues/9117)) ([81f9b58](https://github.com/cube-js/cube/commit/81f9b58c88a966e459fc15105a9f2d191a18bf22))\n```\n\n----------------------------------------\n\nTITLE: Feature Addition: String Filter Support\nDESCRIPTION: New feature added in version 0.29.51 that adds support for 'startsWith' and 'endsWith' string filters in the query language.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-dx/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **query-language:** \"startsWith\", \"endsWith\" filters support ([#4128](https://github.com/cube-js/cube.js/issues/4128)) ([e8c72d6](https://github.com/cube-js/cube.js/commit/e8c72d630eecd930a8fd36fc52f9b594a45d59c0))\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Export with Log Levels\nDESCRIPTION: Example showing how to export all logs including Cube Store logs with specific severity levels to Azure Blob Storage.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring.mdx#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.azure]\ntype = \"azure_blob\"\ncontainer_name = \"my-logs\"\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=mylogstorage;AccountKey=storageaccountkeybase64encoded;EndpointSuffix=core.windows.net\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\n\n[sinks.azure.cubestore]\nlevels = [\n  \"trace\",\n  \"info\",\n  \"debug\",\n  \"error\"\n]\n```\n\n----------------------------------------\n\nTITLE: Fix Snowflake Driver Number Download\nDESCRIPTION: This commit fixes an issue where numbers with a scale of 0 were not being correctly downloaded as integers in pre-aggregations when using the Snowflake driver. It ensures proper data type handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Introduce CUBEJS_DEV_MODE\nDESCRIPTION: This snippet introduces the CUBEJS_DEV_MODE environment variable and improves the ENV variables experience. It was introduced in version 0.23.12 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Introduce CUBEJS_DEV_MODE & improve ENV variables experience ([#1356](https://github.com/cube-js/cube.js/issues/1356)) ([cc2aa92](https://github.com/cube-js/cube.js/commit/cc2aa92bbec87b21b147d5003fa546d4b1807185))\n```\n\n----------------------------------------\n\nTITLE: Installing Cube.js Vue Dependencies\nDESCRIPTION: Command to install all required dependencies for the Cube.js Vue client using Yarn package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Streaming Implementation Change\nDESCRIPTION: Replace stream buffering with async implementation in cubesql component.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **cubesql:** Replace stream buffering with async implementation ([#6127](https://github.com/cube-js/cube.js/issues/6127)) ([5186d30](https://github.com/cube-js/cube.js/commit/5186d308cedf103b08c8a8140de84984839c710a))\n```\n\n----------------------------------------\n\nTITLE: Adding KSQL support in Cube.js\nDESCRIPTION: This commit introduces KSQL support within the Cube.js framework.  It likely involves changes to the query processing and data handling logic to accommodate KSQL syntax and semantics. The commit hash b7128d4 is provided for further investigation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nb7128d4\n```\n\n----------------------------------------\n\nTITLE: K6 Single User Load Test Command\nDESCRIPTION: Command to execute K6 load test with 1 virtual user\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=1 k6-pg.js\n```\n\n----------------------------------------\n\nTITLE: Commit - Fix Rolling Window & HLL Implementation\nDESCRIPTION: Git commit fixing rolling window calculations and count_distinct_approx (HLL) functionality in Databricks JDBC driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n5969f0d788fffc1fe3492783eec4270325520d38\n```\n\n----------------------------------------\n\nTITLE: Feature: Connection Validation and Logging\nDESCRIPTION: This snippet mentions the implementation of connection validation and logging features within Cube.js. These enhancements provide better insights into database connections and help in debugging connection-related issues.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Starting Backend Application\nDESCRIPTION: Commands to install dependencies and start the backend server\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-query-builder/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Schema Compiler TypeScript Support\nDESCRIPTION: This snippet describes the initial support for TypeScript within the schema compiler. It was introduced in version 0.25.21 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **schema-compiler:** Initial support for TS ([5926067](https://github.com/cube-js/cube.js/commit/5926067bf5314c7cbddfe59f26dd0ae3b8b60293))\n```\n\n----------------------------------------\n\nTITLE: MySQL Named Timezones Feature Addition\nDESCRIPTION: Feature added in version 1.1.17 to support named timezones in MySQL Query class within the schema compiler\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **schema-compiler:** Add flag for using named timezones in MySQL Query class ([#9111](https://github.com/cube-js/cube/issues/9111)) ([5a540db](https://github.com/cube-js/cube/commit/5a540db9228dcbb88c434123f13291202f6da9be))\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Yarn\nDESCRIPTION: Launches the interactive test runner in watch mode for running application tests.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/auth0/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Add S3 config support for DuckDB in Cube.js\nDESCRIPTION: This feature adds support for configuring S3 access for DuckDB in Cube.js. It allows DuckDB to directly read data from and write data to S3 buckets, enabling seamless integration with cloud storage.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Running k6 Load Test with 50 Virtual Users\nDESCRIPTION: Command to execute k6 load test with 50 virtual users against a Cube.js instance. The test simulates 50 concurrent users making requests to the Cube.js API for 5 seconds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=50 k6-cube.js\n```\n\n----------------------------------------\n\nTITLE: Fix CubeSQL Streaming Capability\nDESCRIPTION: Bug fix to use writable streams with plain objects instead of JSON.stringify pipe for streaming capability in cubesql.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **cubesql:** Use writable streams with plain objects instead of JSON.stringify pipe for streaming capability ([#6306](https://github.com/cube-js/cube.js/issues/6306)) ([a9b19fa](https://github.com/cube-js/cube.js/commit/a9b19fa1a1a9c2f0710c8058ed797a4b7a48ed7e))\n```\n\n----------------------------------------\n\nTITLE: Sockets Preview Feature\nDESCRIPTION: Introduces a Sockets Preview feature with associated issue and commit.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n- Sockets Preview ([#231](https://github.com/statsbotco/cubejs-client/issues/231)) ([89fc762](https://github.com/statsbotco/cubejs-client/commit/89fc762)), closes [#221](https://github.com/statsbotco/cubejs-client/issues/221)\n```\n\n----------------------------------------\n\nTITLE: Version 0.35.81 Feature - KSQL and Rollup Pre-aggregations\nDESCRIPTION: Added support for KSQL and rollup pre-aggregations functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- ksql and rollup pre-aggregations ([#8619](https://github.com/cube-js/cube/issues/8619)) ([cdfbd1e](https://github.com/cube-js/cube/commit/cdfbd1e21ffcf111e40c525f8a391cc0dcee3c11))\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization for Snowflake Driver Batch Downloads\nDESCRIPTION: A code snippet showing a bug fix to reduce memory usage during batching downloads in the Snowflake driver, committed in 8748344.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n**@cubejs-backend/snowflake-driver:** Reduce memory usage during batching downloads ([8748344](https://github.com/cube-js/cube.js/commit/8748344dd2ea3245532c85cb7a9cea6300d72acd))\n```\n\n----------------------------------------\n\nTITLE: Pinging Connection Only When Open - Javascript\nDESCRIPTION: This bug fix ensures that the connection is only pinged when it is in the OPEN state. This avoids unnecessary ping attempts on closed or non-active connections which could lead to errors or performance issues.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **cubestore-driver:** Ping connection only when it's OPEN ([d80e157](https://github.com/cube-js/cube.js/commit/d80e157e5865318c14be534a7f8a1bc39b0ad851))\n```\n```\n\n----------------------------------------\n\nTITLE: Result of Dynamic Parameter Query in Cube.js\nDESCRIPTION: The JSON response from the dynamic parameter query showing the total number of women, the number of people in Seattle, and the calculated ratio between them.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/passing-dynamic-parameters-in-a-query.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"users.total_number_of_women\": \"259\",\n    \"users.number_of_people_of_any_gender_in_the_city\": \"99\",\n    \"users.ratio\": \"0.38223938223938223938\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: React Chart Render Optimization\nDESCRIPTION: This commit includes a bug fix to evade unnecessary heavy chart renders in React.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n- **react:** Evade unnecessary heavy chart renders ([bdcc569](https://github.com/statsbotco/cubejs-client/commit/bdcc569))\n```\n\n----------------------------------------\n\nTITLE: Installing @cubejs-client/vue Package\nDESCRIPTION: Command to install the @cubejs-client/vue package using npm. This is inferred from the package name mentioned throughout the changelog.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @cubejs-client/vue\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with Yarn in React App\nDESCRIPTION: Creates a production-ready build of the React application in the build folder. The output is optimized, minified, and includes hashed filenames for cache management.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/hacktoberfest/dashboard/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Checking Cube.js Deployment Health (Bash)\nDESCRIPTION: This snippet shows how to check if a Cube.js deployment is still healthy by sending a GET request to the /livez endpoint. It includes examples of successful and failed responses.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/rest-api/reference.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i http://localhost:4000/livez\n```\n\n----------------------------------------\n\nTITLE: Python Load Configuration Sequence Diagram\nDESCRIPTION: A sequence diagram showing the flow of loading Python configuration in CubeJS. It illustrates the interaction between Node.js, Native layer, Python Runtime, and Python during the config loading process.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/TECH.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Node\n    participant Native\n    participant PythonRuntime\n    participant Python\n\n    Node->>Native: pythonLoadConfig\n    activate Node\n    Native->>+Python: loading module\n    Python-->>+Node: CubePyConfig\n    deactivate Node\n```\n\n----------------------------------------\n\nTITLE: Introduce @cubejs-backend/native 🦀\nDESCRIPTION: This entry introduces the @cubejs-backend/native package, potentially written in Rust (indicated by the crab emoji). This could be a performance-critical component or a way to integrate native code for specific functionalities within Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n\"Introduce @cubejs-backend/native 🦀 ([#3531](https://github.com/cube-js/cube.js/issues/3531)) ([5fd511e](https://github.com/cube-js/cube.js/commit/5fd511e8804c26d06bdc166df05d630c650f23fc))\"\n```\n\n----------------------------------------\n\nTITLE: Using Cube Store as default EXTERNAL_DB, prefix variables\nDESCRIPTION: This feature update uses Cube Store as the default EXTERNAL_DB. It also includes prefixing variables, which likely involves modifying environment variables or configuration settings related to the external database connection to Cube Store. This may involve updates to the connection string or other settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: TS Support for Schema Compiler\nDESCRIPTION: This commit introduces initial TypeScript support for the schema compiler within the Cube.js project.  It enhances the developer experience by enabling type checking and improved code maintainability.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **schema-compiler:** Initial support for TS ([5926067](https://github.com/cube-js/cube.js/commit/5926067bf5314c7cbddfe59f26dd0ae3b8b60293))\n```\n\n----------------------------------------\n\nTITLE: Snowflake Driver Bug Fixes\nDESCRIPTION: Various bug fixes including handling empty tables during UNLOAD, pre-aggregation visibility issues, and type conversion improvements.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- Handle UNLOAD for empty tables\n- Fix pre-aggregations visibility\n- Add support for number/timestamp_ntz -> generic type conversion\n```\n\n----------------------------------------\n\nTITLE: Creating Orders Table\nDESCRIPTION: Creates the orders table structure with columns for id, user_id, status, completed_at, and created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cube_demo.ecom.orders\n( id INTEGER,\n  user_id INTEGER,\n  status VARCHAR,\n  completed_at TIMESTAMP,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing Import Stream Stuck Issue (Original Fix) - Javascript\nDESCRIPTION: This commit addresses an issue where the import stream would get stuck if the data stream was excessively large. The specific commit aims to prevent this stream blockage when importing significant amounts of data.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **@cubejs-backend/cubestore-driver:** Import stream stuck if it's big ([2a41020](https://github.com/cube-js/cube.js/commit/2a41020027987a451818bbd8b5b750aec0dc6ace))\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Line Items Data\nDESCRIPTION: Copies data from S3 CSV file into the line_items table using Snowflake's COPY command.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCOPY INTO cube_demo.ecom.line_items (id, order_id, product_id, price, created_at)\nFROM 's3://cube-tutorial/line_items.csv'\nFILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = ',' SKIP_HEADER = 1);\n```\n\n----------------------------------------\n\nTITLE: SQL Case With Null Values\nDESCRIPTION: Enhanced CASE statement functionality to properly handle NULL values in expressions.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCASE WHEN value IS NULL THEN alternative ELSE value END\n```\n\n----------------------------------------\n\nTITLE: Running Cube.js Vue Tests\nDESCRIPTION: Command to execute the test suite\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Error: Refresh Scheduler Interval\nDESCRIPTION: Error occurs when the refresh worker is overloaded due to many tenants or pre-aggregations to refresh.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"Refresh Scheduler Interval Error\",\\n  \"error\": \"Previous interval #2 was not finished with 60000 interval\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node.js Version Check\nDESCRIPTION: Adding version checking functionality for Node.js in both development server and production server environments.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nCheck Node.js version in dev-server/server\n```\n\n----------------------------------------\n\nTITLE: Implementing State Persistence for Scheduled Refreshes\nDESCRIPTION: Feature that allows saving the state of scheduled refresh operations for warmup functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nAllow saving state of a scheduled refresh for warmup operations\n```\n\n----------------------------------------\n\nTITLE: JDBC Driver Connection Pool Error Logging\nDESCRIPTION: Bug fix to enable logging of errors from the connection pool factory\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **jdbc-driver:** Log errors from connection pool factory ([#8903](https://github.com/cube-js/cube/issues/8903)) ([cfdc2a2](https://github.com/cube-js/cube/commit/cfdc2a28cd9706dc91557f499e3412bab9ff9a07))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Druid Case Sensitivity\nDESCRIPTION: Fix implemented in version 1.1.16 to address case sensitivity issues in Druid's LIKE operator flow\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **druid-driver:** Fix case sensitivity in like flow ([#8658](https://github.com/cube-js/cube/issues/8658)) ([6d75c60](https://github.com/cube-js/cube/commit/6d75c609cd9336b711e2539c255dba706442981c))\n```\n\n----------------------------------------\n\nTITLE: Fixing Unexpected Token Error in CubeStore Driver\nDESCRIPTION: Fixes an issue where an unexpected token 'u' was encountered in JSON at position 0 in the CubeStore driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **cubestore-driver:** Unexpected token u in JSON at position 0 ([#6037](https://github.com/cube-js/cube.js/issues/6037)) ([1d00521](https://github.com/cube-js/cube.js/commit/1d005214c2b18f092ede5c9187798af151793cf8))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: KSQL Temporary Table Handling\nDESCRIPTION: Fixed an issue where temporary tables were being dropped prematurely after successful creation in KSQL\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Temp tables dropped for ksql after successfully created\n```\n\n----------------------------------------\n\nTITLE: Changelog Version History in Markdown\nDESCRIPTION: Release history showing version bumps for the @cubejs-backend/maven package. Most entries are version bump only changes with a few breaking changes noted in version 0.29.0.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-maven/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.30.46](https://github.com/cube-js/cube.js/compare/v0.30.45...v0.30.46) (2022-08-10)\n\n**Note:** Version bump only for package @cubejs-backend/maven\n```\n\n----------------------------------------\n\nTITLE: PowerBI Query Support in CubeSQL\nDESCRIPTION: This snippet adds basic query support for PowerBI within CubeSQL. It expands the compatibility of Cube.js with PowerBI, allowing users to leverage Cube.js's data modeling capabilities in PowerBI reports and dashboards. This feature enables PowerBI to execute queries against Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: PowerBI basic queries support ([455ae07](https://github.com/cube-js/cube.js/commit/455ae076880f305ed73d1d217a87f908837070f5))\"\n```\n\n----------------------------------------\n\nTITLE: Vue Query Load Event Handler\nDESCRIPTION: Implementation of query load event handling functionality in Vue components.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n6045e8f060b3702512f138b5c571db5deb6448f2\n```\n\n----------------------------------------\n\nTITLE: Adding Oracle Driver to Cube.js\nDESCRIPTION: This snippet announces the addition of the Oracle database driver to Cube.js in version 0.10.14. It represents a significant feature addition to the project's database support.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-oracle-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- Oracle driver ([#160](https://github.com/statsbotco/cubejs-client/issues/160)) ([854ebff](https://github.com/statsbotco/cubejs-client/commit/854ebff))\n```\n\n----------------------------------------\n\nTITLE: Fix Default Concurrency Values for Drivers\nDESCRIPTION: This commit fixes the default concurrency values used by different database drivers. It ensures that the drivers have appropriate default concurrency settings.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Adding Catalog Support for Databricks Driver (JavaScript)\nDESCRIPTION: Introduces catalog support for the Databricks JDBC driver, allowing users to interact with different catalogs within a Databricks environment. This enhancement enables querying and managing data across multiple catalogs, providing greater flexibility and organization.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"Features\\n\\n- catalog support for the Databricks driver ([#5666](https://github.com/cube-js/cube.js/issues/5666)) ([de5ba9a](https://github.com/cube-js/cube.js/commit/de5ba9a247543b432ea82b4371ddb052f1c91227))\"\n```\n\n----------------------------------------\n\nTITLE: Example Query Result in JSON Format\nDESCRIPTION: The JSON output from querying the users cube, displaying the calculated average age, median age, and 95th percentile age values from the dataset.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/percentiles.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"users.avg_age\": \"52.3100000000000000\",\n    \"users.median_age\": 53,\n    \"users.p95_age\": 82\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Updating BaseDriver dependencies\nDESCRIPTION: This commit updates the dependencies of the BaseDriver. The update addresses potential compatibility issues and ensures the driver functions correctly with the latest versions of its dependencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n### Bug Fixes\n\n- update BaseDriver dependencies ([a7aef2b](https://github.com/statsbotco/cubejs-client/commit/a7aef2b))\n```\n\n----------------------------------------\n\nTITLE: Vue Client Bug Fix - Query Builder Mount\nDESCRIPTION: Fix for catching dryRun errors when mounting the query builder component in Vue\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-client/vue:** catch `dryRun` errors on `query-builder` mount ([#3450](https://github.com/cube-js/cube.js/issues/3450)) ([189491c](https://github.com/cube-js/cube.js/commit/189491c87ac2d3f5e1ddac516d7ab236d6a7c09b))\n```\n\n----------------------------------------\n\nTITLE: Array UDF support in CubeSQL\nDESCRIPTION: This feature introduces support for the `array_upper` and `array_lower` User-Defined Functions (UDFs) within CubeSQL. These UDFs allow querying and manipulating arrays in the underlying data warehouse, providing more flexibility in data analysis and transformation. This addition enhances Cube.js's ability to handle complex data structures.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Support array_upper, array_lower UDFs ([5a3b6bb](https://github.com/cube-js/cube.js/commit/5a3b6bb31c5af920c706b56a8e3c5046f272f8ca))\"\n```\n\n----------------------------------------\n\nTITLE: Fix: Merging Config with Custom Query Options\nDESCRIPTION: This commit fixes an issue in the ClickHouse driver where custom query options, specifically the database, were not being correctly passed along when merging the configuration.  The fix ensures that the database configuration is properly included in the final query options.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n### Bug Fixes\n\n- **clickhouse-driver:** merging config with custom queryOptions which were not passing along the database ([#100](https://github.com/statsbotco/cubejs-client/issues/100)) ([dedc279](https://github.com/statsbotco/cubejs-client/commit/dedc279))\n```\n\n----------------------------------------\n\nTITLE: Class Diagram for Connections Management\nDESCRIPTION: This Mermaid class diagram illustrates the architecture for managing server connections within the Cube.js application. It defines relation hierarchies like ServerManager, SessionManager, and various connection types such as MysqlConnection and PostgresConnection, showcasing the structure and responsibilities of different components in session management and state handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    ServerConfiguration <|-- ServerManager\n    Transport <|-- ServerManager\n    Auth <|-- ServerManager\n    class ServerManager {\n    }\n\n    ServerManager <|-- SessionManager\n    class SessionManager{\n        +HashMap<u32, Session> sessions\n        +create_session() Session\n        +drop_session() void\n        +process_list() Vec<SessionProcessList>\n    }\n\n    Session <|-- MysqlConnection\n    Session <|-- PostgresConnection\n\n    class Session {\n        +SessionState state\n    }\n\n    class SessionProperties{\n        +String readonly user\n        +String readonly database\n    }\n\n    SessionProperties <|-- SessionState\n    AuthContext <|-- SessionState\n    class SessionState{\n        +U32 connection_id\n        +String host\n    }\n\n    SessionState <|-- Session\n    SessionProperties <|-- Session\n    SessionManager <|-- Session\n    class Session{\n    }\n```\n\n----------------------------------------\n\nTITLE: Transform Numeric Value BigQuery Driver\nDESCRIPTION: This code snippet addresses a bug in the bigquery-driver. It transforms a numeric value, represented as a big.js object, into a string. This transformation ensures compatibility and correct data handling within the Cube.js environment.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-sqlite-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n- **bigquery-driver:** Transform numeric value (big.js) to string ([#8290](https://github.com/cube-js/cube/issues/8290)) ([65c3f55](https://github.com/cube-js/cube/commit/65c3f5541fa4f1ced5813ae642d53c4d9bb80af5))\n```\n\n----------------------------------------\n\nTITLE: Allow casting boolean/number/measure\nDESCRIPTION: This bug fix resolves an issue where casting boolean, number, or measure data types was not properly handled by the Dremio driver.  The fix ensures that the driver can correctly convert these data types when querying or processing data from Dremio, preventing errors or unexpected behavior related to type conversion.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: New feature: enableNullHandling query option\nDESCRIPTION: Code commit adding environment variable support for enableNullHandling query option in the Pinot driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-pinot-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **pinot-driver:** Add enableNullHandling to query options using env var ([#9310](https://github.com/cube-js/cube/issues/9310)) ([df763cc](https://github.com/cube-js/cube/commit/df763cc9a375eb656d6ac4dc10adbd9a68082a0e))\n```\n\n----------------------------------------\n\nTITLE: Snowflake Driver NULL Value Support in v0.33.27\nDESCRIPTION: Bug fix for Snowflake driver to support unescaped '\\N' as NULL value, enhancing compatibility with Snowflake's NULL representation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Support unescaped `\\\\N` as NULL value for Snowflake driver ([#6735](https://github.com/cube-js/cube.js/issues/6735)) ([1f92ba6](https://github.com/cube-js/cube.js/commit/1f92ba6f5407f82703c8920b27a3a3e5a16fea41)), closes [#6693](https://github.com/cube-js/cube.js/issues/6693)\n```\n\n----------------------------------------\n\nTITLE: Version Update with Auth Changes\nDESCRIPTION: Release notes for version 0.35.33 highlighting the switch to a new authentication method for the Firebolt driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-firebolt-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.35.33](https://github.com/cube-js/cube/compare/v0.35.32...v0.35.33) (2024-05-15)\n\n### Features\n\n- **firebolt:** Switch to the new auth method ([#8182](https://github.com/cube-js/cube/issues/8182)) ([e559114](https://github.com/cube-js/cube/commit/e55911478d0b3ba916d44f1fa4c04697d7ca7dfb))\n```\n\n----------------------------------------\n\nTITLE: Support countDistinctApprox in Cube.js DuckDB driver\nDESCRIPTION: This feature introduces support for the `countDistinctApprox` function in the Cube.js DuckDB driver. This function provides an approximate count of distinct values, which can be more efficient than an exact count for large datasets.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Loading Users Data\nDESCRIPTION: Copies data from S3 CSV file into the users table using Snowflake's COPY command.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCOPY INTO cube_demo.ecom.users (id, city, age, gender, state, first_name, last_name, created_at)\nFROM 's3://cube-tutorial/users.csv'\nFILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = ',' SKIP_HEADER = 1);\n```\n\n----------------------------------------\n\nTITLE: Tableau Cubes Without Count Measure Support\nDESCRIPTION: This feature enables support for Tableau cubes that do not have a count measure defined in CubeSQL. This allows users to leverage Cube.js with Tableau even when a count measure is not present. This increases the flexibility of using Cube.js with Tableau.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Tableau cubes without count measure support ([931e2f5](https://github.com/cube-js/cube.js/commit/931e2f5fb5fa29b19347b7858a8b4f892162f169))\"\n```\n\n----------------------------------------\n\nTITLE: Cube.js Version Release Tags\nDESCRIPTION: Markdown formatting for version release notes, including Git commit links and issue references\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-shared/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.27.0](https://github.com/cube-js/cube.js/compare/v0.26.104...v0.27.0) (2021-04-26)\n\n### Features\n\n- Add CUBEJS\\_ prefix for REDIS_URL/REDIS_TLS ([#2312](https://github.com/cube-js/cube.js/issues/2312)) ([b5e7099](https://github.com/cube-js/cube.js/commit/b5e7099da90d0f8c6def0af648b45b18c1e56569))\n```\n\n----------------------------------------\n\nTITLE: Angular Observable Support Bug Fix Code\nDESCRIPTION: Bug fix to add support for Observables in the runtime token configuration for the Angular client\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n**client-core:** ResultSet series returns a series with no data ([715e170](https://github.com/statsbotco/cubejs-client/commit/715e170)), closes [#38](https://github.com/statsbotco/cubejs-client/issues/38)\n```\n\n----------------------------------------\n\nTITLE: Multiple Data Source Feature\nDESCRIPTION: Addition of multiple data source support as a new feature.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- multiple data source ([#5326](https://github.com/cube-js/cube.js/issues/5326))\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube Store in .env File\nDESCRIPTION: This snippet configures the Cube.js application to connect to Cube Store by setting the external database type and host in the .env file.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_EXT_DB_TYPE=cubestore\nCUBEJS_EXT_DB_HOST=127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: MySQL Driver Commit Reference - BigQuery Driver\nDESCRIPTION: Git commit reference for adding BigQuery driver support\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n654edac\n```\n\n----------------------------------------\n\nTITLE: Creating Line Items Table\nDESCRIPTION: Creates the line_items table structure with columns for id, order_id, product_id, price, and created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cube_demo.ecom.line_items\n( id INTEGER,\n  order_id INTEGER,\n  product_id INTEGER,\n  price INTEGER,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: External Rollup Type Conversion\nDESCRIPTION: Fixed type conversion for external rollups by casting double to decimal for Postgres database.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- External rollup type conversions: cast double to decimal for postgres ([#421](https://github.com/cube-js/cube.js/issues/421)) Thanks to [@sandeepravi](https://github.com/sandeepravi)! ([a19410a](https://github.com/cube-js/cube.js/commit/a19410a))\n```\n\n----------------------------------------\n\nTITLE: Accessing Dbt Model Primary Key in Python\nDESCRIPTION: Demonstrates accessing the primary key column of a dbt model using the Model.primary_key method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/cube_dbt.mdx#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom cube_dbt import Dbt\n\nmanifest_url = 'https://bucket.s3.amazonaws.com/manifest.json'\n\ndbt = Dbt.from_url(manifest_url)\nmodel = dbt.model('orders')\n\nprint(model.primary_key)\n```\n\n----------------------------------------\n\nTITLE: MySQL Driver Commit Reference - External Pre-aggregations\nDESCRIPTION: Git commit reference showing improved performance for external pre-aggregations upload in MySQL driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nb6e3ee6\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry in Markdown\nDESCRIPTION: Changelog entry documenting a bug fix for handling null pivot configs from heuristics\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-client/vue:** Pivot config can use null from heuristics ([#7167](https://github.com/cube-js/cube.js/issues/7167)) ([e7043bb](https://github.com/cube-js/cube.js/commit/e7043bb41099d2c4477430b96a20c562e1908266))\n```\n\n----------------------------------------\n\nTITLE: Initial Pinot driver introduction\nDESCRIPTION: Code commit introducing the initial Apache Pinot driver implementation\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-pinot-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **drivers:** introduce Apache Pinot ([#8689](https://github.com/cube-js/cube/issues/8689)) ([0659c84](https://github.com/cube-js/cube/commit/0659c84dc889041a93ac4e788be000d047b8ef11))\n```\n\n----------------------------------------\n\nTITLE: Introducing WebSocket Close Method\nDESCRIPTION: Added close() method to the WebSocket transport implementation to allow graceful connection termination.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ws-transport/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclose()\n```\n\n----------------------------------------\n\nTITLE: Add TypeScript Support to JDBC Driver\nDESCRIPTION: This feature introduces initial TypeScript support for the JDBC driver. This enables developers to write JDBC driver code using TypeScript, improving code maintainability and reducing errors.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Version 0.34.44 Feature - Queue Processing Optimization\nDESCRIPTION: Added queue optimization to reduce traffic for processing in Cube Store.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **query-orchestrator:** Queue - reduce traffic for processing (Cube Store only) ([#7644](https://github.com/cube-js/cube/issues/7644)) ([7db90fb](https://github.com/cube-js/cube/commit/7db90fb7532d53d7ce46ba342e89250110f32c6b))\n```\n\n----------------------------------------\n\nTITLE: API Gateway Async Transformations Feature\nDESCRIPTION: Implements async native query results transformations in the API gateway.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **api-gateway:** Async native query results transformations ([#8961](https://github.com/cube-js/cube/issues/8961)) ([3822107](https://github.com/cube-js/cube/commit/382210716fc3c9ed459c5b45a8a52e766ff7d7cf))\n```\n\n----------------------------------------\n\nTITLE: Integrating QueryBuilder Component in React\nDESCRIPTION: Demonstrates how to import and use the QueryBuilder component from @cubejs-client/playground. Shows configuration with API URL, token, and initial query state for displaying data visualization.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { QueryBuilder } from '@cubejs-client/playground';\n// import the antd styles from the `@cubejs-client/playground` package as it overrides some variables\nimport '@cubejs-client/playground/lib/antd.min.css';\n// alternatively you can use the default antd styles\n// import 'antd/dist/antd.min.css';\n\nconst apiUrl = 'http://localhost:4000/cubejs-api/v1';\nconst token = 'your.token';\n\nexport default function App() {\n  const query = {\n    measures: ['Orders.count'],\n    dimensions:  ['Orders.status']\n  };\n\n  return (\n    <QueryBuilder\n      apiUrl={apiUrl}\n      token={token}\n      initialVizState={{\n        query\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fix typo in DuckDB driver name\nDESCRIPTION: This commit fixes a typographical error in the name of the DuckDB driver. Correcting the driver name ensures consistency and avoids potential issues with driver identification.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Git Commit Reference - Bug Fix for Time Dimensions\nDESCRIPTION: Git commit hash for a bug fix related to filtering time dimensions in @cubejs-client/core\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n0300093e0af29b87e7a9018dc8159c1299e3cd85\n```\n\n----------------------------------------\n\nTITLE: Using Cube Store as Default EXTERNAL_DB - Javascript\nDESCRIPTION: This feature makes Cube Store the default EXTERNAL_DB and prefixes related variables. It simplifies configuration and usage by pre-setting Cube Store as the external database solution.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- Use Cube Store as default EXTERNAL_DB, prefix variables ([30d52c4](https://github.com/cube-js/cube.js/commit/30d52c4f8f1ae1d6619ec4976d9db1eeb1e44140))\n```\n```\n\n----------------------------------------\n\nTITLE: Version control changes for Elasticsearch driver\nDESCRIPTION: Git commit hash and version comparison links showing changes between package versions\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.32.12](https://github.com/cube-js/cube/compare/v0.32.11...v0.32.12) (2023-03-22)\n\n**Note:** Version bump only for package @cubejs-backend/elasticsearch-driver\n```\n\n----------------------------------------\n\nTITLE: Adding BigQuery CSV Pre-aggregation Download Support\nDESCRIPTION: This commit adds support for downloading BigQuery CSV pre-aggregations. It's part of version 0.25.26 of the BigQuery driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- BigQuery CSV pre-aggregation download support ([#1867](https://github.com/cube-js/cube.js/issues/1867)) ([5a2ea3f](https://github.com/cube-js/cube.js/commit/5a2ea3f27058a01bf08f697495c8ccce5abf9fa2))\n```\n\n----------------------------------------\n\nTITLE: Cube Integration Load Test Results\nDESCRIPTION: Performance metrics for Cube integration showing improved p90 and p95 latencies with 10 virtual users\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=117.58ms\np(95)=170.52ms\n```\n\n----------------------------------------\n\nTITLE: Integrate SQL Connector\nDESCRIPTION: This entry describes the integration of the SQL Connector into Cube.js. This likely involves incorporating functionality to connect to and interact with SQL databases directly within the Cube.js framework, enhancing its data source capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n\"Integrate SQL Connector to Cube.js ([#3544](https://github.com/cube-js/cube.js/issues/3544)) ([f90de4c](https://github.com/cube-js/cube.js/commit/f90de4c9283178962f501826a8a64abb674c37d1))\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading @google-cloud/bigquery Package\nDESCRIPTION: This change upgrades the @google-cloud/bigquery package to version 5.x. It's included in version 0.26.30 of the BigQuery driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **bigquery-driver:** Upgrade @google-cloud/bigquery 5.x ([dbbd29c](https://github.com/cube-js/cube.js/commit/dbbd29cb41fcb093b37526e9c1d00b9170f38f41))\n```\n\n----------------------------------------\n\nTITLE: Running Cube.js Application in Rust\nDESCRIPTION: This bash script sets environment variables necessary for running the Cube.js API along with the cargo run command. It requires `rustup` and `cargo-insta` to be installed. The key parameters include CUBESQL_CUBE_URL for the Cube.js API URL, CUBESQL_CUBE_TOKEN for authorization, CUBESQL_LOG_LEVEL to set the log level, and CUBESQL_BIND_ADDR to specify the bind address for the server.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd rust/cubesql\nCUBESQL_CUBE_URL=$URL/cubejs-api \\\nCUBESQL_CUBE_TOKEN=$TOKEN \\\nCUBESQL_LOG_LEVEL=debug \\\nCUBESQL_BIND_ADDR=0.0.0.0:4444 \\\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Playground Schema Generation UI\nDESCRIPTION: This commit introduces a Schema generation UI in Playground.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: none\nCODE:\n```\n- Introduce Schema generation UI in Playground ([349c7d0](https://github.com/statsbotco/cubejs-client/commit/349c7d0))\n```\n\n----------------------------------------\n\nTITLE: Feature: KSQL Driver Stream Offset and Partition Support\nDESCRIPTION: Added support for earliest offset, stream replay, and per-partition streaming functionality in the KSQL driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- **ksql-driver:** Support offset earliest, replays and per partition streaming\n```\n\n----------------------------------------\n\nTITLE: Python Function Call Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating how Python functions are called from Node.js in CubeJS. It shows the flow from Node.js through the Native layer to Python, including function scheduling and deferring the response.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/TECH.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Node\n    participant Native\n    participant PythonRuntime\n    participant Python\n\n    Node->>Native: config.contextToAppId\n    activate Node\n    Native->>+Python: scheduling call for context_to_app_id (Py<PyFunction.)\n    Python-->>+Node: defer\n    deactivate Node\n```\n\n----------------------------------------\n\nTITLE: Rewrite Engine First Steps\nDESCRIPTION: This feature marks the initial steps in developing a new rewrite engine for CubeSQL. The rewrite engine aims to optimize and improve query performance. This is a significant architectural change with the potential for substantial performance gains.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Rewrite engine first steps ([#4132](https://github.com/cube-js/cube.js/issues/4132)) ([84c51ed](https://github.com/cube-js/cube.js/commit/84c51eda4bf989a46f95fe683ea2732814dde28f))\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format used for documenting version changes in the package changelog, showing version number, comparison link, and update notes.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dbt-schema-extension/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [1.0.0](https://github.com/cube-js/cube/compare/v0.36.11...v1.0.0) (2024-10-15)\n\n**Note:** Version bump only for package @cubejs-backend/dbt-schema-extension\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chart Renderers Bash Script\nDESCRIPTION: Bash script to copy chart renderer files from node_modules to the public directory of the application. This setup is required for the Playground visualization functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nrm -rf ./public/chart-renderers 2> /dev/null\ncp -R ./node_modules/@cubejs-client/playground/public/chart-renderers ./public\n```\n\n----------------------------------------\n\nTITLE: Centralize Concurrency Setting\nDESCRIPTION: This commit centralizes the concurrency settings for the Cube.js backend. This likely involves introducing a central configuration option or service to manage concurrency across different components.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Changelog Header Format in Markdown\nDESCRIPTION: Standard header format for the changelog showing project information and commit guidelines link\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-materialize-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n```\n\n----------------------------------------\n\nTITLE: Setting SQL User Query\nDESCRIPTION: SQL query to change the current user through SET statement in CubeSQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-api-gateway/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET user = ?\n```\n\n----------------------------------------\n\nTITLE: Validating Cube Project Models\nDESCRIPTION: The 'validate' command checks models in a Cube project for validation errors. It is run without any parameters from the Cube app directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli/reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli validate\n```\n\n----------------------------------------\n\nTITLE: Cube.js Bug Fix Note Format\nDESCRIPTION: Markdown formatting for documenting bug fixes in changelog entries, including issue links and commit references\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-shared/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Deprecate CUBEJS*REDIS_PASSWORD, similar to all REDIS* variables ([#2604](https://github.com/cube-js/cube.js/issues/2604)) ([ee54aeb](https://github.com/cube-js/cube.js/commit/ee54aebae9db828263feef0f4f5285754abcc5c2)), closes [#ch484](https://github.com/cube-js/cube.js/issues/ch484)\n```\n\n----------------------------------------\n\nTITLE: Revert Breaking Changes 0.29\nDESCRIPTION: This commit reverts a set of breaking changes introduced in version 0.29.  The breaking changes included dropping support for older Node.js versions and other potentially disruptive updates.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Fixing BigQuery CSV Streaming in Node.js\nDESCRIPTION: Encodes buffer as base64 for CSV streaming in the BigQuery driver to fix an issue.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nEncode buffer as base64 for CSV (streaming)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Feature\nDESCRIPTION: Git commit hash and URL reference for implementing queue race condition protection in CubeStore driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-base-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[60294de](https://github.com/cube-js/cube/commit/60294defff88ee96d95d1d34b1fe17fccdb17b71)\n```\n\n----------------------------------------\n\nTITLE: Installing Dagster Cube Integration Package\nDESCRIPTION: Command to install the dagster_cube package using pip\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/dagster.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install dagster_cube\n```\n\n----------------------------------------\n\nTITLE: Using getWorkGroup for Athena Test Connection\nDESCRIPTION: Modifies the test connection process for Athena to use `getWorkGroup` instead of `SELECT 1`. This change likely improves the accuracy and efficiency of the connection test.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: TEXT\nCODE:\n```\n**athena-driver:** Use getWorkGroup instead of SELECT 1 for testConnection ([a99a6e4](https://github.com/cube-js/cube.js/commit/a99a6e4bb5b5dad5558a74683f8618696c1786c0))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dashboards Feature\nDESCRIPTION: This commit introduces the Dynamic dashboards feature.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n- Dynamic dashboards ([#218](https://github.com/statsbotco/cubejs-client/issues/218)) ([2c6cdc9](https://github.com/statsbotco/cubejs-client/commit/2c6cdc9))\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Dimension\nDESCRIPTION: Demonstrates creating a geo dimension with latitude and longitude fields for map visualization.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/types-and-formats.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    location: {\n      type: `geo`,\n      latitude: {\n        sql: `${CUBE}.latitude`,\n      },\n      longitude: {\n        sql: `${CUBE}.longitude`,\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: location\n        type: geo\n        latitude:\n          sql: \"{CUBE}.latitude\"\n        longitude:\n          sql: \"{CUBE}.longitude\"\n```\n\n----------------------------------------\n\nTITLE: LDAP User Attributes Security Context Example\nDESCRIPTION: Example JSON showing how LDAP mapped user attributes appear in the security context. The context includes mapped attributes like fullName, department, and location in the cubeCloud.userAttributes dictionary.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/sso.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cubeCloud\": {\n    \"userAttributes\": {\n      \"fullName\": \"John Doe\",\n      \"department\": \"Finance\",\n      \"location\": \"San Mateo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bump DuckDB version in Cube.js\nDESCRIPTION: This feature bumps the DuckDB version used by the Cube.js driver. Upgrading the DuckDB version allows Cube.js to benefit from the latest performance improvements, bug fixes, and new features in DuckDB.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Git Commit Reference - QueryBuilder Filter Fix\nDESCRIPTION: Git commit hash for a fix addressing QueryBuilder filter deduplication issue\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n69d5baf761bf6a55ec487cb179c61878bbfa6089\n```\n\n----------------------------------------\n\nTITLE: Mapping UUID to VARCHAR(64) in CubeStore Driver\nDESCRIPTION: This commit addresses a data type mapping issue in the CubeStore driver. It maps UUID data types to VARCHAR(64) in the underlying data store. Further details can be found in commit f87e60e.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nf87e60e\n```\n\n----------------------------------------\n\nTITLE: Fixing Column Order in Snowflake Pre-aggregations\nDESCRIPTION: A code snippet showing a bug fix for an unexpected random order of columns in pre-aggregations when using the Snowflake driver, implemented in commit a99977a.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n**snowflake-driver:** Unexpected random order for columns in pre-aggregations ([a99977a](https://github.com/cube-js/cube.js/commit/a99977a11a2ae3029d3c2436b7d1500f7186a687))\n```\n\n----------------------------------------\n\nTITLE: Improving BigQuery Table Introspection\nDESCRIPTION: Updates the BigQuery driver to use INFORMATION_SCHEMA.COLUMNS for database introspection, likely improving performance or capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nUse INFORMATION_SCHEMA.COLUMNS for introspection\n```\n\n----------------------------------------\n\nTITLE: MySQL Driver Commit Reference - BaseDriver Dependencies\nDESCRIPTION: Git commit reference for updating BaseDriver dependencies in MySQL driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\na7aef2b\n```\n\n----------------------------------------\n\nTITLE: Update Docker Node.js Version\nDESCRIPTION: This snippet updates the Node.js version used within the Cube.js Docker image to version 12.22.6. This ensures the Docker environment uses a specific and potentially more secure or performant version of Node.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-docker/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n\"docker: Use Node 12.22.6 ([9de777c](https://github.com/cube-js/cube.js/commit/9de777c893d0a0bf9c3b01a4c081eab24b98c417))\"\n```\n\n----------------------------------------\n\nTITLE: Projection Aggregate Split Support for Tableau Casts\nDESCRIPTION: This feature splits projection aggregates to better support Tableau casts. This is specifically useful in scenarios involving Tableau's data type casting. This ensures better compatibility and accurate data representation when used in conjunction with Tableau.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Projection aggregate split to support Tableau casts ([#4435](https://github.com/cube-js/cube.js/issues/4435)) ([1550774](https://github.com/cube-js/cube.js/commit/1550774acf2dd208d7222bb7b4742dcc64ca4b89))\"\n```\n\n----------------------------------------\n\nTITLE: Package Versioning - Cloud Backend\nDESCRIPTION: Markdown changelog entries documenting version updates, bug fixes, and features added to the @cubejs-backend/cloud package. Key changes include live preview functionality, persisting live tokens, and making live preview optional in the playground.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-cloud/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.27.2](https://github.com/cube-js/cube.js/compare/v0.27.1...v0.27.2) (2021-04-28)\n\n**Note:** Version bump only for package @cubejs-backend/cloud\n\n## [0.27.1](https://github.com/cube-js/cube.js/compare/v0.27.0...v0.27.1) (2021-04-27)\n\n**Note:** Version bump only for package @cubejs-backend/cloud\n\n# [0.27.0](https://github.com/cube-js/cube.js/compare/v0.26.104...v0.27.0) (2021-04-26)\n\n**Note:** Version bump only for package @cubejs-backend/cloud\n```\n\n----------------------------------------\n\nTITLE: Key Response Time Metrics for 100 VUs\nDESCRIPTION: Condensed response time metrics for the 90th and 95th percentiles from the 100 virtual users test, showing that Cube.js still responds in under a second even at this higher concurrency level.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=624.04ms\np(95)=708.01ms\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Support in Prestodb Driver\nDESCRIPTION: Implementation of SSL support for the Prestodb driver in the Cube.js backend. Enables secure connections to Prestodb databases with SSL configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-prestodb-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n### Features\n- **prestodb-driver:** Support SSL ([b243e9f](https://github.com/cube-js/cube.js/commit/b243e9f3406a04e956a32bcd55a437749c69f632))\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Configuration\nDESCRIPTION: Defines exact versions of Python packages needed for the project, including web framework (Streamlit), data processing (Pandas), AI/ML tools (LangChain, OpenAI), and database connectivity (psycopg2).\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/langchain/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit==1.34.0\npandas==2.2.2\npython-dotenv==1.0.1\nlangchain==0.1.20\npathlib==1.0.1\nPyJWT==2.8.0\nopenai==1.30.1\ntiktoken==0.7.0\nfaiss-cpu==1.8.0\npsycopg2-binary==2.9.9\n```\n\n----------------------------------------\n\nTITLE: Client Core Code Change - Drill Down Date Range Bounds\nDESCRIPTION: Bug fix implementation to check parent date range bounds during drill down operations in the client core library.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-core/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndrill down check the parent date range bounds (#6639)\n```\n\n----------------------------------------\n\nTITLE: Adding MS SQL database driver\nDESCRIPTION: This commit introduces the initial implementation of the MS SQL database driver for Cube.js. It enables Cube.js to connect to and query MS SQL databases, expanding its data source capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Playground Filters Implementation\nDESCRIPTION: This commit implements Playground filters.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: none\nCODE:\n```\n- Playground filters implementation ([de4315d](https://github.com/statsbotco/cubejs-client/commit/de4315d))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Correct calculation of total in api-gateway\nDESCRIPTION: This code snippet corrects the calculation of the total when there is a query property offset in the API gateway. This ensures that the correct total number of results is returned when pagination or offset parameters are used.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Results for 50 Virtual Users Test\nDESCRIPTION: Output from running the k6 load test with 50 virtual users against Cube.js. Shows metrics including response times, request rates, and concurrent users with p90 response time of 498.55ms and p95 of 607.99ms.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nadnanrahic@instance-1:~/benchmarks$ k6 run -e vus=50 k6-cube.js\n\n          /\\      |‾‾| /‾‾/   /‾‾/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   ‾‾\\\n   /          \\   |  |\\  \\ |  (‾)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6-cube.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 50 max VUs, 35s max duration (incl. graceful stop):\n           * default: 50 looping VUs for 5s (gracefulStop: 30s)\n\n\nrunning (05.1s), 00/50 VUs, 1011 complete and 0 interrupted iterations\ndefault ✓ [======================================] 50 VUs  5s\n\n     data_received..................: 154 kB 30 kB/s\n     data_sent......................: 81 kB  16 kB/s\n     http_req_blocked...............: avg=36.41µs  min=1.09µs  med=2.77µs   max=6.38ms   p(90)=4.72µs   p(95)=33.4µs\n     http_req_connecting............: avg=30.87µs  min=0s      med=0s       max=6.34ms   p(90)=0s       p(95)=0s\n     http_req_duration..............: avg=250.77ms min=21.84ms med=238.14ms max=819.83ms p(90)=498.55ms p(95)=607.99ms\n       { expected_response:true }...: avg=250.77ms min=21.84ms med=238.14ms max=819.83ms p(90)=498.55ms p(95)=607.99ms\n     http_req_failed................: 0.00%  ✓ 0          ✗ 1011\n     http_req_receiving.............: avg=60.73µs  min=19.85µs med=56.33µs  max=685.57µs p(90)=83.91µs  p(95)=94.53µs\n     http_req_sending...............: avg=25.49µs  min=6.13µs  med=12.36µs  max=1.57ms   p(90)=26.17µs  p(95)=44µs\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=250.68ms min=21.79ms med=238.06ms max=819.77ms p(90)=498.49ms p(95)=607.93ms\n     http_reqs......................: 1011   196.438691/s\n     iteration_duration.............: avg=250.89ms min=21.92ms med=238.23ms max=819.89ms p(90)=498.62ms p(95)=608.07ms\n     iterations.....................: 1011   196.438691/s\n     vus............................: 50     min=50       max=50\n     vus_max........................: 50     min=50       max=50\n```\n\n----------------------------------------\n\nTITLE: Dremio Driver Repository Links\nDESCRIPTION: Git repository links showing version comparisons between releases\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3)\n```\n\n----------------------------------------\n\nTITLE: Defining a View Name in JavaScript and YAML\nDESCRIPTION: Demonstrates how to set the name parameter for a view, which serves as its unique identifier.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nview(`active_users`, {});\n```\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: active_users\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Heuristics Feature\nDESCRIPTION: This commit introduces QueryBuilder heuristics along with playground area, table, and number implementation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: none\nCODE:\n```\n- QueryBuilder heuristics. Playground area, table and number implementation. ([c883a48](https://github.com/statsbotco/cubejs-client/commit/c883a48))\n```\n\n----------------------------------------\n\nTITLE: Running k6 Load Test with 30 Virtual Users\nDESCRIPTION: Command to execute k6 load test with 30 virtual users against a Cube.js instance. The test simulates 30 concurrent users making requests to the Cube.js API for 5 seconds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=30 k6-cube.js\n```\n\n----------------------------------------\n\nTITLE: Vue Client Bug Fix - Deletion Error\nDESCRIPTION: Fix for error handling when executing deletion operations in the Vue client\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-client/vue:** fix error when executing deletion ([#3806](https://github.com/cube-js/cube.js/issues/3806)) Thanks [@18207680061](https://github.com/18207680061)! ([9d220a8](https://github.com/cube-js/cube.js/commit/9d220a8cf3bf040b51efefb9f74beb5545a89035))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry\nDESCRIPTION: Change entry noting fix for unhandled rejections on server starts\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nCatch unhandled rejections on server starts ([fd9d872](https://github.com/statsbotco/cubejs-client/commit/fd9d872))\n```\n\n----------------------------------------\n\nTITLE: MySQL Driver Version History Entry\nDESCRIPTION: Standard version entry format showing comparison link and version bump notification\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.36.10](https://github.com/cube-js/cube/compare/v0.36.9...v0.36.10) (2024-10-14)\n\n**Note:** Version bump only for package @cubejs-backend/mysql-driver\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube App with CLI\nDESCRIPTION: The 'create' command generates a barebones Cube app. It requires specifying an app name and database type, with an optional template parameter.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli create APP-NAME -d DB-TYPE [-t TEMPLATE]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli create demo-app -d mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli create demo-app -t express -d mysql\n```\n\n----------------------------------------\n\nTITLE: Configuring Athena Workgroup Feature\nDESCRIPTION: Allows users to configure the Athena workgroup. This enhancement provides more control over where Athena queries are executed, enabling better resource management and cost optimization.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n**athena-driver:** Allow to configure workGroup ([#3254](https://github.com/cube-js/cube.js/issues/3254)) ([a300038](https://github.com/cube-js/cube.js/commit/a300038921c8fb93f2d255b32afc5c7e8150cf65))\n```\n\n----------------------------------------\n\nTITLE: Bugfix for Angular Watch Method in v0.29.26\nDESCRIPTION: Fix for cubejs.watch() method to properly handle errors\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **@cubejs-client/ngx:** cubejs.watch() not producing errors ([#3974](https://github.com/cube-js/cube/issues/3974)) Thanks @PieterVanZyl-Dev! ([1ee6740](https://github.com/cube-js/cube/commit/1ee6740abb51b84296ae65ee565114269b621b65)), closes [#3961](https://github.com/cube-js/cube/issues/3961)\n```\n\n----------------------------------------\n\nTITLE: Bug fix for driver imports\nDESCRIPTION: Fixed alignment issues with driver imports, referencing issue #5448\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- drivers imports alignment ([#5448](https://github.com/cube-js/cube.js/issues/5448)) ([ab12426](https://github.com/cube-js/cube.js/commit/ab1242650ba0368b855176b9c6ca2d73073acf0e))\n```\n\n----------------------------------------\n\nTITLE: Changelog Bug Fix Entry\nDESCRIPTION: Example of a bug fix changelog entry with issue reference and commit hash\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-shared/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **query-orchestrator:** Fix improper pre-aggregation buildRange construction for non UTC timezones ([#9284](https://github.com/cube-js/cube/issues/9284)) ([ef12d8d](https://github.com/cube-js/cube/commit/ef12d8d02702df7dcc1e6531c1b0aee6afa576ef))\n```\n\n----------------------------------------\n\nTITLE: Splitting BaseDriver for Improved Architecture\nDESCRIPTION: Refactoring the base driver architecture to improve modularity and separation of concerns in the Cube.js driver ecosystem\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// BaseDriver split into separate package\n**base-driver:** Split BaseDriver to @cubejs-backend/base-driver ([#5283](https://github.com/cube-js/cube.js/issues/5283)) ([ca7f9d2](https://github.com/cube-js/cube.js/commit/ca7f9d280c3518e012683c23b82175ec1f96d2a8))\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Components from @cubejs-client/vue\nDESCRIPTION: Example of how to import and use components from the @cubejs-client/vue package in a Vue application. This is inferred from the package's purpose.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QueryBuilder } from '@cubejs-client/vue';\n\nexport default {\n  components: {\n    QueryBuilder\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Athena Driver to AWS-SDK v3\nDESCRIPTION: Updates the Athena driver to use AWS-SDK v3. This brings the driver up to date with the latest AWS SDK, potentially improving performance, security, and compatibility with newer AWS features. The migration leverages the modular design of v3.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\n**athena-driver:** Use AWS-SDK v3 (modular) ([f14b7c1](https://github.com/cube-js/cube.js/commit/f14b7c1a12d25fc9e140bfb352a1eb4ca4a11cda))\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Layout with Links in Markdown\nDESCRIPTION: This snippet creates a responsive grid layout with two items, each linking to documentation for dynamic data modeling in different languages. It uses custom components and SVG icons to enhance the presentation.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/dynamic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Grid cols={2} imageSize={[undefined, 50]}>\n  <GridItem\n    url=\"dynamic/jinja\"\n    imageUrl=\"https://static.cube.dev/icons/python.svg\"\n    title=\"Jinja & Python\"\n  />\n  <GridItem\n    url=\"dynamic/javascript\"\n    imageUrl=\"https://static.cube.dev/icons/javascript.svg\"\n    title=\"JavaScript\"\n  />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: SQL Unicode String Escapes\nDESCRIPTION: Added support for Unicode escape sequences in string literals for better character encoding handling.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT '\\u0041' AS unicode_a\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Count Measure\nDESCRIPTION: This SQL snippet shows the generated query for the count measure when requested via the API.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/data-modeling/overview.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(id) AS count\nFROM users;\n```\n\n----------------------------------------\n\nTITLE: Documenting Type Improvements for useCubeQuery\nDESCRIPTION: Git commit message documenting improvements to TypeScript type definitions for the useCubeQuery React hook.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **cubejs-client/react:** types for useCubeQuery ([#7668](https://github.com/cube-js/cube/issues/7668)) Thanks [@tchell](https://github.com/tchell) ! ([2f95f76](https://github.com/cube-js/cube/commit/2f95f76031e4419998bd2001c10d78ec4b75ef2e))\n```\n\n----------------------------------------\n\nTITLE: Feature: Add `shown` flag for cubes and views\nDESCRIPTION: This feature introduces a `shown` flag that can be applied to cubes and views. This flag allows developers to control the visibility of cubes and views in the user interface or API responses, providing a mechanism for hiding or showing data elements as needed.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Adding Streaming Support to BigQuery Driver\nDESCRIPTION: This change adds streaming support to the BigQuery driver. It's included in version 0.27.22 of the driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n- **bigquery-driver:** Support streaming ([8ffeba2](https://github.com/cube-js/cube.js/commit/8ffeba20f9d647438504d735155b0f8cca29fa40))\n```\n\n----------------------------------------\n\nTITLE: MSSQL Driver ReadOnly Mode\nDESCRIPTION: Implementation of read-only mode as default configuration for MSSQL driver in version 0.31.14.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **@cubejs-backend/mssql-driver:** Make MSSQL `readOnly` by default ([#5584](https://github.com/cube-js/cube.js/issues/5584)) ([ddf0369](https://github.com/cube-js/cube.js/commit/ddf036992aebc61fdd99d2a67753c63528bba9db))\n```\n\n----------------------------------------\n\nTITLE: 10 User PostgreSQL Load Test Results\nDESCRIPTION: Performance metrics for 10 virtual users showing degraded p90 and p95 latencies\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=3.4s\np(95)=3.72s\n```\n\n----------------------------------------\n\nTITLE: Running Cube.js Backend\nDESCRIPTION: These commands install dependencies and start the Cube.js backend development server.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Cube.js for Docker Compose Connection\nDESCRIPTION: This snippet shows how to set parameters in the .env file for Cube.js to connect to Cube Store when deployed with Docker Compose.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_EXT_DB_TYPE=cubestore\nCUBEJS_EXT_DB_HOST=cubestore\n```\n\n----------------------------------------\n\nTITLE: JWT for Mango Tenant Query\nDESCRIPTION: This JSON5 snippet shows the JWT structure for querying the Mango tenant's data model.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json5\nCODE:\n```\n{\n  sub: \"1234567890\",\n  tenant: \"Mango\",\n  iat: 1000000000,\n  exp: 5000000000,\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Correct invalid day identifier\nDESCRIPTION: This code snippet fixes an issue where the `day` identifier was incorrectly used for a `month lambdaRollup`. The fix ensures correct identification of day and month during the `lambdaRollup` process to prevent data processing errors.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Linting and Fixing Code\nDESCRIPTION: Command to run the linter, which checks for code style issues and automatically fixes problems where possible.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Running Cube API Server\nDESCRIPTION: Command to start the Node.js server using Cube integration\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode cube-api.js\n```\n\n----------------------------------------\n\nTITLE: Core JS Dependency\nDESCRIPTION: This commit adds core-js as a dependency for the cubejs-react package.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n- **cubejs-react:** add core-js dependency ([#107](https://github.com/statsbotco/cubejs-client/issues/107)) ([0e13ffe](https://github.com/statsbotco/cubejs-client/commit/0e13ffe))\n```\n\n----------------------------------------\n\nTITLE: MSSQL Driver Feature: Read-Only Aggregation\nDESCRIPTION: Added support for read-only aggregation in MSSQL data sources, enhancing query performance and flexibility for database interactions\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**mssql-driver:** add readonly aggregation for mssql sources ([#920](https://github.com/cube-js/cube.js/issues/920)) Thanks to @JoshMentzer!\n```\n\n----------------------------------------\n\nTITLE: MySQL Driver Commit Reference - External Rollup\nDESCRIPTION: Git commit reference for implementing external rollup functionality\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nd22a809\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for scaffolding new components and other Angular artifacts like directives, pipes, services, etc.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Fixing Athena Driver Typings\nDESCRIPTION: Corrects typings within the Athena driver, specifically addressing a wrong import. This resolves potential type-related errors and improves the driver's usability within TypeScript projects.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-athena-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n**athena-driver:** Typings for driver (wrong import) ([fe6d429](https://github.com/cube-js/cube.js/commit/fe6d429c8ddf04702401c424143c113e92da0650))\n```\n\n----------------------------------------\n\nTITLE: Request Span Configuration\nDESCRIPTION: Fixed incorrect request span configuration for WebSocket transport to improve request tracking.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ws-transport/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nRequest.span.for.WebSocketTransport\n```\n\n----------------------------------------\n\nTITLE: Publishing Cube Subgraph to Apollo Studio\nDESCRIPTION: This command uses Rover to publish the Cube subgraph to an Apollo Studio Supergraph. It requires an Apollo API key and specifies the schema file and routing URL for the Cube API.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/apollo-federation-with-cube/apollo-server-app/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPOLLO_KEY=service:Your-Graph:1234567890 \\\n  rover subgraph publish Your-Graph@current \\\n  --name cube --schema ./graphql/cube.graphql \\\n  --routing-url https://coloured-iguana.aws-eu-central-1.cubecloudapp.dev/cubejs-api/graphql\n```\n\n----------------------------------------\n\nTITLE: Changelog Structure in Markdown\nDESCRIPTION: Structured markdown document showing version history and changes for the Elasticsearch driver package from version 0.35.62 through 1.3.3.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-elasticsearch-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-backend/elasticsearch-driver\n```\n\n----------------------------------------\n\nTITLE: Postgres Driver Bug Fix - SSL Configuration\nDESCRIPTION: Fix for handling SSL configuration options in the Postgres driver, allowing SSL to be disabled via CUBEJS_DB_SSL=false environment variable.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n**postgres-driver:** `CUBEJS_DB_SSL=false` should disable SSL ([85064bc])\n```\n\n----------------------------------------\n\nTITLE: Feature: Snowflake Driver Streaming Export & Read-Only Unload\nDESCRIPTION: This snippet announces the addition of streaming export and read-only unload features to the Snowflake driver. These new capabilities enable more efficient data handling and extraction from Snowflake databases.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Error Handling Improvements for ClickHouse Driver\nDESCRIPTION: These bug fixes improve error handling in the ClickHouse driver by replacing error cause with string formatting and removing SQL from error messages. Implemented in PRs #8977 and #8983.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **clickhouse-driver:** Replace error cause with string formatting ([#8977](https://github.com/cube-js/cube/issues/8977)) ([e948856](https://github.com/cube-js/cube/commit/e94885674cf046e9b7188c1b0a6dc4420415a234))\n- **clickhouse-driver:** Tune ClickHouse errors: remove SQL, catch ping failure ([#8983](https://github.com/cube-js/cube/issues/8983)) ([811a7ce](https://github.com/cube-js/cube/commit/811a7ce2e5957de5e619ab9d22342580f22dc366))\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm\nDESCRIPTION: Starts the React application in development mode. It opens the app in the browser and enables hot-reloading for edits.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/clickhouse-dashboard/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Hot-Reload\nDESCRIPTION: Command to start the development server with hot-reload functionality for real-time updates during development.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run serve\n```\n\n----------------------------------------\n\nTITLE: Setting Cube Store as Default External Database\nDESCRIPTION: Configuration change to use Cube Store as the default EXTERNAL_DB and adding variable prefixing.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nUse Cube Store as default EXTERNAL_DB, prefix variables\n```\n\n----------------------------------------\n\nTITLE: React Hook Bug Fix\nDESCRIPTION: Fixes an issue where the react hook only applies actual query changes.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n          \n- **react:** Refetch hook only actual query changes ([10b8988](https://github.com/statsbotco/cubejs-client/commit/10b8988))\n```\n\n----------------------------------------\n\nTITLE: DuckDB Driver Upgrade Feature\nDESCRIPTION: Upgrade of the DuckDB driver to version 1.0.0\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **duckdb-driver:** Upgrade to DuckDB 1.0.0 ([#8373](https://github.com/cube-js/cube/issues/8373)) ([e41fa9f](https://github.com/cube-js/cube/commit/e41fa9fda7a4a593baf8e514aa9083e4ee1edb6a))\n```\n\n----------------------------------------\n\nTITLE: SQL Query Push Down to Data Sources in v0.33.45\nDESCRIPTION: Feature implementation for pushing complete SQL queries down to data sources via CubeSQL, improving query performance and delegation to source databases.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing-drivers/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **cubesql:** Whole SQL query push down to data sources ([#6629](https://github.com/cube-js/cube.js/issues/6629)) ([0e8a76a](https://github.com/cube-js/cube.js/commit/0e8a76a20cb37e675997f384785dd06e09175113))\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React application for production, creating optimized and minified files in the 'build' folder ready for deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/analytics-dashboard/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Version Control Change Entry\nDESCRIPTION: Git commit link showing TLS redirect fix for non-standard ports\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nTLS redirect is failing if cube.js listening on port other than 80 ([0fe92ec](https://github.com/statsbotco/cubejs-client/commit/0fe92ec))\n```\n\n----------------------------------------\n\nTITLE: Query Orchestrator TypeScript Migration\nDESCRIPTION: This snippet describes the initial move to TypeScript for the query orchestrator. It was introduced in version 0.24.2 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **@cubejs-backend/query-orchestrator:** Initial move to TypeScript ([#1462](https://github.com/cube-js/cube.js/issues/1462)) ([101e8dc](https://github.com/cube-js/cube.js/commit/101e8dc90d4b1266c0327adb86cab3e3caa8d4d0))\n```\n\n----------------------------------------\n\nTITLE: MinIO Storage Configuration Error\nDESCRIPTION: Error message displayed when MinIO storage doesn't provide the required consistency guarantees for Cube Store's persistent storage functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nError: Error during upload of <REDACTED>\nFile <REDACTED> can't be listed after upload.\nEither there's Cube Store cluster misconfiguration,\nor storage can't provide the required consistency.\n```\n\n----------------------------------------\n\nTITLE: Fixing ReferenceError host issue in Snowflake Driver\nDESCRIPTION: This code snippet shows a fix for a ReferenceError where 'host' was not defined in the Snowflake driver. The fix is referenced in commit bf61aa3.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n**@cubejs-backend/snowflake-driver:** ReferenceError host is not defined ([#3417](https://github.com/cube-js/cube.js/issues/3417)) ([bf61aa3](https://github.com/cube-js/cube.js/commit/bf61aa3241d55511ca321a1f119bf560d6dc74d7)), closes [#2923](https://github.com/cube-js/cube.js/issues/2923)\n```\n\n----------------------------------------\n\nTITLE: Query Results for Mango Tenant\nDESCRIPTION: This JSON5 snippet shows the query results for the Mango tenant, displaying products with even id values.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/using-different-schemas-for-tenants.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json5\nCODE:\n```\n[\n  {\n    \"products.id\": 2,\n    \"products.name\": \"Gorgeous Cotton Sausages\",\n  },\n  {\n    \"products.id\": 4,\n    \"products.name\": \"Handmade Wooden Soap\",\n  },\n  {\n    \"products.id\": 6,\n    \"products.name\": \"Handcrafted Plastic Chair\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Cube Project to Cloud via CLI\nDESCRIPTION: Command to deploy a local Cube project to Cube Cloud using the Cube CLI tool. Requires a deployment token for authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/migrate-from-core/upload-with-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli deploy --token <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Starting React Frontend Application\nDESCRIPTION: Commands to navigate to the dashboard app directory, install dependencies, and start the React frontend application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd dashboard-app\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Version Entry Format in Markdown\nDESCRIPTION: Example format of a version entry in the changelog showing version number, comparison link and update notes\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-materialize-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-backend/materialize-driver\n```\n\n----------------------------------------\n\nTITLE: Schema Compiler Performance Enhancement\nDESCRIPTION: Implementation of SWC instead of Babel for models transpilation, resulting in 10-13x performance improvement\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **schema-compiler:** Boost models transpilation 10-13x times (using SWC instead of Babel) ([#9225](https://github.com/cube-js/cube/issues/9225)) ([2dd9a4a](https://github.com/cube-js/cube/commit/2dd9a4a5ba0f178e304befc476609fc30ada8975))\n```\n\n----------------------------------------\n\nTITLE: Driver Imports Alignment Bug Fix\nDESCRIPTION: Resolving import-related issues to ensure consistent and correct module loading across different driver implementations\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Fixing driver imports alignment\ndrivers imports alignment ([#5448](https://github.com/cube-js/cube.js/issues/5448)) ([ab12426](https://github.com/cube-js/cube.js/commit/ab1242650ba0368b855176b9c6ca2d73073acf0e))\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests for the Angular application using the Karma test runner.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Fix broken DuckDB connection in cube.js\nDESCRIPTION: This commit addresses a bug in the cube.js duckdb-driver that caused errors when the database connection was broken. The fix implements a mechanism to detect and handle broken connections, preventing unexpected application behavior.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Version Link 0.26.11\nDESCRIPTION: Markdown link showing version comparison between v0.26.10 and v0.26.11\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-linter/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[0.26.11](https://github.com/cube-js/cube.js/compare/v0.26.10...v0.26.11)\n```\n\n----------------------------------------\n\nTITLE: LTS Releases Table in Markdown\nDESCRIPTION: Markdown table showing the current Long Term Support (LTS) releases for Cube, including version numbers, status, and end-of-life dates.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/distribution.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Status | End-of-life date |\n| --- | --- | --- |\n| `v1.0.x` | Active | October 29, 2025 |\n```\n\n----------------------------------------\n\nTITLE: SQL Query Support - FETCH ROWS ONLY\nDESCRIPTION: New SQL syntax support for limiting result sets using FETCH n ROWS ONLY clause\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table FETCH 10 ROWS ONLY\n```\n\n----------------------------------------\n\nTITLE: useIsMounted Hook React 18 Fix\nDESCRIPTION: Fixed useIsMounted hook to be compatible with React 18 StrictMode\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: git\nCODE:\n```\naa7d3a4788d38027f59c77bd567270a98a43b689\n```\n\n----------------------------------------\n\nTITLE: Adding Role Parameter to Driver Options\nDESCRIPTION: Feature addition to support role parameter in driver options, allowing role-based access control configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Add role parameter to driver options ([#448](https://github.com/cube-js/cube.js/issues/448)) Thanks to [@smbkr](https://github.com/smbkr)! ([9bfb71d](https://github.com/cube-js/cube.js/commit/9bfb71d)), closes [#447](https://github.com/cube-js/cube.js/issues/447)\n```\n\n----------------------------------------\n\nTITLE: Revert: Snowflake Read-Only Mode\nDESCRIPTION: This snippet documents the reversion of the read-only mode in the Snowflake driver. This reversion occurred because the useOriginalSqlPreAggregations flow was not functioning correctly in read-only mode, indicating a temporary rollback until the underlying issue is resolved.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Importing Sample Data for PostgreSQL Database\nDESCRIPTION: These commands download a sample e-commerce dataset, create a new database named 'ecom', and import the data into it using psql.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://cube.dev/downloads/ecom-dump.sql > ecom-dump.sql\n$ createdb ecom\n$ psql --dbname ecom -f ecom-dump.sql\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with Yarn\nDESCRIPTION: Command to start the React application in development mode, which will be accessible at http://localhost:3000 with hot reloading capability for edits and lint error reporting.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/building-a-data-app-with-cube-workshop/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: SSR Support\nDESCRIPTION: This commit allows SSR (Server-Side Rendering) by using isomorphic-fetch instead of whatwg-fetch.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: none\nCODE:\n```\n- Allow SSR: use isomorphic-fetch instead of whatwg-fetch. ([902e581](https://github.com/statsbotco/cubejs-client/commit/902e581)), closes [#1](https://github.com/statsbotco/cubejs-client/issues/1)\n```\n\n----------------------------------------\n\nTITLE: Converting Postgres Dump to CSV and Uploading to BigQuery in Shell\nDESCRIPTION: Steps to create a minimal dataset, reset the test database, export data to CSV, and upload it to BigQuery. This process involves using psql commands and Google Cloud Storage operations.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/DEVELOPMENT.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn dataset:minimal\n$ psql template1 -c 'drop database test;'  \n$ psql template1 -c 'create database test with owner test;'\n$ psql -U test -d test -f birdbox-fixtures/datasets/test.sql\n$ psql -U test -d test -c \"\\copy (SELECT * FROM public.events) to 'github-events-2015-01-01.csv' with csv header\"\n\n$ gsutil cp github-events-2015-01-01.csv gs://cube-cloud-staging-export-bucket/test/github-events-2015-01-01.csv\n$ bq mk public\n$ bq load --autodetect --source_format=CSV public.events gs://cube-cloud-staging-export-bucket/test/github-events-2015-01-01.csv\n```\n\n----------------------------------------\n\nTITLE: Starting Cube Store in a Docker Container\nDESCRIPTION: This command shows how to run Cube Store in a Docker container, exposing it on port 3030.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3030:3030 cubejs/cubestore:edge\n```\n\n----------------------------------------\n\nTITLE: Regenerating models using Open API Generator with Homebrew\nDESCRIPTION: This snippet regenerates the Cube.js models from the OpenAPI specification using the `openapi-generator` command. It specifies the input file, the generator (rust), and the output directory.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/cubeclient/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"cd rust/cubesql\nopenapi-generator generate -i ../../packages/cubejs-api-gateway/openspec.yml -g rust -o cubeclient\"\n```\n\n----------------------------------------\n\nTITLE: Vue3 Client Feature - Logical Operator Filters\nDESCRIPTION: Addition of logical operator filter support in version 0.30.54\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **@cubejs-client/vue3:** support logical operator filters ([#2950](https://github.com/cube-js/cube.js/issues/2950)) ([#5119](https://github.com/cube-js/cube.js/issues/5119)) ([077bb75](https://github.com/cube-js/cube.js/commit/077bb75ac529bf2c32a1e525ba23724a15733aa1))\n```\n\n----------------------------------------\n\nTITLE: Introduce Druid Driver\nDESCRIPTION: This snippet describes the introduction of the Druid driver. It was introduced in version 0.20.11 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Introduce Druid driver ([#1099](https://github.com/cube-js/cube.js/issues/1099)) ([2bfe20f](https://github.com/cube-js/cube.js/commit/2bfe20f))\n\n**Note:** Version bump only for package @cubejs-backend/druid-driver\n```\n\n----------------------------------------\n\nTITLE: Channel Error Handling Improvement\nDESCRIPTION: Feature addition for correct error handling in neon::channel.send functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **native:** Correct error handling for neon::channel.send ([#6106](https://github.com/cube-js/cube.js/issues/6106)) ([f71255a](https://github.com/cube-js/cube.js/commit/f71255abdae1d933101e0bc4002fd83373278067))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Update Entry in Changelog\nDESCRIPTION: Documents a bug fix that moved table name checking functionality to the underlying driver for Postgres, MySQL, and Oracle databases.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **schema-compiler:** Move create table name check to underlying driver for Postgres, MySQL, Oracle ([#9112](https://github.com/cube-js/cube/issues/9112)) ([5fb81cc](https://github.com/cube-js/cube/commit/5fb81ccce7229c6e08a11f21957af2aa8929ad06))\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Dialect Class Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the static dialectClass() method in a custom driver class. The method returns the BaseQuery implementation for the specific database dialect.\nSOURCE: https://github.com/cube-js/cube/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseDriver } = require('@cubejs-backend/query-orchestrator');\nconst FooQuery = require('./FooQuery');\n\nclass FooDriver extends BaseDriver {\n  // ...\n  static dialectClass() {\n    return FooQuery;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CubeClient in an Angular component\nDESCRIPTION: Example of injecting and using the CubeClient in an Angular component to load data from Cube.js, converting the returned Observable to component data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-ngx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CubeClient } from \"@cubejs-client/ngx\";\n\nexport class AppComponent {\n  constructor(private cube: CubeClient) {}\n\n  ngOnInit() {\n    this.cube\n      .load({\n        measures: [\"some_measure\"],\n      })\n      .subscribe(\n        (resultSet) => {\n          this.data = resultSet.chartPivot();\n        },\n        (err) => console.log(\"HTTP Error\", err)\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server, which serves the application locally at http://localhost:4200/ with automatic reload functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Unsupported Query with CASE Expression in SQL API\nDESCRIPTION: Illustrates an example of a query that won't work because the SQL API can't push down the CASE expression to Cube for processing.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  city,\n  MAX(CASE\n    WHEN status = 'shipped'\n    THEN '2-done'\n    ELSE '1-in-progress'\n  END) AS real_status,\n  SUM(number)\nFROM orders\nCROSS JOIN users\nGROUP BY 1;\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Links\nDESCRIPTION: Markdown links referencing GitHub issues #1972 and #1975\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-linter/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[#1972](https://github.com/cube-js/cube.js/issues/1972) [#1975](https://github.com/cube-js/cube.js/issues/1975)\n```\n\n----------------------------------------\n\nTITLE: Base Driver Split Change\nDESCRIPTION: Feature change splitting BaseDriver into a separate @cubejs-backend/base-driver package.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **base-driver:** Split BaseDriver to @cubejs-backend/base-driver ([#5283](https://github.com/cube-js/cube.js/issues/5283))\n```\n\n----------------------------------------\n\nTITLE: Fix Typo in error message\nDESCRIPTION: This bug fix corrects a typographical error in an error message within the Dremio driver. Correcting the typo improves the clarity and readability of the error message, making it easier for users to understand and resolve issues that may arise during driver operation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Creating Headless Service for Cube Store Workers\nDESCRIPTION: YAML configuration for a Headless Service that enables DNS resolution between Cube Store Workers. Setting clusterIP to None creates a headless service, allowing direct pod-to-pod communication.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/cluster/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n...\nspec:\n  type: ClusterIP\n  clusterIP: None # Headless Service\n...\n```\n\n----------------------------------------\n\nTITLE: DuckDB Schema Specification Fix\nDESCRIPTION: Bug fix that adds schema specification for information_schema queries in the DuckDB driver implementation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-duckdb-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **duckdb-driver:** Specify schema for information_schema queries ([#7355](https://github.com/cube-js/cube/issues/7355)) ([60f2078](https://github.com/cube-js/cube/commit/60f20783fb295ad4bcdd8a9d6622a04c565a674a))\n```\n\n----------------------------------------\n\nTITLE: Upgrade sqlite3 in sqlite-driver\nDESCRIPTION: This feature update upgrades the sqlite3 dependency within the @cubejs-backend/sqlite-driver package. It updates the sqlite3 version from 5.0.11 to 5.1.6, addressing potential issues and incorporating improvements from the newer version.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-sqlite-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Features\n\n- **sqlite-driver:** Upgrade sqlite3 from 5.0.11 to 5.1.6, refs [#6340](https://github.com/cube-js/cube/issues/6340) ([#6287](https://github.com/cube-js/cube/issues/6287)) ([4ec1da3](https://github.com/cube-js/cube/commit/4ec1da361afa9146b4ac955addd89120cfe23e2d))\n```\n\n----------------------------------------\n\nTITLE: SQL Style Guide Example in Cube Definition\nDESCRIPTION: Example demonstrating proper SQL formatting within a Cube definition, including proper indentation, capitalization of SQL keywords, and use of common table expressions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/style-guide.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: california_users\n    sql: >\n      SELECT\n        id,\n        first_name,\n        last_name\n      FROM public.users WHERE state = 'CA'\n\n    dimensions:\n      - name: id\n        sql: id\n        type: number\n        primary_key: true\n\n      - name: first_name\n        sql: first_name\n        type: string\n\n      - name: last_name\n        sql: last_name\n        type: string\n\n    measures:\n      - name: count\n        type: count\n```\n\n----------------------------------------\n\nTITLE: Creating CubeCloudBYOC IAM Policy in JSON\nDESCRIPTION: This JSON defines the IAM policy named CubeCloudBYOC, which grants necessary permissions for Cube Cloud to manage AWS resources. It includes actions for EC2, EKS, IAM, S3, and other services. The policy uses conditions to restrict actions to resources tagged with 'Created-By: CubeCloud'.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/byoc/aws.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"autoscaling:DescribeAutoScalingGroups\",\n                \"autoscaling:DescribeAutoScalingInstances\",\n                \"autoscaling:DescribeLaunchConfigurations\",\n                \"autoscaling:DescribeTags\",\n                \"ec2:DescribeAddresses\",\n                \"ec2:DescribeAddressesAttribute\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:DescribeLaunchTemplateVersions\",\n                \"ec2:DescribeLaunchTemplates\",\n                \"ec2:DescribeNatGateways\",\n                \"ec2:DescribeNetworkInterfaces\",\n                \"ec2:DescribePrefixLists\",\n                \"ec2:DescribeRegions\",\n                \"ec2:DescribeRouteTables\",\n                \"ec2:DescribeSecurityGroupRules\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeVpcAttribute\",\n                \"ec2:DescribeVpcClassicLink\",\n                \"ec2:DescribeVpcClassicLinkDnsSupport\",\n                \"ec2:DescribeVpcEndpointServiceConfigurations\",\n                \"ec2:DescribeVpcEndpoints\",\n                \"ec2:DescribeVpcPeeringConnections\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:RunInstances\",\n                \"eks:DescribeCluster\",\n                \"eks:DescribeNodegroup\",\n                \"eks:ListClusters\",\n                \"iam:GetRole\",\n                \"sts:DecodeAuthorizationMessage\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"s3:*\"],\n            \"Resource\": [\"arn:aws:s3:::cube-store-*\"]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AllocateAddress\",\n                \"ec2:CreateInternetGateway\",\n                \"ec2:CreateLaunchTemplate\",\n                \"ec2:CreateNatGateway\",\n                \"ec2:CreateRoute\",\n                \"ec2:CreateRouteTable\",\n                \"ec2:CreateSecurityGroup\",\n                \"ec2:CreateSubnet\",\n                \"ec2:CreateTags\",\n                \"ec2:CreateVpc\",\n                \"ec2:CreateVpcEndpoint\",\n                \"ec2:CreateVpcEndpointServiceConfiguration\",\n                \"ec2:CreateVpcPeeringConnection\",\n                \"eks:CreateCluster\",\n                \"eks:CreateNodegroup\",\n                \"iam:CreateOpenIDConnectProvider\",\n                \"iam:PassRole\",\n                \"iam:TagOpenIDConnectProvider\",\n                \"logs:CreateLogDelivery\",\n                \"kms:TagResource\",\n                \"kms:CreateKey\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:RequestTag/Created-By\": \"CubeCloud\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:AddRoleToInstanceProfile\",\n                \"iam:AttachRolePolicy\",\n                \"iam:CreateInstanceProfile\",\n                \"iam:CreateOpenIDConnectProvider\",\n                \"iam:CreatePolicy\",\n                \"iam:CreateRole\",\n                \"iam:CreateServiceLinkedRole\",\n                \"iam:DeleteInstanceProfile\",\n                \"iam:DeleteOpenIDConnectProvider\",\n                \"iam:DeletePolicy\",\n                \"iam:DeleteRole\",\n                \"iam:DeleteRolePolicy\",\n                \"iam:DeleteServiceLinkedRole\",\n                \"iam:DetachRolePolicy\",\n                \"iam:GetInstanceProfile\",\n                \"iam:GetOpenIDConnectProvider\",\n                \"iam:GetPolicy\",\n                \"iam:GetPolicyVersion\",\n                \"iam:GetRole\",\n                \"iam:GetRolePolicy\",\n                \"iam:ListAttachedRolePolicies\",\n                \"iam:ListInstanceProfilesForRole\",\n                \"iam:ListOpenIDConnectProviderTags\",\n                \"iam:ListPolicyVersions\",\n                \"iam:ListRolePolicies\",\n                \"iam:PassRole\",\n                \"iam:PutRolePolicy\",\n                \"iam:RemoveRoleFromInstanceProfile\",\n                \"iam:TagInstanceProfile\",\n                \"iam:TagOpenIDConnectProvider\",\n                \"iam:TagPolicy\",\n                \"iam:TagRole\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:instance-profile/CubeCloud*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:instance-profile/cubeapp-*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:instance-profile/cube-store-*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:oidc-provider/oidc.eks.*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:policy/CubeCloud*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:policy/cubeapp-*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:role/CubeCloud*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:role/cubeapp-*\",\n                \"arn:aws:iam::{AWS_ACCOUNT_ID}:role/cube-store-*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"iam:ResourceTag/Created-By\": \"CubeCloud\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"iam:CreateServiceLinkedRole\",\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"iam:AWSServiceName\": [\n                        \"eks.amazonaws.com\",\n                        \"eks-nodegroup.amazonaws.com\",\n                        \"eks-fargate.amazonaws.com\"\n                    ]\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"autoscaling:SetDesiredCapacity\",\n                \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n            ],\n            \"Resource\": [\"*\"],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"autoscaling:ResourceTag/Created-By\": \"CubeCloud\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"eks:*\", \"kms:*\"],\n            \"Resource\": [\"*\"],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:ResourceTag/Created-By\": \"CubeCloud\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"ec2:*\"],\n            \"Resource\": [\"*\"],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"ec2:ResourceTag/Created-By\": \"CubeCloud\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Snowflake Driver Feature Updates\nDESCRIPTION: Major feature updates to the Snowflake driver including streaming support, TypeScript migration, S3 UNLOAD support, and key-pair authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- Introduce streaming\n- Migrate to TypeScript\n- Support UNLOAD to S3\n- Support 'key-pair' authentication\n```\n\n----------------------------------------\n\nTITLE: Introducing Databricks JDBC Driver Integration\nDESCRIPTION: Feature that introduces a JDBC driver for Databricks connections.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nIntroduce databricks-jdbc-driver\n```\n\n----------------------------------------\n\nTITLE: Commit - Support HLL with Export Bucket\nDESCRIPTION: Git commit adding support for HyperLogLog (HLL) feature with export bucket functionality in Databricks driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n7f97af42d6a6c0645bd778e94f75d62280ffeba6\n```\n\n----------------------------------------\n\nTITLE: Fix: Snowflake Integer Export to Decimal for Pre-Aggregations\nDESCRIPTION: This snippet describes a bug fix related to exporting integers to pre-aggregations as decimals in the Snowflake driver. The fix ensures that integers are exported with their correct data type, preventing data type mismatch issues during pre-aggregation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Elements\nDESCRIPTION: Command to scaffold new Angular components and other elements using the Angular CLI code generation capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation and instructions\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Splitting BaseDriver Package\nDESCRIPTION: This code snippet represents the extraction of BaseDriver into a separate package, @cubejs-backend/base-driver. This change likely decouples the base driver functionality from specific driver implementations.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"### Features\\n\\n- **base-driver:** Split BaseDriver to @cubejs-backend/base-driver ([#5283](https://github.com/cube-js/cube.js/issues/5283)) ([ca7f9d2](https://github.com/cube-js/cube.js/commit/ca7f9d280c3518e012683c23b82175ec1f96d2a8))\"\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests for Cube.js in Shell\nDESCRIPTION: Instructions for building a Docker image, setting up environment variables, and running Cypress tests. This includes steps for dataset preparation and Cypress installation.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/DEVELOPMENT.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker build . -f packages/cubejs-docker/dev.Dockerfile -t localhost:5000/cubejs/cube:testx\n$ cd packages/cubejs-testing\n$ export BIRDBOX_CUBEJS_VERSION=testx\n$ export BIRDBOX_CUBEJS_REGISTRY_PATH=localhost:5000/\n$ export BIRDBOX_CYPRESS_BROWSER=chrome\n$ export BIRDBOX_CYPRESS_TARGET=postgresql\n$ export DEBUG=testcontainers\n$ yarn dataset:minimal\n$ yarn cypress:install\n$ yarn cypress:birdbox\n```\n\n----------------------------------------\n\nTITLE: Linking Native Backend in Cube Project\nDESCRIPTION: Commands to link the locally built native backend module in a Cube project with SQL enabled and start development mode.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn link \"@cubejs-backend/native\"\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Open API Generator with Homebrew\nDESCRIPTION: This snippet shows how to install Open API Generator using Homebrew, a package manager for macOS. It is a prerequisite for regenerating Cube.js models.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/cubeclient/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"brew install openapi-generator\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Kafka Broker Configuration\nDESCRIPTION: Addresses an issue with handling the list of Kafka brokers in the KSQL driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **ksql-driver:** Kafka, list of brokers ([#9009](https://github.com/cube-js/cube/issues/9009)) ([31d4b46](https://github.com/cube-js/cube/commit/31d4b46a0f84e1095924219f4c34eb56b0efc23c))\n```\n\n----------------------------------------\n\nTITLE: Improve Code Quality\nDESCRIPTION: This update focuses on enhancing the overall code quality of the Dremio driver.  This involves refactoring code, improving documentation, and addressing potential code smells or vulnerabilities to ensure maintainability, readability, and stability of the Dremio driver. The commit message indicates a general effort to improve the coding standards and practices within the driver's codebase.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Creating Chart Renderer Symlinks in Cube.js Playground\nDESCRIPTION: Creates a temporary directory and establishes a symbolic link for playground templates in the Cube.js chart generation system. This setup enables the playground to access chart rendering templates during development.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/charts-gen/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir [PATH_TO_PROJECT]/cube.js/packages/cubejs-playground/charts-gen/node_modules/.tmp\nln -s [PATH_TO_PROJECT]/cubejs-playground-templates [PATH_TO_PROJECT]/cube.js/packages/cubejs-playground/charts-gen/node_modules/.tmp/cubejs-playground-templates\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable for CubeStore Driver Heartbeat Timeout\nDESCRIPTION: Introduces a new environment variable CUBEJS_CUBESTORE_NO_HEART_BEAT_TIMEOUT for configuring heartbeat timeout in the CubeStore driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **cubestore-driver:** Introduce `CUBEJS_CUBESTORE_NO_HEART_BEAT_TIMEOUT` env ([e67e800](https://github.com/cube-js/cube.js/commit/e67e800119e4efe0456eef347a573fa9feaf10e7))\n```\n\n----------------------------------------\n\nTITLE: Building Cube.js Native Backend Debug Version\nDESCRIPTION: Commands to build and link the Cube.js native backend module in debug mode. Includes options for default and Python-enabled builds.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/cubejs-backend-native\n# default one, fallback build\nyarn run native:build-debug\n# or with python\nyarn native:build-debug-python\nyarn link\n```\n\n----------------------------------------\n\nTITLE: Deprecated Database Type Configuration in JavaScript\nDESCRIPTION: This snippet exemplifies the deprecated use of the `dbType` property within a Cube.js configuration module for specifying a data source type. It allows for static strings or dynamic functions based on security context, highlighting dynamic type selection for multitenancy setups. It advises replacing `dbType` with `driverFactory`.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/config.mdx#2025-04-17_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // string\n  dbType: 'snowflake',\n\n  // function\n  dbType: ({ securityContext }) => 'databricks',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DrillDown Measure Configuration in JavaScript\nDESCRIPTION: Example showing how to define drillDown members for a measure in a cube definition.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmeasures: {\n  count: {\n    type: `count`,\n    drillMembers: [Orders.status, Users.city, count],\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Cube.js Vue for Production\nDESCRIPTION: Command to create a production-ready build with minification\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Vizard\nDESCRIPTION: Environment variable configuration template for setting up Cube API connection parameters including API URL, token, query, and pivot configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/README.md#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# Create the .env.local file in the root of the project and copy the content of this file filling it with your params\nVITE_CUBE_API_URL=https://{domain or IP}/cubejs-api/v1\nVITE_CUBE_API_TOKEN={YOUR API TOKEN}\nVITE_CUBE_QUERY={QUERY IN JSON}\nVITE_CUBE_PIVOT_CONFIG={PIVOT CONFIG IN JSON}\n\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application\nDESCRIPTION: Command to launch the Streamlit web application which serves as the frontend for the LLM-powered data retrieval interface.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/langchain/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstreamlit run streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Fix Parameters Limit in Redshift Driver\nDESCRIPTION: This bug fix addresses the explicit parameters limit in both PostgreSQL and Redshift drivers. It ensures that the drivers correctly handle the maximum number of parameters allowed in queries, preventing potential errors and improving overall reliability.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-redshift-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAdd explicit parameters limit in PostgreSQL and Redshift drivers\n```\n\n----------------------------------------\n\nTITLE: Git Commit for SQL Push Down Support\nDESCRIPTION: Git commit hash related to adding SQL push down support for DATE_PART with Databricks\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n8fa0d53600e6d5b2a42cb94160918939e7f33d10\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Heap Size for Refresh Workers\nDESCRIPTION: Command to adjust Node.js heap size for refresh workers to utilize available RAM effectively.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/production-checklist.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nNODE_OPTIONS=\"--max-old-space-size=6144\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fix build_range_end for preaggregatons REST API\nDESCRIPTION: This code snippet addresses an issue with the `build_range_end` parameter in the pre-aggregations REST API. The fix ensures that the build range end is correctly handled, improving the accuracy and reliability of pre-aggregation data builds.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Running Direct Load Test Against Cube Cloud API\nDESCRIPTION: Command to run K6 load tests directly against the Cube Cloud API, bypassing the Node.js application layer.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/bigquery/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nk6 run k6-cube-cloud.js\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests which verify individual components and functions in isolation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test:unit\n```\n\n----------------------------------------\n\nTITLE: Improve Docker DX\nDESCRIPTION: This snippet describes the improvement of the developer experience for Docker. It was introduced in version 0.24.5 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **cubejs-cli:** improve DX for docker ([#1457](https://github.com/cube-js/cube.js/issues/1457)) ([72ad782](https://github.com/cube-js/cube.js/commit/72ad782090c52e677b9e51e43818f1dca40db791))\n```\n\n----------------------------------------\n\nTITLE: Databricks JDBC Driver Java Support Feature\nDESCRIPTION: Added support for Java versions higher than 11 in the Databricks JDBC driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **databricks-jdbc-driver:** Support Java higher then 11 ([03c278d](https://github.com/cube-js/cube/commit/03c278db81a1bbf3363192aeec50993f2fcf8a5b))\n```\n\n----------------------------------------\n\nTITLE: SQL Extract Epoch Support\nDESCRIPTION: Added support for extracting epoch timestamps using EXTRACT(EPOCH, ...) syntax in CubeSQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXTRACT(EPOCH, timestamp_column)\n```\n\n----------------------------------------\n\nTITLE: SQL Query Support - IN Subquery\nDESCRIPTION: Added support for IN subqueries in SQL statements\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table WHERE column IN (SELECT column FROM another_table)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: ESLint configuration setup for TypeScript projects with React. Includes parser options for module resolution and TypeScript configuration files.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/apps/react-typescript-antd-table/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Key Response Time Metrics for 30 VUs\nDESCRIPTION: Condensed response time metrics for the 90th and 95th percentiles from the 30 virtual users test, showing that Cube.js responds quickly under this load.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=370.08ms\np(95)=457.51ms\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Active Users Query in Cube.js\nDESCRIPTION: Example JSON response from the active users query showing the calculated values for monthly, weekly, and daily active users, along with the WAU to MAU ratio.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/analytics/active-users.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"active_users.monthly_active_users\": \"22\",\n      \"active_users.weekly_active_users\": \"4\",\n      \"active_users.daily_active_users\": \"0\",\n      \"active_users.wau_to_mau\": \"18.1818181818181818\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: uuidv4 upgrade\nDESCRIPTION: This commit upgrades the uuidv4 dependency. The upgrade addresses potential security vulnerabilities or compatibility issues with older versions of the library.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-clickhouse-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n### Bug Fixes\n\n- uuidv4 upgrade ([c46c721](https://github.com/cube-js/cube.js/commit/c46c721))\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite with npm\nDESCRIPTION: Launches the test runner in interactive watch mode for the React application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/clickhouse-dashboard/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Bug fix: NULLS FIRST/LAST SQL push down\nDESCRIPTION: Code commit fixing NULLS FIRST/LAST SQL push down functionality for multiple dialects including Pinot\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-pinot-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **cubesql:** Fix `NULLS FIRST`/`LAST` SQL push down for several dialects ([#8895](https://github.com/cube-js/cube/issues/8895)) ([61c5ac6](https://github.com/cube-js/cube/commit/61c5ac618c9b68cf1185625d77420ed4a2c5da54))\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Driver Features and Bugfixes\nDESCRIPTION: Notable changes include adding timeout specifications for connection testing, implementing CI functionality, read-only mode, streaming and unloading capabilities, and fixing read-only implementation issues with LIMIT 1 queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n- bigquery-driver: Specify timeout for job on testConnection (#6588)\n- bigquery-driver: CI, read-only, streaming and unloading (#6495)\n\n### Bug Fixes\n- bigquery-driver: Revert read-only implementation as `LIMIT 1` queries generate too much usage (#6523)\n```\n\n----------------------------------------\n\nTITLE: Git Commit for Introspection Feature\nDESCRIPTION: Git commit hash for adding introspection support for external schemas/tables in Redshift\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfa4b3b8161c38cc7d26e9ab00e70892fcbc0b137\n```\n\n----------------------------------------\n\nTITLE: Feature: JDBC Driver Upgrade Vendors\nDESCRIPTION: This commit upgrades the vendors for the Cube.js JDBC driver.  This upgrade brings improvements in vendor support and related dependencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: None\nCODE:\n```\n- **@cubejs-backend/jdbc-driver:** Upgrade vendors ([#1282](https://github.com/cube-js/cube.js/issues/1282)) ([94b9b37](https://github.com/cube-js/cube.js/commit/94b9b37484c55a4155578a84ade409035d62e152))\n```\n\n----------------------------------------\n\nTITLE: Formatting Resource Cost Tables in Markdown\nDESCRIPTION: A collection of formatted markdown tables showing detailed resource usage and CCU calculations for different deployment scales. Includes columns for resources, monthly usage patterns, and total CCU calculations.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/pricing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Resource                                        | Usage per month                                           | CCU per month                                       |\n| ----------------------------------------------- | --------------------------------------------------------- | --------------------------------------------------- |\n| Production Cluster                              | 1 Production Cluster ×\\nbr/>24 hours per day ×\\nbr/>30 days | 720 hours ×\\nbr/>4 CCUs per hour =\\nbr/>**2880 CCUs** |\n| Additional Cube API Instance                    | —                                                         | —                                                   |\n| Cube Store Worker                               | 2 Cube Store Workers ×\\nbr/>12 hours per day ×\\nbr/>30 days | 720 hours ×\\nbr/>1 CCU per hour =\\nbr/>**720 CCUs**   |\n| Development Instance                            | —                                                         | —                                                   |\n| Development Instance\\nbr/>(for development mode) | 2 users ×\\nbr/>1 hour per day ×\\nbr/>30 days                | 60 hours ×\\nbr/>1 CCU per hour =\\nbr/>**60 CCUs**     |\n| **Total**                                       |                                                           | **3660 CCUs**                                       |\n```\n\n----------------------------------------\n\nTITLE: Primary Key Definition\nDESCRIPTION: Example showing how to define a primary key dimension, which is required for joins to work correctly.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  dimensions: {\n    customer_id: {\n      sql: `id`,\n      type: `number`,\n      primary_key: true,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    dimensions:\n      - name: customer_id\n        sql: id\n        type: number\n        primary_key: true\n```\n\n----------------------------------------\n\nTITLE: Series Data Structure Example\nDESCRIPTION: Demonstrates the format of time series data returned by the series method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    key: 'Stories.count',\n    title: 'Stories Count',\n    series: [\n      { x: '2015-01-01T00:00:00', value: 27120 },\n      { x: '2015-02-01T00:00:00', value: 25861 },\n      { x: '2015-03-01T00:00:00', value: 29661 },\n      //...\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Ignore Case Sensitive Search for Identifiers\nDESCRIPTION: This bug fix addresses an issue where the search for identifiers was case-sensitive in CubeSQL. The fix ensures that the search is now case-insensitive. This resolves potential issues where identifiers with different casing were not being properly recognized.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Ignore case sensitive search for usage of identifiers ([a50f8a2](https://github.com/cube-js/cube.js/commit/a50f8a25e8064f98eb7931c643d2ce67be340ad0))\"\n```\n\n----------------------------------------\n\nTITLE: Testing Cube.js Maven Wrapper with Yarn\nDESCRIPTION: Instructions for testing the Cube.js Maven wrapper. This snippet shows how to install dependencies and run tests using Yarn commands.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-maven/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Moment.js Type Error\nDESCRIPTION: Resolving a TypeError related to moment.js function initialization, ensuring proper date and time handling in the SQLite driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-sqlite-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTypeError: moment is not a function\n```\n\n----------------------------------------\n\nTITLE: Publishing Apollo Server Subgraph to Apollo GraphOS\nDESCRIPTION: This command publishes the Apollo Server subgraph to Apollo GraphOS using Rover. It specifies the schema file, subgraph name, and routing URL for the Apollo Server in the Cube team's graph.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/apollo-federation-with-cube/apollo-server-app/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrover subgraph publish cube-team@main \\\n  --schema \"./apollo.graphql\" \\\n  --name ApolloServer \\\n  --routing-url \"https://apollo.examplescube.dev/graphql\"\n```\n\n----------------------------------------\n\nTITLE: Statistical Aggregate Functions in PostgreSQL\nDESCRIPTION: Advanced statistical functions including covariance, standard deviation, and variance calculations in both population and sample variants.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/reference.mdx#2025-04-17_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCOVAR_POP\nCOVAR_SAMP\nSTDDEV_POP\nSTDDEV_SAMP\nVAR_POP\nVAR_SAMP\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Commit cursor on release for materialize-driver\nDESCRIPTION: This code snippet fixes an issue where the cursor was not being committed on release in the materialize-driver. This ensures that the database connection is properly managed, preventing potential resource leaks and improving stability.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Running k6 Load Test with 100 Virtual Users\nDESCRIPTION: Command to execute k6 load test with 100 virtual users against a Cube.js instance. The test simulates 100 concurrent users making requests to the Cube.js API for 5 seconds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=100 k6-cube.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A minimal robots.txt configuration that allows all user agents (web crawlers) complete access to the website. This configuration doesn't impose any crawling restrictions.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/supabase/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building production package with Yarn in Create React App\nDESCRIPTION: Creates a production-ready build in the 'build' folder. Bundles React and optimizes the build with minified files and hash-based filenames.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multitenancy-workshop/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Building Cube Store Docker Image\nDESCRIPTION: This command demonstrates how to build the Cube Store Docker image and then run it to check functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t cubejs/cubestore:latest .\ndocker run --rm cubejs/cubestore:latest\n```\n\n----------------------------------------\n\nTITLE: Adding cluster option to Materialize driver in Cube.js\nDESCRIPTION: This code snippet introduces a new feature to the Materialize driver, adding a 'cluster' option. This enhancement allows users to specify cluster configurations for Materialize, potentially improving performance and scalability. The feature addition addresses issue #7773.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n### Features\n\n- **materialize-driver:** Add cluster option to Materialize driver ([#7773](https://github.com/cube-js/cube.js/issues/7773)) Thanks [@bobbyiliev](https://github.com/bobbyiliev)! ([917004e](https://github.com/cube-js/cube.js/commit/917004ebccfeb6509a08e5b9b51e1ae8542cf0af))\n```\n\n----------------------------------------\n\nTITLE: HTTP Transport Bug Fix\nDESCRIPTION: Fixes an incorrect URL generation issue in the HttpTransport.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n- Incorrect URL generation in HttpTransport ([7e7020b](https://github.com/statsbotco/cubejs-client/commit/7e7020b))\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers (*) full access to the site. Contains reference to robotstxt.org specification documentation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-pivot-table/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Results for 200 Virtual Users Test\nDESCRIPTION: Output from running the k6 load test with 200 virtual users against Cube.js. Shows metrics including response times, request rates, and concurrent users with p90 response time of 1.51s and p95 of 1.63s.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nadnanrahic@instance-1:~/benchmarks$ k6 run -e vus=200 k6-cube.js\n\n          /\\      |‾‾| /‾‾/   /‾‾/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   ‾‾\\\n   /          \\   |  |\\  \\ |  (‾)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6-cube.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 200 max VUs, 35s max duration (incl. graceful stop):\n           * default: 200 looping VUs for 5s (gracefulStop: 30s)\n\n\nrunning (05.8s), 000/200 VUs, 1316 complete and 0 interrupted iterations\ndefault ✗ [======================================] 200 VUs  5s\n\n     data_received..................: 200 kB 35 kB/s\n     data_sent......................: 105 kB 18 kB/s\n     http_req_blocked...............: avg=186.77µs min=1.06µs  med=2.92µs   max=9.96ms p(90)=349.65µs p(95)=1.48ms\n     http_req_connecting............: avg=172.69µs min=0s      med=0s       max=9.8ms  p(90)=280.35µs p(95)=1.28ms\n     http_req_duration..............: avg=823.38ms min=55.08ms med=782.73ms max=1.84s  p(90)=1.51s    p(95)=1.63s\n       { expected_response:true }...: avg=823.38ms min=55.08ms med=782.73ms max=1.84s  p(90)=1.51s    p(95)=1.63s\n     http_req_failed................: 0.00%  ✓ 0          ✗ 1316\n     http_req_receiving.............: avg=62.06µs  min=16.02µs med=56.89µs  max=1.06ms p(90)=89.89µs  p(95)=103.87µs\n     http_req_sending...............: avg=112.87µs min=5.46µs  med=13.82µs  max=3.53ms p(90)=133.1µs  p(95)=678.84µs\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s     p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=823.21ms min=54.97ms med=782.6ms  max=1.84s  p(90)=1.51s    p(95)=1.63s\n     http_reqs......................: 1316   227.797529/s\n     iteration_duration.............: avg=823.69ms min=55.22ms med=784.44ms max=1.84s  p(90)=1.51s    p(95)=1.63s\n     iterations.....................: 1316   227.797529/s\n     vus............................: 200    min=200      max=200\n     vus_max........................: 200    min=200      max=200\n```\n\n----------------------------------------\n\nTITLE: React Client Bug Fix\nDESCRIPTION: Fix checking meta changes in React client package\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: git\nCODE:\n```\n4c44551b880bd4ff34d443241c1c0c28cae0d5f8\n```\n\n----------------------------------------\n\nTITLE: Installing Cube Store Driver in JavaScript\nDESCRIPTION: This snippet demonstrates how to install the Cube Store driver using Yarn for integration with Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubestore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @cubejs-backend/cubestore-driver\n```\n\n----------------------------------------\n\nTITLE: Angular Decorator Function Call Fix\nDESCRIPTION: Bug fix for unsupported function calls in decorators\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n**client-ngx:** Function calls are not supported in decorators but 'ɵangular_packages_core_core_a' was called. ([65871f9](https://github.com/statsbotco/cubejs-client/commit/65871f9))\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt file defines access permissions for web crawlers. It allows all web crawler user agents (indicated by '*') to access the entire website by not specifying any paths after the 'Disallow:' directive.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Defining Products Cube Schema in Cube.js\nDESCRIPTION: Creates a products cube with a many-to-one relationship to suppliers, defining the basic structure and relationships for product data.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/access-control/column-based-access.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: products\n    sql_table: products\n\n    joins:\n      - name: suppliers\n        relationship: many_to_one\n        sql: \"{CUBE}.supplier_id = {suppliers.id}\"\n\n    dimensions:\n      - name: name\n        sql: name\n        type: string\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`products`, {\n  sql_table: `products`,\n\n  joins: {\n    suppliers: {\n      relationship: `many_to_one`,\n      sql: `${CUBE}.supplier_id = ${suppliers.id}`,\n    },\n  },\n\n  dimensions: {\n    name: {\n      sql: `name`,\n      type: `string`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Oracle Driver Compatibility with Node.js v12.16.0\nDESCRIPTION: This snippet addresses a bug where a pre-built node-oracledb binary was not found for Node.js v12.16.0. The fix is part of version 0.17.8 of the oracle-driver package.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-oracle-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-backend/oracle-driver:** a pre-built node-oracledb binary was not found for Node.js v12.16.0 ([#375](https://github.com/cube-js/cube.js/issues/375)) ([fd66bb6](https://github.com/cube-js/cube.js/commit/fd66bb6)), closes [#370](https://github.com/cube-js/cube.js/issues/370)\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-pivot-table/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Type Fix for TCubeMember\nDESCRIPTION: Adding 'meta' field to typescript TCubeMember type definition to fix typing issue.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-core/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TCubeMember = {\n  meta: any;\n  // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Single User Load Test Results\nDESCRIPTION: Performance metrics for 1 virtual user showing p90 and p95 latencies\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=242.42ms\np(95)=257.74ms\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Command to create an optimized production build in the build folder with minification and hash filenames\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multi-tenant-analytics/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: TypeScript Migration for Query Orchestrator\nDESCRIPTION: This feature describes the initial move to TypeScript for the query orchestrator in Cube.js.  The migration to TypeScript enhances code maintainability, readability, and reduces the risk of runtime errors.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **@cubejs-backend/query-orchestrator:** Initial move to TypeScript ([#1462](https://github.com/cube-js/cube.js/issues/1462)) ([101e8dc](https://github.com/cube-js/cube.js/commit/101e8dc90d4b1266c0327adb86cab3e3caa8d4d0))\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Cube-Dagster Integration\nDESCRIPTION: Commands to create and navigate to a new directory for the Cube-Dagster integration project\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/orchestration-api/dagster.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cube-dagster\ncd cube-dagster\n```\n\n----------------------------------------\n\nTITLE: Running Angular Frontend Application\nDESCRIPTION: These commands navigate to the dashboard-app directory and start the Angular development server.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd dashboard-app\n$ ng serve\n```\n\n----------------------------------------\n\nTITLE: Adding HLL Support to Snowflake Driver\nDESCRIPTION: A code snippet showing the addition of support for HyperLogLog (HLL) in the Snowflake driver, implemented in commit 7b57840.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n**snowflake-driver:** Support HLL ([7b57840](https://github.com/cube-js/cube.js/commit/7b578401a5271a2cbe43266f0190b786b2191aaf))\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Access Rules in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all user agents (web crawlers) to access all parts of the website. The 'User-agent: *' directive targets all crawlers, while the empty 'Disallow:' directive indicates no restrictions.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multi-tenant-analytics/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Sample Status Data Structure in JSON\nDESCRIPTION: Example of status data showing changes over time with order_id, status, and changed_at fields. The data demonstrates how statuses for orders change at different timestamps.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/snapshots.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"statuses.order_id\": 1,\n    \"statuses.status\": \"shipped\",\n    \"statuses.changed_at\": \"2019-01-19T00:00:00.000\"\n  },\n  {\n    \"statuses.order_id\": 1,\n    \"statuses.status\": \"processing\",\n    \"statuses.changed_at\": \"2019-03-14T00:00:00.000\"\n  },\n  {\n    \"statuses.order_id\": 1,\n    \"statuses.status\": \"completed\",\n    \"statuses.changed_at\": \"2019-01-25T00:00:00.000\"\n  },\n  {\n    \"statuses.order_id\": 2,\n    \"statuses.status\": \"processing\",\n    \"statuses.changed_at\": \"2019-08-21T00:00:00.000\"\n  },\n  {\n    \"statuses.order_id\": 2,\n    \"statuses.status\": \"completed\",\n    \"statuses.changed_at\": \"2019-04-13T00:00:00.000\"\n  },\n  {\n    \"statuses.order_id\": 2,\n    \"statuses.status\": \"shipped\",\n    \"statuses.changed_at\": \"2019-03-18T00:00:00.000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Results for 100 Virtual Users Test\nDESCRIPTION: Output from running the k6 load test with 100 virtual users against Cube.js. Shows metrics including response times, request rates, and concurrent users with p90 response time of 624.04ms and p95 of 708.01ms.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nadnanrahic@instance-1:~/benchmarks$ k6 run -e vus=100 k6-cube.js\n\n          /\\      |‾‾| /‾‾/   /‾‾/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   ‾‾\\\n   /          \\   |  |\\  \\ |  (‾)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6-cube.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 100 max VUs, 35s max duration (incl. graceful stop):\n           * default: 100 looping VUs for 5s (gracefulStop: 30s)\n\n\nrunning (05.2s), 000/100 VUs, 1200 complete and 0 interrupted iterations\ndefault ✓ [======================================] 100 VUs  5s\n\n     data_received..................: 182 kB 35 kB/s\n     data_sent......................: 96 kB  18 kB/s\n     http_req_blocked...............: avg=94.64µs  min=1.16µs  med=2.77µs   max=3.94ms   p(90)=12.51µs  p(95)=527.97µs\n     http_req_connecting............: avg=85.07µs  min=0s      med=0s       max=3.9ms    p(90)=0s       p(95)=445.8µs\n     http_req_duration..............: avg=426.35ms min=45.27ms med=389.96ms max=1.14s    p(90)=624.04ms p(95)=708.01ms\n       { expected_response:true }...: avg=426.35ms min=45.27ms med=389.96ms max=1.14s    p(90)=624.04ms p(95)=708.01ms\n     http_req_failed................: 0.00%  ✓ 0          ✗ 1200\n     http_req_receiving.............: avg=56.81µs  min=17.58µs med=53.07µs  max=221.64µs p(90)=80.59µs  p(95)=90.44µs\n     http_req_sending...............: avg=71.41µs  min=5.68µs  med=12.59µs  max=11.08ms  p(90)=31.09µs  p(95)=299.34µs\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=426.23ms min=44.99ms med=389.88ms max=1.14s    p(90)=623.97ms p(95)=707.95ms\n     http_reqs......................: 1200   229.542717/s\n     iteration_duration.............: avg=426.54ms min=49.05ms med=390.05ms max=1.14s    p(90)=624.12ms p(95)=708.14ms\n     iterations.....................: 1200   229.542717/s\n     vus............................: 100    min=100      max=100\n     vus_max........................: 100    min=100      max=100\n```\n\n----------------------------------------\n\nTITLE: Setting Default User-Agent Rules in robots.txt\nDESCRIPTION: Defines the default access rules for all web crawlers using the standard robots.txt syntax. Uses a wildcard User-agent to apply rules to all bots.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/ksql/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Changelog Bug Fix Entry - WebSocket Transport Queue Flush\nDESCRIPTION: Documents a bug fix for flushing the send queue in the WebSocket transport close() method to avoid race conditions.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ws-transport/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **client-ws-transport:** Flush send queue in close() to avoid race ([#9101](https://github.com/cube-js/cube/issues/9101)) ([d9bc147](https://github.com/cube-js/cube/commit/d9bc147a6ae1deb5e554d76c23a8ad0c3f0225a5))\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Cube\nDESCRIPTION: Creates a new directory for the Cube application and navigates into it. This is the first step in setting up Cube locally.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/superset/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir superset-example\ncd superset-example\n```\n\n----------------------------------------\n\nTITLE: Ejecting Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files directly into the project for full control\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-pivot-table/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Feature: Direct Kafka Download Support for KSQL Streams\nDESCRIPTION: Introduced direct Kafka download support for KSQL streams and tables, enhancing streaming data retrieval capabilities in Cube.js\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- **cubestore:** Direct kafka download support for ksql streams and tables\n```\n\n----------------------------------------\n\nTITLE: Playground Show Query Feature\nDESCRIPTION: This commit adds the Show Query feature to the Playground.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n- **playground:** Show Query ([dc45fcb](https://github.com/statsbotco/cubejs-client/commit/dc45fcb))\n```\n\n----------------------------------------\n\nTITLE: Fixing Corrupted Build on macOS ARM\nDESCRIPTION: Command sequence to resolve SIGKILL-related corruption issues on macOS ARM devices by removing and rebuilding the native module.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf index.node && yarn native:build && yarn test:unit\n```\n\n----------------------------------------\n\nTITLE: Linting Cube.js Vue Code\nDESCRIPTION: Command to run the linter and fix code style issues\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Running Vue Tests\nDESCRIPTION: Command to execute the test suite for the application.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Results for 30 Virtual Users Test\nDESCRIPTION: Output from running the k6 load test with 30 virtual users against Cube.js. Shows metrics including response times, request rates, and concurrent users with p90 response time of 370.08ms and p95 of 457.51ms.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nadnanrahic@instance-1:~/benchmarks$ k6 run -e vus=30 k6-cube.js\n\n          /\\      |‾‾| /‾‾/   /‾‾/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   ‾‾\\\n   /          \\   |  |\\  \\ |  (‾)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: k6-cube.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 30 max VUs, 35s max duration (incl. graceful stop):\n           * default: 30 looping VUs for 5s (gracefulStop: 30s)\n\n\nrunning (05.1s), 00/30 VUs, 850 complete and 0 interrupted iterations\ndefault ✓ [======================================] 30 VUs  5s\n\n     data_received..................: 129 kB 25 kB/s\n     data_sent......................: 68 kB  13 kB/s\n     http_req_blocked...............: avg=65.97µs  min=1.17µs  med=2.83µs   max=11.47ms  p(90)=4.64µs   p(95)=8.71µs\n     http_req_connecting............: avg=14.48µs  min=0s      med=0s       max=4.3ms    p(90)=0s       p(95)=0s\n     http_req_duration..............: avg=178.41ms min=19.13ms med=166.65ms max=585.11ms p(90)=370.08ms p(95)=457.51ms\n       { expected_response:true }...: avg=178.41ms min=19.13ms med=166.65ms max=585.11ms p(90)=370.08ms p(95)=457.51ms\n     http_req_failed................: 0.00%  ✓ 0          ✗ 850\n     http_req_receiving.............: avg=64.98µs  min=18.22µs med=60.94µs  max=439.96µs p(90)=90.05µs  p(95)=104.03µs\n     http_req_sending...............: avg=18.16µs  min=5.94µs  med=12.8µs   max=276.83µs p(90)=25.47µs  p(95)=39.29µs\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=178.33ms min=19.06ms med=166.56ms max=585.04ms p(90)=369.99ms p(95)=457.45ms\n     http_reqs......................: 850    166.506005/s\n     iteration_duration.............: avg=178.58ms min=19.21ms med=166.73ms max=585.17ms p(90)=370.16ms p(95)=457.58ms\n     iterations.....................: 850    166.506005/s\n     vus............................: 30     min=30       max=30\n     vus_max........................: 30     min=30       max=30\n```\n\n----------------------------------------\n\nTITLE: Add Snowflake Private Key Support\nDESCRIPTION: This commit adds support for configuring the Snowflake driver using a private key via the CUBEJS_DB_SNOWFLAKE_PRIVATE_KEY environment variable. This provides an alternative authentication method.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Installing Dependencies for cubejs-vue-playground\nDESCRIPTION: Command to install all required dependencies for the cubejs-vue-playground project using Yarn package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Feature Addition Entry\nDESCRIPTION: Entry documenting addition of Sockets Preview feature with associated issue references\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-server/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nSockets Preview ([#231](https://github.com/statsbotco/cubejs-client/issues/231)) ([89fc762](https://github.com/statsbotco/cubejs-client/commit/89fc762)), closes [#221](https://github.com/statsbotco/cubejs-client/issues/221)\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Logs Sink in Vector for Cube Cloud\nDESCRIPTION: Example configuration for exporting logs from Cube Cloud to New Relic using the Vector sink. This setup uses the 'logs' API endpoint, specifies the EU region, and includes inputs from various Cube Cloud components.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/monitoring/new-relic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sinks.new_relic_logs]\ntype = \"new_relic\"\napi = \"logs\"\ninputs = [\n  \"cubejs-server\",\n  \"refresh-scheduler\",\n  \"warmup-job\",\n  \"cubestore\"\n]\nregion = \"eu\"\ncompression = \"gzip\"\naccount_id = \"$CUBE_CLOUD_MONITORING_NEW_RELIC_ACCOUNT_ID\"\nlicense_key = \"$CUBE_CLOUD_MONITORING_NEW_RELIC_LICENSE_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: The npm start command runs the React application in development mode with hot reloading enabled. It automatically opens the application in a browser at http://localhost:3000.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/external-rollups/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing centralized concurrency setting in Cube.js\nDESCRIPTION: This feature adds a centralized concurrency setting to Cube.js, which likely affects how database queries are managed across different database drivers including MSSQL.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- centralized concurrency setting ([#4735](https://github.com/cube-js/cube.js/issues/4735)) ([1c897a1](https://github.com/cube-js/cube.js/commit/1c897a13c62049e23d26009351622b2a93c0a745))\n```\n\n----------------------------------------\n\nTITLE: Remove unexpected console.log\nDESCRIPTION: This bug fix removes an unintended `console.log` statement from the Dremio driver's code.  The removal of the console log reduces unnecessary output and potential performance overhead. This is considered a clean-up fix as it ensures the code behaves as intended without any unexpected side effects.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dremio-driver/CHANGELOG.md#2025-04-17_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Cloud Drivers in Shell\nDESCRIPTION: Commands to run end-to-end tests for Athena and BigQuery drivers in both local and Docker modes. These tests use the environment variables set earlier.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd packages/cubejs-testing\n\n$ env $(cat ~/.env.athena | xargs) yarn smoke:athena --mode=local\n$ env $(cat ~/.env.bigquery | xargs) yarn smoke:bigquery --mode=local\n\n$ env $(cat ~/.env.athena | xargs) yarn smoke:athena --mode=docker\n$ env $(cat ~/.env.bigquery | xargs) yarn smoke:bigquery --mode=docker\n```\n\n----------------------------------------\n\nTITLE: Adding Angular query builder feature\nDESCRIPTION: Commit adding query builder functionality for Angular applications using Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n([ea088b3]) angular query builder\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the entire website. The file references the robots.txt standard specification and sets no crawling restrictions.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/mapbox/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Heavy Pre-aggregation Error Message\nDESCRIPTION: Error message shown when pre-aggregation building times out after 10 minutes, indicating the pre-aggregation is too large or complex to build within the default timeout period.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/caching/running-in-production.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nError: Error during create table: CREATE TABLE <REDACTED>\nError: Query execution timeout after 10 min of waiting\n```\n\n----------------------------------------\n\nTITLE: Running k6 Load Test with 200 Virtual Users\nDESCRIPTION: Command to execute k6 load test with 200 virtual users against a Cube.js instance. The test simulates 200 concurrent users making requests to the Cube.js API for 5 seconds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=200 k6-cube.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Default robots.txt configuration that allows all web crawlers to access the entire website. The file references the robotstxt.org standard and includes settings that permit full access to any bot or crawler.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-blending/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Client React API Method\nDESCRIPTION: This commit provides isQueryPresent() as static API method for client-react.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-react/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n- **client-react:** provide isQueryPresent() as static API method ([59dc5ce](https://github.com/statsbotco/cubejs-client/commit/59dc5ce))\n```\n\n----------------------------------------\n\nTITLE: Adding CUBEJS_PG_SQL_PORT Env Support\nDESCRIPTION: This feature adds environment variable support for `CUBEJS_PG_SQL_PORT` and includes SQL API reference documentation. This allows users to configure the PostgreSQL SQL port via environment variables, enhancing deployment flexibility. This also provides better documentation for the SQL API.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Add CUBEJS_PG_SQL_PORT env support and SQL API reference docs ([#4531](https://github.com/cube-js/cube.js/issues/4531)) ([de60d71](https://github.com/cube-js/cube.js/commit/de60d71c360be47e3231e7eafa349b9a0fddd244))\"\n```\n\n----------------------------------------\n\nTITLE: K6 10 User Load Test Command\nDESCRIPTION: Command to execute K6 load test with 10 virtual users\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=10 k6-pg.js\n```\n\n----------------------------------------\n\nTITLE: Deploying the Cube.js project to AWS using Serverless Framework\nDESCRIPTION: This command deploys the project to AWS using Serverless Framework. It requires AWS credentials to be set up beforehand. The -v flag enables verbose output for detailed deployment information.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/aws-web-analytics/event-collection/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy -v\n```\n\n----------------------------------------\n\nTITLE: Supporting rolling countDistinctApprox rollups in Cube.js\nDESCRIPTION: This bug fix enables the use of rolling windows with `countDistinctApprox` rollups in Cube.js. It addresses an issue where this combination was previously unsupported. Further details can be found in commit e731992.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: none\nCODE:\n```\ne731992\n```\n\n----------------------------------------\n\nTITLE: Adding dynamic Angular template support for Cube.js\nDESCRIPTION: Commit introducing dynamic Angular template functionality to the Cube.js client library.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n([86ba728]) Dynamic Angular template\n```\n\n----------------------------------------\n\nTITLE: Installing LKML2Cube Package\nDESCRIPTION: Command to install the lkml2cube package from PyPI using pip package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/lkml2cube.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install lkml2cube\n```\n\n----------------------------------------\n\nTITLE: Fixing incorrect filter types in query\nDESCRIPTION: Bug fix addressing incorrect TypeScript types for logical AND/OR operators in query filters.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n([d7014a2]) incorrect types for logical and/or in query filters\n```\n\n----------------------------------------\n\nTITLE: Starting React Frontend Application\nDESCRIPTION: Commands to navigate to the dashboard frontend directory, install dependencies, and start the React application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd dashboard-app\n$ yarn\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Version Update History in Markdown\nDESCRIPTION: Changelog entries showing version bumps for the @cubejs-backend/crate-driver package, tracking changes from version 0.33.25 through 0.34.24\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-crate-driver/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.34.24](https://github.com/cube-js/cube/compare/v0.34.23...v0.34.24) (2023-11-23)\n\n**Note:** Version bump only for package @cubejs-backend/crate-driver\n```\n\n----------------------------------------\n\nTITLE: Setting Measure Visibility in Cube.js (JavaScript)\nDESCRIPTION: Illustrates how to control the visibility of measures in a Cube.js data model using JavaScript syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`orders`, {\n  // ...\n\n  measures: {\n    orders_count: {\n      sql: `id`,\n      type: `count`,\n      public: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Supporting CUBEJS_DB_EXPORT_BUCKET - Javascript\nDESCRIPTION: This feature adds support for the `CUBEJS_DB_EXPORT_BUCKET` environment variable in the BigQuery driver. This allows users to specify the bucket to use when exporting data from BigQuery.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **bigquery-driver:** Support CUBEJS_DB_EXPORT_BUCKET ([400c163](https://github.com/cube-js/cube.js/commit/400c1632e978de6c00b4c996088d1b61a9223404))\n```\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: The npm run eject command removes the abstraction layer of Create React App, exposing all configuration files and dependencies. This is a one-way operation that gives full control over the build configuration.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/external-rollups/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Environment Version Requirements\nDESCRIPTION: Specifies the tested versions of various components including Kubernetes API, kubectl, and Docker for this configuration setup.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/kubernetes/minikube/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTested with:\\n- `apiVersion: v1`.\\n- `Kubernetes v1.21.2`\\n- `kubectl v1.22.1`\\n- `Docker 20.10.7`\n```\n\n----------------------------------------\n\nTITLE: Complete AI Query Response With Query Results\nDESCRIPTION: Full JSON response showing both the generated query and its execution results, including data, annotations, and metadata.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api/reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"To find the city with the highest average order value for last year, we'll analyze the data by city and calculate the average order value for each. The query will group the results by users' city and sort them to identify the city with the highest average order value.\",\n    \"cube_query\": {\n        \"measures\": [\n            \"orders_view.average_order_value\"\n        ],\n        \"dimensions\": [\n            \"orders_view.users_city\"\n        ],\n        \"timeDimensions\": [\n            {\n                \"dimension\": \"orders_view.created_at\",\n                \"dateRange\": \"last year\",\n                \"granularity\": \"year\"\n            }\n        ],\n        \"order\": {\n            \"orders_view.average_order_value\": \"desc\"\n        },\n        \"limit\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with Yarn\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/auth0/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Standard changelog format following Conventional Commits specification, documenting version bumps and package updates over time.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dbt-schema-extension/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-backend/dbt-schema-extension\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fix Package.json Missing Files\nDESCRIPTION: Fix for missing files in package.json for CubeStore driver\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n**@cubejs-backend/cubstore-driver:** Missing files in package.json ([487f4cc](https://github.com/cube-js/cube.js/commit/487f4ccbc74356db3d1de1644d157bae3a3c6ba6))\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with npm\nDESCRIPTION: Builds the React app for production, creating an optimized bundle in the 'build' folder ready for deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/clickhouse-dashboard/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Splitting Base Driver\nDESCRIPTION: This code snippet describes the splitting of the BaseDriver into a separate package, @cubejs-backend/base-driver.  This separation likely improves modularity and allows other packages to depend on the base driver without pulling in the entire @cubejs-backend package. The associated commit provides more detailed information about the splitting process.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-questdb-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Other\nCODE:\n```\n### Features\n\n- **base-driver:** Split BaseDriver to @cubejs-backend/base-driver ([#5283](https://github.com/cube-js/cube.js/issues/5283)) ([ca7f9d2](https://github.com/cube-js/cube.js/commit/ca7f9d280c3518e012683c23b82175ec1f96d2a8))\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers\nDESCRIPTION: Command to start the Docker containers in detached mode using docker-compose.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/data-sources/questdb.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table\nDESCRIPTION: Creates the users table structure with columns for user details including id, city, age, gender, state, name, and created_at.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/cloud/load-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cube_demo.ecom.users\n( id INTEGER,\n  city VARCHAR,\n  age INTEGER,\n  gender VARCHAR,\n  state VARCHAR,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  created_at TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Configuration\nDESCRIPTION: Database connection parameters for the test PostgreSQL instance running on Google Cloud with TPC-H dataset\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhost: 'demo-db-examples.cube.dev'\ndatabase: 'tpch'\nport: 5432\nuser: 'cube'\npassword: '12345'\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies directly into the project, giving full control over the configuration but preventing reversal of this operation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-data-table/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Changelog Header in Markdown\nDESCRIPTION: Standard changelog header with link to conventional commits guidelines\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm\nDESCRIPTION: Ejects the project from Create React App, exposing all configurations and dependencies for full control. This is a one-way operation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/clickhouse-dashboard/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database\nDESCRIPTION: This command is used to connect to a MySQL database server from the terminal. It specifies the user, host, and port, alongside options for SSL mode and password authentication. Notably, the connection is made to a server that is set up to disable SSL to facilitate a local development environment.\nSOURCE: https://github.com/cube-js/cube/blob/master/rust/cubesql/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -h 127.0.0.1 --ssl-mode=disabled -u root --password=test --port 4444\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Permissions\nDESCRIPTION: Basic robots.txt configuration that allows all user agents (*) unrestricted access to the site by not specifying any Disallow directives. References the robotstxt.org standard.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-data-table/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Fixing MongoDB Authentication API deprecation\nDESCRIPTION: This commit addresses the deprecation of the `authSwitchHandler` API in the MongoDB BI connector driver. It suggests using the new `authPlugins` API as a replacement for handling authentication.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mongobi-driver/CHANGELOG.md#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Cube.js CLI tests\nDESCRIPTION: Command to run the test suite for the Cube.js CLI package. This is useful for developers contributing to the CLI package.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cli/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Application\nDESCRIPTION: Commands to navigate to dashboard directory, install dependencies and start the frontend server\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-query-builder/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd dashboard-app\n$ yarn\n$ yarn serve\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Links Format\nDESCRIPTION: Example of the standardized version compare links used throughout the changelog to reference GitHub commits between versions.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-linter/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n```\n\n----------------------------------------\n\nTITLE: Loading Tenant-Specific Data Models from Disk\nDESCRIPTION: Configuration that loads data model files from tenant-specific directories using the repository_factory option with file_repository utility. This approach allows maintaining completely separate data model files for each tenant.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/multitenancy/custom-data-model-per-tenant.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom cube import config, file_repository\n \n@config('repository_factory')\ndef repository_factory(ctx: dict) -> list[dict]:\n  return file_repository(f\"model/{ctx['securityContext']['tenant_id']}\")\n\n# Other configuration options, e.g., for multitenancy, etc.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FileRepository } = require(\"@cubejs-backend/server-core\")\n \nmodule.exports = {\n  repositoryFactory: ({ securityContext }) => {\n    return new FileRepository(`model/${securityContext.tenant_id}`)\n  }\n\n  // Other configuration options, e.g., for multitenancy, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Improve Error Messages\nDESCRIPTION: This feature improves the quality and clarity of error messages within CubeSQL. This improvement enhances the debugging process. Improved error messages provide more specific and helpful guidance.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Improve error messages ([#3829](https://github.com/cube-js/cube.js/issues/3829)) ([8293e52](https://github.com/cube-js/cube.js/commit/8293e52a4a509e8559949d8af6446ef8a04e33f5))\"\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application, with output stored in the dist/ directory. Includes option for production builds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Reporting Request Duration Percentiles for 10 Concurrent Users using Node.js\nDESCRIPTION: This snippet reports the performance metrics for a Node.js application using node-postgres to access PostgreSQL with 10 concurrent requests, providing key performance indicators (KPIs) as percentiles.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"p(90)=3.4s\\np(95)=3.72s\"\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Query with Ordering on Cube\nDESCRIPTION: This SQL query demonstrates a more complex query with subquery, aggregation, and ordering that may require post-processing for the ORDER BY clause.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/sql-api/query-format.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  status,\n  SUM(total_value) + 2 AS transformed_amount\nFROM (\n  SELECT * FROM orders\n) AS orders\nGROUP BY status\nORDER BY status DESC\nLIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Feature: Add Firebolt driver\nDESCRIPTION: This feature adds a new Firebolt driver to Cube.js. This driver allows Cube.js to connect and query data from Firebolt databases, enabling efficient data analysis on the Firebolt platform.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Standard changelog format documenting version history with links to commits and conventional commit guidelines\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-crate-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-backend/crate-driver\n```\n\n----------------------------------------\n\nTITLE: Table Column Definition Example\nDESCRIPTION: Shows the structure of column definitions returned by the tableColumns method.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/javascript-sdk/reference/cubejs-client-core.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    key: 'Stories.time',\n    dataIndex: 'Stories.time',\n    title: 'Stories Time',\n    shortTitle: 'Time',\n    type: 'time',\n    format: undefined,\n  },\n  {\n    key: 'Stories.count',\n    dataIndex: 'Stories.count',\n    title: 'Stories Count',\n    shortTitle: 'Count',\n    type: 'count',\n    format: undefined,\n  },\n  //...\n]\n```\n\n----------------------------------------\n\nTITLE: Running tests with Yarn in Create React App\nDESCRIPTION: Launches the test runner in interactive watch mode, which will automatically re-run tests when files change.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multitenancy-workshop/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Introduce Official Docker Image\nDESCRIPTION: This snippet describes the introduction of the official Docker image for Cube.js. It was introduced in version 0.21.1 of Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-druid-driver/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Introduce Official Docker Image ([#1201](https://github.com/cube-js/cube.js/issues/1201)) ([0647d1f](https://github.com/cube-js/cube.js/commit/0647d1f))\n```\n\n----------------------------------------\n\nTITLE: Key Response Time Metrics for 50 VUs\nDESCRIPTION: Condensed response time metrics for the 90th and 95th percentiles from the 50 virtual users test, showing that Cube.js still responds within half a second under increased load.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=498.55ms \np(95)=607.99ms\n```\n\n----------------------------------------\n\nTITLE: Implement rewrites for SELECT * FROM WHERE 1=0\nDESCRIPTION: This feature implements rewrite rules for `SELECT * FROM WHERE 1=0` queries in CubeSQL. Such queries typically return an empty result set, and this rewrite optimizes their execution. This enhances query performance by avoiding unnecessary data processing.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Implement rewrites for SELECT * FROM WHERE 1=0 ([#4427](https://github.com/cube-js/cube.js/issues/4427)) ([0c9abd1](https://github.com/cube-js/cube.js/commit/0c9abd1bde7c5492c42340f75e020dc09228908b))\"\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Yarn in React App\nDESCRIPTION: Starts the React application in development mode, which enables live reloading and error reporting in the console. The app will be accessible at http://localhost:3000 in the browser.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/hacktoberfest/dashboard/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: PR Reference Format\nDESCRIPTION: Examples of pull request reference formatting in the changelog\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-api-gateway/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#9386](https://github.com/cube-js/cube/issues/9386)\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Control with robots.txt\nDESCRIPTION: A standard robots.txt configuration that references the robotstxt.org specification and allows full access to all user agents by not specifying any disallowed paths.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/highcharts/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Headers\nDESCRIPTION: Markdown headers showing version numbers and dates of releases\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-shared/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n## [1.3.2](https://github.com/cube-js/cube/compare/v1.3.1...v1.3.2) (2025-04-16)\n\n## [1.3.1](https://github.com/cube-js/cube/compare/v1.3.0...v1.3.1) (2025-04-14)\n```\n\n----------------------------------------\n\nTITLE: Example Express-Based package.json Configuration for Cube.js\nDESCRIPTION: Shows the structure of a package.json file for an Express-based Cube.js application before migration to Docker, with dependencies for Postgres driver and server.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/upgrading-cube/migrating-from-express-to-docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cube-app\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"node index.js\"\n  },\n  \"dependencies\": {\n    \"@cubejs-backend/postgres-driver\": \"^0.20.0\",\n    \"@cubejs-backend/server\": \"^0.20.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Resource Diagram in Markdown\nDESCRIPTION: This code snippet embeds an image showing a high-level diagram of Cube Cloud resources deployed on Azure. It uses HTML within a Markdown file to center the image and apply custom styling.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/deployment/cloud/byoc/azure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div style={{ textAlign: \"center\" }}>\n  <img\n    alt=\"High-level diagram of Cube Cloud resources deployed on Azure\"\n    src=\"https://ucarecdn.com/6d0f12db-086c-4274-b165-da68ccc381a9/\"\n    style={{ border: \"none\" }}\n    width=\"100%\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running the React Material UI Frontend\nDESCRIPTION: Commands to navigate to the dashboard application directory, install dependencies, and start the React development server. This launches the Material UI dashboard that connects to the Cube.js backend.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd dashboard-app\n$ yarn\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Fixing Driver Imports Alignment\nDESCRIPTION: This code snippet represents a bug fix related to aligning driver imports within the Cube.js project. It addresses an issue where driver imports were not correctly aligned, potentially causing errors or inconsistencies.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-questdb-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\n### Bug Fixes\n\n- drivers imports alignment ([#5448](https://github.com/cube-js/cube.js/issues/5448)) ([ab12426](https://github.com/cube-js/cube.js/commit/ab1242650ba0368b855176b9c6ca2d73073acf0e))\n```\n\n----------------------------------------\n\nTITLE: Support generate_subscripts UDTF\nDESCRIPTION: This feature adds support for the `generate_subscripts` User-Defined Table Function (UDTF) in CubeSQL. This function generates a series of subscripts for an array dimension.  This provides advanced array processing capabilities.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: Support generate_subscripts UDTF ([a29551a](https://github.com/cube-js/cube.js/commit/a29551a402f323541a1b10523f3478f9ae284989))\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Importing PostgreSQL Example Dataset\nDESCRIPTION: Commands to download an example e-commerce dataset, create a PostgreSQL database, and import the data into it.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://cube.dev/downloads/ecom-dump.sql > ecom-dump.sql\n$ createdb ecom\n$ psql --dbname ecom -f ecom-dump.sql\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-pivot-table/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Playground Query Features\nDESCRIPTION: Addition of query tabs and query history preservation features to the Cube.js playground client\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-testing/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **@cubejs-client/playground:** query tabs, preserve query history ([#2915](https://github.com/cube-js/cube.js/issues/2915)) ([d794d9e](https://github.com/cube-js/cube.js/commit/d794d9ec1281a2bc66a9194496df0eeb97936217))\n```\n\n----------------------------------------\n\nTITLE: Commit Link for Bug Fix\nDESCRIPTION: Markdown link referencing a specific commit that fixes issue #1972\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-linter/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[dac7e52](https://github.com/cube-js/cube.js/commit/dac7e52ee0d3a118c9d69c9d030e58a3c048cca1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Original SQL and Rollup Pre-aggregations in YAML\nDESCRIPTION: YAML configuration example showing how to set up an original_sql pre-aggregation 'base' and a rollup pre-aggregation 'main' that uses it. The original_sql pre-aggregation materializes complex SQL query results, while the rollup creates aggregations with specific dimensions and measures.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/query-acceleration/using-originalsql-and-rollups-effectively.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql: \"<YOUR_EXPENSIVE_SQL_QUERY HERE>\"\n\n    pre_aggregations:\n      - name: base\n        type: original_sql\n        external: false\n\n      - name: main\n        dimensions:\n          - id\n          - name\n        measures:\n          - count\n        time_dimension: created_at\n        granularity: day\n        use_original_sql_pre_aggregations: true\n```\n\n----------------------------------------\n\nTITLE: Defining 'orders' Cube in YAML\nDESCRIPTION: This YAML snippet defines an 'orders' cube with a count measure and status and created dimensions. It specifies the SQL table and the structure of the data model for use with Cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/configuration/visualization-tools/superset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    sql_table: orders\n\n    measures:\n      - name: count\n        type: count\n\n    dimensions:\n      - name: status\n        sql: status\n        type: string\n\n      - name: created\n        sql: created_at\n        type: time\n```\n\n----------------------------------------\n\nTITLE: Ejecting configuration with Yarn in Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project. This is a one-way operation that gives full control over the build tools.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multitenancy-workshop/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Handling BigQuery Dataset Permissions\nDESCRIPTION: Modifies the BigQuery driver to ignore datasets where the authenticated user lacks proper permissions, preventing errors.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-bigquery-driver/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nIgnore dataSets with wrong permissions\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows all user agents (crawlers) full access to the website. Uses standard robots exclusion protocol syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/clickhouse-dashboard/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Bug Fix\nDESCRIPTION: Git commit hash and URL reference for fixing partitioned pre-aggregations and column values issue in Athena driver.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-base-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1214cab](https://github.com/cube-js/cube/commit/1214cabf69f9e6216c516d05acadfe7e6178cccf)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Standard changelog entry showing version comparison and package note\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-dbt-schema-extension/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.31.68](https://github.com/cube-js/cube.js/compare/v0.31.67...v0.31.68) (2023-02-28)\n\n**Note:** Version bump only for package @cubejs-backend/dbt-schema-extension\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with Yarn\nDESCRIPTION: Removes the Create React App build dependency and copies all configuration files into the project for full customization. This is a one-way operation that cannot be reversed.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/hacktoberfest/dashboard/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Upgrading SQLite3 Dependency in Cube.js\nDESCRIPTION: Upgrade of sqlite3 package from version 4.2.0 to 5.0.2, improving compatibility and potential performance for SQLite database connections\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-sqlite-driver/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"sqlite3\": \"5.0.2\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Schema Compiler in Oracle Driver\nDESCRIPTION: Move create table name check to underlying driver implementation for Postgres, MySQL, and Oracle databases. This change was implemented in version 1.1.17.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-oracle-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **schema-compiler:** Move create table name check to underlying driver for Postgres, MySQL, Oracle ([#9112](https://github.com/cube-js/cube/issues/9112)) ([5fb81cc](https://github.com/cube-js/cube/commit/5fb81ccce7229c6e08a11f21957af2aa8929ad06))\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the local development server on port 4200 with auto-reload capability\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissive Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (user agents) to access the entire website. The file includes a reference link to the official robotstxt.org documentation.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/graphql-api-metrics-dashboard/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Node.js PostgreSQL API Server\nDESCRIPTION: Command to start the Node.js server using direct PostgreSQL connection\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode pg-api.js\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Command to eject from Create React App and expose all configurations. This is a one-way operation that gives full control over build tools and configs.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multi-tenant-analytics/dashboard-app/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Descriptive Error Messages in CubeSQL\nDESCRIPTION: This feature improves error messages generated by CubeSQL, making them more descriptive and easier to understand. Better error messages help developers debug and resolve issues more efficiently. This contributes to a better developer experience when working with Cube.js.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-backend-native/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n\"cubesql: More descriptive error messages ([812db77](https://github.com/cube-js/cube.js/commit/812db772a651e0df1f7bc0d1dba97192c65ea834))\"\n```\n\n----------------------------------------\n\nTITLE: MSSQL Driver Version Update\nDESCRIPTION: Recent commits show improvement in MSSQL driver with connection validation and logging support in version 0.32.2.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mssql-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- connection validation and logging ([#6233](https://github.com/cube-js/cube.js/issues/6233)) ([6dc48f8](https://github.com/cube-js/cube.js/commit/6dc48f8dc8045234dfa9fe8922534c5204e6e569))\n```\n\n----------------------------------------\n\nTITLE: Starting Vizard Development Server\nDESCRIPTION: Command to start the development server for local development.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to execute Protractor-based end-to-end tests for the Angular application\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/angular-dashboard-with-material-ui/dashboard-app/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pip\nDESCRIPTION: Command to install required Python dependencies from requirements.txt file. This is needed before running the Streamlit application.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/langchain/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container with BigQuery Credentials\nDESCRIPTION: Launches the PostgreSQL Docker container with BigQuery credentials loaded from the environment file. Sets up the comparison benchmark environment using PostgreSQL as an alternative to Cube Store.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/cubestore-benchmark/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv $(cat ~/.env.bigquery | xargs) docker-compose -p cubejs-postgres -f cubejs-postgres/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Angular Files Configuration Fix\nDESCRIPTION: Bug fix for missing client.ts file in TypeScript compilation\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-ngx/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n**client-ngx:** client.ts is missing from the TypeScript compilation. Fix files ([f4885b4](https://github.com/statsbotco/cubejs-client/commit/f4885b4))\n```\n\n----------------------------------------\n\nTITLE: Git Commit URL Formats\nDESCRIPTION: Examples of Git commit and comparison URLs used in the changelog\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-api-gateway/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[409d74d](https://github.com/cube-js/cube/commit/409d74db8c5ac5a314e1e3e7b872586f538713d1)\n```\n\n----------------------------------------\n\nTITLE: Handling UNLOAD for Empty Tables in Snowflake Driver - Javascript\nDESCRIPTION: This code snippet describes a bug fix in the snowflake driver that handles the `UNLOAD` operation for empty tables.  The fix ensures that the `UNLOAD` command functions correctly even when the target table contains no data, preventing potential errors or crashes.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **snowflake-driver:** Handle UNLOAD for empty tables ([f5f69ff](https://github.com/cube-js/cube.js/commit/f5f69ff79371bdd33526ffa0cc8634a0f30fc9f4))\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (represented by the wildcard '*') to access the entire website. The empty 'Disallow:' directive indicates no restrictions are placed on crawling.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/compare-date-range/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode with npm\nDESCRIPTION: Starts the React application in development mode, making it available at localhost:3000 with hot-reloading enabled for edits and lint error reporting in the console.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-data-table/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Timestamp Format\nDESCRIPTION: Error occurs when the data source cannot recognize the value of a time dimension as a valid timestamp.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCan't parse timestamp: 2023-11-07T14:33:23.16.000\n```\n\n----------------------------------------\n\nTITLE: Previewing Built Vizard Application\nDESCRIPTION: Command to preview the built application before deployment.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn preview\n```\n\n----------------------------------------\n\nTITLE: K6 Cube Load Test Command\nDESCRIPTION: Command to execute K6 load test for Cube API with 10 virtual users\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nk6 run -e vus=10 k6-cube.js\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format used for documenting version changes following Conventional Commits guidelines\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-mysql-aurora-serverless-driver/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.3.3](https://github.com/cube-js/cube/compare/v1.3.2...v1.3.3) (2025-04-16)\n\n**Note:** Version bump only for package @cubejs-backend/mysql-aurora-serverless-driver\n```\n\n----------------------------------------\n\nTITLE: Version Updates - Markdown Changelog\nDESCRIPTION: Markdown formatted changelog documenting version changes, bug fixes, and features for the CubeJS Playground package including commit links and issue references.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.2.4](https://github.com/cube-js/cube/compare/v1.2.3...v1.2.4) (2025-02-11)\n\n### Bug Fixes\n\n- **cubejs-playground:** update query builder ([#9201](https://github.com/cube-js/cube/issues/9201)) ([f8e523b](https://github.com/cube-js/cube/commit/f8e523bbf815b2fb3fb8eb036d04cc3bf4db206d))\n```\n\n----------------------------------------\n\nTITLE: Setting up GCP Credentials for BigQuery API\nDESCRIPTION: Commands to set up Google Cloud Platform credentials for accessing the BigQuery API. This involves exporting the path to the key file as an environment variable.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/bigquery/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/key.json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$(pwd)/key.json\"\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query Example\nDESCRIPTION: Shows the final SQL query generated by Cube.js when querying the count and name members from the dynamically defined customers cube.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/dynamic-union-tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"customers\".name \"customers__name\",\n  count(*) \"customers__count\"\nFROM\n  (\n    SELECT\n      *,\n      'Einstein' AS name\n    FROM\n      einstein_data\n    UNION ALL\n    SELECT\n      *,\n      'Pascal' AS name\n    FROM\n      pascal_data\n    UNION ALL\n    SELECT\n      *,\n      'Newton' AS name\n    FROM\n      newton_data\n  ) AS \"customers\"\nGROUP BY\n  1\nORDER BY\n  2 DESC\n```\n\n----------------------------------------\n\nTITLE: Fixing Intervals Syntax in Cubestore Driver - Javascript\nDESCRIPTION: This code snippet addresses a bug fix related to the syntax for Intervals within the cubestore driver. It ensures the correct syntax is used for specifying intervals, resolving potential errors or unexpected behavior when working with time-based data.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-cubestore-driver/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```\n- **cubestore-driver:** Use correct syntax for Intervals ([53392d7](https://github.com/cube-js/cube.js/commit/53392d7b91c8308f033fa23a303ade265af30912))\n```\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin v1.1 Full Text\nDESCRIPTION: The complete text of the Developer's Certificate of Origin version 1.1, which defines the terms and conditions under which contributions are made to the project. It outlines four key certifications regarding the origin and licensing of contributions.\nSOURCE: https://github.com/cube-js/cube/blob/master/DCO.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Installing Java for JDBC Driver on Windows\nDESCRIPTION: Command for installing OpenJDK on Windows using Chocolatey package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchoco install openjdk\n```\n\n----------------------------------------\n\nTITLE: Key Response Time Metrics for 200 VUs\nDESCRIPTION: Condensed response time metrics for the 90th and 95th percentiles from the 200 virtual users test, showing that Cube.js begins to experience performance degradation at this concurrency level with response times exceeding 1.5 seconds.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\np(90)=1.51s\np(95)=1.63s\n```\n\n----------------------------------------\n\nTITLE: One-to-One Join Example (Users to Profiles)\nDESCRIPTION: Example demonstrating a one-to-one relationship join between users and profiles cubes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/joins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncube(`users`, {\n  // ...\n\n  joins: {\n    profiles: {\n      relationship: `one_to_one`,\n      sql: `${CUBE}.id = ${profiles.user_id}`,\n    },\n  },\n});\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: users\n    # ...\n\n    joins:\n      - name: profiles\n        relationship: one_to_one\n        sql: \"{users}.id = {profiles.user_id}\"\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests for the Angular application using Protractor testing framework.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/dynamic-angular-dashboard/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Java for JDBC Driver on Fedora/RHEL\nDESCRIPTION: Command for installing OpenJDK 8 on Red Hat-based Linux distributions using yum package manager.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-jdbc-driver/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsu -c \"yum install java-1.8.0-openjdk\"\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Command to launch the test runner in interactive watch mode for running project tests\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multi-tenant-analytics/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Vizard Application\nDESCRIPTION: Command to build the production version of the application.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-playground/vizard/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Commit - Fix Databricks Identifier Quotes\nDESCRIPTION: Git commit fixing the handling of identifier quotes in Databricks SQL queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-databricks-jdbc-driver/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\na20f4b2d55c8d0235d327fc0d0cc0c2f587bcd02\n```\n\n----------------------------------------\n\nTITLE: Running React Test Runner with Yarn\nDESCRIPTION: Command to launch the test runner in interactive watch mode, which monitors for changes and automatically runs tests affected by code modifications.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/building-a-data-app-with-cube-workshop/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Interactive Watch Mode\nDESCRIPTION: Launches the test runner in interactive watch mode, which automatically re-runs tests when files are changed.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-data-table/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute the project's test suite to verify functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/vue-dashboard/frontend/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Running React Tests in Watch Mode\nDESCRIPTION: The npm test command launches the interactive test runner which watches for changes and re-runs tests automatically. This is useful for test-driven development workflows.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/external-rollups/dashboard-app/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm run eject\nDESCRIPTION: Removes the build dependency and copies all configuration files directly into the project. This gives full control over the configuration but is irreversible.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/react-muze/dashboard-app/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Vue3 Client Bug Fix - Remove Offset Warning\nDESCRIPTION: Fix for removeOffset warning in version 0.30.46\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-vue3/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **@cubejs-client/vue3:** fix removeOffset warning ([#5082](https://github.com/cube-js/cube.js/issues/5082)) ([#5083](https://github.com/cube-js/cube.js/issues/5083)) ([e1d427b](https://github.com/cube-js/cube.js/commit/e1d427b84aa0b484c9d255b536a4a0b2abab6054))\n```\n\n----------------------------------------\n\nTITLE: Feature Addition: New Client Dependency\nDESCRIPTION: Introduction of new dependency for Cube.js Client in version 0.29.5.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-client-dx/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **@cubejs-client/dx:** introduce new dependency for Cube.js Client ([5bfaf1c](https://github.com/cube-js/cube.js/commit/5bfaf1cf99d68dfcdddb04f2b3151ad451657ff9))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Driver Imports Alignment\nDESCRIPTION: Resolved import inconsistencies across different driver implementations to improve module compatibility\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-ksql-driver/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- drivers imports alignment\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Layer Sync for Superset in JavaScript\nDESCRIPTION: This JavaScript code configures Semantic Layer Sync for Apache Superset. It exports a function that returns an array with the configuration object, including credentials and settings for connecting to Superset.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-bi.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  semanticLayerSync: ({ securityContext }) => {\n    return [\n      {\n        type: \"superset\",\n        name: \"Superset Sync\",\n        config: {\n          user: \"mail@example.com\",\n          password: \"4dceae-606a03-93ae6dc7\",\n          url: \"superset.example.com\",\n          database: \"Cube Cloud: production-deployment\",\n        },\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Debugging LookML View Files\nDESCRIPTION: Command to parse and display LookML view files as Python dictionary representation for debugging purposes.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/python/lkml2cube.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlkml2cube cubes --parseonly path/to/file.view.lkml\n```\n\n----------------------------------------\n\nTITLE: Querying with Dynamic Parameters in Cube.js\nDESCRIPTION: A sample query that demonstrates how to use the dynamic parameter filtering capability. The query requests the total number of women, people in a specific city (Seattle), and the calculated ratio between them.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-modeling/passing-dynamic-parameters-in-a-query.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"measures\": [\n    \"users.total_number_of_women\",\n    \"users.number_of_people_of_any_gender_in_the_city\",\n    \"users.ratio\"\n  ],\n  \"filters\": [\n    {\n      \"member\": \"users.city_filter\",\n      \"operator\": \"equals\",\n      \"values\": [\"Seattle\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers to access and index the entire website. The 'User-agent: *' targets all bots, and 'Disallow:' with no path specified means no restrictions are applied.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multitenancy-workshop/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: AI Query Response Without Query Execution\nDESCRIPTION: Example JSON response showing the generated Cube query structure and explanation message without executing the query.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/ai-api/reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"To find the cities with the highest Average Order Value (AOV) this year, we can use the Orders View. This query will aggregate data to calculate the average order value per city for the current year.\",\n  \"cube_query\": {\n    \"measures\": [\"orders_view.average_order_value\"],\n    \"dimensions\": [\"orders_view.users_city\"],\n    \"timeDimensions\": [\n      {\n        \"dimension\": \"orders_view.created_at\",\n        \"granularity\": \"year\",\n        \"dateRange\": \"this year\"\n      }\n    ],\n    \"order\": {\n      \"orders_view.average_order_value\": \"desc\"\n    },\n    \"limit\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Request Duration Percentiles for 100 Concurrent Users using Cube Cloud\nDESCRIPTION: This snippet captures the performance metrics for a Node.js application using Cube Cloud to access PostgreSQL with 100 concurrent requests, indicating the scalability and efficiency of the approach.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"p(90)=624.04ms\\np(95)=708.01ms\"\n```\n\n----------------------------------------\n\nTITLE: Reporting Request Duration Percentiles for 10 Concurrent Users using Cube Cloud\nDESCRIPTION: This snippet reports the performance metrics for a Node.js application using Cube Cloud to access PostgreSQL with 10 concurrent requests, showcasing the highly efficient response times.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/data-warehouse-performance-benchmarks/postgres/readme.md#2025-04-17_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"p(90)=117.58ms\\np(95)=170.52ms\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Null Value Handling in Snowflake Driver\nDESCRIPTION: Fix to properly handle null values for numbers and dates in the Snowflake driver implementation, addressing issue #1741.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **snowflake-driver:** Handle null values for numbers, dates. fix [#1741](https://github.com/cube-js/cube.js/issues/1741) ([51c2bb2](https://github.com/cube-js/cube.js/commit/51c2bb21d4d46daac89f21921f5c61982ab6547f))\n```\n\n----------------------------------------\n\nTITLE: Querying Data with useCubeQuery Hook in React\nDESCRIPTION: Illustrates how to use the useCubeQuery hook from @cubejs-client/react to fetch data from Cube in a React component. The query includes measures and time dimensions.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/getting-started/databricks/query-from-react-app.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCubeQuery } from '@cubejs-client/react';\n...\nconst { resultSet, isLoading, error, progress } = useCubeQuery({\n  \"measures\": [\"orders_view.completed_count\"],\n\t\"timeDimensions\": [\n    {\n      \"dimension\": \"orders_view.created_at\",\n      \"granularity\": \"month\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Enriched Entity-First View in Cube\nDESCRIPTION: A YAML configuration for creating a view that extends order information with user-related dimensions for more detailed analysis.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/designing-metrics.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n  - name: orders_with_users_view\n\n    cubes:\n      - join_path: orders\n        includes:\n          - status\n          - created_at\n\n          - completed_count\n          - count\n          - total_amount\n          - average_order_value\n\n      - join_path: orders.users\n        prefix: true\n        includes: \n          - city\n          - age\n          - gender\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Primary Key in Joined Cube\nDESCRIPTION: Error occurs when a cube with joins and pre-aggregations does not have a primary key defined, which is required to avoid fanouts in SQL queries.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/errors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncube_a cube: primary key for 'cube_a' is required when join is defined\\nin order to make aggregates work properly\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A basic robots.txt configuration that allows all user agents full access to the website. The file includes standard robotstxt.org formatting and doesn't restrict any paths.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/building-a-data-app-with-cube-workshop/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers full access to the website with no restrictions. References the robots.txt standard protocol from robotstxt.org.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/material-ui-dashboard/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Deploying Cube Application to Cube Cloud\nDESCRIPTION: The 'deploy' command uploads a Cube application to Cube Cloud. It requires an authentication token and the path to the Cube application directory. Options for handling environment variables are available.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/workspace/cli/reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli deploy --replace-env --directory PATH --token TOKEN\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cubejs-cli deploy --upload-env --directory ./ --token 56e2636272ffc9cd8c19e9d1e9ffb52f\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unknown Tenant\nDESCRIPTION: JSON error response when attempting to query with an undefined tenant (Peach Inc), demonstrating proper error handling for unknown tenants.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/guides/recipes/data-sources/multiple-sources-same-schema.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json5\nCODE:\n```\n// Peach Inc error:\n{ error: \"Error: Unknown tenant in Security Context\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Datasources in Cube.js\nDESCRIPTION: Example of setting up multiple data sources using the CUBEJS_DATASOURCES environment variable. This allows decorating other CUBEJS_DB_* variables for different data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DATASOURCES=default,datasource1\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Directives in Cube Query\nDESCRIPTION: GraphQL query demonstrating the use of @skip and @include directives for conditional field inclusion.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/product/apis-integrations/graphql-api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetOrders($byStatus: Boolean) {\n  cube(limit: 100, offset: 50, timezone: \"America/Los_Angeles\") {\n    orders(\n      orderBy: { created_at: asc, count: desc }\n      where: { status: { equals: \"completed\" } }\n    ) {\n      count\n      status @include(if: $byStatus)\n      created_at\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Bucket Type in Cube.js\nDESCRIPTION: Example configuration for specifying the cloud provider type for database export bucket with support for multiple data sources.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/configuration/environment-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCUBEJS_DB_EXPORT_BUCKET_TYPE=gcp\n\n# Decorated with a data source named `datasource1`\nCUBEJS_DS_DATASOURCE1_DB_EXPORT_BUCKET_TYPE=gcp\n```\n\n----------------------------------------\n\nTITLE: Initial Snowflake Driver Implementation\nDESCRIPTION: Initial release of the Snowflake database driver for Cube.js with basic connection functionality.\nSOURCE: https://github.com/cube-js/cube/blob/master/packages/cubejs-snowflake-driver/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- Snowflake driver ([35861b5](https://github.com/statsbotco/cubejs-client/commit/35861b5)), closes [#142](https://github.com/statsbotco/cubejs-client/issues/142)\n```\n\n----------------------------------------\n\nTITLE: Setting Measure Visibility in Cube.js (YAML)\nDESCRIPTION: Shows how to control the visibility of measures in a Cube.js data model using YAML syntax.\nSOURCE: https://github.com/cube-js/cube/blob/master/docs/pages/reference/data-model/measures.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncubes:\n  - name: orders\n    # ...\n\n    measures:\n      - name: orders_count\n        sql: id\n        type: count\n        public: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Default robots.txt configuration that allows all user agents full access to the site. Uses the standard format from robotstxt.org.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/hacktoberfest/dashboard/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This snippet configures the robots.txt file to allow unrestricted access for all web crawlers. It specifies no disallowed paths, effectively permitting crawling of the entire site.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/auth0/dashboard-app/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running development server with Yarn in Create React App\nDESCRIPTION: Runs the React application in development mode with hot reloading enabled. Opens the application at http://localhost:3000 in the browser.\nSOURCE: https://github.com/cube-js/cube/blob/master/examples/multitenancy-workshop/dashboard-app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```"
  }
]