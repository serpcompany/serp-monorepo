[
  {
    "owner": "mochajs",
    "repo": "mocha",
    "content": "TITLE: Synchronous Testing in Mocha\nDESCRIPTION: Demonstrates how to write tests for synchronous code where no callback or Promise handling is needed.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it(\"should return -1 when the value is not present\", function () {\n      [1, 2, 3].indexOf(5).should.equal(-1);\n      [1, 2, 3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Mocha Test Structure in JavaScript\nDESCRIPTION: Example of a simple Mocha test suite using the describe and it functions to test array indexing.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar assert = require('assert');\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mocha Test File in JavaScript\nDESCRIPTION: A sample test file demonstrating Mocha's syntax for testing the Array.indexOf() method. Uses Node's assert module for assertions and shows the describe/it pattern for organizing tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// test/example.test.js\nimport { assert } from \"node:assert\";\n\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it(\"should return -1 when the value is not present\", function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mocha Globally with npm\nDESCRIPTION: Command to install Mocha globally using npm package manager.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global mocha\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Test Script for Mocha\nDESCRIPTION: JSON configuration in package.json to set up an npm test script for running Mocha tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test\": \"mocha\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mocha as a Development Dependency\nDESCRIPTION: Command to install Mocha as a development dependency for a project using npm.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev mocha\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests from Command Line\nDESCRIPTION: Command to run Mocha tests from the terminal using the local installation.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./node_modules/mocha/bin/mocha.js\n```\n\n----------------------------------------\n\nTITLE: Synchronous Testing in Mocha\nDESCRIPTION: Shows how to write synchronous tests without callbacks, using Array indexOf as an example\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      [1, 2, 3].indexOf(5).should.equal(-1);\n      [1, 2, 3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Async/Await Testing in Mocha\nDESCRIPTION: Shows how to use async/await syntax for cleaner asynchronous testing, including setup and test cases.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(async function () {\n  await db.clear();\n  await db.save([tobi, loki, jane]);\n});\n\ndescribe(\"#find()\", function () {\n  it(\"responds with matching records\", async function () {\n    const users = await db.find({ type: \"User\" });\n    users.should.have.length(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TDD Test Structure in JavaScript with Mocha\nDESCRIPTION: This code snippet demonstrates how to use the TDD interface in Mocha to structure tests. It shows the usage of suite() for grouping tests, setup() for preparation, and test() for individual test cases. The example tests the indexOf() method of an array.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/interfaces/tdd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsuite(\"Array\", function () {\n  setup(function () {\n    // ...\n  });\n\n  suite(\"#indexOf()\", function () {\n    test(\"should return -1 when not present\", function () {\n      assert.equal(-1, [1, 2, 3].indexOf(4));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocha Hooks Implementation\nDESCRIPTION: Shows the implementation of before, after, beforeEach, and afterEach hooks for test setup and cleanup\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('hooks', function () {\n  before(function () {\n    // runs once before the first test in this block\n  });\n\n  after(function () {\n    // runs once after the last test in this block\n  });\n\n  beforeEach(function () {\n    // runs before each test in this block\n  });\n\n  afterEach(function () {\n    // runs after each test in this block\n  });\n\n  // test cases\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Pending Test in Mocha\nDESCRIPTION: This snippet demonstrates how to create a pending test in Mocha by omitting the callback function. The pending test 'should return -1 when the value is not present' will be included in test results and marked as pending rather than failed.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/pending-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    // pending test below\n    it(\"should return -1 when the value is not present\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Async/Await Testing in Mocha\nDESCRIPTION: Demonstrates using async/await syntax for asynchronous testing, showing both setup hooks and test cases\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(async function () {\n  await db.clear();\n  await db.save([tobi, loki, jane]);\n});\n\ndescribe('#find()', function () {\n  it('responds with matching records', async function () {\n    const users = await db.find({type: 'User'});\n    users.should.have.length(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Tests with .skip() in Mocha\nDESCRIPTION: Demonstrates how to skip a specific test case using the .skip() method while allowing other tests in the same suite to run. The skipped test is marked as pending in the test results.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it.skip(\"should return -1 unless present\", function () {\n      // this test will not be run\n    });\n\n    it(\"should return the index when present\", function () {\n      // this test will be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BDD Tests with Mocha in JavaScript\nDESCRIPTION: This code snippet demonstrates how to structure and write tests using Mocha's BDD interface. It showcases the usage of describe(), context(), it(), before(), and other BDD functions to test an Array's indexOf() method under different scenarios.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/interfaces/bdd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  before(function () {\n    // ...\n  });\n\n  describe(\"#indexOf()\", function () {\n    context(\"when not present\", function () {\n      it(\"should not throw an error\", function () {\n        (function () {\n          [1, 2, 3].indexOf(4);\n        }).should.not.throw();\n      });\n      it(\"should return -1\", function () {\n        [1, 2, 3].indexOf(4).should.equal(-1);\n      });\n    });\n\n    context(\"when present\", function () {\n      it(\"should return the index where the element first appears in the array\", function () {\n        [1, 2, 3].indexOf(3).should.equal(2);\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Mocha Hook Implementation in JavaScript\nDESCRIPTION: Demonstrates the standard hook pattern in Mocha using the BDD interface. Shows the four main hooks: before(), after(), beforeEach(), and afterEach(), each running at different points in the test execution cycle.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"hooks\", function () {\n  before(function () {\n    // runs once before the first test in this block\n  });\n\n  after(function () {\n    // runs once after the last test in this block\n  });\n\n  beforeEach(function () {\n    // runs before each test in this block\n  });\n\n  afterEach(function () {\n    // runs after each test in this block\n  });\n\n  // test cases\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Tests in Mocha\nDESCRIPTION: Shows how to dynamically generate tests in Mocha using JavaScript. This approach can be used to create parameterized tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\n\nfunction add(args) {\n  return args.reduce((prev, curr) => prev + curr, 0);\n}\n\ndescribe('add()', function () {\n  const tests = [\n    {args: [1, 2], expected: 3},\n    {args: [1, 2, 3], expected: 6},\n    {args: [1, 2, 3, 4], expected: 10}\n  ];\n\n  tests.forEach(({args, expected}) => {\n    it(`correctly adds ${args.length} args`, function () {\n      const res = add(args);\n      assert.strictEqual(res, expected);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Promise-based Testing in Mocha\nDESCRIPTION: Demonstrates how to test Promise-based APIs using Mocha and Chai as Promised for assertions. Shows setup with beforeEach and testing with Promise returns.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function () {\n  return db.clear().then(function () {\n    return db.save([tobi, loki, jane]);\n  });\n});\n\ndescribe(\"#find()\", function () {\n  it(\"respond with matching records\", function () {\n    return db.find({ type: \"User\" }).should.eventually.have.length(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running npm Test Script\nDESCRIPTION: Command to run the configured npm test script for Mocha tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Promise-Based Testing in Mocha\nDESCRIPTION: Demonstrates how to use Promises in Mocha tests and hooks. Shows usage with beforeEach and test cases, including Chai as Promised assertions.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function () {\n  return db.clear().then(function () {\n    return db.save([tobi, loki, jane]);\n  });\n});\n\ndescribe('#find()', function () {\n  it('respond with matching records', function () {\n    return db.find({type: 'User'}).should.eventually.have.length(3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Asynchronous Testing with done() in Mocha\nDESCRIPTION: Simplified example of an asynchronous test using the done() callback directly.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('User', function () {\n  describe('#save()', function () {\n    it('should save without error', function (done) {\n      var user = new User('Luna');\n      user.save(done);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Hooks in Mocha\nDESCRIPTION: Demonstrates using asynchronous hooks with the done callback pattern to handle database operations before tests. Shows a practical example of clearing and populating a database before each test runs.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Connection\", function () {\n  var db = new Connection(),\n    tobi = new User(\"tobi\"),\n    loki = new User(\"loki\"),\n    jane = new User(\"jane\");\n\n  beforeEach(function (done) {\n    db.clear(function (err) {\n      if (err) return done(err);\n      db.save([tobi, loki, jane], done);\n    });\n  });\n\n  describe(\"#find()\", function () {\n    it(\"respond with matching records\", function (done) {\n      db.find({ type: \"User\" }, function (err, res) {\n        if (err) return done(err);\n        res.should.have.length(3);\n        done();\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Suite-Level Timeouts in Mocha\nDESCRIPTION: This snippet demonstrates how to apply a timeout at the suite level which is inherited by all nested tests. The timeout of 500ms is set for the entire suite, affecting all test cases within it.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/timeouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"a suite of tests\", function () {\n  this.timeout(500);\n\n  it(\"should take less than 500ms\", function (done) {\n    setTimeout(done, 300);\n  });\n\n  it(\"should take less than 500ms as well\", function (done) {\n    setTimeout(done, 250);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Testing with Callbacks in Mocha\nDESCRIPTION: Example of writing an asynchronous test in Mocha using a callback function.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('User', function () {\n  describe('#save()', function () {\n    it('should save without error', function (done) {\n      var user = new User('Luna');\n      user.save(function (err) {\n        if (err) done(err);\n        else done();\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Retries with Mocha.js and Selenium\nDESCRIPTION: Demonstrates how to configure test retries at both suite and individual test levels using Mocha.js. The example shows integration with Selenium WebDriver for browser testing, including retry configuration and assertion checking. Important note that this feature retries failed tests and their beforeEach/afterEach hooks, but not before/after hooks.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/retrying-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"retries\", function () {\n  // Retry all tests in this suite up to 4 times\n  this.retries(4);\n\n  beforeEach(function () {\n    browser.get(\"http://www.yahoo.com\");\n  });\n\n  it(\"should succeed by the 3rd try\", function () {\n    // Specify this test to only retry up to 2 times\n    this.retries(2);\n    expect($(\".foo\").isDisplayed()).to.eventually.be.true;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Test Cases Using forEach Loop in Mocha\nDESCRIPTION: This snippet demonstrates how to dynamically generate test cases using a forEach loop. It defines a simple add function that sums an array of numbers, then generates tests based on an array of test cases with different argument sets and expected results.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/dynamic-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require(\"assert\");\n\nfunction add(args) {\n  return args.reduce((prev, curr) => prev + curr, 0);\n}\n\ndescribe(\"add()\", function () {\n  const tests = [\n    { args: [1, 2], expected: 3 },\n    { args: [1, 2, 3], expected: 6 },\n    { args: [1, 2, 3, 4], expected: 10 },\n  ];\n\n  tests.forEach(({ args, expected }) => {\n    it(`correctly adds ${args.length} args`, function () {\n      const res = add(args);\n      assert.strictEqual(res, expected);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Delayed Root Suite with Async/Await in Mocha\nDESCRIPTION: Shows how to use Mocha's delayed root suite with the --delay flag for running asynchronous operations before any test suites. Uses modern async/await pattern with a self-executing async function and the run() callback.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require(\"assert\");\n\nconst fn = async (x) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, 3000, 2 * x);\n  });\n};\n\n// instead of an IIFE, you can use 'setImmediate' or 'nextTick' or 'setTimeout'\n(async function () {\n  const z = await fn(3);\n\n  describe(\"my suite\", function () {\n    it(`expected value ${z}`, function () {\n      assert.strictEqual(z, 6);\n    });\n  });\n\n  run();\n})();\n```\n\n----------------------------------------\n\nTITLE: Test Priority with .only() in Mocha\nDESCRIPTION: Demonstrates how test cases with .only() take precedence over suites with .only(). Only the test case with .only() will run, even though its parent suite also has .only().\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/exclusive-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe.only(\"#indexOf()\", function () {\n    it.only(\"should return -1 unless present\", function () {\n      // this test will be run\n    });\n\n    it(\"should return the index when present\", function () {\n      // this test will not be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests from Command Line\nDESCRIPTION: Command to execute Mocha tests using npx. This runs Mocha on the test files in your project.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx mocha\n```\n\n----------------------------------------\n\nTITLE: Implementing Mocha Tests Using Require Interface\nDESCRIPTION: Demonstrates how to use Mocha's require interface to import test functions and run tests without global variables. Uses chai assertions and shows setup for testing array operations. Note that this must be run using the mocha executable, not node.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/interfaces/require.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar testCase = require(\"mocha\").describe;\nvar pre = require(\"mocha\").before;\nvar assertions = require(\"mocha\").it;\nvar assert = require(\"chai\").assert;\n\ntestCase(\"Array\", function () {\n  pre(function () {\n    // ...\n  });\n\n  testCase(\"#indexOf()\", function () {\n    assertions(\"should return -1 when not present\", function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Describing Mocha Hooks with Custom Messages\nDESCRIPTION: Shows how to add descriptions to hooks for better error identification. Includes three patterns: unnamed function, named function (where the function name is used as description), and explicitly providing a description string.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(function () {\n  // beforeEach hook\n});\n\nbeforeEach(function namedFun() {\n  // beforeEach:namedFun\n});\n\nbeforeEach(\"some description\", function () {\n  // beforeEach:some description\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Callbacks with Done in Mocha\nDESCRIPTION: Demonstrates how to test asynchronous code using the done callback pattern in Mocha. Shows error handling with the done callback when saving a user.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"User\", function () {\n  describe(\"#save()\", function () {\n    it(\"should save without error\", function (done) {\n      var user = new User(\"Luna\");\n      user.save(function (err) {\n        if (err) done(err);\n        else done();\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Test Script for Mocha\nDESCRIPTION: JSON configuration for adding a test script to package.json that executes Mocha. This allows using 'npm test' to run your tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"mocha\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests in Mocha\nDESCRIPTION: Demonstrates how to retry failed tests in Mocha using this.retries(). This feature is designed for end-to-end tests and is not recommended for unit tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('retries', function () {\n  // Retry all tests in this suite up to 4 times\n  this.retries(4);\n\n  beforeEach(function () {\n    browser.get('http://www.yahoo.com');\n  });\n\n  it('should succeed on the 3rd try', function () {\n    // Specify this test to only retry up to 2 times\n    this.retries(2);\n    expect($('.foo').isDisplayed()).to.eventually.be.true;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Global Fixtures Implementation Example\nDESCRIPTION: Comprehensive example showing how to implement both setup and teardown fixtures in a single file using ES Modules, demonstrating proper variable scoping.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs\n\nlet server;\n\nexport const mochaGlobalSetup = async () => {\n  server = await startSomeServer({ port: process.env.TEST_PORT });\n  console.log(`server running on port ${server.port}`);\n};\n\nexport const mochaGlobalTeardown = async () => {\n  await server.stop();\n  console.log(\"server stopped!\");\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Multiple Tests in Mocha\nDESCRIPTION: Shows how to skip multiple tests using this.skip() in a 'before all' hook in Mocha. This skips all tests, before/after each hooks, and nested describes.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(function() {\n  if (/* check test environment */) {\n    // setup code\n  } else {\n    this.skip();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Mocha Test for Array (JavaScript)\nDESCRIPTION: Shows a simple Mocha test case for the Array object, specifically testing the indexOf method. This example uses the describe and it functions to structure the test.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      [1, 2, 3].indexOf(5).should.equal(-1);\n      [1, 2, 3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Multiple Tests with this.skip() in a before Hook\nDESCRIPTION: Shows how to skip multiple tests by using this.skip() in a 'before all' hook. This will skip all tests, beforeEach/afterEach hooks, and nested describe blocks within the suite.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(function() {\n  if (/* check test environment */) {\n    // setup code\n  } else {\n    this.skip();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeouts in Mocha\nDESCRIPTION: Demonstrates how to set timeouts for test suites, individual tests, and hooks in Mocha. Timeouts can be disabled using this.timeout(0).\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('a suite of tests', function () {\n  this.timeout(500);\n\n  it('should take less than 500ms', function (done) {\n    setTimeout(done, 300);\n  });\n\n  it('should take less than 500ms as well', function (done) {\n    setTimeout(done, 250);\n  });\n});\n\nit('should take less than 500ms', function (done) {\n  this.timeout(500);\n  setTimeout(done, 300);\n});\n\ndescribe('a suite of tests', function () {\n  beforeEach(function (done) {\n    this.timeout(3000); // A very long environment setup.\n    setTimeout(done, 2500);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Done Callback Usage in Mocha\nDESCRIPTION: Shows a simplified pattern for handling asynchronous operations by passing the done callback directly to the async function.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"User\", function () {\n  describe(\"#save()\", function () {\n    it(\"should save without error\", function (done) {\n      var user = new User(\"Luna\");\n      user.save(done);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Tests in Mocha\nDESCRIPTION: Demonstrates how to skip individual tests using the .skip() method in Mocha. Skipped tests are marked as pending and not executed.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it.skip('should return -1 unless present', function () {\n      // this test will not be run\n    });\n\n    it('should return the index when present', function () {\n      // this test will be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha in the Browser (JavaScript)\nDESCRIPTION: Demonstrates various ways to configure Mocha options in the browser using mocha.setup(). It shows both shorthand and detailed configuration examples.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n// Use \"tdd\" interface.  This is a shortcut to setting the interface;\n// any other options must be passed via an object.\nmocha.setup('tdd');\n\n// This is equivalent to the above.\nmocha.setup({\n  ui: 'tdd'\n});\n\n// Examples of options:\nmocha.setup({\n  allowUncaught: true,\n  asyncOnly: true,\n  bail: true,\n  checkLeaks: true,\n  dryRun: true,\n  failZero: true,\n  forbidOnly: true,\n  forbidPending: true,\n  global: ['MyLib'],\n  retries: 3,\n  rootHooks: { beforeEach(done) { ... done();} },\n  slow: '100',\n  timeout: '2000',\n  ui: 'bdd'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Custom Reporter in JavaScript for Mocha\nDESCRIPTION: This code snippet demonstrates how to create a basic custom reporter for Mocha. It extends the Base reporter class and implements event handlers for test passes, failures, and end of execution.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/api-tutorials/custom-reporter.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ files.simplereporter }}\n```\n\n----------------------------------------\n\nTITLE: Setting Test-Specific Timeouts in Mocha\nDESCRIPTION: This snippet shows how to apply a timeout to a specific test case. The timeout of 500ms is applied only to this particular test, overriding any suite-level timeout settings.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/timeouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should take less than 500ms\", function (done) {\n  this.timeout(500);\n  setTimeout(done, 300);\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Entire Test Suites in Mocha\nDESCRIPTION: Shows how to skip an entire test suite using .skip() in Mocha. All tests and hooks within the suite are skipped.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Array', function () {\n  describe.skip('#indexOf()', function () {\n    it('should return -1 unless present', function () {\n      // this test will not be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Double done() Callback Error in Mocha Tests\nDESCRIPTION: This code snippet demonstrates a test that will trigger Mocha's multiple callback detection. By calling done() twice using setImmediate, Mocha will detect the error and report that done() was called multiple times.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/explainers/detecting-multiple-calls-to-done.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"double done\", function (done) {\n  // Calling `done()` twice is an error\n  setImmediate(done);\n  setImmediate(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Directory Path in Mocha\nDESCRIPTION: Shows how to configure Mocha to look for tests in a specific directory using custom glob patterns with the --recursive option.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha --recursive \"./spec/*.js\"\n```\n\n----------------------------------------\n\nTITLE: BDD Interface Example with Nested Describe and Context\nDESCRIPTION: Example of Mocha's BDD interface using describe, context (alias for describe), before hooks, and it functions to organize tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Array', function () {\n  before(function () {\n    // ...\n  });\n\n  describe('#indexOf()', function () {\n    context('when not present', function () {\n      it('should not throw an error', function () {\n        (function () {\n          [1, 2, 3].indexOf(4);\n        }).should.not.throw();\n      });\n      it('should return -1', function () {\n        [1, 2, 3].indexOf(4).should.equal(-1);\n      });\n    });\n    context('when present', function () {\n      it('should return the index where the element first appears in the array', function () {\n        [1, 2, 3].indexOf(3).should.equal(2);\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Runtime Test Skipping in Mocha\nDESCRIPTION: Illustrates how to skip tests at runtime using this.skip() in Mocha. Useful when a test requires a specific environment or configuration.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nit('should only test in the correct environment', function() {\n  if (/* check test environment */) {\n    // make assertions\n  } else {\n    this.skip();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Promise with Done Callback\nDESCRIPTION: Shows an incorrect pattern of mixing Promise returns with done callbacks, which throws an error in Mocha v3.0.0+\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\n\n// antipattern\nit('should complete this test', function (done) {\n  return new Promise(function (resolve) {\n    assert.ok(true);\n    resolve();\n  }).then(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Root Hooks in JavaScript\nDESCRIPTION: Example of defining root hooks in a separate setup file. These hooks run before and after every test, even in other files, when used in serial mode.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// test/setup.js\n\n// root hook to run before every test (even in other files)\nbeforeEach(function () {\n  doMySetup();\n});\n\n// root hook to run after every test (even in other files)\nafterEach(function () {\n  doMyTeardown();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup Fixture in CommonJS\nDESCRIPTION: Example of creating a global setup fixture using CommonJS module format. Shows how to export a mochaGlobalSetup function that starts a server before tests run.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.cjs\n\n// can be async or not\nexports.mochaGlobalSetup = async function () {\n  this.server = await startSomeServer({ port: process.env.TEST_PORT });\n  console.log(`server running on port ${this.server.port}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Only a Specific Suite in Mocha\nDESCRIPTION: Demonstrates how to run only a specific test suite by applying .only() to a describe block. All nested suites within that suite will still be executed.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/exclusive-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe.only(\"#indexOf()\", function () {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Test File Using Server with Hooks\nDESCRIPTION: Example test file that connects to a server started by global fixtures, using before and after hooks to manage the connection within the test.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// test.spec.mjs\n\nimport {connect} from 'my-server-connector-thingy';\n\ndescribe('my API', function () {\n  let connection;\n\n  before(async function () {\n    connection = await connect({port: process.env.TEST_PORT});\n  });\n\n  it('should be a nice API', function () {\n    // assertions here\n  });\n\n  after(async function () {\n    return connection.close();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hook-Level Timeouts in Mocha\nDESCRIPTION: This example demonstrates setting a timeout specifically for a test hook. A timeout of 3000ms is applied to the beforeEach hook to allow for lengthy environment setup operations.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/timeouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"a suite of tests\", function () {\n  beforeEach(function (done) {\n    this.timeout(3000); // A very long environment setup.\n    setTimeout(done, 2500);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Mocha with Custom Glob and Recursive Option\nDESCRIPTION: This command runs Mocha with a custom glob pattern './spec/*.js' and the '--recursive' option to include subdirectories. This approach allows you to specify a different test directory than the default './test/' location.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/test-globs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha --recursive \"./spec/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Mocha in HTML for Browser Testing\nDESCRIPTION: This HTML snippet demonstrates how to set up Mocha for running tests in a web browser. It includes the necessary script and CSS imports, initializes Mocha with the BDD interface, and runs the tests on page load.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/browsers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Mocha Tests</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mocha/mocha.css\" />\n  </head>\n  <body>\n    <div id=\"mocha\"></div>\n\n    <script src=\"https://unpkg.com/chai@4/chai.js\"></script>\n    <script src=\"https://unpkg.com/mocha/mocha.js\"></script>\n\n    <script class=\"mocha-init\">\n      mocha.setup(\"bdd\");\n      mocha.checkLeaks();\n    </script>\n    <script src=\"test.array.js\"></script>\n    <script src=\"test.object.js\"></script>\n    <script src=\"test.xhr.js\"></script>\n    <script class=\"mocha-exec\">\n      mocha.run();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Cases with .only() in Mocha\nDESCRIPTION: Demonstrates how to run multiple specific test cases by applying .only() to multiple it blocks. Tests without .only() will be skipped.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/exclusive-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it.only(\"should return -1 unless present\", function () {\n      // this test will be run\n    });\n\n    it.only(\"should return the index when present\", function () {\n      // this test will also be run\n    });\n\n    it(\"should return -1 if called with a non-Array context\", function () {\n      // this test will not be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Test with No Assertions in Mocha\nDESCRIPTION: Demonstrates an anti-pattern where a test conditionally makes assertions but does nothing in the else case. This test will be reported as passing even when no assertions are made, which is not recommended.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('should only test in the correct environment', function() {\n  if (/* check test environment */) {\n    // make assertions\n  } else {\n    // do nothing\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Root Hooks in Serial Mode\nDESCRIPTION: Command for running Mocha tests in serial mode where the setup.js file containing root hooks is loaded first using the --file flag, allowing the hooks to be applied to all test files.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/parallel-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmocha --file \"./test/setup.js\" \"./test/**/*.spec.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining Test Suites with Mocha's Exports Interface in JavaScript\nDESCRIPTION: This example demonstrates how to structure tests using Mocha's Exports interface. The pattern shows defining hooks, organizing nested test suites as objects, and creating test cases as functions. Special keys like 'before' are used for hooks, while object values represent suites and function values represent test cases.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/interfaces/exports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before: function () {\n    // ...\n  },\n\n  Array: {\n    \"#indexOf()\": {\n      \"should return -1 when not present\": function () {\n        [1, 2, 3].indexOf(4).should.equal(-1);\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Mocha Options via Environment Variables in Bash\nDESCRIPTION: Demonstrates how to use the MOCHA_OPTIONS environment variable to specify command line arguments for Mocha. This example shows setting the bail and retries options before running Mocha.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/configuring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ MOCHA_OPTIONS=\"--bail --retries 3\" mocha\n```\n\n----------------------------------------\n\nTITLE: Global Teardown Fixture in CommonJS\nDESCRIPTION: Implementation of a global teardown fixture in CommonJS that runs once after all tests, sharing context with the setup fixture to access the server for cleanup.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.cjs, cont'd\n\n// can be async or not\nexports.mochaGlobalTeardown = async function () {\n  await this.server.stop();\n  console.log('server stopped!');\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing QUnit-Style Tests in Mocha\nDESCRIPTION: Demonstrates how to write tests using the QUnit interface in Mocha. Shows the implementation of test suites for Array and String objects, including custom assertion function ok(). The code showcases flat test organization with separate suite() declarations and test cases using test().\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/interfaces/qunit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ok(expr, msg) {\n  if (!expr) throw new Error(msg);\n}\n\nsuite(\"Array\");\n\ntest(\"#length\", function () {\n  var arr = [1, 2, 3];\n  ok(arr.length == 3);\n});\n\ntest(\"#indexOf()\", function () {\n  var arr = [1, 2, 3];\n  ok(arr.indexOf(1) == 0);\n  ok(arr.indexOf(2) == 1);\n  ok(arr.indexOf(3) == 2);\n});\n\nsuite(\"String\");\n\ntest(\"#length\", function () {\n  ok(\"foo\".length == 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Test Cases Using Closures in Mocha\nDESCRIPTION: This snippet demonstrates an alternative approach to generating parameterized tests using closures. Instead of using forEach, it creates a test generator function that returns a test case function. This approach may work better with editor plugins that support \"right-click run\" features.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/dynamic-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"add()\", function () {\n  const testAdd = ({ args, expected }) =>\n    function () {\n      const res = add(args);\n      assert.strictEqual(res, expected);\n    };\n\n  it(\"correctly adds 2 args\", testAdd({ args: [1, 2], expected: 3 }));\n  it(\"correctly adds 3 args\", testAdd({ args: [1, 2, 3], expected: 6 }));\n  it(\"correctly adds 4 args\", testAdd({ args: [1, 2, 3, 4], expected: 10 }));\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Global Fixtures Implementation with Shared Variable\nDESCRIPTION: Example showing how to use global fixtures with shared variables rather than context, starting and stopping a server for tests.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs\n\nlet server;\n\nexport const mochaGlobalSetup = async () => {\n  server = await startSomeServer({port: process.env.TEST_PORT});\n  console.log(`server running on port ${server.port}`);\n};\n\nexport const mochaGlobalTeardown = async () => {\n  await server.stop();\n  console.log('server stopped!');\n};\n```\n\n----------------------------------------\n\nTITLE: TDD Interface Example\nDESCRIPTION: Example of Mocha's TDD interface using suite and test functions instead of describe and it, demonstrating test organization for Array.indexOf().\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nsuite('Array', function () {\n  setup(function () {\n    // ...\n  });\n\n  suite('#indexOf()', function () {\n    test('should return -1 when not present', function () {\n      assert.equal(-1, [1, 2, 3].indexOf(4));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Arrow Functions in Mocha\nDESCRIPTION: This example demonstrates why arrow functions can be problematic with Mocha. The test fails because the arrow function lexically binds 'this', preventing access to Mocha's context methods like timeout().\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/arrow-functions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"my suite\", () => {\n  it(\"my test\", () => {\n    // should set the timeout of this test to 1000 ms; instead will fail\n    this.timeout(1000);\n    assert.ok(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Global Teardown Fixture in ES Module\nDESCRIPTION: ES module version of a global teardown fixture that runs once after all tests, using the shared context to stop the server started in the setup fixture.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs, cont'd\n\n// can be async or not\nexport async function mochaGlobalTeardown() {\n  await this.server.stop();\n  console.log('server stopped!');\n}\n```\n\n----------------------------------------\n\nTITLE: Test Suite Structure with Grep Examples\nDESCRIPTION: Example showing how to structure test suites that can be filtered using the --grep option. Demonstrates nested describe blocks for API and app tests that can be selectively run.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"api\", function () {\n  describe(\"GET /api/users groupA\", function () {\n    it(\"respond with an array of users\", function () {\n      // ...\n    });\n  });\n});\n\ndescribe(\"app\", function () {\n  describe(\"GET /users groupB\", function () {\n    it(\"respond with an array of users\", function () {\n      // ...\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Test Suite Structure in JavaScript for Mocha\nDESCRIPTION: This snippet demonstrates how to structure a test suite using Mocha's describe and it functions. It tests the indexOf method of an Array.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/reporters/doc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it(\"should return -1 when the value is not present\", function () {\n      [1, 2, 3].indexOf(5).should.equal(-1);\n      [1, 2, 3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Tests Using ES Modules in Mocha\nDESCRIPTION: Example of writing a test file using ES modules syntax to import dependencies and test a simple addition function. Shows how to use import statements and assertions in an ES module test file.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/explainers/nodejs-native-esm-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// test.mjs\nimport { add } from \"./add.mjs\";\nimport assert from \"assert\";\n\nit(\"should add to numbers from an es module\", () => {\n  assert.equal(add(3, 5), 8);\n});\n```\n\n----------------------------------------\n\nTITLE: Exports Interface Example\nDESCRIPTION: Example of Mocha's Exports interface where test organization is achieved through object exports, with special keys for hooks and nested objects for test suites.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before: function () {\n    // ...\n  },\n\n  Array: {\n    '#indexOf()': {\n      'should return -1 when not present': function () {\n        [1, 2, 3].indexOf(4).should.equal(-1);\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Test Suites with Grep Pattern Matching in JavaScript\nDESCRIPTION: Example showing how to structure test suites that can be filtered using the --grep flag. Demonstrates API and app-related test groups that can be selectively run.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('api', function () {\n  describe('GET /api/users groupA', function () {\n    it('respond with an array of users', function () {\n      // ...\n    });\n  });\n});\n\ndescribe('app', function () {\n  describe('GET /users groupB', function () {\n    it('respond with an array of users', function () {\n      // ...\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocha ES Module Test Example (JavaScript)\nDESCRIPTION: Demonstrates how to write a Mocha test using ES modules. This example imports a function to be tested and the assert module, then defines a test case using the it function.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// test.mjs\nimport {add} from './add.mjs';\nimport assert from 'assert';\n\nit('should add to numbers from an es module', () => {\n  assert.equal(add(3, 5), 8);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Teardown Fixture in ES Modules\nDESCRIPTION: Example of creating a global teardown fixture using ES Module format. Shows how to export a mochaGlobalTeardown function for cleanup operations.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs, cont'd\n\n// can be async or not\nexport async function mochaGlobalTeardown() {\n  await this.server.stop();\n  console.log(\"server stopped!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Only a Specific Test Case in Mocha\nDESCRIPTION: Shows how to run only a specific test case by applying .only() to an it block. Other test cases in the same suite will be skipped.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/exclusive-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it.only(\"should return -1 unless present\", function () {\n      // ...\n    });\n\n    it(\"should return the index when present\", function () {\n      // ...\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: File Extension Configuration\nDESCRIPTION: Example showing how to specify multiple test file extensions\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--extension mjs --extension js\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Suites with .only() in Mocha\nDESCRIPTION: Shows how to run multiple specific test suites by applying .only() to multiple describe blocks. Suites without .only() will be skipped.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/exclusive-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe.only(\"#indexOf()\", function () {\n    it(\"should return -1 unless present\", function () {\n      // this test will be run\n    });\n\n    it(\"should return the index when present\", function () {\n      // this test will also be run\n    });\n  });\n\n  describe.only(\"#concat()\", function () {\n    it(\"should return a new Array\", function () {\n      // this test will also be run\n    });\n  });\n\n  describe(\"#slice()\", function () {\n    it(\"should return a new Array\", function () {\n      // this test will not be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Options in JavaScript for Browser Testing\nDESCRIPTION: This JavaScript snippet shows various ways to configure Mocha options for browser-based testing. It demonstrates setting the test interface and configuring multiple options using an object.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/browsers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use \"tdd\" interface.  This is a shortcut to setting the interface;\n// any other options must be passed via an object.\nmocha.setup('tdd');\n\n// This is equivalent to the above.\nmocha.setup({\n  ui: 'tdd'\n});\n\n// Examples of options:\nmocha.setup({\n  allowUncaught: true,\n  asyncOnly: true,\n  bail: true,\n  checkLeaks: true,\n  dryRun: true,\n  failZero: true,\n  forbidOnly: true,\n  forbidPending: true,\n  global: ['MyLib'],\n  retries: 3,\n  rootHooks: { beforeEach(done) { ... done();} },\n  slow: '100',\n  timeout: '2000',\n  ui: 'bdd'\n});\n```\n\n----------------------------------------\n\nTITLE: Node Options Configuration\nDESCRIPTION: Example demonstrating how to pass Node.js and V8 options to Mocha\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-n require=foo -n unhandled-rejections=strict\n```\n\n----------------------------------------\n\nTITLE: Skipping Entire Test Suites with .skip() in Mocha\nDESCRIPTION: Shows how to skip an entire test suite using the .skip() method on a describe block. All tests and hooks within the suite will be skipped, though code outside of hooks or tests will still be executed.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Array\", function () {\n  describe.skip(\"#indexOf()\", function () {\n    it(\"should return -1 unless present\", function () {\n      // this test will not be run\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Require Interface in Mocha (JavaScript)\nDESCRIPTION: Demonstrates how to use the require interface in Mocha to avoid global variables in tests. It shows how to require Mocha's describe, before, and it functions, as well as assertions from Chai.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar testCase = require('mocha').describe;\nvar pre = require('mocha').before;\nvar assertions = require('mocha').it;\nvar assert = require('chai').assert;\n\ntestCase('Array', function () {\n  pre(function () {\n    // ...\n  });\n\n  testCase('#indexOf()', function () {\n    assertions('should return -1 when not present', function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Root Hook Plugin with ES Modules\nDESCRIPTION: Example of defining a root hook plugin using ES Modules syntax. This plugin defines a beforeEach hook that runs before every test.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeEach(done) {\n    // do something before every test\n    done();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Runtime Test Skipping with this.skip() in Mocha\nDESCRIPTION: Demonstrates how to conditionally skip a test at runtime using this.skip(). This approach is useful when a test needs an environment or configuration that cannot be detected beforehand.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('should only test in the correct environment', function() {\n  if (/* check test environment */) {\n    // make assertions\n  } else {\n    this.skip();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Interface Example\nDESCRIPTION: Example of Mocha's QUnit-inspired interface with a flat structure where the test suite title is defined before the test cases, using suite and test functions.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ok(expr, msg) {\n  if (!expr) throw new Error(msg);\n}\n\nsuite('Array');\n\ntest('#length', function () {\n  var arr = [1, 2, 3];\n  ok(arr.length == 3);\n});\n\ntest('#indexOf()', function () {\n  var arr = [1, 2, 3];\n  ok(arr.indexOf(1) == 0);\n  ok(arr.indexOf(2) == 1);\n  ok(arr.indexOf(3) == 2);\n});\n\nsuite('String');\n\ntest('#length', function () {\n  ok('foo'.length == 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Root Hooks in Test Specification\nDESCRIPTION: Example of traditional test specification with root hooks defined outside of test suites, which should be migrated to a root hook plugin.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// test/test.spec.js\n\nbeforeEach(function () {\n  // global setup for all tests\n});\n\nafter(function () {\n  // one-time final cleanup\n});\n\ndescribe('my test suite', function () {\n  it('should have run my global setup', function () {\n    // make assertion\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup Fixture in ES Modules\nDESCRIPTION: Example of creating a global setup fixture using ES Module format. Demonstrates exporting an async mochaGlobalSetup function for server initialization.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs\n\n// can be async or not\nexport async function mochaGlobalSetup() {\n  this.server = await startSomeServer({ port: process.env.TEST_PORT });\n  console.log(`server running on port ${this.server.port}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mocha with Setup File in Bash\nDESCRIPTION: Command to run Mocha tests in serial mode, including a setup file with root hooks and all spec files in the test directory.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmocha --file \"./test/setup.js\" \"./test/**/*.spec.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Teardown Fixture in CommonJS\nDESCRIPTION: Example of creating a global teardown fixture using CommonJS module format. Shows how to export a mochaGlobalTeardown function that stops the server after tests complete.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.cjs, cont'd\n\n// can be async or not\nexports.mochaGlobalTeardown = async function () {\n  await this.server.stop();\n  console.log(\"server stopped!\");\n};\n```\n\n----------------------------------------\n\nTITLE: Migrated Test Specification without Root Hooks\nDESCRIPTION: The test specification file after migrating root hooks to a separate plugin file, ready to be used with the --require flag or in parallel mode.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// test/test.spec.js\n\ndescribe('my test suite', function () {\n  it('should have run my global setup', function () {\n    // make assertion\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Source Maps with Mocha CLI in Bash\nDESCRIPTION: Example showing source map enabled stack trace output when running Mocha with the --enable-source-maps flag\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nError: cool\n    at Object.<anonymous> (/Users/fake-user/bigco/nodejs-tasks/build/src/index.js:27:7)\n        -> /Users/fake-user/bigco/nodejs-tasks/src/index.ts:24:7\n```\n\n----------------------------------------\n\nTITLE: Test Implementation with Server Connection\nDESCRIPTION: Example showing how to write tests that connect to the server started by global fixtures, using before and after hooks for connection management.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/global-fixtures.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// test.spec.mjs\n\nimport { connect } from \"my-server-connector-thingy\";\n\ndescribe(\"my API\", function () {\n  let connection;\n\n  before(async function () {\n    connection = await connect({ port: process.env.TEST_PORT });\n  });\n\n  it(\"should be a nice API\", function () {\n    // assertions here\n  });\n\n  after(async function () {\n    return connection.close();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context in Root Hook Plugins\nDESCRIPTION: Example of using the context object in a root hook plugin to skip tests based on the current user.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeAll() {\n    // skip all tests for bob\n    if (require('os').userInfo().username === 'bob') {\n      return this.skip();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Expected Mocha Test Output\nDESCRIPTION: Example of the console output from a successful Mocha test run. Shows the test hierarchy and passing status.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  Array\n    #indexOf()\n      ✓ should return -1 when the value is not present\n\n  1 passing (9ms)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Function for Root Hooks in Mocha\nDESCRIPTION: Example showing how to use an async function to conditionally return root hooks. This pattern allows for asynchronous operations to determine whether hooks should be applied.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = async () => {\n  const result = await checkSomething();\n  // only use a root hook if `result` is truthy\n  if (result) {\n    // root hooks object\n    return {\n      beforeEach() {\n        // something\n      },\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrated Root Hooks in a Dedicated Plugin File\nDESCRIPTION: The resulting root hook plugin file after migration. Contains the hooks previously defined in the test file, properly exported as mochaHooks with correct hook names.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.js\n\nexports.mochaHooks = {\n  beforeAll: function () {\n    // global setup for all tests\n  },\n  afterAll: function () {\n    // one-time final cleanup\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Root Hooks in Mocha Tests\nDESCRIPTION: Example showing how to define root hooks (beforeEach and afterEach) in a separate setup file. These hooks would normally run for all tests when included with --file in serial mode, but this approach doesn't work in parallel mode.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/parallel-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// test/setup.js\n\n// root hook to run before every test (even in other files)\nbeforeEach(function () {\n  doMySetup();\n});\n\n// root hook to run after every test (even in other files)\nafterEach(function () {\n  doMyTeardown();\n});\n```\n\n----------------------------------------\n\nTITLE: Global Fixtures Example in JavaScript\nDESCRIPTION: Example showing how to use Mocha's global fixtures feature to handle setup and teardown operations in test files. Demonstrates async fixture functions that share context between each other but not with test files.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fixtures.js\n\n// can be async or not\nexports.mochaGlobalSetup = async function () {\n  this.server = await startSomeServer({port: process.env.TEST_PORT});\n  console.log(`server running on port ${this.server.port}`);\n};\n\nexports.mochaGlobalTeardown = async function () {\n  // the context (`this`) is shared, but not with the test files\n  await this.server.stop();\n  console.log(`server on port ${this.server.port} stopped`);\n};\n\n// this file can contain root hook plugins as well!\n// exports.mochaHooks = { ... }\n```\n\n----------------------------------------\n\nTITLE: Native ES Modules Support Example\nDESCRIPTION: Example showing Mocha's support for Node.js native ES modules, with limitations that apply to different Node.js versions. Requires Node.js v12.11.0+ and experimental modules flag for older versions.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Node.js only v12.11.0 and above\n// Node.js below v13.2.0, you must set --experimental-modules option\n// See documentation for current limitations\n// For programmatic usage: see API: loadFilesAsync()\n```\n\n----------------------------------------\n\nTITLE: Example of Async Error in Passing Test\nDESCRIPTION: Demonstrates a test case where an asynchronous error was previously being swallowed but is now properly caught in Mocha 5.0.2+. This example shows how a test could falsely pass despite throwing an error in a setTimeout.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should actually fail, sorry!', function (done) {\n  // passing assertion\n  assert(true === true);\n\n  // test complete & is marked as passing\n  done();\n\n  // ...but something evil lurks within\n  setTimeout(() => {\n    throw new Error('chaos!');\n  }, 100);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Await for Asynchronous Test Data in Mocha\nDESCRIPTION: This snippet demonstrates how to use top-level await (available in ESM modules with Node.js >= v14.8.0) to fetch test data asynchronously while the test file is being loaded. It waits for a Promise to resolve with test data, then uses that data to generate test cases.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/dynamic-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// testfile.mjs\nimport assert from \"assert\";\n\n// top-level await: Node >= v14.8.0 with ESM test file\nconst tests = await new Promise((resolve) => {\n  setTimeout(resolve, 5000, [\n    { args: [1, 2], expected: 3 },\n    { args: [1, 2, 3], expected: 6 },\n    { args: [1, 2, 3, 4], expected: 10 },\n  ]);\n});\n\n// in suites, async callbacks are **not** supported\ndescribe(\"add()\", function () {\n  tests.forEach(({ args, expected }) => {\n    it(`correctly adds ${args.length} args`, function () {\n      const res = args.reduce((sum, curr) => sum + curr, 0);\n      assert.strictEqual(res, expected);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Root Hook Plugin with CommonJS\nDESCRIPTION: Example of defining a root hook plugin using CommonJS syntax. This plugin defines a beforeEach hook that runs before every test.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.js\n\nexports.mochaHooks = {\n  beforeEach(done) {\n    // do something before every test\n    done();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Mocha in the Browser (HTML)\nDESCRIPTION: Shows a typical HTML setup for running Mocha tests in the browser. It includes necessary script and style imports, sets up the BDD interface, and runs the tests after the page loads.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Mocha Tests</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/mocha/mocha.css\" />\n  </head>\n  <body>\n    <div id=\"mocha\"></div>\n\n    <script src=\"https://unpkg.com/chai@4/chai.js\"></script>\n    <script src=\"https://unpkg.com/mocha/mocha.js\"></script>\n\n    <script class=\"mocha-init\">\n      mocha.setup('bdd');\n      mocha.checkLeaks();\n    </script>\n    <script src=\"test.array.js\"></script>\n    <script src=\"test.object.js\"></script>\n    <script src=\"test.xhr.js\"></script>\n    <script class=\"mocha-exec\">\n      mocha.run();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Root Hooks in a Single Plugin\nDESCRIPTION: Example of defining multiple root hooks in a single plugin, including both synchronous and asynchronous hooks.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeEach: [\n    function (done) {\n      // do something before every test,\n      // then run the next hook in this array\n    },\n    async function () {\n      // async or Promise-returning functions allowed\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Root Hook Plugin as a Function\nDESCRIPTION: Example of exporting mochaHooks as a function to conditionally define root hooks based on the environment.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = () => {\n  if (process.env.CI) {\n    // root hooks object\n    return {\n      beforeEach: [\n        function () {\n          // CI-specific beforeEach\n        },\n        function () {\n          // some other CI-specific beforeEach\n        }\n      ]\n    };\n  }\n  // root hooks object\n  return {\n    beforeEach() {\n      // regular beforeEach\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Command Line Output for Multiple done() Calls in Mocha\nDESCRIPTION: This snippet shows the terminal output when a test with multiple done() calls is run. Mocha detects the double callback, reports one test as passing (the first done() call), and one as failing with an error message indicating done() was called multiple times.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/explainers/detecting-multiple-calls-to-done.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./node_modules/.bin/mocha mocha.test.js\n\n\n  ✓ double done\n  1) double done\n\n  1 passing (6ms)\n  1 failing\n\n  1) double done:\n     Error: done() called multiple times\n      at Object.<anonymous> (mocha.test.js:1:63)\n      at require (internal/module.js:11:18)\n      at Array.forEach (<anonymous>)\n      at startup (bootstrap_node.js:187:16)\n      at bootstrap_node.js:608:3\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions Usage (Discouraged)\nDESCRIPTION: Demonstrates why arrow functions are discouraged in Mocha tests due to lexical this binding issues\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my suite', () => {\n  it('my test', () => {\n    // should set the timeout of this test to 1000 ms; instead will fail\n    this.timeout(1000);\n    assert.ok(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Root Hook Plugin Function\nDESCRIPTION: Example of exporting mochaHooks as an async function that performs an asynchronous operation before defining root hooks.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = async () => {\n  const result = await checkSomething();\n  // only use a root hook if `result` is truthy\n  if (result) {\n    // root hooks object\n    return {\n      beforeEach() {\n        // something\n      }\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Chain-Called Methods in Mocha\nDESCRIPTION: This example shows how to set timeouts when using arrow functions by chain-calling the timeout() method on the test and hook functions rather than using the context object.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/arrow-functions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"my suite\", () => {\n  beforeEach(() => {}).timeout(1000);\n  it(\"my test\", () => {\n    assert.ok(true);\n  }).timeout(1000);\n}).timeout(1000);\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Hook Plugin in CommonJS\nDESCRIPTION: Implementation of a root hook plugin that exports a mochaHooks object containing beforeEach and afterAll hooks, used as a migration target for root hooks.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.js\n\nexports.mochaHooks = {\n  beforeEach: function () {\n    // global setup for all tests\n  },\n  afterAll: function () {\n    // one-time final cleanup\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Mocha Doc Reporter Output Example (HTML)\nDESCRIPTION: Illustrates the HTML output generated by Mocha's Doc reporter for a simple test case. This output can be used to create documentation from test cases.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"suite\">\n  <h1>Array</h1>\n  <dl>\n    <section class=\"suite\">\n      <h1>#indexOf()</h1>\n      <dl>\n        <dt>should return -1 when the value is not present</dt>\n        <dd>\n          <pre><code>[1,2,3].indexOf(5).should.equal(-1);\n[1,2,3].indexOf(0).should.equal(-1);</code></pre>\n        </dd>\n      </dl>\n    </section>\n  </dl>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Mixing Promises and Done\nDESCRIPTION: Shows an incorrect pattern that mixes Promise returns with done callbacks, which throws an error in Mocha v3.0.0 and newer.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/asynchronous-code.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require(\"assert\");\n\n// antipattern\nit(\"should complete this test\", function (done) {\n  return new Promise(function (resolve) {\n    assert.ok(true);\n    resolve();\n  }).then(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Global Setup Fixture in CommonJS\nDESCRIPTION: Implementation of a global setup fixture that runs once before all tests, exporting mochaGlobalSetup function that starts a server for testing.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.cjs\n\n// can be async or not\nexports.mochaGlobalSetup = async function () {\n  this.server = await startSomeServer({port: process.env.TEST_PORT});\n  console.log(`server running on port ${this.server.port}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Global Setup Fixture in ES Module\nDESCRIPTION: ES module version of a global setup fixture that runs once before all tests, starting a server for testing.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// fixtures.mjs\n\n// can be async or not\nexport async function mochaGlobalSetup() {\n  this.server = await startSomeServer({port: process.env.TEST_PORT});\n  console.log(`server running on port ${this.server.port}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha CLI Options\nDESCRIPTION: Examples of using various Mocha command-line options for test execution and reporting.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n--async-only, -A\n--bail, -b\n--check-leaks\n--dry-run\n--exit\n--pass-on-failing-test-suite\n--fail-zero\n--forbid-only\n--forbid-pending\n--global <variable-name>\n--retries <n>\n--slow <ms>, -s <ms>\n--timeout <ms>, -t <ms>\n--ui <name>, -u <name>\n--color, -c, --colors\n--diff\n--full-trace\n--inline-diffs\n--reporter <name>, -R <name>\n--reporter-option <option>, -O <option>, --reporter-options <option>\n--config <path>\n--node-option <name>, -n <name>\n--package <path>\n--extension <ext>\n--file <file>\n```\n\n----------------------------------------\n\nTITLE: Global Variable Declaration Example\nDESCRIPTION: Example showing how to use the --global flag to specify allowed global variables for leak checking\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--global app --global YUI\n```\n\n----------------------------------------\n\nTITLE: Viewing Mocha Command-Line Help Output\nDESCRIPTION: Complete help output showing all available Mocha CLI commands and options. The output is displayed when running 'npx mocha --help' and shows all options organized by category including Rules & Behavior, Reporting & Output, Configuration, File Handling, and Test Filters.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmocha [spec..]\n\nRun tests with Mocha\n\nCommands\n  mocha inspect [spec..]  Run tests with Mocha                         [default]\n  mocha init <path>       create a client-side Mocha setup at <path>\n\nRules & Behavior\n      --allow-uncaught              Allow uncaught errors to propagate [boolean]\n  -A, --async-only                  Require all tests to use a callback (async)\n                                    or return a Promise                [boolean]\n  -b, --bail                        Abort (\"bail\") after first test failure\n                                                                       [boolean]\n      --check-leaks                 Check for global variable leaks    [boolean]\n      --delay                       Delay initial execution of root suite\n                                                                       [boolean]\n      --dry-run                     Report tests without executing them[boolean]\n      --exit                        Force Mocha to quit after tests complete\n                                                                       [boolean]\n      --pass-on-failing-test-suite  Not fail test run if tests were failed\n                                                      [boolean] [default: false]\n      --fail-zero                   Fail test run if no test(s) encountered\n                                                                       [boolean]\n      --forbid-only                 Fail if exclusive test(s) encountered\n                                                                       [boolean]\n      --forbid-pending              Fail if pending test(s) encountered[boolean]\n      --global, --globals           List of allowed global variables     [array]\n  -j, --jobs                        Number of concurrent jobs for --parallel;\n                                    use 1 to run in serial\n                                   [number] [default: (number of CPU cores - 1)]\n  -p, --parallel                    Run tests in parallel              [boolean]\n      --retries                     Retry failed tests this many times  [number]\n  -s, --slow                        Specify \"slow\" test threshold (in\n                                    milliseconds)         [string] [default: 75]\n  -t, --timeout, --timeouts         Specify test timeout threshold (in\n                                    milliseconds)       [string] [default: 2000]\n  -u, --ui                          Specify user interface\n                                                       [string] [default: \"bdd\"]\n\nReporting & Output\n  -c, --color, --colors                     Force-enable color output  [boolean]\n      --diff                                Show diff on failure\n                                                       [boolean] [default: true]\n      --full-trace                          Display full stack traces  [boolean]\n      --inline-diffs                        Display actual/expected differences\n                                            inline within each string  [boolean]\n  -R, --reporter                            Specify reporter to use\n                                                      [string] [default: \"spec\"]\n  -O, --reporter-option,                    Reporter-specific options\n  --reporter-options                        (<k=v,[k1=v1,..]>)           [array]\n\nConfiguration\n      --config       Path to config file   [string] [default: (nearest rc file)]\n  -n, --node-option  Node or V8 option (no leading \"--\")                 [array]\n      --package      Path to package.json for config                    [string]\n\nFile Handling\n      --extension          File extension(s) to load\n                                           [array] [default: [\"js\",\"cjs\",\"mjs\"]]\n      --file               Specify file(s) to be loaded prior to root suite\n                           execution                   [array] [default: (none)]\n      --ignore, --exclude  Ignore file(s) or glob pattern(s)\n                                                       [array] [default: (none)]\n      --recursive          Look for tests in subdirectories            [boolean]\n  -r, --require            Require module              [array] [default: (none)]\n  -S, --sort               Sort test files                             [boolean]\n  -w, --watch              Watch files in the current working directory for\n                           changes                                     [boolean]\n      --watch-files        List of paths or globs to watch               [array]\n      --watch-ignore       List of paths or globs to exclude from watching\n                                      [array] [default: [\"node_modules\",\".git\"]]\n\nTest Filters\n  -f, --fgrep   Only run tests containing this string                   [string]\n  -g, --grep    Only run tests matching this string or regexp           [string]\n  -i, --invert  Inverts --grep and --fgrep matches                     [boolean]\n\nPositional Arguments\n  spec  One or more files, directories, or globs to test\n                                                     [array] [default: [\"test\"]]\n\nOther Options\n  -h, --help             Show usage information & exit                 [boolean]\n  -V, --version          Show version number & exit                    [boolean]\n      --list-interfaces  List built-in user interfaces & exit          [boolean]\n      --list-reporters   List built-in reporters & exit                [boolean]\n\nMocha Resources\n    Chat: https://discord.gg/KeDn2uXhER\n  GitHub: https://github.com/mochajs/mocha.git\n    Docs: https://mochajs.org/\n```\n\n----------------------------------------\n\nTITLE: Using Globstar Pattern with Mocha\nDESCRIPTION: Demonstrates using bash globstar pattern to recursively match test files, which is equivalent to using the --recursive option in Mocha.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha \"./spec/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Parallel Jobs Configuration\nDESCRIPTION: Example of using the --jobs flag to control parallel test execution\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--jobs <count>\n```\n\n----------------------------------------\n\nTITLE: Reporter Options Configuration\nDESCRIPTION: Example showing how to pass options to a specific reporter\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--reporter tap --reporter-option tapVersion=13\n```\n\n----------------------------------------\n\nTITLE: Running Mocha with Globstar Wildcard Pattern\nDESCRIPTION: This command runs Mocha using a globstar pattern to recursively match files. This approach requires shell support for the '**' wildcard (Bash ≥4.3 with 'globstar' option enabled, or ZSH/Fish by default) and achieves the same result as using the '--recursive' option.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/running/test-globs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha \"./spec/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output from Mocha Doc Reporter\nDESCRIPTION: This HTML snippet shows the output generated by Mocha's Doc reporter for the given JavaScript test suite. It creates a hierarchical structure representing the test suite.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/reporters/doc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"suite\">\n  <h1>Array</h1>\n  <dl>\n    <section class=\"suite\">\n      <h1>#indexOf()</h1>\n      <dl>\n        <dt>should return -1 when the value is not present</dt>\n        <dd>\n          <pre><code>[1,2,3].indexOf(5).should.equal(-1);\n[1,2,3].indexOf(0).should.equal(-1);</code></pre>\n        </dd>\n      </dl>\n    </section>\n  </dl>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Generating Test Documentation with Mocha Doc Reporter in Bash\nDESCRIPTION: This Bash command demonstrates how to use Mocha's Doc reporter to generate test documentation. It combines the reporter output with HTML header and footer files to create a complete HTML document.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/reporters/doc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha --reporter=doc | cat docs/head.html - docs/tail.html > docs/test.html\n```\n\n----------------------------------------\n\nTITLE: Displaying Mocha Error Codes in Markdown Table\nDESCRIPTION: A markdown table listing Mocha error codes and their descriptions. It includes codes for invalid argument types, values, exceptions, interfaces, reporters, file patterns, and unsupported features.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/error-codes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Code                               | Description                                                  |\n| ---------------------------------- | ------------------------------------------------------------ |\n| `ERR_MOCHA_INVALID_ARG_TYPE`       | wrong type was passed for a given argument                   |\n| `ERR_MOCHA_INVALID_ARG_VALUE`      | invalid or unsupported value was passed for a given argument |\n| `ERR_MOCHA_INVALID_EXCEPTION`      | a falsy or otherwise underspecified exception was thrown     |\n| `ERR_MOCHA_INVALID_INTERFACE`      | interface specified in options not found                     |\n| `ERR_MOCHA_INVALID_REPORTER`       | reporter specified in options not found                      |\n| `ERR_MOCHA_NO_FILES_MATCH_PATTERN` | test file(s) could not be found                              |\n| `ERR_MOCHA_UNSUPPORTED`            | requested behavior, option, or parameter is unsupported      |\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Reporter Aliases in Mocha\nDESCRIPTION: Shows the available aliases for using the Markdown reporter in Mocha test configurations. The reporter can be referenced using either 'Markdown' or 'markdown' as the reporter name.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/reporters/markdown.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMarkdown, markdown\n```\n\n----------------------------------------\n\nTITLE: Improving Promise Detection in JavaScript\nDESCRIPTION: Improvement to the utils.isPromise() function for better promise detection.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nutils.isPromise()\n```\n\n----------------------------------------\n\nTITLE: Running Mocha with Environment Variables\nDESCRIPTION: Demonstrates how to pass command-line arguments to Mocha using the MOCHA_OPTIONS environment variable, including setting bail and retries options.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ MOCHA_OPTIONS=\"--bail --retries 3\" mocha\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.from() in Node.js\nDESCRIPTION: Replacing deprecated Buffer constructor with Buffer.from() method.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nBuffer.from()\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Mocha Documentation Development Server\nDESCRIPTION: Sequential shell commands to install dependencies, generate documentation, and start the development server for Mocha's documentation site\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\nnpm run generate\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Overspecified Test Resolution in Mocha\nDESCRIPTION: This code snippet illustrates a test case that will fail due to overspecifying the resolution method. It both injects a callback and returns a Promise, which is not allowed in Mocha 3.0.0 and later.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/changelogs/CHANGELOG_V3_older.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assert = require('assert');\n\nit('should complete this test', function (done) {\n  return new Promise(function (resolve) {\n    assert.ok(true);\n    resolve();\n  })\n  .then(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Mocha.js Website\nDESCRIPTION: Command to generate the API documentation for the Mocha.js website before building or serving the site.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:api\n```\n\n----------------------------------------\n\nTITLE: Querying Mocha Version Programmatically in JavaScript\nDESCRIPTION: Mocha's version can now be queried programmatically via the public property Mocha.prototype.version.\nSOURCE: https://github.com/mochajs/mocha/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMocha.prototype.version\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Mocha Maintainer Documentation\nDESCRIPTION: Structured markdown document defining the governance model, roles, and processes for the Mocha project. Includes sections on terminology, maintainer responsibilities, rights, and decision-making processes.\nSOURCE: https://github.com/mochajs/mocha/blob/main/MAINTAINERS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mocha Maintainer's Handbook\n\n## Introduction\n\nHi stranger! We've written this document for:\n\n1. Active maintainers of Mocha\n1. Prospective maintainers of Mocha\n1. Anyone curious about how Mocha's maintainers maintain Mocha\n\nThe purpose of this document is to _describe our processes_.\nWe want to avoid conflicts and confusion around \"unwritten rules\".\nIn our opinion, the most straightforward way to address this is to _write them down_.\nThis _also_ happens to be the most straightforward way to change them!\n```\n\n----------------------------------------\n\nTITLE: Release Branch Management Commands\nDESCRIPTION: Git commands for managing releases, including pushing tags and updating branches for website deployment.\nSOURCE: https://github.com/mochajs/mocha/blob/main/MAINTAINERS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin main --tags\n```\n\n----------------------------------------\n\nTITLE: NPM Prerelease Tag Management\nDESCRIPTION: NPM commands for managing prerelease tags and publishing updates.\nSOURCE: https://github.com/mochajs/mocha/blob/main/MAINTAINERS.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm dist-tag rm next\\nnpm publish --tag=next\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests from Source\nDESCRIPTION: Shows how to install dependencies and run Mocha's own test suite from source, which requires GNU Make or compatible build tools.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/index.md#2025-04-22_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/mocha\n$ npm install\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Merging PRs with Milestone Assignment\nDESCRIPTION: Guidelines for squash merging pull requests and assigning them to appropriate milestones based on semver changes. Explains milestone naming conventions and version management strategy.\nSOURCE: https://github.com/mochajs/mocha/blob/main/MAINTAINERS.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nnpm version patch -m 'Release v%s'\n```\n\n----------------------------------------\n\nTITLE: Building Mocha.js Documentation Site Once\nDESCRIPTION: Command to build the Mocha.js documentation site once without continuous rebuilding.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Mocha.js Website\nDESCRIPTION: Commands to install Node.js dependencies for the Mocha.js website from the root of the working copy.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install / npm ci\n```\n\n----------------------------------------\n\nTITLE: Serving Mocha.js Documentation Site in Development Mode\nDESCRIPTION: Command to serve the Mocha.js documentation site locally with hot reloading for development purposes.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs-watch\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Root Hooks in a Single Mocha Plugin\nDESCRIPTION: Example of defining multiple root hooks in a single plugin. This pattern allows running several functions for the same hook type (beforeEach) in sequence, supporting both callback and Promise-based async functions.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeEach: [\n    function (done) {\n      // do something before every test,\n      // then run the next hook in this array\n    },\n    async function () {\n      // async or Promise-returning functions allowed\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Duration Thresholds in Mocha Tests\nDESCRIPTION: This snippet demonstrates how to use the slow() method to adjust the threshold for what's considered a 'slow' test. In this example, the threshold is set to 300000ms (five minutes) for tests within the describe block.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/explainers/test-duration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"something slow\", function () {\n  this.slow(300000); // five minutes\n\n  it(\"should take long enough for me to go make a sandwich\", function () {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Root Hooks with Function Export in Mocha\nDESCRIPTION: Example of exporting mochaHooks as a function for conditional hook creation. This implementation creates environment-specific hooks by checking if tests are running in a CI environment.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = () => {\n  if (process.env.CI) {\n    // root hooks object\n    return {\n      beforeEach: [\n        function () {\n          // CI-specific beforeEach\n        },\n        function () {\n          // some other CI-specific beforeEach\n        },\n      ],\n    };\n  }\n  // root hooks object\n  return {\n    beforeEach() {\n      // regular beforeEach\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Skip Behavior with Nested Hooks in Mocha\nDESCRIPTION: Demonstrates how this.skip() affects hooks at different levels. Hooks at the same level as the skipped hook will still execute, while nested hooks will be skipped.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/inclusive-tests.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"outer\", function () {\n  before(function () {\n    this.skip();\n  });\n\n  after(function () {\n    // will be executed\n  });\n\n  describe(\"inner\", function () {\n    before(function () {\n      // will be skipped\n    });\n\n    after(function () {\n      // will be skipped\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context Object in Root Hooks for Mocha Tests\nDESCRIPTION: Example showing how to access the context object within a root hook. This implementation demonstrates using the context to conditionally skip tests based on the operating system's username.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeAll() {\n    // skip all tests for bob\n    if (require(\"os\").userInfo().username === \"bob\") {\n      return this.skip();\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing FixtureWizard Component in Astro\nDESCRIPTION: Imports the FixtureWizard component from the components directory and renders it in the page. This component likely implements the decision tree flowchart referenced in the page description.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/explainers/test-fixture-decision-tree.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport FixtureWizard from \"../../../components/FixtureWizard.astro\";\n\n<FixtureWizard />\n```\n\n----------------------------------------\n\nTITLE: Output of Dynamically Generated Mocha Tests\nDESCRIPTION: This snippet shows the command-line output when running the dynamically generated tests with Mocha. It displays how the test suite looks when executed, showing three passing tests for different argument counts.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/declaring/dynamic-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha\n\n  add()\n    ✓ correctly adds 2 args\n    ✓ correctly adds 3 args\n    ✓ correctly adds 4 args\n```\n\n----------------------------------------\n\nTITLE: Example of Test File with Root Hooks before Migration\nDESCRIPTION: An example test file containing root hooks before migration to a root hook plugin. Shows hooks defined outside of a test suite that need to be moved to a dedicated plugin file.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// test/test.spec.js\n\nbeforeEach(function () {\n  // global setup for all tests\n});\n\nafter(function () {\n  // one-time final cleanup\n});\n\ndescribe(\"my test suite\", function () {\n  it(\"should have run my global setup\", function () {\n    // make assertion\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Hook Plugin with CommonJS in Mocha\nDESCRIPTION: A simple example of defining a root hook plugin using CommonJS module syntax that runs before each test. The plugin exports a mochaHooks object with a beforeEach function.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.js\n\nexports.mochaHooks = {\n  beforeEach(done) {\n    // do something before every test\n    done();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Hook Plugin with ES Modules in Mocha\nDESCRIPTION: A basic implementation of a root hook plugin using ES Modules syntax. The plugin exports a mochaHooks object containing a beforeEach function to run before every test.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// test/hooks.mjs\n\nexport const mochaHooks = {\n  beforeEach(done) {\n    // do something before every test\n    done();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Test File After Root Hooks Migration\nDESCRIPTION: The test file after root hooks have been extracted to a dedicated plugin. The file now contains only the actual test suite with no root hooks.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs-next/src/content/docs/features/root-hook-plugins.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// test/test.spec.js\n\ndescribe(\"my test suite\", function () {\n  it(\"should have run my global setup\", function () {\n    // make assertion\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Logos in HTML\nDESCRIPTION: HTML template code for displaying sponsor logos in a grid layout with links to sponsor websites. Uses background images and includes hover titles for accessibility.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/_includes/supporters.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"image-list image-list-wide\" id=\"sponsors\">\n{%- for supporter in supporters.sponsors -%}\n  <li>\n    {%- if supporter.website -%}\n    <a href=\"{{ supporter.website }}\" target=\"_blank\" rel=\"noopener sponsored\">\n    {%- endif -%}\n      <div class=\"sponsor\" title=\"{{ supporter.name }}\" style=\"background-image: url(/images/supporters/{{ supporter.id }}.png?sprite=sponsors)\"></div>\n    {%- if supporter.website -%}\n    </a>\n    {%- endif -%}\n  </li>\n{%- endfor -%}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering Backer Logos in HTML\nDESCRIPTION: HTML template code for displaying backer logos in a grid with faded styling. Includes dynamic indexing and support for backer website links.\nSOURCE: https://github.com/mochajs/mocha/blob/main/docs/_includes/supporters.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"image-list faded-images\" id=\"backers\">\n{%- for supporter in supporters.backers -%}\n  <li>\n    {%- if supporter.website -%}\n    <a href=\"{{ supporter.website }}\" target=\"_blank\" rel=\"noopener sponsored\">\n    {%- endif -%}\n      <div class=\"backer backer-{{ forloop.index }}\" title=\"{{ supporter.name }}\" style=\"background-image: url(/images/supporters/{{ supporter.id }}.png?sprite=backers)\"></div>\n    {%- if supporter.website -%}\n    </a>\n    {%- endif -%}\n  </li>\n{%- endfor -%}\n</ul>\n```"
  }
]