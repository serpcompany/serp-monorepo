[
  {
    "owner": "moment",
    "repo": "luxon",
    "content": "TITLE: Getting the Current Date and Time in Luxon\nDESCRIPTION: Creates a DateTime instance representing the current date and time using the DateTime.now() method. This is equivalent to calling DateTime.local() with no arguments.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = DateTime.now();\n```\n\n----------------------------------------\n\nTITLE: Formatting DateTime Objects to ISO 8601 Formats in JavaScript\nDESCRIPTION: Examples of converting DateTime objects to various ISO 8601 format strings, which are widely used for date and time representation in technical contexts and APIs.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toISO(); //=> '2017-04-20T11:32:00.000-04:00'\ndt.toISODate(); //=> '2017-04-20'\ndt.toISOWeekDate(); //=> '2017-W17-7'\ndt.toISOTime(); //=> '11:32:00.000-04:00'\n```\n\n----------------------------------------\n\nTITLE: Internationalizing DateTime Format with Luxon\nDESCRIPTION: Demonstrates how to format a date with localization by setting the locale to French. Shows the usage of toFormat() method with locale settings.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO('2014-08-06T13:07:04.054')\n  .setLocale('fr')\n  .toFormat('yyyy LLL dd'); //=> '2014 août 06'\n```\n\n----------------------------------------\n\nTITLE: Using Luxon DateTime API for Date Manipulation in JavaScript\nDESCRIPTION: This example demonstrates Luxon's DateTime API by chaining several operations: getting the current time, setting a time zone, subtracting a week, moving to the end of the day, and formatting the result as ISO string.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/home.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().setZone('America/New_York').minus({weeks:1}).endOf('day').toISO();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Luxon's Chainable DateTime API in JavaScript\nDESCRIPTION: This example shows Luxon's chainable API in action, creating a DateTime object for the current time, setting it to New York timezone, subtracting a week, moving to the end of the day, and formatting it as ISO string.\nSOURCE: https://github.com/moment/luxon/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().setZone(\"America/New_York\").minus({ weeks: 1 }).endOf(\"day\").toISO();\n```\n\n----------------------------------------\n\nTITLE: Creating a DateTime with Local Time Components in Luxon\nDESCRIPTION: Creates a DateTime instance representing May 15, 2017 at 8:30 in the morning using the DateTime.local() constructor. This method takes year, month (1-indexed), day, hour, and minute parameters.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dt = DateTime.local(2017, 5, 15, 8, 30);\n```\n\n----------------------------------------\n\nTITLE: Working with UTC in Luxon\nDESCRIPTION: Shows various methods for working with UTC time in Luxon including creating a DateTime in UTC, getting the current UTC time, converting local time to UTC, and UTC time to local.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.utc(2017, 5, 15);\nDateTime.utc(); // now, in UTC time zone\nDateTime.now().toUTC();\nDateTime.utc().toLocal();\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Dates with Luxon in JavaScript\nDESCRIPTION: Demonstrates how to parse an ISO 8601 formatted date string using Luxon's fromISO method. This method supports a wide range of ISO 8601 formats.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO(\"2016-05-25\");\n```\n\n----------------------------------------\n\nTITLE: Performing DateTime Math Operations in Luxon\nDESCRIPTION: Demonstrates various DateTime transformations including adding hours and minutes, subtracting days, and getting the start or end of time periods. All operations return new immutable DateTime instances.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.now();\ndt.plus({ hours: 3, minutes: 2 });\ndt.minus({ days: 7 });\ndt.startOf('day');\ndt.endOf('hour');\n```\n\n----------------------------------------\n\nTITLE: Changing the Default Time Zone in Luxon\nDESCRIPTION: Shows how to change the default time zone that Luxon uses when creating new DateTime objects with DateTime.local(). This can be set to a named time zone, UTC, or reset to the system default.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nSettings.defaultZone = \"Asia/Tokyo\";\nDateTime.local().zoneName; //=> 'Asia/Tokyo'\n\nSettings.defaultZone = \"utc\";\nDateTime.local().zoneName; //=> 'UTC'\n\n// you can reset by setting to 'system'\n\nSettings.defaultZone = \"system\";\nDateTime.local().zoneName; //=> 'America/New_York'\n```\n\n----------------------------------------\n\nTITLE: Using Token-Based Formatting with toFormat Method\nDESCRIPTION: Demonstrates how to use the toFormat method for custom formatting of DateTime objects using tokens, which is useful for specific format requirements not covered by standard options.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO('2014-08-06T13:07:04.054').toFormat('yyyy LLL dd'); //=> '2014 Aug 06'\n```\n\n----------------------------------------\n\nTITLE: Working with Time Zones in Luxon\nDESCRIPTION: Demonstrates creating DateTimes in specific time zones and changing time zones of existing instances. The examples show creating instances in Los Angeles time zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromObject({}, {zone: 'America/Los_Angeles'}); // now, but expressed in LA's local time\nDateTime.now().setZone(\"America/Los_Angeles\"); // same\n```\n\n----------------------------------------\n\nTITLE: Formatting DateTime with Different Locales in Luxon\nDESCRIPTION: Demonstrates how to format dates differently based on locale settings. The example shows the same date formatted in French, British English, and American English with custom format options.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.now();\nvar f = {month: 'long', day: 'numeric'};\ndt.setLocale('fr').toLocaleString(f)      //=> '14 septembre'\ndt.setLocale('en-GB').toLocaleString(f)   //=> '14 September'\ndt.setLocale('en-US').toLocaleString(f)  //=> 'September 14'\n```\n\n----------------------------------------\n\nTITLE: Working with Intervals in Luxon\nDESCRIPTION: Demonstrates creating and working with Interval instances, which represent a specific period between two DateTimes. The example shows creating an interval and using methods to get its length, check containment, and format as strings.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnow = DateTime.now();\nlater = DateTime.local(2020, 10, 12);\ni = Interval.fromDateTimes(now, later);\n\ni.length()                             //=> 97098768468\ni.length('years')                //=> 3.0762420239726027\ni.contains(DateTime.local(2019))       //=> true\n\ni.toISO()       //=> '2017-09-14T04:07:11.532-04:00/2020-10-12T00:00:00.000-04:00'\ni.toString()    //=> '[2017-09-14T04:07:11.532-04:00 – 2020-10-12T00:00:00.000-04:00)'\n```\n\n----------------------------------------\n\nTITLE: Changing Time Zones with setZone in Luxon\nDESCRIPTION: Demonstrates how to change the time zone of a DateTime object using the setZone method. This changes the zone while keeping the underlying timestamp the same, resulting in different local times but the same instant in time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\");\n\n// different local times with different offsets\nlocal.toString(); //=> '2017-09-13T18:30:51.141-04:00'\nrezoned.toString(); //=> '2017-09-13T15:30:51.141-07:00'\n\n// but actually the same time\nlocal.valueOf() === rezoned.valueOf(); //=> true\n```\n\n----------------------------------------\n\nTITLE: Accessing DateTime Component Properties in Luxon\nDESCRIPTION: Demonstrates accessing individual date and time components of a DateTime instance through property getters, including year, month, day, second, and weekday.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndt = DateTime.now();\ndt.year     //=> 2017\ndt.month    //=> 9\ndt.day      //=> 14\ndt.second   //=> 47\ndt.weekday  //=> 4\n```\n\n----------------------------------------\n\nTITLE: Using Intervals for Accurate Time Differences\nDESCRIPTION: Demonstrates how Intervals can provide more accurate time differences than Duration objects by recalculating the length in different units on demand, preserving the start and end points.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\nvar i = Interval.fromDateTimes(start, end);\n\ni.length('days');       //=> 28\ni.length('months')      //=> 1\n```\n\n----------------------------------------\n\nTITLE: Calculating Accurate Day Difference Between Dates\nDESCRIPTION: Shows how to accurately calculate the number of days between two dates by specifying the desired unit in the diff method, avoiding conversion errors.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar diffInDays = end.diff(start, 'days');\ndiffInDays.toObject(); //=> { days: 28 }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Calendar vs Time Math in Luxon\nDESCRIPTION: Shows the difference between calendar-based math (adding months) and time-based math (adding days) to a DateTime object.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.local(2017, 2, 13).plus({ months: 1 }).toISODate() //=> '2017-03-13'\n\nDateTime.local(2017, 2, 13).plus({ days: 30 }).toISODate() //=> '2017-03-15'\n```\n\n----------------------------------------\n\nTITLE: Using keepLocalTime with setZone in Luxon\nDESCRIPTION: Shows how to use the keepLocalTime option with setZone to change the zone while keeping the local time fixed. This alters the underlying timestamp, resulting in a different moment in time with the same wall clock time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\", { keepLocalTime: true });\n\nlocal.toString(); //=> '2017-09-13T18:36:23.187-04:00'\nrezoned.toString(); //=> '2017-09-13T18:36:23.187-07:00'\n\nlocal.valueOf() === rezoned.valueOf(); //=> false\n```\n\n----------------------------------------\n\nTITLE: Ad-hoc Date Parsing with Luxon in JavaScript\nDESCRIPTION: Demonstrates ad-hoc parsing of date strings using Luxon's fromFormat method. This method allows parsing of custom date formats and supports internationalization.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromFormat(\"May 25 1982\", \"LLLL dd yyyy\");\nDateTime.fromFormat(\"mai 25 1982\", \"LLLL dd yyyy\", { locale: \"fr\" });\n```\n\n----------------------------------------\n\nTITLE: Converting and Formatting Durations in Luxon\nDESCRIPTION: Shows various ways to convert and format a Duration including converting to seconds, extracting an object of components, and formatting as an ISO 8601 duration string.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndur.as('seconds') //=> 7620\ndur.toObject()    //=> { hours: 2, minutes: 7 }\ndur.toISO()       //=> 'PT2H7M'\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to HTTP and RFC 2822 Format Strings\nDESCRIPTION: Demonstrates how to format DateTime objects to legacy standard formats like RFC 2822 and HTTP date formats, which are used in specific contexts like email headers and HTTP headers.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toRFC2822(); //=> 'Thu, 20 Apr 2017 11:32:00 -0400'\ndt.toHTTP(); //=> 'Thu, 20 Apr 2017 03:32:00 GMT'\n```\n\n----------------------------------------\n\nTITLE: Converting Between Duration Units in Luxon\nDESCRIPTION: Demonstrates how to convert durations between different time units using 'shiftTo' and 'as' methods. The shiftTo method returns a new Duration with the specified units, while the 'as' method converts to a single unit and returns its value.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar dur = Duration.fromObject({ months: 4, weeks: 2, days: 6 })\n\ndur.as('days')                            //=> 140\ndur.shiftTo('days').toObject()            //=> { days: 140 }\ndur.shiftTo('weeks', 'hours').toObject()  //=> { weeks: 18, hours: 144 }\n```\n\n----------------------------------------\n\nTITLE: DateTime Comparison Operations\nDESCRIPTION: Demonstrates various ways to compare DateTime objects including direct comparison and using hasSame method.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd1.toMillis() === d2.toMillis() // are d1 and d2 the same instant in time?\n+d1 === +d2 // same test, using object coercion\nd1.hasSame(d2, 'year');   // both DateTimes have the same calendar year\nd1.hasSame(d2, 'day');    // both DateTimes have the same calendar day\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to ISO Format in Luxon\nDESCRIPTION: Shows how to convert a DateTime instance to an ISO 8601 formatted string using the toISO() method, useful for machine-readable date/time representation.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toISO() //=> '2017-09-14T03:21:47.070-04:00'\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to Unix Timestamps in JavaScript\nDESCRIPTION: Shows methods for converting DateTime objects to numerical Unix timestamps in milliseconds, seconds, or as integer values, which are useful for calculations and interoperability.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toMillis(); //=> 1492702320000\ndt.toSeconds(); //=> 1492702320.000\ndt.toUnixInteger(); // => 1492702320\ndt.valueOf(); //=> 1492702320000, same as .toMillis()\n```\n\n----------------------------------------\n\nTITLE: Setting DateTime Properties in Luxon\nDESCRIPTION: Shows how to create a new DateTime instance by overriding specific properties of an existing one using the set() method. This example sets the hour to 3.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.now();\ndt.set({hour: 3}).hour   //=> 3\n```\n\n----------------------------------------\n\nTITLE: Specifying Units in Diff Calculations\nDESCRIPTION: Shows the proper way to calculate differences in specific units by explicitly specifying the units in the diff method, avoiding conversion problems.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar monthsDiff = end.diff(start, \"months\");\nvar daysDiff = end.diff(start, \"days\");\n```\n\n----------------------------------------\n\nTITLE: DateTime Difference Calculations\nDESCRIPTION: Examples of calculating time differences between DateTime objects returning Duration results.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\n\nvar diffInMonths = end.diff(start, 'months');\ndiffInMonths.toObject(); //=> { months: 1 }\n\nvar diff = end.diff(start);\ndiff.toObject() //=> { milliseconds: 2415600000 }\n\nend.diff(start, ['months', 'days']).toObject() //=> { months: 1, days: 2 }\n```\n\n----------------------------------------\n\nTITLE: Adding Duration to DateTime in Luxon\nDESCRIPTION: Shows how to add a Duration to a DateTime instance using the plus() method, which returns a new DateTime that is later by the specified duration.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndt.plus(dur);\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Month Names with Info Class in Luxon\nDESCRIPTION: Shows how to get localized month names using Luxon's Info class. This example retrieves the full month names in French.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nInfo.months('long', {locale: 'fr'}) //=> [ 'janvier', 'février', 'mars', 'avril', ... ]\n```\n\n----------------------------------------\n\nTITLE: Parsing Unix Timestamps with Luxon in JavaScript\nDESCRIPTION: Shows how to parse numerical Unix timestamps using Luxon's fromMillis and fromSeconds methods. Both methods accept options for specifying timezone, calendar, and numbering system.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromMillis(1542674993410);\nDateTime.fromSeconds(1542674993);\n```\n\n----------------------------------------\n\nTITLE: Date Math Across DST Shifts in Luxon\nDESCRIPTION: Demonstrates how Luxon handles date math across DST shifts. Adding days preserves the wall clock time regardless of DST, while adding hours adds the exact duration, which may result in different wall clock times.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour; //=> 10, just for comparison\nstart.plus({ days: 1 }).hour; //=> 10, stayed the same\nstart.plus({ hours: 24 }).hour; //=> 11, DST pushed forward an hour\n```\n\n----------------------------------------\n\nTITLE: Handling Ambiguous Times during DST in Luxon\nDESCRIPTION: Shows how Luxon handles ambiguous times that occur twice during DST Fall Back shifts. The behavior is undefined and may vary depending on how the DateTime is created, with examples showing different results.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.local(2017, 11, 5, 1, 30).offset / 60; //=> -4\nDateTime.local(2017, 11, 4, 1, 30).plus({ days: 1 }).offset / 60; //=> -4\nDateTime.local(2017, 11, 6, 1, 30).minus({ days: 1 }).offset / 60; //=> -5\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Dates and Times with Luxon in JavaScript\nDESCRIPTION: Demonstrates parsing SQL dates, times, and datetimes using Luxon's fromSQL method. This method works similarly to fromISO.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromSQL(\"2017-05-15\");\nDateTime.fromSQL(\"2017-05-15 09:24:15\");\nDateTime.fromSQL(\"09:24:15\");\n```\n\n----------------------------------------\n\nTITLE: Converting Intervals to Durations with Specific Units\nDESCRIPTION: Shows how to convert Interval objects to Duration objects with specific units using the toDuration method, which allows you to preserve the accuracy of the interval's length in your chosen units.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ni.toDuration('months').toObject(); //=> { months: 1 }\ni.toDuration('days').toObject(); //=> { days: 28 }\n```\n\n----------------------------------------\n\nTITLE: ToLocaleString Parameter Changes in Luxon 2.0\nDESCRIPTION: Illustrates the new parameter structure for toLocaleString() where Intl options and DateTime configuration are now passed as separate parameters.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/upgrading.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Luxon 1.x\nDateTime.now().toLocaleString({ hour: \"2-digit\", locale: \"ru\" })\n\n// vs Luxon 2.x\nDateTime.now().toLocaleString({ hour: \"2-digit\" }, { locale: \"ru\" })\n```\n\n----------------------------------------\n\nTITLE: Parsing Strings with Offset in Luxon\nDESCRIPTION: Examples of parsing date strings that contain offset information using DateTime.fromISO and DateTime.fromFormat methods. Luxon interprets the time with the specified offset but converts the result to the system's local zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar specifyOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\");\n\nspecifyOffset.zoneName; //=> 'America/New_York'\nspecifyOffset.toString(); //=> '2017-05-15T14:10:23.000-04:00'\n\nvar specifyZone = DateTime.fromFormat(\n  \"2017-05-15T09:10:23 Europe/Paris\",\n  \"yyyy-MM-dd'T'HH:mm:ss z\"\n);\n\nspecifyZone.zoneName; //=> 'America/New_York'\nspecifyZone.toString(); //=> '2017-05-15T03:10:23.000-04:00'\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects in a Specific Time Zone\nDESCRIPTION: This snippet demonstrates how to create a DateTime object in a specific time zone using the zone option. The input string is interpreted as a local time in the specified zone (Europe/Paris).\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar overrideZone = DateTime.fromISO(\"2017-05-15T09:10:23\", { zone: \"Europe/Paris\" });\n\noverrideZone.zoneName; //=> 'Europe/Paris'\noverrideZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Time Zones in Luxon\nDESCRIPTION: This snippet demonstrates how Luxon handles invalid time zone specifications. When an unsupported or non-existent zone is provided, Luxon returns an invalid DateTime object with an appropriate error message.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbogus = DateTime.local().setZone(\"America/Bogus\");\n\nbogus.isValid; //=> false\nbogus.invalidReason; //=> 'unsupported zone'\n```\n\n----------------------------------------\n\nTITLE: Using toLocaleString for Internationalized DateTime Formatting\nDESCRIPTION: Demonstrates basic usage of toLocaleString method to create human-readable date strings with internationalization support using browser's Intl capabilities.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toLocaleString(); //=> '4/20/2017'\ndt.toLocaleString(DateTime.DATETIME_FULL); //=> 'April 20, 2017 at 11:32 AM EDT'\ndt.setLocale('fr').toLocaleString(DateTime.DATETIME_FULL); //=> '20 avril 2017 à 11:32 UTC−4'\n```\n\n----------------------------------------\n\nTITLE: Accessing Time Zone Information in Luxon\nDESCRIPTION: Demonstrates the various accessors available in Luxon DateTime objects for retrieving time zone and offset information, including zoneName, offset, offsetNameShort, offsetNameLong, isOffsetFixed, and isInDST.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.local();\n\ndt.zoneName; //=> 'America/New_York'\ndt.offset; //=> -240\ndt.offsetNameShort; //=> 'EDT'\ndt.offsetNameLong; //=> 'Eastern Daylight Time'\ndt.isOffsetFixed; //=> false\ndt.isInDST; //=> true\n```\n\n----------------------------------------\n\nTITLE: Method Chaining with Invalid DateTimes in Luxon\nDESCRIPTION: Illustrates how methods that return Luxon objects maintain invalidity through method chaining.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndt.plus({ days: 4 }).isValid; //=> false\n```\n\n----------------------------------------\n\nTITLE: Locale-aware Formatting Examples\nDESCRIPTION: Various examples of locale-aware date formatting using different methods\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndt.setLocale(\"fr\").toLocaleString(DateTime.DATE_FULL); //=> '25 septembre 2017'\n\ndt.toLocaleString({ locale: \"es\" , ...DateTime.DATE_FULL }); //=> '25 de septiembre de 2017'\n\ndt.setLocale(\"fr\").toFormat(\"MMMM dd, yyyy GG\"); //=> 'septembre 25, 2017 après Jésus-Christ'\n```\n\n----------------------------------------\n\nTITLE: Changing DateTime Locale\nDESCRIPTION: Shows two methods for changing locale on an existing DateTime instance\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().setLocale(\"fr\").locale; //=> 'fr'\n\nDateTime.now().reconfigure({ locale: \"fr\" }).locale; //=> 'fr'\n```\n\n----------------------------------------\n\nTITLE: Requiring Luxon in Node.js\nDESCRIPTION: JavaScript code demonstrating how to require the DateTime class from Luxon in a Node.js environment after building the library.\nSOURCE: https://github.com/moment/luxon/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar DateTime = require('./build/cjs-browser/luxon').DateTime\n```\n\n----------------------------------------\n\nTITLE: Overriding Zone when Parsing Dates in Luxon\nDESCRIPTION: Demonstrates how to override the time zone when parsing a string that contains offset information, using the zone option. The DateTime gets converted to the specified zone rather than the system's local zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar specifyOffsetAndOverrideZone = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", {\n  zone: \"Europe/Paris\"\n});\n\nspecifyOffsetAndOverrideZone.zoneName; //=> 'Europe/Paris'\nspecifyOffsetAndOverrideZone.toString(); //=> '2017-05-15T20:10:23.000+02:00'\n```\n\n----------------------------------------\n\nTITLE: Checking DateTime Validity in JavaScript using Luxon\nDESCRIPTION: Demonstrates how to check if a DateTime object is valid using the isValid property when creating a DateTime with invalid day value.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.fromObject({ month: 6, day: 400 });\ndt.isValid //=> false\n```\n\n----------------------------------------\n\nTITLE: Node.js Module Import\nDESCRIPTION: Example of importing DateTime from Luxon using Node.js require syntax.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DateTime } = require(\"luxon\");\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects in UTC\nDESCRIPTION: This example shows how to create a DateTime object in UTC using the utc() static method. The input is interpreted as UTC time and the resulting DateTime is in the UTC zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar utc = DateTime.utc(2017, 05, 15, 9, 10, 23);\n\nutc.zoneName; //=> 'UTC'\nutc.toString(); //=> '2017-05-15T09:10:23.000Z'\n```\n\n----------------------------------------\n\nTITLE: Invalid DateTime Examples in Luxon\nDESCRIPTION: Shows different ways to create invalid DateTimes using invalid timezone and contradictory information.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// specify a time zone that doesn't exist\nDateTime.now().setZone(\"America/Blorp\").isValid; //=> false\n\n// provide contradictory information (here, this date is not a Wednesday)\nDateTime.fromObject({ year: 2017, month: 5, day: 25, weekday: 3 }).isValid; //=> false\n```\n\n----------------------------------------\n\nTITLE: Configuring Android JSC Intl Support in Gradle\nDESCRIPTION: Gradle configuration change to enable Intl support in React Native Android by switching to the android-jsc-intl flavor instead of the default JSC implementation.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/matrix.md#2025-04-18_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n-def jscFlavor = 'org.webkit:android-jsc:+'\n+def jscFlavor = 'org.webkit:android-jsc-intl:+'\n```\n\n----------------------------------------\n\nTITLE: Converting Intervals to Multi-Unit Durations\nDESCRIPTION: Demonstrates how to convert an Interval to a Duration with multiple units of time, creating a more human-readable representation of the time span with years, months, and days.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nend = DateTime.fromISO('2018-05-25');\ni = start.until(end);\ni.toDuration(['years', 'months', 'days']).toObject(); //=> { years: 1, months: 3, days: 12 }\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional DateTime Properties in Luxon\nDESCRIPTION: Shows how to access additional properties of a DateTime instance including the time zone name, UTC offset in minutes, and the number of days in the current month.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndt.zoneName     //=> 'America/New_York'\ndt.offset       //=> -240\ndt.daysInMonth  //=> 30\n```\n\n----------------------------------------\n\nTITLE: Debugging Date Parsing with Luxon in JavaScript\nDESCRIPTION: Shows how to use Luxon's fromFormatExplain method for debugging parsing issues. This method provides detailed information about the parsing process, including regex patterns and matched values.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromFormatExplain(\"Aug 6 1982\", \"MMMM d yyyy\");\n\nvar d = DateTime.fromFormat(\"August 32 1982\", \"MMMM d yyyy\");\nd.isValid; //=> false\nd.invalidReason; //=> 'day out of range'\n\nDateTime.fromFormatExplain(\"August 32 1982\", \"MMMM d yyyy\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Immutability in Luxon\nDESCRIPTION: This example demonstrates Luxon's immutable approach, where adding time to a DateTime instance returns a new instance without modifying the original object.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/moment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar d1 = DateTime.now();\nvar d2 = d1.plus({ hours: 1 });\nd1.valueOf() === d2.valueOf(); //=> false\n```\n\n----------------------------------------\n\nTITLE: Multi-unit DateTime Math\nDESCRIPTION: Examples of performing DateTime calculations with multiple units simultaneously.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO('2017-05-15').plus({months: 2, days: 6}).toISODate(); //=> '2017-07-21'\nDateTime.fromISO('2017-04-30').plus({days: 1}).plus({months: 1}).toISODate() //=> '2017-06-01'\n```\n\n----------------------------------------\n\nTITLE: Creating a Duration in Luxon\nDESCRIPTION: Creates a Duration instance representing a period of 2 hours and 7 minutes using the Duration.fromObject() method. Duration objects represent a quantity of time rather than specific points in time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar dur = Duration.fromObject({ hours: 2, minutes: 7 });\n```\n\n----------------------------------------\n\nTITLE: Formatting DateTime with toLocaleString in Luxon\nDESCRIPTION: Demonstrates formatting a DateTime instance as a human-readable string using toLocaleString(). The example shows both default formatting and using a predefined format constant for medium date and time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toLocaleString()      //=> '9/14/2017'\ndt.toLocaleString(DateTime.DATETIME_MED) //=> 'September 14, 3:21 AM'\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Times during DST in Luxon\nDESCRIPTION: Demonstrates how Luxon handles dates and times that don't exist due to DST Spring Forward shifts. These non-existent times get pushed forward by the duration of the shift (typically one hour).\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.local(2017, 3, 12, 2, 30).toString(); //=> '2017-03-12T03:30:00.000-04:00'\n\nDateTime.local(2017, 3, 11, 2, 30)\n  .plus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\nDateTime.local(2017, 3, 13, 2, 30)\n  .minus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Formatting in Luxon\nDESCRIPTION: Example of setting locale and formatting a date in Greek using Luxon's DateTime\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now()\n  .setLocale(\"el\")\n  .toLocaleString(DateTime.DATE_FULL); //=>  '24 Σεπτεμβρίου 2017'\n```\n\n----------------------------------------\n\nTITLE: Information Loss When Converting Duration Units\nDESCRIPTION: Shows how converting between duration units can lead to information loss, as demonstrated when comparing month-to-day conversions versus actual date differences.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\n\nvar diffInMonths = end.diff(start, 'months');\ndiffInMonths.as('days'); //=> 30\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date Strings in Luxon\nDESCRIPTION: Demonstrates parsing ISO 8601 formatted date strings into DateTime instances using DateTime.fromISO(). The first example parses just a date (defaulting to midnight), while the second includes a specific time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO(\"2017-05-15\")          //=> May 15, 2017 at midnight\nDateTime.fromISO(\"2017-05-15T08:30:00\") //=> May 15, 2017 at 8:30\n```\n\n----------------------------------------\n\nTITLE: Unexpected Results from Default Unit Conversions\nDESCRIPTION: Demonstrates how using default diff units (milliseconds) and then converting to other units can lead to unexpected results, particularly when time zones involve DST changes.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar diff = end.diff(start); // default unit is milliseconds\n\n// wtf, that's not a month!\ndiff.as('months'); //=> 0.9319444 \n\n// it's not even the right number of days! (hint: my time zone has a DST)\ndiff.shiftTo('hours').as('days'); //=> 27.958333333333332\n```\n\n----------------------------------------\n\nTITLE: Localized Calendar Information\nDESCRIPTION: Examples of getting localized calendar information like months, weekdays, and eras\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nInfo.months(\"long\", { locale: \"fr\" }); //=> [ 'janvier', 'février', ...\nInfo.weekdays(\"long\", { locale: \"fr\" }); //=> [ 'lundi', 'mardi', ...\nInfo.eras(\"long\", { locale: \"fr\" }); //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Duration Properties in Luxon\nDESCRIPTION: Demonstrates accessing the component properties of a Duration instance through getters, including hours, minutes, and seconds.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndur.hours   //=> 2\ndur.minutes //=> 7\ndur.seconds //=> 0\n```\n\n----------------------------------------\n\nTITLE: DST Handling in Luxon\nDESCRIPTION: Shows how Luxon handles Daylight Saving Time transitions when performing date calculations.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour                          //=> 10, just for comparison\nstart.plus({days: 1}).hour          //=> 10, stayed the same\nstart.plus({hours: 24}).hour        //=> 11, DST pushed forward an hour\n```\n\n----------------------------------------\n\nTITLE: Creating Durations with Longterm Conversion Accuracy\nDESCRIPTION: Shows how to create Duration objects using the 'longterm' conversion accuracy option, which uses more precise conversion ratios based on the 400-year calendar cycle.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDuration.fromObject({ years: 23 }, { conversionAccuracy: 'longterm' });\nDuration.fromISO('PY23', { conversionAccuracy: 'longterm' });\n\nend.diff(start, 'days', { conversionAccuracy: 'longterm' })\n```\n\n----------------------------------------\n\nTITLE: Duration Operations in Luxon\nDESCRIPTION: Shows how to create and manipulate Duration objects for time calculations.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dur = Duration.fromObject({ days: 3, hours: 6})\n\n// examine it\ndur.toObject()          //=> { days: 3, hours: 6 }\n\n// express in minutes\ndur.as('minutes')       //=> 4680\n\n// convert to minutes\ndur.shiftTo('minutes').toObject() //=> { minutes: 4680 }\n\n// add to a DateTime\nDateTime.fromISO(\"2017-05-15\").plus(dur).toISO() //=> '2017-05-18T06:00:00.000-04:00'\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTime Formatting with Intl.DateTimeFormat Options\nDESCRIPTION: Shows how to use custom Intl.DateTimeFormat options to format DateTime objects with specific components and how to examine and modify the built-in formatting presets.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndt.toLocaleString({ month: 'long', day: 'numeric' }); //=> 'April 20'\n\nDateTime.DATETIME_FULL;  //=> {\n                         //     year: 'numeric',\n                         //     month: 'long',\n                         //     day: 'numeric',\n                         //     hour: 'numeric',\n                         //     minute: '2-digit',\n                         //     timeZoneName: 'short'\n                         //   }\n\ndt.toLocaleString(DateTime.DATE_SHORT); //=>  '4/20/2017'\nvar newFormat = {...DateTime.DATE_SHORT, weekday: 'long' };\ndt.toLocaleString(newFormat); //=>  'Thursday, 4/20/2017'\n```\n\n----------------------------------------\n\nTITLE: Creating a DateTime from an Object with Custom Options in Luxon\nDESCRIPTION: Creates a DateTime instance from an object of components and options. This example sets the day and hour while using the 'America/Los_Angeles' time zone and Bengali numbering system. Unspecified date components default to the current date or zero.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndt = DateTime.fromObject({day: 22, hour: 12 }, { zone: 'America/Los_Angeles', numberingSystem: 'beng'})\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Duration Conversion Accuracy\nDESCRIPTION: Demonstrates how to change the conversion accuracy of an existing Duration object using the reconfigure method, switching from casual to longterm accuracy.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar pedanticDuration = casualDuration.reconfigure({ conversionAccuracy: 'longterm' });\n```\n\n----------------------------------------\n\nTITLE: Locale-aware Parsing\nDESCRIPTION: Example of parsing a localized date string using DateTime.fromFormat\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromFormat(\"septembre 25, 2017 après Jésus-Christ\", \"MMMM dd, yyyy GG\", { locale: \"fr\" });\n```\n\n----------------------------------------\n\nTITLE: Debugging Invalid DateTimes in Luxon\nDESCRIPTION: Shows how to get detailed information about why a DateTime is invalid using invalidReason and invalidExplanation properties.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.now().setZone(\"America/Blorp\");\ndt.invalidReason; //=>  'unsupported zone'\ndt.invalidExplanation; //=> 'the zone \"America/Blorp\" is not supported'\n```\n\n----------------------------------------\n\nTITLE: Converting Dates Using ISO Week Calendar in Luxon\nDESCRIPTION: Demonstrates how to work with ISO Week calendar in Luxon, parsing an ISO week date and manipulating it by adding weeks and days before formatting it back to ISO week format.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/calendars.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nDateTime.fromISO('2017-W23-3').plus({ weeks: 1, days: 2 }).toISOWeekDate(); //=>  '2017-W24-5'\n```\n\n----------------------------------------\n\nTITLE: Using Macro Tokens for Locale-Aware Formatting\nDESCRIPTION: Shows the usage of macro tokens that combine multiple components and format them according to locale conventions using the native Intl API.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromISO('2014-08-06T13:07:04.054').toFormat('ff'); //=> 'Aug 6, 2014, 1:07 PM'\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to ISO String in Luxon\nDESCRIPTION: Converts a DateTime instance to an ISO 8601 formatted string using the toString() method. This returns the date and time with timezone offset information.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/tour.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().toString(); //=> '2017-09-14T03:20:34.091-04:00'\n```\n\n----------------------------------------\n\nTITLE: Locale-based Week Operations\nDESCRIPTION: Examples of working with locale-specific week definitions and operations\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst dt = DateTime.local(2022, 1, 1, { locale: \"en-US\" });\ndt.localWeekday // 7, because Saturday is the 7th day of the week in en-US\ndt.localWeekNumber // 1, because 1 January is always in the first week in en-US\ndt.localWeekYear // 2022, because 1 January is always in the first week in en-US\ndt.weeksInLocalWeekYear // 53, because 2022 has 53 weeks in en-US\n```\n\n----------------------------------------\n\nTITLE: Using setZone Parameter for Parsing in Luxon\nDESCRIPTION: Shows how to use the setZone parameter when parsing date strings to retain the original zone information. If only an offset is provided, Luxon creates a fixed-offset zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar keepOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", { setZone: true });\n\nkeepOffset.zoneName; //=> 'UTC-9'\nkeepOffset.toString(); //=> '2017-05-15T09:10:23.000-09:00'\n\nvar keepZone = DateTime.fromFormat(\"2017-05-15T09:10:23 Europe/Paris\", \"yyyy-MM-dd'T'HH:mm:ss z\", {\n  setZone: true\n});\n\nkeepZone.zoneName; //=> 'Europe/Paris'\nkeepZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Calendar in Luxon\nDESCRIPTION: Shows how to reconfigure a DateTime object to use an alternative output calendar (Hebrew in this example) and display the date using that calendar system.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/calendars.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar dtHebrew = DateTime.now().reconfigure({ outputCalendar: \"hebrew\" });\ndtHebrew.outputCalendar; //=> 'hebrew'\ndtHebrew.toLocaleString() //=> '4 Tishri 5778'\n```\n\n----------------------------------------\n\nTITLE: DateTime Output Methods in Moment.js and Luxon\nDESCRIPTION: Demonstrates various output formatting methods in both libraries, including ISO formatting, custom formats, and conversion to other representations like JS Date objects and epoch time.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/moment.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Simple string output\ntoString()   // Moment\ntoString()   // Luxon\n\n// Full ISO 8601\niso()        // Moment\ntoISO()      // Luxon\n\n// ISO date only\n// None       // Moment\ntoISODate()  // Luxon\n\n// ISO time only\n// None       // Moment\ntoISOTime()  // Luxon\n\n// Custom format\nformat(...)  // Moment\ntoFormat(...) // Luxon\n\n// RFC 2822\n// No direct equivalent // Moment\ntoRFC2822()  // Luxon\n\n// HTTP date string\n// No direct equivalent // Moment\ntoHTTP()     // Luxon\n\n// JS Date\ntoDate()     // Moment\ntoJSDate()   // Luxon\n\n// Epoch time\nvalueOf()    // Moment\ntoMillis() or valueOf() // Luxon\n\n// Object\ntoObject()   // Moment\ntoObject()   // Luxon\n\n// Duration\ndiff(Moment) // Moment\ndiff(DateTime) // Luxon\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime with Specific Output Calendar in Luxon\nDESCRIPTION: Demonstrates how to format a date using a specific output calendar by passing it during DateTime object creation and then formatting it with the DATE_FULL format.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/calendars.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nDateTime.fromObject({ outputCalendar: c }).toLocaleString(DateTime.DATE_FULL);\n```\n\n----------------------------------------\n\nTITLE: Comparing DateTime Queries between Moment.js and Luxon\nDESCRIPTION: Shows how to perform various time comparisons in both Moment.js and Luxon, including before/after checks, same unit comparisons, and DST/leap year queries.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/moment.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Is this time before that time?\nm1.isBefore(m2)       // Moment\ndt1 < dt2             // Luxon\n\n// Is this time after that time?\nm1.isAfter(m2)        // Moment\ndt1 > dt2             // Luxon\n\n// Is this time the same or before that time?\nm1.isSameOrBefore(m2) // Moment\ndt1 <= dt2            // Luxon\n\n// Is this time the same or after that time?\nm1.isSameOrAfter(m2)  // Moment\ndt1 >= dt2            // Luxon\n\n// Do these two times have the same [unit]?\nm1.isSame(m2, unit)   // Moment\ndt1.hasSame(dt2, unit) // Luxon\n\n// Is this time's [unit] before that time's?\nm1.isBefore(m2, unit) // Moment\ndt1.startOf(unit) < dt2.startOf(unit) // Luxon\n\n// Is this time's [unit] after that time's?\nm1.isAfter(m2, unit)  // Moment\ndt1.startOf(unit) > dt2.startOf(unit) // Luxon\n\n// Is this time between these two times?\nm1.isBetween(m2, m3)  // Moment\nInterval.fromDateTimes(dt2, dt3).contains(dt1) // Luxon\n\n// Is this time inside a DST\nisDST()               // Moment\nisInDST               // Luxon\n\n// Is this time's year a leap year?\nisInLeapYear()        // Moment\nisInLeapYear          // Luxon\n\n// How many days are in this time's month?\ndaysInMonth()         // Moment\ndaysInMonth           // Luxon\n\n// How many days are in this time's year?\n// None               // Moment\ndaysInYear            // Luxon\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutability in Moment.js\nDESCRIPTION: This example illustrates how Moment.js objects are mutable, showing that when you add time to a moment instance, the original object is modified.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/moment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar m1 = moment();\nvar m2 = m1.add(1, 'hours');\nm1.valueOf() === m2.valueOf(); //=> true\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects in System's Local Time Zone\nDESCRIPTION: This example shows how Luxon creates DateTime objects in the system's local time zone by default. Both direct creation and ISO string parsing use the system zone (America/New_York in this case).\nSOURCE: https://github.com/moment/luxon/blob/master/docs/zones.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar local = DateTime.local(2017, 05, 15, 9, 10, 23);\n\nlocal.zoneName; //=> 'America/New_York'\nlocal.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n\nvar iso = DateTime.fromISO(\"2017-05-15T09:10:23\");\n\niso.zoneName; //=> 'America/New_York'\niso.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n```\n\n----------------------------------------\n\nTITLE: Escaping Single Quotes in DateTime Format\nDESCRIPTION: Demonstrates how to escape single quotes in format patterns by doubling them when needed in the output string.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().toFormat(\"MMM d ''yy\"); //=> Apr 7 '25\n```\n\n----------------------------------------\n\nTITLE: Accumulating Errors in Long-Term Duration Calculations\nDESCRIPTION: Illustrates how errors in casual duration conversions can accumulate significantly over large time spans, resulting in drastically different results when adding the same duration in different ways.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar dur = Duration.fromObject({ years: 50000 });\nDateTime.now().plus(dur.shiftTo('milliseconds')).year //=> 51984\nDateTime.now().plus(dur).year                         //=> 52017\n```\n\n----------------------------------------\n\nTITLE: Humanization Methods for Relative Time in Moment.js and Luxon\nDESCRIPTION: Shows methods for creating human-readable relative time descriptions in both libraries. Luxon uses Intl.RelativeTimeFormat for internationalization when supported by the browser.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/moment.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Time from now\nfromNow()    // Moment\ntoRelative() // Luxon\n\n// Time from other time\nfrom(Moment) // Moment\ntoRelative({ base: DateTime }) // Luxon\n\n// Time to now\ntoNow()      // Moment\nDateTime.local().toRelative({ base: this }) // Luxon\n\n// Time to other time\nto(Moment)   // Moment\notherTime.toRelative({ base: this }) // Luxon\n\n// \"Calendar time\"\ncalendar()   // Moment\ntoRelativeCalendar() // Luxon\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale\nDESCRIPTION: Example of setting the default locale for all new DateTime instances\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSettings.defaultLocale = \"fr\";\nDateTime.now().locale; //=> 'fr'\n```\n\n----------------------------------------\n\nTITLE: Throwing on Invalid DateTime Creation in Luxon\nDESCRIPTION: Demonstrates how to configure Luxon to throw exceptions when creating invalid DateTimes using Settings.throwOnInvalid.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nSettings.throwOnInvalid = true;\nDateTime.now().setZone(\"America/Blorp\"); //=> Error: Invalid DateTime: unsupported zone: the zone \"America/Blorp\" is not supported\n```\n\n----------------------------------------\n\nTITLE: DateTime Invalid Property Setting in Luxon\nDESCRIPTION: Demonstrates how setting invalid properties throws an error instead of creating an invalid DateTime.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().set({ blorp: 7 }); //=> kerplosion\n```\n\n----------------------------------------\n\nTITLE: ES6 Module Import\nDESCRIPTION: Importing DateTime from Luxon using ES6 module syntax.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DateTime } from \"luxon\";\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid DateTime Properties in Luxon\nDESCRIPTION: Shows how invalid DateTime objects return degenerate values for primitive operations like accessing properties or converting to string/object.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndt.year; //=>  NaN\ndt.toString(); //=> 'Invalid DateTime'\ndt.toObject(); //=> {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inconsistency in Casual Conversions\nDESCRIPTION: Shows how the default 'casual' unit conversions can lead to inconsistencies when converting between years, months, and days due to the approximations used in the conversion ratios.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nDuration.fromObject({ years:1 }).shiftTo('months').shiftTo('days').as('years') //=> 0.9863013698630136\n```\n\n----------------------------------------\n\nTITLE: Setting Locale During DateTime Construction\nDESCRIPTION: Demonstrates setting locale when creating a new DateTime instance from ISO string\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.fromISO(\"2017-09-24\", { locale: \"fr\" });\ndt.locale; //=> 'fr'\n```\n\n----------------------------------------\n\nTITLE: Numbering System Examples\nDESCRIPTION: Demonstrates using different numbering systems with locales\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar dt = DateTime.now().setLocale(\"ar\");\n\ndt.resolvedLocaleOptions(); //=> { locale: 'ar',\n//     numberingSystem: 'arab',\n//     outputCalendar: 'gregory' }\n\ndt.toLocaleString(); //=> '٢٤‏/٩‏/٢٠١٧'\n```\n\n----------------------------------------\n\nTITLE: Locale Resolution Options\nDESCRIPTION: Shows how to check the resolved locale options for a DateTime instance\nSOURCE: https://github.com/moment/luxon/blob/master/docs/intl.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.local({ locale: \"fr-co\" }).resolvedLocaleOptions(); //=> { locale: 'fr',\n//     numberingSystem: 'latn',\n//     outputCalendar: 'gregory' }\n```\n\n----------------------------------------\n\nTITLE: Standalone vs Format Tokens in Russian Locale\nDESCRIPTION: Illustrates the difference between standalone and format tokens for month names in Russian locale, where grammatical cases affect the word form.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = DateTime.fromISO('2014-08-06T13:07:04.054').setLocale('ru');\nd.toFormat('LLLL'); //=> 'август' (standalone)\nd.toFormat('MMMM'); //=> 'августа' (format)\n```\n\n----------------------------------------\n\nTITLE: Checking Luxon Feature Support in JavaScript\nDESCRIPTION: Method to check which Luxon features are supported in the current environment. Returns an object with boolean flags for different capabilities.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/matrix.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nInfo.features(); //=> { relative: false }\n```\n\n----------------------------------------\n\nTITLE: Creating Invalid Durations in Luxon\nDESCRIPTION: Shows how to create an invalid Duration by diffing an invalid DateTime.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/validity.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.local(2017, 28).diffNow().isValid; //=> false\n```\n\n----------------------------------------\n\nTITLE: Setting Default Output Calendar in Luxon\nDESCRIPTION: Shows how to set the default output calendar for all new DateTime instances using the Settings object, using the Persian calendar as an example.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/calendars.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nSettings.defaultOutputCalendar = 'persian';\n```\n\n----------------------------------------\n\nTITLE: Escaping Strings in DateTime Format\nDESCRIPTION: Shows how to escape text strings in date format patterns using single quotes to include literal text in the output.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/formatting.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\"); //=> '20 hours and 55 minutes'\n```\n\n----------------------------------------\n\nTITLE: System Zone Naming Changes in Luxon 2.0\nDESCRIPTION: Shows the rename of 'local' zone to 'system' zone for better clarity, including how to access zone information.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/upgrading.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromObject({}, { zone: \"local\" }) // still works\nDateTime.fromObject({}, { zone: \"system\" }) // preferred\n\nDateTime.fromObject({}, { zone: \"system\" }).zone // => type is SystemZone\nDateTime.fromObject({}, { zone: \"system\" }).zone.type // => \"system\"\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Setup with Script Tag\nDESCRIPTION: Simple browser installation using a script tag to load Luxon globally.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"luxon.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Manual Date Manipulation Example\nDESCRIPTION: Demonstrates how calendar math works under the hood using native JavaScript Date object.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/math.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar d = new Date('2017-02-13')\nd.setMonth(d.getMonth() + 1)\nd.toLocaleString() //=> '3/13/2017, 12:00:00 AM'\n```\n\n----------------------------------------\n\nTITLE: Browser Global Variable Aliasing\nDESCRIPTION: Example of creating an alias for the DateTime class from the global luxon object.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar DateTime = luxon.DateTime;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Zone Behavior Changes in Luxon 3.0\nDESCRIPTION: Demonstrates the new behavior in Luxon 3.0 where 'system' zone always uses system time regardless of default zone setting, while 'default' zone uses the configured default zone.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/upgrading.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSettings.defaultZone = \"America/Chicago\";\n\nDateTime.now().setZone(\"default\") // results in Chicago time\nDateTime.now().setZone(\"system\") // uses the user's system time\n```\n\n----------------------------------------\n\nTITLE: FromObject Parameter Changes in Luxon 2.0\nDESCRIPTION: Shows the updated parameter structure for DateTime.fromObject() and Duration.fromObject() methods where options are now passed as a separate second parameter.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/upgrading.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Luxon 1.x\nDateTime.fromObject({ hour: 3, minute: 2, zone: \"America/New_York\", locale: \"ru\" });\nDuration.fromObject({ hours: 3, minutes: 2, conversionAccuracy: \"casual\", locale: \"ru\" });\n\n// vs Luxon 2.x\nDateTime.fromObject({ hour: 3, minute: 2 }, { zone: \"America/New_York\", locale: \"ru\" });\nDuration.fromObject({ hours: 3, minutes: 2 }, { conversionAccuracy: \"casual\", locale: \"ru\" });\n```\n\n----------------------------------------\n\nTITLE: AMD Module Loading\nDESCRIPTION: Loading Luxon using AMD module syntax with RequireJS.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequirejs([\"luxon\"], function(luxon) {\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Default Zone Setting Changes in Luxon 2.0\nDESCRIPTION: Demonstrates the new ways to get and set the default zone in Luxon 2.0, supporting both string and Zone instance inputs.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/upgrading.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// setting\nSettings.defaultZone = \"America/New_York\"; // can take a string\nSettings.defaultZone = IANAZone.create(\"America/New_York\"); // or a Zone instance\n\n// getting\nSettings.defaultZone //=> a Zone instance\n```\n\n----------------------------------------\n\nTITLE: Parsing RFC 2822 and HTTP Dates with Luxon in JavaScript\nDESCRIPTION: Shows how to parse dates formatted according to RFC 2822 and HTTP header specs using Luxon's fromRFC2822 and fromHTTP methods.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/parsing.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDateTime.fromRFC2822(\"Tue, 01 Nov 2016 13:23:12 +0630\");\nDateTime.fromHTTP(\"Sunday, 06-Nov-94 08:49:37 GMT\");\nDateTime.fromHTTP(\"Sun, 06 Nov 1994 08:49:37 GMT\");\n```\n\n----------------------------------------\n\nTITLE: React Native Android JSC Configuration\nDESCRIPTION: Gradle configuration diff for enabling Intl support in React Native Android.\nSOURCE: https://github.com/moment/luxon/blob/master/docs/install.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-def jscFlavor = 'org.webkit:android-jsc:+'\n+def jscFlavor = 'org.webkit:android-jsc-intl:+'\n```\n\n----------------------------------------\n\nTITLE: Running npm commands inside Docker container in Luxon\nDESCRIPTION: This bash script runs npm commands within the Luxon Docker container, allowing developers to execute test suites in an isolated environment. The script takes npm run commands as arguments.\nSOURCE: https://github.com/moment/luxon/blob/master/docker/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run [arg]\n```\n\n----------------------------------------\n\nTITLE: Using Docker for Luxon Development\nDESCRIPTION: Commands to use the provided Docker container for Luxon development, installing dependencies and running tests without modifying the local Node environment.\nSOURCE: https://github.com/moment/luxon/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./docker/npm install --ignore-scripts\n./docker/npm test\n```\n\n----------------------------------------\n\nTITLE: Setting up Luxon Development Environment on macOS\nDESCRIPTION: Commands to install Node with full ICU support on macOS using Homebrew, then install dependencies and run tests for Luxon development.\nSOURCE: https://github.com/moment/luxon/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node --with-full-icu\nnpm install\n./scripts/test\n```\n\n----------------------------------------\n\nTITLE: Setting up Luxon Development Environment on Linux\nDESCRIPTION: Commands to set up Luxon development on Linux by installing the full-icu module for internationalization support and running tests.\nSOURCE: https://github.com/moment/luxon/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm install full-icu\n./scripts/test\n```\n\n----------------------------------------\n\nTITLE: Accessing Luxon in Browser Console\nDESCRIPTION: JavaScript code showing how to access Luxon classes in the browser console after running the demo site.\nSOURCE: https://github.com/moment/luxon/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.luxon.DateTime\n```\n\n----------------------------------------\n\nTITLE: Running Tests with full-icu in Luxon Development\nDESCRIPTION: The 'test' script provides a more convenient way to run tests when the 'full-icu' npm module is installed. This allows for testing internationalization features more effectively.\nSOURCE: https://github.com/moment/luxon/blob/master/scripts/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`test` is a script for more conveniently running the tests if you've installed `full-icu` as an npm module\n```\n\n----------------------------------------\n\nTITLE: Administrative Scripts in Luxon Development\nDESCRIPTION: Administrative task scripts that most developers won't need to use, including release management and site deployment tasks.\nSOURCE: https://github.com/moment/luxon/blob/master/scripts/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`release`, `tag`, and `deploy-site` are administrative tasks you won't need\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Navigation Links for Luxon Documentation\nDESCRIPTION: A markdown-formatted navigation menu containing links to various sections of the Luxon documentation, including installation, core concepts, API documentation, and rationale.\nSOURCE: https://github.com/moment/luxon/blob/master/site/docs/_sidebar.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Home](/)\n* [Install guide](install.md)\n* [A quick tour](tour.md)\n* [Upgrade guide](upgrading.md)\n* [Intl](intl.md)\n* [Time zones and offsets](zones.md)\n* [Calendars](calendars.md)\n* [Formatting](formatting.md)\n* [Parsing](parsing.md)\n* [Math](math.md)\n* [Validity](validity.md)\n* [API docs](api-docs/index.html ':ignore')\n* [Support matrix](matrix.md)\n* [For Moment users](moment.md)\n* [Why does Luxon exist?](why.md)\n```"
  }
]