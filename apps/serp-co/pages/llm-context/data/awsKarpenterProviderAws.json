[
  {
    "owner": "aws",
    "repo": "karpenter-provider-aws",
    "content": "TITLE: Recommended NodePool Requirements Configuration in Karpenter\nDESCRIPTION: This YAML snippet shows the recommended default configuration for NodePool requirements in Karpenter. It specifies constraints for architecture, OS, capacity type, instance category, and generation, suitable for most generic workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster with Managed Node Groups using eksctl\nDESCRIPTION: This script creates an EKS cluster with managed node groups using `eksctl`. It configures IAM roles for service accounts (IRSA) to grant Karpenter permissions to launch instances, adds the Karpenter node role to the aws-auth configmap, and installs Karpenter via Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step02-create-cluster.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter NodePool YAML\nDESCRIPTION: Complete example of a Karpenter NodePool configuration that defines node provisioning constraints, taints, labels, disruption settings, and resource limits. Includes settings for node expiration, startup behaviors, and consolidation policies.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      labels:\n        billing-team: my-team\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n      expireAfter: 720h | Never\n      terminationGracePeriod: 48h\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: \"karpenter.k8s.aws/instance-family\"\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 5\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\", \"reserved\"]\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty\n    consolidateAfter: 1m | Never\n    budgets:\n    - nodes: 10%\n    - schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      nodes: \"0\"\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n  weight: 10\nstatus:\n  conditions:\n    - type: Initialized\n      status: \"False\"\n      observedGeneration: 1\n      lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      reason: NodeClaimNotLaunched\n      message: \"NodeClaim hasn't succeeded launch\"\n  resources:\n    cpu: \"20\"\n    memory: \"8192Mi\"\n    ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass with NodePool in Karpenter for AWS\nDESCRIPTION: A complete example of configuring AWS-specific settings using EC2NodeClass in Karpenter. The example shows how to reference an EC2NodeClass from a NodePool and includes detailed configuration for kubelet settings, AMI selection, subnet and security group selection, IAM roles, tags, metadata options, block device mappings, and more.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  # Optional, dictates UserData generation and default block device mappings.\n  # May be ommited when using an `alias` amiSelectorTerm, otherwise required.\n  amiFamily: AL2\n\n  # Required, discovers subnets to attach to instances\n  # Each term in the array of subnetSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  subnetSelectorTerms:\n    # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n    # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n\n  # Required, discovers security groups to attach to instances\n  # Each term in the array of securityGroupSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  securityGroupSelectorTerms:\n    # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n    # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n    # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n\n  # Optional, IAM role to use for the node identity.\n  # The \"role\" field is immutable after EC2NodeClass creation. This may change in the\n  # future, but this restriction is currently in place today to ensure that Karpenter\n  # avoids leaking managed instance profiles in your account.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n\n  # Optional, IAM instance profile to use for the node identity.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n\n  # Each term in the array of amiSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  amiSelectorTerms:\n    # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n    # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n    # ID `ami-123`\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n    # Select EKS optimized AL2023 AMIs with version `v20240703`. This term is mutually\n    # exclusive and can't be specified with other terms.\n    # - alias: al2023@v20240703\n\n  # Optional, each term in the array of capacityReservationSelectorTerms is ORed together.\n  capacityReservationSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: ${CLUSTER_NAME}\n    - id: cr-123\n\n  # Optional, propagates tags to underlying EC2 resources\n  tags:\n    team: team-a\n    app: team-a-app\n\n  # Optional, configures IMDS for the instance\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1 # This is changed to disable IMDS access from containers not on the host network\n    httpTokens: required\n\n  # Optional, configures storage devices for the instance\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n\n  # Optional, use instance-store volumes for node ephemeral-storage\n  instanceStorePolicy: RAID0\n\n  # Optional, overrides autogenerated userdata with a merge semantic\n  userData: |\n    echo \"Hello world\"\n\n  # Optional, configures detailed monitoring for the instance\n  detailedMonitoring: true\n\n  # Optional, configures if the instance should be launched with an associated public IP address.\n  # If not specified, the default value depends on the subnet's public IP auto-assign setting.\n  associatePublicIPAddress: true\nstatus:\n  # Resolved subnets\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n\n  # Resolved security groups\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n\n  # Resolved AMIs\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n\n  # Capacity Reservations\n  capacityReservations:\n    - availabilityZone: us-west-2a\n      id: cr-01234567890123456\n      instanceMatchCriteria: targeted\n      instanceType: g6.48xlarge\n      ownerID: \"012345678901\"\n    - availabilityZone: us-west-2c\n      id: cr-12345678901234567\n      instanceMatchCriteria: open\n      instanceType: g6.48xlarge\n      ownerID: \"98765432109\"\n\n  # Generated instance profile name from \"role\"\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Creating Managed NodeGroup EKS Cluster for Karpenter\nDESCRIPTION: Creates an EKS cluster with managed node groups for kube-system and karpenter namespaces using eksctl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step02-create-cluster.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Team-Specific Deployment with NodeSelector\nDESCRIPTION: YAML configuration for a team-specific deployment that uses nodeSelector to ensure pods are scheduled on nodes with the matching company.com/team label value, working with the Exists operator in the NodePool to segregate workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Chart Signature\nDESCRIPTION: Validates the authenticity of the Karpenter Helm chart using Cosign verification against the official GitHub workflow signatures.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.3.3 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.3.3 \\\n  --annotations version=1.3.3\n```\n\n----------------------------------------\n\nTITLE: Setting Up Topology Spread Constraints in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure topology spread constraints for a pod. It defines rules for spreading pods across zones, hosts, and capacity types with a maximum skew of 1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter NodePool in YAML\nDESCRIPTION: Complete NodePool configuration example showing how to define node provisioning constraints, taints, requirements, disruption policies, and resource limits. Includes metadata, template specifications, disruption handling, and status reporting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      labels:\n        billing-team: my-team\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n      expireAfter: 720h | Never\n      terminationGracePeriod: 48h\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: \"karpenter.k8s.aws/instance-family\"\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 5\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\"]\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty\n    consolidateAfter: 1m | Never\n    budgets:\n    - nodes: 10%\n    - schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      nodes: \"0\"\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n  weight: 10\nstatus:\n  conditions:\n    - type: Initialized\n      status: \"False\"\n      observedGeneration: 1\n      lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      reason: NodeClaimNotLaunched\n      message: \"NodeClaim hasn't succeeded launch\"\n  resources:\n    cpu: \"20\"\n    memory: \"8192Mi\"\n    ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Complete EC2NodeClass Configuration\nDESCRIPTION: Comprehensive example of an EC2NodeClass configuration including kubelet settings, subnet selection, security groups, AMI selection, and various AWS-specific options.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  amiFamily: AL2\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass for AWS Karpenter Provisioner\nDESCRIPTION: A comprehensive example showing how to configure NodePool and EC2NodeClass resources for AWS Karpenter. The NodePool references an EC2NodeClass via nodeClassRef to define AWS-specific settings including kubelet configuration, AMI selection, subnet and security group selection, IAM roles, block device mappings, and various other AWS instance configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  # Optional, dictates UserData generation and default block device mappings.\n  # May be ommited when using an `alias` amiSelectorTerm, otherwise required.\n  amiFamily: AL2\n\n  # Required, discovers subnets to attach to instances\n  # Each term in the array of subnetSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  subnetSelectorTerms:\n    # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n    # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n\n  # Required, discovers security groups to attach to instances\n  # Each term in the array of securityGroupSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  securityGroupSelectorTerms:\n    # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n    # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n    # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n\n  # Optional, IAM role to use for the node identity.\n  # The \"role\" field is immutable after EC2NodeClass creation. This may change in the\n  # future, but this restriction is currently in place today to ensure that Karpenter\n  # avoids leaking managed instance profiles in your account.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n\n  # Optional, IAM instance profile to use for the node identity.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n\n  # Each term in the array of amiSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  amiSelectorTerms:\n    # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n    # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n    # ID `ami-123`\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n    # Select EKS optimized AL2023 AMIs with version `v20240703`. This term is mutually\n    # exclusive and can't be specified with other terms.\n    # - alias: al2023@v20240703\n\n  # Optional, each term in the array of capacityReservationSelectorTerms is ORed together.\n  capacityReservationSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: ${CLUSTER_NAME}\n    - id: cr-123\n\n  # Optional, propagates tags to underlying EC2 resources\n  tags:\n    team: team-a\n    app: team-a-app\n\n  # Optional, configures IMDS for the instance\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1 # This is changed to disable IMDS access from containers not on the host network\n    httpTokens: required\n\n  # Optional, configures storage devices for the instance\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n\n  # Optional, use instance-store volumes for node ephemeral-storage\n  instanceStorePolicy: RAID0\n\n  # Optional, overrides autogenerated userdata with a merge semantic\n  userData: |\n    echo \"Hello world\"\n\n  # Optional, configures detailed monitoring for the instance\n  detailedMonitoring: true\n\n  # Optional, configures if the instance should be launched with an associated public IP address.\n  # If not specified, the default value depends on the subnet's public IP auto-assign setting.\n  associatePublicIPAddress: true\nstatus:\n  # Resolved subnets\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n\n  # Resolved security groups\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n\n  # Resolved AMIs\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n\n  # Capacity Reservations\n  capacityReservations:\n    - availabilityZone: us-west-2a\n      id: cr-01234567890123456\n      instanceMatchCriteria: targeted\n      instanceType: g6.48xlarge\n      ownerID: \"012345678901\"\n    - availabilityZone: us-west-2c\n      id: cr-12345678901234567\n      instanceMatchCriteria: open\n      instanceType: g6.48xlarge\n      ownerID: \"98765432109\"\n\n  # Generated instance profile name from \"role\"\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Required VPC Private Endpoints for Karpenter\nDESCRIPTION: List of AWS VPC endpoints that must be enabled for Karpenter to function properly in a private cluster with no outbound internet access. These endpoints allow access to essential AWS services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ncom.amazonaws.<region>.ec2\ncom.amazonaws.<region>.ecr.api\ncom.amazonaws.<region>.ecr.dkr\ncom.amazonaws.<region>.s3 – For pulling container images\ncom.amazonaws.<region>.sts – For IAM roles for service accounts\ncom.amazonaws.<region>.ssm - For resolving default AMIs\ncom.amazonaws.<region>.sqs - For accessing SQS if using interruption handling\ncom.amazonaws.<region>.eks - For Karpenter to discover the cluster endpoint\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fallback NodePools with Architecture Preferences\nDESCRIPTION: This YAML configuration demonstrates how to define a cluster-wide default configuration for nodes launched by Karpenter. It creates a default NodePool with higher weight that prefers AMD64 architecture and a fallback NodePool for ARM64 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Recommended Default NodePool Configuration\nDESCRIPTION: Recommended base configuration for NodePool requirements that should fit most generic workload use-cases, specifying basic constraints for architecture, OS, capacity type, and instance categories.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Disruption Budgets for Drift in NodePool\nDESCRIPTION: A YAML configuration example that demonstrates how to control drift by using disruption budgets in a NodePool. The example shows how to schedule disruption budgets differently for business hours versus non-business hours.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n…\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Requests and Limits in Kubernetes Pod\nDESCRIPTION: This snippet demonstrates how to specify resource requests and limits for memory and CPU in a Kubernetes pod specification. The container requests 128MiB of memory and 0.5 CPU with limits of 256MiB and 1 CPU respectively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Resources in Karpenter for AWS\nDESCRIPTION: A complete example of a NodePool configuration that defines how Karpenter provisions nodes, including metadata, requirements, disruption rules, and resource limits. This YAML defines the template for creating NodeClaims that match specific instance types, zones, and other constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  # Template section that describes how to template out NodeClaim resources that Karpenter will provision\n  # Karpenter will consider this template to be the minimum requirements needed to provision a Node using this NodePool\n  # It will overlay this NodePool with Pods that need to schedule to further constrain the NodeClaims\n  # Karpenter will provision to launch new Nodes for the cluster\n  template:\n    metadata:\n      # Labels are arbitrary key-values that are applied to all nodes\n      labels:\n        billing-team: my-team\n\n      # Annotations are arbitrary key-values that are applied to all nodes\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      # References the Cloud Provider's NodeClass resource, see your cloud provider specific documentation\n      nodeClassRef:\n        group: karpenter.k8s.aws  # Updated since only a single version will be served\n        kind: EC2NodeClass\n        name: default\n\n      # Provisioned nodes will have these taints\n      # Taints may prevent pods from scheduling if they are not tolerated by the pod.\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n\n      # Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by this\n      # NodePool. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible for\n      # removing the taint after it has finished initializing the node.\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n\n      # The amount of time a Node can live on the cluster before being removed\n      # Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes\n      # You can choose to disable expiration entirely by setting the string value 'Never' here\n\n      # Note: changing this value in the nodepool will drift the nodeclaims.\n      expireAfter: 720h | Never\n\n      # The amount of time that a node can be draining before it's forcibly deleted. A node begins draining when a delete call is made against it, starting\n      # its finalization flow. Pods with TerminationGracePeriodSeconds will be deleted preemptively before this terminationGracePeriod ends to give as much time to cleanup as possible.\n      # If your pod's terminationGracePeriodSeconds is larger than this terminationGracePeriod, Karpenter may forcibly delete the pod\n      # before it has its full terminationGracePeriod to cleanup.\n\n      # Note: changing this value in the nodepool will drift the nodeclaims.\n      terminationGracePeriod: 48h\n\n      # Requirements that constrain the parameters of provisioned nodes.\n      # These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.\n      # Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.\n      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          # minValues here enforces the scheduler to consider at least that number of unique instance-category to schedule the pods.\n          # This field is ALPHA and can be dropped or replaced at any time\n          minValues: 2\n        - key: \"karpenter.k8s.aws/instance-family\"\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 5\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\", \"reserved\"]\n\n  # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes\n  # Configuration in this section constrains how aggressive Karpenter can be with performing operations\n  # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost\n  disruption:\n    # Describes which types of Nodes Karpenter should consider for consolidation\n    # If using 'WhenEmptyOrUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is empty or underutilized and could be changed to reduce cost\n    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods\n    consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty\n\n    # The amount of time Karpenter should wait to consolidate a node after a pod has been added or removed from the node.\n    # You can choose to disable consolidation entirely by setting the string value 'Never' here\n    consolidateAfter: 1m | Never # Added to allow additional control over consolidation aggressiveness\n\n    # Budgets control the speed Karpenter can scale down nodes.\n    # Karpenter will respect the minimum of the currently active budgets, and will round up\n    # when considering percentages. Duration and Schedule must be set together.\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning.\n    - schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      nodes: \"0\"\n\n  # Resource limits constrain the total size of the pool.\n  # Limits prevent Karpenter from creating new instances once the limit is exceeded.\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n\n  # Priority given to the NodePool when the scheduler considers which NodePool\n  # to select. Higher weights indicate higher priority when comparing NodePools.\n  # Specifying no weight is equivalent to specifying a weight of 0.\n  weight: 10\nstatus:\n  conditions:\n    - type: Initialized\n      status: \"False\"\n      observedGeneration: 1\n      lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      reason: NodeClaimNotLaunched\n      message: \"NodeClaim hasn't succeeded launch\"\n  resources:\n    cpu: \"20\"\n    memory: \"8192Mi\"\n    ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Kubernetes with Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure node affinity in Kubernetes using `requiredDuringSchedulingIgnoredDuringExecution`. It specifies that the pod must be scheduled on a node in either `us-west-2a` or `us-west-2b` and also specifically in `us-west-2b`.  This requires that the NodePool is configured to allow these zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"affinity:\\n  nodeAffinity:\\n    requiredDuringSchedulingIgnoredDuringExecution:\\n      nodeSelectorTerms:\\n        - matchExpressions:\\n          - key: \\\"topology.kubernetes.io/zone\\\"\\n            operator: \\\"In\\\"\\n            values: [\\\"us-west-2a\\\", \\\"us-west-2b\\\"]\\n          - key: \\\"topology.kubernetes.io/zone\\\"\\n            operator: \\\"In\\\"\\n            values: [\\\"us-west-2b\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData for AL2023 in Karpenter\nDESCRIPTION: Example of passing a NodeConfig YAML to customize kubelet configuration for AL2023 instances. This shows how to set maxPods to 42 in the NodeConfig.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Node Role for Karpenter\nDESCRIPTION: Creates an IAM role for EC2 instances that will be provisioned by Karpenter, with the necessary trust relationship to allow EC2 to assume the role.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step02-node-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Karpenter with Helm on AWS\nDESCRIPTION: This snippet shows how to enable debug logging for Karpenter during installation using Helm. It sets the logLevel option to debug when upgrading or installing the Karpenter chart.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints with Karpenter\nDESCRIPTION: This YAML shows how to configure topology spread constraints for a pod. The constraints ensure pods are spread across zones, hosts, and capacity types, limiting the blast radius of outages.  The `labelSelector` matches pods with the label `dev=jjones`, and `maxSkew` limits the difference in the number of pods on each topology domain.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  topologySpreadConstraints:\\n    - maxSkew: 1\\n      topologyKey: \\\"topology.kubernetes.io/zone\\\"\\n      whenUnsatisfiable: ScheduleAnyway\\n      labelSelector:\\n        matchLabels:\\n          dev: jjones\\n    - maxSkew: 1\\n      topologyKey: \\\"kubernetes.io/hostname\\\"\\n      whenUnsatisfiable: ScheduleAnyway\\n      labelSelector:\\n        matchLabels:\\n          dev: jjones\\n    - maxSkew: 1\\n      topologyKey: \\\"karpenter.sh/capacity-type\\\"\\n      whenUnsatisfiable: ScheduleAnyway\\n      labelSelector:\\n        matchLabels:\\n          dev: jjones\\n\"\n```\n\n----------------------------------------\n\nTITLE: Choosing Security Groups with Security Group Selector Terms in YAML\nDESCRIPTION: This YAML snippet defines how to use securityGroupSelectorTerms to choose security groups for a node within EC2NodeClass. The logic utilizes tags, names, and ids for group selection, ensuring that all defined criteria are met for secure node operations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n  # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n  # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod ENI Resources in Kubernetes\nDESCRIPTION: Example demonstrating how to request Pod ENI resources for AWS VPC CNI integration. The pod requests one pod ENI resource which enables features like Security Groups for Pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available AMI Versions with Bash\nDESCRIPTION: Bash commands to retrieve available AMI versions for different Linux distributions (AL2023, AL2, Bottlerocket) in AWS EC2.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2023/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $10}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $8}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/bottlerocket/aws-k8s-$K8S_VERSION\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"latest\" | awk -F '/' '{print $7}' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster with Fargate Profiles for Karpenter\nDESCRIPTION: This script creates an EKS cluster with Fargate profiles instead of managed node groups. It configures the necessary IAM roles and permissions for Karpenter to run on Fargate, sets up the CloudFormation stack, and prepares the cluster for Karpenter installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_IAM_ROLE_ARN=\"arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter\"\n\necho \"${KARPENTER_IAM_ROLE_ARN}\"\n\n# Create the cluster with additional IAM, with a CloudFormation\n# Stack Name that matches the cluster name (by default)\neksctl create cluster -f - <<EOF\n---\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: ${CLUSTER_NAME}\n  region: ${AWS_DEFAULT_REGION}\n  version: \"${K8S_VERSION}\"\n  tags:\n    karpenter.sh/discovery: ${CLUSTER_NAME}\niam:\n  withOIDC: true\n# managedNodeGroups:\n#   - instanceType: m5.large\n#     amiFamily: AmazonLinux2\n#     name: ${CLUSTER_NAME}-ng\n#     desiredCapacity: 2\n#     minSize: 1\n#     maxSize: 10\n#     privateNetworking: true\nfargateProfiles:\n  - name: karpenter\n    selectors:\n      - namespace: ${KARPENTER_NAMESPACE}\n  - name: kube-system\n    selectors:\n      - namespace: kube-system\niam:\n  withOIDC: true\n  serviceAccounts:\n  - metadata:\n      name: karpenter\n      namespace: ${KARPENTER_NAMESPACE}\n    roleName: ${CLUSTER_NAME}-karpenter\n    attachPolicyARNs:\n    - arn:aws:iam::aws:policy/AmazonEKS-EC2NodeInstanceRole\n    - arn:aws:iam::aws:policy/AmazonECR-ReadOnly\n    - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n    roleOnly: true\n    wellKnownPolicies:\n      awsLoadBalancerController: false\n    attachPolicy:\n      Version: \"2012-10-17\"\n      Statement:\n      - Effect: \"Allow\"\n        Action:\n        - ec2:CreateLaunchTemplate\n        - ec2:CreateFleet\n        - ec2:RunInstances\n        - ec2:CreateTags\n        - ec2:TerminateInstances\n        - ec2:DeleteLaunchTemplate\n        - ec2:DescribeLaunchTemplates\n        - ec2:DescribeInstances\n        - ec2:DescribeSecurityGroups\n        - ec2:DescribeSubnets\n        - ec2:DescribeInstanceTypes\n        - ec2:DescribeInstanceTypeOfferings\n        - ec2:DescribeAvailabilityZones\n        - ec2:DescribeSpotPriceHistory\n        - ec2:DescribeImages\n        - ec2:DescribeFleets\n        - ssm:GetParameter\n        - pricing:GetProducts\n        Resource: '*'\nEOF\n\necho \"Getting Cluster VPC\"\nexport CLUSTER_VPC=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query \"cluster.resourcesVpcConfig.vpcId\" --output text)\necho \"Getting Default Security Group\"\nexport CLUSTER_SECURITY_GROUP=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query \"cluster.resourcesVpcConfig.clusterSecurityGroupId\" --region ${AWS_DEFAULT_REGION} --output text)\n\necho \"Getting Private Subnets\"\nexport SUBNET_IDS=$(aws ec2 describe-subnets \\\n    --filters \"Name=vpc-id,Values=$CLUSTER_VPC\" \"Name=tag:kubernetes.io/role/internal-elb,Values=1\" \\\n    --query 'Subnets[*].SubnetId' \\\n    --output text | tr -s \"[:blank:]\" \",\")\necho \"Subnets: ${SUBNET_IDS}\"\n\nif [ -z \"${ARM_AMI_ID}\" ] || [ \"${ARM_AMI_ID}\" == \"null\" ]; then\n  echo \"Error when parsing AMIs information from EKS endpoint.\"\n  echo \"Please make sure that you have configured the AWS CLI correctly.\"\n  echo \"You can find in the AWS tab in the prerequisites section of this guide.\"\n  exit 1\nfi\n\n# Create IAM Role for Instance Profile for EC2 instances.\ncat << EOF > config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-system\ndata:\n  mapRoles: |\n    - rolearn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n      username: system:node:{{EC2PrivateDNSName}}\n      groups:\n      - system:bootstrappers\n      - system:nodes\nEOF\nkubectl apply -f config.yaml\n\naws cloudformation deploy \\\n  --stack-name \"KarpenterNodeRole-${CLUSTER_NAME}\" \\\n  --template-file \"../provisioning/cloudformation.yaml\" \\\n  --parameter-overrides \"ClusterName=${CLUSTER_NAME}\" \\\n  --capabilities CAPABILITY_NAMED_IAM\n\n# Grant access to instances using the profile to connect to the cluster\neksctl create iamidentitymapping \\\n  --username system:node:{{EC2PrivateDNSName}} \\\n  --cluster \"${CLUSTER_NAME}\" \\\n  --arn \"arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\" \\\n  --group system:bootstrappers \\\n  --group system:nodes\n\n# Set custom values according to your configuration\nexport KARPENTER_INTROSPECTION_ENDPOINT=\"${CLUSTER_ENDPOINT}/clusters/${CLUSTER_NAME}/updates\"\n```\n\n----------------------------------------\n\nTITLE: Complex Node Affinity with Multiple Selector Terms for Failover Scenarios\nDESCRIPTION: Advanced node affinity configuration demonstrating multiple nodeSelectorTerms for failover scenarios. This example tries to schedule in us-west-2a first, but if that fails, it will try to use spot instances in us-west-2d.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions: # OR\n           - key: \"topology.kubernetes.io/zone\" # AND\n             operator: \"In\"\n             values: [\"us-west-2a\", \"us-west-2b\"]\n           - key: \"topology.kubernetes.io/zone\" # AND\n             operator: \"NotIn\"\n             values: [\"us-west-2b\"]\n         - matchExpressions: # OR\n           - key: \"karpenter.sh/capacity-type\" # AND\n             operator: \"In\"\n             values: [\"spot\"]\n           - key: \"topology.kubernetes.io/zone\" # AND\n             operator: \"In\"\n             values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool and EC2NodeClass in Karpenter for AWS\nDESCRIPTION: A complete example showing how to configure a NodePool that references an EC2NodeClass, along with detailed EC2NodeClass configuration including AMI selection, subnet selectors, security groups, IAM roles, block device mappings, and other AWS-specific settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  # Optional, dictates UserData generation and default block device mappings.\n  # May be ommited when using an `alias` amiSelectorTerm, otherwise required.\n  amiFamily: AL2\n\n  # Required, discovers subnets to attach to instances\n  # Each term in the array of subnetSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  subnetSelectorTerms:\n    # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n    # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n\n  # Required, discovers security groups to attach to instances\n  # Each term in the array of securityGroupSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  securityGroupSelectorTerms:\n    # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n    # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n    # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n\n  # Optional, IAM role to use for the node identity.\n  # The \"role\" field is immutable after EC2NodeClass creation. This may change in the\n  # future, but this restriction is currently in place today to ensure that Karpenter\n  # avoids leaking managed instance profiles in your account.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n\n  # Optional, IAM instance profile to use for the node identity.\n  # Must specify one of \"role\" or \"instanceProfile\" for Karpenter to launch nodes\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n\n  # Each term in the array of amiSelectorTerms is ORed together\n  # Within a single term, all conditions are ANDed\n  amiSelectorTerms:\n    # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n    # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n    # ID `ami-123`\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n    # Select EKS optimized AL2023 AMIs with version `v20240703`. This term is mutually\n    # exclusive and can't be specified with other terms.\n    # - alias: al2023@v20240703\n\n  # Optional, propagates tags to underlying EC2 resources\n  tags:\n    team: team-a\n    app: team-a-app\n\n  # Optional, configures IMDS for the instance\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1 # This is changed to disable IMDS access from containers not on the host network\n    httpTokens: required\n\n  # Optional, configures storage devices for the instance\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n\n  # Optional, use instance-store volumes for node ephemeral-storage\n  instanceStorePolicy: RAID0\n\n  # Optional, overrides autogenerated userdata with a merge semantic\n  userData: |\n    echo \"Hello world\"\n\n  # Optional, configures detailed monitoring for the instance\n  detailedMonitoring: true\n\n  # Optional, configures if the instance should be launched with an associated public IP address.\n  # If not specified, the default value depends on the subnet's public IP auto-assign setting.\n  associatePublicIPAddress: true\nstatus:\n  # Resolved subnets\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n\n  # Resolved security groups\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n\n  # Resolved AMIs\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n\n  # Generated instance profile name from \"role\"\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Defining Karpenter NodePool Configuration in YAML\nDESCRIPTION: This YAML snippet defines a Karpenter NodePool configuration. It includes settings for node templates, taints, startup taints, expiration, requirements, disruption policies, and resource limits. The configuration also includes status fields for conditions and resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      labels:\n        billing-team: my-team\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n      expireAfter: 720h | Never\n      terminationGracePeriod: 48h\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: \"karpenter.k8s.aws/instance-family\"\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 5\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\"]\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty\n    consolidateAfter: 1m | Never\n    budgets:\n    - nodes: 10%\n    - schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      nodes: \"0\"\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n  weight: 10\nstatus:\n  conditions:\n    - type: Initialized\n      status: \"False\"\n      observedGeneration: 1\n      lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      reason: NodeClaimNotLaunched\n      message: \"NodeClaim hasn't succeeded launch\"\n  resources:\n    cpu: \"20\"\n    memory: \"8192Mi\"\n    ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Managing Disruption Budgets in NodePool Karpenter Configuration\nDESCRIPTION: This YAML snippet defines disruption budgets for a NodePool in Karpenter, specifying the percentage and number of nodes that may be disrupted under certain conditions, such as being empty or drifted. It requires Karpenter to be installed and configured in an AWS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Karpenter with Helm\nDESCRIPTION: Command to upgrade or install Karpenter with debug logging enabled via the logLevel parameter in Helm. This helps with troubleshooting by providing more detailed logs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster with Managed NodeGroups for Karpenter\nDESCRIPTION: This script creates an EKS cluster with Managed NodeGroups using eksctl. It configures the required IAM roles and permissions for Karpenter, creates a CloudFormation stack for Karpenter infrastructure, and sets up the necessary AWS authentication for the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_IAM_ROLE_ARN=\"arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter\"\n\necho \"${KARPENTER_IAM_ROLE_ARN}\"\n\n# Create the cluster with additional IAM, with a CloudFormation\n# Stack Name that matches the cluster name (by default)\neksctl create cluster -f - <<EOF\n---\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: ${CLUSTER_NAME}\n  region: ${AWS_DEFAULT_REGION}\n  version: \"${K8S_VERSION}\"\n  tags:\n    karpenter.sh/discovery: ${CLUSTER_NAME}\niam:\n  withOIDC: true\nmanagedNodeGroups:\n  - instanceType: m5.large\n    amiFamily: AmazonLinux2\n    name: ${CLUSTER_NAME}-ng\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 10\n    privateNetworking: true\niam:\n  withOIDC: true\n  serviceAccounts:\n  - metadata:\n      name: karpenter\n      namespace: ${KARPENTER_NAMESPACE}\n    roleName: ${CLUSTER_NAME}-karpenter\n    attachPolicyARNs:\n    - arn:aws:iam::aws:policy/AmazonEKS-EC2NodeInstanceRole\n    - arn:aws:iam::aws:policy/AmazonECR-ReadOnly\n    - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n    roleOnly: true\n    wellKnownPolicies:\n      awsLoadBalancerController: false\n    attachPolicy:\n      Version: \"2012-10-17\"\n      Statement:\n      - Effect: \"Allow\"\n        Action:\n        - ec2:CreateLaunchTemplate\n        - ec2:CreateFleet\n        - ec2:RunInstances\n        - ec2:CreateTags\n        - ec2:TerminateInstances\n        - ec2:DeleteLaunchTemplate\n        - ec2:DescribeLaunchTemplates\n        - ec2:DescribeInstances\n        - ec2:DescribeSecurityGroups\n        - ec2:DescribeSubnets\n        - ec2:DescribeInstanceTypes\n        - ec2:DescribeInstanceTypeOfferings\n        - ec2:DescribeAvailabilityZones\n        - ec2:DescribeSpotPriceHistory\n        - ec2:DescribeImages\n        - ec2:DescribeFleets\n        - ssm:GetParameter\n        - pricing:GetProducts\n        Resource: '*'\nEOF\n\necho \"Getting Cluster VPC\"\nexport CLUSTER_VPC=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query \"cluster.resourcesVpcConfig.vpcId\" --output text)\necho \"Getting Default Security Group\"\nexport CLUSTER_SECURITY_GROUP=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query \"cluster.resourcesVpcConfig.clusterSecurityGroupId\" --region ${AWS_DEFAULT_REGION} --output text)\n\necho \"Getting Private Subnets\"\nexport SUBNET_IDS=$(aws ec2 describe-subnets \\\n    --filters \"Name=vpc-id,Values=$CLUSTER_VPC\" \"Name=tag:kubernetes.io/role/internal-elb,Values=1\" \\\n    --query 'Subnets[*].SubnetId' \\\n    --output text | tr -s \"[:blank:]\" \",\")\necho \"Subnets: ${SUBNET_IDS}\"\n\nif [ -z \"${ARM_AMI_ID}\" ] || [ \"${ARM_AMI_ID}\" == \"null\" ]; then\n  echo \"Error when parsing AMIs information from EKS endpoint.\"\n  echo \"Please make sure that you have configured the AWS CLI correctly.\"\n  echo \"You can find in the AWS tab in the prerequisites section of this guide.\"\n  exit 1\nfi\n\n# Create IAM Role for Instance Profile for EC2 instances.\ncat << EOF > config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-system\ndata:\n  mapRoles: |\n    - rolearn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n      username: system:node:{{EC2PrivateDNSName}}\n      groups:\n      - system:bootstrappers\n      - system:nodes\nEOF\nkubectl apply -f config.yaml\n\naws cloudformation deploy \\\n  --stack-name \"KarpenterNodeRole-${CLUSTER_NAME}\" \\\n  --template-file \"../provisioning/cloudformation.yaml\" \\\n  --parameter-overrides \"ClusterName=${CLUSTER_NAME}\" \\\n  --capabilities CAPABILITY_NAMED_IAM\n\n# Grant access to instances using the profile to connect to the cluster\neksctl create iamidentitymapping \\\n  --username system:node:{{EC2PrivateDNSName}} \\\n  --cluster \"${CLUSTER_NAME}\" \\\n  --arn \"arn:aws:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\" \\\n  --group system:bootstrappers \\\n  --group system:nodes\n\n# Set custom values according to your configuration\nexport KARPENTER_INTROSPECTION_ENDPOINT=\"${CLUSTER_ENDPOINT}/clusters/${CLUSTER_NAME}/updates\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Resource Requests and Limits in Kubernetes\nDESCRIPTION: Example of how to specify CPU and memory requests and limits for a pod container. The pod requests 128MiB memory and 0.5 CPU with limits of 256MiB memory and 1 CPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Reserved Instances\nDESCRIPTION: Example of configuring weighted NodePools to prioritize usage of AWS Reserved Instances before falling back to other instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Savings Plans and Reserved Instances\nDESCRIPTION: This YAML configuration demonstrates how to set up weighted NodePools in Karpenter to prioritize specific instance types for Savings Plans or Reserved Instances. It includes limits and requirements for instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements with MinValues in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure NodePool requirements in Karpenter, including the use of minValues for various instance attributes. It specifies architecture, OS, instance categories, families, types, and generation constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Requests and Limits for a Pod in YAML\nDESCRIPTION: This snippet demonstrates how to specify resource requests and limits for a pod's container, including memory and CPU constraints. It shows the structure for requesting 128MiB of memory and 0.5 CPU, with limits set to 256MiB of memory and 1 CPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity and Anti-Affinity in Kubernetes YAML\nDESCRIPTION: This YAML example illustrates how to set up pod affinity and anti-affinity rules. It defines requirements for pods to be scheduled in zones with specific other pods and avoid nodes with certain pod labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool and EC2NodeClass in Karpenter\nDESCRIPTION: This snippet demonstrates how to configure a NodePool and EC2NodeClass in Karpenter. It includes settings for AMI family, subnet selection, security group selection, IAM roles, and various EC2 instance configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  amiFamily: AL2\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n  userData: |\n    echo \"Hello world\"\n  tags:\n    team: team-a\n    app: team-a-app\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 2\n    httpTokens: required\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n  detailedMonitoring: true\nstatus:\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Example of Node Selector in Karpenter (YAML)\nDESCRIPTION: This YAML snippet provides an example of a nodeSelector that targets nodes based on well-known and Karpenter-specific labels. It demonstrates how to filter nodes before pod scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: Setting Tolerations in a Pod for Karpenter Nodes\nDESCRIPTION: This YAML shows how to set a toleration in a pod to allow it to run on a node with the `nvidia.com/gpu` taint.  The pod requests GPU resources and tolerates the `nvidia.com/gpu` taint with the `Exists` operator and `NoSchedule` effect.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: mygpupod\\nspec:\\n  containers:\\n  - name: gpuapp\\n    resources:\\n      requests:\\n        nvidia.com/gpu: 1\\n      limits:\\n        nvidia.com/gpu: 1\\n    image: mygpucontainer\\n  tolerations:\\n  - key: \\\"nvidia.com/gpu\\\"\\n    operator: \\\"Exists\\\"\\n    effect: \\\"NoSchedule\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Karpenter Locally with Bash\nDESCRIPTION: Runs the Karpenter Go binary against the Kubernetes cluster specified in your ~/.kube/config file after environment configuration. Requires the Kubernetes cluster to be properly set up with kubectl access.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits in Karpenter NodePool\nDESCRIPTION: Demonstrates how to set resource limits for CPU, memory, and GPU in a Karpenter NodePool. The configuration uses spot instances and sets specific capacity constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Workload Topology Spread Constraints\nDESCRIPTION: This YAML snippet outlines the topology spread constraints for scheduling workloads across nodes. It ensures that the scheduling policy adheres to a maximum skew of 1 based on the capacity-spread label, enhancing workload distribution and resource allocation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: AMI Resolution with AL2 Alias in EC2NodeClass\nDESCRIPTION: Example demonstrating AMI resolution using an AL2 alias in the spec. Shows how AMIs are resolved with specific requirements for different architectures and GPU configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Merging User Data for AL2 AMI in EC2NodeClass for Karpenter on AWS (Bash)\nDESCRIPTION: Example of how Karpenter merges custom user data with default bootstrap script for Amazon Linux 2 AMI when provided in bash format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (bash)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped EC2 Instance Access Actions - JSON\nDESCRIPTION: This JSON snippet outlines the permissions for the Karpenter controller to access EC2 resources scoped to a particular cluster. It allows the controller to perform RunInstances and CreateFleet actions on specific EC2 resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass Parameters\nDESCRIPTION: This snippet defines an EC2NodeClass which includes detailed configurations for Kubelet, instance roles, subnet, security groups, AMIs, and user data. It specifies resource management settings crucial for achieving optimal performance and resource allocation in AWS Karpenter configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  amiFamily: AL2\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n  tags:\n    team: team-a\n    app: team-a-app\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n  instanceStorePolicy: RAID0\n  userData: |\n    echo \"Hello world\"\n  detailedMonitoring: true\n  associatePublicIPAddress: true\nstatus:\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Label Requirements in Karpenter NodePool\nDESCRIPTION: This YAML snippet demonstrates how to specify a user-defined label requirement in a Karpenter NodePool. It uses the 'Exists' operator to make Karpenter aware of a custom label, allowing it to schedule pods with this label.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Topology in Kubernetes with EBS\nDESCRIPTION: This YAML configuration defines a Pod, StorageClass, and PersistentVolumeClaim for EBS storage in AWS. It demonstrates how to set up zonal topologies and use the WaitForFirstConsumer binding mode.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Defining a Karpenter NodePool Configuration in YAML\nDESCRIPTION: A comprehensive example of a NodePool configuration in Karpenter that specifies node provisioning constraints, template settings, disruption policies, and resource limits. It demonstrates how to configure labels, taints, requirements, and other settings that control how Karpenter creates and manages nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  # Template section that describes how to template out NodeClaim resources that Karpenter will provision\n  # Karpenter will consider this template to be the minimum requirements needed to provision a Node using this NodePool\n  # It will overlay this NodePool with Pods that need to schedule to further constrain the NodeClaims\n  # Karpenter will provision to launch new Nodes for the cluster\n  template:\n    metadata:\n      # Labels are arbitrary key-values that are applied to all nodes\n      labels:\n        billing-team: my-team\n\n      # Annotations are arbitrary key-values that are applied to all nodes\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      # References the Cloud Provider's NodeClass resource, see your cloud provider specific documentation\n      nodeClassRef:\n        group: karpenter.k8s.aws  # Updated since only a single version will be served\n        kind: EC2NodeClass\n        name: default\n\n      # Provisioned nodes will have these taints\n      # Taints may prevent pods from scheduling if they are not tolerated by the pod.\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n\n      # Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by this\n      # NodePool. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible for\n      # removing the taint after it has finished initializing the node.\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n\n      # The amount of time a Node can live on the cluster before being removed\n      # Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes\n      # You can choose to disable expiration entirely by setting the string value 'Never' here\n\n      # Note: changing this value in the nodepool will drift the nodeclaims.\n      expireAfter: 720h | Never\n\n      # The amount of time that a node can be draining before it's forcibly deleted. A node begins draining when a delete call is made against it, starting\n      # its finalization flow. Pods with TerminationGracePeriodSeconds will be deleted preemptively before this terminationGracePeriod ends to give as much time to cleanup as possible.\n      # If your pod's terminationGracePeriodSeconds is larger than this terminationGracePeriod, Karpenter may forcibly delete the pod\n      # before it has its full terminationGracePeriod to cleanup.\n\n      # Note: changing this value in the nodepool will drift the nodeclaims.\n      terminationGracePeriod: 48h\n\n      # Requirements that constrain the parameters of provisioned nodes.\n      # These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.\n      # Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.\n      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          # minValues here enforces the scheduler to consider at least that number of unique instance-category to schedule the pods.\n          # This field is ALPHA and can be dropped or replaced at any time\n          minValues: 2\n        - key: \"karpenter.k8s.aws/instance-family\"\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 5\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\", \"reserved\"]\n\n  # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes\n  # Configuration in this section constrains how aggressive Karpenter can be with performing operations\n  # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost\n  disruption:\n    # Describes which types of Nodes Karpenter should consider for consolidation\n    # If using 'WhenEmptyOrUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is empty or underutilized and could be changed to reduce cost\n    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods\n    consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty\n\n    # The amount of time Karpenter should wait to consolidate a node after a pod has been added or removed from the node.\n    # You can choose to disable consolidation entirely by setting the string value 'Never' here\n    consolidateAfter: 1m | Never # Added to allow additional control over consolidation aggressiveness\n\n    # Budgets control the speed Karpenter can scale down nodes.\n    # Karpenter will respect the minimum of the currently active budgets, and will round up\n    # when considering percentages. Duration and Schedule must be set together.\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning.\n    - schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      nodes: \"0\"\n\n  # Resource limits constrain the total size of the pool.\n  # Limits prevent Karpenter from creating new instances once the limit is exceeded.\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n\n  # Priority given to the NodePool when the scheduler considers which NodePool\n  # to select. Higher weights indicate higher priority when comparing NodePools.\n  # Specifying no weight is equivalent to specifying a weight of 0.\n  weight: 10\nstatus:\n  conditions:\n    - type: Initialized\n      status: \"False\"\n      observedGeneration: 1\n      lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      reason: NodeClaimNotLaunched\n      message: \"NodeClaim hasn't succeeded launch\"\n  resources:\n    cpu: \"20\"\n    memory: \"8192Mi\"\n    ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Karpenter Nodes and NodeClaims using kubectl\nDESCRIPTION: Commands for manually removing Karpenter nodes and nodeclaims using kubectl. Shows various deletion patterns including removing specific nodes, all nodeclaims, nodes with specific labels, or nodeclaims owned by specific nodepools.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining NodePool and EC2NodeClass in YAML for Karpenter on AWS\nDESCRIPTION: This snippet demonstrates how to define a NodePool that references an EC2NodeClass, and a comprehensive EC2NodeClass configuration. It includes settings for kubelet, AMI selection, subnet selection, security groups, IAM roles, capacity reservations, tags, metadata options, block device mappings, and more.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n        memory.available: 1m\n        nodefs.available: 1m30s\n        nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    clusterDNS: [\"10.0.1.100\"]\n  amiFamily: AL2\n\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - id: subnet-09fa4a0a8f233a921\n\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n        environment: test\n    - name: my-ami\n    - id: ami-123\n    - ssmParameter: my-custom-parameter\n\n  capacityReservationSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: ${CLUSTER_NAME}\n    - id: cr-123\n\n  tags:\n    team: team-a\n    app: team-a-app\n\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n\n  instanceStorePolicy: RAID0\n\n  userData: |\n    echo \"Hello world\"\n\n  detailedMonitoring: true\n\n  associatePublicIPAddress: true\nstatus:\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n\n  capacityReservations:\n    - availabilityZone: us-west-2a\n      id: cr-01234567890123456\n      instanceMatchCriteria: targeted\n      instanceType: g6.48xlarge\n      ownerID: \"012345678901\"\n    - availabilityZone: us-west-2c\n      id: cr-12345678901234567\n      instanceMatchCriteria: open\n      instanceType: g6.48xlarge\n      ownerID: \"98765432109\"\n\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Spread Constraints\nDESCRIPTION: This YAML snippet uses Kubernetes topologySpreadConstraints to distribute pods across different nodes, zones, or capacity types, minimizing single points of failure. Suitable for high-availability environments. Dependencies require Kubernetes and Karpenter. Key parameters include 'topologyKey' and 'maxSkew'. It ensures pods are distributed to adhere to specified constraints, avoiding concentration on individual resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity Rules in Kubernetes\nDESCRIPTION: Example of node affinity configuration using requiredDuringSchedulingIgnoredDuringExecution with zone constraints for us-west-2 regions. Shows how to use In operator to specify allowed zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter Helm Chart\nDESCRIPTION: Installs Karpenter using Helm with specific settings for AWS integration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace ${KARPENTER_NAMESPACE} --create-namespace \\\n  --set settings.clusterName=${CLUSTER_NAME} \\\n  --set serviceAccount.annotations.\"eks\\.amazonaws\\.com/role-arn\"=${KARPENTER_IAM_ROLE_ARN} \\\n  --set settings.interruptionQueue=${CLUSTER_NAME} \\\n  --set controller.resources.requests.cpu=1 \\\n  --set controller.resources.requests.memory=1Gi \\\n  --set controller.resources.limits.cpu=1 \\\n  --set controller.resources.limits.memory=1Gi \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Defining Pod ENI Resources in Deployment Manifest\nDESCRIPTION: This snippet outlines how to specify Pod ENI resources in a Kubernetes deployment manifest, which allows allocation of an Elastic Network Interface (ENI) directly to a pod. This feature is commonly used in combination with Security Groups for Pods and requires that support is enabled in the AWS VPC CNI Plugin before using it in Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  template:\\n    spec:\\n      containers:\\n      - resources:\\n          limits:\\n            vpc.amazonaws.com/pod-eni: \\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Operation\nDESCRIPTION: Commands for verifying that Karpenter is functioning correctly by checking logs and observing new nodes being created as old nodes are removed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -n karpenter -c controller -l app.kubernetes.io/name=karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: GPU NodePool with Taints Configuration\nDESCRIPTION: NodePool configuration for GPU instances with taints to ensure only GPU-compatible pods are scheduled.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Defined Label Requirements in NodePool\nDESCRIPTION: This YAML snippet demonstrates how to specify a requirement for a user-defined label in a Karpenter NodePool. The `Exists` operator ensures that Karpenter recognizes the label and can schedule pods that use it in their node selectors. This is necessary for Karpenter to launch nodes with custom labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"requirements:\\n  - key: user.defined.label/type\\n    operator: Exists\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Metrics using Port Forwarding\nDESCRIPTION: This snippet forwards the Karpenter service metric port to localhost and opens the browser to visualize metrics. Supports both OSX and Linux systems.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Merging Custom and Karpenter-Generated UserData for AL2023\nDESCRIPTION: Demonstrates how custom UserData is merged with Karpenter-generated configs for AL2023 instances, using MIME multi-part format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodePool Spec with minValues\nDESCRIPTION: This YAML snippet demonstrates how to configure a Karpenter NodePool with `minValues` to ensure a minimum level of flexibility when scheduling pods.  It specifies requirements for architecture, operating system, instance category, instance family, instance type, and instance generation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with Exists Operator for Workload Segregation\nDESCRIPTION: YAML configuration demonstrating how to use the 'Exists' operator in a NodePool to enable workload segregation based on team labels, allowing dynamic node labeling based on pod requirements without requiring multiple NodePools.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodeClaim YAML Example\nDESCRIPTION: A detailed YAML representation of a Karpenter NodeClaim. It includes metadata, specifications, status, and events associated with the NodeClaim, demonstrating its structure and content.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:\nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:\n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:\n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:\n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:\n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacity Reservation Selection in EC2NodeClass YAML\nDESCRIPTION: Examples of how to select on-demand capacity reservations using IDs, tags, and owner IDs in the EC2NodeClass configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  - id: cr-123\n  - id: cr-456\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  # Select all capacity reservations which have both matching tags\n  - tags:\n      key1: foo\n      key2: bar\n  # Additionally, select all capacity reservations with the following matching tag\n  - tags:\n      key3: foobar\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  # Select all capacity reservations with the matching tags which are also owned by\n  # the specified account.\n  capacityReservationSelectorTerms:\n  - tags:\n      key: foo\n    ownerID: 012345678901\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped EC2 Launch Template Access Actions (JSON)\nDESCRIPTION: This JSON snippet defines a policy statement that allows the Karpenter controller to access EC2 launch templates.  The access is restricted to launch templates that have the `kubernetes.io/cluster/${ClusterName}` tag set to `owned` and a `karpenter.sh/nodepool` tag. This ensures that Karpenter can only use launch templates it provisioned and prevents access to unauthorized templates.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"Sid\\\": \\\"AllowScopedEC2LaunchTemplateAccessActions\\\",\\n  \\\"Effect\\\": \\\"Allow\\\",\\n  \\\"Resource\\\": \\\"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\\\",\\n  \\\"Action\\\": [\\n    \\\"ec2:RunInstances\\\",\\n    \\\"ec2:CreateFleet\\\"\\n  ],\\n  \\\"Condition\\\": {\\n    \\\"StringEquals\\\": {\\n      \\\"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\\\": \\\"owned\\\"\\n    },\\n    \\\"StringLike\\\": {\\n      \\\"aws:ResourceTag/karpenter.sh/nodepool\\\": \\\"*\\\"\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodePool Configuration List\nDESCRIPTION: Key concepts for configuring Karpenter NodePools including unschedulable pods handling, constraints definition, disruption settings, well-known labels usage, and multiple NodePool management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Unschedulable pods**: Karpenter only attempts to schedule pods that have a status condition `Unschedulable=True`\n* **Defining Constraints**: Each NodePool manages distinct nodes and defines provisioning constraints\n* **Defining Disruption**: NodePools include configuration for node consolidation, drift, and expiration\n* **Well-known labels**: NodePools use Kubernetes labels for instance types, architectures, and OS attributes\n* **Multiple NodePools**: Support for separate NodePools with different configurations per team\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Eviction Thresholds in Karpenter\nDESCRIPTION: Complete example showing how to configure both hard and soft eviction thresholds for Kubelet in Karpenter's EC2NodeClass. Demonstrates setting thresholds using both percentage and absolute resource values for memory, filesystem, and process ID resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n  evictionSoft:\n    memory.available: 1Gi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n    imagefs.available: 10%\n    imagefs.inodesFree: 10%\n    pid.available: 10%\n```\n\n----------------------------------------\n\nTITLE: Defining NodePool Configuration in Karpenter v1beta1\nDESCRIPTION: Example YAML configuration for a Karpenter NodePool resource using the v1beta1 API. This demonstrates how to configure node compatibility settings, resource requirements, kubelet parameters, disruption policies, and weight settings for scheduling decisions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1beta1-api.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      labels:\n        billing-team: my-team\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      nodeClass:\n        name: default\n        kind: EC2NodeClass\n        apiVersion: karpenter.k8s.aws/v1beta1\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n      resources:\n        requests:\n          cpu: \"1\"\n          memory: \"100Mi\"\n      kubeletConfiguration:\n        clusterDNS: [\"10.0.1.100\"]\n        containerRuntime: containerd\n        systemReserved:\n          cpu: 100m\n          memory: 100Mi\n          ephemeral-storage: 1Gi\n        kubeReserved:\n          cpu: 200m\n          memory: 100Mi\n          ephemeral-storage: 3Gi\n        evictionHard:\n          memory.available: 5%\n          nodefs.available: 10%\n          nodefs.inodesFree: 10%\n        evictionSoft:\n          memory.available: 500Mi\n          nodefs.available: 15%\n          nodefs.inodesFree: 15%\n        evictionSoftGracePeriod:\n          memory.available: 1m\n          nodefs.available: 1m30s\n          nodefs.inodesFree: 2m\n        evictionMaxPodGracePeriod: 60\n        imageGCHighThresholdPercent: 85\n        imageGCLowThresholdPercent: 80\n        cpuCFSQuota: true\n        podsPerCore: 2\n        maxPods: 20\n  disruption:\n    consolidateAfter: 10m\n    consolidationPolicy: WhenEmpty | WhenUnderutilized\n    expireAfter: 30d\n  weight: 10\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\nstatus:\n  resources:\n     cpu: \"2\"\n     memory: \"100Mi\"\n     ephemeral-storage: \"100Gi\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter Installation\nDESCRIPTION: This bash script sets environment variables required for installing Karpenter on a Kubernetes cluster. These variables include namespace, version, Kubernetes version, cluster name, AWS region, account ID, and temporary output file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nexport KARPENTER_VERSION=\"1.2.3\"\nexport K8S_VERSION=\"1.32\"\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster with Fargate using eksctl\nDESCRIPTION: This script creates an EKS cluster using `eksctl` and configures Fargate profiles for the kube-system and karpenter namespaces. It configures IAM roles for service accounts (IRSA) to grant Karpenter permissions to launch instances, and installs Karpenter via Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step02-create-cluster-fargate.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Manual Node Deletion in Karpenter\nDESCRIPTION: Command to manually delete nodes managed by Karpenter, which handles cordoning, draining, and shutting down the corresponding instances gracefully.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step16-delete-node.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Requests and Limits in Pod Specification\nDESCRIPTION: Example showing how to set resource requests and limits for memory and CPU in a Pod specification. The container requests 128MiB of memory and 0.5 CPU, with limits of 256MiB and 1 CPU respectively. Karpenter uses these requests to select appropriate instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a GPU Pod with Tolerations in Kubernetes YAML\nDESCRIPTION: This YAML example shows how to configure a pod to run on GPU nodes. It includes resource requests for NVIDIA GPUs and a toleration to allow scheduling on nodes with the GPU taint.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Querying NodeClaim Status with kubectl\nDESCRIPTION: Commands to list and describe NodeClaims in a Kubernetes cluster using kubectl\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption Budgets in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure disruption budgets for a NodePool in Karpenter. It includes examples of percentage-based budgets, static ceilings, and scheduled disruption controls.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter on EKS with Fargate\nDESCRIPTION: This script uses Helm to install Karpenter on an EKS cluster with Fargate profiles. It configures the AWS settings, service account role, and cluster discovery information specifically for a Fargate-based deployment of Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"Installing Karpenter\"\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace ${KARPENTER_NAMESPACE} --create-namespace \\\n  --set \"settings.aws.clusterName=${CLUSTER_NAME}\" \\\n  --set \"settings.aws.clusterEndpoint=${CLUSTER_ENDPOINT}\" \\\n  --set \"settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" \\\n  --set \"serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn=${KARPENTER_IAM_ROLE_ARN}\" \\\n  --set \"settings.aws.interruptionQueueName=${CLUSTER_NAME}\" \\\n  --set \"settings.aws.isolatedVPC=false\" \\\n  --set \"controller.resources.requests.cpu=250m\" \\\n  --set \"controller.resources.requests.memory=250Mi\" \\\n  --set \"controller.resources.limits.cpu=500m\" \\\n  --set \"controller.resources.limits.memory=500Mi\" \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Configuring SubnetSelectorTerms and Viewing Resolved Subnets in Karpenter\nDESCRIPTION: Example showing subnet selector configuration and the resulting status output with resolved subnet IDs and availability zones. Subnets are sorted by available IP address count in decreasing order.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by Name and Tag - YAML\nDESCRIPTION: This snippet specifies that all criteria must match, enabling users to filter subnets by both name and an additional tag. This helps in a precise and controlled environment setup.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: my-subnet\n        MyTag: '' # matches all resources with the tag\n\n```\n\n----------------------------------------\n\nTITLE: Using AMI Selector Terms with Version Pinning\nDESCRIPTION: Example of pinning to a specific version of the AL2023 AMI using the alias selector term. This is the recommended approach for production environments to avoid unexpected AMI updates.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Adding Service Linked Role for EC2 Spot Instances\nDESCRIPTION: This script adds a service-linked role to allow the AWS account to use EC2 Spot instances. This is necessary to avoid `ServiceLinkedRoleCreationNotPermitted` errors during Karpenter's provisioning of spot instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step06-add-spot-role.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity and Anti-Affinity in Karpenter YAML\nDESCRIPTION: This example shows how to configure pod affinity and anti-affinity rules in Karpenter. It demonstrates setting up rules to schedule pods together based on labels and zones, and to avoid scheduling on nodes with specific pod labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues for Bottlerocket Nodes in Bash\nDESCRIPTION: This snippet shows how to debug Node NotReady issues for Bottlerocket-based nodes. It includes commands to identify Karpenter-managed nodes, extract instance IDs, connect to instances, and access the admin container for troubleshooting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption Budgets in Karpenter\nDESCRIPTION: Example YAML configuration for a NodePool with multiple disruption budgets to control node replacement rates and timing. It demonstrates percentage-based limits, absolute limits, and scheduled restrictions for different disruption reasons.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection in AWS Karpenter\nDESCRIPTION: Examples of different ways to select security groups using tags, names, and IDs in Karpenter EC2NodeClass configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter OCI Helm Chart Signature\nDESCRIPTION: Command to verify the Karpenter Helm chart signature using Cosign, ensuring the authenticity of the release from the official repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.0.9 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.0.9 \\\n  --annotations version=1.0.9\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by ID\nDESCRIPTION: YAML configuration example for selecting AMIs by specifying their IDs directly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - id: \"ami-123\"\n    - id: \"ami-456\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Spread Constraint for Workload Distribution\nDESCRIPTION: This YAML snippet defines a topology spread constraint for a workload. It ensures an even distribution of pods across nodes with different 'capacity-spread' labels, effectively implementing the desired spot to on-demand ratio.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: GPU NodePool Configuration\nDESCRIPTION: Example of configuring a NodePool specifically for GPU workloads with instance type requirements and GPU-specific taints. Targets p3.8xlarge and p3.16xlarge instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Configuring Hard and Soft Eviction Thresholds in Kubelet\nDESCRIPTION: This YAML snippet demonstrates how to configure hard and soft eviction thresholds in the kubelet configuration. It sets thresholds for memory, disk space, inodes, and PIDs, triggering evictions when these resources become constrained.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"kubelet:\\n  evictionHard:\\n    memory.available: 500Mi\\n    nodefs.available: 10%\\n    nodefs.inodesFree: 10%\\n    imagefs.available: 5%\\n    imagefs.inodesFree: 5%\\n    pid.available: 7%\\n  evictionSoft:\\n    memory.available: 1Gi\\n    nodefs.available: 15%\\n    nodefs.inodesFree: 15%\\n    imagefs.available: 10%\\n    imagefs.inodesFree: 10%\\n    pid.available: 10%\\n\"\n```\n\n----------------------------------------\n\nTITLE: Resource Tagging in AWS Karpenter\nDESCRIPTION: Configuration for adding custom tags to Karpenter-managed AWS resources including EC2 instances and EBS volumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped EC2 Instance Actions with Tags in AWS IAM Policy\nDESCRIPTION: This policy allows the Karpenter controller to perform RunInstances, CreateFleet, and CreateLaunchTemplate actions for specific EC2 resources. It requires certain tags to be set, ensuring Karpenter only creates instances for a single EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus and Grafana Monitoring Stack\nDESCRIPTION: Commands to deploy Prometheus and Grafana for monitoring Karpenter, including dashboard configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step09-add-prometheus-grafana.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spot and On-Demand NodePools for Ratio Splitting in Karpenter\nDESCRIPTION: This YAML defines two NodePools for Karpenter: one for spot instances and one for on-demand. It uses a custom 'capacity-spread' label to create a 4:1 ratio of spot to on-demand nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by Tag Key\nDESCRIPTION: YAML example showing how to select all subnets with a specific tag key, using wildcard values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\n----------------------------------------\n\nTITLE: Setting NodePool Requirements with Karpenter in YAML\nDESCRIPTION: This YAML snippet demonstrates setting requirements in a Karpenter NodePool specification, including setting architecture, operating system, and instance-related constraints. It employs keys like `kubernetes.io/arch`, `kubernetes.io/os`, and various Karpenter AWS keys with operators and values to define the node's resource requirements. Key dependencies include Kubernetes and an AWS account. The snippet allows specifying `minValues` for added flexibility, enabling Karpenter to adjust scheduling based on resource availability, with inputs primarily from key-value pairs, and outputs the node selection and scheduling within clusters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Requests and Limits in Kubernetes Pod Spec\nDESCRIPTION: This snippet illustrates how to define CPU and memory resource requests and limits for a container within a Kubernetes Pod specification. The resource requests specify the minimum resources required, while limits set the maximum allowable resources. It's important to note that instance type selection only considers resource requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: myapp\\nspec:\\n  containers:\\n  - name: app\\n    image: myimage\\n    resources:\\n      requests:\\n        memory: \\\"128Mi\\\"\\n        cpu: \\\"500m\\\"\\n      limits:\\n        memory: \\\"256Mi\\\"\\n        cpu: \\\"1000m\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using 'Exists' Operator for Team-Based Workload Segregation\nDESCRIPTION: This YAML snippet shows how to use the `Exists` operator in a NodePool to enable workload segregation based on custom labels. This allows different teams to dynamically isolate their workloads on separate nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption in NodePool Configuration\nDESCRIPTION: Example of configuring a NodePool to disable disruption for all nodes it manages by setting the disruption budget to zero nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    budgets:\n      - nodes: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass for AWS Karpenter\nDESCRIPTION: Defines AWS-specific configurations for Karpenter nodes including AMI selection, subnet configuration, security groups, and instance specifications. Includes status information about provisioned resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1beta1-api.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - tags: \n        key: value\n    - id: abc-123\n    - name: foo\n      owner: amazon\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: cluster-name\n    - id: subnet-1234\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: cluster-name\n    - name: default-security-group\n  role: karpenter-node-role\n  userData: |\n    echo \"this is custom user data\"\n  tags:\n    custom-tag: custom-value\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 2\n    httpTokens: required\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n  detailedMonitoring: true\nstatus:\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n  amis:\n    - id: ami-05a05e85b17bb60d7\n      name: amazon-eks-node-1.24-v20230703\n      requirements:\n        - key: karpenter.k8s.aws/instance-accelerator-count\n          operator: DoesNotExist\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n        - key: karpenter.k8s.aws/instance-gpu-count\n          operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements with MinValues in YAML\nDESCRIPTION: Example YAML configuration showing NodePool requirements with minValues constraints for instance types, families, and categories. Demonstrates how to set minimum flexibility requirements for AWS EC2 instance scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterNodeRole in CloudFormation\nDESCRIPTION: YAML configuration for creating the KarpenterNodeRole IAM role with necessary permissions for EKS worker nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: Defining NodePool Resource Limits in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to define resource limits (CPU, memory, and GPU) for a Karpenter NodePool.  These limits constrain the maximum amount of resources that the NodePool will manage, preventing over-provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Eviction Thresholds in Karpenter\nDESCRIPTION: This YAML configuration demonstrates how to set hard and soft eviction thresholds for kubelet in Karpenter. Hard evictions trigger immediate pod termination when thresholds are met, while soft evictions allow for graceful termination with configurable grace periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n  evictionSoft:\n    memory.available: 1Gi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n    imagefs.available: 10%\n    imagefs.inodesFree: 10%\n    pid.available: 10%\n```\n\n----------------------------------------\n\nTITLE: Recommended NodePool Requirements Configuration in YAML\nDESCRIPTION: This YAML snippet provides a recommended configuration for NodePool requirements that should fit the majority of use-cases for generic workloads. It includes constraints for architecture, OS, capacity type, instance category, and generation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Advanced Node Affinity Configuration\nDESCRIPTION: This YAML snippet shows advanced node affinity configuration with multiple terms, allowing fallback to a secondary requirement if the primary fails. It specifies preferred zones and capacity types like 'spot'. Dependencies include Kubernetes and Karpenter. The main parameters are node selector key-value pairs and operators. It allows setting primary and secondary scheduling preferences to ensure pod scheduling if resources are constrained.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions: # OR\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"NotIn\"\n            values: [\"us-west-2b\"]\n        - matchExpressions: # OR\n          - key: \"karpenter.sh/capacity-type\" # AND\n            operator: \"In\"\n            values: [\"spot\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Windows EKS Cluster Configuration UserData\nDESCRIPTION: PowerShell UserData to specify an EKS cluster for Windows nodes. This is a workaround for scenarios where the effective ServiceCIDR is incorrect for Windows worker nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  userData: |\n    $global:EKSCluster = Get-EKSCluster -Name my-cluster\n```\n\n----------------------------------------\n\nTITLE: Deploying Karpenter\nDESCRIPTION: Creates the Karpenter namespace, installs the NodePool CRD, and deploys the Karpenter controller and related resources to the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step09-deploy.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Complete NodeClaim YAML Example\nDESCRIPTION: Detailed YAML example of a Karpenter NodeClaim showing configuration including labels, annotations, specifications, requirements, and status information for an AWS EC2 instance\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:\nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:\n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:\n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:\n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:\n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Version Variable\nDESCRIPTION: Sets the Karpenter release version that will be deployed to the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.3.3\"\n```\n\n----------------------------------------\n\nTITLE: NodePool Disruption Budget Configuration\nDESCRIPTION: This YAML snippet configures disruption budgets within a Karpenter NodePool specification.  It demonstrates setting percentage and number limits on node disruptions, scheduling disruption windows, and specifying reasons for disruption.  The configuration is designed to minimize disruption during AMI upgrades and other maintenance activities by limiting the number and timing of node replacements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"disruption:\\n  budgets:\\n  - nodes: 15%\\n  - nodes: \\\"3\\\"\\n  - nodes: \\\"0\\\"\\n    schedule: \\\"0 9 * * sat-sun\\\"\\n    duration: 24h\\n  - nodes: \\\"0\\\"\\n    schedule: \\\"0 17 * * mon-fri\\\"\\n    duration: 16h\\n    reasons:\\n      - Drifted\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Resources in Kubernetes Pod\nDESCRIPTION: Example of requesting NVIDIA GPU resources in a pod specification. The configuration requests one NVIDIA GPU unit through resource limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoint AWS CLI Command\nDESCRIPTION: AWS CLI command to create VPC endpoints for private cluster connectivity\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Monitoring in EC2NodeClass\nDESCRIPTION: Configuration to enable detailed monitoring for EC2 instances launched by Karpenter. This provides 1-minute period monitoring graphs in the EC2 console.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in YAML\nDESCRIPTION: Example YAML configuration for AMI selector terms in Karpenter EC2NodeClass. It demonstrates how to select AMIs based on tags, names, and IDs, as well as using aliases for EKS-optimized AMIs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n  # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n  # ID `ami-123`\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-ami\n  - id: ami-123\n  # Select EKS optimized AL2023 AMIs with version `v20240807`. This term is mutually\n  # exclusive and can't be specified with other terms.\n  # - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Team-Specific Node with Matching Label\nDESCRIPTION: YAML snippet showing the resulting node configuration with the team-specific label that matches the nodeSelector in the deployment, demonstrating how workload segregation is achieved through label matching.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity with Karpenter\nDESCRIPTION: This YAML snippet configures node affinity in Kubernetes to control the nodes where pods can be scheduled. It utilizes hard scheduling rules specifying zones in which pods can run. Dependencies include a Kubernetes cluster with the Karpenter provisioner. The key parameters are 'operator' and 'values' for the node affinity, determining which zones are permitted. Expected input is zone labels, and output is a pod scheduled in the specified zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Example of Karpenter UserData Merging with Bash Script\nDESCRIPTION: An example showing how Karpenter merges custom Bash UserData with the required bootstrap commands. Karpenter appends its bootstrap script after custom user scripts to initialize the worker node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\necho \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: AllowScopedEC2InstanceAccessActions Policy Statement\nDESCRIPTION: JSON policy statement allowing Karpenter to access specific EC2 resources for RunInstances and CreateFleet actions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus and Grafana for Monitoring Karpenter\nDESCRIPTION: This script sets up a Prometheus and Grafana stack for monitoring Karpenter. It includes dashboards specific to Karpenter metrics without persistent storage for production.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step09-add-prometheus-grafana.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Karpenter YAML\nDESCRIPTION: This snippet demonstrates how to configure node affinity in Karpenter using 'In' and 'NotIn' operators to include or exclude specific availability zones. It shows both required and optional affinity rules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Complex Node Affinity with Multiple Terms\nDESCRIPTION: Advanced node affinity configuration using multiple nodeSelectorTerms to specify fallback options for node selection including spot instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"NotIn\"\n            values: [\"us-west-2b\"]\n        - matchExpressions:\n          - key: \"karpenter.sh/capacity-type\"\n            operator: \"In\"\n            values: [\"spot\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Recommended NodePool Requirements Configuration\nDESCRIPTION: Recommended basic NodePool requirements configuration for generic workloads. Includes essential constraints for architecture, OS, capacity type, and instance specifications.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Node Affinity in Karpenter YAML\nDESCRIPTION: This example shows a more complex node affinity configuration with multiple nodeSelectorTerms, demonstrating how to set up fallback options for node selection based on availability zones and capacity types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions: # OR\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"NotIn\"\n            values: [\"us-west-2b\"]\n        - matchExpressions: # OR\n          - key: \"karpenter.sh/capacity-type\" # AND\n            operator: \"In\"\n            values: [\"spot\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData in YAML format for AL2023\nDESCRIPTION: Sample NodeConfig YAML for AL2023 that configures the maxPods parameter for kubelet. This demonstrates how to pass in a simple NodeConfig to customize kubelet configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Options in Karpenter EC2NodeClass\nDESCRIPTION: Example YAML configuration showing all available kubelet options that can be set in the spec.kubelet section of an EC2NodeClass. Includes settings for pod density, resource reservation, eviction thresholds, and cluster DNS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Eviction Thresholds\nDESCRIPTION: Detailed example of configuring both hard and soft eviction thresholds for memory, filesystem, and process management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n  evictionSoft:\n    memory.available: 1Gi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n    imagefs.available: 10%\n    imagefs.inodesFree: 10%\n    pid.available: 10%\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Karpenter in YAML\nDESCRIPTION: This YAML snippet outlines the configuration of Karpenter NodePools with weight and limits to prioritize NodePool scheduling based on predefined conditions such as instance types. It facilitates the management of reserved capacity using Savings Plans or Reserved Instances in a Kubernetes environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Taints in Karpenter NodePool YAML\nDESCRIPTION: This snippet shows how to configure taints in a Karpenter NodePool, specifically for nodes that require GPUs. It includes setting up requirements for specific instance families and adding a taint to prevent non-GPU workloads from scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Using UserData with Kubelet Configuration\nDESCRIPTION: This snippet demonstrates how to use custom UserData to configure additional settings not available in the spec.kubelet field. It shows how to set 'maxPods' in spec.kubelet and 'registryPullQPS' in UserData, ensuring flexibility in instance configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n  kubelet:\n    maxPods: 42\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          # Configured through UserData since unavailable in `spec.kubelet`\n          registryPullQPS: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Limits in Karpenter YAML\nDESCRIPTION: This snippet demonstrates how to set resource limits for a NodePool in Karpenter. It includes limits for CPU, memory, and GPUs, and specifies the use of spot instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Defining NodeDisruptionBudget for Karpenter in Kubernetes YAML\nDESCRIPTION: A YAML configuration for defining a NodeDisruptionBudget custom resource that controls how many nodes can be unavailable during disruption events. It specifies both minAvailable (80%) and maxUnavailable (5%) parameters with a node selector targeting specific Karpenter-managed nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/termination.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: termination.karpenter.sh/v1alpha2\nkind: NodeDisruptionBudget\nmetadata:\n  name: nodeBudget\nspec:\n  minAvailable: 80%\n  selector:\n    matchLabels:\n      karpenter.sh/name: default\n      karpenter.sh/namespace: default\n  maxUnavailable: 5%\n```\n\n----------------------------------------\n\nTITLE: Configuring UserData for Windows in Karpenter AWS Provider\nDESCRIPTION: Example of passed-in PowerShell UserData for Windows and how it's merged with Karpenter-generated bootstrap script. The custom UserData is a simple Write-Host command, while Karpenter adds the EKS bootstrap script with cluster and node configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\nWrite-Host \"Running custom user data script\"\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=spot,karpenter.sh/nodepool=windows2022\" --max-pods=110' -DNSClusterIP '10.0.100.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Settings in EC2NodeClass\nDESCRIPTION: This snippet shows all available Kubelet configuration options that can be set within the EC2NodeClass spec.kubelet section, including resource reservations, eviction thresholds, garbage collection settings, and DNS configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selection in EC2NodeClass YAML\nDESCRIPTION: Example YAML configuration for selecting AMIs using various criteria such as tags, names, and IDs. It demonstrates how to use multiple terms for complex selection logic.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n  # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n  # ID `ami-123`\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-ami\n  - id: ami-123\n  # Select EKS optimized AL2023 AMIs with version `v20240807`. This term is mutually\n  # exclusive and can't be specified with other terms.\n  # - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Creating Karpenter Controller IAM Role\nDESCRIPTION: Creates an IAM role for the Karpenter controller using IAM Roles for Service Accounts (IRSA), which requires an OIDC endpoint.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step04-controller-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to EC2 Resources in Karpenter EC2NodeClass\nDESCRIPTION: Adds custom tags to EC2 instances, EBS volumes, and Launch Templates created by Karpenter. These tags will be merged with Karpenter's default tags and are useful for resource organization and cost allocation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up node affinity rules to include and exclude specific zones. It uses both 'In' and 'NotIn' operators to define hard constraints for pod scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoint Command\nDESCRIPTION: AWS CLI command to create VPC endpoints for private cluster setup.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\n```\n\n----------------------------------------\n\nTITLE: Security Groups Selection Using IDs in YAML\nDESCRIPTION: Provides a way to select specific AWS security groups using their unique identifiers within a Karpenter setup.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Alias with Version in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs using the alias format with a specific version. This allows targeting EKS-optimized AMIs with precise version control for production environments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePools and Deployment with Topology Spread Constraints in YAML\nDESCRIPTION: Example YAML configurations for NodePools and a Deployment using topology spread constraints. Demonstrates how to set up zonal constraints and potential issues with pod scheduling across availability zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Creating AWS VPC Endpoints for Karpenter\nDESCRIPTION: AWS CLI command to create the necessary VPC endpoints for Karpenter to access required AWS services from within a private cluster that has no outbound internet access.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in Karpenter NodeClasses\nDESCRIPTION: Example YAML snippet for configuring amiSelectorTerms in Karpenter to select AMIs with specific tags. This restricts Karpenter to only use AMIs that match the given tag criteria.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Security Groups in EC2NodeClass Status with YAML\nDESCRIPTION: This example shows how security group selector terms are specified in the spec and how the resolved security group IDs and names appear in the status field sorted by available IP address count.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - AWS Node Registration\nDESCRIPTION: JSON log example showing the registration of an AWS EC2 instance as a Kubernetes node, linked to the NodeClaim that requested it.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:26:19.028Z\",\n  \"message\": \"registered nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role Configuration for Karpenter-Managed Nodes in YAML\nDESCRIPTION: Defines the IAM role that will be attached to EC2 instances created by Karpenter. The role includes policies for EKS workers, CNI plugin, container registry access, and Systems Manager.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Do-Not-Disrupt Annotation for Pods in YAML Deployment\nDESCRIPTION: Example of how to add the karpenter.sh/do-not-disrupt annotation to pod specifications in a Deployment to prevent Karpenter from voluntarily disrupting these pods. This annotation acts like a permanently blocking PDB for a single pod.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cilium Startup Taint with Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure a Karpenter NodePool to use `startupTaints` for Cilium integration. The `node.cilium.io/agent-not-ready` taint ensures Cilium configures networking before other pods start on the node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with ODCR, Spot and On-Demand Fallback in Karpenter\nDESCRIPTION: YAML specification for a NodePool that allows all capacity types by default, enabling ODCR with fallback to spot and then on-demand instances. By not specifying capacity-type requirements, all types are permitted.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n name: default\nspec:\n # No additional requirements needed, launch all capacity types by default\n requirements: []\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus and Grafana Monitoring to Karpenter\nDESCRIPTION: This snippet provides the command to deploy a Prometheus and Grafana stack for monitoring Karpenter, ideal for this guide.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step09-add-prometheus-grafana.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Defining EC2NodeClass API Structure in YAML\nDESCRIPTION: This snippet defines the structure of the EC2NodeClass API, including spec fields for kubelet configuration, subnet and security group selection, AMI settings, and various instance-related options.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1-api.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  kubelet:\n    podsPerCore: 2\n    maxPods: 20\n    systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    kubeReserved:\n        cpu: 200m\n        memory: 100Mi\n        ephemeral-storage: 3Gi\n    evictionHard:\n        memory.available: 5%\n        nodefs.available: 10%\n        nodefs.inodesFree: 10%\n    evictionSoft:\n        memory.available: 500Mi\n        nodefs.available: 15%\n        nodefs.inodesFree: 15%\n   evictionSoftGracePeriod:\n       memory.available: 1m\n       nodefs.available: 1m30s\n       nodefs.inodesFree: 2m\n   evictionMaxPodGracePeriod: 60\n   imageGCHighThresholdPercent: 85\n   imageGCLowThresholdPercent: 80\n   cpuCFSQuota: true\n   clusterDNS: [\"10.0.1.100\"]\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    - id: subnet-09fa4a0a8f233a921\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    - name: my-security-group\n    - id: sg-063d7acfb4b06c82c\n  amiFamily: AL2023\n  amiSelectorTerms:\n    - alias: al2023@v20240625\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    - name: my-ami\n    - id: ami-123\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\n  instanceProfile: \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\n  userData: |\n    echo \"Hello world\"\n  tags:\n    team: team-a\n    app: team-a-app\n  instanceStorePolicy: RAID0\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1 # This is changed to disable IMDS access from containers not on the host network\n    httpTokens: required\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n  detailedMonitoring: **true**\nstatus:\n  subnets:\n    - id: subnet-0a462d98193ff9fac\n      zone: us-east-2b\n    - id: subnet-0322dfafd76a609b6\n      zone: us-east-2c\n    - id: subnet-0727ef01daf4ac9fe\n      zone: us-east-2b\n    - id: subnet-00c99aeafe2a70304\n      zone: us-east-2a\n    - id: subnet-023b232fd5eb0028e\n      zone: us-east-2c\n    - id: subnet-03941e7ad6afeaa72\n      zone: us-east-2a\n  securityGroups:\n    - id: sg-041513b454818610b\n      name: ClusterSharedNodeSecurityGroup\n    - id: sg-0286715698b894bca\n      name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n  amis:\n    - id: ami-01234567890123456\n      name: custom-ami-amd64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n  conditions:\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: InstanceProfileReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SubnetsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: SecurityGroupsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: AMIsReady\n    - lastTransitionTime: \"2024-02-02T19:54:34Z\"\n      status: \"True\"\n      type: Ready\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements with Min Values in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure NodePool requirements with min values for various instance attributes. It specifies architecture, OS, instance categories, families, types, and generation constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Example of Merged User Data (Bash)\nDESCRIPTION: Example of how Karpenter merges custom user data with its default bootstrap script for an EC2NodeClass. This shows the final MIME multipart format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (bash)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Logging with Zap\nDESCRIPTION: Configuration example for customizing Karpenter's log output using uber-go/zap logger through a ConfigMap. The configuration options are defined in zap.Config and can be modified in the configmap-logging.yaml file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nConfigMap:\n  data:\n    zap-logger-config: {}\n```\n\n----------------------------------------\n\nTITLE: Using AMI Selector Term with Version Pinning in Karpenter\nDESCRIPTION: Example of pinning to a specific AMI version using the alias selector term. This is the recommended approach for production environments to avoid unexpected AMI updates that could cause downtime.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Pod Resource Requests and Limits Example\nDESCRIPTION: Example showing how to specify CPU and memory requests and limits in a pod specification. The container requests 128MiB memory and 0.5 CPU with limits of 256MiB memory and 1 CPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter NodePool with Drift Control\nDESCRIPTION: YAML configuration for a Karpenter NodePool that controls drift using disruption budgets. It demonstrates how to set different node budgets for business hours and non-business hours.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  …\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms with Alias\nDESCRIPTION: This YAML snippet demonstrates how to configure `amiSelectorTerms` in Karpenter to use an alias for selecting a specific AMI.  The `alias` field specifies the AMI type and a fixed version, ensuring that Karpenter uses a specific AMI and does not automatically upgrade to newer versions unless the Kubernetes control plane version is updated.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"amiSelectorTerms:\\n  - alias: al2023@v20240807\"\n```\n\n----------------------------------------\n\nTITLE: Using UserData for Additional Kubelet Configuration in Karpenter\nDESCRIPTION: Example showing how to combine spec.kubelet and spec.userData to configure additional kubelet parameters that aren't directly supported in spec.kubelet. This example sets maxPods directly and registryPullQPS through UserData on AL2023.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n  kubelet:\n    maxPods: 42\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          # Configured through UserData since unavailable in `spec.kubelet`\n          registryPullQPS: 10\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Configuration with GPU Toleration\nDESCRIPTION: Example of a Pod configured to tolerate GPU nodes that have been tainted with nvidia.com/gpu. The Pod requests GPU resources and includes a toleration to allow scheduling on GPU-tainted nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits in Karpenter NodePool\nDESCRIPTION: Demonstrates how to set resource limits (CPU, memory, GPU) in a Karpenter NodePool specification to constrain the maximum resources it can manage. Uses spot instances and defines specific resource caps.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for Node Registration with AWS\nDESCRIPTION: JSON log entry showing the successful registration of an AWS EC2 instance as a Kubernetes node. This is when the instance is recognized by the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:26:19.028Z\",\n  \"message\": \"registered nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Instance Profile for Karpenter EC2NodeClass - YAML\nDESCRIPTION: This configuration specifies the IAM instance profile for the Karpenter EC2 nodes. It is essential to ensure pre-provisioning of an IAM instance profile if the instanceProfile field is used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceProfile: \"...\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selector for Karpenter-Managed Nodes\nDESCRIPTION: This YAML example shows how to set up a nodeSelector for pods to be scheduled on Karpenter-managed nodes. It uses both a well-known Kubernetes label for zone selection and a Karpenter-specific label for capacity type selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings in EC2NodeClass (YAML)\nDESCRIPTION: Example of configuring block device mappings in an EC2NodeClass specification. It demonstrates setting volume size, type, IOPS, encryption, and other EBS-related parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Policies with YAML\nDESCRIPTION: This YAML configuration snippet shows how to set disruption policies in Karpenter. Key parameters include 'consolidationPolicy', which sets when nodes are consolidatable, and 'consolidateAfter', indicating the wait time before consolidation. The input is the Kubernetes YAML configuration, affecting disruption behavior for nodes. It highlights Karpenter's ability to define and apply consolidation policies to streamline node management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Helm Chart Signature with Cosign\nDESCRIPTION: Command for verifying the authenticity of the Karpenter Helm chart using Cosign. Validates the certificate against GitHub workflows and ensures the chart hasn't been tampered with.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/charts/karpenter/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.3.2 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.3.2 \\\n  --annotations version=1.3.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro Hypervisor Requirements for IPv6 Support in Karpenter NodePool\nDESCRIPTION: YAML configuration for a Karpenter NodePool that restricts instance types to only those running on the Nitro hypervisor, which is required for IPv6 support with Amazon VPC CNI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Defining EC2NodeClass with Capacity Reservation Support in Karpenter AWS Provider\nDESCRIPTION: YAML specification for the EC2NodeClass API with capacity reservation selectors and status fields. This enables attaching multiple Capacity Reservations across AZs and Instance Types to a single EC2NodeClass, removing the need for Capacity Reservation Groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: example-node-class\nspec:\n  # capacityReservationSelectorTerms specify selectors which are ORed together to generate\n  # a list of filters against the EC2 DescribeCapacityReservation API\n  # ID cannot be specified with any other field within a single selector\n  # All other fields are not mutually exclusive and can be combined\n  capacityReservationSelectorTerms:\n    - # The id for the Capacity Reservation\n      id: String | None\n      # The id of the AWS account that owns the Capacity Reservation\n      # If no ownerID is specified, any ODCRs available to the current account will be used\n      ownerID: String | None\n      # Tags is a map of key/value tags used to select capacity reservations\n      # Specifying '*' for a value selects all values for a given tag key.\n      tags: Map | None\nstatus:\n  capacityReservations:\n    - # AvailabilityZone for the Capacity Reservation\n      availabilityZone: String\n      # The time at which the Capacity Reservation expires. When a Capacity\n      # Reservation expires, the reserved capacity is released and you can no longer\n      # launch instances into it. The Capacity Reservation's state changes to expired\n      # when it reaches its end date and time.\n      endTime: String | None\n      # id for the Capacity Reservation\n      id: String\n      # Indicates the instanceMatchCriteria of instance launches that the Capacity Reservation accepts. The options include:\n      #   - open:\n      #       The Capacity Reservation accepts all instances that have\n      #       matching attributes (instance type, platform, and Availability\n      #       Zone). Instances that have matching attributes launch into the\n      #       Capacity Reservation automatically without specifying any\n      #       additional parameters.\n      #   - targeted:\n      #       The Capacity Reservation only accepts instances that\n      #       have matching attributes (instance type, platform, and\n      #       Availability Zone), and explicitly target the Capacity\n      #       Reservation. This ensures that only permitted instances can use\n      #       the reserved capacity.\n      instanceMatchCriteria: String\n      # Instance Type for the Capacity Reservation\n      instanceType: String\n      # The id of the AWS account that owns the Capacity Reservation\n      ownerID: String\n```\n\n----------------------------------------\n\nTITLE: Setting up EC2 Instance Rebalance Recommendation Rule in YAML\nDESCRIPTION: This YAML snippet creates an AWS::Events::Rule resource to capture EC2 Instance Rebalance Recommendation signals and send them to the Karpenter interruption queue. It uses an event pattern to filter for specific event types from the EC2 source.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Spot Interruption Rule for Karpenter\nDESCRIPTION: Creates an EventBridge rule to capture EC2 Spot Instance Interruption Warning events and send them to the Karpenter interruption queue\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Custom UserData Configuration with AL2023\nDESCRIPTION: Example showing how to combine kubelet configuration with custom UserData for AL2023 AMI, demonstrating additional kubelet parameter configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n  kubelet:\n    maxPods: 42\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          # Configured through UserData since unavailable in `spec.kubelet`\n          registryPullQPS: 10\n```\n\n----------------------------------------\n\nTITLE: Initializing AL2 UserData Script in Bash\nDESCRIPTION: This bash script snippet represents the auto-generated UserData for AL2 amiFamily in Karpenter. It runs the EKS bootstrap script with parameters such as cluster name and API server information. Direct invocations in userData should be avoided in favor of custom AMIFamily when adjustments are necessary.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Kubelet Properties in EC2NodeClass\nDESCRIPTION: Example of setting additional kubelet configuration properties by updating the kubelet-config.json file in user data.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: kubelet-config-example\nspec:\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    echo \"$(jq '.kubeAPIQPS=50' /etc/kubernetes/kubelet/kubelet-config.json)\" > /etc/kubernetes/kubelet/kubelet-config.json\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by IDs in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs by directly specifying their IDs. This provides the most precise targeting when you know the exact AMIs you want to use.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - id: \"ami-123\"\n    - id: \"ami-456\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for Computing NodeClaim Requirements\nDESCRIPTION: JSON log entry showing when Karpenter computes the NodeClaim requirements based on pod needs. This determines how many nodes are needed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n    \"controller\": \"provisioner\",\n    \"nodeclaims\": 1,\n    \"pods\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Node Role Configuration for Karpenter\nDESCRIPTION: YAML configuration for aws-auth ConfigMap to allow nodes with Karpenter node IAM role to join the cluster\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Taints in a Karpenter NodePool\nDESCRIPTION: This YAML shows how to configure a taint in a Karpenter NodePool that requires a GPU.  Pods without a toleration for `nvidia.com/gpu` will not be scheduled on nodes created by this NodePool. The NodePool uses the taint to only run pods that require a GPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1\\nkind: NodePool\\nmetadata:\\n  name: gpu\\nspec:\\n  template:\\n    spec:\\n      requirements:\\n      - key: karpenter.k8s.aws/instance-family\\n        operator: In\\n        values:\\n          - p3\\n      taints:\\n      - key: nvidia.com/gpu\\n        value: \\\"true\\\"\\n        effect: \\\"NoSchedule\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Complex Node Affinity with Multiple Terms in Kubernetes YAML\nDESCRIPTION: This YAML example illustrates a more complex node affinity setup with multiple nodeSelectorTerms. It defines fallback options for pod scheduling based on zone availability and instance capacity type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions: # OR\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"NotIn\"\n            values: [\"us-west-2b\"]\n        - matchExpressions: # OR\n          - key: \"karpenter.sh/capacity-type\" # AND\n            operator: \"In\"\n            values: [\"spot\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with ODCR and On-Demand Fallback in Karpenter\nDESCRIPTION: YAML specification for a NodePool that prioritizes On-Demand Capacity Reservations (ODCR) but falls back to regular on-demand instances if ODCR isn't available. This is achieved by selecting both 'reserved' and 'on-demand' capacity types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n name: default\nspec:\n requirements:\n   - key: karpenter.sh/capacity-type\n     operator: In\n     values: [\"on-demand\", \"reserved\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Team B Deployment with Karpenter\nDESCRIPTION: This YAML snippet defines a Deployment for Team B using Karpenter. It specifies that 5 replicas of the pod should be created, ensuring that they run on nodes labeled for 'team-b'. This is crucial for segmenting workloads for different teams and managing resources effectively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Debugging NotReady Nodes with AL2\nDESCRIPTION: Commands for debugging nodes that fail to join the cluster using AWS Systems Manager on Amazon Linux 2.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pods Based on Node Resources in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to schedule pods based on specific node resources like NVME disks or network bandwidth using Karpenter's Well-Known Labels. It shows examples for both pod affinity and NodePool requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n           - key: \"karpenter.k8s.aws/instance-local-nvme\"\n             operator: \"Exists\"\n...\n\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: \"Exists\"\n...\n\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: Gt\n              values: [\"99\"]\n...\n\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: Gt\n    values: [\"99\"]\n...\n\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n              operator: Gt\n              values: [\"49999\"]\n...\n\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n    operator: Gt\n    values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Excluding Zones with Node Affinity in Kubernetes\nDESCRIPTION: This YAML demonstrates excluding a specific zone using `NotIn` operator within Node affinity. It ensures that the pod runs only in `us-west-2a` by specifying that it should be in either `us-west-2a` or `us-west-2b`, but explicitly not in `us-west-2b`.  This requires that the NodePool is configured to allow these zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"           - key: \\\"topology.kubernetes.io/zone\\\"\\n             operator: \\\"In\\\"\\n             values: [\\\"us-west-2a\\\", \\\"us-west-2b\\\"]\\n           - key: \\\"topology.kubernetes.io/zone\\\"\\n             operator: \\\"NotIn\\\"\\n             values: [\\\"us-west-2b\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacity Reservation Selector Terms in YAML\nDESCRIPTION: Examples of YAML configuration for capacity reservation selector terms in Karpenter EC2NodeClass, including selection by IDs, tags, and owner ID.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  - id: cr-123\n  - id: cr-456\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  # Select all capacity reservations which have both matching tags\n  - tags:\n      key1: foo\n      key2: bar\n  # Additionally, select all capacity reservations with the following matching tag\n  - tags:\n      key3: foobar\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  # Select all capacity reservations with the matching tags which are also owned by\n  # the specified account.\n  capacityReservationSelectorTerms:\n  - tags:\n      key: foo\n    ownerID: 012345678901\n```\n\n----------------------------------------\n\nTITLE: AL2023 AMIFamily UserData Template\nDESCRIPTION: Generated UserData for Amazon Linux 2023 AMI family using the NodeConfig format, specifying cluster parameters and kubelet configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Applying Taints for GPU Node Pools\nDESCRIPTION: This YAML snippet defines a NodePool with taints to ensure only pods that request GPUs can be scheduled on nodes with a specified GPU family. This is useful for workloads requiring specific hardware. Dependencies include Karpenter and compatible Kubernetes setup. It specifies taints such as 'NoSchedule' for keys like 'nvidia.com/gpu'. Pods must tolerate these taints to run on these nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Creation Tagging for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to create tags on EC2 resources during RunInstances, CreateFleet, or CreateLaunchTemplate calls. It ensures resources can't be tagged arbitrarily after creation and requires specific cluster-related tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Selector Terms for Subnet Selection in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure subnet selection logic within Karpenter for launching instances. It allows specifying multiple criteria for filtering subnets, combining AND and OR logic.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity and Anti-Affinity\nDESCRIPTION: This YAML snippet configures podAffinity and podAntiAffinity to control pod co-location and separation, respectively. It ensures pods with specified labels run in specific zones or avoid certain nodes. Dependencies include a Kubernetes setup with Karpenter running. Key fields include 'topologyKey' and 'labelSelector'. It effectively manages pod distribution based on affinity rules, ensuring compliance with colocated or separated deployment requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: Defining Node Pool Limits in YAML\nDESCRIPTION: This YAML snippet defines a NodePool with specific resource limits for CPU, memory, and GPU. Karpenter uses these limitations to manage resources effectively, ensuring node provisioning does not exceed defined limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Creating Default Karpenter NodePool\nDESCRIPTION: Creates a default NodePool configuration for Karpenter to define the types of nodes to provision for unscheduled workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step10-create-nodepool.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: IAM Role and Instance Profile Configuration in AWS Karpenter\nDESCRIPTION: Examples of configuring IAM roles and instance profiles for Karpenter nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Group Selection in AWS Karpenter (YAML)\nDESCRIPTION: Examples of security group selection criteria for AWS Karpenter, including selection by cluster ownership, tag keys, names, and IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*' # matches all resources with the tag\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with Disruption Budgets in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure NodePool disruption budgets in Karpenter. It defines three budgets: one that allows 20% of nodes to be disrupted if empty or drifted, another that acts as a ceiling of 5 disruptions, and a third that blocks disruptions during the first 10 minutes of the day for underutilized nodes. These budgets control Karpenter's disruption behavior based on different reasons and schedules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      expireAfter: 720h # 30 * 24h = 720h\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Defining Node Disruption Budget in Karpenter\nDESCRIPTION: YAML configuration for implementing Node Disruption Budget (NDB) in Karpenter to control parallel node upgrades. The NDB allows specifying either minAvailable or maxUnavailable nodes during upgrades using label selectors.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-upgrades.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha1\nkind: NodeDisruptionBudget\nmetadata:\n  name: default\nspec:\n  # Merged labelSelectors for multiple provisioners\n  labelSelectors:\n    - karpenter.sh/provisioner-name: default\n    - karpenter.sh/provisioner-name: app-name\n  # Following two are mutually exclusive:\n  minAvailable: 10% # intOrString\n  maxUnavailable: 30 # intOrString\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Aliases in YAML\nDESCRIPTION: Examples of pinning AMI aliases to specific versions for Amazon Linux 2023 and Bottlerocket in Karpenter EC2NodeClass configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nalias: al2023@v20240703\n```\n\nLANGUAGE: yaml\nCODE:\n```\nalias: bottlerocket@v1.20.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraints in Karpenter YAML\nDESCRIPTION: This snippet illustrates how to set up topology spread constraints in Karpenter to distribute pods across different zones, hosts, and capacity types. It uses maxSkew to control the distribution and labelSelector to identify related pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a NodeConfig YAML for AL2023 that sets the maximum number of pods. This UserData will be merged with Karpenter-generated configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\n----------------------------------------\n\nTITLE: Defining NodePool with EC2NodeClass Reference\nDESCRIPTION: This snippet creates a NodePool that references a specific EC2NodeClass. The NodePool is configured to facilitate AWS-specific settings such as nodeClass reference for resource allocation in Kubernetes using Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool in Karpenter with AWS Integration\nDESCRIPTION: Comprehensive example of a NodePool configuration in Karpenter showing template settings, requirements, kubelet configurations, disruption policies, and resource limits. Includes metadata, node specifications, taints, requirements for instance types, and detailed kubelet parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      labels:\n        billing-team: my-team\n      annotations:\n        example.com/owner: \"my-team\"\n    spec:\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: default\n      taints:\n        - key: example.com/special-taint\n          effect: NoSchedule\n      startupTaints:\n        - key: example.com/another-taint\n          effect: NoSchedule\n      requirements:\n        - key: \"karpenter.k8s.aws/instance-category\"\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: \"karpenter.k8s.aws/instance-cpu\"\n          operator: In\n          values: [\"4\", \"8\", \"16\", \"32\"]\n        - key: \"karpenter.k8s.aws/instance-hypervisor\"\n          operator: In\n          values: [\"nitro\"]\n        - key: \"karpenter.k8s.aws/instance-generation\"\n          operator: Gt\n          values: [\"2\"]\n        - key: \"topology.kubernetes.io/zone\"\n          operator: In\n          values: [\"us-west-2a\", \"us-west-2b\"]\n        - key: \"kubernetes.io/arch\"\n          operator: In\n          values: [\"arm64\", \"amd64\"]\n        - key: \"karpenter.sh/capacity-type\"\n          operator: In\n          values: [\"spot\", \"on-demand\"]\n      kubelet:\n        clusterDNS: [\"10.0.1.100\"]\n        systemReserved:\n          cpu: 100m\n          memory: 100Mi\n          ephemeral-storage: 1Gi\n        kubeReserved:\n          cpu: 200m\n          memory: 100Mi\n          ephemeral-storage: 3Gi\n        evictionHard:\n          memory.available: 5%\n          nodefs.available: 10%\n          nodefs.inodesFree: 10%\n        evictionSoft:\n          memory.available: 500Mi\n          nodefs.available: 15%\n          nodefs.inodesFree: 15%\n        evictionSoftGracePeriod:\n          memory.available: 1m\n          nodefs.available: 1m30s\n          nodefs.inodesFree: 2m\n        evictionMaxPodGracePeriod: 60\n        imageGCHighThresholdPercent: 85\n        imageGCLowThresholdPercent: 80\n        cpuCFSQuota: true\n        podsPerCore: 2\n        maxPods: 20\n  disruption:\n    consolidationPolicy: WhenUnderutilized | WhenEmpty\n    consolidateAfter: 30s\n    expireAfter: 720h\n  limits:\n    cpu: \"1000\"\n    memory: 1000Gi\n  weight: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Queue Policy for Karpenter Interruption Queue in AWS CloudFormation\nDESCRIPTION: This YAML snippet defines an AWS::SQS::QueuePolicy resource that allows AWS services to send notifications to Karpenter's interruption queue. It permits events.amazonaws.com and sqs.amazonaws.com to send messages while enforcing TLS encryption for all queue access.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Pinning AMIs Using Alias in EC2NodeClass\nDESCRIPTION: YAML configuration example showing how to pin an AMI to a specific version using the alias selector term. This method allows for version-specific selection while still considering the Kubernetes control plane version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- alias: al2023@v20240219\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Multipart UserData for AL2023 in Karpenter\nDESCRIPTION: Example of passing a pre-formatted MIME multipart archive as UserData, containing both a bash script and NodeConfig sections. This allows for more complex initialization sequences.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Savings Plans and Reserved Instances\nDESCRIPTION: This YAML configuration shows how to prioritize instance types with Savings Plans or Reserved Instances by setting up weighted NodePools. It uses the `.spec.weight` field to prioritize the reserved instance pool and limits its capacity.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Instance Profile and Attaching Role with AWS CLI\nDESCRIPTION: This snippet demonstrates how to create an IAM instance profile and attach a Node role to it using the AWS CLI. This is required because there is no VPC private endpoint for the IAM API.  Replace `${CLUSTER_NAME}` with your actual cluster name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"aws iam create-instance-profile --instance-profile-name \\\"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\\\"\\naws iam add-role-to-instance-profile --instance-profile-name \\\"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\\\" --role-name \\\"KarpenterNodeRole-${CLUSTER_NAME}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection by Name and Tags in YAML\nDESCRIPTION: This configuration selects security groups by matching both a specific security group name and tag wildcard to cover resources with the tag.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*' # matches all resources with the tag\n```\n\n----------------------------------------\n\nTITLE: Creating Instance State Change Rule for Karpenter in YAML\nDESCRIPTION: Defines an EventBridge rule to capture EC2 Instance State-change Notification signals and forward them to the Karpenter interruption queue. This enables Karpenter to react to instance state transitions such as termination or stopping.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Example Log: Launching NodeClaim\nDESCRIPTION: This JSON log entry indicates that Karpenter has launched a NodeClaim and provides details about the launched instance. It includes the NodeClaim name, provider ID (AWS instance ID), instance type, availability zone, capacity type (spot), and the allocatable resources (CPU, ephemeral storage, memory, pods) for the instance.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"level\": \"INFO\",\n       \"time\": \"2024-06-22T02:24:19.028Z\",\n       \"message\": \"launched nodeclaim\",\n       \"controller\": \"nodeclaim.lifecycle\",\n       \"NodeClaim\": {\n           \"name\": \"default-sfpsl\"\n       },\n       \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n       \"instance-type\": \"c3.2xlarge\",\n       \"zone\": \"us-west-2b\",\n       \"capacity-type\": \"spot\",\n       \"allocatable\": {\n         \"cpu\": \"7910m\",\n         \"ephemeral-storage\": \"17Gi\",\n         \"memory\": \"13215Mi\",\n         \"pods\": \"58\"\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Deletion in AWS IAM Policy\nDESCRIPTION: This policy allows TerminateInstances and DeleteLaunchTemplate actions to delete instance and launch-template resources. It requires specific tags to be present, ensuring Karpenter can only delete instances and launch templates associated with it.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cilium Startup Taint in Karpenter NodePool YAML\nDESCRIPTION: This snippet demonstrates how to configure a NodePool with a startup taint for Cilium, allowing it to set up networking before other pods start. It uses the 'startupTaints' feature to prevent continuous node provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Kubelet Configuration Example\nDESCRIPTION: Detailed example of kubelet configuration options within an EC2NodeClass, showing various settings for resource management and node behavior.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: Blocking Disruption for a Pod Using Annotation (Kubernetes, YAML)\nDESCRIPTION: This snippet demonstrates how to prevent Karpenter from disrupting a specific pod by applying the 'karpenter.sh/do-not-disrupt' annotation to the pod's metadata. This is useful for ensuring critical workloads are not interrupted during their execution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: apps/v1\\nkind: Deployment\\nspec:\\n  template:\\n    metadata:\\n      annotations:\\n        karpenter.sh/do-not-disrupt: \\\"true\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Pod Affinity and Anti-Affinity Configuration for Co-location and Separation\nDESCRIPTION: Example showing both pod affinity and anti-affinity usage. The configuration ensures pods are scheduled in zones with backend system pods while avoiding nodes that already have pods with label app=inflate, enhancing availability and resource utilization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: Using AMI Aliases in Karpenter\nDESCRIPTION: Example showing how to specify AMI aliases for AL2023 and Bottlerocket with specific version pinning. Aliases follow the format 'family@version'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nalias: al2023@v20240703\n```\n\nLANGUAGE: yaml\nCODE:\n```\nalias: bottlerocket@v1.20.4\n```\n\n----------------------------------------\n\nTITLE: Defining Node Selectors in Karpenter for Pod Placement\nDESCRIPTION: This YAML example shows how to use nodeSelector to target specific nodes using both standard Kubernetes labels (topology.kubernetes.io/zone) and Karpenter-specific labels (karpenter.sh/capacity-type).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Finding Provisionable Pods\nDESCRIPTION: JSON log showing Karpenter detecting pods that need to be provisioned. The log includes pod names and the duration of the detection process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"found provisionable pod(s)\",\n    \"commit\": \"490ef94\",\n    \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n    \"duration\": \"100.761702ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bottlerocket AMIFamily Configuration in TOML\nDESCRIPTION: This TOML snippet sets the Kubernetes and node-labels configuration for Bottlerocket AMIFamily. It specifies cluster parameters like API server address and DNS IP, ensuring proper node setup upon booting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements with MinValues in Karpenter AWS\nDESCRIPTION: Example NodePool configuration specifying instance requirements with minValues constraints for instance families, categories and types. This ensures scheduling flexibility by requiring minimum number of options for each requirement type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Pod Scheduling Based on Minimum NVME Storage Size\nDESCRIPTION: This YAML snippet shows how to configure pod affinity to require nodes with at least 100GB of NVME storage, using the `Gt` operator with Karpenter's well-known labels to specify a minimum storage size.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: Gt\n              values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Monitoring Karpenter logs for NodeClaim activities in AWS\nDESCRIPTION: Bash commands to configure the Karpenter namespace environment variable and follow the Karpenter logs to observe node creation activities in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with EC2NodeClass Reference\nDESCRIPTION: Example of a NodePool configuration that references an EC2NodeClass, showing the basic structure for linking a NodePool to AWS-specific settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: default\n```\n\n----------------------------------------\n\nTITLE: Configuring EBS Block Device Mappings in Karpenter EC2NodeClass\nDESCRIPTION: Example of configuring custom EBS volume settings for EC2 instances provisioned by Karpenter. This allows control over volume size, type, encryption, and other EBS-specific parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Resource Limits in Kubernetes\nDESCRIPTION: Define CPU, memory, and GPU resource limits for a NodePool to constrain node provisioning and prevent excessive resource allocation\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Discover API Server Endpoint\nDESCRIPTION: This IAM policy statement allows the Karpenter controller to discover the Kubernetes cluster's external API endpoint using the `eks:DescribeCluster` action. This enables EC2 nodes to successfully join the EKS cluster. If an EKS control plane is not used, the endpoint must be specified explicitly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selection in AWS Karpenter (YAML)\nDESCRIPTION: Examples of AMI selection criteria for AWS Karpenter, including selection by alias, tags, name, and ID.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-ami\n  - id: ami-123\n  # Select EKS optimized AL2023 AMIs with version `v20240807`. This term is mutually\n  # exclusive and can't be specified with other terms.\n  # - alias: al2023@v20240807\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - alias: al2023@v20240807\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - name: my-ami\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - tags:\n        Name: my-ami\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - name: my-ami\n      owner: self\n    - name: my-ami\n      owner: \"0123456789\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*EKS*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*\"\n      owner: self\n```\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - id: \"ami-123\"\n    - id: \"ami-456\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for GPU Isolation in Karpenter YAML\nDESCRIPTION: This example shows how to set up a NodePool that only provisions nodes with specific GPU instance types and applies a taint to ensure only GPU-tolerant pods are scheduled.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Labels in Karpenter NodePool Requirements\nDESCRIPTION: This YAML snippet demonstrates how to specify a user-defined label in the NodePool requirements using the 'Exists' operator, which makes Karpenter aware that it can schedule for these custom labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Tags in AWS Karpenter\nDESCRIPTION: Examples of subnet selection using various tag-based criteria including specific tag matches, wildcards, and multiple terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: my-subnet\n        MyTag: '' # matches all resources with the tag\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"my-subnet-1\"\n    - tags:\n        Name: \"my-subnet-2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"*Public*\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - id: \"subnet-09fa4a0a8f233a921\"\n    - id: \"subnet-0471ca205b8a129ae\"\n```\n\n----------------------------------------\n\nTITLE: Updating the aws-auth ConfigMap\nDESCRIPTION: Edits the aws-auth ConfigMap to allow nodes using the newly created Karpenter node IAM role to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step07-edit-aws-auth.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for AL2 AMI Family with SSH Access\nDESCRIPTION: Example of configuring user data for an Amazon Linux 2 EC2NodeClass to add SSH keys for remote login. This snippet demonstrates how to set up authorized keys for the ec2-user.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption in YAML\nDESCRIPTION: Example YAML configuration for NodePool disruption settings in Karpenter. It sets the consolidation policy to 'WhenEmptyOrUnderutilized'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Eviction Grace Periods in Kubelet\nDESCRIPTION: This YAML snippet shows how to configure soft eviction grace periods and maximum pod grace period in the kubelet configuration. These settings allow pods a grace period to terminate gracefully before being evicted when soft eviction thresholds are met. The evictionMaxPodGracePeriod setting defines the maximum grace period for pod termination during soft evictions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"kubelet:\\n  evictionSoftGracePeriod:\\n    memory.available: 1m\\n    nodefs.available: 1m30s\\n    nodefs.inodesFree: 2m\\n    imagefs.available: 1m30s\\n    imagefs.inodesFree: 2m\\n    pid.available: 2m\\n  evictionMaxPodGracePeriod: 60\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue Policy in AWS SQS\nDESCRIPTION: Creates an SQS queue policy that allows specific AWS services to send messages and enforces HTTPS-only connections for security\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Custom User Data Merge Example (MIME)\nDESCRIPTION: Example of how Karpenter merges custom user data (in MIME format) with its default bootstrap script for AL2 AMI family. This demonstrates the MIME multipart structure used for merging.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (mime)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue Policy in YAML\nDESCRIPTION: Defines an AWS SQS Queue Policy that allows AWS services to send notification messages to the Karpenter interruption queue. The policy permits events.amazonaws.com and sqs.amazonaws.com to use sqs:SendMessage and enforces HTTPS connections for security.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Merged Bash Script UserData in MIME Format for AL2023\nDESCRIPTION: Shows how Karpenter transforms a bash script into a MIME multipart archive by adding it as a shell script part and appending Karpenter's generated NodeConfig.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_42\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Finalizers from Nodes on AWS\nDESCRIPTION: This bash script removes all finalizers from nodes with the Karpenter finalizer, which is useful when unable to delete nodes after uninstalling Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Instance Type Offering Structure with ODCR in Karpenter Scheduling\nDESCRIPTION: Example YAML representation of how instance type offerings will include ODCR capacity as additional offerings with near-zero price to prioritize their usage. The offerings are organized by capacity type and availability zone.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: c5.large\nofferings:\n  - price: ....\n    available: ....\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"reserved\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n  - price: ....\n    available: ....\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"on-demand\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n  - price: ....\n    available: ....\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Options in Karpenter NodePool\nDESCRIPTION: This YAML snippet shows the available Kubelet configuration options in a Karpenter NodePool template including DNS settings, resource reservations, and eviction policies. These are optional customizations for specific use cases.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  clusterDNS: [\"10.0.1.100\"]\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  podsPerCore: 2\n  maxPods: 20\n```\n\n----------------------------------------\n\nTITLE: Create AWS EC2 Spot Service Role\nDESCRIPTION: Creates the AWS IAM service-linked role for EC2 Spot instances if not already present.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com || true\n```\n\n----------------------------------------\n\nTITLE: NodePool consolidationPolicy WhenUnderutilized (v1beta1) Configuration - YAML\nDESCRIPTION: This snippet shows how to enable consolidation for underutilized nodes using the `consolidationPolicy: WhenUnderutilized` setting in Karpenter v1beta1. This replaces the `consolidation.enabled` flag from v1alpha5.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1beta1\\nkind: NodePool\\n...\\nspec:\\n  disruption:\\n    consolidationPolicy: WhenUnderutilized\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Budgets in AWS Karpenter\nDESCRIPTION: YAML configuration for Node Disruption Budgets in Karpenter NodePool spec, defining limits for node disruptions based on percentage, count, schedule, and specific reasons.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 9 * * sat-sun\"\n    duration: 24h\n  - nodes: \"0\"\n    schedule: \"0 17 * * mon-fri\"\n    duration: 16h\n    reasons:\n      - Drifted\n```\n\n----------------------------------------\n\nTITLE: Deleting Karpenter Nodes and NodeClaims with kubectl\nDESCRIPTION: This snippet provides commands to manually delete specific nodes or nodeclaims in Karpenter. It includes options for deleting all nodeclaims or nodes owned by a specified NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Savings Plans and Reserved Instances\nDESCRIPTION: Example showing how to prioritize specific instance types with Karpenter using the weight and limits fields to utilize Savings Plans or Reserved Instances capacity before using generic instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption for a NodePool (Karpenter, YAML)\nDESCRIPTION: This snippet illustrates how to configure a NodePool to prevent any of its nodes from being voluntarily disrupted by setting a disruption budget of zero. This allows for better control over node management within Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1\\nkind: NodePool\\nmetadata:\\n  name: default\\nspec:\\n  disruption:\\n    budgets:\\n      - nodes: \\\"0\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Level Disruption Control in YAML\nDESCRIPTION: This example shows how to apply the 'karpenter.sh/do-not-disrupt' annotation to a Node resource. This prevents Karpenter from voluntarily disrupting the specific node, providing control over which nodes are eligible for disruption actions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Flexibility with MinValues in NodePool Requirements in YAML\nDESCRIPTION: This YAML snippet shows how to apply multiple `minValues` for the same requirement key within Karpenter's NodePool specification to facilitate more flexible scheduling. It uses keys like `kubernetes.io/arch`, `kubernetes.io/os`, and AWS-specific keys, providing operators and values to create scalable, resilient clusters on AWS. Critical considerations include understanding minValues’ behavior when multiple values are used for a key, where the scheduler will use the maximum of the defined values for a key. It inputs key-value pairs and outputs an optimized scheduling strategy within Karpenter's node provisioning framework.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: karpenter.k8s.aws/instance-family\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 3\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Accelerator Resources in Kubernetes Workload Manifest\nDESCRIPTION: This snippet demonstrates how to request GPU resources in a Kubernetes workload manifest for a pod. By specifying the limit for the `nvidia.com/gpu` resource, the pod will be scheduled to run on a node that has the appropriate GPU resources available. Ensure the correct device plugin daemonset is deployed for the GPUs being used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  template:\\n    spec:\\n      containers:\\n      - resources:\\n          limits:\\n            nvidia.com/gpu: \\\"1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Workload Topology Spread Constraint\nDESCRIPTION: This YAML snippet configures a topology spread constraint to ensure that workloads are evenly distributed across Kubernetes nodes based on the 'capacity-spread' label. The constraint helps maintain an even spread despite unsatisfiable conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by IDs in Karpenter EC2NodeClass\nDESCRIPTION: Selects security groups by directly specifying their IDs. This provides the most precise targeting when you know the exact security groups you want to use.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n```\n\n----------------------------------------\n\nTITLE: Annotating Node for Non-Disruption in Karpenter - YAML\nDESCRIPTION: This YAML snippet shows how to block disruptions on a node by applying the annotation `karpenter.sh/do-not-disrupt: \"true\"`. This prevents any Voluntary disruption actions from affecting the annotated node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\\nkind: Node\\nmetadata:\\n  annotations:\\n    karpenter.sh/do-not-disrupt: \\\"true\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Budgets in Karpenter\nDESCRIPTION: Example of setting up disruption budgets in a NodePool spec to control when and how nodes can be disrupted. Includes percentage-based, count-based, and schedule-based disruption controls.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 9 * * sat-sun\"\n    duration: 24h\n  - nodes: \"0\"\n    schedule: \"0 17 * * mon-fri\"\n    duration: 16h\n    reasons:\n      - Drifted\n```\n\n----------------------------------------\n\nTITLE: Node Selector Affinity Example for Pods\nDESCRIPTION: This snippet illustrates how to use node affinity in a Pod specification to require a specific node resource, in this case, NVME disk availability. It shows the use of affinities for both pods and NodePools to direct scheduling appropriately.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: \"Exists\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in AWS Karpenter\nDESCRIPTION: YAML configuration for specifying AMI selector terms in Karpenter, allowing selection of AMIs based on tags for environment and cluster name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD Helm Chart\nDESCRIPTION: Command to upgrade or install the karpenter-crd Helm chart to manage Custom Resource Definitions used by Karpenter. This is the recommended approach for managing Karpenter CRDs as they are coupled to the version of Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Resource Requests in Kubernetes\nDESCRIPTION: Example of configuring memory and CPU resource requests and limits for a pod specification. The container requests 128MiB memory and 0.5 CPU with limits of 256MiB memory and 1 CPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\nspec:\n  containers:\n  - name: app\n    image: myimage\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n      limits:\n        memory: \"256Mi\"\n        cpu: \"1000m\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Role IAM Configuration\nDESCRIPTION: YAML configuration defining the IAM role for Karpenter-managed nodes, including necessary managed policies for EKS worker nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Budgets in Karpenter NodePool\nDESCRIPTION: YAML configuration for setting up node disruption budgets with percentage limits, node counts, and scheduled disruption windows. Includes settings for both weekday and weekend schedules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 9 * * sat-sun\"\n    duration: 24h\n  - nodes: \"0\"\n    schedule: \"0 17 * * mon-fri\"\n    duration: 16h\n    reasons:\n      - Drifted\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption Budgets in Karpenter\nDESCRIPTION: Example NodePool configuration demonstrating disruption budget settings with multiple budgets controlling node disruption rates. Includes percentage-based limits, absolute limits, and time-scheduled disruption controls.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      expireAfter: 720h # 30 * 24h = 720h\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Eviction Grace Periods in Karpenter\nDESCRIPTION: This YAML configuration sets the soft eviction grace periods for various resources such as memory and file systems. The configuration is essential for managing pod evictions effectively based on resource usage over specified durations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: Isolating Hardware with Taints and Tolerations\nDESCRIPTION: This YAML snippet shows how to isolate expensive hardware, specifically Nvidia GPUs, using taints and node selectors within a Karpenter NodePool.  Pods that need to run on these nodes must tolerate the `nvidia.com/gpu` taint.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: EC2 Instance Actions with Tags Policy\nDESCRIPTION: IAM policy allowing RunInstances, CreateFleet, and CreateLaunchTemplate actions with required cluster and nodepool tags for EC2 resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AL2023 Node Configuration\nDESCRIPTION: NodeConfig specification for Amazon Linux 2023 nodes with cluster and kubelet configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod-Level Do-Not-Disrupt Annotation in Deployment\nDESCRIPTION: Example of adding the karpenter.sh/do-not-disrupt annotation to a Deployment to prevent pods from being voluntarily disrupted. This prevents Karpenter from evicting the pod during consolidation and certain drift scenarios.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Disruption Toleration Configuration\nDESCRIPTION: YAML configuration showing the toleration settings needed for pods to remain on nodes during disruption events after version 0.32.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nKey: karpenter.sh/disruption\nEffect: NoSchedule\nOperator: Equals\nValues: disrupting\n```\n\n----------------------------------------\n\nTITLE: Customizing Kubelet Configuration\nDESCRIPTION: This snippet outlines the Kubelet configuration inside the EC2NodeClass, specifying resource limits, eviction parameters, and DNS settings. It enables further customizability for instances launched by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterNodeRole in CloudFormation\nDESCRIPTION: YAML configuration for creating an IAM role for Karpenter-managed nodes, including necessary managed policies for EKS, EC2, and SSM access.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Instance Role Passing\nDESCRIPTION: IAM policy that allows Karpenter to pass the node role to generated instance profiles for EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Architecture-Based Prioritization with Weighted Provisioners in Karpenter\nDESCRIPTION: Example showing a weighted provisioning strategy with a default AMD64 provisioner (weight 100) and a fallback ARM64 provisioner (weight 50) to control architecture selection without requiring nodeSelectors on all workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Default provisioner that will be attempted to be scheduled first\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: default\nspec:\n  weight: 100\n  requirements:\n  - key: kubernetes.io/arch\n    operator: In\n    values: [\"amd64\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# ARM-64 specific provisioner that will be scheduled if the other provisioner does not fit the constraints for this provisioner\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: arm64\nspec:\n  weight: 50\n  requirements:\n  - key: kubernetes.io/arch\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Pod Configuration for NVME Disk Requirements using Node Affinity\nDESCRIPTION: YAML snippet showing how to configure a pod to require nodes with NVME local storage using node affinity with the 'Exists' operator on the karpenter.k8s.aws/instance-local-nvme label.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n           - key: \"karpenter.k8s.aws/instance-local-nvme\"\n             operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Merged TOML UserData for Bottlerocket in Karpenter\nDESCRIPTION: Example of how Karpenter merges custom TOML UserData with its generated configuration for Bottlerocket instances. Note how Karpenter's settings take precedence over user-provided values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_61\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'cluster'\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'default'\n\n[settings.kubernetes.node-taints]\n\n[settings.kubernetes.eviction-hard]\n'memory.available' = '12%%'\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter Using Helm Chart (Fargate)\nDESCRIPTION: This snippet details the command to apply a Helm chart for Karpenter utilizing Fargate, using a bash script.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart-fargate.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI using Tags\nDESCRIPTION: This YAML snippet shows how to select an AMI using tags.  This allows for selecting AMIs that match certain criteria defined by the tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Using tags\n# You can use a CI/CD system to test newer versions of an AMI\"\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterControllerPolicy in CloudFormation\nDESCRIPTION: YAML configuration for creating an IAM managed policy for the Karpenter controller, setting up the policy name and document structure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    PolicyDocument: !Sub |\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n```\n\n----------------------------------------\n\nTITLE: Finding Launch Templates by Naming Pattern - Shell\nDESCRIPTION: This command describes AWS EC2 launch templates that match a specific naming pattern, allowing users to identify templates associated with a particular cluster. It uses the AWS CLI to filter results based on the launch template name pattern.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with EBS Startup Taints\nDESCRIPTION: YAML configuration showing how to configure startup taints for the EBS CSI driver in a Karpenter NodePool to prevent volume attachment race conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Pod Affinity and Anti-Affinity Configuration\nDESCRIPTION: Configuration example showing both pod affinity and anti-affinity rules to control pod placement relative to other pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: AMI Resolution with Tags in EC2NodeClass\nDESCRIPTION: Example showing AMI resolution using tags in the spec. Demonstrates how custom AMIs are resolved with deprecation status and architecture requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for IPv6 with Nitro Hypervisor Requirement in Karpenter\nDESCRIPTION: This YAML snippet defines a Karpenter NodePool that requires EC2 instances to use the Nitro hypervisor, which is necessary for IPv6 support with the Amazon VPC CNI. This configuration helps ensure that all provisioned nodes will be compatible with IPv6 networking.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Version Alias in Karpenter\nDESCRIPTION: Example of pinning a specific AMI version using an alias selector term. This approach pins to a fixed version while respecting the cluster's Kubernetes version compatibility.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Querying Available AMI Versions for AL2023 in Bash\nDESCRIPTION: Bash command to retrieve available AMI versions for Amazon Linux 2023 in a specific Kubernetes version and AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2023/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $10}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups with Tags in YAML\nDESCRIPTION: Demonstrates using tag-based selection for AWS security groups within Karpenter configurations. Tags and conditions are ANDed per term for efficient resource identification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n```\n\n----------------------------------------\n\nTITLE: Instance Type Filtering Exists Requirement (v0.14.0)\nDESCRIPTION: This YAML snippet demonstrates how to add an `Exists` requirement for instance type or family to eliminate the additional instance type filtering introduced in Karpenter `0.14.0`. This configuration ensures that all specified instance types are considered regardless of the default filtering.  This is for provisioner configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n  - key: node.kubernetes.io/instance-type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with EBS CSI Driver Startup Taints\nDESCRIPTION: NodePool configuration that adds a startup taint for the EBS CSI driver to prevent the race condition between the scheduler and CSINode during node registration. This taint ensures pods aren't scheduled until the CSI driver is fully initialized on the node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool to Launch Only ODCR Instances in Karpenter\nDESCRIPTION: YAML specification for a NodePool that only allows launching instances using On-Demand Capacity Reservations (ODCR). It selects only the newly introduced 'reserved' capacity type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n name: default\nspec:\n requirements:\n - key: karpenter.sh/capacity-type\n   operator: In\n   values: [\"reserved\"]\n```\n\n----------------------------------------\n\nTITLE: GPU Resource Request Example\nDESCRIPTION: Example showing how to request NVIDIA GPU resources in a pod specification. Requests 1 NVIDIA GPU unit for the container.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues on Bottlerocket Nodes\nDESCRIPTION: Bash commands to connect to a Bottlerocket-based node that's in NotReady state, including accessing the admin container for troubleshooting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n\n----------------------------------------\n\nTITLE: Specifying GPU Resource Requirements in a Workload Manifest\nDESCRIPTION: This example shows how to include a GPU resource requirement in a workload manifest. It requests one NVIDIA GPU for the container, which will cause the pod to be scheduled onto an appropriate node with GPU capabilities.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Default Karpenter Disruption Configuration in YAML\nDESCRIPTION: This YAML snippet shows the default configuration for Karpenter's disruption settings in a NodePool specification. It includes the consolidation policy and expiration time.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n    expireAfter: 720h\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption Budgets in Karpenter\nDESCRIPTION: Example YAML configuration that defines disruption budgets for a Karpenter NodePool, including percentage-based limits, static limits, and scheduled restrictions for different disruption reasons.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n    budgets:\n    - nodes: \"20%\"\n      reasons:\n      - \"Empty\"\n      - \"Drifted\"\n    - nodes: \"5\"\n    - nodes: \"0\"\n      schedule: \"@daily\"\n      duration: 10m\n      reasons:\n      - \"Underutilized\"\n```\n\n----------------------------------------\n\nTITLE: Metric Documentation Section\nDESCRIPTION: Detailed documentation of various metric categories including EC2 node class metrics, interruption metrics, cluster metrics, cloud provider metrics, controller runtime metrics, workqueue metrics, client metrics, and AWS SDK metrics. Each metric includes stability level and description.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_transition_seconds`\nThe amount of time a condition was in a given state before transitioning. Labeled by the name of the nodeclaim, and the namespace.\n- Stability Level: BETA\n\n### `operator_ec2nodeclass_status_condition_current_status_seconds`\nThe current amount of time in seconds that a status condition has been in a specific state. Labeled by the name of the nodelcaim, namespace, type, status, and reason.\n- Stability Level: BETA\n\n[...continued metrics documentation...]\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Name and Tag in Karpenter EC2NodeClass\nDESCRIPTION: Selects security groups by both name and tag where all criteria must match. This provides more precise targeting when multiple security groups might share the same tag values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*' # matches all resources with the tag\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Taints in Karpenter NodePool\nDESCRIPTION: This YAML snippet configures a startup taint in a Karpenter NodePool to handle situations where a taint is temporarily applied to nodes, preventing premature pod scheduling. It demonstrates configuring the Cilium's startup taint to indicate a node is not ready for scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: node.cilium.io/agent-not-ready\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a NodeConfig YAML for AL2023 instances, specifying kubelet configuration. This UserData will be merged with Karpenter-generated configs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Linked Role for EC2 Spot\nDESCRIPTION: This command creates an AWS service-linked role necessary for using EC2 Spot instances. This step is required for accounts that have not been previously onboarded to EC2 Spot. AWS CLI must be installed and configured with appropriate permissions to execute this command successfully.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Managing Instance Profile Roles with AWS IAM and JSON\nDESCRIPTION: This IAM policy grants Karpenter permission to modify instance profiles by adding or removing roles, provided the request is made with correct tag settings and in the correct region. The permissions are controlled by conditions that ensure operations are targeted to specific clusters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Creating NodeClaim\nDESCRIPTION: JSON log showing the creation of a NodeClaim by Karpenter, including its name, resource requests, and compatible instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.128Z\",\n    \"message\": \"created nodeclaim\",\n    \"controller\": \"provisioner\",\n    \"NodePool\": {\n        \"name\":\"default\"\n    },\n    \"NodeClaim\": {\n        \"name\":\"default-sfpsl\"\n    },\n    \"requests\": {\n        \"cpu\":\"5150m\",\n        \"pods\":\"8\"\n    },\n    \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Taints for Cilium in Karpenter NodePool\nDESCRIPTION: This YAML snippet shows how to configure startup taints in a Karpenter NodePool to handle temporary taints needed for ensuring pods don't schedule on nodes that aren't ready. It specifically addresses the Cilium startup taint.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: node.cilium.io/agent-not-ready\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: AMI Selection by Owner with Wildcard Name in Karpenter\nDESCRIPTION: This YAML snippet shows how to select all AMIs under a specific owner using a wildcard for the name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  amiSelectorTerms:\\n    - name: \\\"*\\\"\\n      owner: self\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Startup Taints for Cilium\nDESCRIPTION: This snippet shows how to configure startup taints in a Karpenter NodePool to prevent scheduling issues with Cilium. It makes Karpenter aware of temporary taints that are added during node initialization, preventing the launch of unnecessary nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: node.cilium.io/agent-not-ready\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings in EC2NodeClass\nDESCRIPTION: Example of specifying block device mappings for EC2 instances. This configuration controls the Elastic Block Storage (EBS) volumes attached to provisioned nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Allow Regional Read Actions - IAM Policy\nDESCRIPTION: IAM policy statement allowing various EC2 describe actions within the current AWS region. Enables Karpenter to query information about EC2 resources and infrastructure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeAvailabilityZones\",\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Tag Scoped Instance Profile\nDESCRIPTION: This IAM policy statement allows the Karpenter controller to tag instance profiles using `iam:TagInstanceProfile`, provided that `ResourceTag` and `RequestTag` attributes meet specific conditions. It ensures that Karpenter can only act on instance profiles it provisions for the cluster by verifying `kubernetes.io/cluster`, `topology.kubernetes.io/region`, and `karpenter.k8s.aws/ec2nodeclass` tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter Helm Chart on Kubernetes\nDESCRIPTION: Command for upgrading or installing Karpenter using Helm. Configures the service account with IAM role annotations, sets the cluster name, and configures the interruption queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/charts/karpenter/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install --namespace karpenter --create-namespace \\\n  karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --version 1.3.2 \\\n  --set \"serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn=${KARPENTER_IAM_ROLE_ARN}\" \\\n  --set settings.clusterName=${CLUSTER_NAME} \\\n  --set settings.interruptionQueue=${CLUSTER_NAME} \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Custom UserData Configuration with AL2023\nDESCRIPTION: Example showing how to combine spec.kubelet settings with custom UserData for additional configuration options in AL2023 AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n  kubelet:\n    maxPods: 42\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          # Configured through UserData since unavailable in `spec.kubelet`\n          registryPullQPS: 10\n```\n\n----------------------------------------\n\nTITLE: Recommended Karpenter NodePool Spec\nDESCRIPTION: This YAML snippet shows a recommended set of requirements for a Karpenter NodePool to provide a generic and flexible configuration. It includes requirements for architecture, operating system, capacity type, instance category, and instance generation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pods Requiring High Network Bandwidth\nDESCRIPTION: Example showing how to use node affinity to require nodes with at least 50 Gbps of network bandwidth for specific pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n              operator: Gt\n              values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Available AMI Versions for AL2 in Bash\nDESCRIPTION: Bash command to retrieve available AMI versions for Amazon Linux 2 in a specific Kubernetes version and AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $8}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Creating Karpenter Node IAM Role\nDESCRIPTION: Creates the IAM role that will be used by nodes provisioned with Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step02-node-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Updating Security Group Selector Configuration in YAML\nDESCRIPTION: Shows the proposed structure for securityGroupSelectorTerms, allowing multiple selectors through ids, names, and tags that can be ORed together.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1beta1-full-changelist.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n- id: abc-123\n  tags:\n    use: private-subnet\n# Selector Terms are ORed\n- name: custom-security-group-b # not the same as the \"Name\" tag\n  tags:\n    use: private-subnet\n- tags:\n    use: private-subnet\n    Name: custom-security-group-c # not the same as the \"name\" field\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Labels in NodePool Requirements with YAML\nDESCRIPTION: This snippet demonstrates how to specify a user-defined label in NodePool requirements using the 'Exists' operator. This is necessary for Karpenter to recognize custom labels that are not well-known.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Example NodeClaim Resource Output\nDESCRIPTION: Complete output of a kubectl describe command for a NodeClaim, showing labels, annotations, specifications, status, and events. This example demonstrates the structure and information available in a NodeClaim resource.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:    \nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:    \n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:               \n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:               \n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:               \n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:               \n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:               \n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: Instance Profile Status Configuration in AWS Karpenter\nDESCRIPTION: Example showing instance profile status field resolved from the role specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Tolerations for Pods Requiring GPUs\nDESCRIPTION: This YAML snippet configures a pod to tolerate GPU-related taints, allowing it to schedule on nodes that have GPU taints. It is used in conjunction with NodePool taints for specific workload requirements. Dependencies include the presence of tainted nodes in the Kubernetes environment. Key fields are 'tolerations' with taint keys and effects specified. The input includes GPU resource requests for pods needing specific hardware.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Options in EC2NodeClass YAML\nDESCRIPTION: Default configuration for EC2 instance metadata options, controlling the Instance Metadata Service (IMDS) behavior.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD Helm Chart\nDESCRIPTION: This command upgrades or installs the Karpenter CRD Helm chart which manages the lifecycle of Karpenter's Custom Resource Definitions. It sets the namespace to kube-system and creates the namespace if it doesn't exist.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with Multiple MinValues Requirements\nDESCRIPTION: Example showing how to configure multiple minValues requirements for the same keys. When multiple minValues are defined for the same requirement key, scheduler uses the maximum value among them.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: karpenter.k8s.aws/instance-family\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 3\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in YAML\nDESCRIPTION: Example YAML configuration for a Pod Disruption Budget (PDB). This PDB ensures that at least 4 pods matching the label 'myapp' are available during node termination.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using AMI ID\nDESCRIPTION: Example showing how to pin an AMI using its specific ID. This is the most strict method of AMI selection as it will only ever select the exact AMI specified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: KMS Key Policy for EBS Volume Encryption\nDESCRIPTION: Example KMS key policy that allows EC2 instances to use encrypted EBS volumes without requiring specific IAM roles in the KMS policy.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Name Using Wildcards - YAML\nDESCRIPTION: This example shows how to use wildcard characters to select security groups based on name patterns, which is useful for broader grouping of related security groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Security Groups for Pods\nDESCRIPTION: YAML configuration for a Karpenter NodePool that addresses pod startup delays when using Security Groups for Pods by adding the vpc.amazonaws.com/has-trunk-attached label.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Node Disruption Budget for Homogeneous Clusters in Kubernetes\nDESCRIPTION: This YAML snippet defines a NodeDisruptionBudget for homogeneous clusters with a minAvailable setting of 70%, allowing Karpenter to upgrade nodes while maintaining cluster availability. It targets nodes managed by the 'default' provisioner.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-upgrades.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha1\nkind: NodeDisruptionBudget\nmetadata:\n  name: default\nspec:\n  labelSelectors:\n    - karpenter.sh/provisioner-name: default\n  minAvailable: 70% # all but 3 nodes will be upgrading at a time.\n```\n\n----------------------------------------\n\nTITLE: AMI Status with AL2 Alias Configuration in AWS Karpenter\nDESCRIPTION: Example showing AMI status fields resolved using an AL2 alias, including AMI IDs, names, and requirements for different architectures and GPU configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Tag Key in Karpenter EC2NodeClass\nDESCRIPTION: Selects all security groups with a specified tag key, regardless of the tag value using wildcard. This is useful when you want to select resources based solely on the presence of a tag.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for Nitro Instance Types with IPv6\nDESCRIPTION: This YAML snippet shows how to configure a Karpenter NodePool to only allow Nitro instance types, which is recommended when using IPv6. It adds a requirement to the NodePool specification to filter for instances with the Nitro hypervisor.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell UserData for Windows in Karpenter\nDESCRIPTION: Example of PowerShell UserData for Windows 2019/2022. This script will be prepended to Karpenter's managed section that bootstraps the kubelet.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Pod Topology Spread Constraints Configuration for Workload Distribution\nDESCRIPTION: Configuration example for topology spread constraints that distributes pods across availability zones, hosts, and capacity types with a maxSkew of 1. This helps improve availability by ensuring pods are evenly spread across different topology domains.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Complete NodeClaim Configuration Example\nDESCRIPTION: Detailed example of a Karpenter NodeClaim specification showing labels, annotations, requirements, resources, and status information for an AWS EC2 instance\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:\nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:\n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:\n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:\n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:\n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using ID\nDESCRIPTION: Example of pinning to a specific AMI by its ID. This is the most direct way to ensure a specific AMI is always used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Kubelet Parameters in Karpenter\nDESCRIPTION: Example showing basic kubelet configuration including pod limits, resource reservation, and eviction thresholds. Demonstrates core settings for node management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Term Using AMI ID\nDESCRIPTION: Example of selecting an AMI by its specific ID. This provides the most direct and unchanging reference to a particular AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Using id\n# This will only ever select this specific AMI id\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommended NodePool Requirements for AWS Karpenter\nDESCRIPTION: This YAML configuration demonstrates the recommended NodePool requirements for most generic workloads, including architecture, OS, capacity type, and instance specifications that help avoid exotic instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter NodePools and Deployment with Topology Constraints\nDESCRIPTION: Example configuration showing NodePool definitions with zone constraints and a deployment with topology spread requirements. Demonstrates potential mismatch between NodePool zones and pod topology constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Create Scoped Instance Profile\nDESCRIPTION: This IAM policy statement grants the Karpenter controller permission to create new instance profiles within a specific scope using `iam:CreateInstanceProfile`. The condition ensures that the request is made to a cluster with appropriate tags (`kubernetes.io/cluster`, `eks:eks-cluster-name`, `topology.kubernetes.io/region`) and that `karpenter.k8s.aws/ec2nodeclass` is also set to some value. This allows Karpenter to generate instance profiles based on roles specified in `EC2NodeClasses`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Example of block device mapping configuration for EC2 instances. This snippet demonstrates how to set up an EBS volume with specific properties such as size, type, IOPS, encryption, and KMS key.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Merging User Data for AL2 AMI (MIME Format)\nDESCRIPTION: Example of how custom user data in MIME format is merged with Karpenter's default user data for AL2 AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (mime)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Statement for Launch Template Access in JSON\nDESCRIPTION: Specifies IAM permissions for Karpenter to use EC2 launch templates. Access is restricted to templates tagged with the cluster name and nodepool identifiers, ensuring that only templates created for Karpenter are used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2LaunchTemplateAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selection by Tags and Name\nDESCRIPTION: YAML configuration demonstrating how to specify AMI selection using tags and name in amiSelectorTerms for production environments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Resource Limits in Karpenter\nDESCRIPTION: Demonstrates how to set resource limits for CPU, memory, and GPU in a Karpenter NodePool. The limits section constrains the maximum resources the NodePool will manage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\"]\n  limits:\n    cpu: 1000\n    memory: 1000Gi\n    nvidia.com/gpu: 2\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for AL2023 AMI Family\nDESCRIPTION: Default block device mapping configuration for the Amazon Linux 2023 (AL2023) AMI family in EC2NodeClass. This configuration is used when no overrides are specified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Grafana Instance\nDESCRIPTION: This script allows for port forwarding to the Grafana instance deployed for monitoring Karpenter, enabling access to the Grafana dashboard via local machine.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step10-add-grafana-port-forward.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Defining Pod ENI Resource Requirements in a Deployment Manifest\nDESCRIPTION: This snippet demonstrates how to specify a Pod ENI resource requirement in a deployment manifest. It requests one Pod ENI, which is used for features like Security Groups for Pods in AWS environments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements for High Network Bandwidth\nDESCRIPTION: Example showing how to configure a NodePool to only use instances with at least 50 Gbps of network bandwidth.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n    operator: Gt\n    values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Resource Requirements in Kubernetes\nDESCRIPTION: Example showing how to request GPU resources in a pod specification. The pod requests one NVIDIA GPU using the nvidia.com/gpu resource type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Startup Taints for Cilium in Karpenter\nDESCRIPTION: This YAML snippet configures a Karpenter NodePool with startup taints to prevent scheduling issues with Cilium. It tells Karpenter to be aware of temporary taints that Cilium applies during node initialization, preventing the provisioning of unnecessary nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: node.cilium.io/agent-not-ready\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in Karpenter\nDESCRIPTION: Example of configuring AMI selector terms to tag and validate AMIs for upgrade safety\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Spot and On-Demand NodePools\nDESCRIPTION: Karpenter NodePool configurations for managing spot and on-demand instances with capacity spread labels to achieve a 4:1 spot to on-demand ratio.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Custom SSM Parameter\nDESCRIPTION: YAML configuration example for selecting an AMI using a custom SSM parameter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - ssmParameter: \"my-custom-parameter\"\n```\n\n----------------------------------------\n\nTITLE: Generating Karpenter Deployment YAML\nDESCRIPTION: Generates a complete Karpenter deployment YAML from the Helm chart with customized settings for the specific cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step08-generate-chart.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Node Disruption Budget for Heterogeneous Clusters in Kubernetes\nDESCRIPTION: This YAML snippet defines a NodeDisruptionBudget for heterogeneous clusters with a maxUnavailable setting of 2 nodes, controlling how many nodes can be upgraded at once by Karpenter. It targets nodes managed by the 'default' provisioner.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-upgrades.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha1\nkind: NodeDisruptionBudget\nmetadata:\n  name: default\nspec:\n  labelSelectors:\n    - karpenter.sh/provisioner-name: default\n  maxUnavailable: 2 # only 2 nodes will be upgrading at a time.\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Store Policy in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Example of setting the instance store policy to RAID0 for faster node ephemeral storage. This configuration is useful for workloads requiring low latency or dense storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Karpenter Pod YAML\nDESCRIPTION: This example demonstrates how to configure tolerations in a pod specification to allow scheduling on nodes with specific taints, such as GPU-enabled nodes. It also includes resource requests for GPU usage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Read Instance Profile\nDESCRIPTION: This IAM policy statement grants the Karpenter controller permission to retrieve information about instance profiles using the `iam:GetInstanceProfile` action.  This allows Karpenter to understand if an instance profile has been provisioned for an `EC2NodeClass` or needs to be re-provisioned.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Pool for GPU Usage in YAML\nDESCRIPTION: This YAML snippet creates a NodePool that provisions nodes with specific instance types capable of utilizing Nvidia GPUs. Pods must tolerate a defined taint to be scheduled on these nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Terms Configuration in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure AMI selector terms in a Karpenter `EC2NodeClass`.  It shows selecting AMIs based on tags, names, and IDs, using an OR condition between terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n\"amiSelectorTerms:\\n  # Select on any AMI that has both the \\\"karpenter.sh/discovery: ${CLUSTER_NAME}\\\" tag\\n  # AND the \\\"environment: test\\\" tag OR any AMI with the \\\"my-ami\\\" name\\n  # OR any AMI with ID \\\"ami-123\\\"\\n  - tags:\\n      karpenter.sh/discovery: \\\"${CLUSTER_NAME}\\\"\\n      environment: test\\n  - name: my-ami\\n  - id: ami-123\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Karpenter NodePool\nDESCRIPTION: This snippet shows the command to create a default NodePool for Karpenter, allowing efficient management of pod shapes and resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step12-add-nodepool.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Instance Profile for Karpenter Nodes\nDESCRIPTION: AWS CLI commands to manually create an instance profile and assign a Node role to it, which is required when operating Karpenter in a private cluster since there's no VPC private endpoint for IAM API.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\naws iam add-role-to-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" --role-name \"KarpenterNodeRole-${CLUSTER_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Querying NodePool Status with Kubectl\nDESCRIPTION: Retrieve the current resource consumption status of NodePools using a Kubernetes JSONPath query\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Level Do-Not-Disrupt Annotation\nDESCRIPTION: Example of adding the karpenter.sh/do-not-disrupt annotation to a Node to prevent it from being voluntarily disrupted by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets Using Subnet Selector Terms in YAML\nDESCRIPTION: This YAML snippet illustrates how to use subnetSelectorTerms to select subnets for Karpenter's EC2NodeClass. It shows selection logic using tags and ids, demonstrating flexibility in choosing subnets based on multiple conditions using AND and OR logic.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod-Level Disruption Control in YAML\nDESCRIPTION: This snippet demonstrates how to use the 'karpenter.sh/do-not-disrupt' annotation in a Deployment to prevent Karpenter from voluntarily disrupting specific pods. This is useful for workloads that should not be interrupted, such as interactive games or long-running batch jobs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: NodeClaim YAML Structure and Content Overview\nDESCRIPTION: This snippet outlines the structure of a NodeClaim in YAML format, detailing its metadata, specifications, and status. It highlights important fields such as Node Name, Provider ID, Resources, and Status conditions, providing a comprehensive view of the contents within a NodeClaim.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:\nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:\n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:\n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:\n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:\n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible AMI Selection in YAML\nDESCRIPTION: Example configuration for a proposed v1alpha2 AMISelector that provides more granular control over AMI selection. Demonstrates support for multiple owners, specific image IDs, and tag-based filtering.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/ami-selector.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelector:\n  owners:\n    - self\n    - 1234567890\n  name: my-ami\n  imageids:\n    - ami-abcd1234\n    - ami-2345cdef\n  filters:\n    tag:Version: v1.2.3,v1.2.4\n    tag:ThisShouldExist:\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter Setup\nDESCRIPTION: Sets the Karpenter namespace and version along with Kubernetes version to prepare for installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nexport KARPENTER_VERSION=\"1.0.9\"\nexport K8S_VERSION=\"1.31\"\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Term Using Alias with Version Pin\nDESCRIPTION: Example of using an alias AMI selector term with a specific version. This pins to a fixed version while still considering the Kubernetes control plane version of the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Using alias\n# Pinning to this fixed version alias will pull this version of the AMI,\n# matching the K8s control plane version of your cluster\namiSelectorTerms:\n- alias: al2023@v20240219\n```\n\n----------------------------------------\n\nTITLE: Manual Node and NodeClaim Deletion Commands\nDESCRIPTION: Bash commands for manually deleting Karpenter nodes, nodeclaims, and related resources using kubectl. These commands demonstrate various ways to delete single or multiple nodes and nodeclaims.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped Deletion - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `TerminateInstances` and `DeleteLaunchTemplate` actions. It ensures that Karpenter can only delete instances and launch templates that are tagged with `kubernetes.io/cluster/${ClusterName}` and `karpenter.sh/nodepool`.  This prevents Karpenter from deleting resources not associated with its managed clusters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for EKS API Endpoint Discovery\nDESCRIPTION: Policy allowing Karpenter to discover the Kubernetes cluster's external API endpoint.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash UserData for AL2023 in Karpenter AWS Provider\nDESCRIPTION: Example of passed-in bash UserData for AL2023 and how it's merged with Karpenter-generated NodeConfig. The custom UserData is a simple bash script, while Karpenter adds cluster and kubelet configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\necho \"Hello, AL2023!\"\n```\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for Minimum NVME Storage Size\nDESCRIPTION: YAML snippet showing how to configure a NodePool to require nodes with at least 100GB of NVME storage using the 'Gt' operator comparing against the karpenter.k8s.aws/instance-local-nvme label value in the requirements section.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: Gt\n    values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Security Groups Configuration in EC2NodeClass\nDESCRIPTION: Example showing security group selector terms and resolved security groups in the status field. Demonstrates how security groups are selected using tags and resolved to specific group IDs and names.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in Kubernetes\nDESCRIPTION: Example of a PodDisruptionBudget configuration that ensures application availability during node deprovisioning by maintaining a minimum number of available pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket AMI Family Settings in Karpenter\nDESCRIPTION: This snippet demonstrates the default configuration for the Bottlerocket AMI family in Karpenter. It includes Kubernetes settings and node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: Configuring TopologySpreadConstraints for Karpenter Deployment in YAML\nDESCRIPTION: A YAML configuration snippet showing the current topologySpreadConstraints setup for Karpenter deployment. This configuration specifies zone-based spreading with maxSkew of 1 using the ScheduleAnyways policy, which will be changed to DoNotSchedule in v1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1-roadmap.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n  - labelSelector:\n      matchLabels:\n        app.kubernetes.io/instance: karpenter\n        app.kubernetes.io/name: karpenter\n    maxSkew: 1\n    topologyKey: topology.kubernetes.io/zone\n    whenUnsatisfiable: ScheduleAnyways\n```\n\n----------------------------------------\n\nTITLE: Selecting Capacity Reservations by ID\nDESCRIPTION: YAML configuration example for selecting capacity reservations by their IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  - id: cr-123\n  - id: cr-456\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for Bottlerocket AMI Family\nDESCRIPTION: Default block device mapping configuration for the Bottlerocket AMI family in EC2NodeClass. This configuration includes separate volumes for root and container resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    # Root device\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 4Gi\n        volumeType: gp3\n        encrypted: true\n    # Data device: Container resources such as images and logs\n    - deviceName: /dev/xvdb\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Logging with Zap\nDESCRIPTION: Describes how to customize logging output using uber-go/zap logger configuration through a Kubernetes ConfigMap. The configuration options are defined in zap.Config and can be modified via the configmap-logging.yaml file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  zap-logger-config\n```\n\n----------------------------------------\n\nTITLE: Enabling Private Cluster in eksctl ClusterConfig\nDESCRIPTION: This snippet demonstrates how to enable private cluster mode within the eksctl ClusterConfig file. Setting `privateCluster.enabled` to true configures the EKS cluster to operate without public internet access, requiring specific VPC endpoints for Karpenter to function correctly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"privateCluster:\\n  enabled: true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for Bottlerocket AMI (YAML)\nDESCRIPTION: Example of configuring user data for a Bottlerocket AMI in an EC2NodeClass specification. It demonstrates setting Kubernetes-related parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Topology with AWS EBS in Kubernetes\nDESCRIPTION: This YAML configuration demonstrates how to set up persistent volume topology with Karpenter. It includes a Pod that references a PVC, a StorageClass with zonal topology for AWS EBS volumes, and a PersistentVolumeClaim that specifies storage requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Default Affinity Rules in YAML\nDESCRIPTION: Default affinity configuration for pod scheduling, including node affinity rules to avoid Karpenter nodes and pod anti-affinity for high availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/charts/karpenter/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"affinity\": {\n  \"nodeAffinity\": {\n    \"requiredDuringSchedulingIgnoredDuringExecution\": {\n      \"nodeSelectorTerms\": [{\n        \"matchExpressions\": [{\n          \"key\": \"karpenter.sh/nodepool\",\n          \"operator\": \"DoesNotExist\"\n        }]\n      }]\n    }\n  },\n  \"podAntiAffinity\": {\n    \"requiredDuringSchedulingIgnoredDuringExecution\": [{\n      \"topologyKey\": \"kubernetes.io/hostname\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Statement for EC2 Resource Access in JSON\nDESCRIPTION: Defines IAM permissions that allow Karpenter to access EC2 resources like images, snapshots, security groups, and subnets when creating instances. These permissions are scoped to the specific AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Spot and On-Demand NodePool Configuration\nDESCRIPTION: Karpenter NodePool configurations that establish a 4:1 ratio between spot and on-demand instances using capacity-spread labels for topology distribution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Creating NodePools with Fallback Options\nDESCRIPTION: This snippet defines two NodePools in Karpenter, establishing a fallback mechanism for pods that lack specific scheduling requirements. The configuration assigns higher weights to first NodePool to promote its utilization for node provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: AL2 Node Bootstrap Configuration\nDESCRIPTION: Bash script for bootstrapping Amazon Linux 2 nodes with EKS cluster configuration and kubelet arguments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Setting Up Instance Rebalance Recommendation Monitoring for Karpenter in CloudFormation\nDESCRIPTION: This YAML creates an EventBridge rule to capture EC2 Instance Rebalance Recommendation events and send them to Karpenter. This allows Karpenter to respond when spot instances are at heightened risk of interruption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Example NodeSelector Configuration\nDESCRIPTION: This YAML snippet shows an example of a `nodeSelector` configuration used to select nodes based on labels. It includes a well-known label (`topology.kubernetes.io/zone`) and a label that is well-known to Karpenter (`karpenter.sh/capacity-type`).  NodeSelectors are used to direct pods to particular nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"nodeSelector:\\n  topology.kubernetes.io/zone: us-west-2a\\n  karpenter.sh/capacity-type: spot\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Do-Not-Disrupt Annotation for Pods in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add the 'karpenter.sh/do-not-disrupt' annotation to a pod template in a Deployment. This annotation prevents Karpenter from voluntarily disrupting the pod during operations like consolidation or drift.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue\nDESCRIPTION: SQS queue configuration for handling AWS instance interruptions, health events, and state changes with 300-second message retention.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in Kubernetes\nDESCRIPTION: Example of a PodDisruptionBudget resource that prevents Karpenter from deprovisioning nodes if doing so would reduce the number of available pods below the specified threshold.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EventBridge Rule for Scheduled Changes in YAML\nDESCRIPTION: Defines an AWS EventBridge rule to capture AWS Health events and send them to Karpenter's interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter NodePool with Disruption Budgets\nDESCRIPTION: This YAML snippet demonstrates how to configure a Karpenter NodePool with disruption budgets to control drift. It includes rules for different time periods and reasons.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  …\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod ENI Resources in Kubernetes\nDESCRIPTION: Example of requesting Pod ENI (Elastic Network Interface) resources in a deployment specification. The configuration requests one Pod ENI through resource limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Windows 2022 PowerShell Bootstrapping for EKS\nDESCRIPTION: PowerShell script for Windows 2022 node bootstrapping. Calls the EKS bootstrap script with parameters for cluster name, API server endpoint, certificate authority, kubelet extra arguments for node labels, and cluster DNS IP.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Critical Workloads\nDESCRIPTION: YAML configuration for adding node affinity to critical cluster workloads, ensuring they run on static nodegroup instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cilium Startup Taint in Node Pool YAML\nDESCRIPTION: This snippet defines a NodePool that applies a startup taint used by Cilium networking to delay pod scheduling until Cilium is ready. This ensures network configurations are properly established before other pods are allowed to run.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Karpenter\nDESCRIPTION: This snippet shows how to configure a Karpenter NodePool with metadata labels, particularly for avoiding trunk ENI attachments which can cause delays in pod creation. It requires Karpenter and AWS EKS.\nKey parameter: `vpc.amazonaws.com/has-trunk-attached` set to `false` to prevent trunk attachment delays.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints\nDESCRIPTION: Pod configuration with topology spread constraints to distribute pods across zones, hosts, and capacity types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Alias Version\nDESCRIPTION: Example of pinning to a specific fixed version of AL2023 AMI using the alias selector term. This will match the AMI to the Kubernetes control plane version of the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- alias: al2023@v20240219\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback NodePools with Architecture Preferences\nDESCRIPTION: Example of setting up NodePools with different architecture preferences and weights for fallback scheduling scenarios.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Selectors in Karpenter\nDESCRIPTION: Example of a nodeSelector configuration in Karpenter that uses both a standard Kubernetes label (topology.kubernetes.io/zone) and a Karpenter-specific label (karpenter.sh/capacity-type) to target specific nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: Karpenter Controller Policy Definition\nDESCRIPTION: CloudFormation YAML defining the base structure of the Karpenter Controller Policy.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    PolicyDocument: !Sub |\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n```\n\n----------------------------------------\n\nTITLE: NodePool consolidationPolicy (v1beta1) Configuration - YAML\nDESCRIPTION: This snippet demonstrates the usage of `consolidationPolicy` and `consolidateAfter` in Karpenter v1beta1, replacing `ttlSecondsAfterEmpty`.  It configures the system to consolidate empty nodes after a specified duration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1beta1\\nkind: NodePool\\n...\\nspec:\\n  disruption:\\n    consolidationPolicy: WhenEmpty\\n    consolidateAfter: 2m\\n\"\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for Minimum Network Bandwidth\nDESCRIPTION: YAML snippet showing how to configure a NodePool to require nodes with at least 50 Gbps of network bandwidth using the 'Gt' operator comparing against the karpenter.k8s.aws/instance-network-bandwidth label value in the requirements section.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n    operator: Gt\n    values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped EC2 Instance Actions with Tags for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to create EC2 resources with specific tags. It requires the kubernetes.io/cluster tag, eks:eks-cluster-name tag, and karpenter.sh/nodepool tag to be set, ensuring Karpenter only creates instances for a single EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in EC2NodeClass\nDESCRIPTION: Example YAML configuration for specifying AMI selector terms in an EC2NodeClass. This snippet demonstrates how to select AMIs based on alias, which allows for dynamic selection of the latest or specific versions of AMIs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Defining Team-Specific Node Labels in Kubernetes\nDESCRIPTION: A Kubernetes Node manifest with team-specific labels. This configuration identifies nodes belonging to 'team-b' for targeted workload scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Karpenter Capacity Metrics Schema\nDESCRIPTION: Defines the metrics schema for monitoring Karpenter node and pod capacity, including resource allocation and utilization tracking.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Name**                                | **Type**  | **Labels**                                                                                             | **Description**\n|-----------------------------------------|-----------|--------------------------------------------------------------------------------------------------------|--------------------------------------------------------------\n| `karpenter_nodes_count`                 | Gauge     | `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase`                               | The number of nodes provisioned by Karpenter.\n| `karpenter_pods_count`                  | Gauge     | `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase`, `node_name`, `schedulable`   | The number of pods scheduled to Karpenter provisioned nodes.\n| `karpenter_nodes_allocatable`           | Gauge     | `resource_type`, `node_name`, `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase` | The resources allocatable by nodes\n| `karpenter_nodes_total_daemon_limits`   | Gauge     | `resource_type`, `node_name`, `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase` | The resources specified by DaemonSet pod limits\n| `karpenter_nodes_total_daemon_requests` | Gauge     | `resource_type`, `node_name`, `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase` | The resources requested by DaemonSet pods bound to nodes\n| `karpenter_nodes_total_pod_limits`      | Gauge     | `resource_type`, `node_name`, `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase` | The resources specified by non-DaemonSet pod limits\n| `karpenter_nodes_total_pod_requests`    | Gauge     | `resource_type`, `node_name`, `provisioner`, `zone`, `arch`, `capacity_type`, `instance_type`, `phase` | The resources requested by non-DaemonSet pods bound to nodes\n| `karpenter_provisioner_limit`           | Gauge     | `resource_type`, `provisioner_name`                                                                    | The specified limits on the provisioner\n| `karpenter_provisioner_usage`           | Gauge     | `resource_type`, `provisioner_name`                                                                    | The amount of resources that have been provisioned\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by Tag Key in EC2NodeClass\nDESCRIPTION: Example of selecting subnets by a specified tag key with wildcard value in EC2NodeClass. This selects all subnets that have the given cluster-specific discovery tag regardless of the tag value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\n----------------------------------------\n\nTITLE: Manual Node Deletion Commands in Bash\nDESCRIPTION: Commands for manually deleting Karpenter nodes and nodeclaims using kubectl, including options for deleting specific nodes, all nodes, or nodes filtered by nodepool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget\nDESCRIPTION: Example PodDisruptionBudget configuration to protect application availability during node deprovisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Tag in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs based on a specific tag using wildcards. This is useful for targeting AMIs that are tagged for a specific cluster or environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\n----------------------------------------\n\nTITLE: Blocking Disruption for a Node Using Annotation (Kubernetes, YAML)\nDESCRIPTION: This snippet shows how to configure a node in Kubernetes to avoid voluntary disruptions by applying the 'karpenter.sh/do-not-disrupt' annotation. This ensures that the specified node will remain available for its workloads without being affected by Karpenter's disruption policies.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\\nkind: Node\\nmetadata:\\n  annotations:\\n    karpenter.sh/do-not-disrupt: \\\"true\\\"\"\n```\n\n----------------------------------------\n\nTITLE: AL2 UserData Generation for EKS Bootstrapping\nDESCRIPTION: Generated UserData for Amazon Linux 2 AMI family. This script bootstraps the node by calling the EKS bootstrap script with cluster information, DNS configuration, and kubelet arguments including node labels and max pods setting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets Using Multiple Tags in YAML\nDESCRIPTION: Shows how to select subnets using multiple tags by providing individual tag terms in Karpenter's configuration. Each term specification follows a logical OR condition.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"my-subnet-1\"\n    - tags:\n        Name: \"my-subnet-2\"\n```\n\n----------------------------------------\n\nTITLE: Windows Server Node Configuration\nDESCRIPTION: PowerShell script for bootstrapping Windows Server 2019/2022 nodes with EKS configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for Instance Profile Actions\nDESCRIPTION: This JSON snippet provides permissions for the Karpenter controller to manage instance profiles, including adding, removing, and deleting roles, conditional upon specific tags indicating cluster ownership.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pod Configuration for Minimum Network Bandwidth\nDESCRIPTION: YAML snippet showing how to configure a pod to require nodes with at least 50 Gbps of network bandwidth using node affinity with the 'Gt' operator comparing against the karpenter.k8s.aws/instance-network-bandwidth label value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n              operator: Gt\n              values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Node Affinity Configuration for Zone Selection\nDESCRIPTION: Example showing node affinity rules to control pod scheduling across AWS availability zones using required scheduling rules. The configuration demonstrates including and excluding specific zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\"\n            operator: \"In\"\n            values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Store Policy in EC2NodeClass\nDESCRIPTION: Example of setting the instance store policy to RAID0 for utilizing instance-store volumes as node ephemeral-storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Configuring Eviction Thresholds in Karpenter AWS Provider\nDESCRIPTION: Example of configuring hard and soft eviction thresholds for kubelet in Karpenter's AWS provider. Includes various eviction signals for memory, filesystem, and process limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n  evictionSoft:\n    memory.available: 1Gi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n    imagefs.available: 10%\n    imagefs.inodesFree: 10%\n    pid.available: 10%\n```\n\n----------------------------------------\n\nTITLE: Team-Specific Deployment with Node Selector\nDESCRIPTION: This YAML snippet demonstrates how to configure a deployment to use a team-specific nodeSelector that works with the 'Exists' operator in the NodePool to isolate team workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Default Disruption Configuration in YAML\nDESCRIPTION: Example YAML configuration showing default disruption settings in a Karpenter NodePool, specifically the consolidation policy configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Creating Karpenter Controller IAM Role\nDESCRIPTION: Creates the IAM role for the Karpenter controller using IAM Roles for Service Accounts (IRSA) to provision new instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step04-controller-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Name with Wildcards in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs using wildcard patterns in the name field. This allows targeting AMIs that follow similar naming patterns without having to list each one individually.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*EKS*\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Interruption Queue Actions in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to interact with SQS interruption queues. It grants permissions to delete messages, get queue URLs, and receive messages from a specific SQS queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting GPU Resources in a Kubernetes Workload\nDESCRIPTION: Example of how to request NVIDIA GPU resources in a Kubernetes workload manifest. This configuration requests one NVIDIA GPU for the container, which will cause Karpenter to provision a node with an appropriate GPU.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Default NodePool Configuration for Pods Without Node Selectors Using YAML\nDESCRIPTION: This YAML snippet shows the configuration of a default NodePool with specific weights that will be applied to pods not specifying any node selectors or affinities. It provides a method for ensuring that these pods are scheduled on preferred node types without manual configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with EBS CSI Startup Taint\nDESCRIPTION: YAML configuration for NodePool showing how to configure startup taints for EBS CSI driver to prevent volume attachment race conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Trunk Attachment Label for Security Groups for Pods\nDESCRIPTION: Workaround for pods using Security Groups getting stuck in 'ContainerCreating' state by adding the vpc.amazonaws.com/has-trunk-attached label to the Karpenter NodePool specification. This resolves an interaction issue between Karpenter and the amazon-vpc-resource-controller when pods request vpc.amazonaws.com/pod-eni resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacity Type Prioritization in Karpenter\nDESCRIPTION: Example showing prioritization between on-demand instances (weight 50) and spot instances (no weight) to default to on-demand capacity for stateful workloads while allowing fallback to spot instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Default on-demand capacity type \napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: on-demand\nspec:\n  weight: 50\n  requirements:\n  - key: \"karpenter.sh/capacity-type\"\n    operator: In\n    values: [\"on-demand\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Spot capacity type for those that can use spot\napiVersion: karpenter.sh/v1alpha5\n  kind: Provisioner\n  metadata:\n    name: spot\n  spec:\n    requirements:\n    - key: \"karpenter.sh/capacity-type\"\n      operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NodePool and EC2NodeClass for Test Clusters\nDESCRIPTION: Example YAML configuration showing how to set up a NodePool and EC2NodeClass for test clusters that automatically use the latest AMIs in the AL2 family.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: default\n---\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  # The latest AMI in this family will be used\n  amiFamily: AL2\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Disruption Budget with YAML\nDESCRIPTION: The YAML configuration outlines a Pod Disruption Budget (PDB) ensuring a minimum availability of applications during node termination. It protects the labeled 'myapp' pods, requiring at least 4 to remain available. Kubernetes is required to implement PDBs, facilitating controlled pod evictions by setting disruption tolerance values such as 'minAvailable'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Requesting GPU Resources in Workload Manifest\nDESCRIPTION: Example showing how to request an NVIDIA GPU in a workload manifest. This resource requirement will cause Karpenter to schedule the pod onto a node with the appropriate GPU hardware. A device plugin daemonset must be deployed for the specific GPU type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            nvidia.com/gpu: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Team-Specific Node Label Configuration\nDESCRIPTION: This YAML snippet shows the resulting node label configuration that gets applied by Karpenter when a team-specific pod is scheduled using the 'Exists' operator in the NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for Discovering Provisionable Pods\nDESCRIPTION: JSON log entry showing when Karpenter discovers pods that need to be provisioned. This is the first step in the NodeClaim creation workflow.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"found provisionable pod(s)\",\n    \"commit\": \"490ef94\",\n    \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n    \"duration\": \"100.761702ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merged MIME Multipart UserData for AL2023\nDESCRIPTION: Shows how Karpenter handles a pre-formatted MIME multipart archive by preserving the user parts and appending Karpenter's generated NodeConfig part. This maintains both custom initializations and Karpenter configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_44\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Health Events Rule for Karpenter in CloudFormation\nDESCRIPTION: Defines an EventBridge rule to capture AWS Health Events and send them to the Karpenter interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: GPU NodePool Configuration with Taints\nDESCRIPTION: Example of configuring a NodePool specifically for GPU workloads with instance type requirements and GPU-specific taints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Computing NodeClaims\nDESCRIPTION: JSON log showing Karpenter computing the required NodeClaims to fit the detected pods that need scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n    \"controller\": \"provisioner\",\n    \"nodeclaims\": 1,\n    \"pods\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication for AWS ECR\nDESCRIPTION: Commands to configure Docker authentication for the newly created AWS ECR repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeClaim for Karpenter Nodes\nDESCRIPTION: Specifies Kubernetes node configurations including resource requirements, taints, labels, and kubelet settings. Contains status information about allocated resources and node conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1beta1-api.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodeClaim\nmetadata:\n  name: default\n  labels:\n    billing-team: my-team\n  annotations:\n    example.com/owner: \"my-team\"\nspec:\n  nodeClass:\n    name: default\n    kind: EC2NodeClass\n    apiVersion: karpenter.k8s.aws/v1beta1\n  taints:\n    - key: example.com/special-taint\n      effect: NoSchedule\n  startupTaints:\n    - key: example.com/another-taint\n      effect: NoSchedule\n  requirements:\n    - key: \"karpenter.k8s.aws/instance-category\"\n      operator: In\n      values: [\"c\", \"m\", \"r\"]\n  resources:\n    requests:\n      cpu: \"1\"\n      memory: \"100Mi\"\n  kubeletConfiguration:\n    clusterDNS: [\"10.0.1.100\"]\n    containerRuntime: containerd\n    systemReserved:\n      cpu: 100m\n      memory: 100Mi\n      ephemeral-storage: 1Gi\n    kubeReserved:\n      cpu: 200m\n      memory: 100Mi\n      ephemeral-storage: 3Gi\n    evictionHard:\n      memory.available: 5%\n      nodefs.available: 10%\n      nodefs.inodesFree: 10%\n    evictionSoft:\n      memory.available: 500Mi\n      nodefs.available: 15%\n      nodefs.inodesFree: 15%\n    evictionSoftGracePeriod:\n      memory.available: 1m\n      nodefs.available: 1m30s\n      nodefs.inodesFree: 2m\n    evictionMaxPodGracePeriod: 60\n    imageGCHighThresholdPercent: 85\n    imageGCLowThresholdPercent: 80\n    cpuCFSQuota: true\n    podsPerCore: 2\n    maxPods: 20\n```\n\n----------------------------------------\n\nTITLE: Converting Provisioner to NodePool\nDESCRIPTION: Uses the karpenter-convert tool to migrate Provisioner resources to the new NodePool format required by v1beta1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkarpenter-convert -f provisioner.yaml > nodepool.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Monitoring in Karpenter EC2NodeClass\nDESCRIPTION: Example of how to enable EC2 detailed monitoring for instances launched by Karpenter, which provides monitoring graphs with 1-minute periods in the EC2 console.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: TOML UserData for Bottlerocket in Karpenter\nDESCRIPTION: Example of TOML UserData for Bottlerocket instances, configuring Kubernetes eviction settings and custom labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_60\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection with Multiple Terms\nDESCRIPTION: YAML configuration example showing how to select security groups using multiple selector terms with tags, names, and IDs that are ORed together.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n  # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n  # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n```\n\n----------------------------------------\n\nTITLE: Merged AL2023 UserData with NodeConfig in MIME multi-part format\nDESCRIPTION: Example of how Karpenter merges user-provided NodeConfig with its generated configuration. Shows the resulting MIME multi-part archive with both the original NodeConfig and Karpenter's default values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for Node Initialization Completion in AWS\nDESCRIPTION: JSON log entry showing the full initialization of a node. This is the final step where the node is ready to accept workloads, with all resources properly registered.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:24:52.642Z\",\n  \"message\": \"initialized nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"7910m\",\n    \"ephemeral-storage\": \"18242267924\",\n    \"hugepages-2Mi\": \"0\",\n    \"memory\": \"14320468Ki\",\n    \"pods\": \"58\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Karpenter Node IAM Role in AWS\nDESCRIPTION: Creates the IAM role that will be used by nodes provisioned by Karpenter. This script creates the initial role structure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step02-node-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Eviction Grace Periods in Karpenter\nDESCRIPTION: This YAML configuration shows how to set grace periods for soft eviction thresholds in Karpenter. It specifies how long a threshold must be exceeded before eviction begins, and sets the maximum grace period for pod termination during evictions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioner with Launch Template Override\nDESCRIPTION: Example of a Karpenter provisioner using the launchTemplateOverride field for direct EC2 configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-v2.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Provisioner\nspec:\n  provider:\n    launchTemplateOverride:\n        BlockDeviceMappings:\n        - DeviceName: \"/dev/xvdb\"\n        Ebs:\n            Iops: 3000\n            VolumeSize: 30\n            VolumeType: gp3\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket UserData Configuration with TOML\nDESCRIPTION: Example of user-provided Bottlerocket UserData in TOML format, which configures custom eviction settings and node labels. Bottlerocket relies on UserData being defined as TOML.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"15%\"\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/provisioner-name' = 'my-prov'\n'foo' = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Savings Plans and Reserved Instances\nDESCRIPTION: YAML configuration showing how to prioritize specific instance types that match Savings Plans or Reserved Instances using NodePool weights and limits. The example sets a higher weight (50) for c4.large instances with a CPU limit of 100.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Merged AL2023 UserData with MIME Multi-part format\nDESCRIPTION: Example of how Karpenter merges a pre-formatted MIME multi-part UserData with its generated NodeConfig. Shows the complete merged structure with all sections preserved.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_50\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Creating NodePools and Deployment with Topology Spread Constraints in Kubernetes\nDESCRIPTION: Examples of NodePool configurations with zonal constraints and a Deployment with topology spread constraints that may cause provisioning issues when the pod constraints don't match the NodePool constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Karpenter Cluster Resources\nDESCRIPTION: This script is used to remove all demo infrastructure from your AWS account, ensuring that there are no leftover resources after experiments with Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step17-cleanup.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Disruption Settings in YAML\nDESCRIPTION: Example YAML configuration for setting up NodePool disruption budgets with drift control. Shows how to configure different disruption policies based on schedule and business hours.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n\n----------------------------------------\n\nTITLE: Viewing Pod Event Errors for Failed Volume Attachment\nDESCRIPTION: This bash snippet shows the output of a 'kubectl describe pod' command, displaying errors related to failed volume attachment. These errors may occur when attempting to schedule a large number of pods with PersistentVolumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings in EC2NodeClass\nDESCRIPTION: Example of configuring block device mappings in an EC2NodeClass specification. This snippet demonstrates how to set up EBS volumes with custom properties such as size, type, and encryption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Kubelet Properties (YAML)\nDESCRIPTION: Example of configuring additional kubelet properties by updating the kubelet-config.json file in the user data of an EC2NodeClass specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: kubelet-config-example\nspec:\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    echo \"$(jq '.kubeAPIQPS=50' /etc/kubernetes/kubelet/kubelet-config.json)\" > /etc/kubernetes/kubelet/kubelet-config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for Bottlerocket AMI in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Example of user data configuration for Bottlerocket AMI. This snippet sets custom Kubernetes settings such as API QPS and shutdown grace periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Definition for Karpenter Controller in YAML\nDESCRIPTION: Begins the definition of an IAM policy that grants Karpenter controller permissions to manage EC2 instances and related resources. This policy is attached to Karpenter's service account.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    # The PolicyDocument must be in JSON string format because we use a StringEquals condition that uses an interpolated\n    # value in one of its key parameters which isn't natively supported by CloudFormation\n    PolicyDocument: !Sub |\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n```\n\n----------------------------------------\n\nTITLE: Pod Scheduling Based on NVME Storage Existence\nDESCRIPTION: This YAML snippet shows how to configure pod affinity to require nodes with NVME disk storage, using the `Exists` operator with Karpenter's well-known labels to identify instances with NVME storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n           - key: \"karpenter.k8s.aws/instance-local-nvme\"\n             operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups with Multiple Tag Terms in Karpenter EC2NodeClass\nDESCRIPTION: Selects security groups using multiple tag terms that are ORed together. This allows selecting different resources that match different criteria, effectively creating a union of multiple selection sets.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements for NVME Storage\nDESCRIPTION: Example showing how to configure a NodePool to only use instances with NVME local storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Security Group Information in Karpenter EC2NodeClass Status\nDESCRIPTION: Example of the status.securityGroups field showing the resolved security group IDs and names that were selected by the securityGroupSelectorTerms criteria.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Node Issues Using Kubectl and AWS CLI\nDESCRIPTION: Commands for debugging node initialization and readiness issues in Karpenter-managed nodes using kubectl and AWS Systems Manager.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by Name and Tag\nDESCRIPTION: YAML example showing how to select subnets by Name and additional tags where all criteria must match.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: my-subnet\n        MyTag: '' # matches all resources with the tag\n```\n\n----------------------------------------\n\nTITLE: Creating NodePools for Spot and On-Demand Instances in Karpenter\nDESCRIPTION: These YAML snippets define two NodePool resources—one for spot instances and another for on-demand instances. Each NodePool specifies unique requirements, allowing for controlled distribution of nodes, based on the 'capacity-spread' label that helps achieve a desired workload ratio.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Controller Logs in Bash\nDESCRIPTION: Bash commands to view Karpenter controller logs for troubleshooting node creation issues. These commands help identify and diagnose errors in the node launch process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodePool Spec with minValues and Multiple Operators\nDESCRIPTION: This YAML snippet demonstrates using `minValues` with multiple operators for the same requirement key in a Karpenter NodePool. The scheduler considers the max of all the `minValues` for that requirement when scheduling pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: karpenter.k8s.aws/instance-family\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 3\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterControllerPolicy in CloudFormation (YAML)\nDESCRIPTION: This YAML snippet defines an IAM Managed Policy, KarpenterControllerPolicy, which grants permissions to the Karpenter controller. This policy is later attached to the service account to enable the controller to manage EC2 instances and other AWS resources. The PolicyDocument defines specific resource access and actions allowed, scoped to the AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"KarpenterControllerPolicy:\\n  Type: AWS::IAM::ManagedPolicy\\n  Properties:\\n    ManagedPolicyName: !Sub \\\"KarpenterControllerPolicy-${ClusterName}\\\"\\n    # The PolicyDocument must be in JSON string format because we use a StringEquals condition that uses an interpolated\\n    # value in one of its key parameters which isn't natively supported by CloudFormation\\n    PolicyDocument: !Sub |\\n      {\\n        \\\"Version\\\": \\\"2012-10-17\\\",\\n        \\\"Statement\\\": [\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Budgets in Karpenter NodePool\nDESCRIPTION: YAML configuration for setting up Node Disruption Budgets in Karpenter. This shows how to limit disruptions by percentage, absolute number, and schedule with time-based restrictions for controlled rollout of node changes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 9 * * sat-sun\"\n    duration: 24h\n  - nodes: \"0\"\n    schedule: \"0 17 * * mon-fri\"\n    duration: 16h\n    reasons:\n      - Drifted\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Script UserData for AL2023 in Karpenter\nDESCRIPTION: Example of passing a bash script as UserData for AL2023 instances. This simple script prints a hello message during node initialization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\necho \"Hello, AL2023!\"\n```\n\n----------------------------------------\n\nTITLE: Example of Team-Specific Node Labels\nDESCRIPTION: Example showing how node labels are set by Karpenter to match the team-specific node selectors from pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD Helm Chart\nDESCRIPTION: This command upgrades or installs the Karpenter CRD Helm chart. It specifies the namespace, version, and chart repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version vx.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for KMS Customer Managed Key\nDESCRIPTION: This JSON snippet showcases an example IAM policy applied to a KMS CMK to allow EBS operations across authorized principals in an AWS account. Principals can perform actions like encrypt, decrypt, and describe the key on EC2-linked operations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AMI Selection with Version Pinning\nDESCRIPTION: Example of pinning to a specific AMI version using amiSelectorTerms with an alias to avoid automatic updates to latest versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME UserData for AL2023 in Karpenter AWS Provider\nDESCRIPTION: Example of passed-in MIME UserData for AL2023 and how it's merged with Karpenter-generated NodeConfig. The custom UserData includes both a bash script and NodeConfig, while Karpenter adds additional cluster and kubelet configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\n```\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by Name and Tags in YAML\nDESCRIPTION: This configuration selects subnets by matching both a specific name and a tag, where the tag matches all resources possessing it. This is a critical part of ensuring criteria-matching subnet selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: my-subnet\n        MyTag: '' # matches all resources with the tag\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags in EC2NodeClass\nDESCRIPTION: YAML configuration example showing how to add custom tags to resources created by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: AL2 SSH Access UserData Configuration\nDESCRIPTION: Example of configuring SSH access via UserData for Amazon Linux 2 nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Instance Rebalance Recommendation Rule for Karpenter in YAML\nDESCRIPTION: CloudFormation template defining an EventBridge rule that captures EC2 Instance Rebalance Recommendation events and sends them to Karpenter's interruption queue. This allows Karpenter to respond to signals indicating that spot instances are at heightened risk of interruption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption on a NodePool in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a NodePool to disable disruption for all nodes launched by it. It sets the disruption budget to zero nodes, preventing any voluntary disruption of these nodes by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    budgets:\n      - nodes: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Windows2022 Node in PowerShell\nDESCRIPTION: Executes a similar script to the Windows2019 version but applicable to Windows Server 2022, setting up a node for EKS. Designed for environments using Windows 2022 with predefined setup scripts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Kubelet Properties in User Data\nDESCRIPTION: Example of configuring additional kubelet properties by modifying the kubelet-config.json file in the user data. This snippet demonstrates how to set the kubeAPIQPS property.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: kubelet-config-example\nspec:\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    echo \"$(jq '.kubeAPIQPS=50' /etc/kubernetes/kubelet/kubelet-config.json)\" > /etc/kubernetes/kubelet/kubelet-config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Private Cluster Configuration in YAML\nDESCRIPTION: YAML configuration to enable private cluster settings for EKS deployment\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprivateCluster:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Provisioning IAM Role for Karpenter Instance Profile\nDESCRIPTION: This snippet demonstrates how to create an IAM instance profile for Karpenter, allowing Kubernetes to utilize this profile for managing instance roles.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\naws iam add-role-to-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" --role-name \"KarpenterNodeRole-${CLUSTER_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Amazon EKS Optimized AMI for Windows Server\nDESCRIPTION: This YAML snippet demonstrates how to configure an `amiSelector` for using Amazon EKS optimized AMIs with Windows Server 2022 Full. It shows how to specify the desired AMI by referencing its name, crucial for ensuring compatibility and meeting specific workload requirements, especially for Kubernetes 1.31.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - name: Windows_Server-2022-English-Full-EKS_Optimized-1.31*\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Labels in Karpenter NodePool Requirements\nDESCRIPTION: Example of how to specify a user-defined label in Karpenter NodePool requirements using the Exists operator. This is necessary for Karpenter to recognize and schedule pods with custom labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for Windows AMI Families\nDESCRIPTION: Default block device mapping configuration for Windows 2019 and Windows 2022 AMI families in EC2NodeClass. This configuration is used when no overrides are specified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/sda1\n      ebs:\n        volumeSize: 50Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection Logic - YAML\nDESCRIPTION: This snippet illustrates how to define complex selection criteria for security groups using both tags and names. It combines multiple conditions within a single term and across multiple terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n\n```\n\n----------------------------------------\n\nTITLE: Ubuntu NodeClass Configuration in YAML\nDESCRIPTION: Example EC2NodeClass configuration for Ubuntu nodes using AL2 AMI family with custom block device mappings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket Device Ownership Configuration\nDESCRIPTION: TOML configuration for enabling device ownership in Bottlerocket v1.30.0+ using security context. This allows containers to take ownership of devices allocated to pods via device-plugins.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_53\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\ndevice-ownership-from-security-context = true\n```\n\n----------------------------------------\n\nTITLE: Cilium Startup Configuration with StartupTaints\nDESCRIPTION: NodePool configuration implementing Cilium-specific startup taints to ensure proper network configuration before pod scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Storage Topology in AWS EBS\nDESCRIPTION: Example configuration for setting up persistent volume storage with EBS in specific AWS availability zones using StorageClass, Pod and PersistentVolumeClaim definitions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Tag Key - YAML\nDESCRIPTION: This snippet shows how to filter security groups based solely on a specified tag key, allowing for broad resource selection using metadata.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Persistent Volume Claim and Storage Class in YAML\nDESCRIPTION: This snippet describes a Kubernetes Pod, StorageClass, and PersistentVolumeClaim configuration in YAML for managing storage in specific zones. It defines the binding mode and allowed topologies for storage resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Final Merged UserData Format by Karpenter\nDESCRIPTION: Example of the final MIME multi-part UserData after Karpenter merges custom UserData with its bootstrap script. Shows how Karpenter appends the EKS bootstrap command with required cluster parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--container-runtime containerd \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selectors with Karpenter AWS Provider\nDESCRIPTION: Example of a nodeSelector that uses both well-known Kubernetes topology labels and Karpenter-specific capacity type labels to target specific nodes for pod placement.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by IDs - YAML\nDESCRIPTION: This snippet selects specific subnets directly by their unique identifiers. It's crucial for pinpointing resources when exact matches are needed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - id: \"subnet-09fa4a0a8f233a921\"\n    - id: \"subnet-0471ca205b8a129ae\"\n\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for Network Bandwidth Requirements\nDESCRIPTION: This YAML snippet demonstrates how to configure a NodePool to require instances with at least 50 Gbps of network bandwidth using Karpenter's well-known labels with the `Gt` operator.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n    operator: Gt\n    values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Tags in YAML\nDESCRIPTION: Example of adding custom tags to EC2 instances and related resources in Karpenter EC2NodeClass configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: EC2 Launch Template Access Policy\nDESCRIPTION: JSON policy defining launch template access permissions for Karpenter with specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2LaunchTemplateAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with EBS Startup Taint\nDESCRIPTION: This YAML snippet demonstrates how to add a startup taint for the EBS CSI driver to a Karpenter NodePool. This configuration helps prevent race conditions between the scheduler and CSINode during node registration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for Windows AMI Families (YAML)\nDESCRIPTION: Default block device mapping configuration for Windows 2019 and Windows 2022 AMI families in Karpenter. It sets a 50Gi gp3 volume that is encrypted by default.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/sda1\n      ebs:\n        volumeSize: 50Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Deprovisioning TTL Reference\nDESCRIPTION: Code reference showing the default timeout value for replacement node operations in the consolidation controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprovisioning.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npkg/controllers/consolidation/controller.go#L70\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute Resource Limits for Karpenter in YAML\nDESCRIPTION: This YAML snippet shows how to set absolute resource limits for Karpenter. It defines maximum limits for CPU, memory, and GPU resources that Karpenter can provision.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/limits.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  limits:\n    resources:\n      cpu: 1000\n      memory: 1000Gi\n      nvidia.com/gpu: 1\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Instance Profile Actions for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to perform actions on instance profiles. It restricts actions to profiles associated with the specified cluster and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Tag Terms for Security Groups in YAML\nDESCRIPTION: Describes how to select security groups using multiple tag conditions, each condition forming separate selection terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped EC2 Instance Access Actions (JSON)\nDESCRIPTION: This JSON snippet defines a policy statement that allows the Karpenter controller to read specific EC2 resources (images, snapshots, security groups, and subnets) within the specified AWS region. This permission is required for the controller to launch instances. The actions `ec2:RunInstances` and `ec2:CreateFleet` are permitted on these resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"Sid\\\": \\\"AllowScopedEC2InstanceAccessActions\\\",\\n  \\\"Effect\\\": \\\"Allow\\\",\\n  \\\"Resource\\\": [\\n    \\\"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\\\",\\n    \\\"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\\\",\\n    \\\"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\\\",\\n    \\\"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\\\"\\n  ],\\n  \\\"Action\\\": [\\n    \\\"ec2:RunInstances\\\",\\n    \\\"ec2:CreateFleet\\\"\\n  ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption for NodePool in Karpenter - YAML\nDESCRIPTION: The following YAML snippet is used to set the disruption budget for a NodePool to zero, meaning none of the nodes in this pool will be subject to voluntary disruption. This is an essential configuration for ensuring maximum availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1\\nkind: NodePool\\nmetadata:\\n  name: default\\nspec:\\n  disruption:\\n    budgets:\\n      - nodes: \\\"0\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Windows 2019 PowerShell Bootstrapping for EKS\nDESCRIPTION: PowerShell script for Windows 2019 node bootstrapping. Calls the EKS bootstrap script with parameters for cluster name, API server endpoint, certificate authority, kubelet extra arguments for node labels, and cluster DNS IP.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Update Karpenter CRDs (v0.14.0)\nDESCRIPTION: This command updates the Karpenter Provisioner and AWSNodeTemplate CRDs to the versions required by `0.14.0`. It's necessary to apply these updates to use new features and parameters introduced in the release. The command uses `kubectl replace` to update the CRDs directly from the specified URLs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining EC2 Instance State-change Notification Rule in YAML\nDESCRIPTION: This YAML snippet sets up an AWS::Events::Rule resource to capture EC2 Instance State-change Notification signals and direct them to the Karpenter interruption queue. It uses an event pattern to filter for specific event types from the EC2 source.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Tags for AWS Karpenter Resources (YAML)\nDESCRIPTION: Example of specifying additional tags for resources created by Karpenter, including EC2 Instances, EBS volumes, and Launch Templates.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: Setting Node Affinity for Critical Workloads\nDESCRIPTION: YAML configuration for adding node affinity to critical cluster components like CoreDNS or metrics-server to ensure they run on the static nodegroup instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: AMI Selection by Name Tag in Karpenter\nDESCRIPTION: This YAML snippet configures AMI selection using the 'Name' tag in Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n\"  amiSelectorTerms:\\n    - tags:\\n        Name: my-ami\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket UserData in Karpenter EC2NodeClass\nDESCRIPTION: Example of providing custom UserData for Bottlerocket instances provisioned by Karpenter. This allows configuring Bottlerocket-specific settings like kubelet QPS and shutdown grace periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: User Data Script for Bootstraping Nodes with EKS on AL2\nDESCRIPTION: This Bash script is part of the user data that bootstraps an EKS cluster on nodes using the AL2 AMI. It executes the EKS bootstrap script with necessary parameters to register the node with the EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Pod Disruption Budget Example\nDESCRIPTION: Defines a PodDisruptionBudget that ensures at least 4 pods with the label `app: myapp` are available during disruptions like node termination.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n```\n\n----------------------------------------\n\nTITLE: Critical Workload Node Affinity Configuration\nDESCRIPTION: YAML configuration for setting node affinity on critical cluster workloads like CoreDNS and metrics-server\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: Merged Bottlerocket UserData Configuration\nDESCRIPTION: Example of the final Bottlerocket UserData after Karpenter merges its required settings with user-provided configuration. Karpenter overrides essential fields while preserving custom settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://7EBA…'\ncluster-certificate = 'LS0tLS…'\ncluster-name = 'my-cluster'\nsettings.kubernetes.api-server = 'apiServerEndpoint'\n\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"15%\"\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/provisioner-name' = 'default'\n'foo' = 'bar'\n```\n\n----------------------------------------\n\nTITLE: Wildcard Security Group Selection by Name in YAML\nDESCRIPTION: This configuration demonstrates the use of wildcards in selecting AWS security groups by name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Private Cluster for Karpenter using Helm\nDESCRIPTION: This snippet shows how to enable the private cluster feature in Karpenter by modifying the ClusterConfig file to set the 'privateCluster.enabled' parameter to true.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nprivateCluster:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Topology Spread Constraints for Instance Type Distribution\nDESCRIPTION: A Kubernetes topology spread constraint configuration to distribute workloads evenly across capacity-spread labels. This enables maintaining a specific ratio of spot to on-demand instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Cluster Tag in Karpenter EC2NodeClass\nDESCRIPTION: Selects security groups assigned to a specific Kubernetes cluster using the cluster ownership tag. This pattern is useful for targeting security groups that were automatically created by the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Store Policy for RAID0 (YAML)\nDESCRIPTION: Example of configuring the instanceStorePolicy to use RAID0 for instance-store volumes in an EC2NodeClass specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection by Name with Wildcard in Karpenter\nDESCRIPTION: This YAML snippet selects security groups whose names match a wildcard pattern.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  securityGroupSelectorTerms:\\n    - name: \\\"*Public*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cilium Startup Taint for Node Initialization\nDESCRIPTION: Set a startup taint for nodes to allow Cilium networking configuration before scheduling other pods\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags to Karpenter-managed EC2 Resources\nDESCRIPTION: Example of adding additional custom tags to EC2 resources created by Karpenter. These tags will be merged with the default tags that Karpenter applies to all resources it manages.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: Custom User Data Merge Example (Bash)\nDESCRIPTION: Example of how Karpenter merges custom user data (in bash format) with its default bootstrap script for AL2 AMI family. This demonstrates the MIME multipart structure used for merging.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (bash)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Tag-Based Discovery\nDESCRIPTION: YAML configuration example showing how to select subnets using tag-based discovery with multiple selection terms that are ORed together.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for NVME Disk Requirements\nDESCRIPTION: YAML snippet showing how to configure a NodePool to require nodes with NVME local storage using the 'Exists' operator on the karpenter.k8s.aws/instance-local-nvme label in the requirements section.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Kubelet Properties in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Example of setting additional kubelet configuration properties by updating the kubelet-config.json file in user data.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: kubelet-config-example\nspec:\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    echo \"$(jq '.kubeAPIQPS=50' /etc/kubernetes/kubelet/kubelet-config.json)\" > /etc/kubernetes/kubelet/kubelet-config.json\n```\n\n----------------------------------------\n\nTITLE: Creating Default Karpenter NodePool\nDESCRIPTION: Creates a default NodePool configuration for Karpenter to know what types of nodes to provision for unscheduled workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step10-create-nodepool.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements for Minimum NVME Storage\nDESCRIPTION: Example showing how to configure a NodePool to only use instances with at least 100GB of NVME local storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: Gt\n    values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Default Node Configuration\nDESCRIPTION: YAML configuration demonstrating how to set default node configurations using weighted NodePools. The example prioritizes AMD64 architecture with a higher weight (50) while providing a separate NodePool for ARM64 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMIs with Tags in EC2NodeClass Status with YAML\nDESCRIPTION: This example shows how AMI selector terms using tags are specified in the spec and how the resolved AMI IDs, names, and requirements appear in the status field. It also shows how deprecated AMIs are flagged.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Windows ServiceCIDR Configuration\nDESCRIPTION: YAML configuration example for setting Windows ServiceCIDR through UserData.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  userData: |\n    $global:EKSCluster = Get-EKSCluster -Name my-cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Soft Eviction Grace Periods in YAML\nDESCRIPTION: Specifies soft eviction grace periods for different resource signals, allowing pods to terminate gracefully when system resources are constrained. Includes maximum pod grace period configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass for Ubuntu AMIFamily in YAML\nDESCRIPTION: Sets up an `EC2NodeClass` with a specific `amiFamily`, `blockDeviceMappings` and `amiSelectorTerms`. Focused on managing disk settings for nodes using Amazon Linux 2 (AL2).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Node for Team-Based Scheduling with Karpenter\nDESCRIPTION: This YAML snippet defines a Kubernetes Node with a label for 'Team B'. This label is used by Karpenter for team-based node selection and scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Deletion for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to terminate EC2 instances and delete launch templates. It ensures Karpenter can only delete resources associated with its cluster and nodepool by checking for specific tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pods Requiring NVME Storage with Node Affinity\nDESCRIPTION: Example showing how to use node affinity to require nodes with NVME local storage to be provisioned for specific pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n           - key: \"karpenter.k8s.aws/instance-local-nvme\"\n             operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Trunk Attachment Label for Security Groups\nDESCRIPTION: YAML configuration for Karpenter NodePool that adds the vpc.amazonaws.com/has-trunk-attached label to work around pod creation delays when using Security Groups for Pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Multiple Tag Terms\nDESCRIPTION: YAML example showing how to select subnets using multiple separate tag terms that are ORed together.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"my-subnet-1\"\n    - tags:\n        Name: \"my-subnet-2\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for AWS Instance Launch\nDESCRIPTION: JSON log entry showing the successful launch of an AWS EC2 instance for a NodeClaim. This includes details about the instance type, zone, capacity type, and allocatable resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:19.028Z\",\n    \"message\": \"launched nodeclaim\",\n    \"controller\": \"nodeclaim.lifecycle\",\n    \"NodeClaim\": {\n        \"name\": \"default-sfpsl\"\n    },\n    \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n    \"instance-type\": \"c3.2xlarge\",\n    \"zone\": \"us-west-2b\",\n    \"capacity-type\": \"spot\",\n    \"allocatable\": {\n      \"cpu\": \"7910m\",\n      \"ephemeral-storage\": \"17Gi\",\n      \"memory\": \"13215Mi\",\n      \"pods\": \"58\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Topology Spread Constraints\nDESCRIPTION: Configuration for topology spread constraints to ensure even distribution of workloads across capacity spread labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in Karpenter\nDESCRIPTION: YAML configuration showing how to use amiSelectorTerms to select AMIs based on tags, name, ID, or SSM parameters. The selection logic combines AND conditions within terms and OR conditions between terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  # Select on any AMI that has both the `karpenter.sh/discovery: ${CLUSTER_NAME}`\n  # AND `environment: test` tags OR any AMI with the name `my-ami` OR an AMI with\n  # ID `ami-123` OR an AMI with ID matching the value of my-custom-parameter\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-ami\n  - id: ami-123\n  - ssmParameter: my-custom-parameter # ssm parameter name or ARN\n  # Select EKS optimized AL2023 AMIs with version `v20240807`. This term is mutually\n  # exclusive and can't be specified with other terms.\n  # - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Specifying Role for Karpenter EC2NodeClass - YAML\nDESCRIPTION: This snippet sets the role field for Karpenter to define which IAM role the EC2 nodes should assume. It is mandatory to provide either a role or an instanceProfile.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n\n```\n\n----------------------------------------\n\nTITLE: Deployment Spec with TopologySpreadConstraint\nDESCRIPTION: Defines a Deployment with a topologySpreadConstraint that attempts to spread pods across availability zones. It includes a nodeSelector to target the zone-specific NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n```\n\n----------------------------------------\n\nTITLE: Checking NodeClaim Status Condition\nDESCRIPTION: Bash command to check NodeClaim status conditions for resource allocation consistency.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ kg nodeclaim $NODECLAIM_NAME -o jsonpath='{.status.conditions[?(@.type==\"ConsistentStateFound\")]}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node Role Using CloudFormation - YAML\nDESCRIPTION: This snippet defines the KarpenterNodeRole, which is an IAM role for nodes created by Karpenter. It assigns necessary AWS managed policies to ensure the nodes can interact with AWS services like EC2 and EKS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: MIME Multi-part UserData for AL2023\nDESCRIPTION: Example of a pre-formatted MIME multi-part UserData containing both a bash script and NodeConfig. This demonstrates how to create a complex UserData with multiple sections.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_49\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool Requirements with Multiple Operators in YAML\nDESCRIPTION: This YAML snippet shows how to configure NodePool requirements with multiple operators for the same requirement key. It demonstrates using both 'Exists' and 'In' operators for instance families.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: karpenter.k8s.aws/instance-family\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 3\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Logging with Zap\nDESCRIPTION: Instructions for customizing Karpenter's log output using uber-go/zap logger configuration. The configuration options are defined through a ConfigMap and support all standard zap.Config parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap-logging.yaml\n```\n\n----------------------------------------\n\nTITLE: Security Group by Cluster Assignment in YAML\nDESCRIPTION: Shows configuration to select security groups assigned to a specified cluster by using tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n```\n\n----------------------------------------\n\nTITLE: Deprovisioning Action Types Enumeration\nDESCRIPTION: Defines the complete set of possible deprovisioning actions that can be taken by the controller. Actions are prefixed with either 'delete' or 'replace' depending on whether a new node is provisioned, and suffixed with the reason (consolidation, expiration, or drift).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprovisioning.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- deleteConsolidation\n- replaceConsolidation\n- deleteExpiration\n- replaceExpiration\n- deleteDrift\n- replaceDrift\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Script for Windows2019 Node Configuration\nDESCRIPTION: This PowerShell script snippet starts the EKS Bootstrap process for Windows2019 AMIFamily. It sets the EKS cluster name, API server endpoint, Base64 encoded Cluster CA, and additional kubelet arguments, customizing node setup as needed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n[powershell]\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n[/powershell]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role for AWS Karpenter Nodes (YAML)\nDESCRIPTION: Example of specifying an IAM role for Karpenter-managed nodes using the 'role' field in the EC2NodeClass configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Controller Policy for v1beta1 in AWS\nDESCRIPTION: The v1beta1 version introduces changes to the IAM permissions assigned to the Karpenter controller policy. This JSON snippet shows an example of the required controller permissions for v1beta1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/website/content/en/preview/upgrading/v1beta1-controller-policy.json\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by Name and Tag in Karpenter\nDESCRIPTION: This YAML snippet shows how to select subnets by both name and tag in Karpenter.  All criteria within the same term must match for the subnet to be selected.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  subnetSelectorTerms:\\n    - tags:\\n        Name: my-subnet\\n        MyTag: '' # matches all resources with the tag\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for Bottlerocket AMI in EC2NodeClass\nDESCRIPTION: Example of specifying custom user data for Bottlerocket AMI, including Kubernetes settings and eviction policies.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cilium Startup Taints in Karpenter\nDESCRIPTION: Demonstrates how to configure startup taints for Cilium networking setup, allowing Cilium to configure networking before other pods start.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection in AWS Karpenter\nDESCRIPTION: Examples of security group selection using tags, names, and IDs with support for multiple terms and wildcards.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n```\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_VPC_ID=\"$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.resourcesVpcConfig.vpcId --output text)\"\n\naws ec2 describe-security-groups --filters Name=vpc-id,Values=$CLUSTER_VPC_ID Name=tag-key,Values=kubernetes.io/cluster/$CLUSTER_NAME --query 'SecurityGroups[].[GroupName]' --output text\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*' # matches all resources with the tag\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n```\n\n----------------------------------------\n\nTITLE: Security Group Selector Terms Configuration in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure security group selector terms in a Karpenter `EC2NodeClass`. It demonstrates selecting security groups based on tags, names, and IDs, using an OR condition between terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"securityGroupSelectorTerms:\\n  # Select on any security group that has both the \\\"karpenter.sh/discovery: ${CLUSTER_NAME}\\\" tag\\n  # AND the \\\"environment: test\\\" tag OR any security group with the \\\"my-security-group\\\" name\\n  # OR any security group with ID \\\"sg-063d7acfb4b06c82c\\\"\\n  - tags:\\n      karpenter.sh/discovery: \\\"${CLUSTER_NAME}\\\"\\n      environment: test\\n  - name: my-security-group\\n  - id: sg-063d7acfb4b06c82c\"\n```\n\n----------------------------------------\n\nTITLE: Using Exists Operator for Workload Segregation in NodePools\nDESCRIPTION: Example showing how to use the Exists operator in NodePool requirements to enable workload segregation based on custom labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - AWS Node Initialization\nDESCRIPTION: JSON log example showing the successful initialization of an AWS node with its finalized resource allocations, completing the NodeClaim lifecycle.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:24:52.642Z\",\n  \"message\": \"initialized nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"7910m\",\n    \"ephemeral-storage\": \"18242267924\",\n    \"hugepages-2Mi\": \"0\",\n    \"memory\": \"14320468Ki\",\n    \"pods\": \"58\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for AL2 AMI in EC2NodeClass\nDESCRIPTION: Example of specifying custom user data for AL2 AMI, including SSH key configuration for remote login.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Provisioner ttlSecondsAfterEmpty (v1alpha5) Configuration - YAML\nDESCRIPTION: This snippet shows the `spec.ttlSecondsAfterEmpty` field within a Karpenter Provisioner in v1alpha5.  This field is replaced by `consolidationPolicy` and `consolidateAfter` in v1beta1, providing more explicit control over consolidation behavior.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1alpha5\\nkind: Provisioner\\n...\\nspec:\\n  ttlSecondsAfterEmpty: 120\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback NodePools for Default Node Configuration\nDESCRIPTION: This YAML configuration shows how to set up fallback NodePools in Karpenter to define default node configurations for pods without specific node selectors or affinities. It includes weighted NodePools for different architectures.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Requesting Pod ENI Resources for Security Groups for Pods\nDESCRIPTION: Example of requesting AWS VPC CNI Plugin's Pod ENI resources in a deployment manifest. This configuration reserves one Elastic Network Interface for the pod, commonly used with Security Groups for Pods feature.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter logs with Stern\nDESCRIPTION: Uses Stern to tail Karpenter logs with enhanced formatting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Merging User Data for AL2 AMI in EC2NodeClass for Karpenter on AWS (MIME)\nDESCRIPTION: Example of how Karpenter merges custom user data with default bootstrap script for Amazon Linux 2 AMI when provided in MIME format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (mime)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Security Group Tags - YAML\nDESCRIPTION: This snippet enables the selection of security groups based on multiple tag matches, providing flexibility in resource allocation and organization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        Name: \"my-security-group-1\"\n    - tags:\n        Name: \"my-security-group-2\"\n\n```\n\n----------------------------------------\n\nTITLE: Default Tags Added by Karpenter\nDESCRIPTION: YAML example showing the default tags Karpenter adds to all resources it creates, including EC2 instances and volumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nName: <node-name>\nkarpenter.sh/nodeclaim: <nodeclaim-name>\nkarpenter.sh/nodepool: <nodepool-name>\nkarpenter.k8s.aws/ec2nodeclass: <ec2nodeclass-name>\nkubernetes.io/cluster/<cluster-name>: owned\neks:eks-cluster-name: <cluster-name>\n```\n\n----------------------------------------\n\nTITLE: Allowing SSM Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to read SSM parameters generated by AWS services in the current region. It grants permission to perform the ssm:GetParameter action on specific SSM parameter resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node Affinity Configuration for Zone Selection in Kubernetes\nDESCRIPTION: Example of using requiredDuringSchedulingIgnoredDuringExecution with node affinity to constrain pods to specific AWS zones. This configuration requires pods to run in us-west-2b by using two matching expressions with 'In' operators.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n           - key: \"topology.kubernetes.io/zone\"\n             operator: \"In\"\n             values: [\"us-west-2a\", \"us-west-2b\"]\n           - key: \"topology.kubernetes.io/zone\"\n             operator: \"In\"\n             values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Getting NodePool Status with Kubectl\nDESCRIPTION: This shell command retrieves the status of a NodePool using kubectl and formats the output as a JSON path expression, showing the current resource consumption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: Defining In-flight Limits for Karpenter in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define an in-flight limit for Karpenter. It sets a limit on the percentage of unready nodes allowed before scaling is halted.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/limits.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  limits:\n    unready: 20% # StringOrInt\n```\n\n----------------------------------------\n\nTITLE: AL2023 Default Block Device Mapping\nDESCRIPTION: Default block device mapping configuration for Amazon Linux 2023 AMI family.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Adding Zonal Constraints to Pod Spec in YAML\nDESCRIPTION: YAML configuration snippet showing how to add zonal constraints to a pod spec to match the requirements of a NodePool. This helps resolve issues with topology spread constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n\n----------------------------------------\n\nTITLE: Example Log: Initializing NodeClaim\nDESCRIPTION: This JSON log entry shows that the NodeClaim has been successfully initialized and the node is ready.  It details the NodeClaim name, provider ID, the Kubernetes node name, and the allocatable resources on the node (CPU, ephemeral storage, hugepages, memory, and pods).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"level\": \"INFO\",\n     \"time\": \"2024-06-22T02:24:52.642Z\",\n     \"message\": \"initialized nodeclaim\",\n     \"controller\": \"nodeclaim.lifecycle\",\n     \"NodeClaim\": {\n       \"name\": \"default-sfpsl\"\n     },\n     \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n     \"Node\": {\n       \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n     },\n     \"allocatable\": {\n       \"cpu\": \"7910m\",\n       \"ephemeral-storage\": \"18242267924\",\n       \"hugepages-2Mi\": \"0\",\n       \"memory\": \"14320468Ki\",\n       \"pods\": \"58\"\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Node Affinity Configuration with NotIn Operator for Zone Exclusion\nDESCRIPTION: Example showing how to use the NotIn operator with node affinity to exclude specific zones. This configuration allows pods to run only in us-west-2a by including both zones but then excluding us-west-2b.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n           - key: \"topology.kubernetes.io/zone\"\n             operator: \"In\"\n             values: [\"us-west-2a\", \"us-west-2b\"]\n           - key: \"topology.kubernetes.io/zone\"\n             operator: \"NotIn\"\n             values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: GPU NodePool with Taints\nDESCRIPTION: NodePool configuration for GPU instances with taint to ensure only GPU-compatible pods are scheduled.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Merged Bottlerocket UserData in TOML format\nDESCRIPTION: Example of how Karpenter merges user-provided Bottlerocket UserData with its generated configuration. Shows how some values are preserved while Karpenter-managed fields are overridden.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_52\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'cluster'\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'default'\n\n[settings.kubernetes.node-taints]\n\n[settings.kubernetes.eviction-hard]\n'memory.available' = '12%%'\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role for EC2NodeClass in AWS Karpenter\nDESCRIPTION: Example of specifying the IAM role for nodes to assume when creating an EC2NodeClass in Karpenter. This uses the KarpenterNodeRole created by the getting started guide.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Windows Container Image Pull Errors in EKS\nDESCRIPTION: This error occurs when attempting to pull Windows container images that are incompatible with the host Windows OS version. Windows requires the container OS version to match the host OS version for compatibility.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nFailed to pull image \"mcr.microsoft.com/windows/servercore:xxx\": rpc error: code = NotFound desc = failed to pull and unpack image \"mcr.microsoft.com/windows/servercore:xxx\": no match for platform in manifest: not found\n```\n\n----------------------------------------\n\nTITLE: Annotating Pod for Non-Disruption in Karpenter - YAML\nDESCRIPTION: This YAML snippet demonstrates how to annotate a pod with `karpenter.sh/do-not-disrupt: \"true\"` to prevent it from being evicted during voluntary disruption actions. This is useful for long-running processes or interactive applications that require uninterrupted execution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: apps/v1\\nkind: Deployment\\nspec:\\n  template:\\n    metadata:\\n      annotations:\\n        karpenter.sh/do-not-disrupt: \\\"true\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Deployment Node Affinity Setup\nDESCRIPTION: This snippet configures node affinity for Karpenter deployment in the YAML file to ensure it runs on existing node group nodes. It involves setting specific match expressions for node selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Multiple Tag Terms in EC2NodeClass\nDESCRIPTION: Example of subnet selection using multiple tag terms in EC2NodeClass. This configuration selects subnets that match either of the tag terms, allowing selection of different subnet groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"my-subnet-1\"\n    - tags:\n        Name: \"my-subnet-2\"\n```\n\n----------------------------------------\n\nTITLE: Cron Schedule Definition for Karpenter Disruption Budgets\nDESCRIPTION: This Bash snippet provides an example of cron syntax used to specify schedules for disruption budgets in Karpenter. It highlights how to define time-based rules for node disruptions, using standard cron format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ┌───────────── minute (0 - 59)\n# │ ┌───────────── hour (0 - 23)\n# │ │ ┌───────────── day of the month (1 - 31)\n# │ │ │ ┌───────────── month (1 - 12)\n# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;\n# │ │ │ │ │                                   7 is also Sunday on some systems)\n# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat\n# │ │ │ │ │\n# * * * * *\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePools for Spot and On-Demand Instances\nDESCRIPTION: This YAML snippet defines two NodePools with distinct configurations for spot and on-demand instances. They utilize the 'capacity-spread' label to enable workload distribution in a pre-defined ratio.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Required Policies to Karpenter Node Role\nDESCRIPTION: Attaches the necessary AWS managed policies to the Karpenter node role to allow nodes to function properly within the EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step03-node-policies.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Checking NodePool Status\nDESCRIPTION: Command to view the current consumption of CPU and memory resources in a Karpenter NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: AllowScopedInstanceProfileCreationActions IAM Policy\nDESCRIPTION: IAM policy allowing Karpenter to create instance profiles with specific tag requirements for cluster identification and region specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Expensive Provisioner with Weight in YAML for Karpenter\nDESCRIPTION: This YAML snippet shows how to define a Karpenter Provisioner for expensive instances with a high weight. It demonstrates the potential for unintended consequences when using weights without careful consideration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: expensive\nspec:\n  requirements:\n    - key: \"node.kubernetes.io/instance-type\"\n      operator: In\n      values: [\"p3.16xlarge\"]\n  weight: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a bash script UserData for AL2023. This script will be transformed into a MIME part and merged with Karpenter-generated configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\necho \"Hello, AL2023!\"\n```\n\n----------------------------------------\n\nTITLE: Assigning IAM Role to Node in YAML\nDESCRIPTION: This snippet illustrates using the 'role' field to assign an IAM role to nodes in a Karpenter EC2NodeClass. Ensure that roles are correctly provisioned as either 'role' or 'instanceProfile'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pods Requiring Minimum NVME Storage Capacity\nDESCRIPTION: Example showing how to use node affinity to require nodes with at least 100GB of NVME local storage for specific pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: Gt\n              values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: SQS Queue Configuration for Interruption Handling\nDESCRIPTION: YAML configuration for creating an SQS queue to handle instance interruptions and state changes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: GPU Pod with Toleration Configuration\nDESCRIPTION: Pod configuration with GPU resource requests and tolerations to match GPU node taints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Karpenter to the Cluster\nDESCRIPTION: Creates the Karpenter namespace, installs the NodePool CRD, and deploys the Karpenter controller and other resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step09-deploy.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for IPv6 Support in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure a Karpenter NodePool to only allow Nitro instance types, which is necessary for IPv6 support with the Amazon VPC CNI. It sets a requirement on the instance hypervisor.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: NodePool Drift Fields Table\nDESCRIPTION: Table displaying NodePool fields that are monitored for drift detection. These fields, when changed, may cause existing NodeClaims to be marked as drifted from their template.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields         |\n|----------------|\n| spec.template.spec.requirements   |\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Synced Metric in Markdown\nDESCRIPTION: Describes the metric indicating whether the cluster state is synced, returning 1 if synced and 0 otherwise.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_synced`\nReturns 1 if cluster state is synced and 0 otherwise. Synced checks that nodeclaims and nodes that are stored in the APIServer have the same representation as Karpenter's cluster state\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Workaround for ServiceCIDR in Karpenter\nDESCRIPTION: Example of a workaround for Windows nodes to fetch cluster information using PowerShell. This helps with issues related to ServiceCIDR configuration on Windows worker nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  userData: |\n    $global:EKSCluster = Get-EKSCluster -Name my-cluster\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Tagging Policy\nDESCRIPTION: IAM policy allowing CreateTags actions during instance creation operations with specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMIs for AL2 in EC2NodeClass Status\nDESCRIPTION: Example showing how AMIs are resolved and displayed in the status field when using an Amazon Linux 2 (AL2) alias in the AMI selector terms. It includes AMI details for different architectures and GPU configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Allowing Pricing Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to retrieve product pricing information across all regions. It grants permission to perform the pricing:GetProducts action on all resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMIs with AL2 Alias in EC2NodeClass Status with YAML\nDESCRIPTION: This example shows how AMI selector terms using an AL2 alias are specified in the spec and how the resolved AMI IDs, names, and requirements appear in the status field. Each AMI has specific requirements for architecture and GPU/accelerator compatibility.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by Tags in YAML\nDESCRIPTION: This snippet demonstrates selecting all subnets that match a specified tag key using Karpenter's YAML configuration. This allows the inclusion of all resources under a specified cluster name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Node Finalizers\nDESCRIPTION: Bash script to remove all finalizers from nodes that have the Karpenter termination finalizer.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Multiple Single-AZ Node Groups\nDESCRIPTION: Scales down multiple single-AZ node groups to a minimum size for supporting Karpenter and critical services, with a suggested minimum of 1 instance each.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-multiple-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD Chart with Helm\nDESCRIPTION: Command to upgrade or install the independent Karpenter CRD chart using Helm. This approach is recommended for managing the lifecycle of Karpenter's Custom Resource Definitions, as they should be updated along with Karpenter itself.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Family and Version\nDESCRIPTION: YAML configuration example for selecting an AMI by family and version using the alias field in amiSelectorTerms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection with Specified Tag Key in Karpenter\nDESCRIPTION: This YAML snippet configures Karpenter to select security groups with a specified tag key.  It uses a wildcard to match any tag value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  securityGroupSelectorTerms:\\n    - tags:\\n        MyTag: '*'\"\n```\n\n----------------------------------------\n\nTITLE: Windows Node RBAC Configuration\nDESCRIPTION: YAML configuration showing required RBAC permissions for Windows nodes to enable DNS resolution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Karpenter Tags for EC2 Resources\nDESCRIPTION: The default set of tags Karpenter adds to all resources it creates, including EC2 Instances, EBS volumes, and Launch Templates. These tags identify the resources and their relationship to Karpenter resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nName: <node-name>\nkarpenter.sh/nodeclaim: <nodeclaim-name>\nkarpenter.sh/nodepool: <nodepool-name>\nkarpenter.k8s.aws/ec2nodeclass: <ec2nodeclass-name>\nkubernetes.io/cluster/<cluster-name>: owned\n```\n\n----------------------------------------\n\nTITLE: Regional Read Actions Policy\nDESCRIPTION: IAM policy for read-only EC2 API actions within the current AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding NodeClaim Consistency Check JSON Output\nDESCRIPTION: This JSON represents the status condition that indicates if Karpenter's resource estimation for a node matches the actual node resources. A 'False' status with 'ConsistencyCheckFailed' reason means Karpenter's calculations don't match the node's actual resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ConsistentStateFound\",\n    \"status\": \"False\",\n    \"reason\": \"ConsistencyCheckFailed\",\n    \"message\": \"Consistency Check Failed\",\n    \"lastTransitionTime\": \"2024-08-19T20:02:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI using Name\nDESCRIPTION: This YAML snippet demonstrates pinning an AMI using its exact name. This ensures that only the AMI with the specified name will be selected by Karpenter, preventing automatic upgrades to newer versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Using name\n# This will only ever select the AMI that contains this exact name\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags in EC2NodeClass YAML\nDESCRIPTION: Example of how to add custom tags to EC2 instances and other resources created by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tags:\n    InternalAccountingTag: 1234\n    dev.corp.net/app: Calculator\n    dev.corp.net/team: MyTeam\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues on AL2-based Nodes\nDESCRIPTION: Bash commands to connect to an Amazon Linux 2 based node that's in NotReady state to check Kubelet logs and debug connectivity or configuration issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for AL2 AMI Family (YAML)\nDESCRIPTION: Default block device mapping configuration for the Amazon Linux 2 (AL2) AMI family in Karpenter. It sets a 20Gi gp3 volume that is encrypted by default.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Allowing Regional Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows various EC2 describe actions for the current AWS region. It enables the Karpenter controller to perform read-only actions across all related resources within that region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets with Wildcards in YAML\nDESCRIPTION: This snippet demonstrates utilizing wildcards within names for selecting subnets. It leverages asterisks to perform pattern matching.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"*Public*\"\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for Tagging Instance Profiles\nDESCRIPTION: This JSON snippet allows the Karpenter controller to tag instance profiles, enforcing that certain tags are present to ensure compliance with cluster ownership and region specifications.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating GPU Hardware with NodePool Taint\nDESCRIPTION: Configure a NodePool dedicated to GPU instances with a specific taint to control pod scheduling on high-performance hardware\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Label Requirements in Karpenter (YAML)\nDESCRIPTION: This YAML snippet shows how to define user-defined label requirements for a NodePool in Karpenter. The specified label must exist for Karpenter to recognize it when scheduling nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Spot Instance Interruption Warning Rule in YAML\nDESCRIPTION: This YAML snippet defines an AWS::Events::Rule resource to capture EC2 Spot Instance Interruption Warning events and direct them to the Karpenter interruption queue. It uses an event pattern to filter for specific event types from the EC2 source.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Selecting All Security Groups Assigned to a Cluster - YAML\nDESCRIPTION: This example selects all security groups with a specific tag indicating ownership by the EKS cluster, which ensures that attached security groups are managed correctly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        kubernetes.io/cluster/$CLUSTER_NAME: \"owned\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Team B Node Specifications\nDESCRIPTION: This snippet creates a Node resource for Team B, applying a label that categorizes it under 'team-b'. This labeling allows Karpenter to schedule pods based on matching labels, facilitating specific workload assignments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Topology with Karpenter\nDESCRIPTION: Example showing how Karpenter handles storage requirements by connecting Pod, PersistentVolumeClaim, and StorageClass definitions to automatically provision nodes in the appropriate availability zones based on storage requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selection by Tags and ID\nDESCRIPTION: YAML configuration showing how to specify AMI selection using tags and AMI ID in amiSelectorTerms for production environments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Dependency for Local Development\nDESCRIPTION: Command to replace the Karpenter dependency with a local version for development purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Adding Karpenter Node Role to aws-auth ConfigMap\nDESCRIPTION: YAML configuration to add to the aws-auth ConfigMap that maps the Karpenter node IAM role to the appropriate Kubernetes groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  ## If you intend to run Windows workloads, the kube-proxy group should be specified.\n  # For more information, see https://github.com/aws/karpenter/issues/5099.\n  # - eks:kube-proxy-windows\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Defining Nitro Hypervisor Requirement in Karpenter NodePool\nDESCRIPTION: This YAML snippet shows how to define a requirement in the NodePool to only allow Nitro instance types, necessary because the Amazon VPC CNI only supports these types for IPv6. This setup ensures compatibility when enabling IPv6 support within a Karpenter-managed cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift with NodePool Disruption Budgets in YAML\nDESCRIPTION: Example YAML configuration for controlling drift using NodePool disruption budgets, showing how to set different rules for business hours versus non-business hours. This allows administrators to prevent drift-related node disruptions during critical time periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n…\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Options in YAML\nDESCRIPTION: Default configuration for EC2 instance metadata options in Karpenter EC2NodeClass, controlling the Instance Metadata Service exposure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: RAID0 Instance Store Configuration\nDESCRIPTION: Configuration for enabling RAID0 instance store policy for faster node ephemeral storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Configuring Team-Based Deployment in Kubernetes with Karpenter\nDESCRIPTION: A Kubernetes Deployment manifest that targets nodes with team-specific labels. This configuration ensures workloads are scheduled on nodes dedicated to 'team-b'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Subnet Status Configuration in AWS Karpenter\nDESCRIPTION: Example showing the subnet status fields that are resolved from subnetSelectorTerms, including subnet IDs and availability zones sorted by available IP addresses.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: Allow Instance Profile Creation - IAM Policy\nDESCRIPTION: IAM policy statement allowing creation of EC2 instance profiles with specific tags. Enables Karpenter to create instance profiles for EC2NodeClasses with appropriate permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Windows Nodes with EKS\nDESCRIPTION: This PowerShell script is used to bootstrap Windows EKS nodes, ensuring that they register properly with the cluster using required parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with EBS Startup Taints\nDESCRIPTION: YAML configuration for Karpenter NodePool that adds startup taints to prevent race conditions with EBS volume attachments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Instance Profile Reading\nDESCRIPTION: Policy allowing Karpenter to read instance profile information using GetInstanceProfile action.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling PersistentVolume Attachment Errors\nDESCRIPTION: This snippet displays common error messages encountered when Karpenter fails to attach PersistentVolumes due to volume limits. These are shown with `kubectl describe pod` for troubleshooting and require transitioning storage solutions to CSI drivers.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Deployment\nDESCRIPTION: This snippet provides the command to verify that Karpenter is properly creating nodes for workloads by checking logs and listing current nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -n karpenter -c controller -l app.kubernetes.io/name=karpenter\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Creation Tagging in AWS IAM Policy\nDESCRIPTION: This policy allows EC2 CreateTags actions on specific resources during RunInstance, CreateFleet, or CreateLaunchTemplate calls. It ensures resources can't be tagged arbitrarily by Karpenter after creation and sets conditions for cluster-related tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Type Filtering in Karpenter 0.14.0\nDESCRIPTION: YAML configuration to disable instance type filtering in Karpenter 0.14.0 by adding an 'Exists' requirement for instance type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  - key: node.kubernetes.io/instance-type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket UserData Configuration\nDESCRIPTION: Example of configuring custom UserData for Bottlerocket nodes with Kubernetes settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Instance Type Offerings Configuration with ODCR in AWS Karpenter\nDESCRIPTION: Example configuration showing how instance type offerings are structured for ODCR, on-demand, and spot capacity types. The available field is represented as an integer to track instance counts, with MAX_INT (4294967295) used for unlimited capacity types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: c5.large\nofferings:\n  - price: 0.00000001\n    available: 5\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"reserved\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n  - price: 0.085\n    available: 4294967295\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"on-demand\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n  - price: 0.0315\n    available: 4294967295\n    requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\"]\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: [\"us-west-2a\"]\n      - key: topology.k8s.aws/zone-id\n        operator: In\n        values: [\"usw2-az1\"]\n```\n\n----------------------------------------\n\nTITLE: Allow IAM Role Passing - IAM Policy\nDESCRIPTION: IAM policy statement permitting the passing of node IAM role to EC2 instances. Enables Karpenter to assign the appropriate IAM role when launching new nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Karpenter Images\nDESCRIPTION: This snippet builds and pushes Karpenter images to a repository, substituting a locally modified version of Karpenter. Run `go mod edit` to replace module paths before building.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake image # build and push the karpenter images\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Term Using Exact Name\nDESCRIPTION: Example of specifying an AMI by its exact name. This approach will only ever select the single AMI that matches the provided name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Using name\n# This will only ever select the AMI that contains this exact name\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet with UserData in Karpenter AWS Provider\nDESCRIPTION: Example of configuring kubelet settings using both spec.kubelet and UserData in an EC2NodeClass. This allows setting fields not directly supported in spec.kubelet, such as registryPullQPS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n  kubelet:\n    maxPods: 42\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          # Configured through UserData since unavailable in `spec.kubelet`\n          registryPullQPS: 10\n```\n\n----------------------------------------\n\nTITLE: Checking ConfigMap for Node Role Association\nDESCRIPTION: This bash command outputs the 'aws-auth' ConfigMap in the 'kube-system' namespace in YAML format. It's crucial for verifying the IAM roles associated with the nodes to ensure they are correct and have sufficient permissions for node registration with the Kubernetes API server.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmaps -n kube-system aws-auth -o yaml\n```\n\n----------------------------------------\n\nTITLE: Example Log: Creating NodeClaim\nDESCRIPTION: This JSON log entry shows the successful creation of a NodeClaim by Karpenter.  It includes details such as the NodePool name, NodeClaim name, and the resource requests (CPU and pods) associated with the NodeClaim.  It also lists the potential instance types that can fulfill the NodeClaim's requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"level\": \"INFO\",\n       \"time\": \"2024-06-22T02:24:16.128Z\",\n       \"message\": \"created nodeclaim\",\n       \"controller\": \"provisioner\",\n       \"NodePool\": {\n           \"name\":\"default\"\n       },\n       \"NodeClaim\": {\n           \"name\":\"default-sfpsl\"\n       },\n       \"requests\": {\n           \"cpu\":\"5150m\",\n           \"pods\":\"8\"\n       },\n       \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating Instance Profile for Private Clusters\nDESCRIPTION: AWS CLI commands to create and configure instance profile for Karpenter nodes in private clusters\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\naws iam add-role-to-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" --role-name \"KarpenterNodeRole-${CLUSTER_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Configuration Status Example\nDESCRIPTION: YAML example showing subnet selector configuration and resolved subnet status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Wildcards in EC2NodeClass\nDESCRIPTION: Example of subnet selection using wildcards in tag values in EC2NodeClass. This selects all subnets with a Name tag containing 'Public' anywhere in the value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"*Public*\"\n```\n\n----------------------------------------\n\nTITLE: Example of Merged User Data (MIME)\nDESCRIPTION: Example of how Karpenter merges custom MIME-formatted user data with its default bootstrap script for an EC2NodeClass. This shows the final MIME multipart format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (mime)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Creating Rebalance Rule for Karpenter in YAML\nDESCRIPTION: Configures an EventBridge rule to capture EC2 Instance Rebalance Recommendation signals and route them to the Karpenter interruption queue. This allows Karpenter to proactively migrate workloads from instances at heightened risk of interruption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Subnet Selector Terms Configuration in Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure subnet selector terms in a Karpenter `EC2NodeClass`.  It shows how to select subnets based on tags and IDs, using an OR condition between multiple terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"subnetSelectorTerms:\\n  # Select on any subnet that has the \\\"karpenter.sh/discovery: ${CLUSTER_NAME}\\\"\\n  # AND the \\\"environment: test\\\" tag OR any subnet with ID \\\"subnet-09fa4a0a8f233a921\\\"\\n  - tags:\\n      karpenter.sh/discovery: \\\"${CLUSTER_NAME}\\\"\\n      environment: test\\n  - id: subnet-09fa4a0a8f233a921\"\n```\n\n----------------------------------------\n\nTITLE: Creating Spot Interruption Rule for Karpenter in YAML\nDESCRIPTION: Defines an EventBridge rule to capture EC2 Spot Instance Interruption Warning events and forward them to the Karpenter interruption queue. This enables Karpenter to handle spot instance terminations gracefully.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring TOML UserData for Bottlerocket in Karpenter\nDESCRIPTION: Example of passing TOML configuration for Bottlerocket instances. This sets custom eviction thresholds and node labels, which will be merged with Karpenter's settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_45\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterControllerPolicy in CloudFormation\nDESCRIPTION: YAML configuration for creating the KarpenterControllerPolicy IAM managed policy for the Karpenter controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    PolicyDocument: !Sub |\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n```\n\n----------------------------------------\n\nTITLE: Defining Pod and StorageClass with PersistentVolumeClaim in Kubernetes Using YAML\nDESCRIPTION: This YAML snippet demonstrates the definition of a Kubernetes Pod that references a PersistentVolumeClaim, along with a StorageClass that specifies zonal topologies and a WaitForFirstConsumer volume binding mode. The context highlights Karpenter's ability to provision nodes based on storage requirements and zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: AMI Selection by Name with Wildcard in Karpenter\nDESCRIPTION: This YAML snippet configures AMI selection using a wildcard in the AMI name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  amiSelectorTerms:\\n    - name: \\\"*EKS*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection Using Wildcards\nDESCRIPTION: YAML example showing how to select subnets using wildcard patterns in tag values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"*Public*\"\n\n```\n\n----------------------------------------\n\nTITLE: Default NodePool Disruption Configuration in YAML\nDESCRIPTION: Example of default disruption configuration in a Karpenter NodePool resource. Shows the consolidationPolicy set to WhenEmptyOrUnderutilized, which is the default value if not explicitly set.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Defining KarpenterNodeRole in CloudFormation (YAML)\nDESCRIPTION: This YAML snippet defines an IAM role, KarpenterNodeRole, which is attached to instance profiles generated by Karpenter. The role grants permissions required for nodes to interact with EC2 and other AWS resources.  It uses AWS managed policies for EKS CNI, worker node operations, container registry access, and Systems Manager core functions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"KarpenterNodeRole:\\n  Type: \\\"AWS::IAM::Role\\\"\\n  Properties:\\n    RoleName: !Sub \\\"KarpenterNodeRole-${ClusterName}\\\"\\n    Path: /\\n    AssumeRolePolicyDocument:\\n      Version: \\\"2012-10-17\\\"\\n      Statement:\\n        - Effect: Allow\\n          Principal:\\n            Service:\\n              !Sub \\\"ec2.${AWS::URLSuffix}\\\"\\n          Action:\\n            - \\\"sts:AssumeRole\\\"\\n    ManagedPolicyArns:\\n      - !Sub \\\"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\\\"\\n      - !Sub \\\"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\\\"\\n      - !Sub \\\"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\\\"\\n      - !Sub \\\"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Exists Operator for Workload Segregation in NodePools Using YAML\nDESCRIPTION: This YAML snippet demonstrates how to utilize the Exists operator in NodePools to achieve workload segregation based on custom labels. This configuration allows dynamic node assignment for different workloads under a shared NodePool while maintaining isolation based on team or project requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n---\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n---\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted NodePools for Instance Type Prioritization\nDESCRIPTION: This snippet introduces the configuration of two NodePools in Karpenter, allowing prioritization of certain instance types and setting limits on resource usage. It specifies a weight for both NodePools to guide the scheduling process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: reserved-instance\nspec:\n  weight: 50\n  limits:\n    cpu: 100\n  template:\n    spec:\n      requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"c4.large\"]\n---\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging via Helm\nDESCRIPTION: Command to enable debug logging during Karpenter installation using Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket UserData in TOML\nDESCRIPTION: Example of passed-in UserData configuration for Bottlerocket showing custom eviction settings and node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped Resource Creation Tagging - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `CreateTags` actions on EC2 resources during their creation. It ensures that resources are tagged with the required `kubernetes.io/cluster/${ClusterName}` and `eks:eks-cluster-name` tags during the `RunInstances`, `CreateFleet`, or `CreateLaunchTemplate` calls. This prevents Karpenter from arbitrarily tagging resources after creation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Critical Workload Node Affinity Configuration\nDESCRIPTION: Set node affinity for critical cluster workloads to ensure they run on specific node groups\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log Entry for NodeClaim Creation\nDESCRIPTION: JSON log entry showing the creation of a NodeClaim by Karpenter. This includes the NodePool, resource requests, and potential instance types in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.128Z\",\n    \"message\": \"created nodeclaim\",\n    \"controller\": \"provisioner\",\n    \"NodePool\": {\n        \"name\":\"default\"\n    },\n    \"NodeClaim\": {\n        \"name\":\"default-sfpsl\"\n    },\n    \"requests\": {\n        \"cpu\":\"5150m\",\n        \"pods\":\"8\"\n    },\n    \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role Configuration in AWS Karpenter\nDESCRIPTION: Configuration options for specifying IAM roles and instance profiles for Karpenter nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Server Endpoint Discovery IAM Policy\nDESCRIPTION: IAM policy enabling Karpenter to discover the Kubernetes cluster's external API endpoint through EKS DescribeCluster action.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Team B Node Label Configuration\nDESCRIPTION: Node configuration that defines the team-specific label used for node selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Default Feature Gates Configuration in YAML\nDESCRIPTION: Configuration for Karpenter's alpha feature gates including node repair, reserved capacity, and spot-to-spot consolidation settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/charts/karpenter/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"featureGates\": {\n  \"nodeRepair\": false,\n  \"reservedCapacity\": false,\n  \"spotToSpotConsolidation\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Interruption Queue Actions - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `sqs:DeleteMessage`, `sqs:GetQueueUrl`, and `sqs:ReceiveMessage` actions on a specified SQS queue (`${KarpenterInterruptionQueue.Arn}`). This allows Karpenter to manage messages in the interruption queue, enabling it to respond to instance interruptions and maintain cluster stability.  The policy is scoped to a specific queue ARN.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Spot Service Linked Role for Karpenter\nDESCRIPTION: Creates the EC2 Spot service linked role to avoid ServiceLinkedRoleCreationNotPermitted errors when using spot instances with Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step06-add-spot-role.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped EC2 Instance Actions with Tags - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `RunInstances`, `CreateFleet`, and `CreateLaunchTemplate` actions to create EC2 resources.  It requires specific tags (`kubernetes.io/cluster/${ClusterName}`, `eks:eks-cluster-name`, and `karpenter.sh/nodepool`) to be present on the created resources, ensuring that Karpenter only creates instances for a specific EKS cluster. The resource ARNs define the scope of resources the policy applies to.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on Linux\nDESCRIPTION: Commands to open and port-forward Karpenter metrics for debugging on Linux.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Defining EC2 Node Class with AL2 AMIFamily\nDESCRIPTION: This YAML snippet defines an EC2 Node Class with an Amazon Linux 2 AMI family. It specifies the AMI selector terms and block device mappings crucial for customizing the bootstrapping process of nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Name and Tag - YAML\nDESCRIPTION: This configuration allows users to select a specific security group by name, along with a tag condition that must also match, ensuring stringent matching.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: my-security-group\n      tags:\n        MyTag: '*' # matches all resources with the tag\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Karpenter Using Helm\nDESCRIPTION: This bash script snippet shows how to upgrade Karpenter to a specific version using Helm. It includes placeholders for the Karpenter version, cluster name, and IAM role ARN, which need to be replaced with actual values before execution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for IPv6 Support with Nitro Hypervisor Requirement\nDESCRIPTION: This snippet demonstrates how to configure a Karpenter NodePool to only use EC2 instance types that support IPv6. It requires instances running on the Nitro hypervisor which are compatible with IPv6 and the Amazon VPC CNI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-hypervisor\n          operator: In\n          values:\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket UserData Configuration for EKS\nDESCRIPTION: Generated TOML configuration for Bottlerocket AMI family. Sets up Kubernetes cluster parameters including API server endpoint, cluster certificate, DNS IP, max pods, and node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: Merged NodeConfig UserData for AL2023 in Karpenter\nDESCRIPTION: Example of how Karpenter merges a custom NodeConfig with its generated configuration. The merged output is a MIME multi-part archive containing both the custom and Karpenter-generated NodeConfig sections.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_55\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Manually Deleting Karpenter Nodes and NodeClaims in Bash\nDESCRIPTION: This snippet demonstrates various kubectl commands to manually delete Karpenter nodes, nodeclaims, and related resources. It includes options for deleting specific nodes, all nodes, and nodes associated with specific nodepools.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: PVC Attachment Error Messages\nDESCRIPTION: Example error messages that appear when pods with PersistentVolumes hit volume attachment limits on a node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n```\n\n----------------------------------------\n\nTITLE: Custom AMI Registration Configuration in Karpenter\nDESCRIPTION: Example of configuring a custom AL2023 AMI with the required registration taint in EC2NodeClass UserData.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nspec:\n  amiFamily: Custom\n  amiSelectorTerms:\n    - id: ami-custom-al2023-ami\n  userData: |\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      # ...\n      kubelet:\n        config:\n          # ...\n          registerWithTaints:\n            - key: karpenter.sh/unregistered\n              effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring AL2 UserData with SSH Access in Karpenter\nDESCRIPTION: Example of adding SSH keys to Amazon Linux 2 instances provisioned by Karpenter to enable remote login. This creates and configures authorized_keys for the ec2-user account.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EventBridge Rule for Instance Rebalance in YAML\nDESCRIPTION: Defines an AWS EventBridge rule to capture EC2 Instance Rebalance Recommendation events and send them to Karpenter's interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: AMI Selection Using Version Alias\nDESCRIPTION: Demonstrates AMI selection using a fixed version alias that matches the cluster's Kubernetes control plane version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- alias: al2023@v20240219\n```\n\n----------------------------------------\n\nTITLE: AllowScopedEC2InstanceAccessActions Policy Statement\nDESCRIPTION: JSON policy statement allowing Karpenter to access specific EC2 resources for running instances and creating fleets, scoped to the AWS partition and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption for a NodePool in YAML\nDESCRIPTION: This configuration demonstrates how to disable disruption for all nodes launched by a NodePool using the 'spec.disruption.budgets' field. Setting a budget of zero nodes prevents any nodes in this pool from being considered for voluntary disruption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    budgets:\n      - nodes: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Role Configuration\nDESCRIPTION: CloudFormation YAML defining the IAM role for Karpenter-managed nodes, including necessary managed policies for EKS worker nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterNodeRole:\n  Type: \"AWS::IAM::Role\"\n  Properties:\n    RoleName: !Sub \"KarpenterNodeRole-${ClusterName}\"\n    Path: /\n    AssumeRolePolicyDocument:\n      Version: \"2012-10-17\"\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              !Sub \"ec2.${AWS::URLSuffix}\"\n          Action:\n            - \"sts:AssumeRole\"\n    ManagedPolicyArns:\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly\"\n      - !Sub \"arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped Resource Tagging - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `CreateTags` actions on EC2 instances after their creation.  It restricts Karpenter to only updating tags related to the cluster and nodepool (`kubernetes.io/cluster/${ClusterName}`, `karpenter.sh/nodepool`, `eks:eks-cluster-name`, and `Name`).  This policy prevents Karpenter from arbitrarily modifying tags on instances not managed by it.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass Drift Fields Table\nDESCRIPTION: Table showing EC2NodeClass fields that are monitored for drift detection. Changes to these fields may cause existing NodeClaims to be marked as drifted from their template.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields                        |\n|-------------------------------|\n| spec.subnetSelectorTerms      |\n| spec.securityGroupSelectorTerms  |\n| spec.amiSelectorTerms  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Spot and On-Demand NodePools with Karpenter\nDESCRIPTION: This YAML snippet defines two Karpenter NodePools: one for spot instances and one for on-demand instances. It uses a custom 'capacity-spread' label to create a 4:1 ratio of spot to on-demand nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Example of Passed-in User Data (MIME)\nDESCRIPTION: Example of user data passed in as a MIME multipart archive for an EC2NodeClass. This demonstrates a custom user data script in MIME format.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"BOUNDARY\"\n\n--BOUNDARY\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (mime)\"\n\n--BOUNDARY--\n```\n\n----------------------------------------\n\nTITLE: Node Affinity for Critical Workloads\nDESCRIPTION: YAML configuration for setting node affinity on critical cluster workloads like CoreDNS and metrics-server to ensure they run on static node group instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Instance State-change Notification Rule for Karpenter\nDESCRIPTION: Defines an EventBridge rule to capture EC2 Instance State-change Notifications and send them to the Karpenter interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in AWS Karpenter\nDESCRIPTION: YAML configuration for setting AMI selector terms with specific tags for cluster discovery and environment designation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Tagging for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to update tags on existing EC2 instances it operates on. It enforces that Karpenter can only tag instances associated with the specific cluster and nodepool, and limits the tags that can be added or modified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Multiple Single-AZ Node Groups\nDESCRIPTION: Scales down multiple single-AZ node groups to a minimum size to support Karpenter and other critical services, recommended minimum is 1 instance per node group.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-multiple-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodeClaim Creation Log\nDESCRIPTION: JSON log entry showing the creation of a new NodeClaim with resource requests and instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.128Z\",\n    \"message\": \"created nodeclaim\",\n    \"controller\": \"provisioner\",\n    \"NodePool\": {\n        \"name\":\"default\"\n    },\n    \"NodeClaim\": {\n        \"name\":\"default-sfpsl\"\n    },\n    \"requests\": {\n        \"cpu\":\"5150m\",\n        \"pods\":\"8\"\n    },\n    \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cron Schedule Syntax for Disruption Budgets\nDESCRIPTION: Example showing the standard cron syntax format used for scheduling disruption budgets in Karpenter. Demonstrates the five-field structure for minute, hour, day of month, month, and day of week.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# ┌───────────── minute (0 - 59)\n# │ ┌───────────── hour (0 - 23)\n# │ │ ┌───────────── day of the month (1 - 31)\n# │ │ │ ┌───────────── month (1 - 12)\n# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;\n# │ │ │ │ │                                   7 is also Sunday on some systems)\n# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat\n# │ │ │ │ │\n# * * * * *\n```\n\n----------------------------------------\n\nTITLE: Checking NodePool Status in Karpenter\nDESCRIPTION: Command to view the current consumption of CPU and memory resources in a Karpenter NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Locally in Go\nDESCRIPTION: Command to run the Karpenter Go binary locally against the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro Instance Hypervisor Requirement for IPv6\nDESCRIPTION: NodePool configuration to ensure only Nitro hypervisor instances are used, which are compatible with IPv6 and Amazon VPC CNI\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\\nkind: NodePool\\n...\\nspec:\\n  template:\\n    spec:\\n      requirements:\\n        - key: karpenter.k8s.aws/instance-hypervisor\\n          operator: In\\n          values:\\n            - nitro\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by Name and Tag in EC2NodeClass\nDESCRIPTION: Example of selecting subnets by name and tag in EC2NodeClass. All criteria within a term must match for the subnet to be selected. This example requires both the Name tag and MyTag to be present.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: my-subnet\n        MyTag: '' # matches all resources with the tag\n```\n\n----------------------------------------\n\nTITLE: Pod Architecture Selector Example\nDESCRIPTION: Example of a pod using the Kubernetes node selector for ARM64 architecture, which might conflict with a provisioner's launch template.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nspec:\n  nodeSelector:\n    kubernetes.io/arch: arm64\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for Instance Profile Creation Actions\nDESCRIPTION: This JSON snippet provides the Karpenter controller with the permission to create instance profiles under specified conditions, ensuring that requests are tagged appropriately and tied to a specific EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Instance State Change Monitoring for Karpenter in CloudFormation\nDESCRIPTION: This YAML defines an EventBridge rule to capture EC2 Instance State-change Notifications and forward them to Karpenter. This enables Karpenter to track when instances change state to pending, running, stopping, stopped, shutting-down, or terminated.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Creating Service Linked Role for EC2 Spot Instances on AWS\nDESCRIPTION: This command creates the necessary service linked role for EC2 Spot Instances to resolve the ServiceLinkedRoleCreationNotPermitted error during Karpenter installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Windows2022 AMIFamily UserData Template\nDESCRIPTION: Generated PowerShell UserData for Windows Server 2022 AMI family, using EKS bootstrap script with cluster parameters and node labeling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped EC2 Launch Template Access Actions - JSON\nDESCRIPTION: This JSON snippet defines the permissions for accessing EC2 launch templates associated with a specific cluster. It restricts access to templates that are owned by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2LaunchTemplateAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Errors Total Metric\nDESCRIPTION: Describes the metric for counting the total number of reconciliation errors per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_errors_total`\nTotal number of reconciliation errors per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Instance Type Filtering in Karpenter\nDESCRIPTION: Configures Karpenter provisioners to universally apply instance type filtering, with the option to override by specifying the `Exists` operator in constraints to bypass default filtering.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- key: node.kubernetes.io/instance-type\n  operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Verifying Security Group Selection in Bash\nDESCRIPTION: This bash snippet retrieves security groups in a VPC using specified filters, useful for ensuring that the selection logic does not interfere with AWS Load Balancer controller operations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_VPC_ID=\"$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.resourcesVpcConfig.vpcId --output text)\"\n\naws ec2 describe-security-groups --filters Name=vpc-id,Values=$CLUSTER_VPC_ID Name=tag-key,Values=kubernetes.io/cluster/$CLUSTER_NAME --query 'SecurityGroups[].[GroupName]' --output text\n```\n\n----------------------------------------\n\nTITLE: Complex Node Affinity with Spot Instance Fallback\nDESCRIPTION: Advanced node affinity configuration featuring multiple selector terms for zone selection with fallback to spot instances in alternate zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions: # OR\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2a\", \"us-west-2b\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"NotIn\"\n            values: [\"us-west-2b\"]\n        - matchExpressions: # OR\n          - key: \"karpenter.sh/capacity-type\" # AND\n            operator: \"In\"\n            values: [\"spot\"]\n          - key: \"topology.kubernetes.io/zone\" # AND\n            operator: \"In\"\n            values: [\"us-west-2d\"]\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection with Tags and IDs in EC2NodeClass\nDESCRIPTION: Example of subnetSelectorTerms in EC2NodeClass showing how to select subnets using tags and IDs with OR logic between terms and AND logic within terms. Terms can match by cluster-specific discovery tags, environment tags, or specific subnet IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n```\n\n----------------------------------------\n\nTITLE: Configuring ODCR Launch Preferences in NodePool YAML\nDESCRIPTION: Example YAML configuration for specifying ODCR launch preferences in the NodePool API. It shows how to set up different scenarios for launching ODCR instances with various fallback options.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        name: default\n  limits:\n    cpu: \"1000\"\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n    expireAfter: 168h # 1 week\n    budgets:\n    - nodes: \"10%\"\n  weight: 100\n  # Only launch ODCR instances\n  requirements:\n  - key: karpenter.sh/capacity-type\n    operator: In\n    values: [\"reserved\"]\n  # Launch ODCR instances with on-demand fallback\n  requirements:\n  - key: karpenter.sh/capacity-type\n    operator: In\n    values: [\"reserved\", \"on-demand\"]\n  # Launch ODCR instances with spot and on-demand fallback\n  requirements:\n  - key: karpenter.sh/capacity-type\n    operator: In\n    values: [\"reserved\", \"spot\", \"on-demand\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Team-Based Deployment in Kubernetes with Karpenter\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment for 'Team B' with 5 replicas. It uses a nodeSelector to ensure pods are scheduled on nodes labeled for Team B.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Grafana Access\nDESCRIPTION: This snippet explains the command to set up port forwarding for accessing the Grafana instance deployed for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step10-add-grafana-port-forward.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Instance Profile Creation\nDESCRIPTION: Policy allowing Karpenter to create instance profiles with specific cluster and region tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Deletion Policy\nDESCRIPTION: IAM policy allowing termination of instances and deletion of launch templates with proper cluster and nodepool tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Instance State-change Notification Rule for Karpenter in YAML\nDESCRIPTION: CloudFormation template defining an EventBridge rule that captures EC2 Instance State-change Notification events and forwards them to Karpenter's interruption queue. This enables Karpenter to monitor and respond to instance state transitions like starting, stopping, or termination.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Fixed Version Alias\nDESCRIPTION: Example showing how to pin to a specific AMI version using an alias selector. This ensures compatibility with the cluster's Kubernetes version while maintaining a fixed AMI version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- alias: al2023@v20240219\n```\n\n----------------------------------------\n\nTITLE: Configuring Cilium Startup Taint for Node Provisioning\nDESCRIPTION: NodePool configuration to handle temporary taints during node initialization, preventing premature pod scheduling\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\\nkind: NodePool\\n...\\nspec:\\n  template:\\n    spec:\\n      startupTaints:\\n        - key: node.cilium.io/agent-not-ready\\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Multiple MinValues Requirements Configuration\nDESCRIPTION: YAML configuration demonstrating multiple minValues requirements for the same keys. Shows how Karpenter handles overlapping minValues constraints for instance families.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n          minValues: 2\n        - key: karpenter.k8s.aws/instance-family\n          operator: Exists\n          minValues: 5\n        - key: karpenter.k8s.aws/instance-family\n          operator: In\n          values: [\"m5\",\"m5d\",\"c5\",\"c5d\",\"c4\",\"r4\"]\n          minValues: 3\n        - key: node.kubernetes.io/instance-type\n          operator: Exists\n          minValues: 10\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Subnet Tags - YAML\nDESCRIPTION: This configuration allows the user to select subnets that match any of the specified names by listing multiple tag criteria, thus providing flexibility in resource selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"my-subnet-1\"\n    - tags:\n        Name: \"my-subnet-2\"\n\n```\n\n----------------------------------------\n\nTITLE: Build and Deploy Karpenter using Make\nDESCRIPTION: Deploys Karpenter changes to the cluster or runs a series of tests including codegen and linting. The 'make image' command builds and pushes Karpenter images to a Docker repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: Configuring Spot NodePool with Capacity Spread Labels for Ratio Management\nDESCRIPTION: A Karpenter NodePool configuration for spot instances with multiple capacity-spread values. This creates a foundation for implementing a ratio-based distribution between spot and on-demand instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: spot\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"spot\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"2\"\n        - \"3\"\n        - \"4\"\n        - \"5\"\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: on-demand\nspec:\n  template:\n    spec:\n      requirements:\n      - key: \"karpenter.sh/capacity-type\"\n        operator: In\n        values: [\"on-demand\"]\n      - key: capacity-spread\n        operator: In\n        values:\n        - \"1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Do-Not-Disrupt Annotation on Nodes in YAML\nDESCRIPTION: This YAML snippet shows how to add the 'karpenter.sh/do-not-disrupt' annotation to a Node resource. This annotation prevents Karpenter from voluntarily disrupting the node during operations like consolidation or drift.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Pricing Read Actions Policy\nDESCRIPTION: IAM policy for accessing EC2 pricing information across all regions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying New Karpenter IAM Policy for v1beta1\nDESCRIPTION: Creates and attaches a new IAM policy for Karpenter v1beta1 to the existing Karpenter role. This policy provides the necessary permissions for the updated controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTEMPOUT=$(mktemp)\ncurl -fsSL https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/website/content/en/preview/upgrading/v1beta1-controller-policy.json > ${TEMPOUT}\n\nAWS_REGION=${AWS_REGION:=$AWS_DEFAULT_REGION} # use the default region if AWS_REGION isn't defined\nPOLICY_DOCUMENT=$(envsubst < ${TEMPOUT})\nPOLICY_NAME=\"KarpenterControllerPolicy-${CLUSTER_NAME}-v1beta1\"\nROLE_NAME=\"${CLUSTER_NAME}-karpenter\"\n\nPOLICY_ARN=$(aws iam create-policy --policy-name \"${POLICY_NAME}\" --policy-document \"${POLICY_DOCUMENT}\" | jq -r .Policy.Arn)\naws iam attach-role-policy --role-name \"${ROLE_NAME}\" --policy-arn \"${POLICY_ARN}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Eviction Grace Periods in Karpenter\nDESCRIPTION: This YAML shows how to configure grace periods for soft eviction thresholds in Karpenter NodePools. These settings define the duration a threshold must be exceeded before eviction begins, and maximum pod termination grace periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - AWS Instance Launch for NodeClaim\nDESCRIPTION: JSON log example showing the successful launch of an AWS EC2 instance for a NodeClaim, including instance details like type, zone, and capacity type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:19.028Z\",\n    \"message\": \"launched nodeclaim\",\n    \"controller\": \"nodeclaim.lifecycle\",\n    \"NodeClaim\": {\n        \"name\": \"default-sfpsl\"\n    },\n    \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n    \"instance-type\": \"c3.2xlarge\",\n    \"zone\": \"us-west-2b\",\n    \"capacity-type\": \"spot\",\n    \"allocatable\": {\n      \"cpu\": \"7910m\",\n      \"ephemeral-storage\": \"17Gi\",\n      \"memory\": \"13215Mi\",\n      \"pods\": \"58\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Find Old Launch Templates (v0.14.0)\nDESCRIPTION: This command uses the AWS CLI to find launch templates that match the old naming pattern used by Karpenter (`Karpenter-${CLUSTER_NAME}-*`).  This is used to identify launch templates that might need to be cleaned up after upgrading to `0.14.0` which uses tags instead of names for discovery.  Replace `${CLUSTER_NAME}` with your actual cluster name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - NodeClaim Computation for AWS\nDESCRIPTION: JSON log example showing Karpenter computing the NodeClaim requirements based on pending pods for AWS instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n    \"controller\": \"provisioner\",\n    \"nodeclaims\": 1,\n    \"pods\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: AllowPassingInstanceRole IAM Policy Configuration\nDESCRIPTION: IAM policy that allows Karpenter to pass the node role to EC2 instance profiles. Enables EC2 to use KarpenterNodeRole when launching nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon VPC CNI Pods for Troubleshooting\nDESCRIPTION: Command to identify the aws-node pods running in the kube-system namespace for investigating CNI-related issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\n----------------------------------------\n\nTITLE: Specifying Windows Server Full AMI for EKS\nDESCRIPTION: Configuration for using Windows Server 2022 Full variant AMI with Kubernetes 1.32\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\\n    - name: Windows_Server-2022-English-Full-EKS_Optimized-1.32*\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu AMI Family Userdata in Karpenter\nDESCRIPTION: This snippet shows the default userdata configuration for the Ubuntu AMI family in Karpenter. It includes bootstrap script execution and kubelet configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget in YAML\nDESCRIPTION: This snippet demonstrates how to configure a Pod Disruption Budget (PDB) to protect application availability during node deprovisioning. It sets a minimum number of available pods for a specific application.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\nspec:\n  minAvailable: 4\n  selector:\n    matchLabels:\n      app: myapp\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Spot Service Linked Role\nDESCRIPTION: AWS CLI command to create the required service-linked role for EC2 Spot Instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Annotations to Karpenter CRDs\nDESCRIPTION: Commands to add required Helm annotations to Karpenter Custom Resource Definitions in the specified namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Batcher Batch Time Seconds Metric\nDESCRIPTION: Describes the metric for measuring the duration of the batching window per batcher in the cloudprovider.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_batcher_batch_time_seconds`\nDuration of the batching window per batcher\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection with Tags, Names, and IDs in EC2NodeClass\nDESCRIPTION: Example of securityGroupSelectorTerms in EC2NodeClass showing how to select security groups using tags, names, and IDs with OR logic between terms and AND logic within tag terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityGroupSelectorTerms:\n  # Select on any security group that has both the \"karpenter.sh/discovery: ${CLUSTER_NAME}\" tag\n  # AND the \"environment: test\" tag OR any security group with the \"my-security-group\" name\n  # OR any security group with ID \"sg-063d7acfb4b06c82c\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-security-group\n  - id: sg-063d7acfb4b06c82c\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket AMI Family Provisioner Spec\nDESCRIPTION: Shows AWS provider provisioner specification with Bottlerocket AMI family, which gets different default block device mappings at runtime.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/runtime-defaulting.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n   provider:\n     amiFamily: Bottlerocket\n     apiVersion: extensions.karpenter.sh/v1alpha1\n     instanceProfile: KarpenterNodeInstanceProfile-karpenter-demo\n     kind: AWS\n     securityGroupSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n     subnetSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection by Name and Tag in Karpenter\nDESCRIPTION: This YAML snippet shows how to select security groups by both name and tag. All criteria within a term must match.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  securityGroupSelectorTerms:\\n    - name: my-security-group\\n      tags:\\n        MyTag: '*' # matches all resources with the tag\"\n```\n\n----------------------------------------\n\nTITLE: EC2 Instance Access Actions Policy\nDESCRIPTION: JSON policy allowing Karpenter to perform EC2 instance operations with specific resource access permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Node Affinity with Zone Exclusion\nDESCRIPTION: Example showing node affinity configuration using NotIn operator to exclude specific zones from pod scheduling while including others.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"In\"\n  values: [\"us-west-2a\", \"us-west-2b\"]\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"NotIn\"\n  values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Locally in Go\nDESCRIPTION: Command to run the Karpenter Go binary locally against the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Reserved Instance Types with Limits in Karpenter\nDESCRIPTION: Example demonstrating how to prioritize reserved instance types (c5.large) with a CPU limit while providing fallback to other instance types, optimizing cost efficiency for enterprise users.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# I have c5.large instance types as reserved instances, so I want to schedule to these nodes first\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: reserved\nspec:\n  weight: 50\n  requirements:\n  - key: \"node.kubernetes.io/instance-type\"\n    operator: In\n    values: [\"c5.large\"]\n  limits:\n    cpu: 20\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# For all other pods, we can use these other instance types\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: fallback\nspec:\n  requirements:\n  - key: \"node.kubernetes.io/instance-type\"\n    operator: In\n    values: [\"m5.large\", \"m5.2xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Versions in EC2NodeClass YAML\nDESCRIPTION: Examples of how to pin specific AMI versions for different OS families using the alias selector term.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nalias: al2023@v20240703\n```\n\nLANGUAGE: yaml\nCODE:\n```\nalias: bottlerocket@v1.20.4\n```\n\n----------------------------------------\n\nTITLE: Node Affinity for Zonal Constraint\nDESCRIPTION: YAML snippet demonstrating how to add node affinity to a pod spec to ensure it matches the zonal constraints of a NodePool, resolving topology spread constraint issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n```\n\n----------------------------------------\n\nTITLE: Interruption Queue Actions Policy\nDESCRIPTION: IAM policy for managing SQS interruption queue messages and operations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AllowScopedEC2LaunchTemplateAccessActions Policy Statement\nDESCRIPTION: JSON policy statement allowing Karpenter to access EC2 launch templates with specific tags for running instances and creating fleets, scoped to the AWS partition and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2LaunchTemplateAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Health Event Rule for Karpenter\nDESCRIPTION: Creates an EventBridge rule to capture AWS Health events and send them to the Karpenter interruption queue\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Name in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs by specifying their exact name. This provides precise control when you know the specific AMI name you want to use.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod-Level Disruption Protection in Kubernetes Deployments\nDESCRIPTION: This snippet shows how to set the 'karpenter.sh/do-not-disrupt' annotation on a pod to prevent Karpenter from voluntarily disrupting it. This annotation is useful for critical workloads that should not be interrupted, such as interactive games or long-running batch jobs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Subnets in EC2NodeClass Status with YAML\nDESCRIPTION: This example shows how subnet selector terms are specified in the spec and how the resolved subnet IDs and zones appear in the status field. Subnets are sorted by available IP address count in decreasing order.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: Viewing NodeClaim Details with kubectl\nDESCRIPTION: Commands to list and describe NodeClaim resources in a Kubernetes cluster using kubectl\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nNAME            TYPE               ZONE         NODE                                           READY   AGE\ndefault-m6pzn   c7i-flex.2xlarge   us-west-1a   ip-xxx-xxx-xx-xxx.us-west-1.compute.internal   True    7m50s\n\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Viewing NodePool Status Command\nDESCRIPTION: kubectl command to view current consumption of CPU and memory in a Karpenter NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodepools.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: AL2 Default Block Device Mapping\nDESCRIPTION: Default block device mapping configuration for Amazon Linux 2 AMI family.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Pinning AMIs Using Tags in EC2NodeClass\nDESCRIPTION: Partial YAML configuration demonstrating the use of tags for AMI selection. This method can be used in conjunction with CI/CD systems to test and select newer versions of AMIs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass Status with Deprecated AMI in YAML\nDESCRIPTION: Example YAML representation of an EC2NodeClass status showing AMIs with deprecation status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprecated-ami-observability.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  amis:\n    - id: ami-01234567890654321\n      name: custom-ami-amd64\n      deprecated: true\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - amd64\n    - id: ami-01234567890123456\n      name: custom-ami-arm64\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n            - arm64\n```\n\n----------------------------------------\n\nTITLE: Using the Exists Operator for Workload Segregation\nDESCRIPTION: This snippet shows the configuration of a NodePool that uses the Exists operator to segregate workloads based on labels assigned to nodes. It details how to apply this dynamic labeling to allow effective compartmentalization of workloads without creating separate NodePools.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n```\n\n----------------------------------------\n\nTITLE: Adding New Status Conditions for EC2NodeClass in Go\nDESCRIPTION: Defines new condition types for EC2NodeClass to indicate AMI deprecation status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprecated-ami-observability.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    ConditionTypeSubnetsReady         = \"SubnetsReady\"\n    ConditionTypeSecurityGroupsReady  = \"SecurityGroupsReady\"\n    ConditionTypeAMIsReady            = \"AMIsReady\"\n    ConditionTypeAMIsDeprecated       = \"AMIsDeprecated\"\n    ConditionTypeInstanceProfileReady = \"InstanceProfileReady\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Eviction Grace Periods for Kubelet in YAML\nDESCRIPTION: Defines soft eviction grace periods for various resources in the kubelet configuration. Dependencies include a Kubernetes cluster and Kubelet. Adjusts eviction behavior based on resource availability over specified durations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Launch Log\nDESCRIPTION: JSON log entry showing successful launch of a node with instance details and capacity information.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:19.028Z\",\n    \"message\": \"launched nodeclaim\",\n    \"controller\": \"nodeclaim.lifecycle\",\n    \"NodeClaim\": {\n        \"name\": \"default-sfpsl\"\n    },\n    \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n    \"instance-type\": \"c3.2xlarge\",\n    \"zone\": \"us-west-2b\",\n    \"capacity-type\": \"spot\",\n    \"allocatable\": {\n      \"cpu\": \"7910m\",\n      \"ephemeral-storage\": \"17Gi\",\n      \"memory\": \"13215Mi\",\n      \"pods\": \"58\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Legacy Launch Templates for v0.14.0\nDESCRIPTION: Commands to identify and delete launch templates that match the old naming pattern in v0.14.0, which changes from a name-based scheme to a tag-based scheme for launch template discovery.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n## Find launch templates that match the naming pattern and you do not want to keep\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n\n## Delete launch template(s) that match the name but do not have the \"karpenter.k8s.aws/cluster\" tag\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraint Configuration\nDESCRIPTION: Configuration for topology spread constraints that ensures even distribution of workloads across nodes based on capacity-spread labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Instance Profile Tagging for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to tag instance profiles. It restricts tagging to profiles associated with the specified cluster and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Leader Election Metrics Documentation\nDESCRIPTION: Metrics for monitoring leader election processes, including lease renewal performance and master status indicators.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/metrics.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nleader_election_slowpath_total\nleader_election_master_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt for Karpenter AWS Provider\nDESCRIPTION: This robots.txt file instructs web crawlers on which parts of the Karpenter AWS Provider website they can access. It blocks access to the v0.4.3-docs directory while allowing access to the main docs directory and index.html. It also specifies the sitemap location.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/layouts/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n\nDisallow: /v0.4.3-docs/\n\nAllow: /docs/\nAllow: /index.html\n\nSITEMAP: https://karpenter.sh/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Health Events Rule for Karpenter in YAML\nDESCRIPTION: CloudFormation template defining an EventBridge rule that captures AWS Health Events and sends them to Karpenter's interruption queue. This allows Karpenter to respond to AWS service health notifications that might affect node availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Example AWS Auth ConfigMap YAML\nDESCRIPTION: This YAML snippet shows an example aws-auth ConfigMap. It maps IAM roles to Kubernetes groups and usernames, allowing nodes to join the cluster. The `rolearn` specifies the IAM role ARN, and `username` defines the user identity.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\\ndata:\\n  mapRoles: |\\n     - groups:\\n        - system:bootstrappers\\n        - system:nodes\\n        rolearn: arn:aws:iam::973227887653:role/eksctl-johnw-karpenter-demo-NodeInstanceRole-72CV61KQNOYS\\n        username: system:node:{{EC2PrivateDNSName}}\\n     - groups:\\n        - system:bootstrappers\\n        - system:nodes\\n        rolearn: arn:aws:iam::973227887653:role/KarpenterNodeRole-johnw-karpenter-demo\\n        username: system:node:{{EC2PrivateDNSName}}\\n  mapUsers: |\\n      []\\n  kind: ConfigMap\\n  ...\\n    \"\n```\n\n----------------------------------------\n\nTITLE: Karpenter v1 Final Migration Configuration\nDESCRIPTION: Final v1 configuration with separate EC2NodeClasses for different kubelet configurations, ready for v1.1 upgrade.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: nodepool-a\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: nodeclass-a\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: nodepool-b\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: nodeclass-b\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: nodeclass-a\nspec:\n  kubelet:\n    maxPods: 10\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: nodeclass-b\nspec:\n  kubelet:\n    maxPods: 20\n```\n\n----------------------------------------\n\nTITLE: AMI Selection Configuration in AWS Karpenter\nDESCRIPTION: Examples of AMI selection patterns using aliases, tags, names, and IDs for Karpenter node configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - name: my-ami\n  - id: ami-123\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - alias: al2023@v20240807\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n      owner: self\n    - name: my-ami\n      owner: \"0123456789\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*EKS*\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - id: \"ami-123\"\n    - id: \"ami-456\"\n```\n\n----------------------------------------\n\nTITLE: Pluralized Constraints Configuration\nDESCRIPTION: Example showing the new pluralized format for operating system and architecture constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1alpha4-api.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  operatingSystems: [\"linux\", \"windows\"] # operatingSystem -> operatingSystems\n  architectures: [\"amd64\", \"arm64\"] # architecture -> architectures\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Retry Count Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go retry attempts per request.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_retry_count`\nThe total number of AWS SDK Go retry attempts per request\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Current Status Seconds Metric\nDESCRIPTION: Describes the deprecated metric for measuring the current time a status condition has been in a specific state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_current_status_seconds`\nThe current amount of time in seconds that a status condition has been in a specific state. Alarm := P99(Updated=Unknown) > 5 minutes\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Configuring Public IP Association in EC2NodeClass for Karpenter\nDESCRIPTION: YAML configuration to explicitly set whether instances created by Karpenter should have an associated public IP address, overriding subnet settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  associatePublicIPAddress: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Profile Management IAM Policy\nDESCRIPTION: IAM policy for managing instance profile lifecycle including adding/removing roles and deletion operations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI using Alias\nDESCRIPTION: This YAML snippet demonstrates how to pin an AMI using alias and a fixed version, which pulls that specific version of the AMI, matching the Kubernetes control plane version of your cluster. If the Kubernetes cluster is upgraded, Karpenter will automatically drift the nodes to a new AMI that still matches the AMI version but also matches the new K8s control plane version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Using alias\n# Pinning to this fixed version alias will pull this version of the AMI,\n# matching the K8s control plane version of your cluster\namiSelectorTerms:\n- alias: al2023@v20240219\"\n```\n\n----------------------------------------\n\nTITLE: Authentication with ECR for Docker\nDESCRIPTION: This snippet logs into the ECR repository using the AWS CLI to authenticate your Docker daemon. Ensure that required AWS credentials are configured.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Team B Deployment Configuration in Kubernetes\nDESCRIPTION: Kubernetes deployment configuration that specifies team-specific node selection using labels. The deployment creates 5 replicas and targets nodes labeled for team-b.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Profile Tag Actions IAM Policy\nDESCRIPTION: IAM policy for tagging instance profiles with cluster and region-specific conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Name with Wildcard\nDESCRIPTION: YAML configuration example for selecting AMIs by name using a wildcard pattern.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*EKS*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AllowPassingInstanceRole IAM Policy\nDESCRIPTION: IAM policy that allows Karpenter to pass the node role to generated instance profiles. Enables EC2 to use KarpenterNodeRole when launching nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration with EBS Startup Taints\nDESCRIPTION: YAML configuration showing how to configure startup taints in a Karpenter NodePool to handle EBS volume attachment race conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Configuring EventBridge Rules for Spot Interruptions and Rebalance Recommendations in AWS CLI\nDESCRIPTION: Examples of AWS CLI commands to set up EventBridge rules for monitoring Spot interruption notifications and instance rebalance recommendations, and directing these events to an SQS queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example spot interruption notification EventBridge rule\naws events put-rule \\\n --name MyK8sSpotTermRule \\\n --event-pattern \"{\\\"source\\\": [\\\"aws.ec2\\\"],\\\"detail-type\\\": [\\\"EC2 Spot Instance Interruption\\\"]}\"\n\n# Example rebalance recommendation EventBridge rule\naws events put-rule \\\n --name MyK8sRebalanceRule \\\n --event-pattern \"{\\\"source\\\": [\\\"aws.ec2\\\"],\\\"detail-type\\\": [\\\"EC2 Instance Rebalance Recommendation\\\"]}\"\n\n# Example targeting an SQS queue\naws events put-targets --rule MyK8sSpotTermRule \\\n --targets \"Id=1,Arn=arn:aws:sqs:us-east-1:123456789012:MyK8sTermQueue\"\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Name Tag\nDESCRIPTION: YAML configuration example for selecting an AMI by its Name tag.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - tags:\n        Name: my-ami\n```\n\n----------------------------------------\n\nTITLE: Setting Do-Not-Disrupt Annotation on Kubernetes Node\nDESCRIPTION: Example of adding the karpenter.sh/do-not-disrupt annotation to a Node resource to prevent Karpenter from choosing to voluntarily disrupt the node. This provides node-level protection against voluntary disruption actions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection Configuration in EC2NodeClass for Karpenter\nDESCRIPTION: Example of subnet selector terms in the spec and the resulting status showing selected subnets, sorted by available IP address count.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass Drift Fields Table\nDESCRIPTION: Table showing EC2NodeClass fields that are monitored for drift detection\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields                        |\n|-------------------------------|\n| spec.subnetSelectorTerms      |\n| spec.securityGroupSelectorTerms  |\n| spec.amiSelectorTerms  |\n```\n\n----------------------------------------\n\nTITLE: Tagging Security Groups for Karpenter\nDESCRIPTION: Tags the security groups associated with the first nodegroup in the cluster for Karpenter to use.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step06-tag-security-groups.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI using ID\nDESCRIPTION: This YAML snippet demonstrates how to pin an AMI using its specific ID. This is the most precise way to ensure that Karpenter selects a specific AMI, as the ID is unique to each AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Using id\n# This will only ever select this specific AMI id\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool with Trunk Attachment Label for Security Groups\nDESCRIPTION: This YAML snippet shows how to add the 'vpc.amazonaws.com/has-trunk-attached: \"false\"' label to a Karpenter NodePool spec. This is a workaround for issues with Security Groups for Pods where pods get stuck in 'ContainerCreating' state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Pricing Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows the Karpenter controller to get product pricing information for all related resources across all regions, as pricing information may not exist in every region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging User Data for AL2 AMI (Bash Script)\nDESCRIPTION: Example of how custom user data in bash script format is merged with Karpenter's default user data for AL2 AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script (bash)\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Enabling Drift Feature Gate in Karpenter\nDESCRIPTION: Example of enabling the Drift feature gate using CLI arguments in Karpenter. Feature gates control optional features like Drift, which was alpha in v0.21.x to v0.32.x and became beta in v0.33.x.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--feature-gates Drift=true\n```\n\n----------------------------------------\n\nTITLE: Adding Node Affinity to Match NodePool Zone Constraints\nDESCRIPTION: YAML snippet showing how to add required node affinity to a pod specification to match the zonal constraints of a NodePool, ensuring all eligible domains for the pod can be provisioned.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Instance Rebalance Rule for Karpenter\nDESCRIPTION: Creates an EventBridge rule to capture EC2 Instance Rebalance Recommendation events and send them to the Karpenter interruption queue\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Update AWSNodeTemplate CRD (v0.12.0)\nDESCRIPTION: This command deletes the old `awsnodetemplate` CRD and applies the updated `awsnodetemplates` CRD.  This is needed because Helm does not manage the lifecycle of CRDs. The `awsnodetemplate` CRD was renamed to `awsnodetemplates` in `0.12.0`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete crd awsnodetemplate\n\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.12.1/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: CreateFleet Capacity Reservation Configuration Table\nDESCRIPTION: Comprehensive table showing different combinations of ODCR targeting, usageStrategy, and capacityReservationPreference settings and their resulting behaviors in AWS CreateFleet API.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| ODCR Targeting                      | `usageStrategy`                  | `capacityReservationPreference` | Result                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n|-------------------------------------|----------------------------------|---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Yes, targeting `targeted` or `open` | `use-capacity-reservation-first` | `null` (default `open`)         | CreateFleet will not use any launch templates that target capacity reservations when using `usageStrategy: use-capacity-reservation-first`.                                                                                                                                                                                                                                                                                                                                                |\n| No                                  | `use-capacity-reservation-first` | `null` (default `open`)         | CreateFleet will find available open ODCRs and prioritize launching into these before launching regular on-demand capacity. These ODCRs will be ordered by the `lowest-price` allocation strategy. Once all open ODCRs from passed-through instance type/availability zone combinations have been exhausted, Fleet will launch standard on-demand capacity -- even if targeted ODCRs are available.                                                                                        |\n| Yes, targeting `targeted` or `open` | `null`                           | `null` (default `open`)         | CreateFleet does not have any knowledge about ODCRs in this mode will use the `lowest-price` allocation strategy to order the instance types/availability zones. When specifying multiple ODCRs in separate launch templates and running out of capacity in one ODCR, CreateFleet will automatically select the other ODCR that has capacity. When all ODCRs are exhausted, CreateFleet will return `ReservationCapacityExceeded` rather than falling back to standard on-demand capacity. |\n| No                                  | `null`                           | `null` (default `open`)         | This is the current state today. CreateFleet has no knowledge about capacity reservations and will not specifically try to launch into them. If a user gets lucky and Fleet happens to launch into an instance type/availability zone combination that _happens_ to match an open ODCR, then the instance will be attached to this ODCR.                                                                                                                                                   |\n| No                                  | `null`                           | `none`                          | CreateFleet has no knowledge about capacity reservations and will not specifically try to launch into them. If a user gets lucky and Fleet happens to launch into an instance type/availability zone combination that _happens_ to match an open ODCR, __the instance will not join the ODCR and will become standard on-demand capacity due to the `capacityReservationPreference`.__                                                                                                     |\n| Yes, targeting `targeted` or `open` | `null`                           | `none`                          | Errors on launch. A capacity reservation preference of `none` cannot be used while targeting ODCRs in the launch template.                                                                                                                                                                                                                                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Team-Specific Deployment with NodeSelectors\nDESCRIPTION: Example showing how to configure a deployment with team-specific node selectors to ensure workload isolation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Replacing CRDs for Karpenter AWS Provider using Bash\nDESCRIPTION: These commands demonstrate how to manually replace Kubernetes CRDs for specific versions of the Karpenter AWS provider. This is necessary to introduce new parameters or fields added in newer versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete crd awsnodetemplate\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.13.2/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.12.1/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Selecting Capacity Reservations by Tags\nDESCRIPTION: YAML configuration example for selecting capacity reservations using tags with multiple terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  capacityReservationSelectorTerms:\n  # Select all capacity reservations which have both matching tags\n  - tags:\n      key1: foo\n      key2: bar\n  # Additionally, select all capacity reservations with the following matching tag\n  - tags:\n      key3: foobar\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter with Debug Logging\nDESCRIPTION: Helm command to upgrade or install Karpenter with debug logging enabled using the public ECR repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Karpenter's AWS Infrastructure\nDESCRIPTION: This snippet outlines the command to delete the Karpenter cluster resources and remove demo infrastructure from AWS to avoid charges.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step17-cleanup.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Required IAM Permissions for Karpenter's SQS and EventBridge Integration\nDESCRIPTION: List of IAM permissions required for Karpenter to manage SQS queues and EventBridge rules for handling Spot interruptions and rebalance recommendations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sqs:GetQueueUrl\",\n\"sqs:ListQueues\",\n\"sqs:ReceiveMessage\",\n\"sqs:CreateQueue\",\n\"sqs:DeleteMessage\",\n\"events:ListRules\",\n\"events:DescribeRule\",\n\"events:PutRule\", \n\"events:PutTargets\",\n\"events:DeleteRule\",\n\"events:RemoveTargets\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Count Metric in Markdown\nDESCRIPTION: Describes the deprecated metric for counting conditions for a given object, type and status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_count`\nThe number of an condition for a given object, type and status. e.g. Alarm := Available=False > 0\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Querying EC2 Instance Metadata Service for Spot Interruption Information in Bash\nDESCRIPTION: Examples showing how to query the EC2 Instance Metadata Service to check for both termination notices and rebalance recommendations. These HTTP API calls can only be executed locally on an EC2 instance.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Termination Check\ncurl 169.254.169.254/latest/meta-data/spot/instance-action\n{\n    \"action\": \"terminate\",\n    \"time\": \"2022-07-11T17:11:44Z\"\n}\n\n# Rebalance Check\ncurl 169.254.169.254/latest/meta-data/events/recommendations/rebalance\n{\n    \"noticeTime\": \"2022-07-16T19:18:24Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting All AMIs Under an Owner\nDESCRIPTION: YAML configuration example for selecting all AMIs under a specific owner using a wildcard.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*\"\n      owner: self\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Instance Type Offering Price Estimate Metric\nDESCRIPTION: Describes the metric for estimating the hourly price of instance type offerings, based on various attributes like capacity type and zone.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_offering_price_estimate`\nInstance type offering estimated hourly price used when making informed decisions on node cost calculation, based on instance type, capacity type, and zone.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings\nDESCRIPTION: Example of configuring EBS volume settings including size, type, encryption, and performance parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Karpenter Provisioner with AWS Labels\nDESCRIPTION: Example YAML configuration for a Karpenter Provisioner showing the current structure including AWS-specific labels for launch templates and capacity type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nmetadata:\n  name:\nspec:\n  cluster:\n    name:\n    caBundle:\n    endpoint:\n  architecture:\n  taints:\n    - key:\n      effect:\n  zones:\n    -\n  instanceTypes:\n    -\n  ttlSeconds:\n  # Labels will be applied to every node launched by the Provisioner unless\n  # overridden by pod node selectors. Well known labels control provisioning\n  # behavior. Additional labels may be supported by your cloudprovider.\n  labels:\n    # These are AWS-specific\n    kubernetes.amazonaws.com/launchTemplateId:\n    kubernetes.amazonaws.com/launchTemplateVersion:\n    kubernetes.amazonaws.com/capacityType:\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Profile Read Actions IAM Policy\nDESCRIPTION: IAM policy allowing Karpenter to read instance profile information using GetInstanceProfile action.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMIs Using ID in EC2NodeClass\nDESCRIPTION: YAML configuration showing how to pin an AMI using its specific ID. This is the most precise method of selecting an AMI, ensuring that only the exact specified AMI is used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: AMI Selection Using Exact Name\nDESCRIPTION: Shows how to select a specific AMI by its exact name, which will only ever select that particular AMI version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Setting up IAM Permissions for Karpenter\nDESCRIPTION: This command deploys IAM permissions necessary for Karpenter, including permissions needed for provisioning nodes within AWS. Ensure the AWS environment is configured properly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Managing Karpenter within Kubernetes Cluster Using Makefile\nDESCRIPTION: This snippet shows how to install and uninstall Karpenter in a specified Kubernetes cluster using make commands. Ensure `kubectl` is configured with access to the target cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue Policy in AWS CloudFormation\nDESCRIPTION: Defines an AWS SQS queue policy for the Karpenter interruption queue. It allows specific AWS services to send messages to the queue and enforces HTTPS connections for security.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Example of Karpenter UserData Merging with MIME Format\nDESCRIPTION: An example showing how Karpenter handles MIME multi-part UserData format. Karpenter preserves the passed-in MIME parts and adds its own part for bootstrapping the node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"BOUNDARY\"\n\n--BOUNDARY\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--BOUNDARY--\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Tagging in AWS IAM Policy\nDESCRIPTION: This policy allows EC2 CreateTags actions on instances created by Karpenter after their creation. It enforces that Karpenter can only update tags on cluster instances it operates on, with specific conditions for cluster and nodepool tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NodePool Behavioral Fields Table\nDESCRIPTION: Table showing NodePool behavioral fields that control Karpenter's provisioning and disruption logic but are not considered for drift\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields              |\n|---------------------|\n| spec.weight         |\n| spec.limits         |\n| spec.disruption.*   |\n```\n\n----------------------------------------\n\nTITLE: NodePool Behavioral Fields Table\nDESCRIPTION: Table listing NodePool fields considered as behavioral settings that control Karpenter's provisioning and disruption logic but are not considered for drift detection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields              |\n|---------------------|\n| spec.weight         |\n| spec.limits         |\n| spec.disruption.*   |\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Role for Karpenter EC2NodeClass\nDESCRIPTION: Specifies the IAM role that nodes should assume. This field is optional but either role or instanceProfile must be specified when creating an EC2NodeClass.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-$CLUSTER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Device Mappings in EC2NodeClass\nDESCRIPTION: Example of configuring EBS volume settings including size, type, encryption and other parameters for EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 100Gi\n        volumeType: gp3\n        iops: 10000\n        encrypted: true\n        kmsKeyID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        deleteOnTermination: true\n        throughput: 125\n        snapshotID: snap-0123456789\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Deployment in Karpenter\nDESCRIPTION: This bash script deletes a deployment, prompting Karpenter to terminate empty nodes based on the consolidation policy set within the NodePool configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step14-deprovisioning.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioner Configuration with ENI Trunking Label\nDESCRIPTION: YAML configuration for Karpenter Provisioner with vpc.amazonaws.com/has-trunk-attached label to handle Security Groups for Pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: default\nspec:\n  labels:\n    vpc.amazonaws.com/has-trunk-attached: \"false\"\n  ttlSecondsAfterEmpty: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Volume Topology with EBS StorageClass in Kubernetes\nDESCRIPTION: YAML configuration demonstrating how Karpenter handles storage requirements by defining a pod with a PVC, an EBS StorageClass with zonal topology for us-west-2a and us-west-2b, and a PersistentVolumeClaim. This setup enables zone-aware scheduling with volume binding mode WaitForFirstConsumer.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers: ...\n  volumes:\n    - name: storage\n      persistentVolumeClaim:\n        claimName: ebs-claim\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: ebs\nprovisioner: ebs.csi.aws.com\nvolumeBindingMode: WaitForFirstConsumer\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values: [\"us-west-2a\", \"us-west-2b\"]\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ebs-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: ebs\n  resources:\n    requests:\n      storage: 4Gi\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Tagging Policy\nDESCRIPTION: IAM policy permitting EC2 CreateTags actions during resource creation with cluster and nodepool tag requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Environment Variables\nDESCRIPTION: Sets up essential environment variables for Karpenter installation including namespace, version, and Kubernetes version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nexport KARPENTER_VERSION=\"1.1.5\"\nexport K8S_VERSION=\"1.31\"\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Terms Configuration\nDESCRIPTION: This YAML snippet configures AMI selector terms, specifying tags that Karpenter should use when selecting AMIs for nodes.  It requires a CLUSTER_NAME environment variable to be set and assumes that the selected AMIs are part of a production environment.  The selector ensures that Karpenter only selects AMIs that are tagged with the specified cluster name and environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"amiSelectorTerms:\\n- tags:\\n    karpenter.sh/discovery: \\\"${CLUSTER_NAME}\\\"\\n    environment: prod\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection using Wildcards in Karpenter\nDESCRIPTION: This YAML snippet shows how to use wildcards for subnet name selection in Karpenter.  The configuration selects subnets whose names contain 'Public'.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  subnetSelectorTerms:\\n    - tags:\\n        Name: \\\"*Public*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Instance Rebalance Recommendation Rule for Karpenter\nDESCRIPTION: Defines an EventBridge rule to capture EC2 Instance Rebalance Recommendations and send them to the Karpenter interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nRebalanceRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance Rebalance Recommendation\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for Karpenter 0.15.0\nDESCRIPTION: Updates the provisioners.karpenter.sh CRD to v1alpha5 which adds a new consolidation field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Node for Team B\nDESCRIPTION: This YAML snippet defines a Kubernetes Node resource with a label identifying it as belonging to Team B. This label corresponds to the nodeSelector used in the Team B deployment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection by IDs in EC2NodeClass\nDESCRIPTION: Example of subnet selection using subnet IDs in EC2NodeClass. This allows direct selection of specific subnets by their IDs instead of relying on tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - id: \"subnet-09fa4a0a8f233a921\"\n    - id: \"subnet-0471ca205b8a129ae\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Unsynced Time Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the time for which cluster state is not synced.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_unsynced_time_seconds`\nThe time for which cluster state is not synced\n- Stability Level: ALPHA\n```\n\n----------------------------------------\n\nTITLE: Updating AWSnodetemplate CRD for v0.13.0\nDESCRIPTION: Command to update the awsnodetemplates CRD for v0.13.0+, required when upgrading from v0.10.1-v0.11.1 to handle the CRD rename from awsnodetemplate to awsnodetemplates.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.13.2/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Commands to Verify Security Group Selector Terms - Bash\nDESCRIPTION: This bash snippet provides commands to verify whether the security group selection for the specified Karpenter cluster is constrained correctly, ensuring compliance with AWS Load Balancer controller requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_VPC_ID=\"$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.resourcesVpcConfig.vpcId --output text)\"\n\naws ec2 describe-security-groups --filters Name=vpc-id,Values=$CLUSTER_VPC_ID Name=tag-key,Values=kubernetes.io/cluster/$CLUSTER_NAME --query 'SecurityGroups[].[GroupName]' --output text\n\n```\n\n----------------------------------------\n\nTITLE: Ubuntu NodeClass Example in YAML\nDESCRIPTION: Example EC2NodeClass configuration for using Ubuntu with the AL2 AMI family. Shows how to specify AMI selector terms and block device mappings after Ubuntu support was dropped in Karpenter v1.0.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Removing IAM Role from Instance Profile - AWS CLI\nDESCRIPTION: This snippet demonstrates how to remove an IAM role from an instance profile and then delete the instance profile using the AWS CLI. It relies on environment variables for the cluster name to construct the role and instance profile names. This is useful for cleaning up old alpha resources when migrating to newer Karpenter versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"ROLE_NAME=\\\"KarpenterNodeRole-${CLUSTER_NAME}\"\\nINSTANCE_PROFILE_NAME=\\\"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\\\"\\naws iam remove-role-from-instance-profile --instance-profile-name \\\"${INSTANCE_PROFILE_NAME}\\\" --role-name \\\"${ROLE_NAME}\\\"\\naws iam delete-instance-profile --instance-profile-name \\\"${INSTANCE_PROFILE_NAME}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Building Karpenter Images Without Deployment\nDESCRIPTION: Command to build and push Karpenter container images to your repository without deploying them to the cluster, useful for creating images for testing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: Viewing CNI IP Allocation Failure Error\nDESCRIPTION: This bash snippet shows an example error message that may appear when the CNI fails to allocate an IP address to a pod. This can occur due to various reasons, including exceeding the maximum supported pod density for a node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Batcher Batch Size Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the size of the request batch per batcher.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_batcher_batch_size`\nSize of the request batch per batcher\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Default OS and Architecture Requirements\nDESCRIPTION: YAML configurations for default Linux and AMD64 architecture requirements\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  requirements:\n  - key: kubernetes.io/os\n    operator: In\n    values: [\"linux\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  requirements:\n  - key: kubernetes.io/arch\n    operator: In\n    values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Scheduling Statistics Metrics Schema\nDESCRIPTION: Defines metrics for tracking node termination and pod startup performance.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                   | Type      | Labels | Description                                        |\n|--------------------------------------------------------|-----------|--------|----------------------------------------------------||\n| `karpenter_nodes_termination_time_seconds`             | Summary   | None   | [Measurement Definitions](#measurement-definitions) | \n| `karpenter_pods_startup_time_seconds`                  | Summary   | None   | [Measurement Definitions](#measurement-definitions) |\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for AL2 AMI in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Example of user data configuration for Amazon Linux 2 AMI. This snippet demonstrates how to add SSH keys to allow remote login to the node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Attaching IAM Policies to Karpenter Node Role\nDESCRIPTION: Attaches the required AWS managed policies to the Karpenter node IAM role to provide necessary permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step03-node-policies.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring MapRoles in aws-auth ConfigMap\nDESCRIPTION: YAML configuration to add to the aws-auth ConfigMap, allowing nodes with the Karpenter node role to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  ## If you intend to run Windows workloads, the kube-proxy group should be specified.\n  # For more information, see https://github.com/aws/karpenter/issues/5099.\n  # - eks:kube-proxy-windows\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Profiling Karpenter Memory with pprof\nDESCRIPTION: Commands to install prerequisites, connect to the metrics endpoint, and visualize memory usage using pprof.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew install graphviz\ngo install github.com/google/pprof@latest\n\n# Connect to the metrics endpoint\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\n# Visualize the memory\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: AWS Auth ConfigMap Node Role Entry\nDESCRIPTION: YAML snippet to add to the aws-auth ConfigMap that grants permissions for Karpenter-provisioned nodes to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  ## If you intend to run Windows workloads, the kube-proxy group should be specified.\n  # For more information, see https://github.com/aws/karpenter/issues/5099.\n  # - eks:kube-proxy-windows\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped Resource Deletion - IAM Policy\nDESCRIPTION: IAM policy statement permitting termination of EC2 instances and deletion of launch templates managed by Karpenter. Enforces tag-based access control for resource deletion.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Karpenter Log Output in JSON\nDESCRIPTION: These JSON snippets represent various log outputs from Karpenter during the node creation process. They include information about provisionable pods, computed NodeClaims, created NodeClaims, launched NodeClaims, registered NodeClaims, and initialized NodeClaims.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"found provisionable pod(s)\",\n    \"commit\": \"490ef94\",\n    \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n    \"duration\": \"100.761702ms\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n    \"controller\": \"provisioner\",\n    \"nodeclaims\": 1,\n    \"pods\": 5\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.128Z\",\n    \"message\": \"created nodeclaim\",\n    \"controller\": \"provisioner\",\n    \"NodePool\": {\n        \"name\":\"default\"\n    },\n    \"NodeClaim\": {\n        \"name\":\"default-sfpsl\"\n    },\n    \"requests\": {\n        \"cpu\":\"5150m\",\n        \"pods\":\"8\"\n    },\n    \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:19.028Z\",\n    \"message\": \"launched nodeclaim\",\n    \"controller\": \"nodeclaim.lifecycle\",\n    \"NodeClaim\": {\n        \"name\": \"default-sfpsl\"\n    },\n    \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n    \"instance-type\": \"c3.2xlarge\",\n    \"zone\": \"us-west-2b\",\n    \"capacity-type\": \"spot\",\n    \"allocatable\": {\n      \"cpu\": \"7910m\",\n      \"ephemeral-storage\": \"17Gi\",\n      \"memory\": \"13215Mi\",\n      \"pods\": \"58\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:26:19.028Z\",\n  \"message\": \"registered nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:24:52.642Z\",\n  \"message\": \"initialized nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"7910m\",\n    \"ephemeral-storage\": \"18242267924\",\n    \"hugepages-2Mi\": \"0\",\n    \"memory\": \"14320468Ki\",\n    \"pods\": \"58\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Regional Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to perform various read-only actions on EC2 resources within the current AWS region. It includes permissions for describing instances, images, subnets, and other EC2-related resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for AL2 AMI with SSH Keys (YAML)\nDESCRIPTION: Example of configuring user data for an Amazon Linux 2 AMI in an EC2NodeClass specification. It demonstrates adding SSH keys for remote login.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: al2-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    mkdir -p ~ec2-user/.ssh/\n    touch ~ec2-user/.ssh/authorized_keys\n    cat >> ~ec2-user/.ssh/authorized_keys <<EOF\n    {{ insertFile \"../my-authorized_keys\" | indent 4  }}\n    EOF\n    chmod -R go-w ~ec2-user/.ssh/authorized_keys\n    chown -R ec2-user ~ec2-user/.ssh\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Policy Using CloudFormation - YAML\nDESCRIPTION: This snippet defines the KarpenterControllerPolicy, an IAM managed policy for the Karpenter controller. It allows scoped permissions based on the specific cluster name to manage EC2 resources effectively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    PolicyDocument: !Sub |\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Instance Profile in EC2NodeClass Status\nDESCRIPTION: Example showing how the instance profile is resolved and displayed in the status field based on the specified role in the EC2NodeClass spec.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePools and Deployment with Topology Spread Constraints in Kubernetes\nDESCRIPTION: Example configuration showing NodePool and Deployment specifications with topology spread constraints across availability zones. Demonstrates how to properly configure zonal constraints and node selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Instance Profile Configuration\nDESCRIPTION: Example showing instance profile resolution from a specified role in EC2NodeClass.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Default Disruption Configuration\nDESCRIPTION: This YAML snippet shows the default configuration for Karpenter's disruption policy, specifically the consolidation settings. It specifies when the disruption should be enacted based on node utilization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Downloading CloudFormation Template for Karpenter Setup in Bash\nDESCRIPTION: Demonstrates how to download a specific version of the Karpenter CloudFormation template using curl. This template is used to bootstrap Karpenter's permissions and resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.3.3\"\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/v\"${KARPENTER_VERSION}\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodePool Configuration with GPU Taint\nDESCRIPTION: Example of a Karpenter NodePool configured for GPU workloads using the p3 instance family and a taint to prevent non-GPU workloads from being scheduled on these nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Pod Scheduling Based on Network Bandwidth Requirements\nDESCRIPTION: This YAML snippet shows how to configure pod affinity to require nodes with at least 50 Gbps of network bandwidth, using the `Gt` operator with Karpenter's well-known labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n              operator: Gt\n              values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Monitoring Karpenter Logs in Kubernetes Cluster with AWS\nDESCRIPTION: Commands to set up the Karpenter namespace environment variable and monitor Karpenter logs in real-time. This helps track the NodeClaim creation process in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: AWS Launch Template Example - EC2 Describe Response\nDESCRIPTION: Example AWS CLI response showing a minimal launch template configuration for customizing EBS volume settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-v2.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"LaunchTemplateVersions\": [\n        {\n            \"LaunchTemplateId\": \"lt-123\",\n            \"LaunchTemplateName\": \"karpenter-lt-example\",\n            \"VersionNumber\": 1,\n            \"CreateTime\": \"2022-02-02T23:41:05+00:00\",\n            \"CreatedBy\": \"arn:aws:sts::123:assumed-role/me\",\n            \"DefaultVersion\": true,\n            \"LaunchTemplateData\": {\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvdb\",\n                        \"Ebs\": {\n                            \"Iops\": 3000,\n                            \"VolumeSize\": 30,\n                            \"VolumeType\": \"gp3\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner with x86_64 Launch Template\nDESCRIPTION: Example of a provisioner configured with a launch template that uses an x86_64 AMI, which could conflict with ARM64 pod requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nspec:\n  labels:\n      node.k8s.aws/launch-template-name: name-of-lt-with-x86_64-based-ami\n```\n\n----------------------------------------\n\nTITLE: KMS Key Policy for EBS Encryption\nDESCRIPTION: Example KMS key policy for EBS volume encryption access\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: AllowScopedEC2LaunchTemplateAccessActions Policy Statement\nDESCRIPTION: JSON policy statement allowing Karpenter to access specific EC2 launch templates for RunInstances and CreateFleet actions, with conditions on resource tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2LaunchTemplateAccessActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs for CNI Plugin - Bash\nDESCRIPTION: This command retrieves the logs of a specific 'aws-node' pod within the kube-system namespace to further investigate networking issues possibly caused by the CNI plugin.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Karpenter\nDESCRIPTION: This snippet outlines commands to build and deploy Karpenter images, run tests, and lint the code. It also shows how to update local dependencies and produce a build image.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Tag\nDESCRIPTION: YAML configuration example for selecting AMIs based on a specific tag with wildcard value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n```\n\n----------------------------------------\n\nTITLE: NodePool Spec with Zone Requirement\nDESCRIPTION: Defines a NodePool with a requirement for nodes to exist in any availability zone. This NodePool doesn't constrain the zone, allowing pods to launch in any zone.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nappVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData for AL2023 in Karpenter AWS Provider\nDESCRIPTION: Example of passed-in NodeConfig UserData for AL2023 and how it's merged with Karpenter-generated NodeConfig. The custom UserData sets maxPods to 42, while Karpenter adds cluster and kubelet configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Duration Parameters in Karpenter\nDESCRIPTION: Examples of how to specify time values for batch configuration parameters. These settings control how Karpenter batches incoming pods, affecting the tradeoff between node size and provisioning speed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n10s, 1m, 2h45m\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Manual Karpenter Deployment in YAML\nDESCRIPTION: This YAML snippet shows how to configure logging for a manual Karpenter deployment. It demonstrates the addition of volume mounts and volumes to the deployment specification to support the new logging mechanism.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n    ...\n      containers:\n      - name: controller\n        volumeMounts:\n        - name: config-logging\n          mountPath: /etc/karpenter/logging\n      volumes:\n      - name: config-logging\n        configMap:\n          name: config-logging\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Transitions Metric in Markdown\nDESCRIPTION: Describes the deprecated metric for counting transitions of a given object, type and status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_transitions_total`\nThe count of transitions of a given object, type and status.\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Generating Karpenter Deployment YAML\nDESCRIPTION: Generates a complete Karpenter deployment YAML file from the Helm chart using the configured environment variables.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step08-generate-chart.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Applying Converted NodePool Resource\nDESCRIPTION: Applies the newly converted NodePool Kubernetes resource to replace the deprecated Provisioner resource.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f nodepool.yaml\n```\n\n----------------------------------------\n\nTITLE: Required VPC Endpoints for Karpenter in Private Cluster\nDESCRIPTION: This snippet lists the AWS VPC endpoints necessary for Karpenter to function within a private cluster. These endpoints enable Karpenter to access EC2, ECR, S3, STS, SSM, SQS, and EKS services without requiring public internet access. Replace `<region>` with your AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"com.amazonaws.<region>.ec2\\ncom.amazonaws.<region>.ecr.api\\ncom.amazonaws.<region>.ecr.dkr\\ncom.amazonaws.<region>.s3 – For pulling container images\\ncom.amazonaws.<region>.sts – For IAM roles for service accounts\\ncom.amazonaws.<region>.ssm - For resolving default AMIs\\ncom.amazonaws.<region>.sqs - For accessing SQS if using interruption handling\\ncom.amazonaws.<region>.eks - For Karpenter to discover the cluster endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Metadata Options in Karpenter\nDESCRIPTION: Default configuration for EC2 instance metadata service options, including HTTP endpoint settings and security tokens.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: SSM Parameter Read Policy\nDESCRIPTION: IAM policy allowing access to AWS service-generated SSM parameters in the current region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: NodePool Spec with Zonal Constraint\nDESCRIPTION: Defines a NodePool with a requirement for nodes to exist in specific availability zones (us-east-1a, us-east-1b). This NodePool limits pod placement to these zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nappVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n```\n```\n\n----------------------------------------\n\nTITLE: Tagging Security Groups for Karpenter\nDESCRIPTION: Tags the security groups associated with the first nodegroup in the cluster so Karpenter knows which security groups to use for new nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step06-tag-security-groups.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Creating Karpenter NodePool\nDESCRIPTION: Defines a Karpenter NodePool configuration for managing AWS EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [c, m, r]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n        - key: kubernetes.io/arch\n          operator: In\n          values: [amd64]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"spot\", \"on-demand\"]\n      nodeClassRef:\n        name: default\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n  limits:\n    cpu: 1000\n    memory: 1000Gi\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Provisioner Preferences in YAML for Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to define a Karpenter Provisioner with preferences. It includes requirements for architecture and preferences with weights, allowing for more flexible scheduling decisions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: preference\nspec:\n  requirements:\n  - key: kubernetes.io/arch\n    operator: In\n    values: [\"amd64\", \"arm64\"]\n  preferences:\n  - key: kubernetes.io/arch\n    operator: In\n    values: [\"amd64\"]\n    weight: 100\n```\n\n----------------------------------------\n\nTITLE: Merged MIME Format UserData for AL2023 in Karpenter\nDESCRIPTION: Example of how Karpenter merges a MIME multi-part UserData with its generated configuration. The merged output combines all sections while adding Karpenter's generated NodeConfig.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_59\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Queue for Interruption Handling with YAML\nDESCRIPTION: This CloudFormation YAML resource defines an Amazon SQS standard queue, `KarpenterInterruptionQueue`, used for handling instance-related notifications. It sets properties such as `QueueName`, `MessageRetentionPeriod`, and enables server-side encryption to ensure secure message handling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n\n```\n\n----------------------------------------\n\nTITLE: Resource and Scaling Limits Configuration\nDESCRIPTION: Example demonstrating the new limits field for controlling scaling and resource allocation constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1alpha4-api.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  limits:\n    unready: 20% # Flat or Percentage. Karpenter will not launch additional capacity if current unready nodes exceeds this value\n    resources: # Karpenter will not launch additional capacity if current capacity exceeds this value\n      cpu: 1000\n      memory: 1000Gi\n```\n\n----------------------------------------\n\nTITLE: Allow SSM Read Actions - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `ssm:GetParameter` actions on SSM parameters located under the `aws/service/` path. This enables Karpenter to retrieve configuration data and other information from SSM parameters managed by AWS services.  Consider further restricting access if sensitive information is stored in SSM parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped EC2 Instance Actions with Tags in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to create EC2 resources with specific tags. It ensures Karpenter can only create instances for a single EKS cluster by requiring specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy to Allow Passing Instance Role for EC2\nDESCRIPTION: This JSON snippet defines an IAM policy that grants the Karpenter controller permission to use the 'KarpenterNodeRole' by passing the role to EC2 instance profiles during node launch. It is conditioned on being passed to specific services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Group Status Configuration in AWS Karpenter\nDESCRIPTION: Example demonstrating security group status fields resolved from securityGroupSelectorTerms, showing security group IDs and names.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback NodePools with Architecture Preferences\nDESCRIPTION: Example showing how to configure default node properties like capacity type or architecture by setting a higher weight value on preferred NodePool configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  weight: 50\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"amd64\"]\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: arm64-specific\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.sh/capacity-type\n        operator: In\n        values: [\"spot\", \"on-demand\"]\n      - key: kubernetes.io/arch\n        operator: In\n        values: [\"arm64\"]\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"a1.large\", \"a1.xlarge\"]\n```\n\n----------------------------------------\n\nTITLE: Pricing API Timeout Error in Private Clusters\nDESCRIPTION: Error message showing the timeout that occurs when Karpenter tries to access the AWS Price List Query API, which does not have a VPC private endpoint. In private clusters, Karpenter relies on its shipped static price list.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nERROR   controller.aws.pricing  updating on-demand pricing, RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout; RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout, using existing pricing data from 2022-08-17T00:19:52Z  {\"commit\": \"4b5f953\"}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Disruption Methods\nDESCRIPTION: Overview of methods Karpenter uses to manage node disruption including finalizers, expiration, consolidation, drift and interruption handling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Finalizer**: Karpenter handles node deletion cleanup\n* **Expiration**: Disrupts nodes after set duration\n* **Consolidation**: Reduces cluster cost by optimizing node usage\n* **Drift**: Handles nodes that deviate from spec\n* **Interruption**: Manages upcoming node interruption events\n```\n\n----------------------------------------\n\nTITLE: Requesting Pod ENI Resources for Security Groups\nDESCRIPTION: Example showing how to request Pod ENI resources in a deployment manifest. This is used for enabling Security Groups for Pods, a feature of the AWS VPC CNI Plugin which allows an Elastic Network Interface to be allocated directly to a Pod.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Namespace and Viewing Logs\nDESCRIPTION: This bash script sets the KARPENTER_NAMESPACE environment variable and then uses kubectl to continuously stream the logs from the Karpenter pod. This is useful for monitoring Karpenter's behavior during node creation and management.  The script requires kubectl to be configured to access the Kubernetes cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Cluster Autoscaler\nDESCRIPTION: Scales the Cluster Autoscaler deployment to zero replicas to disable it in preparation for using Karpenter exclusively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step11-scale-cas.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Panics Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of reconciliation panics per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_panics_total`\nTotal number of reconciliation panics per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Pass Instance Role\nDESCRIPTION: This IAM policy statement allows the Karpenter controller to pass the node role to generated instance profiles, granting EC2 permission to use the specified role when assigning permissions during node launches. It uses the `iam:PassRole` action with a condition to ensure the role is passed to EC2 services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Pricing Read Actions - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform `pricing:GetProducts` actions. This allows Karpenter to retrieve pricing information for AWS products, as this information is not always available in every region. The policy grants access across all regions due to the regional variability of pricing data.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Commands for Checking Subnet and Security Group Selectors\nDESCRIPTION: CLI commands to verify subnet and security group selector configurations in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-subnets --filters Name=tag:karpenter.sh/discovery,Values=${CLUSTER_NAME}\n```\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-security-groups --filters Name=tag:karpenter.sh/discovery,Values=${CLUSTER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter in a Kubernetes cluster\nDESCRIPTION: Commands to install or uninstall Karpenter in the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Name and Owner\nDESCRIPTION: YAML configuration example for selecting AMIs by name and owner, using both 'self' and an account ID.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n      owner: self\n    - name: my-ami\n      owner: \"0123456789\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Client Go Request Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring request latency in seconds, broken down by various attributes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n### `client_go_request_duration_seconds`\nRequest latency in seconds. Broken down by verb, group, version, kind, and subresource.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Checking Karpenter CRD Stored Versions\nDESCRIPTION: Bash script to verify the stored versions of Karpenter CRDs in ETCD after migration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfor crd in \"nodepools.karpenter.sh\" \"nodeclaims.karpenter.sh\" \"ec2nodeclasses.karpenter.k8s.aws\"; do\n    kubectl get crd ${crd} -ojsonpath=\"{.status.storedVersions}{'\\n'}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Scaling Up Deployment in Karpenter\nDESCRIPTION: This bash script is used to scale up a deployment to ensure that the desired number of replicas is running. It initializes the deployment with a pause image.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step13-automatic-node-provisioning.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Health Events Rule for Karpenter in YAML\nDESCRIPTION: Configures an EventBridge rule that captures AWS Health Events and routes them to the Karpenter interruption queue. This allows Karpenter to receive and process health-related notifications from AWS services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Building and deploying Karpenter\nDESCRIPTION: Commands for quickly deploying changes to your cluster and running codegen, lint, and tests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Node for EKS with AL2023\nDESCRIPTION: This text snippet defines the configuration for EKS nodes using the AL2023 AMIFamily that contains necessary parameters for registering the node properly with the EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Tagging Security Groups for Karpenter\nDESCRIPTION: Adds tags to security groups associated with the first nodegroup in the cluster for Karpenter to identify which security groups to use.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step06-tag-security-groups.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Changing Log Levels in Karpenter with Helm\nDESCRIPTION: This command modifies the log level used by Karpenter to debug during deployment, specified as a value in Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--set logLevel=debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Karpenter Deployment\nDESCRIPTION: YAML configuration for node affinity in the Karpenter deployment, ensuring Karpenter runs on existing nodegroup nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Capacity Reservations by Tags and Owner ID\nDESCRIPTION: YAML configuration example for selecting capacity reservations using tags and an owner ID.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  # Select all capacity reservations with the matching tags which are also owned by\n  # the specified account.\n  capacityReservationSelectorTerms:\n  - tags:\n      key: foo\n    ownerID: 012345678901\n```\n\n----------------------------------------\n\nTITLE: Converting AWSNodeTemplate to EC2NodeClass\nDESCRIPTION: Uses the karpenter-convert tool to migrate AWSNodeTemplate resources to the new EC2NodeClass format required by v1beta1. Includes setting the node role environment variable.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NODE_ROLE=\"KarpenterNodeRole-${CLUSTER_NAME}\"\nkarpenter-convert -f awsnodetemplate.yaml | envsubst > ec2nodeclass.yaml\n```\n\n----------------------------------------\n\nTITLE: Manually Deleting Karpenter Nodes and NodeClaims\nDESCRIPTION: Commands to manually delete Karpenter nodes and nodeclaims using kubectl. This includes deleting specific nodes/nodeclaims, all nodeclaims, all nodes owned by any nodepool, and all nodeclaims owned by a specific nodepool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a specific nodeclaim\nkubectl delete nodeclaim $NODECLAIM_NAME\n\n# Delete a specific node\nkubectl delete node $NODE_NAME\n\n# Delete all nodeclaims\nkubectl delete nodeclaims --all\n\n# Delete all nodes owned by any nodepool\nkubectl delete nodes -l karpenter.sh/nodepool\n\n# Delete all nodeclaims owned by a specific nodepoolXS\nkubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodeClaim Information with kubectl\nDESCRIPTION: Commands to list NodeClaims and describe a specific NodeClaim using kubectl. These commands help in viewing the contents of a NodeClaim.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nNAME            TYPE               ZONE         NODE                                           READY   AGE\ndefault-m6pzn   c7i-flex.2xlarge   us-west-1a   ip-xxx-xxx-xx-xxx.us-west-1.compute.internal   True    7m50s\n\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for API Server Endpoint Discovery\nDESCRIPTION: This JSON snippet provides the necessary permissions for Karpenter to discover the external API endpoint of the Kubernetes cluster, which is essential for EC2 nodes to join the EKS cluster successfully.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Transition Seconds Metric\nDESCRIPTION: Describes the deprecated metric for measuring the time a condition was in a given state before transitioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_transition_seconds`\nThe amount of time a condition was in a given state before transitioning. e.g. Alarm := P99(Updated=False) > 5 minutes\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter Using Helm Chart (Managed NodeGroups)\nDESCRIPTION: This snippet describes the command to apply a Helm chart for Karpenter with managed NodeGroups, using a bash script.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Security Group Tag-Based Selection in YAML\nDESCRIPTION: This YAML configuration snippet uses a tag wildcard to match security groups, ensuring flexibility in security configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        MyTag: '*'\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter OCI Helm Chart Signature with Cosign\nDESCRIPTION: Verifies the Karpenter Helm chart signature using Cosign to ensure authenticity before installation. This checks the certificate against GitHub Actions workflow information.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.3.3 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.3.3 \\\n  --annotations version=1.3.3\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Policy for AWS SQS with YAML\nDESCRIPTION: This snippet defines the queue policy for the `KarpenterInterruptionQueue`, specifying how AWS services can push messages to it. It permits specific services to send messages and includes a statement to enforce HTTPS connections to ensure secure data in transit.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n\n```\n\n----------------------------------------\n\nTITLE: Security Group Status Configuration in EC2NodeClass\nDESCRIPTION: Example showing how security groups are specified in spec and resolved in status. The status field contains the resolved ID and name of security groups selected by securityGroupSelectorTerms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Allowing Instance Profile Read Actions for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to read instance profile information. This permission is necessary for Karpenter to manage EC2NodeClass resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Instance Profile Creation for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to create instance profiles with specific tags. It ensures profiles are created only for the specified cluster and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues for AL2 Nodes in Bash\nDESCRIPTION: This snippet provides a series of commands to debug Node NotReady issues for Amazon Linux 2 (AL2) based nodes. It includes steps to identify Karpenter-managed nodes, extract instance IDs, and connect to instances for log inspection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket Node Settings in TOML\nDESCRIPTION: Defines kubelet and cluster settings for Bottlerocket nodes like API server endpoint and cluster DNS. Suitable for environments running Bottlerocket images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: AllowInstanceProfileReadActions IAM Policy\nDESCRIPTION: IAM policy allowing Karpenter to read instance profile information to manage EC2NodeClass provisioning status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Spot Service Role\nDESCRIPTION: Creates the AWS service-linked role for EC2 Spot instances if not already present in the account.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com || true\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Cluster in EKS Config\nDESCRIPTION: YAML configuration to enable private cluster mode in EKS ClusterConfig.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nprivateCluster:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Name and Owner in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs by both name and owner. This provides additional security by ensuring you only use AMIs from trusted sources like your own account or specific account IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n      owner: self\n    - name: my-ami\n      owner: \"0123456789\"\n```\n\n----------------------------------------\n\nTITLE: Finding Available AMI Versions for Bottlerocket with AWS CLI\nDESCRIPTION: Bash command to discover available Bottlerocket AMI versions for a specific Kubernetes version using AWS SSM parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"{{< param \\\"latest_k8s_version\\\" >}}\"\naws ssm get-parameters-by-path --path \"/aws/service/bottlerocket/aws-k8s-$K8S_VERSION\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"latest\" | awk -F '/' '{print $7}' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Defining a GPU NodePool with Taints in Karpenter YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Karpenter NodePool for GPU instances. It includes requirements for a specific instance family and sets a taint to ensure only GPU-tolerant pods are scheduled.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  template:\n    spec:\n      requirements:\n      - key: karpenter.k8s.aws/instance-family\n        operator: In\n        values:\n          - p3\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Provider Provisioner Spec\nDESCRIPTION: Shows a minimal AWS provider provisioner specification without any defaulted values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/runtime-defaulting.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n   provider:\n     apiVersion: extensions.karpenter.sh/v1alpha1\n     instanceProfile: KarpenterNodeInstanceProfile-karpenter-demo\n     kind: AWS\n     securityGroupSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n     subnetSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n```\n\n----------------------------------------\n\nTITLE: NodeClaim Structure - YAML\nDESCRIPTION: This snippet details the structure of a sample NodeClaim in YAML format. It outlines the various fields such as Metadata, Spec, and Status that describe the NodeClaim's properties, including resource requests, scheduling requirements, and conditions. This is crucial for understanding how Karpenter manages nodes in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName:         default-x9wxq\nNamespace:\nLabels:       karpenter.k8s.aws/instance-category=c\n              karpenter.k8s.aws/instance-cpu=8\n              karpenter.k8s.aws/instance-cpu-manufacturer=amd\n              karpenter.k8s.aws/instance-ebs-bandwidth=3170\n              karpenter.k8s.aws/instance-encryption-in-transit-supported=true\n              karpenter.k8s.aws/instance-family=c5a\n              karpenter.k8s.aws/instance-generation=5\n              karpenter.k8s.aws/instance-hypervisor=nitro\n              karpenter.k8s.aws/instance-memory=16384\n              karpenter.k8s.aws/instance-network-bandwidth=2500\n              karpenter.k8s.aws/instance-size=2xlarge\n              karpenter.sh/capacity-type=spot\n              karpenter.sh/nodepool=default\n              kubernetes.io/arch=amd64\n              kubernetes.io/os=linux\n              node.kubernetes.io/instance-type=c5a.2xlarge\n              topology.k8s.aws/zone-id=usw2-az3\n              topology.kubernetes.io/region=us-west-2\n              topology.kubernetes.io/zone=us-west-2c\nAnnotations:  compatibility.karpenter.k8s.aws/cluster-name-tagged: true\n              compatibility.karpenter.k8s.aws/kubelet-drift-hash: 15379597991425564585\n              karpenter.k8s.aws/ec2nodeclass-hash: 5763643673275251833\n              karpenter.k8s.aws/ec2nodeclass-hash-version: v3\n              karpenter.k8s.aws/tagged: true\n              karpenter.sh/nodepool-hash: 377058807571762610\n              karpenter.sh/nodepool-hash-version: v3\nAPI Version:  karpenter.sh/v1\nKind:         NodeClaim\nMetadata:\n  Creation Timestamp:  2024-08-07T05:37:30Z\n  Finalizers:\n    karpenter.sh/termination\n  Generate Name:  default-\n  Generation:     1\n  Owner References:\n    API Version:           karpenter.sh/v1\n    Block Owner Deletion:  true\n    Kind:                  NodePool\n    Name:                  default\n    UID:                   6b9c6781-ac05-4a4c-ad6a-7551a07b2ce7\n  Resource Version:        19600526\n  UID:                     98a2ba32-232d-45c4-b7c0-b183cfb13d93\nSpec:\n  Expire After:  720h0m0s\n  Node Class Ref:\n    Group:\n    Kind:   EC2NodeClass\n    Name:   default\n  Requirements:\n    Key:       kubernetes.io/arch\n    Operator:  In\n    Values:\n      amd64\n    Key:       kubernetes.io/os\n    Operator:  In\n    Values:\n      linux\n    Key:       karpenter.sh/capacity-type\n    Operator:  In\n    Values:\n      spot\n    Key:       karpenter.k8s.aws/instance-category\n    Operator:  In\n    Values:\n      c\n      m\n      r\n    Key:       karpenter.k8s.aws/instance-generation\n    Operator:  Gt\n    Values:\n      2\n    Key:       karpenter.sh/nodepool\n    Operator:  In\n    Values:\n      default\n    Key:       node.kubernetes.io/instance-type\n    Operator:  In\n    Values:\n      c3.xlarge\n      c4.xlarge\n      c5.2xlarge\n      c5.xlarge\n      c5a.xlarge\n      c5ad.2xlarge\n      c5ad.xlarge\n      c5d.2xlarge\n  Resources:\n    Requests:\n      Cpu:   3150m\n      Pods:  6\n  Startup Taints:\n    Effect:  NoSchedule\n    Key:     app.dev/example-startup\n  Taints:\n    Effect:                  NoSchedule\n    Key:                     app.dev/example\n  Termination Grace Period:  1h0m0s\nStatus:\n  Allocatable:\n    Cpu:                        7910m\n    Ephemeral - Storage:        17Gi\n    Memory:                     14162Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Capacity:\n    Cpu:                        8\n    Ephemeral - Storage:        20Gi\n    Memory:                     15155Mi\n    Pods:                       58\n    vpc.amazonaws.com/pod-eni:  38\n  Conditions:\n    Last Transition Time:  2024-08-07T05:38:08Z\n    Message:\n    Reason:                Consolidatable\n    Status:                True\n    Type:                  Consolidatable\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Initialized\n    Status:                True\n    Type:                  Initialized\n    Last Transition Time:  2024-08-07T05:37:33Z\n    Message:\n    Reason:                Launched\n    Status:                True\n    Type:                  Launched\n    Last Transition Time:  2024-08-07T05:38:07Z\n    Message:\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n    Last Transition Time:  2024-08-07T05:37:55Z\n    Message:\n    Reason:                Registered\n    Status:                True\n    Type:                  Registered\n  Image ID:                ami-08946d4d49fc3f27b\n  Node Name:               ip-xxx-xxx-xxx-xxx.us-west-2.compute.internal\n  Provider ID:             aws:///us-west-2c/i-01234567890123\nEvents:\n  Type    Reason             Age   From       Message\n  ----    ------             ----  ----       -------\n  Normal  Launched           70s   karpenter  Status condition transitioned, Type: Launched, Status: Unknown -> True, Reason: Launched\n  Normal  DisruptionBlocked  70s   karpenter  Cannot disrupt NodeClaim: state node doesn't contain both a node and a nodeclaim\n  Normal  Registered         48s   karpenter  Status condition transitioned, Type: Registered, Status: Unknown -> True, Reason: Registered\n  Normal  Initialized        36s   karpenter  Status condition transitioned, Type: Initialized, Status: Unknown -> True, Reason: Initialized\n  Normal  Ready              36s   karpenter  Status condition transitioned, Type: Ready, Status: Unknown -> True, Reason: Ready\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Instance Profile Management\nDESCRIPTION: Policy allowing Karpenter to manage instance profile lifecycle including adding/removing roles and deletion.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Stale Webhooks\nDESCRIPTION: Commands to delete stale Karpenter webhooks that may cause validation issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.provisioners.karpenter.sh\nkubectl delete validatingwebhookconfiguration validation.webhook.provisioners.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Dependency for Local Development\nDESCRIPTION: Command to replace the Karpenter dependency with a local version for development purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Monitoring in EC2NodeClass for Karpenter\nDESCRIPTION: YAML configuration to enable detailed monitoring for EC2 instances launched by Karpenter, providing 1-minute period monitoring graphs in the EC2 console.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: AWS Node Pod Commands\nDESCRIPTION: Commands to inspect AWS CNI plugin pods and their logs\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\nLANGUAGE: text\nCODE:\n```\naws-node-?????             1/1     Running   2          20d\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: This snippet provides the command to retrieve the admin password for the Grafana instance set up to monitor Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step11-grafana-get-password.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Defining Team B Node Labels\nDESCRIPTION: Node configuration that defines the team-specific label for Team B nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Checking for Machine Resources Cleanup\nDESCRIPTION: Verifies that no Machine resources remain on the cluster, which is a prerequisite for safely cleaning up old Karpenter resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get machines\n```\n\n----------------------------------------\n\nTITLE: Stale Pricing Data Error Message\nDESCRIPTION: This text block shows an example error message indicating stale pricing data due to network timeout when running Karpenter in an isolated VPC. This error happens because there is no VPC endpoint for the Price List Query API.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n\"ERROR   controller.aws.pricing  updating on-demand pricing, RequestError: send request failed\\ncaused by: Post \\\"https://api.pricing.us-east-1.amazonaws.com/\\\": dial tcp 52.94.231.236:443: i/o timeout; RequestError: send request failed\\ncaused by: Post \\\"https://api.pricing.us-east-1.amazonaws.com/\\\": dial tcp 52.94.231.236:443: i/o timeout, using existing pricing data from 2022-08-17T00:19:52Z  {\\\"commit\\\": \\\"4b5f953\\\"}\" \n```\n\n----------------------------------------\n\nTITLE: AMI Selection by ID in Karpenter\nDESCRIPTION: This YAML snippet demonstrates selecting AMIs by their IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n\"  amiSelectorTerms:\\n    - id: \\\"ami-123\\\"\\n    - id: \\\"ami-456\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter with Debug Logging using Helm\nDESCRIPTION: This command installs or upgrades the Karpenter Helm chart with debug logging enabled. Helm must be installed and configured to communicate with the Kubernetes cluster and access the Karpenter Helm chart from AWS ECR. The key parameter here is `logLevel=debug`, which sets the logging level to debug for detailed troubleshooting information.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: AWS CLI to Describe Security Groups\nDESCRIPTION: This bash script uses the AWS CLI to describe security groups associated with a given VPC and tagged with `kubernetes.io/cluster/$CLUSTER_NAME`.  It retrieves the group names and prints them to the console.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"CLUSTER_VPC_ID=\\\"$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.resourcesVpcConfig.vpcId --output text)\\\"\\n\\naws ec2 describe-security-groups --filters Name=vpc-id,Values=$CLUSTER_VPC_ID Name=tag-key,Values=kubernetes.io/cluster/$CLUSTER_NAME --query 'SecurityGroups[].[GroupName]' --output text\"\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Finalizers from Nodes After Uninstallation\nDESCRIPTION: Bash script to identify all nodes with Karpenter termination finalizers and remove them. This resolves issues where nodes cannot be deleted after Karpenter has been uninstalled.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Eviction Settings in YAML\nDESCRIPTION: YAML configuration for kubelet soft eviction grace periods and max pod grace period settings. Defines timeouts for different resource types like memory, filesystem, and PID availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n    imagefs.available: 1m30s\n    imagefs.inodesFree: 2m\n    pid.available: 2m\n  evictionMaxPodGracePeriod: 60\n```\n\n----------------------------------------\n\nTITLE: AL2 AMI Family Provisioner Spec\nDESCRIPTION: Demonstrates AWS provider provisioner specification with AL2 AMI family and its runtime-defaulted block device mappings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/runtime-defaulting.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n   provider:\n     amiFamily: AL2\n     apiVersion: extensions.karpenter.sh/v1alpha1\n     instanceProfile: KarpenterNodeInstanceProfile-karpenter-demo\n     kind: AWS\n     securityGroupSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n     subnetSelector:\n       kubernetes.io/cluster/karpenter-demo: '*'\n```\n\n----------------------------------------\n\nTITLE: Checking aws-auth ConfigMap for Node Roles\nDESCRIPTION: Command to retrieve the aws-auth ConfigMap which contains IAM role mappings required for nodes to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmaps -n kube-system aws-auth -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Spot Instance Interruption Warning Rule for Karpenter in YAML\nDESCRIPTION: CloudFormation template defining an EventBridge rule that captures EC2 Spot Instance Interruption Warning events and forwards them to Karpenter's interruption queue. This enables Karpenter to take proactive action before spot instances are reclaimed by AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue Policy in YAML\nDESCRIPTION: This YAML snippet defines an AWS::SQS::QueuePolicy resource to allow specific AWS services to send messages to the Karpenter interruption queue. It also includes a condition to enforce HTTPS connections for security.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Bash Script UserData for AL2023\nDESCRIPTION: A simple bash script that can be used as UserData for AL2023 instances. This shows how shell scripts can be passed in as UserData.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\necho \"Hello, AL2023!\"\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass Status with AMI Deprecation Condition in YAML\nDESCRIPTION: Example YAML representation of an EC2NodeClass status including conditions for AMI deprecation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprecated-ami-observability.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  amis:\n  - id: ami-01234567890654321\n    name: amazon-eks-node-1.29\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: amazon-eks-arm64-node-1.29\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n  conditions:\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: AMIsDeprecated\n    status: \"True\"\n    type: AMIsDeprecated\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: InstanceProfileReady\n    status: \"True\"\n    type: InstanceProfileReady\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: Ready\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: SecurityGroupsReady\n    status: \"True\"\n    type: SecurityGroupsReady\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: SubnetsReady\n    status: \"True\"\n    type: SubnetsReady\n```\n\n----------------------------------------\n\nTITLE: Selecting All AMIs Under a Specific Owner in Karpenter EC2NodeClass\nDESCRIPTION: Selects all AMIs owned by a specific account using the wildcard pattern. This is useful when you want to select from all AMIs within your own account regardless of name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - name: \"*\"\n      owner: self\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter on EKS with Managed NodeGroups\nDESCRIPTION: This script uses Helm to install Karpenter on an EKS cluster with Managed NodeGroups. It configures the necessary parameters including the AWS settings, service account role, cluster discovery information, and the node image AMI IDs for different architectures.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"Installing Karpenter\"\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace ${KARPENTER_NAMESPACE} --create-namespace \\\n  --set \"settings.aws.clusterName=${CLUSTER_NAME}\" \\\n  --set \"settings.aws.clusterEndpoint=${CLUSTER_ENDPOINT}\" \\\n  --set \"settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" \\\n  --set \"serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn=${KARPENTER_IAM_ROLE_ARN}\" \\\n  --set \"settings.aws.interruptionQueueName=${CLUSTER_NAME}\" \\\n  --set \"settings.aws.isolatedVPC=false\" \\\n  --set replicas=1 \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Tagging in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to update tags on EC2 instances after creation. It enforces that Karpenter can only update tags on cluster instances it is operating on through specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs with Journalctl\nDESCRIPTION: This bash command checks the Kubelet logs in BottleRocket OS using journalctl. It's used to diagnose Node NotReady issues in a Node running on AWS. BottleRocket OS stores logs in a specific location, hence the use of '-D' to specify log directory.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket Node Configuration\nDESCRIPTION: TOML configuration for Bottlerocket nodes specifying kubernetes settings and node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: Allow Scoped Resource Tagging - IAM Policy\nDESCRIPTION: IAM policy statement enabling EC2 CreateTags actions on existing Karpenter-managed instances. Restricts tag updates to specific Karpenter-related tags on cluster instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions Environment Variables for AWS Integration\nDESCRIPTION: YAML configuration showing the required environment variables that need to be set in Github Actions secrets for enabling E2E test runs in an AWS account. These variables include AWS region, account ID, IAM role name, and workspace configurations for Prometheus and Timestream.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nAWS_REGION: <region>\nACCOUNT_ID: <account-id>\nROLE_NAME: <github-actions-role-name>\nPROMETHEUS_REGION: <managed-prometheus-hosted-region>\nTIMESTREAM_REGION: <timestream-hosted-region>\nWORKSPACE_ID: <managed-prometheus-workspace-id>\n```\n\n----------------------------------------\n\nTITLE: Pricing Data Error Message Example\nDESCRIPTION: This snippet shows example error messages that can occur when pricing data requests fail due to the lack of a VPC private endpoint for the Price List Query API. These errors indicate that Karpenter is unable to fetch real-time pricing information and is relying on cached data.  This results in stale data over time.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"ERROR   controller.aws.pricing  updating on-demand pricing, RequestError: send request failed\\ncaused by: Post \\\"https://api.pricing.us-east-1.amazonaws.com/\\\": dial tcp 52.94.231.236:443: i/o timeout; RequestError: send request failed\\ncaused by: Post \\\"https://api.pricing.us-east-1.amazonaws.com/\\\": dial tcp 52.94.231.236:443: i/o timeout, using existing pricing data from 2022-08-17T00:19:52Z  {\\\"commit\\\": \\\"4b5f953\\\"}\"\"\n```\n\n----------------------------------------\n\nTITLE: Pinning AMIs Using Name in EC2NodeClass\nDESCRIPTION: YAML configuration demonstrating how to pin an AMI using its exact name. This method ensures that only the specified AMI is selected, regardless of newer versions becoming available.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Example EventBridge Spot Interruption Notification JSON Structure\nDESCRIPTION: JSON structure of an EventBridge event for a Spot Instance Interruption Warning, showing the format that would be sent to the SQS queue for processing by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0\",\n  \"id\": \"1e5527d7-bb36-4607-3370-4164db56a40e\",\n  \"detail-type\": \"EC2 Spot Instance Interruption Warning\",\n  \"source\": \"aws.ec2\",\n  \"account\": \"123456789012\",\n  \"time\": \"2022-08-11T14:00:00Z\",\n  \"region\": \"us-east-2\",\n  \"resources\": [\n    \"arn:aws:ec2:us-east-2:instance/i-0123456789\"\n  ],\n  \"detail\": {\n    \"instance-id\": \"i-0123456789\",\n    \"instance-action\": \"terminate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotIn Operator for Node Affinity in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows how to use the 'NotIn' operator in node affinity rules to exclude specific zones, effectively allowing the pod to run only in the remaining specified zone.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"In\"\n  values: [\"us-west-2a\", \"us-west-2b\"]\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"NotIn\"\n  values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption for NodePool with Budget Configuration\nDESCRIPTION: Example of configuring a NodePool's disruption budget to prevent voluntary disruption of its nodes. Setting nodes: \"0\" ensures that no nodes from this pool will be considered for voluntary disruption actions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  disruption:\n    budgets:\n      - nodes: \"0\"\n```\n\n----------------------------------------\n\nTITLE: Allow EC2 Resource Creation Tagging - IAM Policy\nDESCRIPTION: IAM policy statement allowing EC2 CreateTags actions during resource creation via RunInstances, CreateFleet, or CreateLaunchTemplate operations. Enforces tagging constraints for Karpenter-managed resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AllowScopedInstanceProfileActions IAM Policy\nDESCRIPTION: IAM policy for managing instance profile lifecycle operations including adding/removing roles and deletion, with cluster-specific restrictions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating CRDs for Helm Release\nDESCRIPTION: This command annotates CRDs with Helm release information for a Helm-managed installation. It resolves issues that arise when Helm outputs annotation validation errors due to missing release metadata.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Allow Pricing Information Access - IAM Policy\nDESCRIPTION: IAM policy statement allowing access to AWS pricing information across all regions. Enables Karpenter to query product pricing data for resource planning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: AMI Status with Tags Configuration in AWS Karpenter\nDESCRIPTION: Example showing AMI status fields resolved using tags, including deprecated status and architecture requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs - Bash\nDESCRIPTION: This code snippet retrieves the logs for the Kubelet service using journalctl, a utility for querying and displaying messages from the journal. It directly inspects the Kubelet service logs to diagnose potential issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: NodeClaim Consistency Check Response\nDESCRIPTION: JSON response showing a failed consistency check for NodeClaim resource allocation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ConsistentStateFound\",\n    \"status\": \"False\",\n    \"reason\": \"ConsistencyCheckFailed\",\n    \"message\": \"Consistency Check Failed\",\n    \"lastTransitionTime\": \"2024-08-19T20:02:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing karpenter-convert Tool\nDESCRIPTION: Installs the karpenter-convert utility, which helps migrate Karpenter resources from v1alpha to v1beta1 format by automatically converting manifests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/aws/karpenter/tools/karpenter-convert/cmd/karpenter-convert@release-v0.32.x\n```\n\n----------------------------------------\n\nTITLE: Accessing Karpenter Metrics on OSX\nDESCRIPTION: Commands to port-forward and open Karpenter metrics in a browser on OSX for monitoring and debugging purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8000/metrics && kubectl port-forward service/karpenter -n karpenter 8000\n```\n\n----------------------------------------\n\nTITLE: STS Credentials Resolution Failure Due to I/O Timeout\nDESCRIPTION: A common error occurs when Karpenter fails to connect to the STS endpoint, indicated by a DNS resolution error. This can happen if Karpenter is configured with `dnsPolicy: ClusterFirst` while in-cluster DNS services are not running. Adjust DNS policies or ensure DNS capacity is available to mitigate this issue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nChecking EC2 API connectivity, WebIdentityErr: failed to retrieve credentials\\ncaused by: RequestError: send request failed\\ncaused by: Post \\\"https://sts.us-east-1.amazonaws.com/\\\": dial tcp: lookup sts.us-east-1.amazonaws.com: i/o timeout\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket UserData Configuration\nDESCRIPTION: Example of custom user data configuration for Bottlerocket AMI including Kubernetes settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Single Multi-AZ Node Group\nDESCRIPTION: Scales down a single multi-AZ node group to a minimum size that can support Karpenter and other critical services while Karpenter handles the rest.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-single-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: AMI Selection by Name and Owner in Karpenter\nDESCRIPTION: This YAML snippet demonstrates AMI selection by both name and owner, with multiple owner options specified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n\"  amiSelectorTerms:\\n    - name: my-ami\\n      owner: self\\n    - name: my-ami\\n      owner: \\\"0123456789\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Name Variables in Bash\nDESCRIPTION: Sets the Karpenter namespace and cluster name variables which will be used throughout the migration process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: Adding Toleration for Karpenter Disruption Taint\nDESCRIPTION: Add a toleration to pods to prevent eviction during node termination in Karpenter v0.32.0+.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n- key: \"karpenter.sh/disruption\"\n  operator: \"Equals\"\n  value: \"disrupting\"\n  effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Toleration Configuration Example\nDESCRIPTION: Example YAML configuration for adding toleration to pods to prevent eviction during node termination in Karpenter 0.32.0+\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nKey: karpenter.sh/disruption\nEffect: NoSchedule\nOperator: Equals\nValues: disrupting\n```\n\n----------------------------------------\n\nTITLE: Amazon Linux 2 UserData with MIME Multipart - Option 1\nDESCRIPTION: Example of AL2 UserData using MIME multipart format with user-managed script executed before Karpenter-managed script. This approach allows users to run custom scripts but doesn't support kubelet configuration customization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script that was in the ProvisionerSpec\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\nset -ex\nB64_CLUSTER_CA=base64data\nAPI_SERVER_URL=apiServerEndpoint\nK8S_CLUSTER_DNS_IP=k8sClusterDnsIp\n/etc/eks/bootstrap.sh clusterName\n  --kubelet-extra-args '--node-labels=karpenter.sh/provisioner-name=default,karpenter.sh/capacity-type=on-demand' \\\n  --b64-cluster-ca $B64_CLUSTER_CA \\\n  --apiserver-endpoint $API_SERVER_URL \\\n  --dns-cluster-ip $K8S_CLUSTER_DNS_IP\n\n--==MYBOUNDARY==--\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Auth ConfigMap - Bash\nDESCRIPTION: This command retrieves the AWS Auth ConfigMap in the kube-system namespace which is crucial for authorizing nodes in the Kubernetes cluster. It allows users to check if the appropriate IAM roles are set for the nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmaps -n kube-system aws-auth -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Health Events Rule for Karpenter in YAML\nDESCRIPTION: This YAML snippet creates an AWS::Events::Rule resource to capture AWS Health Events and send them to the Karpenter interruption queue. It uses an event pattern to filter for specific event types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Cron Schedule Example\nDESCRIPTION: This bash snippet shows how to define Cron schedules for Karpenter disruption budgets.  The cron syntax consists of five space-delimited values for minute, hour, day of the month, month, and day of the week, with additional special macros like @yearly, @monthly, @weekly, @daily, and @hourly. This provides a clear visual representation of the cron syntax structure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ┌───────────── minute (0 - 59)\n# │ ┌───────────── hour (0 - 23)\n# │ │ ┌───────────── day of the month (1 - 31)\n# │ │ │ ┌───────────── month (1 - 12)\n# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;\n# │ │ │ │ │                                   7 is also Sunday on some systems)\n# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat\n# │ │ │ │ │\n# * * * * *\n```\n\n----------------------------------------\n\nTITLE: Updating EC2NodeClass CRD with Deprecated AMI Field in Go\nDESCRIPTION: Defines a new AMI struct in the EC2NodeClass CRD to include a 'deprecated' field, allowing direct indication of AMI deprecation status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprecated-ami-observability.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype AMI struct {\n    // ID of the AMI\n    // +required\n    ID string `json:\"id\"`\n    // Deprecation status of the AMI\n    // +optional\n    Deprecated bool `json:\"deprecated,omitempty\"`\n    // Name of the AMI\n    // +optional\n    Name string `json:\"name,omitempty\"`\n    // Requirements of the AMI to be utilized on an instance type\n    // +required\n    Requirements []corev1.NodeSelectorRequirement `json:\"requirements\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Bottlerocket UserData Configuration\nDESCRIPTION: Example of final merged UserData for Bottlerocket showing Karpenter-managed settings combined with custom configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'cluster'\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'default'\n\n[settings.kubernetes.node-taints]\n\n[settings.kubernetes.eviction-hard]\n'memory.available' = '12%%'\n```\n\n----------------------------------------\n\nTITLE: Defining Team B Deployment in Kubernetes\nDESCRIPTION: This YAML snippet defines a Kubernetes deployment with the app specifications for Team B. It specifies the number of replicas and a node selector to ensure that the pods are scheduled onto nodes labeled for Team B.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: EC2 Instance Creation Policy with Tags\nDESCRIPTION: IAM policy statement allowing RunInstances, CreateFleet, and CreateLaunchTemplate actions for EC2 resources with required cluster and nodepool tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Karpenter Deployment\nDESCRIPTION: Define node affinity rules to ensure Karpenter runs on existing node group instances\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Configuration Example with Conflict\nDESCRIPTION: Example showing a potential conflict where a provisioner specifies ARM64 architecture but references a launch template with an x86_64 AMI.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nspec:\n  architecture: arm64\n  labels:\n    kubernetes.amazonaws.com/launchTemplateId: id-of-x86_64-lt\n```\n\n----------------------------------------\n\nTITLE: Karpenter v1 Converted Configuration with Compatibility Annotations\nDESCRIPTION: The result of converting v1beta1 to v1 configuration, showing NodePools with compatibility annotations for kubelet settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: nodepool-a\n  annotations:\n    compatibility.karpenter.sh/v1beta1-kubelet-conversion: \"{\\\"maxPods\\\": 10}\"\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: nodeclass\n---\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: nodepool-b\n  annotations:\n    compatibility.karpenter.sh/v1beta1-kubelet-conversion: \"{\\\"maxPods\\\": 20}\"\nspec:\n  template:\n    spec:\n      nodeClassRef:\n        group: karpenter.k8s.aws\n        kind: EC2NodeClass\n        name: nodeclass\n---\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: nodeclass\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Transition Metric\nDESCRIPTION: Describes the metric for tracking the duration of EC2NodeClass status condition transitions, labeled by nodeclaim name and namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_transition_seconds`\nThe amount of time a condition was in a given state before transitioning. Labeled by the name of the nodeclaim, and the namespace.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Environment Variables\nDESCRIPTION: Sets up essential environment variables for Karpenter installation including namespace, version and Kubernetes version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nexport KARPENTER_VERSION=\"1.3.3\"\nexport K8S_VERSION=\"1.32\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Subnet Information in Karpenter EC2NodeClass Status\nDESCRIPTION: Example of the status.subnets field showing the resolved subnet IDs and availability zones that were selected by the subnetSelectorTerms criteria. Subnets are sorted by available IP address count in decreasing order.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  subnets:\n  - id: subnet-0a462d98193ff9fac\n    zone: us-east-2b\n  - id: subnet-0322dfafd76a609b6\n    zone: us-east-2c\n  - id: subnet-0727ef01daf4ac9fe\n    zone: us-east-2b\n  - id: subnet-00c99aeafe2a70304\n    zone: us-east-2a\n  - id: subnet-023b232fd5eb0028e\n    zone: us-east-2c\n  - id: subnet-03941e7ad6afeaa72\n    zone: us-east-2a\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodePool Status in Kubernetes\nDESCRIPTION: This command retrieves the current status of the first NodePool in the cluster, including resource consumption for CPU and memory.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodepool -o=jsonpath='{.items[0].status}'\n```\n\n----------------------------------------\n\nTITLE: NodeClaim Status Response - JSON\nDESCRIPTION: JSON response showing the NodeClaim status condition indicating a consistency check failure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ConsistentStateFound\",\n    \"status\": \"False\",\n    \"reason\": \"ConsistencyCheckFailed\",\n    \"message\": \"Consistency Check Failed\",\n    \"lastTransitionTime\": \"2024-08-19T20:02:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Shell Script for EKS Node Initialization\nDESCRIPTION: A basic shell script that prints a message, likely used as part of the node initialization process or for testing purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/pkg/providers/amifamily/bootstrap/mime/test_data/mime_valid.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\necho \"I'm a shell script!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Options in EC2NodeClass for Karpenter on AWS\nDESCRIPTION: Default metadata options configuration for EC2 instances launched by Karpenter. This snippet sets the HTTP endpoint to enabled, IPv6 to disabled, hop limit to 1, and requires HTTP tokens.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell UserData for Windows in Karpenter\nDESCRIPTION: Example of passing PowerShell commands as UserData for Windows instances. This simple script writes a message to the host during node initialization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_47\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Deploying IAM Permissions for Karpenter\nDESCRIPTION: Command to deploy the correct IAM permissions, including the instance profile for provisioned nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: KMS Policy Example for EBS - JSON\nDESCRIPTION: This JSON snippet represents a KMS policy that allows access through EBS for all principals that can use EBS, ensuring proper permissions for EBS operations linked to encrypted volumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Zap Logger in Karpenter ConfigMap\nDESCRIPTION: Configuration example showing how to customize Karpenter's logging output using uber-go/zap logger configuration in a Kubernetes ConfigMap. The configuration options follow zap.Config specifications.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nConfigMap:\n  data:\n    zap-logger-config: # Configuration follows zap.Config format\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Unfinished Work Seconds Metric\nDESCRIPTION: Describes the metric for measuring the duration of in-progress work that hasn't been observed by work_duration, indicating potentially stuck threads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_unfinished_work_seconds`\nHow many seconds of work has been done that is in progress and hasn't been observed by work_duration. Large values indicate stuck threads. One can deduce the number of stuck threads by observing the rate at which this increases.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: EC2 Instance Actions Permission Configuration\nDESCRIPTION: JSON policy statement allowing specific EC2 instance actions for the Karpenter controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::image/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Namespace and Viewing Logs in Bash\nDESCRIPTION: Sets the Karpenter namespace environment variable and retrieves continuous logs from the Karpenter controller pods for monitoring node provisioning activity.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Configuring AMI Selector Terms in Karpenter\nDESCRIPTION: Configuration example for selecting AMIs based on specific tags in Karpenter. This allows for controlling which AMIs are used by matching specific tag criteria.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n    karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n    environment: prod\n```\n\n----------------------------------------\n\nTITLE: Attaching v1beta1 Policy to NodeRole for Karpenter Downgrade\nDESCRIPTION: Creates and attaches the v1beta1 policy from the target version to the existing NodeRole for Karpenter downgrade.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPOLICY_DOCUMENT=$(mktemp)\ncurl -fsSL https://raw.githubusercontent.com/aws/karpenter-provider-aws/website/docs/v1.0/upgrading/get-controller-policy.sh | sh | envsubst > ${POLICY_DOCUMENT}\nPOLICY_NAME=\"KarpenterControllerPolicy-${CLUSTER_NAME}-${KARPENTER_VERSION}\"\nROLE_NAME=\"${CLUSTER_NAME}-karpenter\"\nPOLICY_ARN=\"$(aws iam create-policy --policy-name \"${POLICY_NAME}\" --policy-document \"file://${POLICY_DOCUMENT}\" | jq -r .Policy.Arn)\"\naws iam attach-role-policy --role-name \"${ROLE_NAME}\" --policy-arn \"${POLICY_ARN}\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Launching NodeClaim\nDESCRIPTION: JSON log showing the successful launch of an EC2 instance for a NodeClaim, including the provider ID, instance type, and allocatable resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:19.028Z\",\n    \"message\": \"launched nodeclaim\",\n    \"controller\": \"nodeclaim.lifecycle\",\n    \"NodeClaim\": {\n        \"name\": \"default-sfpsl\"\n    },\n    \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n    \"instance-type\": \"c3.2xlarge\",\n    \"zone\": \"us-west-2b\",\n    \"capacity-type\": \"spot\",\n    \"allocatable\": {\n      \"cpu\": \"7910m\",\n      \"ephemeral-storage\": \"17Gi\",\n      \"memory\": \"13215Mi\",\n      \"pods\": \"58\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AL2 Bootstrap Script in Bash\nDESCRIPTION: Executes a series of instructions in bash to bootstrap a node with Amazon Linux 2 (AL2) using a script. Assumes EKS cluster setup. Script handles logging and other startup tasks.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n\n```\n\n----------------------------------------\n\nTITLE: Defining NodePool and Deployment in YAML\nDESCRIPTION: The YAML snippet provides a NodePool and Deployment definition using Karpenter. The NodePool specifies topology zone requirements, while the Deployment includes a nodeSelector and topologySpreadConstraints to manage pod distribution. Dependencies include Kubernetes and Karpenter, with resource configurations specified within the YAML manifest. This setup facilitates pod scheduling across defined availability zones, with constraints ensuring pods are distributed correctly.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Environment Variables in Bash\nDESCRIPTION: Sets necessary environment variables for the migration process, including cluster name and namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: Deleting Karpenter Nodes Manually\nDESCRIPTION: This bash script manages the manual deletion of a node provisioned by Karpenter, ensuring that it is gracefully cordoned, drained, and shutdown while adhering to Karpenter's finalization process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step16-delete-node.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Karpenter logs monitoring in Bash\nDESCRIPTION: Command to configure namespace variable and monitor Karpenter logs in Kubernetes cluster for debugging node creation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Allowing Interruption Queue Actions for AWS Karpenter\nDESCRIPTION: This policy grants Karpenter permission to interact with a specific SQS queue for handling interruptions. It allows deleting messages, getting queue URL, and receiving messages from the specified interruption queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Exact Name\nDESCRIPTION: Example demonstrating how to pin an AMI using its exact name. This method strictly selects only the AMI with the specified name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter AWS Configuration\nDESCRIPTION: This script configures AWS environment variables needed for Karpenter setup, including cluster name, region, account ID, and various AMI IDs for different instance types. It creates a temporary file to store values that will be used during the cluster creation process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_NAME=\"karpenter-demo\"\nexport AWS_DEFAULT_REGION=\"us-west-2\"\nexport AWS_ACCOUNT_ID=\"$(aws sts get-caller-identity --query Account --output text)\"\nexport TEMPOUT=$(mktemp)\n\n# Read the AMIs IDs for ARM, AMD and GPU into a temporary file\nCLUSTER_ENDPOINT=\"https://eks.${AWS_DEFAULT_REGION}.amazonaws.com\"\nTOKEN=\"$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})\"\n\n# This gives us each AMI ID\ncurl --silent --header \"Authorization: Bearer ${TOKEN}\" \\\n\"${CLUSTER_ENDPOINT}/clusters/${CLUSTER_NAME}/updates?apiVersion=2\" > ${TEMPOUT}\n\nexport ARM_AMI_ID=$(jq -c -r '.nodeGroups[0].amiTypes.\"arm64-amazon-linux-2\".imageId' < ${TEMPOUT})\nexport AMD_AMI_ID=$(jq -c -r '.nodeGroups[0].amiTypes.\"x86_64-amazon-linux-2\".imageId' < ${TEMPOUT})\nexport GPU_AMI_ID=$(jq -c -r '.nodeGroups[0].amiTypes.\"x86_64-accelerated-amazon-linux-2\".imageId' < ${TEMPOUT})\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selectors for Karpenter Pods with YAML\nDESCRIPTION: This example shows how to create a nodeSelector using well-known Kubernetes and Karpenter-specific labels. The selector targets nodes in a specific AWS availability zone and with spot instance capacity type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  topology.kubernetes.io/zone: us-west-2a\n  karpenter.sh/capacity-type: spot\n```\n\n----------------------------------------\n\nTITLE: SSM Parameter Read Policy\nDESCRIPTION: IAM policy allowing access to AWS service SSM parameters in the current region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Karpenter\nDESCRIPTION: Commands for quickly deploying changes to the cluster, running codegen, lint, and tests, and building and pushing Karpenter images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: Merged Windows UserData Configuration\nDESCRIPTION: Example of final merged PowerShell UserData showing Karpenter bootstrap configuration combined with custom script.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_42\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\nWrite-Host \"Running custom user data script\"\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=spot,karpenter.sh/nodepool=windows2022\" --max-pods=110' -DNSClusterIP '10.0.100.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Karpenter NodeClaim Computation Log\nDESCRIPTION: JSON log entry showing Karpenter's computation of required NodeClaims for pod scheduling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n    \"controller\": \"provisioner\",\n    \"nodeclaims\": 1,\n    \"pods\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Interruption Queue Actions in AWS IAM Policy\nDESCRIPTION: This policy grants the Karpenter controller permission to access interruption queues. It allows actions such as deleting messages, getting queue URLs, and receiving messages for the specified interruption queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Editing AWS Auth ConfigMap\nDESCRIPTION: Modifies the aws-auth ConfigMap to allow nodes using the Karpenter node IAM role to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step07-edit-aws-auth.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Registering NodeClaim\nDESCRIPTION: JSON log showing the registration of a node with its corresponding NodeClaim in the Kubernetes cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:26:19.028Z\",\n  \"message\": \"registered nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for Karpenter 0.10.0\nDESCRIPTION: Updates the provisioners.karpenter.sh CRD to include the new startupTaints field introduced in 0.10.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: Command to tail Karpenter logs using Stern, a log tailing tool for Kubernetes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter Upgrade\nDESCRIPTION: Configures the necessary environment variables needed for the upgrade process, including cluster name, AWS region, account ID, and IAM role ARN for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=karpenter\nexport KARPENTER_VERSION=v0.32.10\nexport AWS_PARTITION=\"aws\" # if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov\nexport CLUSTER_NAME=\"${USER}-karpenter-demo\"\nexport AWS_REGION=\"us-west-2\"\nexport AWS_ACCOUNT_ID=\"$(aws sts get-caller-identity --query Account --output text)\"\nexport KARPENTER_IAM_ROLE_ARN=\"arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter\"\nexport CLUSTER_ENDPOINT=\"$(aws eks describe-cluster --name ${CLUSTER_NAME} --query \"cluster.endpoint\" --output text)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMI Information with AL2 Alias in Karpenter EC2NodeClass Status\nDESCRIPTION: Example of the status.amis field showing the resolved Amazon Machine Images (AMIs) when using an AL2 alias in amiSelectorTerms. The output includes AMI IDs, names, and node requirement constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Workload\nDESCRIPTION: Creates a test deployment to demonstrate Karpenter's automatic node provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 0\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      containers:\n        - name: inflate\n          image: public.ecr.aws/eks-distro/kubernetes/pause:3.7\n          resources:\n            requests:\n              cpu: \"1\"\nEOF\n\nkubectl scale deployment inflate --replicas 5\nkubectl logs -f -n karpenter -l app.kubernetes.io/name=karpenter -c controller\n```\n\n----------------------------------------\n\nTITLE: Windows DNS RBAC Configuration - YAML\nDESCRIPTION: YAML configuration showing required RBAC permissions for Windows nodes to enable DNS resolution. The configuration adds the eks:kube-proxy-windows group to the node's permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: Pod with Launch Template Node Selector\nDESCRIPTION: Example of pods with and without launch template node selectors, demonstrating how they would be scheduled on separate instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: podA\nspec:\n  nodeSelector:\n    node.k8s.aws/launch-template-name=x\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: podB\nspec:\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - Pod Identification in AWS\nDESCRIPTION: JSON log example showing how Karpenter identifies provisionable pods that need capacity, which will trigger NodeClaim creation in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"found provisionable pod(s)\",\n    \"commit\": \"490ef94\",\n    \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n    \"duration\": \"100.761702ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Store Policy RAID0 Configuration\nDESCRIPTION: Configuration for enabling RAID0 instance store policy in EC2NodeClass.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Memory Profiling for Karpenter with pprof\nDESCRIPTION: Commands to profile Karpenter's memory usage using Go's pprof tool, including port-forwarding to the metrics endpoint and visualizing the heap.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the metrics endpoint\nkubectl port-forward service/karpenter -n karpenter 8000\nopen http://localhost:8000/debug/pprof/\n# Visualize the memory\ngo tool pprof -http 0.0.0.0:9000 localhost:8000/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Workload Segregation Using Exists Operator\nDESCRIPTION: Examples of using the Exists operator for workload segregation across nodes with team-specific deployments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n---\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n---\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: NodePool and EC2NodeClass (v1beta1) Configuration - YAML\nDESCRIPTION: These snippets showcase the replacement of the `spec.provider` field with a `NodeClass` resource in Karpenter v1beta1. The `NodePool` references an `EC2NodeClass`, which now contains the provider-specific settings like `amiFamily` and `tags`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1beta1\\nkind: NodePool\\n...\\nnodeClassRef:\\n  apiVersion: karpenter.k8s.aws/v1beta1\\n  kind: EC2NodeClass\\n  name: default\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.k8s.aws/v1beta1\\nkind: EC2NodeClass\\nmetadata:\\n  name: default\\nspec:\\n  amiFamily: Bottlerocket\\n  tags:\\n    test-tag: test-value\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Karpenter CRDs v0.14.0\nDESCRIPTION: Commands to update both provisioners.karpenter.sh and awsnodetemplates.karpenter.k8s.aws CRDs to v0.14.0 with new fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Debugging NotReady Nodes with Bottlerocket\nDESCRIPTION: Commands for debugging nodes that fail to join the cluster using AWS Systems Manager on Bottlerocket OS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n\n----------------------------------------\n\nTITLE: AllowAPIServerEndpointDiscovery IAM Policy\nDESCRIPTION: Optional IAM policy enabling Karpenter to discover the Kubernetes cluster's external API endpoint for EKS clusters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling Karpenter Memory with pprof\nDESCRIPTION: Commands to connect to the Karpenter metrics endpoint and visualize memory usage using pprof.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the metrics endpoint\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\n# Visualize the memory\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Update Provisioner CRD (v0.11.0)\nDESCRIPTION: This command updates the Provisioner CRD to include the `providerRef` field introduced in `0.11.0`. This requires manually replacing the CRD as Helm upgrades do not automatically update CRDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating CRDs for Karpenter 0.14.0\nDESCRIPTION: Commands to update the provisioners.karpenter.sh and awsnodetemplates.karpenter.k8s.aws CRDs to v0.14.0, which adds new fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter CRD for v0.16.2+\nDESCRIPTION: Command to update the Karpenter Provisioner CRD to v0.16.2+ to support new kubeletConfiguration fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Type Filtering in Karpenter 0.14.0\nDESCRIPTION: Demonstrates how to configure a provisioner to bypass the new instance type filtering introduced in 0.14.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  - key: node.kubernetes.io/instance-type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Multiple Single-AZ Node Groups\nDESCRIPTION: Scales down multiple single-AZ node groups to a minimum size that can support Karpenter and other critical services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-multiple-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD using kubectl\nDESCRIPTION: This command updates the Karpenter Provisioner CRD using kubectl. It replaces the existing CRD with a new one fetched from a remote YAML file. This is needed to use new parameters introduced in the specified Karpenter version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"kubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Windows Node RBAC Configuration\nDESCRIPTION: YAML configuration showing required RBAC group membership for Windows nodes to enable DNS resolution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Health Event Monitoring for Karpenter in CloudFormation\nDESCRIPTION: This YAML configures an EventBridge rule to capture AWS Health Events and send them to Karpenter's interruption queue. It allows Karpenter to respond to scheduled changes that might affect EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nScheduledChangeRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n   EventPattern:\n     source:\n       - aws.health\n     detail-type:\n       - AWS Health Event\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Exact Name\nDESCRIPTION: Example of pinning to a specific AMI by its exact name. This will only ever select the AMI that exactly matches the specified name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- name: al2023-ami-2023.3.20240219.0-kernel-6.1-x86_64\n```\n\n----------------------------------------\n\nTITLE: Verifying OCI Helm Chart with Cosign\nDESCRIPTION: This Bash script uses Cosign to verify an OCI Helm chart for Karpenter. It checks the certificate OIDC issuer, the identity pattern, and other parameters to ensure the chart's authenticity before installation. It requires the Cosign tool and access to the specified image repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.1.5 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.1.5 \\\n  --annotations version=1.1.5\n```\n\n----------------------------------------\n\nTITLE: Pod Affinity and Anti-Affinity Configuration\nDESCRIPTION: Example showing pod affinity and anti-affinity rules to control pod co-location and separation across nodes and zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: system\n            operator: In\n            values:\n            - backend\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchLabels:\n            app: inflate\n        topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: NodePool expireAfter (v1beta1) Configuration - YAML\nDESCRIPTION: This snippet demonstrates the usage of `expireAfter` inside the `disruption` block in Karpenter v1beta1, replacing `ttlSecondsUntilExpired` in v1alpha5. It configures node expiration after a specified duration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1beta1\\nkind: NodePool\\n...\\nspec:\\n  disruption:\\n    expireAfter: 720h # 30 days = 30 * 24 Hours\\n\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Metrics with Kubectl and Open/IO Util\nDESCRIPTION: Uses port-forwarding to access Karpenter debugging metrics via localhost and visualize within a web browser. Requires proper kubectl setup to perform port-forwarding.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Defined Labels in NodePool Requirements with Karpenter\nDESCRIPTION: Example of how to specify a user-defined label in the NodePool requirements using the Exists operator. This is necessary for Karpenter to be aware of custom labels when scheduling pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  - key: user.defined.label/type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Example aws-auth ConfigMap with Node IAM Roles\nDESCRIPTION: Sample aws-auth ConfigMap showing properly configured IAM role mappings for node authentication with the Kubernetes API server.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\nmapRoles: |\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/eksctl-johnw-karpenter-demo-NodeInstanceRole-72CV61KQNOYS\n      username: system:node:{{EC2PrivateDNSName}}\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/KarpenterNodeRole-johnw-karpenter-demo\n      username: system:node:{{EC2PrivateDNSName}}\nmapUsers: |\n    []\nkind: ConfigMap\n...\n```\n\n----------------------------------------\n\nTITLE: Creating an SQS Queue for Karpenter Interruption Handling\nDESCRIPTION: This YAML snippet defines an Amazon SQS queue resource for Karpenter, setting up properties such as QueueName and MessageRetentionPeriod to manage communications regarding instance interruptions effectively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating Fargate-based EKS Cluster for Karpenter\nDESCRIPTION: Creates an EKS cluster using Fargate profiles for kube-system and karpenter namespaces instead of managed node groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step02-create-cluster-fargate.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Taint for Nodes with CSI Drivers\nDESCRIPTION: This YAML snippet configures startup taints for nodes in a NodePool using EBS CSI drivers, preventing race conditions related to volume attachment during node scaling. Requires configuring `startupTaints` for `NodePool` specifications.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: ebs.csi.aws.com/agent-not-ready\n          effect: NoExecute\n\n```\n\n----------------------------------------\n\nTITLE: AWS-Auth ConfigMap Node Role Configuration\nDESCRIPTION: Add Karpenter node role to the aws-auth ConfigMap to allow nodes to join the cluster\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Resource Deletion Policy\nDESCRIPTION: IAM policy permitting termination of instances and deletion of launch templates with required tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Subnets for Karpenter\nDESCRIPTION: Adds tags to the nodegroup subnets to indicate which subnets Karpenter should use when provisioning nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step05-tag-subnets.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMI Information with Tags in Karpenter EC2NodeClass Status\nDESCRIPTION: Example of the status.amis field showing the resolved AMIs when using tag-based selection in amiSelectorTerms. The output includes AMI IDs, names, deprecation status, and architecture requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Creating a Default NodePool with Karpenter\nDESCRIPTION: This bash script creates a default NodePool in Karpenter which utilizes specific resource selection terms for launching nodes. It includes a consolidation policy to manage node utilization effectively.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step12-add-nodepool.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Building Karpenter Images\nDESCRIPTION: Command to build and push Karpenter images without deploying to the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: AMI Resolution with AL2 Alias\nDESCRIPTION: Example showing AMI resolution using AL2 alias, demonstrating how different AMIs are selected based on architecture and GPU requirements.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - alias: al2@v20240807\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: Exists\n  - id: ami-06afb2d101cc4b8bd\n    name: amazon-linux-2-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n  - id: ami-0e28b76d768af234e\n    name: amazon-linux-2\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: DoesNotExist\n    - key: karpenter.k8s.aws/instance-accelerator-count\n      operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Cluster Cleanup\nDESCRIPTION: Removes all Karpenter-related resources and deletes the EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\neksctl delete cluster --name ${CLUSTER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Getting AWS Node Logs via Kubernetes API\nDESCRIPTION: This pair of bash commands retrieves logs from aws-node pods in a Kubernetes cluster. These commands help verify if VPC CNI Pods are correctly logging information about network configurations, which is essential for debugging network readiness issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring the latency of AWS SDK Go requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_duration_seconds`\nLatency of AWS SDK Go requests\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Monitoring Karpenter Logs in Bash\nDESCRIPTION: This snippet shows how to set up monitoring of Karpenter logs in a Kubernetes cluster. It sets the KARPENTER_NAMESPACE environment variable and uses kubectl to stream logs from Karpenter pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclaims.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nkubectl logs -f -n \"${KARPENTER_NAMESPACE}\" \\\n   -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Allowing SSM Read Actions for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to read SSM parameters generated by AWS services in the current region. It's recommended to further restrict access if sensitive information is stored in these parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket Block Device Configuration\nDESCRIPTION: Default block device mapping configuration for Bottlerocket AMI family with root and data volumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    # Root device\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 4Gi\n        volumeType: gp3\n        encrypted: true\n    # Data device: Container resources such as images and logs\n    - deviceName: /dev/xvdb\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: PVC Attachment Error Messages\nDESCRIPTION: Example error messages that appear when pods with PersistentVolumes hit volume attachment limits on nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Instance Profile for Private Clusters\nDESCRIPTION: Commands to create an IAM instance profile and assign a Node role for Karpenter in private cluster deployments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\naws iam add-role-to-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" --role-name \"KarpenterNodeRole-${CLUSTER_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter OCI Helm Chart with Cosign\nDESCRIPTION: This snippet provides the command to verify the integrity of the Karpenter OCI Helm chart using Cosign before installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify public.ecr.aws/karpenter/karpenter:1.2.3 \\\n  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\\n  --certificate-identity-regexp='https://github\\.com/aws/karpenter-provider-aws/\\.github/workflows/release\\.yaml@.+' \\\n  --certificate-github-workflow-repository=aws/karpenter-provider-aws \\\n  --certificate-github-workflow-name=Release \\\n  --certificate-github-workflow-ref=refs/tags/v1.2.3 \\\n  --annotations version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Applying Karpenter v0.32.10 CRDs\nDESCRIPTION: Applies the Custom Resource Definitions required for Karpenter v0.32.10, including both the core Karpenter CRDs and AWS-specific CRDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.sh_provisioners.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.sh_machines.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.k8s.aws_awsnodetemplates.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.sh_nodepools.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.sh_nodeclaims.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.32.10/pkg/apis/crds/karpenter.k8s.aws_ec2nodeclasses.yaml\n```\n\n----------------------------------------\n\nTITLE: Karpenter Security Context Change\nDESCRIPTION: Example showing how security context needs to be explicitly set for sidecar containers after 0.31.0\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n- name: sidecar\n  securityContext:\n    # Explicitly set security context parameters for sidecar\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodeClaim Information Using kubectl\nDESCRIPTION: This snippet demonstrates how to retrieve and describe a NodeClaim using the kubectl command-line tool. The command 'kubectl get nodeclaim' lists all NodeClaims, while 'kubectl describe nodeclaim default-m6pzn' provides detailed information for the specified NodeClaim.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nNAME            TYPE               ZONE         NODE                                           READY   AGE\ndefault-m6pzn   c7i-flex.2xlarge   us-west-1a   ip-xxx-xxx-xx-xxx.us-west-1.compute.internal   True    7m50s\n\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Node for Team B\nDESCRIPTION: This YAML configuration labels a Kubernetes node specifically for use by Team B. The label ensures that only designated workloads are scheduled on this node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Debugging Node Launch Error Logs\nDESCRIPTION: Commands for checking Karpenter controller logs to diagnose node launch failures.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Finalizers from Nodes\nDESCRIPTION: Script to remove all finalizers from nodes that have the Karpenter termination finalizer, useful when cleaning up after uninstalling Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EventBridge Rule for Spot Interruptions in YAML\nDESCRIPTION: Defines an AWS EventBridge rule to capture EC2 Spot Instance Interruption Warning events and send them to Karpenter's interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Work Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring how long processing an item from the workqueue takes in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_work_duration_seconds`\nHow long in seconds processing an item from workqueue takes.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Operation\nDESCRIPTION: Commands to verify that Karpenter is creating nodes and functioning correctly as nodegroup nodes are drained.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -n karpenter -c controller -l app.kubernetes.io/name=karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Checking NodeClaim Status - Bash Command\nDESCRIPTION: Bash command to check the NodeClaim status condition for resource computation consistency.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ kg nodeclaim $NODECLAIM_NAME -o jsonpath='{.status.conditions[?(@.type==\"ConsistentStateFound\")]}\n```\n\n----------------------------------------\n\nTITLE: Debugging Failed Windows Pod Sandbox Creation Error\nDESCRIPTION: Sample error message when Windows pods fail to create due to missing VPC label configuration. This typically occurs when Windows support is not properly enabled on the EKS cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\": plugin type=\"vpc-bridge\" name=\"vpc\" failed (add): failed to parse Kubernetes args: pod does not have label vpc.amazonaws.com/PrivateIPv4Address\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to authenticate with ECR\nDESCRIPTION: Sets up Docker authentication with the ECR repository for pushing and pulling images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Team B Workload with Node Selector in Kubernetes\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment for Team B with 5 replicas. It uses a nodeSelector to ensure the pods are scheduled on nodes labeled for Team B.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Controller Logs in Bash\nDESCRIPTION: This snippet shows how to retrieve and view Karpenter controller logs for debugging purposes. It includes commands to find the Karpenter pod and display its logs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n\n----------------------------------------\n\nTITLE: Configuring Tainted Node Prioritization for Specialized Workloads in Karpenter\nDESCRIPTION: Example showing how to prioritize provisioners with taints (weight 100) for pods with specific tolerations, ensuring specialized workloads run on appropriate instance types before considering general purpose nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom Workload for Pods that Tolerate these Taints should be attempted first\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: \nspec:\n  weight: 100\n  requirements:\n  - key: node.kubernetes.io/instance-type\n    operator: In\n    values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n  taints:\n  - key: custom-workloads\n    value: \"true\"\n    effect: NoSchedule\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Workloads that do not have any specific requirements can pick up this provisioner as the backup\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: fallback\nspec:\n  weight: 50\n  requirements:\n  - key: kubernetes.io/arch\n    operator: In\n    values: [\"amd64\"]\n```\n\n----------------------------------------\n\nTITLE: Private Cluster Configuration YAML\nDESCRIPTION: YAML configuration for enabling private cluster setup in EKS using eksctl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprivateCluster:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Error Handling for In-Tree Storage Plugin Issues\nDESCRIPTION: This snippet logs error messages when Karpenter detects the use of deprecated in-tree storage plugins, advising users to switch to CSI drivers for better volume management in AWS EKS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n2023-04-05T23:56:53.363Z        ERROR   controller.node_state   PersistentVolume source 'AWSElasticBlockStore' uses an in-tree storage plugin which is unsupported by Karpenter and is deprecated by Kubernetes. Scale-ups may fail because Karpenter will not discover driver limits. Use a PersistentVolume that references the 'CSI' volume source for Karpenter auto-scaling support.       {\"commit\": \"b2af562\", \"node\": \"ip-192-168-36-137.us-west-2.compute.internal\", \"pod\": \"inflate0-6c4bdb8b75-7qmfd\", \"volume\": \"mypd\", \"persistent-volume\": \"pvc-11db7489-3c6e-46f3-a958-91f9d5009d41\"}\n2023-04-05T23:56:53.464Z        ERROR   controller.node_state   StorageClass .spec.provisioner uses an in-tree storage plugin which is unsupported by Karpenter and is deprecated by Kubernetes. Scale-ups may fail because Karpenter will not discover driver limits. Create a new StorageClass with a .spec.provisioner referencing the CSI driver plugin name 'ebs.csi.aws.com'.     {\"commit\": \"b2af562\", \"node\": \"ip-192-168-36-137.us-west-2.compute.internal\", \"pod\": \"inflate0-6c4bdb8b75-7qmfd\", \"volume\": \"mypd\", \"storage-class\": \"gp2\", \"provisioner\": \"kubernetes.io/aws-ebs\"}\n\n```\n\n----------------------------------------\n\nTITLE: Device Ownership Configuration for Bottlerocket in Karpenter\nDESCRIPTION: Example of TOML UserData for Bottlerocket instances that enables device ownership using security context, required for Neuron workloads and device plugins.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_62\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\ndevice-ownership-from-security-context = true\n```\n\n----------------------------------------\n\nTITLE: Check Kubelet Logs\nDESCRIPTION: This command is used to check the logs of the Kubelet service running on Bottlerocket OS. It helps in diagnosing issues related to the Kubelet, such as network readiness problems or node registration failures.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n\"journalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Metrics Endpoint\nDESCRIPTION: Configuration for accessing Karpenter metrics endpoint which exposes metrics in Prometheus format. Default endpoint is available at karpenter.karpenter.svc.cluster.local:8080/metrics.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nkarpenter.karpenter.svc.cluster.local:8080/metrics\n```\n\n----------------------------------------\n\nTITLE: Topology Spread Constraints Configuration\nDESCRIPTION: Example of topology spread constraints to distribute pods across zones, hosts, and capacity types with specific skew limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  topologySpreadConstraints:\n    - maxSkew: 1\n      topologyKey: \"topology.kubernetes.io/zone\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"kubernetes.io/hostname\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n    - maxSkew: 1\n      topologyKey: \"karpenter.sh/capacity-type\"\n      whenUnsatisfiable: ScheduleAnyway\n      labelSelector:\n        matchLabels:\n          dev: jjones\n```\n\n----------------------------------------\n\nTITLE: Documenting Leader Election Master Status Metric\nDESCRIPTION: Describes the metric for indicating whether the reporting system is the master of the relevant lease, grouped by lease name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n### `leader_election_master_status`\nGauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master. 'name' is the string used to identify the lease. Please make sure to group by name.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Tagging Subnets for Karpenter\nDESCRIPTION: Adds necessary tags to the nodegroup subnets so Karpenter knows which subnets to use for provisioning nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step05-tag-subnets.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Karpenter Changes\nDESCRIPTION: Commands for quickly deploying changes to the cluster, running codegen, lint, and tests, and building and pushing Karpenter images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Karpenter Snapshot Repository in AWS ECR\nDESCRIPTION: Command to authenticate with the AWS ECR repository containing Karpenter snapshot releases. This is required before pulling snapshot releases, which are stored in a private ECR repository tagged with git commit hashes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Scaling Up Deployment with Karpenter\nDESCRIPTION: This snippet describes the command to scale up a deployment using Karpenter, starting with zero replicas using a pause image.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step13-automatic-node-provisioning.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Time Seconds Metric\nDESCRIPTION: Describes the metric for measuring the length of time per reconciliation per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_time_seconds`\nLength of time per reconciliation per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Eviction Hard Thresholds in YAML\nDESCRIPTION: Defines hard eviction thresholds for various system resources like memory, filesystem, and process availability. Hard evictions trigger immediate pod eviction without grace periods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Single Multi-AZ Node Group\nDESCRIPTION: Scales down a single multi-AZ node group to a minimum size to support Karpenter and other critical services, recommended minimum is 2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-single-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Replacing Provisioner CRD Karpenter 0.10.0\nDESCRIPTION: Manual update of the `provisioners.karpenter.sh` CRD to include the `startupTaints` field. This update is crucial for using new specifications in Karpenter 0.10.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: AllowScopedInstanceProfileTagActions IAM Policy\nDESCRIPTION: IAM policy for tagging instance profiles with cluster and region-specific tags, ensuring Karpenter can only modify profiles it provisions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Provisioner CRD Karpenter 0.15.0\nDESCRIPTION: This snippet updates the `provisioners.karpenter.sh` CRD to version 0.15.0, which introduces a consolidation field. This field is necessary for utilizing new parameters in the Karpenter configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: NodePool (v1beta1) Configuration - YAML\nDESCRIPTION: This snippet presents an example of a Karpenter NodePool configuration in the v1beta1 version. It showcases how the fields from the v1alpha5 Provisioner are now organized under the `spec.template` section. Annotations and labels are moved to `spec.template.metadata`, while requirements, taints, and kubelet settings are placed under `spec.template.spec`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1beta1\\nkind: NodePool\\n...\\nspec:\\n  template:\\n    metadata:\\n      annotations:\\n        custom-annotation: custom-value\\n      labels:\\n        team: team-a\\n        custom-label: custom-value\\n    spec:\\n      requirements:\\n      - key: karpenter.k8s.aws/instance-generation\\n        operator: Gt\\n        values: [\\\"3\\\"]\\n      - key: karpenter.k8s.aws/instance-category\\n        operator: In\\n        values: [\\\"c\\\", \\\"m\\\", \\\"r\\\"]\\n      - key: karpenter.sh/capacity-type\\n        operator: In\\n        values: [\\\"spot\\\"]\\n      taints:\\n      - key: example.com/special-taint\\n        value: \\\"true\\\"\\n        effect: NoSchedule\\n      startupTaints:\\n      - key: example.com/another-taint\\n        value: \\\"true\\\"\\n        effect: NoSchedule\\n      kubelet:\\n        systemReserved:\\n          cpu: 100m\\n          memory: 100Mi\\n          ephemeral-storage: 1Gi\\n        maxPods: 20\\n  limits:\\n    cpu: 1000\\n    memory: 1000Gi\\n  weight: 50\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration Note\nDESCRIPTION: Alert syntax showing webhook configuration requirements for network policies\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{% alert title=\"Note\" color=\"primary\" %}}\nWebhooks have been re-enabled by default starting in `0.37.3` to faciliate migration to `v1.0`.\nIf your cluster has network policies that block Ingress then ports `8000`, `8001`, `8081`, `8443` will need to be allowlisted.\nYou may still choose to disable webhooks through the helm chart.\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by IDs in YAML\nDESCRIPTION: This configuration snippet provides examples of selecting specific subnets directly via their IDs. It lists exact identifiers of targeted subnets.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - id: \"subnet-09fa4a0a8f233a921\"\n    - id: \"subnet-0471ca205b8a129ae\"\n```\n\n----------------------------------------\n\nTITLE: Current EC2NodeClasses Printer Columns Output\nDESCRIPTION: This snippet shows the current output of the 'kubectl get ec2nodeclasses' command, displaying only the NAME and AGE columns.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1-api.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  karpenter git:(main) ✗ k get ec2nodeclasses -o wide\nNAME      AGE\ndefault   2d8h\n```\n\n----------------------------------------\n\nTITLE: Example Log: Computing New NodeClaims\nDESCRIPTION: This JSON log entry shows Karpenter computing new NodeClaims to fit the identified pods.  It provides information about the number of NodeClaims and the number of pods that will be accommodated by these NodeClaims. The \"controller\" field indicates the component responsible for this action (provisioner).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"level\": \"INFO\",\n       \"time\": \"2024-06-22T02:24:16.114Z\",\n       \"message\": \"computed new nodeclaim(s) to fit pod(s)\",\n       \"controller\": \"provisioner\",\n       \"nodeclaims\": 1,\n       \"pods\": 5\n   }\n```\n\n----------------------------------------\n\nTITLE: Generating Karpenter Deployment YAML\nDESCRIPTION: Generates a complete Karpenter deployment YAML file from the Helm chart for installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step08-generate-chart.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bottlerocket Node Root Filesystem with AWS SSM in Bash\nDESCRIPTION: Bash commands to access the root filesystem of a Bottlerocket node using AWS SSM. These commands allow connecting to the instance and entering the admin container for troubleshooting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n\n----------------------------------------\n\nTITLE: Updating Node Selector Labels for Karpenter v0.33.0\nDESCRIPTION: Update application node selectors, affinities, or topologySpreadConstraints to use the 'karpenter.sh/nodepool' label instead of 'karpenter.sh/provisioner-name' before upgrading to v0.33.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  karpenter.sh/nodepool: my-nodepool-name\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Cluster Autoscaler\nDESCRIPTION: Scales the Cluster Autoscaler deployment to zero replicas to disable it while Karpenter takes over node provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step11-scale-cas.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: KarpenterInterruptionQueue SQS Configuration\nDESCRIPTION: AWS SQS queue configuration for handling instance interruptions with 300-second message retention and server-side encryption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Removing Mutating Webhook Configuration\nDESCRIPTION: This code snippet provides the command to delete a specific mutating webhook configuration that was removed in Karpenter version `0.27.3`. It ensures that any leftover configurations from previous installations which may cause conflicts are cleared out.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Version\nDESCRIPTION: Sets the Karpenter version to deploy as an environment variable.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=v0.32.10\n```\n\n----------------------------------------\n\nTITLE: NodePool Behavioral Fields Table\nDESCRIPTION: Table showing the NodePool behavioral fields that control Karpenter's provisioning and disruption logic but are not considered for drift.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec.weight\nspec.limits\nspec.disruption.*\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Security Groups in EC2NodeClass Status\nDESCRIPTION: Example of how resolved security groups are displayed in the status field of an EC2NodeClass, based on the security group selector terms specified in the spec.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Upgrading Karpenter with Helm\nDESCRIPTION: Upgrades the Karpenter controller using Helm to version v0.32.10, configuring service account annotations, instance profile, cluster name, and resource limits.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm registry logout public.ecr.aws\n\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace karpenter --create-namespace \\\n  --set serviceAccount.annotations.\"eks\\.amazonaws\\.com/role-arn\"=${KARPENTER_IAM_ROLE_ARN} \\\n  --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME} \\\n  --set settings.clusterName=${CLUSTER_NAME} \\\n  --set settings.interruptionQueue=${CLUSTER_NAME} \\\n  --set controller.resources.requests.cpu=1 \\\n  --set controller.resources.requests.memory=1Gi \\\n  --set controller.resources.limits.cpu=1 \\\n  --set controller.resources.limits.memory=1Gi \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Pod ENI Resource Request Example\nDESCRIPTION: Example showing how to request Pod ENI resources for AWS VPC CNI integration. Requests 1 pod ENI for the container.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      containers:\n      - resources:\n          limits:\n            vpc.amazonaws.com/pod-eni: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Node Finalizers\nDESCRIPTION: Script to remove all finalizers from nodes with the Karpenter termination finalizer.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Pod Specification with Simple Node Selector Constraints\nDESCRIPTION: Example showing how to specify vendor-specific and vendor-neutral node constraints using node selectors in a pod spec.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1alpha4-api.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  nodeSelector:\n    node.k8s.aws/subnet-name: \"123\" # Vendor Specific Field\n    kubernetes.io/instance-type: \"m5.large\" # Vendor Neutral Field\n```\n\n----------------------------------------\n\nTITLE: Finding Available AMI Versions for AL2 with AWS CLI\nDESCRIPTION: Bash command to discover available AL2 AMI versions for a specific Kubernetes version using AWS SSM parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"{{< param \\\"latest_k8s_version\\\" >}}\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $8}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: CNI IP Allocation Error Example - Bash\nDESCRIPTION: Example error message when CNI fails to allocate IP address to a pod due to networking constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Bash Script UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a simple bash script that can be passed as UserData for AL2023 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\necho \"Hello, AL2023!\"\n```\n\n----------------------------------------\n\nTITLE: Regional Read Actions Policy\nDESCRIPTION: IAM policy allowing read-only actions for EC2 resources within the specified region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster Utilization Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the utilization of allocatable resources by pod requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_utilization_percent`\nUtilization of allocatable resources by pod requests\n- Stability Level: ALPHA\n```\n\n----------------------------------------\n\nTITLE: Pod Configuration for Minimum NVME Storage Size\nDESCRIPTION: YAML snippet showing how to configure a pod to require nodes with at least 100GB of NVME storage using node affinity with the 'Gt' operator comparing against the karpenter.k8s.aws/instance-local-nvme label value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n...\n affinity:\n   nodeAffinity:\n     requiredDuringSchedulingIgnoredDuringExecution:\n       nodeSelectorTerms:\n         - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: Gt\n              values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Attempt Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring the latency of AWS SDK Go request attempts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_attempt_duration_seconds`\nLatency of AWS SDK Go request attempts\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS IAM Permissions for Karpenter\nDESCRIPTION: Command to deploy the correct IAM permissions, including the instance profile for provisioned nodes in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Spec with Node Selector for Karpenter Provisioner in YAML\nDESCRIPTION: This YAML snippet demonstrates how customers can use multiple provisioners by specifying node selectors in their pod specs. It includes selectors for architecture and provisioner name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nspec:\n  nodeSelector:\n    kubernetes.io/arch: arm64\n    provisioning.karpenter.sh/name: some-provisioner\n```\n\n----------------------------------------\n\nTITLE: Replacing Provisioners CRD for Karpenter 0.16.0+ Upgrade\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v1alpha5 which adds a new weight field required for Karpenter version 0.16.0 and above.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring privateCluster in EKS ClusterConfig\nDESCRIPTION: YAML configuration for enabling a private EKS cluster in the eksctl ClusterConfig file. This setting is required when installing Karpenter in a private cluster environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nprivateCluster:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster Utilization Metric\nDESCRIPTION: Describes the metric for measuring the utilization of allocatable resources by pod requests in the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_utilization_percent`\nUtilization of allocatable resources by pod requests\n- Stability Level: ALPHA\n```\n\n----------------------------------------\n\nTITLE: Labeling CRDs for Helm Management\nDESCRIPTION: This command adds Helm-related labels to CRDs that were previously unmanaged by Helm, allowing for proper Helm management during chart installations. It is essential when Helm complains about invalid ownership metadata during CRD installations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket Default Block Device Mapping\nDESCRIPTION: Default block device mapping configuration for Bottlerocket AMI family with root and data volumes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    # Root device\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 4Gi\n        volumeType: gp3\n        encrypted: true\n    # Data device: Container resources such as images and logs\n    - deviceName: /dev/xvdb\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Timestream CloudFormation Stack\nDESCRIPTION: Command to deploy AWS Timestream database and tables for storing Karpenter test results. Creates a database and tables for scale test durations, sweeper cleaned resources, and resource counts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/test/cloudformation/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\naws cloudformation deploy \\\n   --stack-name GithubActionsTimestream \\\n   --template-file timestream_cloudformation.yaml \\\n   --parameter-overrides \"DatabaseName=karpenterTesting\" \"TableName=scaleTestDurations\" \"SweeperTableName=sweeperCleanedResources\" \"ResourceCountTableName=resourceCount\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Karpenter in Cluster using Bash\nDESCRIPTION: Installs or uninstalls Karpenter within the Kubernetes cluster defined in ~/.kube/config file. Ensures Karpenter integration within your Kubernetes environment using Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets Using Wildcards - YAML\nDESCRIPTION: This snippet shows how to use wildcard characters in the selection criteria for subnets, allowing for broader matches based on the naming convention of subnets.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        Name: \"*Public*\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity and Anti-Affinity with Karpenter\nDESCRIPTION: This YAML demonstrates configuring pod affinity and anti-affinity. The pod affinity rule schedules the pod in zones where a pod with the label `system=backend` is already running.  The anti-affinity rule prevents the pod from running on any node with a pod labeled `app=inflate`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  affinity:\\n    podAffinity:\\n      requiredDuringSchedulingIgnoredDuringExecution:\\n      - labelSelector:\\n          matchExpressions:\\n          - key: system\\n            operator: In\\n            values:\\n            - backend\\n        topologyKey: topology.kubernetes.io/zone\\n    podAntiAffinity:\\n      requiredDuringSchedulingIgnoredDuringExecution:\\n      - labelSelector:\\n          matchLabels:\\n            app: inflate\\n        topologyKey: kubernetes.io/hostname\\n\"\n```\n\n----------------------------------------\n\nTITLE: Documentation YAML Front Matter\nDESCRIPTION: YAML front matter configuration for the documentation page, setting the title, link title, weight and cascade properties.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Documentation\"\nlinkTitle: \"Docs\"\nweight: 20\ncascade:\n  type: docs\n  tags:\n    - preview\n---\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Auth ConfigMap\nDESCRIPTION: Command to inspect the aws-auth ConfigMap for IAM role mappings\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmaps -n kube-system aws-auth -o yaml\n```\n\n----------------------------------------\n\nTITLE: Removing Karpenter Finalizers from Nodes\nDESCRIPTION: This bash script removes all finalizers from nodes with the Karpenter finalizer, which can be useful when uninstalling Karpenter and nodes are stuck in termination.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs with Journalctl\nDESCRIPTION: Command to check kubelet logs in Bottlerocket systems\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: Example of Passed-in User Data (Bash)\nDESCRIPTION: Example of user data passed in as a bash script for an EC2NodeClass. This demonstrates a simple custom user data script.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\necho \"Running custom user data script (bash)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Team B Deployment with Node Selector\nDESCRIPTION: Kubernetes deployment configuration that targets nodes labeled for Team B using nodeSelector.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: team-b-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-b\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizers from Nodes after Karpenter Uninstallation\nDESCRIPTION: This script removes all finalizers, including those added by Karpenter, from nodes. It is useful in situations where Karpenter has been uninstalled but nodes remain stuck due to finalizers preventing deletion. The script requires kubectl access to the Kubernetes cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl get nodes -ojsonpath='{range .items[*].metadata}{@.name}:{@.finalizers}{\"\\n\"}' | grep \"karpenter.sh/termination\" | cut -d ':' -f 1 | xargs kubectl patch node --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Finding AWS Node Pods\nDESCRIPTION: Commands to locate and inspect AWS CNI plugin pods\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\n----------------------------------------\n\nTITLE: Get AWS Node Pods\nDESCRIPTION: This command retrieves the pods running in the kube-system namespace and filters the output to show only the pods with names containing 'aws-node'.  It is used to identify the `aws-node` pods, which are responsible for the VPC CNI plugin.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n\"kubectl get pods -n kube-system | grep aws-node\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Amazon Linux 2 UserData with MIME Multipart - Option 3\nDESCRIPTION: Recommended approach for AL2 UserData with Karpenter-managed initialization script, followed by user-managed customization script, with kubelet disabled until customization is complete. This allows users to modify kubelet configuration safely.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\nset -ex\nB64_CLUSTER_CA=base64data\nAPI_SERVER_URL=apiServerEndpoint\nK8S_CLUSTER_DNS_IP=k8sClusterDnsIp\n/etc/eks/bootstrap.sh clusterName\n  --kubelet-extra-args '--node-labels=karpenter.sh/provisioner-name=default,karpenter.sh/capacity-type=on-demand' \\\n  --b64-cluster-ca $B64_CLUSTER_CA \\\n  --apiserver-endpoint $API_SERVER_URL \\\n  --dns-cluster-ip $K8S_CLUSTER_DNS_IP \\\n  --kubelet-disabled\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n#!/bin/bash\n\n# Running custom user data script that was in the ProvisionerSpec\n# At this point, the kubelet hasn't started so as a user I can make mutations\n# to any of the kubeletConfig / containerRuntime as needed.\n\n# To edit kubelet extra-args - /etc/systemd/system/kubelet.service.d/30-kubelet-extra-args.conf\n# To edit other kubelet args - /etc/systemd/system/kubelet.service.d/\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for Bottlerocket AMI Family (YAML)\nDESCRIPTION: Default block device mapping configuration for the Bottlerocket AMI family in Karpenter. It sets up two volumes: a 4Gi root device and a 20Gi data device for container resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    # Root device\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 4Gi\n        volumeType: gp3\n        encrypted: true\n    # Data device: Container resources such as images and logs\n    - deviceName: /dev/xvdb\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple CRDs Karpenter 0.14.0\nDESCRIPTION: These snippets update two CRDs to version 0.14.0, adding new fields to both `provisioners.karpenter.sh` and `awsnodetemplates.karpenter.k8s.aws`. This step is crucial for enabling new parameter configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Available AMI Versions for Bottlerocket in Bash\nDESCRIPTION: Bash command to retrieve available AMI versions for Bottlerocket in a specific Kubernetes version and AWS region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"1.32\"\naws ssm get-parameters-by-path --path \"/aws/service/bottlerocket/aws-k8s-$K8S_VERSION\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"latest\" | awk -F '/' '{print $7}' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Executing AWS CLI Commands for Security Group Verification in Bash\nDESCRIPTION: This Bash command snippet checks if the security group selector logic is impacted by tag keys used for AWS Load Balancer Controller. It retrieves and verifies security groups by a cluster's VPC ID, ensuring they match selector terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_VPC_ID=\"$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.resourcesVpcConfig.vpcId --output text)\"\n\naws ec2 describe-security-groups --filters Name=vpc-id,Values=$CLUSTER_VPC_ID Name=tag-key,Values=kubernetes.io/cluster/$CLUSTER_NAME --query 'SecurityGroups[].[GroupName]' --output text\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Karpenter Nodes Manually\nDESCRIPTION: This snippet illustrates the command to delete a Karpenter node manually, detailing the associated neck mechanism for safe shutdown.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step16-delete-node.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: This snippet is used to enhance log monitoring by tailing Karpenter logs using Stern, a tool tailored for Kubernetes log streams.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Deprecated Karpenter Resources\nDESCRIPTION: Removes the old Provisioners and AWSNodeTemplates after successful migration to v1beta1 resources, completing the upgrade process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete provisioners --all\nkubectl delete awsnodetemplates --all\n```\n\n----------------------------------------\n\nTITLE: Allowing Regional Read Actions for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to perform various read-only actions on EC2 resources within the current AWS region. It includes permissions to describe instances, images, instance types, launch templates, security groups, spot prices, and subnets.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Log: Initializing NodeClaim\nDESCRIPTION: JSON log showing the completed initialization of a node with its final allocatable resources made available to the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:24:52.642Z\",\n  \"message\": \"initialized nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"7910m\",\n    \"ephemeral-storage\": \"18242267924\",\n    \"hugepages-2Mi\": \"0\",\n    \"memory\": \"14320468Ki\",\n    \"pods\": \"58\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Transition Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the time a condition was in a given state before transitioning, labeled by nodeclaim name and namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_transition_seconds`\nThe amount of time a condition was in a given state before transitioning. Labeled by the name of the nodeclaim, and the namespace.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for Minimum NVME Storage Size\nDESCRIPTION: This YAML snippet demonstrates how to configure a NodePool to require instances with at least 100GB of NVME storage using Karpenter's well-known labels with the `Gt` operator.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: Gt\n    values: [\"99\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Unsynced Time Metric\nDESCRIPTION: Describes the metric for measuring the duration for which the cluster state is not synchronized.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_unsynced_time_seconds`\nThe time for which cluster state is not synced\n- Stability Level: ALPHA\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Disruption Toleration\nDESCRIPTION: Configuration for pod toleration to prevent eviction during node disruption events\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n- key: karpenter.sh/disruption\n  effect: NoSchedule\n  operator: Equals\n  value: disrupting\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter in Kubernetes Cluster\nDESCRIPTION: Commands to install and uninstall Karpenter in the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD for v0.16.0\nDESCRIPTION: Command to update the Karpenter Provisioner CRD to version 0.16.0, which adds a new weight field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoints with AWS CLI\nDESCRIPTION: This snippet demonstrates how to create VPC endpoints using the AWS CLI.  It uses the `aws ec2 create-vpc-endpoint` command to create interface endpoints for specific services within a VPC, allowing resources within the VPC to access those services without traversing the public internet.  Replace `${VPC_ID}`, `${SERVICE_NAME}`, `${SUBNET_IDS}`, and `${SECURITY_GROUP_IDS}` with your actual values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"aws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of reconciliations per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_total`\nTotal number of reconciliations per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Provisioner (v1alpha5) Configuration - YAML\nDESCRIPTION: This snippet presents an example of a Karpenter Provisioner configuration in the v1alpha5 version. It showcases various fields such as providerRef, annotations, labels, requirements, taints, kubelet configuration, limits, and weight. These configurations are migrated to the NodePool and NodeClass resources in v1beta1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1alpha5\\nkind: Provisioner\\n ...\\nspec:\\n  providerRef:\\n    name: default\\n  annotations:\\n    custom-annotation: custom-value\\n  labels:\\n    team: team-a\\n    custom-label: custom-value\\n  requirements:\\n  - key: karpenter.k8s.aws/instance-generation\\n    operator: Gt\\n    values: [\\\"3\\\"]\\n  - key: karpenter.k8s.aws/instance-category\\n    operator: In\\n    values: [\\\"c\\\", \\\"m\\\", \\\"r\\\"]\\n  - key: karpenter.sh/capacity-type\\n    operator: In\\n    values: [\\\"spot\\\"]\\n  taints:\\n  - key: example.com/special-taint\\n    value: \\\"true\\\"\\n    effect: NoSchedule\\n  startupTaints:\\n  - key: example.com/another-taint\\n    value: \\\"true\\\"\\n    effect: NoSchedule\\n  kubelet:\\n    systemReserved:\\n      cpu: 100m\\n      memory: 100Mi\\n      ephemeral-storage: 1Gi\\n    maxPods: 20\\n  limits:\\n    resources:\\n      cpu: 1000\\n      memory: 1000Gi\\n  weight: 50\"\n```\n\n----------------------------------------\n\nTITLE: Allow Regional Read Actions - JSON\nDESCRIPTION: This IAM policy allows Karpenter to perform various `Describe*` actions for EC2 resources within the current AWS region. These actions enable Karpenter to gather information about availability zones, images, instances, instance types, launch templates, security groups, spot prices, and subnets. The `aws:RequestedRegion` condition ensures that Karpenter only reads resources within the region where it is operating.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowRegionalReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": [\n    \"ec2:DescribeImages\",\n    \"ec2:DescribeInstances\",\n    \"ec2:DescribeInstanceTypeOfferings\",\n    \"ec2:DescribeInstanceTypes\",\n    \"ec2:DescribeLaunchTemplates\",\n    \"ec2:DescribeSecurityGroups\",\n    \"ec2:DescribeSpotPriceHistory\",\n    \"ec2:DescribeSubnets\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestedRegion\": \"${AWS::Region}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default EC2 Metadata Options in Karpenter\nDESCRIPTION: Default configuration for EC2 Instance Metadata Service (IMDS) options when using Karpenter. These settings follow security best practices for limiting exposure of Instance Metadata and User Data to pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 2\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioners CRD for Karpenter 0.15.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.15.0, which adds a new consolidation field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Labeling CRDs for Helm Managed-By\nDESCRIPTION: This command labels the Karpenter CRDs as managed by Helm to resolve installation issues with the karpenter-crd chart.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring Spot Instance Interruption Monitoring for Karpenter in CloudFormation\nDESCRIPTION: This YAML defines an EventBridge rule to capture EC2 Spot Instance Interruption Warning events and forward them to Karpenter's queue. This enables Karpenter to proactively respond to spot instances that are about to be reclaimed by AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Update AWSNodeTemplate CRD (v0.13.0)\nDESCRIPTION: This command deletes the old `awsnodetemplate` CRD and applies the updated `awsnodetemplates` CRD.  This is needed because Helm does not manage the lifecycle of CRDs. The `awsnodetemplate` CRD was renamed to `awsnodetemplates` in `0.12.0`.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete crd awsnodetemplate\n\nkubectl apply -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.13.2/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Examining Runtime Network Not Ready Error\nDESCRIPTION: Example of a kubelet error message indicating network plugin initialization failure, which may be related to IAM role permission issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nKubeletNotReady runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: This script retrieves the Grafana admin password stored in a secret, necessary for logging in to the Grafana dashboards set up for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step11-grafana-get-password.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Karpenter with Helm\nDESCRIPTION: This snippet shows how to enable debug logging for Karpenter during installation using Helm. It sets the logLevel option to debug.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Termination Current Time Metric\nDESCRIPTION: Describes the metric for tracking the current duration of an EC2NodeClass in terminating state, labeled by name and namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_termination_current_time_seconds`\nThe current amount of time in seconds that an ec2nodeclass has been in terminating state. Labeled by name, and namespace.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Adding Node Affinity to Pods\nDESCRIPTION: This YAML snippet demonstrates how to add node affinity to a pod specification to meet NodePool.constraints in Karpenter. By setting a condition on pod placement, the pod is forced to locate within specific zones matching NodePools' configuration. Dependencies include Kubernetes and Karpenter, with zone constraints defined for proper resource allocation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: Command to tail Karpenter logs using Stern, a log tailing tool for Kubernetes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS IAM permissions for Karpenter\nDESCRIPTION: Deploys the necessary IAM permissions for Karpenter, including instance profiles for provisioned nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeConfig UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a NodeConfig YAML that can be passed as UserData for AL2023 instances. This configures kubelet settings, specifically setting maxPods to 42.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection using IDs in Karpenter\nDESCRIPTION: This YAML snippet demonstrates selecting subnets by their IDs in Karpenter.  It configures Karpenter to use specific subnets based on their AWS subnet IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  subnetSelectorTerms:\\n    - id: \\\"subnet-09fa4a0a8f233a921\\\"\\n    - id: \\\"subnet-0471ca205b8a129ae\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Labeling Karpenter CRDs for Helm Management on AWS\nDESCRIPTION: This command labels Karpenter Custom Resource Definitions (CRDs) to be managed by Helm, resolving installation errors related to invalid ownership metadata.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: SQS Interruption Queue Policy\nDESCRIPTION: IAM policy allowing access to SQS queue operations for handling instance interruptions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Termination Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the duration of EC2NodeClass termination in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_termination_duration_seconds`\nDuration of ec2nodeclass termination in seconds.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Deployment with Karpenter\nDESCRIPTION: This snippet provides the command for scaling down a deployment, ensuring Karpenter handles node consolidation afterward.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step14-deprovisioning.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: Command to tail Karpenter logs using Stern, which provides enhanced log viewing capabilities compared to standard kubectl logs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Requirements with Default Instance Categories\nDESCRIPTION: YAML configuration showing default instance category requirements in Karpenter v1alpha5\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  requirements:\n  - key: karpenter.k8s.aws/instance-category\n    operator: In\n    values: [\"c\", \"m\", \"r\"]\n  - key: karpenter.k8s.aws/instance-generation\n    operator: In\n    values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Locally in Go\nDESCRIPTION: Executes the Karpenter Go binary against the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Referencing Helm Chart Script\nDESCRIPTION: Script reference for applying Helm chart during Karpenter upgrade process. Located in the getting-started guide under step 8.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart.sh\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Deleted Messages Metric\nDESCRIPTION: Describes the metric for counting messages deleted from the SQS queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_deleted_messages_total`\nCount of messages deleted from the SQS queue.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Public IP Association in Karpenter EC2NodeClass\nDESCRIPTION: YAML configuration to explicitly set whether EC2 instances launched by Karpenter should have an associated public IP address.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  associatePublicIPAddress: false\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Adds Total Metric\nDESCRIPTION: Describes the metric for counting the total number of adds handled by the workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_adds_total`\nTotal number of adds handled by workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Affinity Configuration\nDESCRIPTION: YAML configuration for node affinity to ensure Karpenter pods run on existing node group nodes, with pod anti-affinity for high availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Allowing API Server Endpoint Discovery for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to discover the Kubernetes cluster's external API endpoint. This is optional and used for EKS clusters to enable EC2 nodes to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Service Linked Role for EC2 Spot Instances\nDESCRIPTION: AWS CLI command to create the necessary service linked role for EC2 Spot Instances, which resolves the ServiceLinkedRoleCreationNotPermitted error during Karpenter installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Windows Default Block Device Mapping\nDESCRIPTION: Default block device mapping configuration for Windows 2019/2022 AMI families.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/sda1\n      ebs:\n        volumeSize: 50Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Instance Type Memory Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the memory in bytes for a given instance type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_memory_bytes`\nMemory, in bytes, for a given instance type.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Detaching IAM Policy from Role - AWS CLI\nDESCRIPTION: This snippet demonstrates how to detach an IAM policy from a role using the AWS CLI. It uses the cluster name to construct the role and policy names, and fetches the policy ARN. This command is used to remove alpha policies attached to the controller role during the Karpenter migration process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"ROLE_NAME=\\\"${CLUSTER_NAME}-karpenter\\\"\\nPOLICY_NAME=\\\"KarpenterControllerPolicy-${CLUSTER_NAME}\\\"\\nPOLICY_ARN=$(aws iam list-policies --query \\\"Policies[?PolicyName=='${POLICY_NAME}'].Arn\\\" --output text)\\naws iam detach-role-policy --role-name \\\"${ROLE_NAME}\\\" --policy-arn \\\"${POLICY_ARN}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication with AWS ECR\nDESCRIPTION: Commands to set up Docker authentication with AWS ECR for pushing and pulling container images during development.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Karpenter AWS Provisioner Specs with Environment Variable Substitution\nDESCRIPTION: Command to substitute the CLUSTER_NAME environment variable in the provisioner spec file and apply it to a Kubernetes cluster. This command uses envsubst to replace environment variables and pipes the output to kubectl for application.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCLUSTER_NAME=<my-cluster-name> envsubst < provisioner/spot.yaml | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Example Log: Registering NodeClaim\nDESCRIPTION: This JSON log entry signifies that the NodeClaim has been successfully registered with the cluster. It includes the NodeClaim name, provider ID, and the Kubernetes node name that the NodeClaim is associated with. The \"controller\" field indicates the component responsible for this action (nodeclaim.lifecycle).\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"level\": \"INFO\",\n     \"time\": \"2024-06-22T02:26:19.028Z\",\n     \"message\": \"registered nodeclaim\",\n     \"controller\": \"nodeclaim.lifecycle\",\n     \"NodeClaim\": {\n       \"name\": \"default-sfpsl\"\n     },\n     \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n     \"Node\": {\n       \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Instance Profile in EC2NodeClass Status with YAML\nDESCRIPTION: This example shows how the role is specified in the spec and how the resolved instance profile appears in the status field. Karpenter generates the instance profile from the specified role.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Adding Zonal Constraints to Pod Spec in YAML\nDESCRIPTION: This snippet shows how to add zonal constraints to a pod spec to match the requirements of a specific NodePool. It uses node affinity to restrict the pod to specific availability zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n\n----------------------------------------\n\nTITLE: Allowing Instance Role Passing for Karpenter in AWS IAM\nDESCRIPTION: IAM policy statement allowing Karpenter to pass the node role to EC2 instance profiles. It restricts the action to specific EC2 services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPassingInstanceRole\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterNodeRole.Arn}\",\n  \"Action\": \"iam:PassRole\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"iam:PassedToService\": [\n        \"ec2.amazonaws.com\",\n        \"ec2.amazonaws.com.cn\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePool for Security Groups with ENI Trunking\nDESCRIPTION: YAML configuration for a Karpenter NodePool that handles Security Groups for Pods by adding the vpc.amazonaws.com/has-trunk-attached label to prevent pods from getting stuck in ContainerCreating state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template\n    metadata:\n      labels:\n        vpc.amazonaws.com/has-trunk-attached: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Spot Service Linked Role for Karpenter\nDESCRIPTION: This script creates the AWS IAM service-linked role for EC2 Spot instances, which is required for Karpenter to provision Spot instances. This helps avoid the ServiceLinkedRoleCreationNotPermitted error that can occur if the account hasn't been onboarded to EC2 Spot.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create the service linked role for Spot\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com 2> /dev/null || echo 'Service linked role exists'\n```\n\n----------------------------------------\n\nTITLE: Enabling Webhooks for Karpenter v0.33.0 on Kubernetes <1.25\nDESCRIPTION: Set the DISABLE_WEBHOOK environment variable to false or use the Helm chart option to enable webhooks for Karpenter v0.33.0 on Kubernetes versions below 1.25.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Using environment variable\nDISABLE_WEBHOOK=false\n\n# Using Helm\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --set webhook.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Upgrading Karpenter with Helm in Bash\nDESCRIPTION: This snippet demonstrates how to upgrade Karpenter using Helm. It requires the KarpenterController IAM Role ARN and sets the Karpenter version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\\n    --version ${KARPENTER_VERSION} \\\\n    --namespace karpenter \\\\n    --create-namespace \\\\n    --set serviceAccount.annotations.eks\\\\.amazonaws\\\\.com/role-arn=${KARPENTER_IAM_ROLE_ARN} \\\\n    --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME} \\\\n    --set settings.aws.clusterName=${CLUSTER_NAME} \\\\n    --set settings.aws.clusterEndpoint=${CLUSTER_ENDPOINT} \\\\n    --set settings.aws.interruptionQueueName=${CLUSTER_NAME} \\\\n    --wait\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Errors Total Metric\nDESCRIPTION: Describes the metric for counting the total number of errors returned from CloudProvider calls.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_errors_total`\nTotal number of errors returned from CloudProvider calls.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Windows Pod Sandbox Creation Failure in EKS\nDESCRIPTION: Windows pods may fail with a 'FailedCreatedPodSandbox' error when Windows support is not properly enabled in the EKS cluster. This error occurs when the VPC bridge plugin fails to set up networking for the pod sandbox due to missing IP address labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\": plugin type=\"vpc-bridge\" name=\"vpc\" failed (add): failed to parse Kubernetes args: pod does not have label vpc.amazonaws.com/PrivateIPv4Address\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Environment Variables\nDESCRIPTION: Sets up initial environment variables for Karpenter version, namespace and Kubernetes version configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=karpenter\nexport KARPENTER_VERSION=v0.32.10\nexport K8S_VERSION=1.28\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Tests\nDESCRIPTION: Command to run E2E correctness tests for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: Optimizing GPU Workload Instance Type Selection in Karpenter\nDESCRIPTION: Example showing how to prefer specific GPU instance types (p3 family) for GPU-intensive workloads with fallback to alternative GPU instance families when preferred types are unavailable.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Prefer p3 instance types for GPU workloads\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: reserved\nspec:\n  weight: 50\n  requirements:\n  - key: \"karpenter.k8s.aws/instance-family\"\n    operator: In\n    values: [\"p3\"]\n  - key: \"gpu-intensive\"\n    operator: Exists\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# GPU-intensive workloads can run optionally on these as a backup\n\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n  name: fallback\nspec:\n  requirements:\n  - key: \"node.kubernetes.io/instance-type\"\n    operator: In\n    values: [\"g5\", \"g3\"]\n  - key: \"gpu-intensive\"\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Options in EC2NodeClass\nDESCRIPTION: Example of setting metadata options for EC2 instances launched by EC2NodeClass. This configuration controls the exposure of Instance Metadata Service on EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: Checking NodeClaim Consistency Status with kubectl\nDESCRIPTION: Bash command to retrieve the ConsistentStateFound condition from a NodeClaim, which helps detect instances where Karpenter might be overestimating resource availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ kg nodeclaim $NODECLAIM_NAME -o jsonpath='{.status.conditions[?(@.type==\"ConsistentStateFound\")]}'\n```\n\n----------------------------------------\n\nTITLE: Documenting Leader Election Slowpath Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of slow paths exercised in renewing leader leases.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n### `leader_election_slowpath_total`\nTotal number of slow path exercised in renewing leader leases. 'name' is the string used to identify the lease. Please make sure to group by name.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoint for Private Clusters\nDESCRIPTION: Command to create a VPC endpoint for enabling private cluster communication with AWS services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\n```\n\n----------------------------------------\n\nTITLE: Creating ECR Repository for Karpenter Development\nDESCRIPTION: AWS CLI command to create an ECR repository for Karpenter development images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Provisioner ttlSecondsUntilExpired (v1alpha5) Configuration - YAML\nDESCRIPTION: This snippet shows the `spec.ttlSecondsUntilExpired` field within a Karpenter Provisioner in v1alpha5.  This field is replaced by `expireAfter` inside the `disruption` block in v1beta1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1alpha5\\nkind: Provisioner\\n...\\nspec:\\n  ttlSecondsUntilExpired: 2592000 # 30 Days = 60 * 60 * 24 * 30 Seconds\"\n```\n\n----------------------------------------\n\nTITLE: Building Karpenter images\nDESCRIPTION: Builds and pushes the Karpenter images without deploying to the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake image # build and push the karpenter images\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EKS Node with Karpenter Provider in YAML\nDESCRIPTION: Defines a NodeConfig resource for AWS EKS with custom cluster settings, kubelet configuration, and containerd settings. Specifies cluster name, API server endpoint, networking, and resource allocations for the node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/pkg/providers/amifamily/bootstrap/mime/test_data/mime_valid.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 42\n      systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    flags:\n      - --node-labels \"foo=bar\"\n  containerd:\n    config: |\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      discard_unpacked_layers = false\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Terminal Reconcile Errors Total Metric\nDESCRIPTION: Describes the metric for counting the total number of terminal reconciliation errors per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_terminal_reconcile_errors_total`\nTotal number of terminal reconciliation errors per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Monitoring in Karpenter EC2NodeClass\nDESCRIPTION: YAML configuration to enable detailed monitoring for EC2 instances launched by Karpenter, providing 1-minute period monitoring graphs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: Windows Kubernetes Pod Error - Failed Pod Sandbox\nDESCRIPTION: Example error message showing failed pod sandbox creation due to missing VPC label for Windows pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\": plugin type=\"vpc-bridge\" name=\"vpc\" failed (add): failed to parse Kubernetes args: pod does not have label vpc.amazonaws.com/PrivateIPv4Address\n```\n\n----------------------------------------\n\nTITLE: Using 'Exists' Operator for Workload Segregation in Karpenter NodePools\nDESCRIPTION: This YAML configuration demonstrates how to use the 'Exists' operator in Karpenter NodePools to provide workload segregation across nodes. It includes examples of NodePool configuration and corresponding deployment nodeSelectors.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nspec:\n  template:\n    spec:\n      requirements:\n        - key: company.com/team\n          operator: Exists\n...\n\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: team-a-deployment\nspec:\n  replicas: 5\n  template:\n    spec:\n      nodeSelector:\n        company.com/team: team-a\n\napiVersion: v1\nkind: Node\nmetadata:\n  labels:\n    company.com/team: team-a\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Instance Type Offering Availability Metric in Markdown\nDESCRIPTION: Describes the metric for indicating the availability of instance type offerings based on various factors.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_offering_available`\nInstance type offering availability, based on instance type, capacity type, and zone\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: AMI Selection Using AMI ID\nDESCRIPTION: Demonstrates selecting an AMI using its specific ID, which provides the most precise control over AMI selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- id: ami-052c9ea013e6e3567\n```\n\n----------------------------------------\n\nTITLE: PVC Attachment Error Messages\nDESCRIPTION: Example error messages that appear when pods with PersistentVolumes hit volume attachment limits on a node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Deleted Messages Metric in Markdown\nDESCRIPTION: Describes the metric for counting messages deleted from the SQS queue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_deleted_messages_total`\nCount of messages deleted from the SQS queue.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs with Journalctl\nDESCRIPTION: Command to check kubelet logs in Bottlerocket's journal directory\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: Merged Bash Script UserData for AL2023 in Karpenter\nDESCRIPTION: Example of how Karpenter merges a bash script with its generated NodeConfig. The merged output is a MIME multi-part archive containing both the custom bash script and Karpenter-generated NodeConfig.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_57\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Downloading Karpenter CloudFormation Template\nDESCRIPTION: Bash commands to download a specific version of the Karpenter CloudFormation template using curl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.3.3\"\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/v\"${KARPENTER_VERSION}\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\n```\n\n----------------------------------------\n\nTITLE: EKS Node Registration in Bash\nDESCRIPTION: This bash script excerpt shows how EKS clusters register themselves to the kube-apiserver and EKS control plane. It's used to explain potential conflicts between Karpenter and kubelet when creating nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-ownership.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh#L321\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Logs\nDESCRIPTION: Command to follow the Karpenter controller logs to verify it's functioning correctly during the migration process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -n karpenter -c controller -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Create SQS Queue for Interruption Handling\nDESCRIPTION: This AWS CloudFormation snippet defines an SQS queue named after the cluster (using the ClusterName parameter). It configures message retention for 300 seconds and enables server-side encryption using SQS-managed keys, for handling EC2 instance interruptions. This queue allows Karpenter to react proactively to AWS health events, spot interruptions, rebalance recommendations and instance state changes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Store Policy for RAID0\nDESCRIPTION: Example of configuring the instanceStorePolicy field to use RAID0 for instance store volumes. This setting is useful for workloads requiring faster node ephemeral storage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  instanceStorePolicy: RAID0\n```\n\n----------------------------------------\n\nTITLE: Pricing Read Policy\nDESCRIPTION: IAM policy allowing access to AWS pricing information across all regions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Karpenter Documentation\nDESCRIPTION: YAML front matter configuration for a documentation page about Karpenter tasks. Sets up the page title, link title, weight for ordering, description, and cascade settings for the documentation system.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Tasks\"\nlinkTitle: \"Tasks\"\nweight: 25\ndescription: >\n  Tasks to run with Karpenter\ncascade:\n  type: docs\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Karpenter Changes\nDESCRIPTION: Commands for quickly deploying changes to your cluster and running code generation, linting, and tests as part of the development workflow.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter locally\nDESCRIPTION: Runs the Karpenter Go binary locally against the Kubernetes cluster specified in ~/.kube/config.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Windows Nodes in EKS\nDESCRIPTION: Windows nodes require specific RBAC group membership including 'eks:kube-proxy-windows' to allow kube-proxy to function correctly. This configuration is essential for DNS resolution to work properly in Windows pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: EC2 Instance Actions with Tags Permission Configuration\nDESCRIPTION: JSON policy statement defining EC2 instance actions with required tags for the Karpenter controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedEC2InstanceActionsWithTags\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:RunInstances\",\n    \"ec2:CreateFleet\",\n    \"ec2:CreateLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CRDs for Karpenter 0.14.0\nDESCRIPTION: Updates the provisioners.karpenter.sh and awsnodetemplates.karpenter.k8s.aws CRDs to include new fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: Resource Tagging Policy\nDESCRIPTION: IAM policy for tagging existing EC2 instances with specific tag restrictions and conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying IMDS Endpoint for Spot Interruption in Bash\nDESCRIPTION: This code snippet represents a conceptual query to the IMDS endpoint for checking Spot interruption notifications. It's part of the discussion on using a system daemon to monitor for Spot interruptions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/spot\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoints for Karpenter Services\nDESCRIPTION: This snippet includes the AWS service endpoints that need to be enabled in a private VPC for Karpenter to function properly, ensuring that various AWS services are accessible.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ncom.amazonaws.<region>.ec2\ncom.amazonaws.<region>.ecr.api\ncom.amazonaws.<region>.ecr.dkr\ncom.amazonaws.<region>.s3 – For pulling container images\ncom.amazonaws.<region>.sts – For IAM roles for service accounts\ncom.amazonaws.<region>.ssm - For resolving default AMIs\ncom.amazonaws.<region>.sqs - For accessing SQS if using interruption handling\ncom.amazonaws.<region>.eks - For Karpenter to discover the cluster endpoint\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: Tails logs for Karpenter using the Stern tool, which enhances the default Kubernetes log tailing experience. Stern helps in filtering and colorizing logs for better readability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: CNI IP Allocation Error Message\nDESCRIPTION: Example error message that appears when the CNI fails to allocate IP addresses to pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu NodeClass with AL2 AMIFamily\nDESCRIPTION: Example YAML configuration for using Ubuntu with AL2 AMIFamily in EC2NodeClass. This shows how to specify AMI ID, block device mappings, and volume configuration after Ubuntu support was deprecated in v1.0.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD for v0.16.2\nDESCRIPTION: Command to update the Karpenter Provisioner CRD to version 0.16.2, which adds new kubeletConfiguration fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Operator Status Metrics Documentation\nDESCRIPTION: Metric for tracking the number of conditions for a given object, type and status. Used for monitoring alarm states where Available=False indicates an issue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\noperator_status_condition_count\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Depth Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the current depth of workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_depth`\nCurrent depth of workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter log level\nDESCRIPTION: Changes the Karpenter log level using Helm values.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--set logLevel=debug\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell UserData\nDESCRIPTION: Simple PowerShell script for Windows UserData that will be merged with Karpenter's bootstrap script. Shows how to create custom initialization for Windows nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_54\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket UserData in Karpenter\nDESCRIPTION: Example of UserData configuration for Bottlerocket instances in TOML format, showing custom settings that will be merged with Karpenter-generated configs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Windows Image Pull Error\nDESCRIPTION: Error message indicating Windows container version compatibility issues when pulling container images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nFailed to pull image \"mcr.microsoft.com/windows/servercore:xxx\": rpc error: code = NotFound desc = failed to pull and unpack image \"mcr.microsoft.com/windows/servercore:xxx\": no match for platform in manifest: not found\n```\n\n----------------------------------------\n\nTITLE: Advanced Node Resource Scheduling Examples\nDESCRIPTION: Examples of scheduling pods based on specific node resources like NVME storage and network bandwidth using node affinity rules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: \"karpenter.k8s.aws/instance-local-nvme\"\n            operator: \"Exists\"\n```\n\n----------------------------------------\n\nTITLE: Creating Default Karpenter NodePool\nDESCRIPTION: Creates a default NodePool resource that defines the configuration for nodes that Karpenter will provision for unscheduled workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step10-create-nodepool.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: GPU Pod with Tolerations\nDESCRIPTION: Pod configuration with GPU resource requests and tolerations to allow scheduling on GPU-tainted nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/scheduling.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mygpupod\nspec:\n  containers:\n  - name: gpuapp\n    resources:\n      requests:\n        nvidia.com/gpu: 1\n      limits:\n        nvidia.com/gpu: 1\n    image: mygpucontainer\n  tolerations:\n  - key: \"nvidia.com/gpu\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Applying Helm Chart for Karpenter Upgrade\nDESCRIPTION: This script applies the Helm chart to upgrade Karpenter to a specific version. It assumes that the KarpenterNode IAM Role and KarpenterController IAM Role have the correct permissions as specified in the provided cloudformation.yaml. The script requires the ARN of the KarpenterController IAM Role as input.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Termination Current Time Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the current time an EC2NodeClass has been in terminating state, labeled by name and namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_termination_current_time_seconds`\nThe current amount of time in seconds that an ec2nodeclass has been in terminating state. Labeled by name, and namespace.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Updating CRDs for v0.14.0\nDESCRIPTION: Commands to update both the provisioners.karpenter.sh and awsnodetemplates.karpenter.k8s.aws CRDs to v0.14.0, which adds new fields to both resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.14.0/charts/karpenter/crds/karpenter.k8s.aws_awsnodetemplates.yaml\n```\n\n----------------------------------------\n\nTITLE: MIME Format UserData for AL2023 in Karpenter\nDESCRIPTION: Example of a MIME multi-part archive UserData containing both bash script and NodeConfig sections.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_58\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n--//\n```\n\n----------------------------------------\n\nTITLE: API Statistics Metrics Schema\nDESCRIPTION: Defines metrics for monitoring Kubernetes and cloud provider API performance.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| **Name**                                          | **Type** | **Labels**               | **Description**                                                |\n|---------------------------------------------------|----------|--------------------------|----------------------------------------------------------------|\n| `karpenter_kube_api_time_seconds`                 | Summary  | `object`, `verb`, `code` | The duration of a call the API server                          |\n| `karpenter_kube_api_payload_total_bytes`          | Gauge    | `object`, `verb`, `code` | The total payload size transferred to/from the API server      |\n| `karpenter_cloudprovider_api_time_seconds`        | Summary  | `verb`, `code`           | The duration of an API call to a cloudprovider                 |\n| `karpenter_cloudprovider_api_payload_total_bytes` | Gauge    | `verb`, `code`           | The total payload size transferred to/from a cloudprovider API |\n```\n\n----------------------------------------\n\nTITLE: KMS Key Policy for EBS Encryption\nDESCRIPTION: Example KMS key policy for EBS volume encryption access\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues with Bash\nDESCRIPTION: This bash script helps investigate reasons for nodes staying in a 'NotReady' state by retrieving and analyzing the Kubelet logs. Developers can use AWS CLI and kubectl for connecting to instances and managing cluster nodes. It assists in pinpointing network or permissions issues hampering node readiness.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Node Logs\nDESCRIPTION: Command to view logs from the AWS CNI plugin pod\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Allowing Pricing Read Actions for AWS Karpenter\nDESCRIPTION: This policy allows Karpenter to retrieve product pricing information across all regions, as pricing data may not be available in every region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowPricingReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"*\",\n  \"Action\": \"pricing:GetProducts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merged PowerShell UserData for Windows in Karpenter\nDESCRIPTION: Example of how Karpenter merges PowerShell UserData with its generated bootstrap script for Windows instances. The merged output prepends the custom script to the EKS bootstrap commands.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_64\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\nWrite-Host \"Running custom user data script\"\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=spot,karpenter.sh/nodepool=windows2022\" --max-pods=110' -DNSClusterIP '10.0.100.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Karpenter Reference Documentation\nDESCRIPTION: This YAML frontmatter block defines metadata for a Karpenter reference documentation page. It specifies the title, link title, weight for page ordering (50), and a brief description of the document's purpose.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"\nweight: 50\ndescription: >\n  Reference documentation for Karpenter\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring AL2023 NodeConfig Specification\nDESCRIPTION: This text snippet provides Karpenter's generated AL2023 NodeConfig in application/node.eks.aws format. It outlines cluster-level configurations including the Kubelet settings and node labels essential for proper node initialization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n--//--\n\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection by ID in Karpenter\nDESCRIPTION: This YAML snippet demonstrates selecting security groups by their IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n securityGroupSelectorTerms:\\n    - id: \\\"sg-063d7acfb4b06c82c\\\"\\n    - id: \\\"sg-06e0cf9c198874591\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Karpenter Metrics on Linux\nDESCRIPTION: Commands to port-forward and open Karpenter metrics in a browser on Linux for monitoring and debugging purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8000/metrics && kubectl port-forward service/karpenter -n karpenter 8000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: Command to retrieve the admin password for the Grafana instance from Kubernetes secrets.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step11-grafana-get-password.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: AWS ECR Authentication for Snapshot Releases\nDESCRIPTION: Command for authenticating with AWS ECR to access Karpenter snapshot releases. This allows users to pull from the private ECR repository where snapshot releases are published.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Initialization Log\nDESCRIPTION: JSON log entry showing successful initialization of a node with final resource allocation details.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:24:52.642Z\",\n  \"message\": \"initialized nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"7910m\",\n    \"ephemeral-storage\": \"18242267924\",\n    \"hugepages-2Mi\": \"0\",\n    \"memory\": \"14320468Ki\",\n    \"pods\": \"58\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Active Workers Metric in Markdown\nDESCRIPTION: Describes the metric for counting the number of currently used workers per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_active_workers`\nNumber of currently used workers per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass Drift Fields Table\nDESCRIPTION: Table showing the EC2NodeClass fields that are monitored for drift detection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec.subnetSelectorTerms\nspec.securityGroupSelectorTerms\nspec.amiSelectorTerms\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Locally for Development\nDESCRIPTION: Command to run the Karpenter Go binary locally against a Kubernetes cluster specified in your ~/.kube/config for development purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter with Debug Logging using Helm\nDESCRIPTION: Command to upgrade or install Karpenter with debug level logging enabled using Helm chart from AWS ECR.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logLevel=debug \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows2022 AMI Family Userdata in Karpenter\nDESCRIPTION: This snippet shows the default userdata configuration for the Windows2022 AMI family in Karpenter. It includes PowerShell commands for EKS bootstrap script execution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD for v0.16.0+\nDESCRIPTION: This command updates the Karpenter Provisioner CRD to version 0.16.0+, which adds a new weight field to the provisioners.karpenter.sh v1alpha5 CRD.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Max Concurrent Reconciles Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the maximum number of concurrent reconciles per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_max_concurrent_reconciles`\nMaximum number of concurrent reconciles per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the latency of AWS SDK Go requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_duration_seconds`\nLatency of AWS SDK Go requests\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Locally Using Makefile\nDESCRIPTION: This snippet demonstrates how to execute the Karpenter Go binary using the make command to run it against the Kubernetes cluster specified in your local kube configuration. Ensure dependencies like Go and Kubernetes are installed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Debugging Node NotReady Issues\nDESCRIPTION: Commands to connect to an instance and check Kubelet logs to diagnose why a node is not joining the cluster. Includes commands for both AL2 and Bottlerocket based nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/provisioner-name\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/provisioner-name\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Enter the admin container\nenter-admin-container\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows UserData in Karpenter\nDESCRIPTION: Example of UserData configuration for Windows instances using PowerShell, which will be prepended to Karpenter's managed bootstrap script.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_36\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Viewing CNI Plugin Pod Status\nDESCRIPTION: Commands to check AWS CNI plugin pod status and logs\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: AWS EC2 Management Commands using Shell\nDESCRIPTION: This section includes shell commands for listing and deleting AWS EC2 launch templates that may need to be manually cleaned up following Karpenter upgrades. Ensure AWS CLI is configured with appropriate permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: EC2NodeClass v1beta1 Role Configuration\nDESCRIPTION: Example of v1beta1 EC2NodeClass with role specification\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\n...\nspec:\n  role: KarpenterNodeRole-karpenter-demo\n```\n\n----------------------------------------\n\nTITLE: Profiling Memory Using Pprof\nDESCRIPTION: This command visualizes memory profiles captured from Karpenter's metrics endpoint using Graphviz and Google's pprof tool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Current Status Metric\nDESCRIPTION: Describes the metric for tracking the current duration of EC2NodeClass status conditions in specific states, labeled by various attributes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_current_status_seconds`\nThe current amount of time in seconds that a status condition has been in a specific state. Labeled by the name of the nodelcaim, namespace, type, status, and reason.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Transitions Total Metric\nDESCRIPTION: Describes the deprecated metric for counting transitions of a given object, type, and status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_transitions_total`\nThe count of transitions of a given object, type and status.\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioners CRD for Karpenter 0.10.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.10.0, which adds the 'startupTaints' field to the provisioner spec.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Converted EC2NodeClass Resource\nDESCRIPTION: Applies the newly converted EC2NodeClass Kubernetes resource to replace the deprecated AWSNodeTemplate resource.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ec2nodeclass.yaml\n```\n\n----------------------------------------\n\nTITLE: NodeClaim Status Response\nDESCRIPTION: JSON response showing NodeClaim status condition indicating resource computation inconsistency.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ConsistentStateFound\",\n    \"status\": \"False\",\n    \"reason\": \"ConsistencyCheckFailed\",\n    \"message\": \"Consistency Check Failed\",\n    \"lastTransitionTime\": \"2024-08-19T20:02:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Queue Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring how long an item stays in the workqueue before being requested, in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_queue_duration_seconds`\nHow long in seconds an item stays in workqueue before being requested\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Karpenter v1beta1 NodePool and EC2NodeClass Configuration\nDESCRIPTION: Example showing v1beta1 configuration with two NodePools referencing the same EC2NodeClass but with different kubelet configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: nodepool-a\nspec:\n  template:\n    spec:\n      kubelet:\n        maxPods: 10\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: nodeclass\n---\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: nodepool-b\nspec:\n  template:\n    spec:\n      kubelet:\n        maxPods: 20\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: nodeclass\n---\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: nodeclass\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Taints for Cilium in Karpenter NodePool\nDESCRIPTION: YAML configuration showing how to configure startupTaints in a Karpenter NodePool to handle temporary taints needed during node initialization, specifically for Cilium.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\n...\nspec:\n  template:\n    spec:\n      startupTaints:\n        - key: node.cilium.io/agent-not-ready\n          effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Setting Node Affinity for Critical Workloads\nDESCRIPTION: This YAML snippet provides a configuration for setting node affinities for critical workloads like coredns and metric-server, ensuring they run on specific node groups.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n```\n\n----------------------------------------\n\nTITLE: Examining NodeClaim Inconsistency JSON Response\nDESCRIPTION: Sample JSON output showing a ConsistentStateFound condition with status False, indicating that Karpenter's computed allocatable resources don't match the actual resources on the created node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ConsistentStateFound\",\n    \"status\": \"False\",\n    \"reason\": \"ConsistencyCheckFailed\",\n    \"message\": \"Consistency Check Failed\",\n    \"lastTransitionTime\": \"2024-08-19T20:02:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Profile Creation IAM Policy\nDESCRIPTION: IAM policy allowing Karpenter to create instance profiles with specific tag conditions for cluster identification and region specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileCreationActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:CreateInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ECR Repository for Development\nDESCRIPTION: AWS CLI command to create an ECR repository for storing Karpenter container images during development.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Creating an ECR Repository for Karpenter\nDESCRIPTION: This AWS command provision an ECR repository for storing Karpenter Docker images. It requires AWS CLI and necessary permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Count Metric in Markdown\nDESCRIPTION: Describes the metric for counting conditions of an EC2NodeClass, labeled by various attributes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_count`\nThe number of an condition for an ec2nodeclass, type and status. Labeled by the name, namespace, type, status, and reason.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Editing aws-auth ConfigMap\nDESCRIPTION: Opens the aws-auth ConfigMap for editing to allow nodes with the Karpenter node IAM role to join the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step07-edit-aws-auth.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Annotating Karpenter CRDs for Helm Release on AWS\nDESCRIPTION: These commands annotate Karpenter Custom Resource Definitions (CRDs) with Helm release information, resolving installation errors related to missing annotations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: AMI Selection with Specified Tag in Karpenter\nDESCRIPTION: This YAML snippet configures Karpenter to select AMIs with a specified tag key, using a wildcard to match any value.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n\"  amiSelectorTerms:\\n    - tags:\\n        karpenter.sh/discovery/MyClusterName: '*'\"\n```\n\n----------------------------------------\n\nTITLE: Handling CNI IP Assignment Failures\nDESCRIPTION: This log message indicates issues with IP assignment in AWS VPC CNI during pod creation, suggesting possible configuration problems with max-pods or ENI limits on a given node type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Instance Type CPU Cores Metric\nDESCRIPTION: Describes the metric for measuring the number of vCPU cores for a given instance type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_cpu_cores`\nVCPUs cores for a given instance type.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Generating AL2023 NodeConfig in Text\nDESCRIPTION: A node configuration setup to be used with Karpenter, setting cluster parameters such as API server endpoints and kubelet configurations. Implemented as a plain text configuration file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Count Metric\nDESCRIPTION: Describes the metric for counting the number of conditions for an EC2NodeClass, labeled by various attributes including type and status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_count`\nThe number of an condition for an ec2nodeclass, type and status. Labeled by the name, namespace, type, status, and reason.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Tailing Karpenter Logs with Stern\nDESCRIPTION: Command to tail Karpenter logs using the Stern tool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstern -n karpenter -l app.kubernetes.io/name=karpenter\n```\n\n----------------------------------------\n\nTITLE: Debugging NotReady Nodes with AWS SSM in Bash\nDESCRIPTION: Bash commands to debug NotReady nodes using AWS SSM. These commands allow connecting to the instance and checking Kubelet logs for AL2-based nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# List the nodes managed by Karpenter\nkubectl get node -l karpenter.sh/nodepool\n# Extract the instance ID (replace <node-name> with a node name from the above listing)\nINSTANCE_ID=$(kubectl get node <node-name> -ojson | jq -r \".spec.providerID\" | cut -d \\/ -f5)\n# Connect to the instance\naws ssm start-session --target $INSTANCE_ID\n# Check Kubelet logs\nsudo journalctl -u kubelet\n```\n\n----------------------------------------\n\nTITLE: Applying and Retrieving v1beta1 NodePool Manifest\nDESCRIPTION: Applies a v1beta1 NodePool manifest and retrieves its v1 equivalent using kubectl, demonstrating the conversion process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n      nodeClassRef:\n        apiVersion: karpenter.k8s.aws/v1beta1\n        kind: EC2NodeClass\n        name: default\n  limits:\n    cpu: 1000\n  disruption:\n    consolidationPolicy: WhenUnderutilized\n    expireAfter: 720h # 30 * 24h = 720h\nEOF\nkubectl get nodepools default -o yaml > v1-nodepool.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Total Metric\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_total`\nThe total number of AWS SDK Go requests\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Running Kompat CLI Tool with a Compatibility File\nDESCRIPTION: Example command showing how to run the Kompat tool with a specific compatibility YAML file. The -n flag appears to limit the output to 5 items.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/tools/kompat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkompat hack/compatibility-karpenter.yaml -n 5\n```\n\n----------------------------------------\n\nTITLE: Scaling Down a Single Multi-AZ Node Group\nDESCRIPTION: Scales down a single multi-AZ node group to a minimum size that can support Karpenter and critical services, with a suggested minimum of 2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step12-scale-single-ng.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Karpenter Controller Logs\nDESCRIPTION: Commands to retrieve Karpenter controller logs to debug issues such as node launch failures. Includes listing pods, finding the controller pod, and viewing logs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkubectl get pods -A | grep karpenter\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkarpenter     karpenter-XXXX   2/2     Running   2          21d\n```\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n```\n\n----------------------------------------\n\nTITLE: Merged TOML UserData for Bottlerocket in Karpenter\nDESCRIPTION: Shows the result of merging user-provided TOML with Karpenter's settings for Bottlerocket. Karpenter's cluster settings take precedence while preserving custom settings like eviction thresholds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_46\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'cluster'\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'default'\n\n[settings.kubernetes.node-taints]\n\n[settings.kubernetes.eviction-hard]\n'memory.available' = '12%%'\n```\n\n----------------------------------------\n\nTITLE: Windows Node Failed Pod Sandbox Error\nDESCRIPTION: Example error message when Windows pods fail to create due to missing VPC label configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nFailed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\": plugin type=\"vpc-bridge\" name=\"vpc\" failed (add): failed to parse Kubernetes args: pod does not have label vpc.amazonaws.com/PrivateIPv4Address\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Instance Type CPU Cores Metric in Markdown\nDESCRIPTION: Describes the metric for counting the number of VCPU cores for a given instance type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_cpu_cores`\nVCPUs cores for a given instance type.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Post-Creation Resource Tagging Policy\nDESCRIPTION: IAM policy for tagging EC2 instances after creation with specific tag key restrictions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/cloudformation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    },\n    \"StringEqualsIfExists\": {\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n    },\n    \"ForAllValues:StringEquals\": {\n      \"aws:TagKeys\": [\n        \"eks:eks-cluster-name\",\n        \"karpenter.sh/nodeclaim\",\n        \"Name\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining VPC CNI Pod Logs\nDESCRIPTION: Command to view logs from a specific aws-node pod to diagnose CNI-related issues that may be causing node problems.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs aws-node-????? -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Max Concurrent Reconciles Metric\nDESCRIPTION: Describes the metric for measuring the maximum number of concurrent reconciles per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_max_concurrent_reconciles`\nMaximum number of concurrent reconciles per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Proposed EC2NodeClasses Printer Columns Output\nDESCRIPTION: This snippet demonstrates the proposed output for 'kubectl get ec2nodeclasses', adding READY and ROLE columns to provide more informative at-a-glance details.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1-api.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  karpenter git:(main) ✗ k get ec2nodeclasses -o wide\nNAME     READY  AGE    ROLE\ndefault  True   2d8h   KarpenterNodeRole-test-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Karpenter Reference Documentation Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for a Karpenter reference documentation page, including title, navigation link text, weight for ordering in navigation, and a description of the content.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"\nweight: 50\ndescription: >\n  Reference documentation for Karpenter\n---\n```\n\n----------------------------------------\n\nTITLE: Default podSecurityContext Configuration\nDESCRIPTION: Default security context configuration added in version 0.34.0+ that sets fsgroup for pod volumes. Can be disabled through helm installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npodSecurityContext:\n  fsgroup: 65536\n```\n\n----------------------------------------\n\nTITLE: Deleting Legacy Mutating Webhook\nDESCRIPTION: Command to remove the deprecated defaulting.webhook.karpenter.sh mutating webhook when upgrading to version 0.27.3+. This cleanup step is only necessary if the webhook was not managed by Helm in previous installations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go requests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_total`\nThe total number of AWS SDK Go requests\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Karpenter CRDs with Helm\nDESCRIPTION: Uses Helm to rollback the Karpenter Custom Resource Definitions (CRDs) to a specific version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version \"${KARPENTER_VERSION}\" --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace \\\n  --set webhook.enabled=true \\\n  --set webhook.serviceName=karpenter \\\n  --set webhook.port=8443\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Instance State Change Rule for Karpenter\nDESCRIPTION: Creates an EventBridge rule to capture EC2 Instance State-change Notification events and send them to the Karpenter interruption queue\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Deploying IAM Policies and OIDC Provider CloudFormation Stack\nDESCRIPTION: Command to deploy the IAM policies and OIDC provider needed for GitHub Actions to access AWS resources. Configures the repository, branches, and regions that are authorized to use these resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/test/cloudformation/README.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\naws cloudformation deploy --stack-name GithubActionsIAM \\\n    --template-file iam_cloudformation.yaml \\\n    --parameter-overrides \"DatabaseName=karpenterTesting\" \"TableName=scaleTestDurations\" \"SweeperTableName=sweeperCleanedResources\" \"ResourceCountTableName=resourceCount\" \"Repository=aws/karpenter-provider-aws\" Branches=\"*\" \"PrometheusWorkspaceID=<workspace-id>\" Regions=\"us-east-2,us-west-2,...\" \\\n    --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved AMIs from Tags in EC2NodeClass Status\nDESCRIPTION: Example demonstrating how AMIs are resolved and displayed in the status field when using tags in the AMI selector terms. It shows custom AMIs for different architectures and includes deprecation status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Defining NodeConfig Resource for AWS EKS Karpenter Provider\nDESCRIPTION: This YAML configuration defines a NodeConfig custom resource for AWS EKS Karpenter Provider. It configures cluster details including name, API endpoint, certificate authority, and CIDR range. It also specifies kubelet settings like maxPods, resource reservation, and custom flags, along with containerd configuration options.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/pkg/providers/amifamily/bootstrap/mime/test_data/mime_bad_header.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 42\n      systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    flags:\n      - --node-labels \"foo=bar\"\n  containerd:\n    config: |\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      discard_unpacked_layers = false\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for Karpenter 0.11.0\nDESCRIPTION: Updates the provisioners.karpenter.sh CRD to include the new providerRef field introduced in 0.11.0.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: AL2023 NodeConfig UserData for EKS\nDESCRIPTION: Generated UserData for Amazon Linux 2023 AMI family. Uses the NodeConfig format to bootstrap an EKS node with cluster information, certificate authority, CIDR, and kubelet configuration including node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 110\n    flags:\n      - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD Chart with Helm\nDESCRIPTION: This command upgrades or installs the Karpenter CRD chart using Helm. It specifies the namespace, version, and creates the namespace if it doesn't exist.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Labels Proposal Option 1\nDESCRIPTION: Proposed solution for handling architecture-specific labels in the provisioner, using nested architecture-specific label sections.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nspec:\n  labels:\n    # applied only to arm64\n    arm64:\n      node.k8s.aws/launch-template-name: name-of-arm64-lt\n    x86_64:\n      node.k8s.aws/launch-template-name: name-of-x86_64-lt\n    # applied everywhere\n    other-label: other-value\n```\n\n----------------------------------------\n\nTITLE: AMI Selector Term Using Tags\nDESCRIPTION: Beginning of an example showing how tags can be used to select AMIs. This approach can be integrated with CI/CD systems for testing newer AMI versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Using tags\n# You can use a CI/CD system to test newer versions of an AMI\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Karpenter Tasks Documentation\nDESCRIPTION: YAML frontmatter configuration block that defines metadata for a documentation page about Karpenter tasks. It sets the title, link title, weight for ordering, description, and cascade type for documentation organization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/tasks/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Tasks\"\nlinkTitle: \"Tasks\"\nweight: 25\ndescription: >\n  Tasks to run with Karpenter\ncascade:\n  type: docs\n```\n\n----------------------------------------\n\nTITLE: Downloading Karpenter CloudFormation Template\nDESCRIPTION: Bash commands to download a specific version of the Karpenter CloudFormation template file using curl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"{{< param \\\"latest_release_version\\\" >}}\"\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/v\"${KARPENTER_VERSION}\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\n```\n\n----------------------------------------\n\nTITLE: CNI IP Allocation Failure Error Message\nDESCRIPTION: Error message that appears when the CNI fails to assign an IP address to a pod. This can happen if maxPods exceeds the instance's supported pod density or due to limitations with Security Groups for Pods integration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication for ECR\nDESCRIPTION: Commands to configure Docker authentication for the ECR repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Node API Server Registration Error\nDESCRIPTION: Example log output showing node registration failures with the Kubernetes API server, indicating possible authentication issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nAttempting to register node\" node=\"ip-192-168-67-130.ec2.internal\"\nUnable to register node with API server\" err=\"Unauthorized\" node=\"ip-192-168-67-130.ec2.internal\"\nError getting node\" err=\"node \\\"ip-192-168-67-130.ec2.internal\\\" not found\nFailed to contact API server when waiting for CSINode publishing: Unauthorized\n```\n\n----------------------------------------\n\nTITLE: Checking Current Karpenter Version in Kubernetes Cluster\nDESCRIPTION: Commands to verify the current version of Karpenter running in your cluster. This helps ensure you're on version v0.31.x before proceeding with the upgrade.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pod -A | grep karpenter\nkubectl describe pod -n karpenter karpenter-xxxxxxxxxx-xxxxx | grep Image: | grep v0.....\n```\n\n----------------------------------------\n\nTITLE: Sending Power-off Signal via DBus in Bash\nDESCRIPTION: This code snippet illustrates the concept of sending a power-off signal through DBus to initiate a graceful shutdown. It's part of the discussion on building a system daemon for handling Spot interruptions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/interruption-handling.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npower-off-multiple-sessions\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Affinity Configuration\nDESCRIPTION: YAML configuration for Karpenter deployment affinity rules to ensure Karpenter runs on existing node group nodes\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider Extensions in Karpenter Provisioner\nDESCRIPTION: Example of using the new provider field to specify AWS-specific parameters in a strongly typed manner using runtime.RawExtensions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1alpha4-api.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha4\nkind: Provisioner\nspec:\n  provider:\n    apiVersion: extensions.karpenter.sh/v1alpha1\n    kind: AWS\n    securityGroups: [\"abc\", \"def\"]\n    subnets: [\"123\", \"456\"]\n    launchTemplateName: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter E2E Tests\nDESCRIPTION: Command to run E2E correctness tests for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: Merged PowerShell UserData for Windows in Karpenter\nDESCRIPTION: Shows how Karpenter combines user-provided PowerShell commands with the EKS bootstrap script for Windows. The user commands run first, followed by Karpenter's node bootstrap code.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_48\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\nWrite-Host \"Running custom user data script\"\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=spot,karpenter.sh/nodepool=windows2022\" --max-pods=110' -DNSClusterIP '10.0.100.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Service Linked Role for EC2 Spot\nDESCRIPTION: Command to create the required service linked role for EC2 Spot Instances to resolve ServiceLinkedRoleCreationNotPermitted error.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Karpenter in Kubernetes\nDESCRIPTION: Commands to install and uninstall Karpenter in the Kubernetes cluster specified in ~/.kube/config using make commands.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Getting NodeClaim Details with kubectl - Bash\nDESCRIPTION: This snippet demonstrates how to retrieve the list of NodeClaims and describe a specific NodeClaim using the kubectl command. It shows the command syntax required to interact with Karpenter managed NodeClaims in a Kubernetes environment, allowing users to view important metadata and statuses.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclaims.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nNAME            TYPE               ZONE         NODE                                           READY   AGE\ndefault-m6pzn   c7i-flex.2xlarge   us-west-1a   ip-xxx-xxx-xx-xxx.us-west-1.compute.internal   True    7m50s\n\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node Registration Log\nDESCRIPTION: JSON log entry showing successful registration of a node in the Kubernetes cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"INFO\",\n  \"time\": \"2024-06-22T02:26:19.028Z\",\n  \"message\": \"registered nodeclaim\",\n  \"controller\": \"nodeclaim.lifecycle\",\n  \"NodeClaim\": {\n    \"name\": \"default-sfpsl\"\n  },\n  \"provider-id\": \"aws:///us-west-2b/i-01234567adb205c7e\",\n  \"Node\": {\n    \"name\": \"ip-xxx-xxx-xx-xxx.us-west-2.compute.internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NodePool Drift Fields Table\nDESCRIPTION: Table showing NodePool fields that are monitored for drift detection\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Fields         |\n|----------------|\n| spec.template.spec.requirements   |\n```\n\n----------------------------------------\n\nTITLE: Kubelet Node Status Update in Go\nDESCRIPTION: This Go code snippet shows how kubelet performs updates on a fixed set of labels. It's used to explain why certain user-specified labels might not be updated when a third party is responsible for node registration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-ownership.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/kubernetes/kubernetes/blob/39c76ba2edeadb84a115cc3fbd9204a2177f1c28/pkg/kubelet/kubelet_node_status.go#L215\n```\n\n----------------------------------------\n\nTITLE: Installing Kompat CLI Tool via Go\nDESCRIPTION: Instructions for installing the Kompat CLI tool using Go's package manager. This command installs the latest version of the tool from the specified GitHub repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/tools/kompat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo install github.com/aws/karpenter/tools/kompat/cmd/kompat@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Profiling Tools for Monitoring Go Processes\nDESCRIPTION: Installs packages necessary for profiling such as graphviz and pprof for visualizing and analyzing Go processes. Crucial for developers looking to optimize performance and memory usage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbrew install graphviz\ngo install github.com/google/pprof@latest\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Karpenter Changes\nDESCRIPTION: Commands for quickly deploying changes to the cluster, running codegen, lint, and tests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # quickly deploy changes to your cluster\nmake presubmit # run codegen, lint, and tests\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Karpenter Reference Documentation\nDESCRIPTION: YAML front matter that defines metadata for the Karpenter reference documentation page. It specifies the title, link title, weight (for ordering in navigation), and a description that indicates this page contains reference documentation for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"\nweight: 50\ndescription: >\n  Reference documentation for Karpenter\n---\n```\n\n----------------------------------------\n\nTITLE: CNI IP Allocation Error Message\nDESCRIPTION: Example error message that appears when the CNI fails to allocate an IP address to a pod.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Termination Duration Metric\nDESCRIPTION: Describes the metric for measuring the total duration of EC2NodeClass termination in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_termination_duration_seconds`\nDuration of ec2nodeclass termination in seconds.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Referencing Launch Template Name in AWSNodeTemplate\nDESCRIPTION: This code snippet shows the deprecated field 'spec.launchTemplateName' in the AWSNodeTemplate, which allows users to reference their own unmanaged launch templates. The proposal recommends removing this field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/unmanaged-launch-template-removal.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  launchTemplateName: \"user-managed-template\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Managed Prometheus CloudFormation Stack\nDESCRIPTION: Command to deploy AWS Managed Prometheus and its associated IAM policy using CloudFormation. This creates the necessary monitoring infrastructure for Karpenter tests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/test/cloudformation/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\naws cloudformation deploy \\\n    --stack-name GithubActionsManagedPrometheus \\\n    --template-file prometheus_cloudformation.yaml \\\n    --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Script for Windows2022 Node Configuration\nDESCRIPTION: This PowerShell script snippet identical to Windows2019 initiates the EKS Bootstrap for Windows2022 AMIFamily. It includes parameters for cluster configuration, managing node setup and cluster connectivity for Windows-based nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n[powershell]\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n[/powershell]\n\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD via Helm\nDESCRIPTION: Command to upgrade or install Karpenter Custom Resource Definitions (CRDs) using Helm in a specified Kubernetes namespace\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket AMIFamily UserData Template\nDESCRIPTION: Generated UserData in TOML format for Bottlerocket AMI family, configuring Kubernetes settings, cluster parameters, and node labels.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: Controller Runtime Metrics Schema\nDESCRIPTION: Defines metrics for monitoring controller reconciliation performance and error rates.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Name**                                     | **Type**  | **Labels**   | **Description**\n|----------------------------------------------|-----------|--------------|------------------------------------------------------\n| `controller_runtime_reconcile_errors_total`  | Counter   | `controller` | Total number of reconciliation errors per controller\n| `controller_runtime_reconcile_time_seconds`  | Histogram | `controller` | Length of time per reconciliation per controller\n| `controller_runtime_reconcile_total`         | Counter   | `controller` | Total number of reconciliations per controller\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Labels Proposal Option 2\nDESCRIPTION: Alternative proposal using separate top-level fields for architecture-specific labels in the provisioner specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nspec:\n  # applied everywhere\n  labels:\n     other-label: other-value\n  # applied only to arm64\n  arm64-labels:\n     node.k8s.aws/launch-template-name: name-of-arm64-based-lt\n  # applied only to x86_64\n  x86_64-labels:\n```\n\n----------------------------------------\n\nTITLE: Expected Output from VPC CNI Pod Listing\nDESCRIPTION: Sample output showing running aws-node pods that can be used for further investigation of CNI issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: text\nCODE:\n```\naws-node-?????             1/1     Running   2          20d\n```\n\n----------------------------------------\n\nTITLE: Setting CRD Helm Annotations\nDESCRIPTION: Commands to set required Helm annotations on Karpenter CRDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nKARPENTER_NAMESPACE=karpenter\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Standard NodePool Requirements Template for Generic Workloads in YAML\nDESCRIPTION: This YAML snippet offers a template for specifying standard NodePool requirements using Karpenter, particularly for generic workloads in AWS. It defines criteria like architecture, operating system, and instance preferences, emphasizing on-demand capacity type. This approach guides users to maintain flexibility while constraining instance types minimally to avoid performance issues. The inputs are primarily configuration keys and values, with the output being a Karpenter-managed NodePool catering to various generic workloads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodepools.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  template:\n    spec:\n      requirements:\n        - key: kubernetes.io/arch\n          operator: In\n          values: [\"amd64\"]\n        - key: kubernetes.io/os\n          operator: In\n          values: [\"linux\"]\n        - key: karpenter.sh/capacity-type\n          operator: In\n          values: [\"on-demand\"]\n        - key: karpenter.k8s.aws/instance-category\n          operator: In\n          values: [\"c\", \"m\", \"r\"]\n        - key: karpenter.k8s.aws/instance-generation\n          operator: Gt\n          values: [\"2\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Environment Variables\nDESCRIPTION: Initialize variables for Karpenter namespace and cluster name to facilitate migration configuration\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Attempt Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go request attempts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_attempt_total`\nThe total number of AWS SDK Go request attempts\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD using kubectl\nDESCRIPTION: This command updates the Karpenter Provisioner CRD using kubectl. It replaces the existing CRD with a new one fetched from a remote YAML file.  This is needed to use new parameters introduced in the specified Karpenter version.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"kubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Updating CRD Annotations for Helm Release\nDESCRIPTION: Shell commands to update CRD annotations with Helm release information.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Version\nDESCRIPTION: Sets the environment variable for the Karpenter release version to be deployed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"{{< param \\\"latest_release_version\\\" >}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Karpenter Tasks Documentation\nDESCRIPTION: YAML front matter that configures the metadata for the Tasks documentation section. It sets up the page title, navigation link text, weight for ordering in the navigation, description, and establishes a cascade configuration to apply the 'docs' type to child pages.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Tasks\"\nlinkTitle: \"Tasks\"\nweight: 25\ndescription: >\n  Tasks to run with Karpenter\ncascade:\n  type: docs\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Errors Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of errors returned from CloudProvider calls.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_errors_total`\nTotal number of errors returned from CloudProvider calls.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Karpenter NodeConfig in YAML\nDESCRIPTION: Defines a NodeConfig custom resource for AWS Karpenter that specifies cluster properties, kubelet settings, and containerd configuration. Includes cluster networking, API endpoint details, resource reservations, and container runtime settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/pkg/providers/amifamily/bootstrap/mime/test_data/nodeconfig.txt#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    name: test-cluster\n    apiServerEndpoint: https://example.com\n    certificateAuthority: ca-bundle\n    cidr: 10.100.0.0/16\n  kubelet:\n    config:\n      maxPods: 42\n      systemReserved:\n        cpu: 100m\n        memory: 100Mi\n        ephemeral-storage: 1Gi\n    flags:\n      - --node-labels \"foo=bar\"\n  containerd:\n    config: |\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      discard_unpacked_layers = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication for ECR\nDESCRIPTION: Commands to configure Docker authentication for the newly created ECR repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ubuntu NodeClass Specification in YAML\nDESCRIPTION: This YAML snippet defines an example specification for an EC2NodeClass with an AL2 amiFamily. It includes amiSelectorTerms, blockDeviceMappings, and configuration settings. This example is necessary when the Ubuntu AMIFamily is unsupported, requiring manual selection of Ubuntu AMIs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nspec:\n  amiFamily: AL2\n  amiSelectorTerms:\n    - id: ami-placeholder\n  blockDeviceMappings:\n  - deviceName: '/dev/sda1'\n    rootVolume: true\n    ebs:\n      encrypted: true\n      volumeType: gp3\n      volumeSize: 20Gi\n\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Management Labels to Karpenter CRDs\nDESCRIPTION: Command to add Helm management labels to Karpenter Custom Resource Definitions to resolve ownership metadata issues when installing the karpenter-crd chart.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Installing profiling tools for Karpenter\nDESCRIPTION: Installs necessary tools for profiling Karpenter's memory usage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbrew install graphviz\ngo install github.com/google/pprof@latest\n```\n\n----------------------------------------\n\nTITLE: Specifying Windows Server 2022 Full AMI for Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to configure Karpenter to use the Amazon EKS optimized AMI with Windows Server 2022 Full for Kubernetes 1.28. It uses an amiSelector to reference the specific AMI name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - name: Windows_Server-2022-English-Full-EKS_Optimized-1.28*\n```\n\n----------------------------------------\n\nTITLE: Karpenter Pod Discovery Log\nDESCRIPTION: JSON log entry showing Karpenter's discovery of provisionable pods requiring node creation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.114Z\",\n    \"message\": \"found provisionable pod(s)\",\n    \"commit\": \"490ef94\",\n    \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n    \"duration\": \"100.761702ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Type Exists Requirement for v0.14.0\nDESCRIPTION: YAML configuration example showing how to bypass instance type filtering in v0.14.0. This allows Karpenter to consider all instance types regardless of generation or category.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n  - key: node.kubernetes.io/instance-type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: AMI Family Specification Example\nDESCRIPTION: YAML configuration demonstrating how to specify AMI family type for custom AMI bootstrapping.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    apiVersion: extensions.karpenter.sh/v1alpha1\n    kind: AWS\n    ami: ami-123456\n    amiFamily: AL2\n    userData: \"ba123bc..\" #base64 encoded\n```\n\n----------------------------------------\n\nTITLE: Documenting Leader Election Slowpath Total Metric\nDESCRIPTION: Describes the metric for counting the total number of slow paths exercised in renewing leader leases, grouped by lease name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n### `leader_election_slowpath_total`\nTotal number of slow path exercised in renewing leader leases. 'name' is the string used to identify the lease. Please make sure to group by name.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Update Karpenter Provisioner CRD (v0.15.0)\nDESCRIPTION: This command updates the Karpenter Provisioner CRD to the v1alpha5 version. It's necessary to apply new parameters introduced in the `0.15.0` release. The command uses `kubectl replace` to update the CRD directly from the specified URL.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Message Queue Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the time an interruption message is on the queue before processing by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_message_queue_duration_seconds`\nAmount of time an interruption message is on the queue before it is processed by karpenter.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Leader Election Master Status Metric in Markdown\nDESCRIPTION: Describes the metric for indicating whether the reporting system is master of the relevant lease.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n### `leader_election_master_status`\nGauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master. 'name' is the string used to identify the lease. Please make sure to group by name.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodeClaim Information with kubectl\nDESCRIPTION: Commands to list NodeClaims and view detailed information about a specific NodeClaim using kubectl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclaims.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodeclaim\nNAME            TYPE               ZONE         NODE                                           READY   AGE\ndefault-m6pzn   c7i-flex.2xlarge   us-west-1a   ip-xxx-xxx-xx-xxx.us-west-1.compute.internal   True    7m50s\n\nkubectl describe nodeclaim default-m6pzn\n```\n\n----------------------------------------\n\nTITLE: Disabling Disruption for an Entire NodePool in Karpenter\nDESCRIPTION: This NodePool configuration example shows how to disable disruption for all nodes launched by a specific NodePool by setting the 'karpenter.sh/do-not-disrupt' annotation in the NodePool template. This annotation will be applied to all nodes created from this NodePool.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/disruption.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1beta1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    metadata:\n      annotations: # will be applied to all nodes\n        karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Checking for New Karpenter-Provisioned Nodes\nDESCRIPTION: Command to view the nodes in the cluster to verify Karpenter is creating new nodes as old nodes are removed.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Manual Node Deletion\nDESCRIPTION: Shows how to manually delete nodes managed by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete node -l karpenter.sh/provisioner-name=default\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue in AWS SQS\nDESCRIPTION: AWS CloudFormation resource definition for creating an SQS queue for Karpenter interruption handling. It sets queue properties such as name, message retention period, and server-side encryption.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueue:\n  Type: AWS::SQS::Queue\n  Properties:\n    QueueName: !Sub \"${ClusterName}\"\n    MessageRetentionPeriod: 300\n    SqsManagedSseEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Bottlerocket UserData in TOML format\nDESCRIPTION: Example of UserData configuration for Bottlerocket nodes using TOML format. Shows how to set kubelet eviction parameters and custom settings in Bottlerocket.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_51\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioners CRD for Karpenter 0.16.0\nDESCRIPTION: Command to update the Karpenter provisioners CustomResourceDefinition to version 0.16.0 which adds a new weight field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Subnet Selector Terms in YAML\nDESCRIPTION: Demonstrates the usage of subnet selector terms to constrain which subnets can be selected for launching instances. Configured using YAML under specific conditions using subnet tags and IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n\n```\n\n----------------------------------------\n\nTITLE: Windows Pod DNS RBAC Configuration - YAML\nDESCRIPTION: YAML configuration showing required RBAC permissions for Windows nodes to enable DNS resolution, including the eks:kube-proxy-windows group.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Management Labels to Karpenter CRDs\nDESCRIPTION: Commands to add required Helm management labels to Karpenter Custom Resource Definitions for proper chart installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data for Bottlerocket AMI Family\nDESCRIPTION: Example of configuring user data for a Bottlerocket EC2NodeClass. This snippet demonstrates how to set custom Kubernetes settings in the user data.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: bottlerocket-example\nspec:\n  ...\n  amiFamily: Bottlerocket\n  userData:  |\n    [settings.kubernetes]\n    \"kube-api-qps\" = 30\n    \"shutdown-grace-period\" = \"30s\"\n    \"shutdown-grace-period-for-critical-pods\" = \"30s\"\n    [settings.kubernetes.eviction-hard]\n    \"memory.available\" = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioners CRD for Karpenter 0.11.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.11.0, which adds the 'providerRef' field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Variables for Karpenter Migration\nDESCRIPTION: Sets environment variables for the EKS cluster name and Karpenter namespace that will be used throughout the migration process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=karpenter\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter tests\nDESCRIPTION: Executes the Karpenter E2E correctness tests.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Zap Logging for Karpenter v0.33.0\nDESCRIPTION: Enable and configure Zap logging for Karpenter v0.33.0 using Helm values. Note that this feature is deprecated and planned to be removed in v1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \\\n  --set logConfig.enabled=true \\\n  --set logConfig.logEncoding=json\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Duration Seconds Metric\nDESCRIPTION: Describes the metric for measuring the duration of cloud provider method calls, labeled by controller, method name, and provider.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_duration_seconds`\nDuration of cloud provider method calls. Labeled by the controller, method name and provider.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Downloading Karpenter CloudFormation Template\nDESCRIPTION: Bash commands to download a specific version of the Karpenter CloudFormation template file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=v0.32.10\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/\"${KARPENTER_VERSION}\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Karpenter Tasks Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for a documentation page about Karpenter tasks. It specifies the title, link title, weight for ordering in navigation, description, and sets a cascade property to define the document type for child pages.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/tasks/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Tasks\"\nlinkTitle: \"Tasks\"\nweight: 25\ndescription: >\n  Tasks to run with Karpenter\ncascade:\n  type: docs\n---\n```\n\n----------------------------------------\n\nTITLE: Authenticating to ECR for Snapshot Releases\nDESCRIPTION: Command to authenticate with AWS ECR to access snapshot releases of Karpenter. This allows pulling from the private ECR repository containing snapshot releases.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Modifying Kubelet Configuration via UserData in Karpenter\nDESCRIPTION: Example of using UserData to modify kubelet configuration by editing the kubelet-config.json file before the EKS bootstrap script runs. This demonstrates setting the kubeAPIQPS parameter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: kubelet-config-example\nspec:\n  ...\n  amiFamily: AL2\n  userData: |\n    #!/bin/bash\n    echo \"$(jq '.kubeAPIQPS=50' /etc/kubernetes/kubelet/kubelet-config.json)\" > /etc/kubernetes/kubelet/kubelet-config.json\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for v0.10.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.10.0, which adds the startupTaints field to the provisioner specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Disruption Budgets in Karpenter\nDESCRIPTION: Example of setting up node disruption budgets to control when and how nodes can be disrupted, including percentage limits, node counts, and scheduled restrictions\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/tasks/managing-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 9 * * sat-sun\"\n    duration: 24h\n  - nodes: \"0\"\n    schedule: \"0 17 * * mon-fri\"\n    duration: 16h\n    reasons:\n      - Drifted\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Dependency for Local Development\nDESCRIPTION: Commands to replace the Karpenter dependency with a local version for development purposes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Client Go HTTP Metrics Documentation\nDESCRIPTION: Core metrics for monitoring HTTP request performance and counts in the client-go library, including total requests and duration metrics broken down by various parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nclient_go_request_total\nclient_go_request_duration_seconds\n```\n\n----------------------------------------\n\nTITLE: Node Affinity Configuration for High-Performance Resources in Pods Using YAML\nDESCRIPTION: This YAML snippet illustrates how to configure node affinity for Kubernetes pods to specifically request high-performance resources such as NVME disks and network bandwidth. This is critical for workloads that demand specialized resources beyond standard scheduling in Kubernetes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-requiring-nvme\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: \"Exists\"\n---\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: \"Exists\"\n...\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-requiring-100gb-nvme\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-local-nvme\"\n              operator: Gt\n              values: [\"99\"]\n---\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: Gt\n    values: [\"99\"]\n...\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-requiring-bandwidth\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n              operator: Gt\n              values: [\"49999\"]\n---\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-network-bandwidth\"\n    operator: Gt\n    values: [\"49999\"]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring AL2 AMI Family Userdata in Karpenter\nDESCRIPTION: This snippet shows the default userdata configuration for the AL2 AMI family in Karpenter. It includes bootstrap script execution and kubelet configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--container-runtime containerd \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Karpenter Documentation\nDESCRIPTION: YAML front matter block defining metadata for a documentation page. Specifies the title, link title, weight for navigation ordering, and description for a Karpenter reference documentation page.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"\nweight: 50\ndescription: >\n  Reference documentation for Karpenter\n---\n```\n\n----------------------------------------\n\nTITLE: Provisioner consolidation enabled (v1alpha5) Configuration - YAML\nDESCRIPTION: This snippet illustrates the `consolidation.enabled` flag within a Karpenter Provisioner in v1alpha5. This is replaced by the `consolidationPolicy` field in v1beta1.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1alpha5\\nkind: Provisioner\\n...\\nspec:\\n  consolidation:\\n    enabled: true\"\n```\n\n----------------------------------------\n\nTITLE: Cilium Startup Taint Configuration\nDESCRIPTION: Configuration for implementing Cilium's recommended startup taint to ensure proper network configuration before pod scheduling. Uses startupTaints to manage the node initialization process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: cilium-startup\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      startupTaints:\n      - key: node.cilium.io/agent-not-ready\n        value: \"true\"\n        effect: NoExecute\n```\n\n----------------------------------------\n\nTITLE: Update Provisioner CRD (v0.10.0)\nDESCRIPTION: This command updates the Provisioner CRD to include the `startupTaints` field introduced in `0.10.0`.  This requires manually replacing the CRD as Helm upgrades do not automatically update CRDs.  Without this update, creating or updating provisioners with `startupTaints` will fail.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.10.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating AWS EventBridge Rule for Instance State Changes in YAML\nDESCRIPTION: Defines an AWS EventBridge rule to capture EC2 Instance State-change Notification events and send them to Karpenter's interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nInstanceStateChangeRule:\n Type: 'AWS::Events::Rule'\n Properties:\n   EventPattern:\n     source:\n       - aws.ec2\n     detail-type:\n       - EC2 Instance State-change Notification\n   Targets:\n     - Id: KarpenterInterruptionQueueTarget\n       Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: KMS Key Policy for EBS Encryption\nDESCRIPTION: JSON policy for KMS key to allow EBS volume encryption\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Sid\": \"Allow access through EBS for all principals in the account that are authorized to use EBS\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"*\"\n        },\n        \"Action\": [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:ReEncrypt*\",\n            \"kms:GenerateDataKey*\",\n            \"kms:CreateGrant\",\n            \"kms:DescribeKey\"\n        ],\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n            \"kms:ViaService\": \"ec2.${AWS_REGION}.amazonaws.com\",\n            \"kms:CallerAccount\": \"${AWS_ACCOUNT_ID}\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"Allow direct access to key metadata to the account\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"\n        },\n        \"Action\": [\n            \"kms:Describe*\",\n            \"kms:Get*\",\n            \"kms:List*\",\n            \"kms:RevokeGrant\"\n        ],\n        \"Resource\": \"*\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: KMS Key Policy Example\nDESCRIPTION: This JSON snippet shows an example policy for a KMS key that allows access from EBS and the account root. This policy ensures that the IAM principal launching the node has sufficient permissions to use the KMS customer managed key (CMK) for the EC2 EBS root volume.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"[\\n    {\\n        \\\"Sid\\\": \\\"Allow access through EBS for all principals in the account that are authorized to use EBS\\\",\\n        \\\"Effect\\\": \\\"Allow\\\",\\n        \\\"Principal\\\": {\\n            \\\"AWS\\\": \\\"*\\\"\\n        },\\n        \\\"Action\\\": [\\n            \\\"kms:Encrypt\\\",\\n            \\\"kms:Decrypt\\\",\\n            \\\"kms:ReEncrypt*\\\",\\n            \\\"kms:GenerateDataKey*\\\",\\n            \\\"kms:CreateGrant\\\",\\n            \\\"kms:DescribeKey\\\"\\n        ],\\n        \\\"Resource\\\": \\\"*\\\",\\n        \\\"Condition\\\": {\\n            \\\"StringEquals\\\": {\\n            \\\"kms:ViaService\\\": \\\"ec2.${AWS_REGION}.amazonaws.com\\\",\\n            \\\"kms:CallerAccount\\\": \\\"${AWS_ACCOUNT_ID}\\\"\\n            }\\n        }\\n    },\\n    {\\n        \\\"Sid\\\": \\\"Allow direct access to key metadata to the account\\\",\\n        \\\"Effect\\\": \\\"Allow\\\",\\n        \\\"Principal\\\": {\\n            \\\"AWS\\\": \\\"arn:aws:iam::${AWS_ACCOUNT_ID}:root\\\"\\n        },\\n        \\\"Action\\\": [\\n            \\\"kms:Describe*\\\",\\n            \\\"kms:Get*\\\",\\n            \\\"kms:List*\\\",\\n            \\\"kms:RevokeGrant\\\"\\n        ],\\n        \\\"Resource\\\": \\\"*\\\"\\n    }\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Depth Metric\nDESCRIPTION: Describes the metric for measuring the current depth of the workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_depth`\nCurrent depth of workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Zone Constraints\nDESCRIPTION: Example of node affinity configuration to match NodePool zone constraints and resolve topology spread issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnodeAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    nodeSelectorTerms:\n      - matchExpressions:\n          - key: topology.kubernetes.io/zone\n            operator: In\n            values: ['us-east-1a', 'us-east-1b']\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS IAM Permissions for Karpenter\nDESCRIPTION: Command to deploy the necessary IAM permissions, including instance profiles for nodes provisioned by Karpenter in AWS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Security Group Configuration Status Example\nDESCRIPTION: YAML example showing security group selector configuration and resolved security group status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  securityGroups:\n  - id: sg-041513b454818610b\n    name: ClusterSharedNodeSecurityGroup\n  - id: sg-0286715698b894bca\n    name: ControlPlaneSecurityGroup-1AQ073TSAAPW\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioners CRD for Karpenter 0.16.2\nDESCRIPTION: Command to update the Karpenter provisioners CustomResourceDefinition to version 0.16.2 which adds new kubeletConfiguration fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Annotating CRDs for Helm Release\nDESCRIPTION: These commands annotate the Karpenter CRDs with Helm release information to resolve installation issues with the karpenter-crd chart.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Instance Profile Commands\nDESCRIPTION: AWS CLI commands to create and configure IAM instance profile for Karpenter nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\"\naws iam add-role-to-instance-profile --instance-profile-name \"KarpenterNodeInstanceProfile-${CLUSTER_NAME}\" --role-name \"KarpenterNodeRole-${CLUSTER_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Service Linked Role for EC2 Spot Instances\nDESCRIPTION: This command creates the necessary service linked role for EC2 Spot Instances to resolve the ServiceLinkedRoleCreationNotPermitted error.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: AMI Resolution with Tags\nDESCRIPTION: Example showing AMI resolution using tags, demonstrating how AMIs are selected for different architectures using discovery tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: \"${CLUSTER_NAME}\"\nstatus:\n  amis:\n  - id: ami-01234567890123456\n    name: custom-ami-amd64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: custom-ami-arm64\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Provisioner CRD v0.15.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.15.0 to support new consolidation field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Authenticating to AWS ECR for Snapshot Releases\nDESCRIPTION: This command authenticates the Docker client with the AWS Elastic Container Registry (ECR) to enable pulling snapshot releases of Karpenter. It retrieves the login password from AWS ECR using the AWS CLI and pipes it to the docker login command. This allows users with an AWS account to access the snapshot repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"aws ecr get-login-password --region {{< param \\\"snapshot_repo.region\\\" >}} | docker login --username AWS --password-stdin {{< param \\\"snapshot_repo.account_id\\\" >}}.dkr.ecr.{{< param \\\"snapshot_repo.region\\\" >}}.amazonaws.com\"\n```\n\n----------------------------------------\n\nTITLE: Using Go Mod Edit for Local Development\nDESCRIPTION: Allows testing changes in dependencies found in the local filesystem. Replaces a dependency in go.mod to point to a local directory. Changes must be committed before building images for these to be included.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy Karpenter Webhook\nDESCRIPTION: Command to delete the deprecated defaulting.webhook.karpenter.sh mutating webhook when upgrading to version 0.27.3 or later. This is only necessary if the webhook was not managed by Helm in previous installations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Longest Running Processor Metric in Markdown\nDESCRIPTION: Describes the metric for measuring how long the longest running processor for workqueue has been running, in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_longest_running_processor_seconds`\nHow many seconds has the longest running processor for workqueue been running.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining documentation metadata including title, link title, weight, and cascade settings for document type and tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Documentation\"\nlinkTitle: \"Docs\"\nweight: 20\ncascade:\n  type: docs\n  tags:\n    - preview\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Contributing Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for the Contributing documentation page, including title, navigation link text, weight for ordering, and description.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Contributing\"\nlinkTitle: \"Contributing\"\nweight: 40\ndescription: >\n  Learn about how to contribute to Karpenter\n```\n\n----------------------------------------\n\nTITLE: Node Registration Error\nDESCRIPTION: Example error messages when node fails to register with Kubernetes API server\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nAttempting to register node\" node=\"ip-192-168-67-130.ec2.internal\"\nUnable to register node with API server\" err=\"Unauthorized\" node=\"ip-192-168-67-130.ec2.internal\"\nError getting node\" err=\"node \\\"ip-192-168-67-130.ec2.internal\\\" not found\nFailed to contact API server when waiting for CSINode publishing: Unauthorized\n```\n\n----------------------------------------\n\nTITLE: Merged Windows PowerShell UserData\nDESCRIPTION: Example of how Karpenter merges user-provided Windows PowerShell UserData with its bootstrap script. Shows the complete PowerShell script that will execute on Windows node initialization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_55\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\nWrite-Host \"Running custom user data script\"\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=spot,karpenter.sh/nodepool=windows2022\" --max-pods=110' -DNSClusterIP '10.0.100.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Provisioner CRD v0.16.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.16.0 to support new weight field.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Provisioning Docker Repo for Karpenter with AWS CLI\nDESCRIPTION: Creates an ECR repository for building and storing Karpenter Docker images via AWS CLI. Essential for managing development images across projects and utilizing specific image hashes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on OSX\nDESCRIPTION: Commands to open and port-forward Karpenter metrics on OSX.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\n----------------------------------------\n\nTITLE: NodePool Drift Fields Table\nDESCRIPTION: Table showing the NodePool fields that are monitored for drift detection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/disruption.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec.template.spec.requirements\n```\n\n----------------------------------------\n\nTITLE: Selecting AMIs by Name Tag in Karpenter EC2NodeClass\nDESCRIPTION: Selects AMIs by using the Name tag. This is useful when AMIs follow a consistent naming convention in the Name tag rather than the AMI name itself.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - tags:\n        Name: my-ami\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Manifests Frontmatter\nDESCRIPTION: YAML frontmatter for the documentation page defining title, link title, weight and description.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Concepts\"\nlinkTitle: \"Concepts\"\nweight: 20\ndescription: >\n  Understand key concepts of Karpenter\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Karpenter Tasks Documentation\nDESCRIPTION: YAML front matter configuration block that defines the page metadata for a Karpenter tasks documentation section, including title, link title, weight and description.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Tasks\"\nlinkTitle: \"Tasks\"\nweight: 25\ndescription: >\n  Tasks to run with Karpenter\ncascade:\n  type: docs\n---\n```\n\n----------------------------------------\n\nTITLE: AMI Selection Using Tags\nDESCRIPTION: Shows the beginning of a configuration for selecting AMIs using tags, typically used with CI/CD systems for testing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n- tags:\n```\n\n----------------------------------------\n\nTITLE: Profiling Karpenter Memory\nDESCRIPTION: Commands to connect to the Karpenter metrics endpoint and visualize memory usage using pprof.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the metrics endpoint\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\n# Visualize the memory\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Price List Query API Error Example\nDESCRIPTION: Example error message when price list query fails in a private cluster setup.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nERROR   controller.aws.pricing  updating on-demand pricing, RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout; RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout, using existing pricing data from 2022-08-17T00:19:52Z  {\"commit\": \"4b5f953\"}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Security Assumptions\nDESCRIPTION: A markdown table listing key security assumptions for Karpenter deployment across generic and AWS-specific categories\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/threat-model.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Category\t     | Assumption\t                                                                                                                                                                                                            | Comment\t                                                                                                                                                                                                                          |\n|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Generic\t      | The Karpenter pod is operated on a node in the cluster, and uses a Service Account for authentication to the Kubernetes API\t                                                                                           | Cluster Operators may want to isolate the node running the Karpenter pod to a system-pool of nodes to mitigate the possibility of container breakout with Karpenter's permissions. \t                                              |\n| Generic\t      | Cluster Developer does not have any Kubernetes permissions to manage Karpenter running in the cluster (The deployment, pods, clusterrole, etc)\t                                                                        | \t                                                                                                                                                                                                                                 |\n| Generic\t      | Restrictions on the fields of pods a Cluster Developer can create are out of scope. \t                                                                                                                                  | Cluster Operators can use policy frameworks to enforce restrictions on Pod capabilities\t                                                                                                                                          |\n| Generic\t      | No sensitive data is included in non-Secret resources in the Kubernetes API. The Karpenter controller has the ability to list all pods, nodes, deployments, and many other pod-controller and storage resource types.\t | Karpenter does not have permission to list/watch cluster-wide ConfigMaps or Secrets\t                                                                                                                                              |\n| Generic\t      | Karpenter has permissions to create, modify, and delete nodes from the cluster, and evict any pod. \t                                                                                                                   | Cluster Operators running applications with varying security profiles in the same cluster may want to configure dedicated nodes and scheduling rules for Karpenter to mitigate potential container escapes from other containers\t |\n| AWS-Specific\t | The Karpenter IAM policy is encoded in the GitHub repo. Any additional permissions possibly granted to that role by the administrator are out of scope\t                                                                | \t                                                                                                                                                                                                                                 |\n| AWS-Specific\t | The Karpenter pod uses IRSA for AWS credentials \t                                                                                                                                                                      | Setup of IRSA is out of scope for this document \t                                                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: AWSNodeTemplate v1alpha Instance Profile Configuration\nDESCRIPTION: Example of v1alpha1 AWSNodeTemplate with instanceProfile specification\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1alpha1\nkind: AWSNodeTemplate\n...\nspec:\n  instanceProfile: KarpenterNodeInstanceProfile-karpenter-demo\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Instance Type Offering Price Estimate Metric in Markdown\nDESCRIPTION: Describes the metric for estimating the hourly price of instance type offerings based on various factors.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_offering_price_estimate`\nInstance type offering estimated hourly price used when making informed decisions on node cost calculation, based on instance type, capacity type, and zone.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Specifying PyGithub Package Version Requirement\nDESCRIPTION: Defines the required version of PyGithub package as 1.55 for Python dependency management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/hack/github/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub==1.55\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Node Creation Failures with Bash\nDESCRIPTION: These bash commands help troubleshoot Karpenter node creation failures, specifically due to incorrect block device mapping. By checking the controller's logs, one can identify potential misconfigurations. Kubernetes, AWS CLI, and Karpenter are required to monitor and define compute resources within the cloud infrastructure.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n2022-01-19T18:22:23.366Z ERROR controller.provisioning Could not launch node, launching instances, with fleet error(s), InvalidBlockDeviceMapping: Invalid device name /dev/xvda; ...\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\n```\n\nLANGUAGE: bash\nCODE:\n```\nkarpenter     karpenter-XXXX   2/2     Running   2          21d\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs karpenter-XXXX -c controller -n karpenter | less\n```\n\n----------------------------------------\n\nTITLE: Creating VPC Endpoint via AWS CLI\nDESCRIPTION: This command snippet allows users to create a VPC endpoint for the required services using the AWS CLI, specifying parameters like VPC ID and service name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc-endpoint --vpc-id ${VPC_ID} --service-name ${SERVICE_NAME} --vpc-endpoint-type Interface --subnet-ids ${SUBNET_IDS} --security-group-ids ${SECURITY_GROUP_IDS}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Pod DNS Policy Configuration\nDESCRIPTION: DNS policy configuration change in version 0.34.0+ that sets the default policy to ClusterFirst. Can be modified during helm installation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndnsPolicy: ClusterFirst\n```\n\n----------------------------------------\n\nTITLE: Managing CRD Ownership Labels\nDESCRIPTION: Commands to update CRD ownership labels for Helm management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Attaching Policies to Karpenter Node Role\nDESCRIPTION: Attaches the required IAM policies to the Karpenter node role to grant necessary permissions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step03-node-policies.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mutating Webhook Configuration in Bash\nDESCRIPTION: This snippet shows how to delete the `defaulting.webhook.karpenter.sh` mutating webhook configuration after upgrading to Karpenter `0.27.3`, which removed the webhook functionality. This command is necessary for users who have upgraded from an older version of Karpenter where this webhook might still be present.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2NodeClass with Detailed Monitoring in Karpenter\nDESCRIPTION: Example of enabling EC2 detailed monitoring in an EC2NodeClass. This enables 1-minute period monitoring graphs in the EC2 console for instances managed by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: Accessing EKS AMI Bootstrap Script\nDESCRIPTION: Reference to the bootstrap.sh script in the amazon-eks-ami repository that handles node registration in EKS clusters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-ownership.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbootstrap.sh\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Instance Type Offering Availability Metric\nDESCRIPTION: Describes the metric for tracking the availability of instance type offerings, based on instance type, capacity type, and zone.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_offering_available`\nInstance type offering availability, based on instance type, capacity type, and zone\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Accessing Karpenter metrics on Linux\nDESCRIPTION: Port-forwards the Karpenter service and opens the metrics endpoint in a browser on Linux.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Pod Specification with Node Affinity Expressions\nDESCRIPTION: Example demonstrating more complex node affinity rules using matchExpressions for subnet selection.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1alpha4-api.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: node.k8s.aws/subnet-name\n            operator: In\n            values: [\"123\", \"456\"]\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Adds Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of adds handled by workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_adds_total`\nTotal number of adds handled by workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Total Metric\nDESCRIPTION: Describes the metric for counting the total number of reconciliations per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_total`\nTotal number of reconciliations per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity for Karpenter Deployment\nDESCRIPTION: YAML configuration for setting node affinity rules to ensure Karpenter pods run on existing nodegroup nodes rather than on nodes provisioned by Karpenter itself.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: karpenter.sh/nodepool\n          operator: DoesNotExist\n        - key: eks.amazonaws.com/nodegroup\n          operator: In\n          values:\n          - ${NODEGROUP}\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      - topologyKey: \"kubernetes.io/hostname\"\n```\n\n----------------------------------------\n\nTITLE: Windows2019 AMIFamily UserData Template\nDESCRIPTION: Generated PowerShell UserData for Windows Server 2019 AMI family, using EKS bootstrap script with cluster parameters and node labeling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Auth ConfigMap\nDESCRIPTION: Command to view AWS authentication configuration for cluster nodes\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmaps -n kube-system aws-auth -o yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up IAM Permissions with Make\nDESCRIPTION: Deploys necessary IAM permissions and instance profiles for nodes provisioned by Karpenter using Make. Ensures the environment is set up to manage AWS permissions adequately.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Windows Image Pull Error\nDESCRIPTION: Error message shown when attempting to pull Windows container images with incompatible OS versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nFailed to pull image \"mcr.microsoft.com/windows/servercore:xxx\": rpc error: code = NotFound desc = failed to pull and unpack image \"mcr.microsoft.com/windows/servercore:xxx\": no match for platform in manifest: not found\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottlerocket Nodes for EKS\nDESCRIPTION: This TOML configuration snippet provides settings for Bottlerocket nodes communicating with an EKS cluster, specifically setting API server information and maximum pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://test-cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'test-cluster'\ncluster-dns-ip = '10.100.0.10'\nmax-pods = 110\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'test'\n```\n\n----------------------------------------\n\nTITLE: Configuring ODCR Selection in EC2NodeClass YAML\nDESCRIPTION: Example YAML configuration for selecting On-Demand Capacity Reservations in the EC2NodeClass API. It demonstrates how to specify capacity reservation selector terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/odcr.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nmetadata:\n  name: default\nspec:\n  capacityReservationSelectorTerms:\n  - key: ReservationType\n    values:\n    - capacity-reservation\n  - key: AvailabilityZone\n    values:\n    - us-east-1a\n    - us-east-1b\n  - key: InstanceType\n    values:\n    - c5.large\n    - c5.xlarge\n```\n\n----------------------------------------\n\nTITLE: Downloading cloudformation.yaml with curl\nDESCRIPTION: This bash script downloads a specific version of the `cloudformation.yaml` file from the Karpenter AWS provider's GitHub repository. It uses `curl` to fetch the file and saves it locally.  The KARPENTER_VERSION environment variable determines which version is downloaded.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"export KARPENTER_VERSION=\\\"1.2.3\\\"\\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/v\\\"${KARPENTER_VERSION}\\\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Karpenter Upgrade Documentation\nDESCRIPTION: YAML front matter that configures the documentation page for Karpenter upgrades. It sets the title, link title, weight for ordering in the navigation, description, and cascading properties for child pages.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Upgrading\"\nlinkTitle: \"Upgrading\"\nweight: 30\ndescription: >\n  Upgrading Karpenter guide and reference\ncascade:\n  type: docs\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Cluster Autoscaler\nDESCRIPTION: Scales down the Cluster Autoscaler deployment to zero replicas to effectively disable it while Karpenter takes over node provisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step11-scale-cas.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on Linux\nDESCRIPTION: Commands to open and port-forward Karpenter metrics on Linux.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Discovering EKS Cluster Endpoints with AWS IAM and JSON\nDESCRIPTION: The `AllowAPIServerEndpointDiscovery` IAM policy grants the Karpenter controller permission to discover the external API endpoint of the Kubernetes cluster using the `eks:DescribeCluster` action. This allows EC2 instances to join the EKS cluster when an EKS control plane is used.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowAPIServerEndpointDiscovery\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}\",\n  \"Action\": \"eks:DescribeCluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kubelet Service Management Script\nDESCRIPTION: Bash script to enable and restart the kubelet service on the worker node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nsystemctl enable kubelet\nsystemctl restart kubelet\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy Karpenter Webhook\nDESCRIPTION: Command to delete the deprecated defaulting.webhook.karpenter.sh mutating webhook when upgrading to version 0.27.3+\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Default Capacity Type Configuration\nDESCRIPTION: YAML snippet demonstrating default on-demand capacity type requirement\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  requirements:\n  - key: karpenter.sh/capacity-type\n    operator: In\n    values: [\"on-demand\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter\nDESCRIPTION: This snippet sets up environment variables for the Karpenter namespace and the user's EKS cluster name. This setup is necessary for configuring Karpenter to work with specific EKS resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Instance Profile Tagging\nDESCRIPTION: Policy for tagging instance profiles with cluster and region-specific tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/reference/cloudformation.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for v0.15.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.15.0, which adds a new consolidation field to the v1alpha5 CRD.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.15.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows ServiceCIDR in Karpenter\nDESCRIPTION: Example of PowerShell UserData that can be used as a workaround to set the correct ServiceCIDR for Windows worker nodes in Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  userData: |\n    $global:EKSCluster = Get-EKSCluster -Name my-cluster\n```\n\n----------------------------------------\n\nTITLE: Instance Profile Status Configuration\nDESCRIPTION: YAML example showing instance profile configuration and resolved status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Control for Karpenter\nDESCRIPTION: This section elaborates on how Karpenter integrates with Kubernetes FlowSchemas and PriorityLevelConfigurations to manage API requests effectively and avoid throttling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nKubernetes uses [FlowSchemas](https://kubernetes.io/docs/concepts/cluster-administration/flow-control/#flowschema) and [PriorityLevelConfigurations](https://kubernetes.io/docs/concepts/cluster-administration/flow-control/#prioritylevelconfiguration) to map calls to the API server into buckets which determine each user agent's throttling limits.\n```\n\n----------------------------------------\n\nTITLE: Instance Profile Configuration in EC2NodeClass\nDESCRIPTION: Example showing how instance profile is generated from the role specification. Shows the relationship between spec.role and the resolved instance profile.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Retry Count Metric\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go retry attempts per request.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_retry_count`\nThe total number of AWS SDK Go retry attempts per request\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Combined Approach: EC2NodeClass with Deprecated AMI and Conditions in YAML\nDESCRIPTION: Example YAML representation combining both the deprecated field in AMIs and the AMIsDeprecated condition for comprehensive AMI deprecation reporting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/deprecated-ami-observability.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  amis:\n  - id: ami-01234567890654321\n    name: amazon-eks-node-1.29\n    deprecated: true\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n  - id: ami-01234567890123456\n    name: amazon-eks-arm64-node-1.29\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - arm64\n  conditions:\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: AMIsDeprecated\n    status: \"True\"\n    type: AMIsDeprecated\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: InstanceProfileReady\n    status: \"True\"\n    type: InstanceProfileReady\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: Ready\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: SecurityGroupsReady\n    status: \"True\"\n    type: SecurityGroupsReady\n  - lastTransitionTime: \"2024-09-09T04:32:55Z\"\n    message: \"\"\n    reason: SubnetsReady\n    status: \"True\"\n    type: SubnetsReady\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karpenter Migration\nDESCRIPTION: Initial setup of environment variables for the Karpenter namespace and cluster name configuration\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nCLUSTER_NAME=<your cluster name>\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Active Workers Metric\nDESCRIPTION: Describes the metric for counting the number of currently used workers per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_active_workers`\nNumber of currently used workers per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter Provisioner CRD for v0.16.2+\nDESCRIPTION: This command updates the Karpenter Provisioner CRD to version 0.16.2+, which adds new kubeletConfiguration fields to the provisioners.karpenter.sh v1alpha5 CRD.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Unfinished Work Metric in Markdown\nDESCRIPTION: Describes the metric for measuring unfinished work in seconds, indicating potential stuck threads.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_unfinished_work_seconds`\nHow many seconds of work has been done that is in progress and hasn't been observed by work_duration. Large values indicate stuck threads. One can deduce the number of stuck threads by observing the rate at which this increases.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Work Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring how long processing an item from workqueue takes in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_work_duration_seconds`\nHow long in seconds processing an item from workqueue takes.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Installing/Uninstalling Karpenter in Kubernetes Cluster\nDESCRIPTION: Commands to install and uninstall Karpenter in the Kubernetes cluster specified in ~/.kube/config using Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Configuring Karpenter Interruption Queue Policy in YAML\nDESCRIPTION: Defines an AWS SQS queue policy for Karpenter's interruption queue. It allows specific AWS services to send messages to the queue and enforces HTTPS connections for security.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterInterruptionQueuePolicy:\n  Type: AWS::SQS::QueuePolicy\n  Properties:\n    Queues:\n      - !Ref KarpenterInterruptionQueue\n    PolicyDocument:\n      Id: EC2InterruptionPolicy\n      Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - events.amazonaws.com\n              - sqs.amazonaws.com\n          Action: sqs:SendMessage\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n        - Sid: DenyHTTP\n          Effect: Deny\n          Action: sqs:*\n          Resource: !GetAtt KarpenterInterruptionQueue.Arn\n          Condition:\n            Bool:\n              aws:SecureTransport: false\n          Principal: \"*\"\n```\n\n----------------------------------------\n\nTITLE: AWS Auth ConfigMap Example\nDESCRIPTION: Example YAML configuration for AWS IAM roles in the auth ConfigMap\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\nmapRoles: |\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/eksctl-johnw-karpenter-demo-NodeInstanceRole-72CV61KQNOYS\n      username: system:node:{{EC2PrivateDNSName}}\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/KarpenterNodeRole-johnw-karpenter-demo\n      username: system:node:{{EC2PrivateDNSName}}\nmapUsers: |\n    []\nkind: ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS ECR repository for development\nDESCRIPTION: Creates an ECR repository in AWS for storing Karpenter development images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Karpenter Metrics Base Configuration\nDESCRIPTION: Default metrics endpoint configuration for Karpenter in Prometheus format\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nkarpenter.kube-system.svc.cluster.local:8080/metrics\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter Tests\nDESCRIPTION: Command to run E2E correctness tests for Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: Disable Spot Interruption Draining in NTH\nDESCRIPTION: This setting disables draining nodes when a spot interruption termination notice is received by NTH. This is a configuration option for Node Termination Handler (NTH) and used in IMDS mode.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n\"enableSpotInterruptionDraining: false\"\n```\n\n----------------------------------------\n\nTITLE: AWS ECR Authentication for Snapshot Releases\nDESCRIPTION: Command to authenticate with AWS ECR to access Karpenter snapshot releases. This allows pulling from the private ECR repository containing snapshot releases.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ECR Repository for Karpenter Development\nDESCRIPTION: AWS CLI command to create an ECR repository for Karpenter development images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: AWS Auth ConfigMap Example\nDESCRIPTION: Example structure of aws-auth ConfigMap showing IAM role mappings\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\nmapRoles: |\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/eksctl-johnw-karpenter-demo-NodeInstanceRole-72CV61KQNOYS\n      username: system:node:{{EC2PrivateDNSName}}\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/KarpenterNodeRole-johnw-karpenter-demo\n      username: system:node:{{EC2PrivateDNSName}}\nmapUsers: |\n    []\nkind: ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on OSX\nDESCRIPTION: Commands to open and port-forward Karpenter metrics on OSX.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\n----------------------------------------\n\nTITLE: Using local Karpenter core changes\nDESCRIPTION: Replaces the Karpenter dependency with a local version for testing changes made to the core Karpenter repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Deleting Launch Templates by ID - Shell\nDESCRIPTION: This command deletes a specified AWS EC2 launch template using its template ID. This is useful for cleaning up templates that are no longer needed, especially those without necessary tags that are critical for identifying their purpose.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Karpenter Downgrade\nDESCRIPTION: Sets up environment variables for the Karpenter downgrade process, including cluster name, AWS region, account ID, and IAM role ARN.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_PARTITION=\"aws\" # if you are not using standard partitions, you may need to configure to aws-cn / aws-us-gov\nexport CLUSTER_NAME=\"${USER}-karpenter-demo\"\nexport AWS_REGION=\"us-west-2\"\nexport AWS_ACCOUNT_ID=\"$(aws sts get-caller-identity --query Account --output text)\"\nexport KARPENTER_NAMESPACE=kube-system\nexport KARPENTER_IAM_ROLE_ARN=\"arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter\"\n```\n\n----------------------------------------\n\nTITLE: Finding Available AMI Versions for AL2023 with AWS CLI\nDESCRIPTION: Bash command to discover available AL2023 AMI versions for a specific Kubernetes version using AWS SSM parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nexport K8S_VERSION=\"{{< param \\\"latest_k8s_version\\\" >}}\"\naws ssm get-parameters-by-path --path \"/aws/service/eks/optimized-ami/$K8S_VERSION/amazon-linux-2023/\" --recursive | jq -cr '.Parameters[].Name' | grep -v \"recommended\" | awk -F '/' '{print $10}' | sed -r 's/.*(v[[:digit:]]+)$/\\1/' | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by IDs - YAML\nDESCRIPTION: This snippet allows for the direct selection of security groups using their respective IDs, ensuring precise targeting of known resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n securityGroupSelectorTerms:\n    - id: \"sg-063d7acfb4b06c82c\"\n    - id: \"sg-06e0cf9c198874591\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for Reading Instance Profiles\nDESCRIPTION: This JSON snippet allows the Karpenter controller to retrieve information about specified instance profiles to ascertain if profiles need provisioning for the associated EC2NodeClass.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/reference/cloudformation.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back CloudFormation Stack and Cleaning Up Temporary Policy\nDESCRIPTION: Rolls back the CloudFormation stack for Karpenter and removes the temporary v1beta1 controller policy.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTEMPOUT=$(mktemp)\nVERSION_TAG=$([[ ${KARPENTER_VERSION} == v* ]] && echo \"${KARPENTER_VERSION}\" || echo \"v${KARPENTER_VERSION}\")\ncurl -fsSL https://raw.githubusercontent.com/aws/karpenter-provider-aws/${VERSION_TAG}/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > \"${TEMPOUT}\"\naws cloudformation deploy \\\n  --stack-name \"Karpenter-${CLUSTER_NAME}\" \\\n  --template-file \"${TEMPOUT}\" \\\n  --capabilities CAPABILITY_NAMED_IAM \\\n  --parameter-overrides \"ClusterName=${CLUSTER_NAME}\"\n\nROLE_NAME=\"${CLUSTER_NAME}-karpenter\"\nPOLICY_NAME=\"KarpenterControllerPolicy-${CLUSTER_NAME}-${KARPENTER_VERSION}\"\nPOLICY_ARN=$(aws iam list-policies --query \"Policies[?PolicyName=='${POLICY_NAME}'].Arn\" --output text)\naws iam detach-role-policy --role-name \"${ROLE_NAME}\" --policy-arn \"${POLICY_ARN}\"\naws iam delete-policy --policy-arn \"${POLICY_ARN}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from Cluster Configuration\nDESCRIPTION: Script that extracts and sets environment variables from the existing cluster configuration for use in subsequent steps.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step01-env.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Handling Pricing Data Staleness in Karpenter\nDESCRIPTION: This snippet provides error messages that may occur if Karpenter fails to retrieve updated pricing data from the AWS Pricing API due to network issues in a private cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nERROR   controller.aws.pricing  updating on-demand pricing, RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout; RequestError: send request failed\ncaused by: Post \"https://api.pricing.us-east-1.amazonaws.com/\": dial tcp 52.94.231.236:443: i/o timeout, using existing pricing data from 2022-08-17T00:19:52Z  {\"commit\": \"4b5f953\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple NodeSelectorTerms with Karpenter\nDESCRIPTION: This YAML snippet illustrates how to define multiple `nodeSelectorTerms` in Node affinity. The first term allows the pod to run in either `us-west-2a` or `us-west-2b` but not in `us-west-2b`. If that is not available, the second term allows the pod to run on a spot instance in `us-west-2d`.  This requires that the NodePool is configured to allow these zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"affinity:\\n  nodeAffinity:\\n    requiredDuringSchedulingIgnoredDuringExecution:\\n      nodeSelectorTerms:\\n        - matchExpressions: # OR\\n          - key: \\\"topology.kubernetes.io/zone\\\" # AND\\n            operator: \\\"In\\\"\\n            values: [\\\"us-west-2a\\\", \\\"us-west-2b\\\"]\\n          - key: \\\"topology.kubernetes.io/zone\\\" # AND\\n            operator: \\\"NotIn\\\"\\n            values: [\\\"us-west-2b\\\"]\\n        - matchExpressions: # OR\\n          - key: \\\"karpenter.sh/capacity-type\\\" # AND\\n            operator: \\\"In\\\"\\n            values: [\\\"spot\\\"]\\n          - key: \\\"topology.kubernetes.io/zone\\\" # AND\\n            operator: \\\"In\\\"\\n            values: [\\\"us-west-2d\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Windows2019 Node in PowerShell\nDESCRIPTION: Runs a PowerShell script to initialize a Windows Server 2019 node for Amazon EKS. It assumes default EKS paths and pre-installed scripts for Windows EKS bootstrap.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Type Filtering Karpenter 0.14.0\nDESCRIPTION: YAML snippet to add an `Exists` requirement for instance type or family, preventing the launch of bare metal or older instance types without explicit configuration on provisioners.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  - key: node.kubernetes.io/instance-type\n    operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Errors Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of reconciliation errors per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_errors_total`\nTotal number of reconciliation errors per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Using Local Karpenter Core Repository with AWS Provider\nDESCRIPTION: Commands to replace the Karpenter core dependency with a local version for testing changes across both repositories during development.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace sigs.k8s.io/karpenter=$PATH_TO_KUBERNETES_SIGS_KARPENTER\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Compatibility Matrix in Markdown\nDESCRIPTION: This code snippet shows a markdown table representing the compatibility matrix between Kubernetes versions and Karpenter versions. It is generated from a separate Go file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| KUBERNETES |   1.26   |   1.27   |   1.28   |   1.29   |   1.30   |   1.31    | 1.32  |\n|------------|----------|----------|----------|----------|----------|-----------|-------|\n| karpenter  | >= 0.28 | >= 0.28 | >= 0.31 | >= 0.34 | >= 0.37 | >= 1.0.5 | 1.2.x |\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Port Forwarding\nDESCRIPTION: Command to set up port forwarding for accessing the Grafana instance.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step10-add-grafana-port-forward.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Controller Policy Definition\nDESCRIPTION: YAML configuration for the Karpenter Controller IAM policy initialization.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nKarpenterControllerPolicy:\n  Type: AWS::IAM::ManagedPolicy\n  Properties:\n    ManagedPolicyName: !Sub \"KarpenterControllerPolicy-${ClusterName}\"\n    PolicyDocument: !Sub |\n```\n\n----------------------------------------\n\nTITLE: Checking NodeClaim Consistency Status in Karpenter\nDESCRIPTION: This command allows you to check if Karpenter has correctly estimated the resources for a node by examining the ConsistentStateFound condition in the NodeClaim status. A False status indicates a discrepancy between estimated and actual resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ kg nodeclaim $NODECLAIM_NAME -o jsonpath='{.status.conditions[?(@.type==\"ConsistentStateFound\")]}'\n```\n\n----------------------------------------\n\nTITLE: Managing AWS Launch Templates Karpenter 0.14.0\nDESCRIPTION: Commands for finding and deleting AWS launch templates that match a previous naming scheme for which Karpenter is no longer responsible, due to a change in the tagging method. This is part of upgrade cleanup.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Profiling Karpenter memory usage\nDESCRIPTION: Commands to connect to Karpenter's pprof endpoint and visualize memory usage.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to the metrics endpoint\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\n# Visualize the memory\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Batcher Batch Time Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the duration of the batching window per batcher.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_batcher_batch_time_seconds`\nDuration of the batching window per batcher\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Get AWS Auth ConfigMap\nDESCRIPTION: This command retrieves the aws-auth ConfigMap from the kube-system namespace and outputs it in YAML format. This ConfigMap manages the IAM roles and users that are authorized to join the Kubernetes cluster as nodes. It's essential for ensuring nodes can register with the API server.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n\"kubectl get configmaps -n kube-system aws-auth -o yaml\"\n```\n\n----------------------------------------\n\nTITLE: Running the Allocatable Diff Tool with Bash\nDESCRIPTION: Demonstrates how to execute the allocatable-diff tool by setting the cluster name environment variable and specifying the output file path. The tool compares deployed nodes to Karpenter's expected capacity and allocatable resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/hack/tools/allocatable_diff/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CLUSTER_NAME=karpenter-demo\n./allocatable-diff --cluster-name=$CLUSTER_NAME --out-file=allocatable-diff.csv\n```\n\n----------------------------------------\n\nTITLE: Querying CNI Plugin Pods - Bash\nDESCRIPTION: This command queries the Kubernetes pods in the kube-system namespace and filters for the 'aws-node' pods to check if the CNI plugin is running correctly, which is crucial for networking in the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n kube-system | grep aws-node\n```\n\n----------------------------------------\n\nTITLE: Allow Karpenter to Manage Scoped Instance Profile\nDESCRIPTION: This IAM policy statement allows the Karpenter controller to perform actions such as `iam:AddRoleToInstanceProfile`, `iam:RemoveRoleFromInstanceProfile`, and `iam:DeleteInstanceProfile` on instance profiles. It requires specific `ResourceTag` conditions to ensure that the actions are performed within the correct cluster (`kubernetes.io/cluster`, `topology.kubernetes.io/region`, `karpenter.k8s.aws/ec2nodeclass`). The `iam:PassRole` permission further enforces this restriction.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:AddRoleToInstanceProfile\",\n    \"iam:RemoveRoleFromInstanceProfile\",\n    \"iam:DeleteInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node Disruption Budget Structure in Go\nDESCRIPTION: Golang struct definition for the NodeDisruptionBudget type that allows configuring minimum availability and maximum unavailability constraints for node termination. It includes fields for MinAvailable, MaxUnavailable, and a LabelSelector to target specific nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/termination.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype NodeDisruptionBudget struct {\n   // +optional\n   MinAvailable   *intstr.IntOrString   `json:\"minAvailable,omitempty\" protobuf:\"bytes,1,opt,name=minAvailable\"`\n   // Node Selector\n   // Label query over nodes managed by the Disruption Budget\n   // A null selector selects no nodes.\n   // An empty selector ({}) also selects no nodes, which differs from standard behavior of selecting all nodes.\n   // +patchStrategy=replace\n   // +optional\n   Selector       *metav1.LabelSelector `json:\"selector,omitempty\" patchStrategy:\"replace\" protobuf:\"bytes,2,opt,name=selector\"`\n   // +optional\n   MaxUnavailable *intstr.IntOrString   `json:\"maxUnavailable,omitempty\" protobuf:\"bytes,1,opt,name=minAvailable\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Subnets for Karpenter\nDESCRIPTION: Adds tags to nodegroup subnets so Karpenter knows which subnets to use for provisioning nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step05-tag-subnets.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Longest Running Processor Seconds Metric\nDESCRIPTION: Describes the metric for measuring how long the longest running processor for the workqueue has been running, in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_longest_running_processor_seconds`\nHow many seconds has the longest running processor for workqueue been running.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: NodeClaim Status Check Command\nDESCRIPTION: Bash command to check NodeClaim status conditions for resource computation verification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ kg nodeclaim $NODECLAIM_NAME -o jsonpath='{.status.conditions[?(@.type==\"ConsistentStateFound\")]}'\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for Karpenter Controller\nDESCRIPTION: Creates an IAM role for the Karpenter controller using IAM Roles for Service Accounts (IRSA), which allows the controller to provision EC2 instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step04-controller-iam.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Downloading Karpenter CloudFormation Template\nDESCRIPTION: Bash commands to download a specific version of the Karpenter CloudFormation template file.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/cloudformation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.0.9\"\ncurl https://raw.githubusercontent.com/aws/karpenter-provider-aws/v\"${KARPENTER_VERSION}\"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml > cloudformation.yaml\n```\n\n----------------------------------------\n\nTITLE: CNI IP Allocation Error Message\nDESCRIPTION: Example error message that appears when the CNI fails to allocate IP addresses to pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntime=2023-06-12T19:18:15Z type=Warning reason=FailedCreatePodSandBox from=kubelet message=Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"0f46f3f1289eed7afab81b6945c49336ef556861fe5bb09a902a00772848b7cc\": plugin type=\"aws-cni\" name=\"aws-cni\" failed (add): add cmd: failed to assign an IP address to container\n```\n\n----------------------------------------\n\nTITLE: Documenting CloudProvider Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the duration of cloud provider method calls, labeled by controller, method name, and provider.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_duration_seconds`\nDuration of cloud provider method calls. Labeled by the controller, method name and provider.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Deleting Legacy Mutating Webhook for v0.27.3+ Upgrade\nDESCRIPTION: Command to remove the deprecated defaulting.webhook.karpenter.sh mutating webhook when upgrading to v0.27.3+. This cleanup step is necessary if the webhook was not managed by Helm in previous versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Spot Service Linked Role\nDESCRIPTION: Command to create the required service linked role for EC2 Spot Instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws iam create-service-linked-role --aws-service-name spot.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Terminal Reconcile Errors Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of terminal reconciliation errors per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_terminal_reconcile_errors_total`\nTotal number of terminal reconciliation errors per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs in Bottlerocket\nDESCRIPTION: Command to view kubelet service logs in Bottlerocket's journal\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/troubleshooting.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: Provisioner Provider (v1alpha5) Configuration - YAML\nDESCRIPTION: This snippet demonstrates the deprecated `spec.provider` field within a Karpenter Provisioner in v1alpha5. This field has been replaced by the `NodeClass` resource in v1beta1, enabling separate management of provider-specific settings.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: karpenter.sh/v1alpha5\\nkind: Provisioner\\n...\\nspec:\\n  provider:\\n    amiFamily: Bottlerocket\\n    tags:\\n      test-tag: test-value\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Karpenter Conflict Error Handling in Go\nDESCRIPTION: This code snippet shows where Karpenter handles conflict errors when creating nodes. It's used to illustrate a potential issue where Karpenter might incorrectly assume a node was registered by kubelet.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/node-ownership.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://github.com/aws/karpenter-core/blob/842731178a3b732b8ef63f20f7ebc243f00d85fa/pkg/controllers/provisioning/provisioner.go#L352\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Go Metrics Documentation\nDESCRIPTION: Comprehensive metrics for monitoring AWS SDK Go performance, including request counts, retries, durations, and attempt tracking.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/reference/metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\naws_sdk_go_request_total\naws_sdk_go_request_retry_count\naws_sdk_go_request_duration_seconds\naws_sdk_go_request_attempt_total\naws_sdk_go_request_attempt_duration_seconds\n```\n\n----------------------------------------\n\nTITLE: AMI Selection by Name in Karpenter\nDESCRIPTION: This YAML snippet shows how to select AMIs by name in Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n\"  amiSelectorTerms:\\n    - name: my-ami\"\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection Using IDs\nDESCRIPTION: YAML example showing how to select subnets directly by their IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - id: \"subnet-09fa4a0a8f233a921\"\n    - id: \"subnet-0471ca205b8a129ae\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Batcher Batch Size Metric\nDESCRIPTION: Describes the metric for measuring the size of the request batch per batcher in the cloudprovider.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_batcher_batch_size`\nSize of the request batch per batcher\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: AWS Auth ConfigMap Example\nDESCRIPTION: Example AWS auth ConfigMap showing role mappings for node authentication\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\nmapRoles: |\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/eksctl-johnw-karpenter-demo-NodeInstanceRole-72CV61KQNOYS\n      username: system:node:{{EC2PrivateDNSName}}\n   - groups:\n      - system:bootstrappers\n      - system:nodes\n      rolearn: arn:aws:iam::973227887653:role/KarpenterNodeRole-johnw-karpenter-demo\n      username: system:node:{{EC2PrivateDNSName}}\nmapUsers: |\n    []\nkind: ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed EC2 Monitoring\nDESCRIPTION: YAML configuration for enabling detailed EC2 instance monitoring.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  detailedMonitoring: true\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection by Cluster Tag in Karpenter\nDESCRIPTION: This YAML snippet configures Karpenter to select security groups tagged with the Kubernetes cluster tag. This is useful for selecting security groups created by EKS.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  securityGroupSelectorTerms:\\n    - tags:\\n        kubernetes.io/cluster/$CLUSTER_NAME: \\\"owned\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom FlowSchemas for Karpenter\nDESCRIPTION: This snippet is a reference to a script that applies custom FlowSchemas to ensure Karpenter gets the appropriate priority for API requests when installed in a non-default namespace.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step15-apply-flowschemas.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Old Launch Templates for Karpenter 0.14.0\nDESCRIPTION: Bash commands to find and delete launch templates that match the old naming pattern but do not have the new 'karpenter.k8s.aws/cluster' tag.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/upgrade-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n## Find launch templates that match the naming pattern and you do not want to keep\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n\n## Delete launch template(s) that match the name but do not have the \"karpenter.k8s.aws/cluster\" tag\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Updating Karpenter CRD for v0.16.0+\nDESCRIPTION: Command to update the Karpenter Provisioner CRD to v0.16.0+ to support the new weight field in the v1alpha5 CRD.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting EC2NodeClass Status Condition Current Status Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the current time a status condition has been in a specific state, labeled by nodeclaim details.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_ec2nodeclass_status_condition_current_status_seconds`\nThe current amount of time in seconds that a status condition has been in a specific state. Labeled by the name of the nodelcaim, namespace, type, status, and reason.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Received Messages Metric\nDESCRIPTION: Describes the metric for counting received messages from the SQS queue, broken down by message type and actionability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_received_messages_total`\nCount of messages received from the SQS queue. Broken down by message type and whether the message was actionable.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Received Messages Metric in Markdown\nDESCRIPTION: Describes the metric for counting messages received from the SQS queue, broken down by message type and actionability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_received_messages_total`\nCount of messages received from the SQS queue. Broken down by message type and whether the message was actionable.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Printing a Greeting Message in Bash\nDESCRIPTION: A simple shell script that outputs a greeting message to the console. The script begins with a shebang line that specifies the interpreter (bash) and uses the echo command to display text.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/pkg/providers/amifamily/bootstrap/mime/test_data/shell.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\necho \"I'm a shell script!\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Visualizing a Go Profile\nDESCRIPTION: Connects to the metrics endpoint and uses Go's pprof tool to visualize application memory usage in a web interface. Requires proper access setup to the metrics endpoint via kubectl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/karpenter -n karpenter 8080\nopen http://localhost:8080/debug/pprof/\ngo tool pprof -http 0.0.0.0:9000 localhost:8080/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: PowerShell UserData for Windows in Karpenter\nDESCRIPTION: Example of PowerShell commands that can be passed as UserData for Windows instances.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_63\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Karpenter Snapshot Repository in AWS ECR\nDESCRIPTION: A bash command to authenticate with AWS ECR to access Karpenter snapshot releases. This allows users to pull snapshot releases from the private ECR repository using their AWS credentials.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/upgrading/compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Windows Custom UserData Configuration\nDESCRIPTION: Example of custom PowerShell UserData for Windows nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_41\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Running custom user data script\"\n```\n\n----------------------------------------\n\nTITLE: Allow SSM Parameter Access - IAM Policy\nDESCRIPTION: IAM policy statement enabling access to AWS Systems Manager parameters for AWS services. Grants Karpenter read access to service-specific SSM parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Labels Proposal Option 3\nDESCRIPTION: Third proposal using path elements in label names to indicate architecture-specific configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-options.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: provisioning.karpenter.sh/v1alpha2\nkind: Provisioner\nspec:\n  labels:\n      node.k8s.aws/launch-template-name/arm64: name-of-arm64-lt\n      # or?\n      node.k8s.aws/arm64/launch-template-name: name-of-arm64-lt\n```\n\n----------------------------------------\n\nTITLE: Documenting Client Go Request Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring request latency in seconds, broken down by various attributes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n### `client_go_request_duration_seconds`\nRequest latency in seconds. Broken down by verb, group, version, kind, and subresource.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Cloudprovider Instance Type Memory Metric\nDESCRIPTION: Describes the metric for measuring the memory in bytes for a given instance type.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cloudprovider_instance_type_memory_bytes`\nMemory, in bytes, for a given instance type.\n- Stability Level: BETA\n```\n\n----------------------------------------\n\nTITLE: Running Karpenter E2E Tests\nDESCRIPTION: Command to run end-to-end correctness tests for Karpenter to verify functionality.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Queue Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring how long an item stays in workqueue before being requested, in seconds.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_queue_duration_seconds`\nHow long in seconds an item stays in workqueue before being requested\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Deploying Karpenter Release Version\nDESCRIPTION: Set the specific Karpenter version to be deployed in the Kubernetes cluster\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with AWS ECR for Snapshot Releases in Bash\nDESCRIPTION: This bash command authenticates with AWS ECR to access the private repository containing Karpenter snapshot releases. It uses the AWS CLI to get a login password and pipes it to the Docker login command.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/upgrading/compatibility.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region {{< param \"snapshot_repo.region\" >}} | docker login --username AWS --password-stdin {{< param \"snapshot_repo.account_id\" >}}.dkr.ecr.{{< param \"snapshot_repo.region\" >}}.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Resource Creation Tagging in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to create tags on EC2 resources during instance creation. It ensures that resources can't be tagged arbitrarily after creation and enforces specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedResourceCreationTagging\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*\"\n  ],\n  \"Action\": \"ec2:CreateTags\",\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/eks:eks-cluster-name\": \"${ClusterName}\"\n      \"ec2:CreateAction\": [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\"\n      ]\n    },\n    \"StringLike\": {\n      \"aws:RequestTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for AL2 AMI Family\nDESCRIPTION: Default block device mapping configuration for the Amazon Linux 2 (AL2) AMI family in EC2NodeClass. This configuration is used when no overrides are specified.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Synced Metric\nDESCRIPTION: Describes the metric indicating whether the cluster state is synchronized, based on the consistency between APIServer and Karpenter's cluster state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_synced`\nReturns 1 if cluster state is synced and 0 otherwise. Synced checks that nodeclaims and nodes that are stored in the APIServer have the same representation as Karpenter's cluster state\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for AWS Karpenter Provider Documentation Page\nDESCRIPTION: This code snippet defines the frontmatter for a new page in the AWS Karpenter Provider documentation. It includes placeholders for the title (derived from the file name) and the current date, and sets the draft status to true.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/archetypes/default.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Retries Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the total number of retries handled by workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_retries_total`\nTotal number of retries handled by workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on OSX\nDESCRIPTION: Commands to open and port-forward Karpenter metrics for debugging on OSX.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/contributing/development-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Attempt Duration Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the latency of AWS SDK Go request attempts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_attempt_duration_seconds`\nLatency of AWS SDK Go request attempts\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Scaling Down Test Deployment\nDESCRIPTION: Removes the test deployment to demonstrate Karpenter's node deprovisioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete deployment inflate\n```\n\n----------------------------------------\n\nTITLE: Network Plugin Not Ready Error\nDESCRIPTION: Example error message when runtime network is not ready due to CNI plugin initialization failure\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nKubeletNotReady runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Node Count Metric\nDESCRIPTION: Describes the metric for tracking the current count of nodes in the cluster state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_node_count`\nCurrent count of nodes in cluster state\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Client Go Request Total Metric\nDESCRIPTION: Describes the metric for counting the number of HTTP requests, partitioned by status code and method.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n### `client_go_request_total`\nNumber of HTTP requests, partitioned by status code and method.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Creating ECR Repository for Karpenter Development\nDESCRIPTION: AWS CLI command to create an ECR repository for Karpenter development images.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository \\\n    --repository-name dev \\\n    --image-scanning-configuration scanOnPush=true \\\n    --region \"${AWS_DEFAULT_REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Transition Time Metric in Markdown\nDESCRIPTION: Describes the deprecated metric for measuring the time a condition was in a given state before transitioning.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_transition_seconds`\nThe amount of time a condition was in a given state before transitioning. e.g. Alarm := P99(Updated=False) > 5 minutes\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Delete Old Launch Template (v0.14.0)\nDESCRIPTION: This command deletes a specific launch template by its ID using the AWS CLI.  It's intended for cleaning up old launch templates that match the deprecated naming pattern used by Karpenter prior to version `0.14.0`.  Replace `<LAUNCH_TEMPLATE_ID>` with the ID of the launch template to delete.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Allowing Tagging of Instance Profiles in AWS with JSON\nDESCRIPTION: This snippet creates an IAM policy that allows the Karpenter controller to tag instance profiles using the `iam:TagInstanceProfile` action. It requires Karpenter to set specific tags on the instance profiles it provisions, ensuring operations are scoped to the targeted cluster and region.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedInstanceProfileTagActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": [\n    \"iam:TagInstanceProfile\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:ResourceTag/topology.kubernetes.io/region\": \"${AWS::Region}\",\n      \"aws:RequestTag/kubernetes.io/cluster/${ClusterName}\": \"owned\",\n      \"aws:RequestTag/topology.kubernetes.io/region\": \"${AWS::Region}\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\": \"*\",\n      \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Metadata Options for EC2 Instances\nDESCRIPTION: YAML configuration showing the default metadata options applied to EC2 instances if not specified in the EC2NodeClass.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  metadataOptions:\n    httpEndpoint: enabled\n    httpProtocolIPv6: disabled\n    httpPutResponseHopLimit: 1\n    httpTokens: required\n```\n\n----------------------------------------\n\nTITLE: Documenting Client Go Request Total Metric in Markdown\nDESCRIPTION: Describes the metric for counting the number of HTTP requests, partitioned by status code and method.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n### `client_go_request_total`\nNumber of HTTP requests, partitioned by status code and method.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Debugging Karpenter Metrics on Linux\nDESCRIPTION: Commands to open and port-forward Karpenter metrics on Linux.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngio open http://localhost:8080/metrics && kubectl port-forward service/karpenter -n karpenter 8080\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Current Status Time Metric in Markdown\nDESCRIPTION: Describes the deprecated metric for measuring the current time a status condition has been in a specific state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_current_status_seconds`\nThe current amount of time in seconds that a status condition has been in a specific state. Alarm := P99(Updated=Unknown) > 5 minutes\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Time Metric in Markdown\nDESCRIPTION: Describes the metric for measuring the length of time per reconciliation per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_time_seconds`\nLength of time per reconciliation per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Node Template with Subnet and Security Group Selectors\nDESCRIPTION: Example configuration for AWS Node Template showing required subnet and security group selector tags for Karpenter v0.5.5+.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nkind: AWSNodeTemplate\nspec:\n  subnetSelector:\n    karpenter.sh/discovery: ${CLUSTER_NAME}\n  securityGroupSelector:\n    karpenter.sh/discovery: ${CLUSTER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Filter Expression\nDESCRIPTION: A Prometheus query expression to filter out NodeClaimNotFoundError from cloudprovider errors metric to get accurate error counts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_13\n\nLANGUAGE: promql\nCODE:\n```\n({controller!=\"node.termination\"} or {controller!=\"nodeclaim.termination\"}) and {error!=\"NodeClaimNotFoundError\"}\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Karpenter in Kubernetes\nDESCRIPTION: Commands to install and uninstall Karpenter in a Kubernetes cluster specified in your ~/.kube/config using make commands.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/contributing/development-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply # Install Karpenter\nmake delete # Uninstall Karpenter\n```\n\n----------------------------------------\n\nTITLE: Configuring NodePools and Deployment with Topology Spread Constraints in YAML\nDESCRIPTION: This snippet demonstrates how to configure NodePools and a Deployment with topology spread constraints. It shows two NodePool configurations with different zonal requirements and a Deployment that uses topology spread constraints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: Exists\n---\nappVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: np-zonal-constraint\n  labels:\n    project: zone-specific-project\nspec:\n  template:\n    spec:\n      requirements:\n      - key: topology.kubernetes.io/zone\n        operator: In\n        values: ['us-east-1a', 'us-east-1b']\n      # ...\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: inflate\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: inflate\n  template:\n    metadata:\n      labels:\n        app: inflate\n    spec:\n      nodeSelector:\n        project: zone-specific-project\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: topology.kubernetes.io/zone\n          whenUnsatisfiable: DoNotSchedule\n          labelSelector:\n            matchLabels:\n              app: inflate\n```\n\n----------------------------------------\n\nTITLE: Cluster Cleanup Commands\nDESCRIPTION: Commands to clean up and remove the demo infrastructure from AWS account to avoid additional charges.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step17-cleanup.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioner with AutoFill Configuration\nDESCRIPTION: Example of a Karpenter provisioner specification with launch template autofill setting.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/aws-launch-templates-v2.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Provisioner\nspec:\n  provider:\n    launchTemplate: CustomKarpenterLaunchTemplateDemo\n     autofill: true\n```\n\n----------------------------------------\n\nTITLE: Security Group Selection using Multiple Tag Terms in Karpenter\nDESCRIPTION: This YAML snippet demonstrates security group selection using multiple tag terms, creating an OR condition between groups based on name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  securityGroupSelectorTerms:\\n    - tags:\\n        Name: \\\"my-security-group-1\\\"\\n    - tags:\\n        Name: \\\"my-security-group-2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecated Status Condition Count Metric\nDESCRIPTION: Describes the deprecated metric for counting the number of conditions for a given object, type, and status.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n### `operator_status_condition_count`\nThe number of an condition for a given object, type and status. e.g. Alarm := Available=False > 0\n- Stability Level: DEPRECATED\n```\n\n----------------------------------------\n\nTITLE: Merged NodeConfig UserData in MIME Format for AL2023\nDESCRIPTION: Shows the result of Karpenter merging user-provided NodeConfig with Karpenter's generated configuration. The final MIME multipart archive combines both configurations with Karpenter's settings taking precedence.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_40\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: application/node.eks.aws\n\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  kubelet:\n    config:\n      maxPods: 42\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Settings in Karpenter AWS Provider\nDESCRIPTION: Example YAML configuration for specifying kubelet settings in Karpenter's AWS provider. Includes options for pods per core, max pods, reserved resources, eviction thresholds, and other kubelet parameters.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  podsPerCore: 2\n  maxPods: 20\n  systemReserved:\n    cpu: 100m\n    memory: 100Mi\n    ephemeral-storage: 1Gi\n  kubeReserved:\n    cpu: 200m\n    memory: 100Mi\n    ephemeral-storage: 3Gi\n  evictionHard:\n    memory.available: 5%\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n  evictionSoft:\n    memory.available: 500Mi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n  evictionSoftGracePeriod:\n    memory.available: 1m\n    nodefs.available: 1m30s\n    nodefs.inodesFree: 2m\n  evictionMaxPodGracePeriod: 60\n  imageGCHighThresholdPercent: 85\n  imageGCLowThresholdPercent: 80\n  cpuCFSQuota: true\n  clusterDNS: [\"10.0.1.100\"]\n```\n\n----------------------------------------\n\nTITLE: Pinning AMI Using Tags\nDESCRIPTION: Beginning of an example showing how to pin to an AMI using tags, suggesting integration with CI/CD systems for testing newer AMI versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/tasks/managing-amis.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n# Using tags\n# You can use a CI/CD system to test newer versions of an AMI\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Server Full AMI Selector in Karpenter\nDESCRIPTION: YAML configuration demonstrating how to specify an AMI selector for Windows Server 2022 Full edition with EKS optimization for Kubernetes 1.30.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\namiSelectorTerms:\n    - name: Windows_Server-2022-English-Full-EKS_Optimized-1.30*\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS SDK Go Request Attempt Total Metric\nDESCRIPTION: Describes the metric for counting the total number of AWS SDK Go request attempts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\n### `aws_sdk_go_request_attempt_total`\nThe total number of AWS SDK Go request attempts\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Replacing Provisioner CRD Karpenter 0.11.0\nDESCRIPTION: Updates the Provisioner CRD to version 0.11.0 to utilize new fields like `providerRef`. This manual operation is necessary as Helm does not handle CRD lifecycle management.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Allowing Scoped Deletion in AWS IAM Policy\nDESCRIPTION: This policy allows Karpenter to terminate EC2 instances and delete launch templates. It ensures that Karpenter can only delete resources associated with it by requiring specific tag conditions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/cloudformation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowScopedDeletion\",\n  \"Effect\": \"Allow\",\n  \"Resource\": [\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*\",\n    \"arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*\"\n  ],\n  \"Action\": [\n    \"ec2:TerminateInstances\",\n    \"ec2:DeleteLaunchTemplate\"\n  ],\n  \"Condition\": {\n    \"StringEquals\": {\n      \"aws:ResourceTag/kubernetes.io/cluster/${ClusterName}\": \"owned\"\n    },\n    \"StringLike\": {\n      \"aws:ResourceTag/karpenter.sh/nodepool\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged AL2023 UserData with Bash Script in MIME multi-part format\nDESCRIPTION: Example of how Karpenter merges a bash script UserData with its generated NodeConfig. Shows the resulting MIME multi-part archive with both script and configuration parts.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_48\n\nLANGUAGE: text\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Hello, AL2023!\"\n\n--//\nContent-Type: application/node.eks.aws\n\n# Karpenter Generated NodeConfig\napiVersion: node.eks.aws/v1alpha1\nkind: NodeConfig\nspec:\n  cluster:\n    apiServerEndpoint: https://test-cluster\n    certificateAuthority: cluster-ca\n    cidr: 10.100.0.0/16\n    name: test-cluster\n  kubelet:\n    config:\n      clusterDNS:\n      - 10.100.0.10\n      maxPods: 118\n    flags:\n    - --node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=default\"\n\n--//--\n```\n\n----------------------------------------\n\nTITLE: Applying Flow Schemas for Karpenter\nDESCRIPTION: This script applies FlowSchemas to manage request throttling for Karpenter, ensuring it operates efficiently without being throttled by other components in the cluster.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step15-apply-flowschemas.sh\" language=\"bash\"%}}\n```\n\n----------------------------------------\n\nTITLE: Node Affinity with NotIn Operator\nDESCRIPTION: Example showing how to exclude specific zones using the NotIn operator in node affinity rules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"In\"\n  values: [\"us-west-2a\", \"us-west-2b\"]\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"NotIn\"\n  values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hard and Soft Eviction Thresholds in Karpenter\nDESCRIPTION: This YAML configuration demonstrates how to set hard and soft eviction thresholds for the Kubelet in a Karpenter NodePool. These settings determine when pods are evicted based on resource pressure like memory or filesystem availability.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodepools.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubelet:\n  evictionHard:\n    memory.available: 500Mi\n    nodefs.available: 10%\n    nodefs.inodesFree: 10%\n    imagefs.available: 5%\n    imagefs.inodesFree: 5%\n    pid.available: 7%\n  evictionSoft:\n    memory.available: 1Gi\n    nodefs.available: 15%\n    nodefs.inodesFree: 15%\n    imagefs.available: 10%\n    imagefs.inodesFree: 10%\n    pid.available: 10%\n```\n\n----------------------------------------\n\nTITLE: AL2 AMIFamily UserData Template\nDESCRIPTION: Generated UserData for Amazon Linux 2 AMI family, showing the automated bootstrap script invocation with cluster configuration parameters and kubelet arguments.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"//\"\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n/etc/eks/bootstrap.sh 'test-cluster' --apiserver-endpoint 'https://test-cluster' --b64-cluster-ca 'ca-bundle' \\\n--dns-cluster-ip '10.100.0.10' \\\n--use-max-pods false \\\n--kubelet-extra-args '--node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test  --max-pods=110'\n--//--\n```\n\n----------------------------------------\n\nTITLE: Debugging Volume Attachment Errors for Pods\nDESCRIPTION: Error output from kubectl describe pod showing volume attachment failures that can occur when too many pods with PersistentVolumes are co-located on the same node. These failures can happen when volume limits are reached on a node.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWarning   FailedAttachVolume    pod/example-pod                      AttachVolume.Attach failed for volume \"***\" : rpc error: code = Internal desc = Could not attach volume \"***\" to node \"***\": attachment of disk \"***\" failed, expected device to be attached but was attaching\nWarning   FailedMount           pod/example-pod                      Unable to attach or mount volumes: unmounted volumes=[***], unattached volumes=[***]: timed out waiting for the condition\n```\n\n----------------------------------------\n\nTITLE: Documenting Interruption Message Queue Duration Metric\nDESCRIPTION: Describes the metric for measuring the time an interruption message spends on the queue before processing by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_interruption_message_queue_duration_seconds`\nAmount of time an interruption message is on the queue before it is processed by karpenter.\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Version Upgrade Alert Example\nDESCRIPTION: Alert syntax used in the documentation to warn users about version compatibility and requirements\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% alert title=\"Warning\" color=\"warning\" %}}\n`0.33.0`+ _only_ supports Karpenter v1beta1 APIs and will not work with existing Provisioner, AWSNodeTemplate or Machine alpha APIs. Do not upgrade to `0.37.0`+ without first [upgrading to `0.32.x`]. This version supports both the alpha and beta APIs, allowing you to migrate all of your existing APIs to beta APIs without experiencing downtime.\n{{% /alert %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows2019 AMI Family Userdata in Karpenter\nDESCRIPTION: This snippet demonstrates the default userdata configuration for the Windows2019 AMI family in Karpenter. It includes PowerShell commands for EKS bootstrap script execution.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n<powershell>\n[string]$EKSBootstrapScriptFile = \"$env:ProgramFiles\\Amazon\\EKS\\Start-EKSBootstrap.ps1\"\n& $EKSBootstrapScriptFile -EKSClusterName 'test-cluster' -APIServerEndpoint 'https://test-cluster' -Base64ClusterCA 'ca-bundle' -KubeletExtraArgs '--node-labels=\"karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=test\" --max-pods=110' -DNSClusterIP '10.100.0.10'\n</powershell>\n```\n\n----------------------------------------\n\nTITLE: Setting Up IAM Permissions for Karpenter\nDESCRIPTION: Command to deploy the correct IAM permissions, including the instance profile for provisioned nodes.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/contributing/development-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Profile Details with AWS IAM JSON\nDESCRIPTION: This IAM permission allows the Karpenter controller to retrieve information about instance profiles using the `iam:GetInstanceProfile` action. This facilitates determining whether an instance profile related to a specific `EC2NodeClass` exists or needs to be reconfigured.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInstanceProfileReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*\",\n  \"Action\": \"iam:GetInstanceProfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Karpenter Logging Configuration\nDESCRIPTION: Shows how to view the current logging configuration for Karpenter using kubectl.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get configmap -n karpenter config-logging -o yaml\napiVersion: v1\ndata:\n  loglevel.webhook: error\n  zap-logger-config: |\n    {\n      \"level\": debug\",\n      development\": false,\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Release Annotations to Karpenter CRDs\nDESCRIPTION: Commands to add Helm release name and namespace annotations to Karpenter Custom Resource Definitions to resolve annotation validation errors when installing the karpenter-crd chart.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-name=karpenter-crd --overwrite\nkubectl annotate crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh meta.helm.sh/release-namespace=\"${KARPENTER_NAMESPACE}\" --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring UserData for Bottlerocket in Karpenter AWS Provider\nDESCRIPTION: Example of passed-in TOML UserData for Bottlerocket and how it's merged with Karpenter-generated configuration. The custom UserData sets eviction-hard and an unknown setting, while Karpenter adds cluster and node label configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_30\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\n[settings.kubernetes]\napi-server = 'https://cluster'\ncluster-certificate = 'ca-bundle'\ncluster-name = 'cluster'\n\n[settings.kubernetes.node-labels]\n'karpenter.sh/capacity-type' = 'on-demand'\n'karpenter.sh/nodepool' = 'default'\n\n[settings.kubernetes.node-taints]\n\n[settings.kubernetes.eviction-hard]\n'memory.available' = '12%%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Disruption Budgets in Karpenter NodePool for AWS\nDESCRIPTION: This YAML snippet demonstrates how to set up Disruption Budgets in a Karpenter NodePool spec. It includes settings for consolidation policy, expiration time, and various budget rules based on node counts and schedules.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/tasks/managing-amis.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisruption:\n  consolidationPolicy: WhenEmpty\n  expireAfter: 1440h\n  budgets:\n  - nodes: 15%\n  - nodes: \"3\"\n  - nodes: \"0\"\n    schedule: \"0 7 * * sat-sun\"\n    duration: 12h\n```\n\n----------------------------------------\n\nTITLE: Subnet Selector with Specified Tag Key in Karpenter\nDESCRIPTION: This YAML snippet configures Karpenter to select subnets with a specified tag key. It demonstrates the use of a wildcard ('*') to match any value for the specified tag.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  subnetSelectorTerms:\\n    - tags:\\n        karpenter.sh/discovery/MyClusterName: '*'\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Optional Managed Grafana CloudFormation Stack\nDESCRIPTION: Optional command to deploy AWS Managed Grafana and its associated IAM policy using CloudFormation. Requires providing a Prometheus workspace ID as a parameter to connect the two services.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/test/cloudformation/README.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\naws cloudformation deploy \\\n    --stack-name GithubActionsManagedGrafana \\\n    --template-file grafana_cloudformation.yaml \\\n    --parameter-overrides \"PrometheusWorkspaceID=<workspace-id>\" \\\n    --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Environment Variables in Bash\nDESCRIPTION: Sets environment variables for Karpenter namespace, version, and Kubernetes version needed throughout the installation process.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_NAMESPACE=\"kube-system\"\nexport KARPENTER_VERSION=\"1.3.3\"\nexport K8S_VERSION=\"1.32\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Level Disruption Protection in Kubernetes\nDESCRIPTION: This YAML example demonstrates how to apply the 'karpenter.sh/do-not-disrupt' annotation directly to a Kubernetes node to prevent Karpenter from voluntarily disrupting it. This prevents disruption actions like consolidation, drift handling, and expiration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/disruption.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    karpenter.sh/do-not-disrupt: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Get AWS Node Pod Logs\nDESCRIPTION: This command retrieves the logs from a specific `aws-node` pod in the kube-system namespace. Replace `aws-node-?????` with the actual pod name obtained from the previous command.  It is used to diagnose issues with the VPC CNI plugin.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n\"kubectl logs aws-node-????? -n kube-system\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnets by Tag Key - YAML\nDESCRIPTION: This snippet allows the user to select subnets associated with a specific tag key, where '*' implies a wildcard match. It is useful for dynamically selecting resources based on defined metadata tags.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodeclasses.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery/MyClusterName: '*'\n\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Spot Instance Interruption Warning Rule for Karpenter\nDESCRIPTION: Defines an EventBridge rule to capture EC2 Spot Instance Interruption Warnings and send them to the Karpenter interruption queue for processing.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nSpotInterruptionRule:\n  Type: 'AWS::Events::Rule'\n  Properties:\n    EventPattern:\n      source:\n        - aws.ec2\n      detail-type:\n        - EC2 Spot Instance Interruption Warning\n    Targets:\n      - Id: KarpenterInterruptionQueueTarget\n        Arn: !GetAtt KarpenterInterruptionQueue.Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU-Isolated NodePool in Karpenter\nDESCRIPTION: Example of setting up a NodePool that only provisions nodes with specific GPU instance types and implements GPU-specific taints.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/concepts/nodepools.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: gpu\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n  template:\n    spec:\n      requirements:\n      - key: node.kubernetes.io/instance-type\n        operator: In\n        values: [\"p3.8xlarge\", \"p3.16xlarge\"]\n      taints:\n      - key: nvidia.com/gpu\n        value: \"true\"\n        effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Debugging Windows Container Image Pull Error\nDESCRIPTION: Error message when Windows pods fail to launch due to container OS version compatibility issues with the host OS version. Windows requires matching OS versions between container and host.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nFailed to pull image \"mcr.microsoft.com/windows/servercore:xxx\": rpc error: code = NotFound desc = failed to pull and unpack image \"mcr.microsoft.com/windows/servercore:xxx\": no match for platform in manifest: not found\n```\n\n----------------------------------------\n\nTITLE: Defining an Inexpensive Provisioner in YAML for Karpenter\nDESCRIPTION: This YAML snippet demonstrates how to define a Karpenter Provisioner for less expensive instances. It's used to contrast with the expensive provisioner and highlight potential scheduling issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/provisioner-priority.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: karpenter.sh/v1alpha5\nkind: Provisioner\nmetadata:\n   name: inexpensive\nspec:\n   requirements:\n      - key: \"node.kubernetes.io/instance-type\"\n        operator: In\n        values: [\"t3.small\"]\n```\n\n----------------------------------------\n\nTITLE: AWS Auth ConfigMap Role Configuration\nDESCRIPTION: This YAML snippet shows how to modify the aws-auth ConfigMap to allow nodes using the new IAM role to join the cluster. It involves adding role details to the mapRoles section.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- groups:\n  - system:bootstrappers\n  - system:nodes\n  ## If you intend to run Windows workloads, the kube-proxy group should be specified.\n  # For more information, see https://github.com/aws/karpenter/issues/5099.\n  # - eks:kube-proxy-windows\n  rolearn: arn:${AWS_PARTITION}:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}\n  username: system:node:{{EC2PrivateDNSName}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Topology Spread Constraint for Workload Distribution in Karpenter\nDESCRIPTION: This YAML snippet defines a topology spread constraint for workload distribution. It ensures even distribution across nodes with different 'capacity-spread' labels, supporting the on-demand/spot ratio splitting strategy.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/scheduling.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntopologySpreadConstraints:\n- maxSkew: 1\n  topologyKey: capacity-spread\n  whenUnsatisfiable: DoNotSchedule\n  labelSelector:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Default Block Device Mapping for AL2023 AMI Family (YAML)\nDESCRIPTION: Default block device mapping configuration for the Amazon Linux 2023 (AL2023) AMI family in Karpenter. It sets a 20Gi gp3 volume that is encrypted by default.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Allow Interruption Queue Management - IAM Policy\nDESCRIPTION: IAM policy statement enabling interaction with SQS interruption queues. Allows Karpenter to manage messages in the interruption queue for node termination handling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/reference/cloudformation.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowInterruptionQueueActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"${KarpenterInterruptionQueue.Arn}\",\n  \"Action\": [\n    \"sqs:DeleteMessage\",\n    \"sqs:GetQueueUrl\",\n    \"sqs:ReceiveMessage\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Node RBAC Permissions in EKS\nDESCRIPTION: YAML configuration showing the required RBAC permission group 'eks:kube-proxy-windows' that must be included in Windows node instance roles to enable DNS resolution for Windows pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/troubleshooting.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  username: system:node:{{EC2PrivateDNSName}}\n  groups:\n    - system:bootstrappers\n    - system:nodes\n    - eks:kube-proxy-windows # This is required for Windows DNS resolution to work\n...\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker Daemon with AWS ECR\nDESCRIPTION: Configures Docker to authenticate with a provisioned ECR repository using AWS CLI. Critical for deploying Karpenter images to the configured ECR repository.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport KO_DOCKER_REPO=\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/dev\"\naws ecr get-login-password --region \"${AWS_DEFAULT_REGION}\" | docker login --username AWS --password-stdin \"${KO_DOCKER_REPO}\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Security Groups by Name with Wildcards in Karpenter EC2NodeClass\nDESCRIPTION: Selects security groups using a wildcard pattern in the name field. This is useful for selecting groups with similar naming patterns without having to list each one individually.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/nodeclasses.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  securityGroupSelectorTerms:\n    - name: \"*Public*\"\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests and Managing Log Levels with Make\nDESCRIPTION: Executes end-to-end correctness tests and alters the default log level within Helm values. This setup is aimed at debugging and logging operations within a Kubernetes environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\nLANGUAGE: bash\nCODE:\n```\n--set logLevel=debug\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Old Launch Templates for Karpenter 0.14.0\nDESCRIPTION: Identifies and deletes launch templates using the old naming scheme that are no longer managed by Karpenter.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/upgrading/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n## Find launch templates that match the naming pattern and you do not want to keep\naws ec2 describe-launch-templates --filters=\"Name=launch-template-name,Values=Karpenter-${CLUSTER_NAME}-*\"\n\n## Delete launch template(s) that match the name but do not have the \"karpenter.k8s.aws/cluster\" tag\naws ec2 delete-launch-template --launch-template-id <LAUNCH_TEMPLATE_ID>\n```\n\n----------------------------------------\n\nTITLE: Applying Helm Chart Update\nDESCRIPTION: Script reference for applying Helm chart updates during Karpenter version upgrades. This script is used after ensuring proper IAM role permissions are in place.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfile=\"./content/en/{VERSION}/getting-started/getting-started-with-karpenter/scripts/step08-apply-helm-chart.sh\"\n```\n\n----------------------------------------\n\nTITLE: NodePool Configuration for NVME Storage Requirements\nDESCRIPTION: This YAML snippet demonstrates how to configure a NodePool to require instances with NVME disk storage using Karpenter's well-known labels with the `Exists` operator.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/scheduling.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrequirement:\n  - key: \"karpenter.k8s.aws/instance-local-nvme\"\n    operator: \"Exists\"\n...\n```\n\n----------------------------------------\n\nTITLE: Karpenter Provisioning Log - NodeClaim Creation in AWS\nDESCRIPTION: JSON log example showing the creation of a NodeClaim resource with specific requirements for CPU, pods, and compatible AWS instance types.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclaims.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"level\": \"INFO\",\n    \"time\": \"2024-06-22T02:24:16.128Z\",\n    \"message\": \"created nodeclaim\",\n    \"controller\": \"provisioner\",\n    \"NodePool\": {\n        \"name\":\"default\"\n    },\n    \"NodeClaim\": {\n        \"name\":\"default-sfpsl\"\n    },\n    \"requests\": {\n        \"cpu\":\"5150m\",\n        \"pods\":\"8\"\n    },\n    \"instance-types\": \"c3.2xlarge, c4.2xlarge, c4.4xlarge, c5.2xlarge, c5.4xlarge and 55 other(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Subnet Selector Configuration in YAML\nDESCRIPTION: Demonstrates the proposed structure for subnetSelectorTerms, allowing multiple selectors through tags and ids that can be ORed together.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/v1beta1-full-changelist.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n- id: abc-123\n  tags:\n    key: value\n# Selector Terms are ORed\n- id: abc-123\n  tags:\n    key: value\n```\n\n----------------------------------------\n\nTITLE: Replacing Provisioners CRD for Karpenter 0.16.2+ Upgrade\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v1alpha5 which adds new kubeletConfiguration fields required for Karpenter version 0.16.2 and above.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting Workqueue Retries Total Metric\nDESCRIPTION: Describes the metric for counting the total number of retries handled by the workqueue.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### `workqueue_retries_total`\nTotal number of retries handled by workqueue\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Displaying Resolved Instance Profile in Karpenter EC2NodeClass Status\nDESCRIPTION: Example of the status.instanceProfile field showing the instance profile that Karpenter generated from the specified IAM role in spec.role.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  role: \"KarpenterNodeRole-${CLUSTER_NAME}\"\nstatus:\n  instanceProfile: \"${CLUSTER_NAME}-0123456778901234567789\"\n```\n\n----------------------------------------\n\nTITLE: Removing Stale Karpenter Mutating Webhook for 0.27.3+ Upgrade\nDESCRIPTION: Command to delete the stale defaulting.webhook.karpenter.sh mutating webhook when upgrading to Karpenter version 0.27.3 or later if the webhook was not managed by Helm.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/docs/upgrading/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete mutatingwebhookconfigurations defaulting.webhook.karpenter.sh\n```\n\n----------------------------------------\n\nTITLE: Required AWS VPC Endpoints\nDESCRIPTION: List of required AWS VPC endpoints for running Karpenter in a private cluster environment.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/getting-started/getting-started-with-karpenter/_index.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncom.amazonaws.<region>.ec2\ncom.amazonaws.<region>.ecr.api\ncom.amazonaws.<region>.ecr.dkr\ncom.amazonaws.<region>.s3 – For pulling container images\ncom.amazonaws.<region>.sts – For IAM roles for service accounts\ncom.amazonaws.<region>.ssm - For resolving default AMIs\ncom.amazonaws.<region>.sqs - For accessing SQS if using interruption handling\ncom.amazonaws.<region>.eks - For Karpenter to discover the cluster endpoint\n```\n\n----------------------------------------\n\nTITLE: Windows Container Error Message\nDESCRIPTION: Error message shown when Windows pods fail to launch due to image pull issues related to OS version incompatibility.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/troubleshooting.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nFailed to pull image \"mcr.microsoft.com/windows/servercore:xxx\": rpc error: code = NotFound desc = failed to pull and unpack image \"mcr.microsoft.com/windows/servercore:xxx\": no match for platform in manifest: not found\n```\n\n----------------------------------------\n\nTITLE: Checking Karpenter Controller Logs for Node Creation Errors\nDESCRIPTION: Bash commands to identify and view Karpenter controller logs for debugging node creation failures, such as invalid block device mappings in a launch template.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/troubleshooting.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -A | grep karpenter\n```\n\n----------------------------------------\n\nTITLE: Allowing SSM Read Actions in AWS IAM Policy\nDESCRIPTION: This policy allows the Karpenter controller to get SSM parameters from the current region for SSM parameters generated by AWS services. It's noted that further restrictions may be considered for sensitive information.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/cloudformation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowSSMReadActions\",\n  \"Effect\": \"Allow\",\n  \"Resource\": \"arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*\",\n  \"Action\": \"ssm:GetParameter\"\n}\n```\n\n----------------------------------------\n\nTITLE: AMI Status Configuration Examples\nDESCRIPTION: YAML examples showing AMI configurations for both default AL2 AMI family and custom AMI selector terms.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  amiFamily: AL2\nstatus:\n  amis:\n  - id: ami-03c3a3dcda64f5b75\n    name: amazon-linux-2-gpu\n    requirements:\n    - key: kubernetes.io/arch\n      operator: In\n      values:\n      - amd64\n    - key: karpenter.k8s.aws/instance-gpu-count\n      operator: Exists\n```\n\n----------------------------------------\n\nTITLE: Subnet Selector Configuration in YAML\nDESCRIPTION: YAML configuration for subnet selection logic using tags and subnet IDs.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/concepts/nodeclasses.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsubnetSelectorTerms:\n  # Select on any subnet that has the \"karpenter.sh/discovery: ${CLUSTER_NAME}\"\n  # AND the \"environment: test\" tag OR any subnet with ID \"subnet-09fa4a0a8f233a921\"\n  - tags:\n      karpenter.sh/discovery: \"${CLUSTER_NAME}\"\n      environment: test\n  - id: subnet-09fa4a0a8f233a921\n```\n\n----------------------------------------\n\nTITLE: Updating Provisioner CRD for v0.11.0\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.11.0, which adds the providerRef field to the Provisioner CRD specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/upgrading/upgrade-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.11.0/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Default Karpenter NodePool Disruption Configuration\nDESCRIPTION: YAML configuration showing the default values for Karpenter's NodePool disruption settings. It sets the consolidationPolicy to 'WhenEmptyOrUnderutilized' if not explicitly configured.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/disruption.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  disruption:\n    consolidationPolicy: WhenEmptyOrUnderutilized\n```\n\n----------------------------------------\n\nTITLE: Deploying Karpenter Resources\nDESCRIPTION: Creates the Karpenter namespace, installs the NodePool CRD, and deploys the Karpenter controller and related resources.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{{% script file=\"./content/en/{VERSION}/getting-started/migrating-from-cas/scripts/step09-deploy.sh\" language=\"bash\" %}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Profile Name with AWS CLI\nDESCRIPTION: Bash command to fetch the IAM role associated with an instance profile\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/v1beta1-migration.md#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nexport INSTANCE_PROFILE_NAME=KarpenterNodeInstanceProfile-bob-karpenter-demo\naws iam get-instance-profile --instance-profile-name $INSTANCE_PROFILE_NAME --query \"InstanceProfile.Roles[0].RoleName\"\nKarpenterNodeRole-bob-karpenter-demo\n```\n\n----------------------------------------\n\nTITLE: Custom AMI Configuration in AWS Provider\nDESCRIPTION: YAML configuration showing how to specify a custom AMI and userData in the Karpenter AWS provider specification.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/custom-user-data-and-amis.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    apiVersion: extensions.karpenter.sh/v1alpha1\n    kind: AWS\n    securityGroupSelector:\n      karpenter.sh/discovery: karp-cluster\n    subnetSelector:\n      karpenter.sh/discovery: karp-cluster\n    ami: ami-123456\n    userData: \"ba123bc..\" #base64 encoded\n```\n\n----------------------------------------\n\nTITLE: Executing Node and NodeClaim Deletions with kubectl\nDESCRIPTION: This snippet provides bash commands using kubectl to manually delete Karpenter nodes and nodeclaims. Dependencies include having kubectl installed and configured. The inputs are NODECLAIM_NAME and NODE_NAME for specific deletions, and outputs are the initiation of deletion processes. The bash commands facilitate node management and illustrate nodeclaim and node deletions through kubectl commands.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/concepts/disruption.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    # Delete a specific nodeclaim\n    kubectl delete nodeclaim $NODECLAIM_NAME\n\n    # Delete a specific node\n    kubectl delete node $NODE_NAME\n\n    # Delete all nodeclaims\n    kubectl delete nodeclaims --all\n\n    # Delete all nodes owned by any nodepool\n    kubectl delete nodes -l karpenter.sh/nodepool\n\n    # Delete all nodeclaims owned by a specific nodepoolXS\n    kubectl delete nodeclaims -l karpenter.sh/nodepool=$NODEPOOL_NAME\n```\n\n----------------------------------------\n\nTITLE: Documenting Controller Runtime Reconcile Panics Total Metric\nDESCRIPTION: Describes the metric for counting the total number of reconciliation panics per controller.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.3/reference/metrics.md#2025-04-16_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### `controller_runtime_reconcile_panics_total`\nTotal number of reconciliation panics per controller\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Documenting Cluster State Node Count Metric in Markdown\nDESCRIPTION: Describes the metric for counting the current number of nodes in cluster state.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/reference/metrics.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### `karpenter_cluster_state_node_count`\nCurrent count of nodes in cluster state\n- Stability Level: STABLE\n```\n\n----------------------------------------\n\nTITLE: Accessing Karpenter metrics on OSX\nDESCRIPTION: Port-forwards the Karpenter service and opens the metrics endpoint in a browser on OSX.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/contributing/development-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/metrics && kubectl port-forward service/karpenter -n kube-system 8080\n```\n\n----------------------------------------\n\nTITLE: Default AL2 Block Device Configuration\nDESCRIPTION: Default block device mapping configuration for Amazon Linux 2 AMI family.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/nodeclasses.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  blockDeviceMappings:\n    - deviceName: /dev/xvda\n      ebs:\n        volumeSize: 20Gi\n        volumeType: gp3\n        encrypted: true\n```\n\n----------------------------------------\n\nTITLE: Updating CRD Labels for Helm Management\nDESCRIPTION: Shell command to update CRD labels for Helm management compatibility.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label crd ec2nodeclasses.karpenter.k8s.aws nodepools.karpenter.sh nodeclaims.karpenter.sh app.kubernetes.io/managed-by=Helm --overwrite\n```\n\n----------------------------------------\n\nTITLE: Executing E2E Tests for Karpenter\nDESCRIPTION: This snippet uses the `make test` command to run end-to-end correctness tests for Karpenter. Ensure a valid test environment is set up.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/contributing/development-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test       # E2E correctness tests\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Template\nDESCRIPTION: Empty YAML configuration placeholder that appears in the original document but contains no actual configuration.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/designs/termination.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: NodePool Drift DisruptionBudget Example\nDESCRIPTION: This example demonstrates how to configure a NodePool disruption budget to control drift behavior in Karpenter. It shows how to prevent deprovisioning due to drift during business hours and allow it during non-business hours.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/reference/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: karpenter.sh/v1\nkind: NodePool\nmetadata:\n  name: default\nspec:\n…\n  disruption:\n    budgets:\n    - nodes: 10%\n    # On Weekdays during business hours, don't do any deprovisioning regarding drift.\n    - nodes: \"0\"\n      schedule: \"0 9 * * mon-fri\"\n      duration: 8h\n      reasons:\n      -\tDrifted\n    # during non-business hours do drift for up to 10% of nodes\n    - nodes: \"10%\"\n      reasons:\n      -\tDrifted\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Target Karpenter Version for Downgrade\nDESCRIPTION: Configures the target Karpenter version for downgrade, with options for specific versions.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Note: v0.33.x and v0.34.x include the v prefix, omit it for versions v0.35+\nexport KARPENTER_VERSION=\"0.37.7\" # Replace with your minor version\n```\n\n----------------------------------------\n\nTITLE: Setting Karpenter Version\nDESCRIPTION: Setting the Karpenter release version for deployment\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport KARPENTER_VERSION=\"1.0.9\"\n```\n\n----------------------------------------\n\nTITLE: Selecting AMI by Name\nDESCRIPTION: YAML configuration example for selecting an AMI by its name.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n  amiSelectorTerms:\n    - name: my-ami\n```\n\n----------------------------------------\n\nTITLE: Replacing Karpenter Provisioner CRD v0.16.2\nDESCRIPTION: Command to update the provisioners.karpenter.sh CRD to v0.16.2 to support new kubeletConfiguration fields.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/upgrading/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f https://raw.githubusercontent.com/aws/karpenter-provider-aws/v0.16.2/charts/karpenter/crds/karpenter.sh_provisioners.yaml\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Karpenter Controller with Helm\nDESCRIPTION: Uses Helm to rollback the Karpenter Controller to a specific version, enabling webhooks for proper v1 resource handling.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace \\\n  --set serviceAccount.annotations.\"eks\\.amazonaws\\.com/role-arn\"=${KARPENTER_IAM_ROLE_ARN} \\\n  --set settings.clusterName=${CLUSTER_NAME} \\\n  --set settings.interruptionQueue=${CLUSTER_NAME} \\\n  --set controller.resources.requests.cpu=1 \\\n  --set controller.resources.requests.memory=1Gi \\\n  --set controller.resources.limits.cpu=1 \\\n  --set controller.resources.limits.memory=1Gi \\\n  --set webhook.enabled=true \\\n  --set webhook.port=8443 \\\n  --wait\n```\n\n----------------------------------------\n\nTITLE: Subnet Selection using Multiple Tag Terms in Karpenter\nDESCRIPTION: This YAML snippet demonstrates subnet selection using multiple tag terms in Karpenter.  This configuration effectively creates an OR condition between different subnets based on their names.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v0.32/concepts/nodeclasses.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"spec:\\n  subnetSelectorTerms:\\n    - tags:\\n        Name: \\\"my-subnet-1\\\"\\n    - tags:\\n        Name: \\\"my-subnet-2\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Karpenter Node Creation\nDESCRIPTION: Commands to verify Karpenter controller logs and newly created nodes in the Kubernetes cluster\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.1/getting-started/migrating-from-cas/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f -n karpenter -c controller -l app.kubernetes.io/name=karpenter\n\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Example Log: Finding Provisionable Pods\nDESCRIPTION: This JSON log entry provides an example of Karpenter identifying pods that require provisioning.  It shows the log level, timestamp, message, commit hash, and a list of pods that Karpenter has identified as needing to be provisioned.  The \"duration\" field indicates the time taken to find these pods.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclaims.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"level\": \"INFO\",\n       \"time\": \"2024-06-22T02:24:16.114Z\",\n       \"message\": \"found provisionable pod(s)\",\n       \"commit\": \"490ef94\",\n       \"Pods\": \"default/inflate-66fb68585c-xvs86, default/inflate-66fb68585c-hpcdz, default/inflate-66fb68585c-8xztf,01234567adb205c7e default/inflate-66fb68585c-t29d8, default/inflate-66fb68585c-nxflz\",\n       \"duration\": \"100.761702ms\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Checking Kubelet Logs on Bottlerocket Nodes\nDESCRIPTION: Command to view kubelet service logs on Bottlerocket nodes using journalctl, which is essential for diagnosing node issues.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/troubleshooting.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -D /.bottlerocket/rootfs/var/log/journal -u kubelet.service\n```\n\n----------------------------------------\n\nTITLE: Excluding Zones Using Node Affinity\nDESCRIPTION: This YAML snippet modifies node affinity to exclude specific zones for pod scheduling using the 'NotIn' operator. This is useful for specifying zones where pods should not be scheduled. Dependencies include a Kubernetes cluster with Karpenter. Key parameters involve the 'operator' set to 'NotIn' and zone values. The result is pod scheduling limited to specified exclusion zones.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/concepts/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"In\"\n  values: [\"us-west-2a\", \"us-west-2b\"]\n- key: \"topology.kubernetes.io/zone\"\n  operator: \"NotIn\"\n  values: [\"us-west-2b\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Ubuntu EC2NodeClass Configuration in Karpenter\nDESCRIPTION: Example showing the conversion of a v1beta1 EC2NodeClass using Ubuntu AMI family to the v1 equivalent using AL2 AMI family with compatibility annotations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/v1-migration.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Original v1beta1 EC2NodeClass\nversion: karpenter.k8s.aws/v1beta1\nkind: EC2NodeClass\nspec:\n amiFamily: Ubuntu\n amiSelectorTerms:\n - id: ami-foo\n---\n# Conversion Webhook Output\nversion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n annotations:\n   compatibility.karpenter.k8s.aws/v1beta1-ubuntu: amiFamily,blockDeviceMappings\nspec:\n amiFamily: AL2\n amiSelectorTerms:\n - id: ami-foo\n blockDeviceMappings:\n - deviceName: '/dev/sda1'\n   rootVolume: true\n   ebs:\n     encrypted: true\n     volumeType: gp3\n     volumeSize: 20Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring TOML UserData for Bottlerocket in Karpenter\nDESCRIPTION: Example of TOML UserData for Bottlerocket, setting eviction thresholds and custom labels. These settings will be merged with Karpenter-generated configurations.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.2/concepts/nodeclasses.md#2025-04-16_snippet_33\n\nLANGUAGE: toml\nCODE:\n```\n[settings.kubernetes.eviction-hard]\n\"memory.available\" = \"12%\"\n[settings.kubernetes]\n\"unknown-setting\" = \"unknown\"\n[settings.kubernetes.node-labels]\n'field.controlled.by/karpenter' = 'will-be-overridden'\n```\n\n----------------------------------------\n\nTITLE: Disable Rebalance Draining in NTH\nDESCRIPTION: This setting disables draining nodes when a rebalance recommendation notice is received by NTH. This is a configuration option for Node Termination Handler (NTH) and used in IMDS mode.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/preview/troubleshooting.md#2025-04-16_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n\"enableRebalanceDraining: false\"\n```\n\n----------------------------------------\n\nTITLE: Installing Karpenter CRD with Helm\nDESCRIPTION: Command to upgrade or install the Karpenter CRD Helm chart in a specified namespace. The chart manages Custom Resource Definitions needed for Karpenter operation.\nSOURCE: https://github.com/aws/karpenter-provider-aws/blob/main/website/content/en/v1.0/upgrading/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKARPENTER_NAMESPACE=kube-system\nhelm upgrade --install karpenter-crd oci://public.ecr.aws/karpenter/karpenter-crd --version x.y.z --namespace \"${KARPENTER_NAMESPACE}\" --create-namespace\n```"
  }
]