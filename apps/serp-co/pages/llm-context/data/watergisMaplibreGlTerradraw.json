[
  {
    "owner": "watergis",
    "repo": "maplibre-gl-terradraw",
    "content": "TITLE: Setting up MaplibreMeasureControl with DEM tilesets - TypeScript\nDESCRIPTION: This code demonstrates how to set up a `MaplibreMeasureControl` to compute elevation directly from DEM tilesets. It shows two configurations: one using a default AWS Terrarium source and another disabling DEM tile based elevation computation by setting terrainSource to undefined. In the first example, elevation is computed on the `finish` event, while in the second elevation is computed on the `change` event.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndrawControl = new MaplibreMeasureControl({\n\tmodes: terradrawModes as unknown as MeasureControlMode[],\n\topen: isOpen,\n\tdistanceUnit: distanceUnit,\n\tdistancePrecision,\n\tareaPrecision,\n\tcomputeElevation: true,\n\t// terrainSource is not necessary to set if you want to get elevation from AWS\n\t// you can change it to your own DEM source\n\tterrainSource: {\n\t\turl: 'https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.png',\n\t\tencoding: 'terrarium',\n\t\ttileSize: 256,\n\t\tminzoom: 5,\n\t\tmaxzoom: 15,\n\t\ttms: false\n\t}\n});\nmap.addControl(drawControl, 'top-left');\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndrawControl = new MaplibreMeasureControl({\n\tmodes: terradrawModes as unknown as MeasureControlMode[],\n\topen: isOpen,\n\tdistanceUnit: distanceUnit,\n\tdistancePrecision,\n\tareaPrecision,\n\tcomputeElevation: true,\n\tterrainSource: undefined\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Configuring TerraDraw Modes (JS)\nDESCRIPTION: Illustrates how to configure drawing options for each TerraDraw mode, such as disabling dragging for polygons in select mode. Shows how to define custom options for select mode by creating a new `TerraDrawSelectMode` object. The configuration selectively updates the polygon settings.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({\n\t// only show polgyon, line and select mode.\n\tmodes: ['polygon', 'linestring', 'select'],\n\tmodeOptions: {\n\t\tselect: new TerraDrawSelectMode({\n\t\t\tflags: {\n\t\t\t\t// only update polygon settings for select mode.\n\t\t\t\t// default settings will be used for other geometry types\n\t\t\t\t// in this case, line uses default options of the plugin.\n\t\t\t\tpolygon: {\n\t\t\t\t\tfeature: {\n\t\t\t\t\t\tdraggable: false, // users cannot drag to move polygon\n\t\t\t\t\t\trotateable: true,\n\t\t\t\t\t\tscaleable: true,\n\t\t\t\t\t\tcoordinates: {\n\t\t\t\t\t\t\tmidpoints: false, // users cannot add a node on the middle of edge.\n\t\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\t\tdeletable: false // users cannot delete a node.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Using cleanStyle method with MaplibreTerradrawControl - TypeScript\nDESCRIPTION: This code demonstrates how to use the `cleanStyle` method of the `MaplibreTerradrawControl` to manipulate a maplibre style by either excluding or including TerraDraw-related layers and sources. It creates an instance of the control, retrieves the current map style, and then uses `cleanStyle` with different options to either exclude or include TerraDraw layers.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MaplibreTerradrawControl } from '@watergis/maplibre-gl-terradraw';\n\nconst drawControl = new MaplibreTerradrawControl();\nconst style = map.getStyle();\n\n// return a maplibre style after deleting terradraw related layers and sources\nconsole.log(drawControl.cleanStyle(style, { excludeTerraDrawLayers: true }));\n\n// return a maplibre style only with terradraw related layers and sources\nconsole.log(drawControl.cleanStyle(style, { onlyTerraDrawLayers: true }));\n\n// return a given maplibre style as original\nconsole.log(drawControl.cleanStyle(style));\n```\n\n----------------------------------------\n\nTITLE: Using cleanMaplibreStyle function - TypeScript\nDESCRIPTION: This code shows how to use the `cleanMaplibreStyle` function to remove TerraDraw-related layers and sources from a Maplibre style. It imports the function and related constants, then calls `cleanMaplibreStyle` with different source IDs to remove layers associated with either `MaplibreTerradrawControl` or `MaplibreMeasureControl`.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcleanMaplibreStyle,\n\tTERRADRAW_SOURCE_IDS,\n\tTERRADRAW_MEASURE_SOURCE_IDS\n} from '@watergis/maplibre-gl-terradraw';\n\n// delete MaplibreTerradrawControl layers\ncleanMaplibreStyle(map.getStyle, { excludeTerraDrawLayers: true }, TERRADRAW_SOURCE_IDS);\n\n// delete MaplibreMeasureControl layers\n// note. if you changed source IDs from default settings, this constant variable will not work.\ncleanMaplibreStyle(map.getStyle, { excludeTerraDrawLayers: true }, TERRADRAW_MEASURE_SOURCE_IDS);\n```\n\n----------------------------------------\n\nTITLE: Using roundFeatureCoordinates helper function - TypeScript\nDESCRIPTION: This code shows how to use the `roundFeatureCoordinates` helper function to round coordinates before adding features to TerraDraw, preventing potential invalid feature coordinate errors. It creates a `MaplibreTerraDrawControl` instance, gets the TerraDraw instance, and then uses `roundFeatureCoordinates` to process an array of GeoJSON features before adding them to TerraDraw.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerraDrawControl({\n\tadapterOptions: {\n\t\tcoordinatePrecision: 6\n\t}\n});\nmap.addControl(drawControl);\n\nmap.once('load', () => {\n\tconst features = []; // add your geojson features here\n\tconst draw = drawControl.getTerradrawInstance();\n\tdraw.addFeatures(roundFeatureCoordinates(features), 6);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with Delete-Selection (TS)\nDESCRIPTION: Demonstrates how to initialize the MaplibreTerradrawControl with the 'delete-selection' mode, allowing users to delete selected features.  The example showcases the configuration of modes, including the placement of 'delete-selection'. It includes the 'render' mode, 'select' mode, 'point' mode, and the 'delete' mode.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({\n\tmodes: [\n\t\t'render',\n\t\t'select',\n        'delete-selection', // place `delete-selection` after select mode. Or you can delete it if this feature is not needed.\n\t\t'point',\n\t\t'delete'\n\t],\n\topen: true\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Managing isExpanded Property and Events - TypeScript\nDESCRIPTION: This code shows how to manage the `isExpanded` property of the `MaplibreTerradrawControl` and subscribe to `expanded` and `collapsed` events.  It gets and sets the `isExpanded` property to control the tool's state, and attaches event listeners to log messages when the control expands or collapses.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl();\n\n// get the state of isExpanded\nconsole.log(drawControl.isExpanded);\n\n// expand tool\ndrawControl.isExpanded = true;\n\n// collapse tool\ndrawControl.isExpanded = false;\n\n// subscribe expanded/collapsed events\ndrawControl.on('expanded', () => {\n\tconsole.log('expanded');\n});\ndrawControl.on('collapsed', () => {\n\tconsole.log('collapsed');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Terra Draw Polygon Mode in Typescript\nDESCRIPTION: This code snippet demonstrates how to overwrite the default Terra Draw mode instances, specifically customizing the polygon control. It disables draggable option and node insertion/deletion on an edge of a polygon.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl(\n\t{\n\t\tmodes: ['polygon', 'select']\n\t},\n\t{\n\t\tselect: new TerraDrawSelectMode({\n\t\t\tflags: {\n\t\t\t\tpolygon: {\n\t\t\t\t\tfeature: {\n\t\t\t\t\t\tdraggable: false, // users cannot drag to move polygon\n\t\t\t\t\t\trotateable: true,\n\t\t\t\t\t\tscaleable: true,\n\t\t\t\t\t\tcoordinates: {\n\t\t\t\t\t\t\tmidpoints: false, // users cannot add a node on the middle of edge.\n\t\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\t\tdeletable: false // users cannot delete a node.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n);\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreMeasureControl (TS)\nDESCRIPTION: Demonstrates how to initialize the MaplibreMeasureControl with specific modes enabled, such as linestring, polygon, and delete. The `open` property is set to true to keep the control open by default.  The snippet uses specific string literals to define the modes.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreMeasureControl({\n\tmodes: [\n\t\t'linestring',\n\t\t'polygon',\n\t\t'rectangle',\n\t\t'angled-rectangle',\n\t\t'circle',\n\t\t'sector',\n\t\t'sensor',\n\t\t'freehand',\n\t\t'delete'\n\t],\n\topen: true\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with Render Mode (TS)\nDESCRIPTION: Demonstrates how to initialize the MaplibreTerradrawControl with or without the 'render' mode, affecting the tool's default open state. Includes example of keeping the tool always open. Includes a comment explaining what to do if 'render' is removed.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({\n\tmodes: [\n\t\t'render', // delete this if you want the tool to be always opened.\n\t\t'select',\n\t\t'point'\n\t],\n\topen: true // if you remove 'render' mode, make sure setting open as true.\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing Maplibre GL Map\nDESCRIPTION: This JavaScript snippet initializes a Maplibre GL map and sets its initial configuration.  It creates a new Maplibre GL map instance, setting the container ID, style URL, center coordinates, and zoom level. The map is then ready to be used with other Maplibre GL features or external libraries.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/static/assets/maplibre-cdn-example.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new maplibregl.Map({\n\t\t\t\tcontainer: 'map',\n\t\t\t\tstyle: 'https://demotiles.maplibre.org/style.json',\n\t\t\t\tcenter: [0, 0],\n\t\t\t\tzoom: 1\n\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Setting fontGlyphs property in MaplibreMeasureControl - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the `fontGlyphs` property of the `MaplibreMeasureControl` to customize the text font for measuring layers. It creates a new `MaplibreMeasureControl` instance, sets the `fontGlyphs` property to an array containing the desired font(s), and then adds the control to the map.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst drawControl = new MaplibreMeasureControl();\ndrawControl.fontGlyphs = ['Open Sans Italic'];\nmap.addControl(drawControl);\n```\n\n----------------------------------------\n\nTITLE: Adding TerraDraw Control to Maplibre GL\nDESCRIPTION: This JavaScript snippet adds the TerraDraw control to a Maplibre GL map instance. It instantiates the MaplibreTerradrawControl and then adds it to the map using `map.addControl`, positioning it in the top-left corner. The `modes` and `open` properties allow customization of the control's behavior and initial state.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/static/assets/maplibre-cdn-example.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst draw = new MaplibreTerradrawControl.MaplibreTerradrawControl({\n\t\t\t\tmodes: [{modes}],\n\t\t\t\topen: {open}\n\t\t\t});\n\t\t\tmap.addControl(draw, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Adding Maplibre Terradraw Control\nDESCRIPTION: This snippet creates a MaplibreTerradrawControl instance with specified modes and open state, and adds it to the Maplibre GL map at the top-left position. It also imports the necessary CSS for the control.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/static/assets/maplibre-npm-example.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { MaplibreTerradrawControl } from '@watergis/maplibre-gl-terradraw'\nimport '@watergis/maplibre-gl-terradraw/dist/maplibre-gl-terradraw.css'\n\nconst draw = new MaplibreTerradrawControl({\n    modes: [{modes}],\n    open: {open},\n});\nmap.addControl(draw, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with Delete Mode (TS)\nDESCRIPTION: Shows how to initialize MaplibreTerradrawControl with the 'delete' mode to display the delete button in a specified order.  It configures the modes array to include 'delete'. The code controls the visibility of the delete button.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({\n\tmodes: [\n\t\t'render',\n\t\t'select',\n\t\t'point',\n\t\t'delete' // delete mode must be specified to show delete button in the tool\n\t],\n\topen: true\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with Adapter Options (TS)\nDESCRIPTION: Illustrates how to initialize the MaplibreTerradrawControl with custom adapter options, specifically modifying the coordinate precision.  It showcases how to pass options to the underlying TerraDraw adapter through the plugin constructor. The code modifies the `coordinatePrecision` to 9.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl.MaplibreTerradrawControl({\n\tadapterOptions: {\n\t\tcoordinatePrecision: 9\n\t}\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with CDN (JS)\nDESCRIPTION: Illustrates the change required when initializing MaplibreTerradrawControl from a CDN. It specifies that the library name must now be used to access the control's constructor. The initialization process is adapted to work with a CDN-loaded library.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n- const draw = new MaplibreTerradrawControl();\n+ const draw = new MaplibreTerradrawControl.MaplibreTerradrawControl();\n```\n\n----------------------------------------\n\nTITLE: Setting Terra Draw Mode Order in Typescript\nDESCRIPTION: This code shows how to change the order of Terra Draw modes on the plugin and how to remove unnecessary modes when initializing the plugin. It demonstrates adding only the 'point' and 'select' controls.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({\n\tmodes: ['point', 'select']\n});\nmap.addControl(drawControl, 'top-left');\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt snippet disallows all user agents from accessing any part of the website. The `user-agent: *` line indicates that this rule applies to all user agents, and the `disallow: /` line specifies that no part of the site is allowed to be crawled or indexed.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/static/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nuser-agent: *\ndisallow: /\n```\n\n----------------------------------------\n\nTITLE: Initializing Maplibre GL Map\nDESCRIPTION: This snippet initializes a Maplibre GL map instance with a specified container, style, center, and zoom level. It also imports the necessary CSS for Maplibre GL.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/static/assets/maplibre-npm-example.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Map } from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst map = new Map({\n\t\t\tcontainer: 'map',\n\t\t\tstyle: '{style}',\n\t\t\tcenter: [0, 0],\n\t\t\tzoom: 1,\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This snippet clones the maplibre-gl-terradraw repository, navigates into the project directory, and installs the necessary dependencies using pnpm. It also installs lefthook for git hook management.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:watergis/maplibre-gl-terradraw.git\ncd maplibre-gl-terradraw\npnpm i\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm lefthook install\n```\n\n----------------------------------------\n\nTITLE: Initializing MaplibreTerradrawControl with open Option in Javascript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize the MaplibreTerradrawControl with the `open` option set to `true`.  This will expand the editor controller by default when the control is created.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst drawControl = new MaplibreTerradrawControl({ open: true });\n```\n\n----------------------------------------\n\nTITLE: Importing MaplibreTerradrawControl (TS)\nDESCRIPTION: Shows the updated import statement for MaplibreTerradrawControl after a refactoring.  It highlights the change from a default import to a named import.  The example showcases the specific import syntax required.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n- import MaplibreTerradrawControl from '$lib/index.js';\n+ import { MaplibreTerradrawControl } from '$lib/index.js';\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: This snippet builds the project, generating output files for both the package and the demo website. The package files are placed in the `package` folder, and the demo website is exported to the `dist` folder.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Generating and Serving Typedoc Documentation\nDESCRIPTION: This snippet generates Typedoc documentation and serves it locally. The documentation is updated under the `/docs` folder, and can be viewed by accessing port 3000.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm typedoc\npnpm typedoc:serve # open port 3000\n```\n\n----------------------------------------\n\nTITLE: Creating Release Notes with Changeset\nDESCRIPTION: This snippet uses changeset to create release notes.  It is used as part of the release process. Package is released when the pull request is merged to main.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright and Running Tests\nDESCRIPTION: This snippet installs the Playwright browser with dependencies and executes the test scripts. Playwright is used for end-to-end testing of the application.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec playwright install --with-deps\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing maplibre-gl-terradraw using npm\nDESCRIPTION: This command installs the maplibre-gl-terradraw package as a development dependency using npm.  This allows the drawing tools to be added to a MapLibre map.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @watergis/maplibre-gl-terradraw\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: This snippet starts the local development server using pnpm, allowing developers to test and preview their changes in real-time.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Graph\nDESCRIPTION: This snippet updates the dependency graph using `depcruise`. It requires graphviz to be installed.\nSOURCE: https://github.com/watergis/maplibre-gl-terradraw/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm depcruise\n```"
  }
]