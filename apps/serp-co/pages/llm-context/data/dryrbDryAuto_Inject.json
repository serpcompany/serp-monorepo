[
  {
    "owner": "dry-rb",
    "repo": "dry-auto_inject",
    "content": "TITLE: Setting up a container and using dry-auto_inject in Ruby\nDESCRIPTION: This example demonstrates how to set up a dry-container, create an auto-injection mixin, and use it in a class to inject dependencies. It shows the entire workflow from container setup to dependency usage in a CreateUser operation class.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/index.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Set up a container (using dry-container here)\nclass MyContainer\n  extend Dry::Container::Mixin\n\n  register \"users_repository\" do\n    UsersRepository.new\n  end\n\n  register \"operations.create_user\" do\n    CreateUser.new\n  end\nend\n\n# Set up your auto-injection mixin\nImport = Dry::AutoInject(MyContainer)\n\nclass CreateUser\n  include Import[\"users_repository\"]\n\n  def call(user_attrs)\n    users_repository.create(user_attrs)\n  end\nend\n\ncreate_user = MyContainer[\"operations.create_user\"]\ncreate_user.call(name: \"Jane\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with dry-auto_inject in Ruby\nDESCRIPTION: This snippet shows how to specify dependencies using dry-auto_inject. It creates an Import module from a container and then includes it in a class to inject the 'users_repository' dependency.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/how-does-it-work.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nImport = Dry::AutoInject(MyContainer)\n\nclass MyClass\n  include Import[\"users_repository\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency Injector with Dry::AutoInject in Ruby\nDESCRIPTION: Creates an injector by passing a container to Dry::AutoInject. The container must respond to the #[] interface to allow fetching registered dependencies.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nImport = Dry::AutoInject(my_container)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Injector with Keyword and Positional Strategies in Ruby\nDESCRIPTION: Demonstrates how to create dependency injectors with both the default keyword arguments strategy and the positional arguments strategy using Dry::AutoInject.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/injection-strategies.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Default keyword arguments strategy\nImport = Dry::AutoInject(MyContainer)\n\n# Positional arguments strategy\nImport = Dry::AutoInject(MyContainer).args\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Implementation of dry-auto_inject in Ruby\nDESCRIPTION: This snippet demonstrates what the previous dependency injection code would look like if implemented manually. It shows how the class constructor resolves dependencies from the container and how initialize assigns them to instance variables.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/how-does-it-work.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  attr_reader :users_repository\n\n  def self.new(**args)\n    deps = {\n      users_repository: args[:users_repository] || MyContainer[\"users_repository\"]\n    }\n\n    super(**deps)\n  end\n\n  def initialize(users_repository: nil)\n    super()\n\n    @users_repository = users_repository\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manually Overriding Dependencies in Dry::AutoInject\nDESCRIPTION: Demonstrates how to override container dependencies by passing keyword arguments to the initializer. This is particularly useful for testing with doubles or mocks.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[\"repositories.users\"]\nend\n\nmy_obj = MyClass.new(users: different_repo)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in a Class Using Dry::AutoInject in Ruby\nDESCRIPTION: Demonstrates how to mix in the injector and specify dependencies by their container identifiers. This makes the dependencies available in the class.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[\"users_repository\", \"deliver_welcome_email\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Injected Dependencies in Ruby\nDESCRIPTION: Shows how injected dependencies become available as readers with matching names in the class. Each dependency can be accessed directly by its name.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[\"users_repository\"]\n\n  def call\n    puts users_repository.inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Objects with Auto-Resolved Dependencies in Dry::AutoInject\nDESCRIPTION: Shows how objects can be initialized without arguments, with all dependencies automatically resolved from the container.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmy_obj = MyClass.new\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyword Arguments Strategy in Ruby\nDESCRIPTION: Demonstrates the default keyword arguments strategy where dependencies are passed to the initializer using keyword arguments. Shows how to include the injector and initialize a class with specific dependencies.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/injection-strategies.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nImport = Dry::AutoInject(MyContainer)\n\nclass MyClass\n include Import[\"users_repository\"]\nend\n\nMyClass.new(users_repository: my_repo)\n```\n\n----------------------------------------\n\nTITLE: Chaining Injection Strategies in Different Classes in Ruby\nDESCRIPTION: Shows how to set up a standard injector and then use different strategies in particular classes by chaining from the existing injector, allowing flexibility in dependency injection approaches.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/injection-strategies.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Set up a standard strategy for your app\nImport = Dry::AutoInject(MyContainer)\n\nclass MyClass\n # Use the standard strategy here\n include Import[\"users_repository\"]\nend\n\nclass SpecialClass\n # Use a different strategy in this particular class\n include Import.args[\"users_repository\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Mixing Inferred Names and Aliases in Dry::AutoInject\nDESCRIPTION: Demonstrates how to combine both inferred dependency names and custom aliases in the same import statement. Aliases should be provided last in the list.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[\n    \"repositories.users\",\n    deliver_email: \"operations.deliver_welcome_email\",\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Positional Arguments Strategy in Ruby\nDESCRIPTION: Demonstrates the positional arguments strategy where dependencies are passed to the initializer using standard positional arguments rather than named parameters.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/injection-strategies.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nImport = Dry::AutoInject(MyContainer).args\n\nclass MyClass\n include Import[\"users_repository\"]\nend\n\nMyClass.new(my_repo)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Aliases for Dependencies in Dry::AutoInject\nDESCRIPTION: Shows how to provide custom names for dependencies using a hash syntax. This allows giving dependencies more convenient or descriptive names within the class.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[users_repo: \"repositories.users\"]\n\n  def call\n    puts users_repo.inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Hash Strategy in Ruby\nDESCRIPTION: Shows how to use the options hash strategy where dependencies are passed to the initializer as a single hash. This strategy is selected by chaining .hash to the injector.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/injection-strategies.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nImport = Dry::AutoInject(MyContainer).hash\n\nclass MyClass\n include Import[\"users_repository\"]\nend\n\n# This can also take `{users_repository: my_repo}`\nMyClass.new(users_repository: my_repo)\n```\n\n----------------------------------------\n\nTITLE: Handling Container Identifiers with Delimiters in Dry::AutoInject\nDESCRIPTION: Demonstrates how dependency names with delimiters like dots are handled. The final part of the name after the delimiter becomes the reader method name.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/docsite/source/basic-usage.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyClass\n  include Import[\"repositories.users\"]\n\n  def call\n    puts users.inspect\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Dry::AutoInject with Container in Ruby\nDESCRIPTION: Shows the changed interface for initializing Dry::AutoInject with a container in version 0.1.0. The new syntax is more direct compared to the previous block-based approach.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nDry::AutoInject.new { container(some_container) }\n```\n\n----------------------------------------\n\nTITLE: Displaying Gem Version Badge in Markdown\nDESCRIPTION: Shows how to include a badge displaying the current version of the dry-auto_inject gem from RubyGems.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Gem Version](https://badge.fury.io/rb/dry-auto_inject.svg)][gem]\n```\n\n----------------------------------------\n\nTITLE: Displaying CI Status Badge in Markdown\nDESCRIPTION: Demonstrates how to include a badge showing the current CI status of the dry-auto_inject project from GitHub Actions.\nSOURCE: https://github.com/dry-rb/dry-auto_inject/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![CI Status](https://github.com/dry-rb/dry-auto_inject/workflows/CI/badge.svg)][actions]\n```"
  }
]