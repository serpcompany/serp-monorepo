[
  {
    "owner": "dynamic-labs",
    "repo": "dynamic-global-wallet-example",
    "content": "TITLE: Dynamic Global Wallet Integration in TypeScript\nDESCRIPTION: Basic integration code showing how to import Dynamic Global Wallet EIP-6963 and Solana Standard modules in a TypeScript project.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"<your-package-name>/eip6963\";\nimport \"<your-package-name>/solana-standard\";\n```\n\n----------------------------------------\n\nTITLE: Core Package Structure\nDESCRIPTION: Core package file structure showing the location of main configuration files for Dynamic Global Wallet.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackages/dynamic-global-wallet/package.json\n\npackages/dynamic-global-wallet/src/lib/config.ts\n```\n\n----------------------------------------\n\nTITLE: Importing EVM Wallet in JavaScript\nDESCRIPTION: Code snippet for importing the EVM wallet implementation in a JavaScript or TypeScript application.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"<wallet-package-name>/eip6963\";\n```\n\n----------------------------------------\n\nTITLE: Importing Solana Wallet in JavaScript\nDESCRIPTION: Code snippet for importing the Solana wallet implementation in a JavaScript or TypeScript application.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"<wallet-package-name>/solana-standard\";\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the Wallet Package\nDESCRIPTION: Command to build the wallet package for testing or distribution.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Distribution Package\nDESCRIPTION: Command to create a distributable .tgz package file of the wallet for local testing.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Build Dynamic Global Wallet Package\nDESCRIPTION: Command to build the Dynamic Global Wallet package.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build-dynamic-global-wallet\n```\n\n----------------------------------------\n\nTITLE: Publishing the Wallet Package to NPM\nDESCRIPTION: Command to publish the wallet package to the npm registry for public distribution.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all required dependencies for the wallet package project using npm.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version with NPM\nDESCRIPTION: Commands for incrementing the package version number using npm's semantic versioning support, with options for different types of updates.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm version patch  # for bug fixes\n# or\nnpm version minor  # for new features\n# or\nnpm version major  # for breaking changes\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Project with Dynamic App\nDESCRIPTION: Command to initialize a new test project using the create-dynamic-app package, which will be used to test the wallet integration.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-dynamic-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing the Wallet Package in a Test Project\nDESCRIPTION: Command to install the locally packed wallet package into a test project for integration testing.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install /path/to/your-wallet-package-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Example\nDESCRIPTION: Command to run the Next.js implementation example.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dynamic-nextjs\n```\n\n----------------------------------------\n\nTITLE: Run Vite Example\nDESCRIPTION: Command to run the Vite implementation example.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dynamic-vite\n```\n\n----------------------------------------\n\nTITLE: Run RainbowKit Example\nDESCRIPTION: Command to run the RainbowKit integration example.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm rainbowkit-vite\n```\n\n----------------------------------------\n\nTITLE: Run Privy Example\nDESCRIPTION: Command to run the Privy integration example.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm privy-vite\n```\n\n----------------------------------------\n\nTITLE: Run ConnectKit Example\nDESCRIPTION: Command to run the ConnectKit integration example.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm connectkit-vite\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/dynamic-nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions property in the ESLint configuration for a TypeScript project using Vite. It specifies the project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/connectkit-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin for TypeScript in Vite\nDESCRIPTION: This snippet demonstrates how to configure ESLint with the React plugin for a TypeScript project using Vite. It includes setting the React version, adding the plugin, and enabling recommended rules.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/connectkit-vite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration for enabling type-aware lint rules in ESLint by setting up parser options with TypeScript configuration files.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/dynamic-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin\nDESCRIPTION: Setup for integrating React-specific ESLint rules by importing and configuring the eslint-plugin-react with recommended settings and JSX runtime rules.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/dynamic-vite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration for enabling type-aware lint rules in ESLint by setting up parser options with TypeScript configuration files.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/privy-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up ESLint with React Plugin\nDESCRIPTION: Configuration for integrating React-specific ESLint rules by importing and configuring the eslint-plugin-react with recommended settings.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/privy-vite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite React Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions property in the ESLint configuration for a TypeScript React project using Vite. It specifies the project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/rainbowkit-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin for TypeScript Vite Project\nDESCRIPTION: This snippet demonstrates how to set up ESLint configuration with the React plugin for a TypeScript project using Vite. It includes setting the React version, adding the React plugin, and enabling recommended rules.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/examples/rainbowkit-vite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Bash\nDESCRIPTION: Commands for cloning the repository and navigating to the project folder. These are the first steps to set up the wallet package development environment.\nSOURCE: https://github.com/dynamic-labs/dynamic-global-wallet-example/blob/main/packages/dynamic-global-wallet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd <repository-folder>\n```"
  }
]