[
  {
    "owner": "pollinations",
    "repo": "pollinations",
    "content": "TITLE: Generating Images with Python Requests\nDESCRIPTION: Python implementation for generating images using the Pollinations.AI API with the requests library. Demonstrates URL encoding, parameter handling, response processing, and error handling.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport urllib.parse\n\nprompt = \"A beautiful sunset over the ocean\"\nparams = {\n    \"width\": 1280,\n    \"height\": 720,\n    \"seed\": 42,\n    \"model\": \"flux\",\n    # \"nologo\": \"true\", # Optional\n    # \"referrer\": \"MyPythonApp\" # Optional\n}\nencoded_prompt = urllib.parse.quote(prompt)\nurl = f\"https://image.pollinations.ai/prompt/{encoded_prompt}\"\n\ntry:\n    response = requests.get(url, params=params, timeout=300) # Increased timeout for image generation\n    response.raise_for_status() # Raise an exception for bad status codes\n\n    with open('generated_image.jpg', 'wb') as f:\n        f.write(response.content)\n    print(\"Image saved as generated_image.jpg\")\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error fetching image: {e}\")\n    # Consider checking response.text for error messages from the API\n    # if response is not None: print(response.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Interface with usePollinationsChat Hook\nDESCRIPTION: Example React component implementing a chat interface using the usePollinationsChat hook with message history management and user input handling.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { usePollinationsChat } from '@pollinations/react';\n\nconst ChatComponent = () => {\n  const [input, setInput] = useState('');\n  const { sendUserMessage, messages } = usePollinationsChat([\n    { role: \"system\", content: \"You are a helpful assistant\" }\n  ], { \n    seed: 42, \n    jsonMode: false,\n    model: 'mistral'\n  });\n\n  const handleSend = () => {\n    sendUserMessage(input);\n    setInput('');\n  };\n\n  return (\n    <div>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}><strong>{msg.role}:</strong> {msg.content}</p>\n        ))}\n      </div>\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatComponent;\n```\n\n----------------------------------------\n\nTITLE: Listing Available Image Models with Python\nDESCRIPTION: Python implementation to retrieve and display the list of available image generation models from the Pollinations.AI API, with error handling.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://image.pollinations.ai/models\"\n\ntry:\n    response = requests.get(url)\n    response.raise_for_status()\n    models = response.json()\n    print(\"Available Image Models:\")\n    for model in models:\n        print(f\"- {model}\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error fetching models: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Passing Function Definitions to OpenAI Client\nDESCRIPTION: Shows how to pass function definitions to the client when making API calls, including message structure and options configuration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = [\n  { role: 'user', content: 'What\\'s the weather like in Paris?' }\n];\n\nconst options = {\n  tools: weatherTools,\n  tool_choice: 'auto'  // Let the model decide when to call the function\n};\n\nconst response = await client(messages, options);\n```\n\n----------------------------------------\n\nTITLE: Generating Images with JavaScript Fetch API\nDESCRIPTION: Browser-based JavaScript implementation for generating images using the Pollinations.AI API. Features URL encoding, parameter handling, response processing with Blob handling, and dynamic image display.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchImage(prompt, params = {}) {\n  const defaultParams = {\n    // width: 1024, height: 1024 // Defaults are handled by API\n  };\n  const queryParams = new URLSearchParams({ ...defaultParams, ...params });\n  const encodedPrompt = encodeURIComponent(prompt);\n  const url = `https://image.pollinations.ai/prompt/${encodedPrompt}?${queryParams.toString()}`;\n\n  console.log(\"Fetching image from:\", url);\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      const errorText = await response.text(); // Get error details if possible\n      throw new Error(\n        `HTTP error! status: ${response.status}, message: ${errorText}`\n      );\n    }\n    const imageBlob = await response.blob();\n    const imageUrl = URL.createObjectURL(imageBlob);\n\n    // Example: Display the image\n    const img = document.createElement(\"img\");\n    img.src = imageUrl;\n    img.alt = prompt;\n    document.body.appendChild(img); // Append to your desired element\n    console.log(\"Image fetched and displayed.\");\n  } catch (error) {\n    console.error(\"Error fetching image:\", error);\n  }\n}\n\n// --- Usage ---\nfetchImage(\"A beautiful sunset over the ocean\", {\n  width: 1280,\n  height: 720,\n  seed: 42,\n  model: \"flux\",\n  // nologo: true // Optional\n});\n\n// Just prompt\n// fetchImage(\"Cyberpunk city raining\");\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Completion with Python and SSE\nDESCRIPTION: Python implementation using the requests library and sseclient-py to handle Server-Sent Events. This example creates a streaming connection to the API, processes chunks as they arrive, and handles the streamed response incrementally.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\nimport sseclient # pip install sseclient-py\n\nurl = \"https://text.pollinations.ai/openai\"\npayload = {\n    \"model\": \"openai\",\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"Tell me a story that unfolds slowly.\"}\n    ],\n    \"stream\": True\n}\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"text/event-stream\"\n}\n\ntry:\n    response = requests.post(url, headers=headers, json=payload, stream=True)\n    response.raise_for_status()\n\n    client = sseclient.SSEClient(response)\n    full_response = \"\"\n    print(\"Streaming response:\")\n    for event in client.events():\n        if event.data:\n            try:\n                # Handle potential '[DONE]' marker\n                if event.data.strip() == '[DONE]':\n                     print(\"\\nStream finished.\")\n                     break\n                chunk = json.loads(event.data)\n                content = chunk.get('choices', [{}])[0].get('delta', {}).get('content')\n                if content:\n                    print(content, end='', flush=True)\n                    full_response += content\n            except json.JSONDecodeError:\n                 print(f\"\\nReceived non-JSON data (or marker other than [DONE]): {event.data}\")\n\n    print(\"\\n--- End of Stream ---\")\n    # print(\"Full streamed response:\", full_response)\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"\\nError during streaming request: {e}\")\nexcept Exception as e:\n    print(f\"\\nError processing stream: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Text Generation API Integration with JavaScript\nDESCRIPTION: Browser-based JavaScript implementation using fetch API to interact with the Pollinations.ai text generation endpoint. Includes parameter handling, error management, and response processing.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchText(prompt, params = {}) {\n  const queryParams = new URLSearchParams(params);\n  const encodedPrompt = encodeURIComponent(prompt);\n  const url = `https://text.pollinations.ai/${encodedPrompt}?${queryParams.toString()}`;\n\n  console.log(\"Fetching text from:\", url);\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const responseText = await response.text();\n\n    if (params.json === \"true\" || params.json === true) {\n      try {\n        const data = JSON.parse(responseText);\n        console.log(\"Response (JSON parsed):\", data);\n        // Process JSON data\n      } catch (e) {\n        console.error(\"Failed to parse JSON response:\", e);\n        console.log(\"Raw response:\", responseText);\n      }\n    } else {\n      console.log(\"Response (Plain Text):\", responseText);\n      // Display plain text\n      // document.getElementById('output').textContent = responseText;\n    }\n  } catch (error) {\n    console.error(\"Error fetching text:\", error);\n  }\n}\n\n// --- Usage ---\nfetchText(\"What are the main benefits of exercise?\");\n\nfetchText(\"List 3 popular dog breeds\", {\n  model: \"mistral\",\n  json: \"true\", // Get result as JSON string\n});\n\n// Note: For stream=true, see dedicated streaming example under POST section\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Completion with JavaScript Fetch API\nDESCRIPTION: Browser-based JavaScript implementation using the fetch API with ReadableStream to handle streaming responses. This example creates a reusable function that processes chunks with a callback function and demonstrates handling the SSE format from the API.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nasync function streamChatCompletion(messages, options = {}, onChunkReceived) {\n  const url = \"https://text.pollinations.ai/openai\";\n  const payload = {\n    model: options.model || \"openai\",\n    messages: messages,\n    seed: options.seed,\n    stream: true, // Enable streaming\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/event-stream\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `HTTP error! status: ${response.status}, message: ${errorText}`\n      );\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = \"\";\n\n    console.log(\"Starting stream...\");\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        console.log(\"Stream finished.\");\n        break;\n      }\n\n      buffer += decoder.decode(value, { stream: true });\n\n      // Process buffer line by line (SSE format: data: {...}\\n\\n)\n      const lines = buffer.split(\"\\n\\n\");\n      buffer = lines.pop(); // Keep the potentially incomplete last line\n\n      for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n          const dataStr = line.substring(6).trim();\n          if (dataStr === \"[DONE]\") {\n            console.log(\"Received [DONE] marker.\");\n            continue; // Or handle end of stream signal\n          }\n          try {\n            const chunk = JSON.parse(dataStr);\n            const content = chunk?.choices?.[0]?.delta?.content;\n            if (content && onChunkReceived) {\n              onChunkReceived(content); // Callback to handle the text chunk\n            }\n          } catch (e) {\n            console.error(\"Failed to parse stream chunk:\", dataStr, e);\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"Error during streaming chat completion:\", error);\n  }\n}\n\n// --- Usage ---\nconst streamMessages = [\n  { role: \"user\", content: \"Write a detailed explanation of photosynthesis.\" },\n];\n\n// Example callback to display chunks in a div\nconst outputDiv = document.createElement(\"div\");\ndocument.body.appendChild(outputDiv);\nfunction handleChunk(textChunk) {\n  console.log(\"Chunk:\", textChunk);\n  outputDiv.textContent += textChunk;\n}\n\nstreamChatCompletion(streamMessages, { model: \"openai\" }, handleChunk);\n```\n\n----------------------------------------\n\nTITLE: Downloading Generated Image with Python\nDESCRIPTION: Python function to download an image generated by Pollinations.AI. The function creates a request to the Pollinations API with a specified prompt and saves the resulting image as a file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/README-pollinations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\ndef download_image(prompt):\n    url = f\"https://pollinations.ai/p/{prompt}\"\n    response = requests.get(url)\n    with open('generated_image.jpg', 'wb') as file:\n        file.write(response.content)\n    print('Image downloaded!')\n\ndownload_image(\"conceptual_isometric_world_of_pollinations_ai_surreal_hyperrealistic_digital_garden\")\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Completion Using cURL\nDESCRIPTION: Example of making a basic chat completion request using cURL, demonstrating how to structure the request with system and user messages.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://text.pollinations.ai/openai \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"openai\",\n    \"messages\": [\n      {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n      {\"role\": \"user\", \"content\": \"What is the weather like in Paris today?\"}\n    ],\n    \"seed\": 42\n  }'\n```\n\n----------------------------------------\n\nTITLE: Handling Function Call Responses\nDESCRIPTION: Implementation of response handling logic when the model calls a function, including parsing arguments and processing weather data.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (response.choices[0].message.tool_calls) {\n  const toolCalls = response.choices[0].message.tool_calls;\n  \n  for (const toolCall of toolCalls) {\n    if (toolCall.function.name === 'get_weather') {\n      const args = JSON.parse(toolCall.function.arguments);\n      const weatherData = await getWeatherData(args.location);\n      \n      // Add the function result to messages\n      messages.push(response.choices[0].message);\n      messages.push({\n        tool_call_id: toolCall.id,\n        role: 'tool',\n        name: toolCall.function.name,\n        content: weatherData\n      });\n      \n      // Make another request with the function result\n      const finalResponse = await client(messages, options);\n      return finalResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Hooks Integration with Pollinations.AI\nDESCRIPTION: Example React component demonstrating the use of Pollinations.AI React hooks for generating images, text, and audio. Shows how to integrate usePollinationsImage, usePollinationsText, and usePollinationsAudio hooks into a React application.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsImage, usePollinationsText, usePollinationsAudio } from '@pollinations/react';\n\nfunction PollinationsDemo() {\n  const imagePrompt = \"A beautiful sunset over the ocean\";\n  const textPrompt = \"Describe a beautiful sunset over the ocean\";\n  const audioPrompt = \"Welcome to Pollinations.AI\";\n\n  const imageUrl = usePollinationsImage(imagePrompt, { width: 800, height: 600 });\n  const text = usePollinationsText(textPrompt);\n  const audioUrl = usePollinationsAudio(audioPrompt, { voice: \"nova\" });\n\n  return (\n    <div>\n      <h1>Pollinations.AI Demo</h1>\n\n      <h2>Generated Image</h2>\n      {imageUrl ? (\n        <img src={imageUrl} alt={imagePrompt} style={{ maxWidth: '100%' }} />\n      ) : (\n        <p>Loading image...</p>\n      )}\n\n      <h2>Generated Text</h2>\n      {text ? (\n        <p>{text}</p>\n      ) : (\n        <p>Loading text...</p>\n      )}\n\n      <h2>Generated Audio</h2>\n      {audioUrl ? (\n        <audio controls src={audioUrl} />\n      ) : (\n        <p>Loading audio...</p>\n      )}\n    </div>\n  );\n}\n\nexport default PollinationsDemo;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Generation with usePollinationsText Hook\nDESCRIPTION: Example React component demonstrating text generation using the usePollinationsText hook to create a haiku with customizable options like seed, model and system prompt.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsText } from '@pollinations/react';\n\nconst HaikuComponent = () => {\n  const text = usePollinationsText('Write a short haiku about Pollinations.AI', { \n    seed: 42,\n    model: 'mistral',\n    systemPrompt: 'You are a poetic AI assistant.'\n  });\n  \n  return (\n    <div>\n      {text ? <p>{text}</p> : <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default HaikuComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Generation with React-Markdown\nDESCRIPTION: Example React component that generates and renders markdown content using usePollinationsText hook combined with react-markdown library.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsText } from '@pollinations/react';\nimport ReactMarkdown from 'react-markdown';\n\nconst MarkdownExample = () => {\n  const markdownContent = usePollinationsText('Create a guide on pollination techniques', {\n    seed: 42,\n    model: 'openai',\n    systemPrompt: 'You are a technical writer specializing in biology. Responding always in Markdown format.'\n  });\n\n  return (\n    <div>\n      {markdownContent ? (\n        <ReactMarkdown>{markdownContent}</ReactMarkdown>\n      ) : (\n        <p>Loading markdown content...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MarkdownExample;\n```\n\n----------------------------------------\n\nTITLE: Testing OpenAI Function Calling with Pollinations.AI\nDESCRIPTION: Demonstrates how to use OpenAI's function calling feature to generate images through Pollinations.AI API. The code loads metadata standards, makes API calls to OpenAI, and handles image generation using the Pollinations.AI service.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { OpenAI } = require('openai');\nconst fs = require('fs');\nconst axios = require('axios');\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Load the metadata standards\nconst llmsTxt = fs.readFileSync('llms.txt', 'utf8');\nconst agentsJson = JSON.parse(fs.readFileSync('agents.json', 'utf8'));\nconst mcpJson = JSON.parse(fs.readFileSync('mcp.json', 'utf8'));\nconst arazzoJson = JSON.parse(fs.readFileSync('arazzo.json', 'utf8'));\n\nasync function testWithLLM() {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are an AI agent that needs to use Pollinations.AI APIs. Use the metadata provided to understand how to interact with the service.\"\n      },\n      {\n        role: \"user\",\n        content: `Here are the metadata standards for Pollinations.AI:\\n\\n        llms.txt:\\n        ${llmsTxt}\\n\\n        agents.json (summary):\\n        ${JSON.stringify(agentsJson.metadata)}\\n\\n        mcp.json (summary):\\n        ${JSON.stringify({\n          name: mcpJson.name,\n          description: mcpJson.description,\n          services: mcpJson.services.map(s => s.name),\n          models: Object.keys(mcpJson.models)\n        })}\\n\\n        Based on this information, how would you generate an image of a sunset over the ocean?`\n      }\n    ],\n    tools: [\n      {\n        type: \"function\",\n        function: {\n          name: \"generate_image\",\n          description: \"Generate an image using Pollinations.AI API\",\n          parameters: {\n            type: \"object\",\n            properties: {\n              prompt: {\n                type: \"string\",\n                description: \"The text description of the image to generate\"\n              },\n              model: {\n                type: \"string\",\n                description: \"The model to use for generation\"\n              },\n              width: {\n                type: \"integer\",\n                description: \"Width of the generated image\"\n              },\n              height: {\n                type: \"integer\",\n                description: \"Height of the generated image\"\n              }\n            },\n            required: [\"prompt\"]\n          }\n        }\n      }\n    ],\n    tool_choice: \"auto\"\n  });\n\n  console.log(\"LLM Response:\", response.choices[0].message);\n\n  // If the LLM chose to use the function\n  if (response.choices[0].message.tool_calls) {\n    const toolCall = response.choices[0].message.tool_calls[0];\n    const functionArgs = JSON.parse(toolCall.function.arguments);\n\n    console.log(\"Function called with arguments:\", functionArgs);\n\n    // Actually make the request to Pollinations.AI\n    const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(functionArgs.prompt)}`;\n    const queryParams = new URLSearchParams();\n\n    if (functionArgs.model) queryParams.append('model', functionArgs.model);\n    if (functionArgs.width) queryParams.append('width', functionArgs.width);\n    if (functionArgs.height) queryParams.append('height', functionArgs.height);\n\n    const fullUrl = `${imageUrl}?${queryParams.toString()}`;\n    console.log(\"Generated image URL:\", fullUrl);\n\n    // Download the image\n    const response = await axios.get(fullUrl, { responseType: 'stream' });\n    response.data.pipe(fs.createWriteStream('generated_image.jpg'));\n    console.log(\"Image saved as generated_image.jpg\");\n  }\n}\n\ntestWithLLM();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Image Feed with JavaScript EventSource\nDESCRIPTION: JavaScript implementation for connecting to the Pollinations.AI image feed using the browser's EventSource API. It handles incoming image data events, displays image information, and manages connection states.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connectImageFeed() {\n  const feedUrl = \"https://image.pollinations.ai/feed\";\n  console.log(\"Connecting to Image Feed:\", feedUrl);\n\n  const eventSource = new EventSource(feedUrl);\n\n  eventSource.onmessage = function (event) {\n    try {\n      const imageData = JSON.parse(event.data);\n      console.log(\"New Image:\", imageData);\n      // Example: Display the image prompt and URL\n      const div = document.createElement(\"div\");\n      div.innerHTML = `\n                <p><strong>Prompt:</strong> ${imageData.prompt || \"N/A\"}</p>\n                <img src=\"${imageData.imageURL}\" alt=\"${\n        imageData.prompt || \"Generated Image\"\n      }\" width=\"100\">\n                <hr>\n            `;\n      // document.getElementById('image-feed-output').prepend(div); // Add to your display area\n    } catch (e) {\n      console.error(\"Failed to parse image feed data:\", event.data, e);\n    }\n  };\n\n  eventSource.onerror = function (err) {\n    console.error(\"Image Feed Error:\", err);\n    // Handle errors, e.g., try reconnecting after a delay\n    eventSource.close(); // Close current connection\n    // setTimeout(connectImageFeed, 5000); // Optional: Attempt reconnect\n  };\n\n  eventSource.onopen = function () {\n    console.log(\"Image Feed connection opened.\");\n  };\n\n  // Optional: Add cleanup logic if needed when navigating away or closing the component\n  // window.addEventListener('beforeunload', () => eventSource.close());\n}\n\n// --- Usage ---\n// connectImageFeed();\n```\n\n----------------------------------------\n\nTITLE: Generating Speech Audio with JavaScript fetch (GET Request)\nDESCRIPTION: This JavaScript function uses the fetch API to make a Text-to-Speech GET request in the browser. It creates a Blob from the audio response and generates a download link for the user.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nasync function generateAndDownloadAudio() {\n  const text = \"Hello world\";\n  const url = `https://text.pollinations.ai/${encodeURIComponent(text)}?model=openai-audio&voice=nova`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    \n    const contentType = response.headers.get('Content-Type');\n    if (contentType === 'audio/mpeg') {\n      const blob = await response.blob();\n      const audioUrl = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = audioUrl;\n      a.download = 'hello_audio.mp3';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(audioUrl);\n    } else {\n      console.error(`Unexpected content type: ${contentType}`);\n      const text = await response.text();\n      console.log(\"Response:\", text);\n    }\n  } catch (error) {\n    console.error('Error generating audio:', error);\n  }\n}\n\ngenerateAndDownloadAudio();\n```\n\n----------------------------------------\n\nTITLE: Listing Available Image Models with cURL\nDESCRIPTION: Simple cURL command to retrieve the list of available image generation models from the Pollinations.AI API.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://image.pollinations.ai/models\n```\n\n----------------------------------------\n\nTITLE: Generating Speech Audio with Python requests (GET Request)\nDESCRIPTION: This Python script uses the requests library to make a Text-to-Speech GET request and save the audio response to a file. It includes error handling and content type verification.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://text.pollinations.ai/Hello%20world?model=openai-audio&voice=nova\"\n\ntry:\n    response = requests.get(url)\n    response.raise_for_status()\n    \n    if response.headers['Content-Type'] == 'audio/mpeg':\n        with open('hello_audio.mp3', 'wb') as f:\n            f.write(response.content)\n        print(\"Audio saved to hello_audio.mp3\")\n    else:\n        print(f\"Unexpected content type: {response.headers['Content-Type']}\")\n        print(\"Response:\", response.text)\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error during TTS request: {e}\")\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions\nDESCRIPTION: List of available API endpoints for image, text, and audio generation services including both GET and POST methods.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llms.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI-Endpoint: https://image.pollinations.ai/prompt/{prompt} # Image generation (GET)\nAPI-Endpoint: https://image.pollinations.ai/models # List available image models (GET)\nAPI-Endpoint: https://text.pollinations.ai/{prompt} # Text generation (GET)\nAPI-Endpoint: https://text.pollinations.ai/openai # Text generation (POST, OpenAI-compatible)\nAPI-Endpoint: https://text.pollinations.ai/models # List available text models (GET)\nAPI-Endpoint: https://text.pollinations.ai/{prompt}?model=openai-audio&voice={voice} # Text-to-speech (GET)\nAPI-Endpoint: https://text.pollinations.ai/openai # Text-to-speech and speech-to-text (POST, OpenAI-compatible)\nAPI-Endpoint: https://audio.pollinations.ai/ # Audio generation (GET)\n```\n\n----------------------------------------\n\nTITLE: AI-Generated Content Component (React)\nDESCRIPTION: React component using Pollinations.AI hooks to generate and display an image and markdown text. It demonstrates integration of image and text generation in a React application.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsImage, usePollinationsText } from '@pollinations/react';\nimport ReactMarkdown from 'react-markdown';\n\nconst AIGeneratedContent = () => {\n  const imageUrl = usePollinationsImage(\"Beautiful landscape of Paris with Eiffel Tower\", { width: 800, height: 600, seed: 42 });\n  const markdown = usePollinationsText(\"Write a brief travel guide for Paris, including top attractions and local cuisine in markdown\", { seed: 42 });\n\n  return (\n    <div>\n      <h2>AI-Generated Travel Guide</h2>\n      <img src={imageUrl} alt=\"AI Generated\" />\n      {markdown ? (\n        <ReactMarkdown>{markdown}</ReactMarkdown>\n      ) : (\n        <p>Loading markdown content...</p>\n      )}\n    </div>\n  );\n};\n\nexport default AIGeneratedContent;\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Implementation in Python\nDESCRIPTION: Python implementation using the requests library to make chat completion API calls, including error handling and response processing.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"https://text.pollinations.ai/openai\"\npayload = {\n    \"model\": \"openai\", # Or \"mistral\", etc.\n    \"messages\": [\n        {\"role\": \"system\", \"content\": \"You are a helpful historian.\"},\n        {\"role\": \"user\", \"content\": \"When did the French Revolution start?\"}\n    ],\n    \"seed\": 101,\n    # \"private\": True, # Optional\n    # \"referrer\": \"MyPythonApp\" # Optional\n}\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\n\ntry:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    result = response.json()\n    print(\"Assistant:\", result['choices'][0]['message']['content'])\n    # print(json.dumps(result, indent=2)) # Print full response\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error making POST request: {e}\")\n    # if response is not None: print(response.text)\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with Python POST Request\nDESCRIPTION: Python implementation for generating audio using requests library with POST method\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\nurl = \"https://text.pollinations.ai/openai\"\npayload = {\n    \"model\": \"openai-audio\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"This is a test of the text to speech generation using Python and the POST method.\"}\n    ],\n    \"voice\": \"shimmer\" # Choose voice\n}\nheaders = {\"Content-Type\": \"application/json\"}\noutput_filename = \"generated_audio_post.mp3\"\n\ntry:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    if 'audio/mpeg' in response.headers.get('Content-Type', ''):\n        with open(output_filename, 'wb') as f:\n            f.write(response.content)\n        print(f\"Audio saved successfully as {output_filename}\")\n    else:\n        print(\"Error: Expected audio response, received:\")\n        print(f\"Content-Type: {response.headers.get('Content-Type')}\")\n        print(response.text)\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error making TTS POST request: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Implementation in JavaScript\nDESCRIPTION: Browser-based JavaScript implementation using fetch API to make chat completion requests, with error handling and response processing.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function postChatCompletion(messages, options = {}) {\n  const url = \"https://text.pollinations.ai/openai\";\n  const payload = {\n    model: options.model || \"openai\",\n    messages: messages,\n    seed: options.seed,\n    private: options.private,\n    referrer: options.referrer || \"WebApp\", // Optional\n  };\n\n  console.log(\"Sending POST request to:\", url, payload);\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `HTTP error! status: ${response.status}, message: ${errorText}`\n      );\n    }\n\n    const result = await response.json();\n    console.log(\"Assistant:\", result.choices[0].message.content);\n    // console.log(\"Full response:\", result);\n    return result; // Return the full response object\n  } catch (error) {\n    console.error(\"Error posting chat completion:\", error);\n  }\n}\n\n// --- Usage ---\nconst chatMessages = [\n  { role: \"system\", content: \"You are a travel agent.\" },\n  { role: \"user\", content: \"Suggest a 3-day itinerary for Rome.\" },\n];\npostChatCompletion(chatMessages, { model: \"mistral\", seed: 500 });\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with JavaScript POST Request\nDESCRIPTION: Browser-based JavaScript implementation using fetch API with POST method to generate and play audio\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nasync function generateAudioPost(text, voice = \"alloy\") {\n  const url = \"https://text.pollinations.ai/openai\";\n  const payload = {\n    model: \"openai-audio\",\n    messages: [{ role: \"user\", content: text }],\n    voice: voice,\n  };\n  console.log(\"Generating audio via POST:\", payload);\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `HTTP error! status: ${response.status}, message: ${errorText}`\n      );\n    }\n    if (response.headers.get(\"Content-Type\")?.includes(\"audio/mpeg\")) {\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n      console.log(\"Audio generated and playing.\");\n    } else {\n      const errorText = await response.text();\n      console.error(\n        \"Expected audio, received:\",\n        response.headers.get(\"Content-Type\"),\n        errorText\n      );\n      throw new Error(\"API did not return audio content.\");\n    }\n  } catch (error) {\n    console.error(\"Error generating audio via POST:\", error);\n  }\n}\n// generateAudioPost(\"Generate speech using the POST method.\", \"nova\");\n```\n\n----------------------------------------\n\nTITLE: Function Definition Structure Example\nDESCRIPTION: Example showing the structure of a function definition object used for tool calling.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"function\",\n  function: {\n    name: \"function_name\",\n    description: \"Description of what the function does\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        // Function parameters\n      },\n      required: [\"param1\", \"param2\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Generation API Integration with Python\nDESCRIPTION: Python implementation using the requests library to interact with the Pollinations.ai text generation API. Includes error handling, parameter encoding, and JSON response parsing.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport urllib.parse\nimport json\n\nprompt = \"Explain the theory of relativity simply\"\nparams = {\n    \"model\": \"openai\",\n    \"seed\": 42,\n    # \"json\": \"true\", # Optional: Get response as JSON string\n    # \"system\": \"Explain things like I'm five.\", # Optional\n    # \"referrer\": \"MyPythonApp\" # Optional\n}\nencoded_prompt = urllib.parse.quote(prompt)\nencoded_system = urllib.parse.quote(params.get(\"system\", \"\")) if \"system\" in params else None\n\nurl = f\"https://text.pollinations.ai/{encoded_prompt}\"\nquery_params = {k: v for k, v in params.items() if k != \"system\"} # Remove system from query params if present\nif encoded_system:\n    query_params[\"system\"] = encoded_system\n\ntry:\n    response = requests.get(url, params=query_params)\n    response.raise_for_status()\n\n    if params.get(\"json\") == \"true\":\n        # The response is a JSON *string*, parse it\n        try:\n             data = json.loads(response.text)\n             print(\"Response (JSON parsed):\", data)\n        except json.JSONDecodeError:\n             print(\"Error: API returned invalid JSON string.\")\n             print(\"Raw response:\", response.text)\n    else:\n        print(\"Response (Plain Text):\")\n        print(response.text)\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error fetching text: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Available AI Models Configuration\nDESCRIPTION: Comprehensive list of available AI models with their capabilities and specializations including text, image, and audio processing models.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llms.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nModel: openai - OpenAI GPT-4.1-nano (supports text and image inputs)\nModel: openai-large - OpenAI GPT-4.1 mini (supports text and image inputs)\nModel: openai-reasoning - OpenAI o4-mini (reasoning-focused model)\nModel: qwen-coder - Qwen 2.5 Coder 32B (code-focused model)\nModel: llama - Llama 3.3 70B\nModel: llamascout - Llama 4 Scout 17B\nModel: mistral - Mistral Small 3 (supports text and image inputs)\nModel: unity - Unity Mistral Large (uncensored, supports text and image inputs)\nModel: midijourney - Midijourney (music generation focused)\nModel: rtist - Rtist (creative writing focused)\nModel: searchgpt - SearchGPT (search-augmented model)\nModel: evil - Evil (uncensored model with text and image inputs)\nModel: deepseek-reasoning - DeepSeek-R1 Distill Qwen 32B (reasoning-focused)\nModel: deepseek-reasoning-large - DeepSeek R1 - Llama 70B (reasoning-focused)\nModel: phi - Phi-4 Instruct (supports text, image, and audio inputs)\nModel: llama-vision - Llama 3.2 11B Vision (supports text and image inputs)\nModel: gemini - Gemini 2.5 Flash Preview (supports text, image, and audio inputs/outputs)\nModel: hormoz - Hormoz 8b\nModel: hypnosis-tracy - Hypnosis Tracy 7B (supports text and audio inputs/outputs)\nModel: deepseek - DeepSeek-V3\nModel: sur - Sur AI Assistant (Mistral-based, supports text and image inputs)\nModel: openai-audio - OpenAI GPT-4o-audio-preview (supports text, image, and audio inputs/outputs)\nModel: flux - Latest stable diffusion model\nModel: turbo - Fast image generation model\n```\n\n----------------------------------------\n\nTITLE: Generating Speech Audio with cURL (GET Request)\nDESCRIPTION: This snippet demonstrates how to make a basic Text-to-Speech GET request using cURL and save the resulting audio to a file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o hello_audio.mp3 \"https://text.pollinations.ai/Hello%20world?model=openai-audio&voice=nova\"\n```\n\n----------------------------------------\n\nTITLE: Utilizing MCP for Model Selection in Python\nDESCRIPTION: This Python code demonstrates how to use the Model Context Protocol (MCP) to select appropriate models for different tasks based on requirements. It fetches the MCP information and uses it to choose models for image, text, and audio tasks.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Python example of an AI agent using mcp.json\nimport requests\nimport json\n\ndef get_mcp_info(domain):\n    url = f\"https://{domain}/mcp.json\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    return None\n\ndef select_appropriate_model(mcp_info, task_type, requirements):\n    \"\"\"Select the best model based on task requirements\"\"\"\n    if task_type not in mcp_info[\"models\"]:\n        return None\n\n    available_models = mcp_info[\"models\"][task_type]\n\n    # Simple model selection based on description matching\n    for model in available_models:\n        for req in requirements:\n            if req.lower() in model[\"description\"].lower():\n                return model[\"id\"]\n\n    # Return default model if no match\n    return available_models[0][\"id\"] if available_models else None\n\n# Get MCP information\nmcp_info = get_mcp_info(\"pollinations.ai\")\n\n# Use MCP info to select appropriate models\nimage_model = select_appropriate_model(mcp_info, \"image\", [\"high-quality\"])\ntext_model = select_appropriate_model(mcp_info, \"text\", [\"open-source\"])\naudio_model = select_appropriate_model(mcp_info, \"audio\", [\"text-to-speech\"])\n\nprint(f\"Selected image model: {image_model}\")\nprint(f\"Selected text model: {text_model}\")\nprint(f\"Selected audio model: {audio_model}\")\n\n# Get service examples from MCP info\nfor service in mcp_info[\"services\"]:\n    print(f\"{service['name']} example: {service['example']}\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multi-tier Architecture with Mermaid for image.pollinations.ai\nDESCRIPTION: A flowchart diagram illustrating the complete architecture of the image generation service, showing the flow from client request through Cloudflare Worker caching to the origin service's image generation pipeline, including safety checks and image processing steps.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Client Request] --> B[Cloudflare Worker]\n    B -->|Cache Hit| C[Return Cached Image]\n    B -->|Cache Miss| D[Forward to Origin]\n    D --> E[Input Validation]\n    E --> F[Prompt Translation]\n    F --> G[Parameter Normalization]\n    G --> H[LlamaGuard Check]\n    H -->|Safe| I[Image Generation]\n    H -->|Unsafe| J[Error Response]\n    I --> K[NSFW Check]\n    K -->|Safe| L[Add Logo]\n    K -->|NSFW| M[Block/Warn]\n    L --> N[Return Image]\n    N --> O[Worker Caches Image]\n    O --> C\n    \n    subgraph \"Cloudflare Worker (image.pollinations.ai)\"\n        B\n        C\n        O\n    end\n    \n    subgraph \"Origin Service (image-origin.pollinations.ai)\"\n        D\n        E\n        F\n        G\n        H\n        I\n        J\n        K\n        L\n        M\n        N\n    end\n    \n    subgraph \"Safety Checks\"\n        H\n        K\n    end\n    \n    subgraph \"Image Processing\"\n        I\n        L\n    end\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with cURL GET Request\nDESCRIPTION: Example of using cURL to generate audio from text using a GET request to the Pollinations API\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o welcome_audio.mp3 \"https://text.pollinations.ai/Welcome%20to%20Pollinations?model=openai-audio&voice=fable\"\n```\n\n----------------------------------------\n\nTITLE: Basic Image Generation Command\nDESCRIPTION: Generates 64 images using a pre-trained model and saves them as PNG files. Uses a single GPU with specified network model and output directory.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/generate-help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython generate.py --outdir=out --seeds=0-63 --batch=64 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Using agents.json for Image Generation in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the agents.json specification to generate images through Pollinations.AI's API. It loads the specification, finds the image generation endpoint, and constructs the appropriate URL with parameters.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript example of an AI agent using agents.json\nasync function loadAgentsJson(domain) {\n  const response = await fetch(`https://${domain}/agents.json`);\n  if (response.ok) {\n    return await response.json();\n  }\n  return null;\n}\n\nasync function generateImageWithAgent(prompt, options = {}) {\n  // Load the agents.json specification\n  const agentsSpec = await loadAgentsJson(\"pollinations.ai\");\n\n  // Find the image generation endpoint\n  const imageGenPath = agentsSpec.openapi.paths[\"/prompt/{prompt}\"];\n  const imageGenParams = imageGenPath.get.parameters;\n\n  // Extract parameter defaults\n  const defaultParams = {};\n  imageGenParams.forEach(param => {\n    if (param.schema.default !== undefined) {\n      defaultParams[param.name] = param.schema.default;\n    }\n  });\n\n  // Combine defaults with user options\n  const finalParams = {...defaultParams, ...options};\n\n  // Construct the URL\n  const baseUrl = agentsSpec.openapi.servers.find(s => s.description === \"Image Generation API\").url;\n  const queryParams = new URLSearchParams();\n\n  Object.entries(finalParams).forEach(([key, value]) => {\n    if (key !== \"prompt\") { // Don't add prompt to query params\n      queryParams.set(key, value);\n    }\n  });\n\n  const encodedPrompt = encodeURIComponent(prompt);\n  const url = `${baseUrl}/prompt/${encodedPrompt}?${queryParams.toString()}`;\n\n  // Make the request\n  return url; // Return the URL that can be used to fetch the image\n}\n\n// Example usage\ngenerateImageWithAgent(\"A beautiful sunset over the ocean\", {\n  width: 1280,\n  height: 720,\n  model: \"sdxl\"\n}).then(imageUrl => {\n  console.log(\"Generated image URL:\", imageUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw SSE Text Feed with cURL\nDESCRIPTION: Simple cURL command to connect to the Pollinations.AI text feed endpoint and display the raw Server-Sent Events (SSE) stream of generated text responses.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -N https://text.pollinations.ai/feed\n```\n\n----------------------------------------\n\nTITLE: Global Installation Commands\nDESCRIPTION: Commands to install the MCP server globally via npm and run it\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g @pollinations/model-context-protocol\n\n# Run the server\nmodel-context-protocol\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Generation with usePollinationsImage Hook\nDESCRIPTION: Example React component showing image generation using the usePollinationsImage hook with configurable parameters like dimensions, model, and enhancement options.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsImage } from '@pollinations/react';\n\nconst SunsetImageComponent = () => {\n  const imageUrl = usePollinationsImage('A beautiful sunset over the ocean', {\n    width: 800,\n    height: 600,\n    seed: 42,\n    model: 'turbo',\n    nologo: true,\n    enhance: false\n  });\n\n  return (\n    <div>\n      {imageUrl ? <img src={imageUrl} alt=\"Generated sunset\" /> : <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default SunsetImageComponent;\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw SSE Image Feed with cURL\nDESCRIPTION: Simple cURL command to connect to the Pollinations.AI image feed endpoint and display the raw Server-Sent Events (SSE) stream.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl -N https://image.pollinations.ai/feed\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server with NPX (Bash)\nDESCRIPTION: Command to run the Model Context Protocol server using NPX without installation. This enables AI assistants like Claude to generate images and audio directly.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @pollinations/model-context-protocol\n```\n\n----------------------------------------\n\nTITLE: Generating Images with cURL in Bash\nDESCRIPTION: Examples of using cURL to generate images via the Pollinations.AI API, including basic prompt submission and using additional parameters like width, height, seed, and model selection.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Basic prompt, save to file\ncurl -o sunset.jpg \"https://image.pollinations.ai/prompt/A%20beautiful%20sunset%20over%20the%20ocean\"\n\n# With parameters\ncurl -o sunset_large.jpg \"https://image.pollinations.ai/prompt/A%20beautiful%20sunset%20over%20the%20ocean?width=1280&height=720&seed=42&model=flux\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Image Models with JavaScript\nDESCRIPTION: Browser-based JavaScript implementation to fetch and display available image generation models from the Pollinations.AI API, with error handling and optional UI integration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function listImageModels() {\n  const url = \"https://image.pollinations.ai/models\";\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const models = await response.json();\n    console.log(\"Available Image Models:\", models);\n    // Example: Populate a dropdown\n    // const selectElement = document.getElementById('model-select');\n    // models.forEach(model => {\n    //   const option = new Option(model, model);\n    //   selectElement.add(option);\n    // });\n  } catch (error) {\n    console.error(\"Error fetching image models:\", error);\n  }\n}\n\nlistImageModels();\n```\n\n----------------------------------------\n\nTITLE: Using the Feed Filter CLI Tool\nDESCRIPTION: Example command showing how to use the feed-filter-cli.js tool with various options for monitoring and filtering text generation messages.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode feed-filter-cli.js [options]\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Completion with cURL\nDESCRIPTION: Command-line example using cURL to stream text completions from the pollinations.ai API with the -N flag for streaming. This example sends a request to generate a poem about the sea using the OpenAI model.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -N https://text.pollinations.ai/openai \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"openai\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Write a long poem about the sea.\"}\n    ],\n    \"stream\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Image Feed with Python SSEClient\nDESCRIPTION: Python implementation for connecting to the Pollinations.AI image feed using the sseclient-py library. It includes connection management, error handling, and reconnection logic for robust operation.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport sseclient # pip install sseclient-py\nimport requests\nimport json\nimport time\n\nfeed_url = \"https://image.pollinations.ai/feed\"\n\ndef connect_image_feed():\n    while True: # Loop to reconnect on error\n        try:\n            print(f\"Connecting to image feed: {feed_url}\")\n            # Need stream=True for SSE\n            response = requests.get(feed_url, stream=True, headers={'Accept': 'text/event-stream'})\n            response.raise_for_status()\n            client = sseclient.SSEClient(response)\n\n            print(\"Connection established. Waiting for images...\")\n            for event in client.events():\n                 if event.data:\n                     try:\n                         image_data = json.loads(event.data)\n                         print(\"\\n--- New Image ---\")\n                         print(f\"  Prompt: {image_data.get('prompt', 'N/A')}\")\n                         print(f\"  URL: {image_data.get('imageURL', 'N/A')}\")\n                         print(f\"  Model: {image_data.get('model', 'N/A')}, Seed: {image_data.get('seed', 'N/A')}\")\n                         # Process image_data as needed\n                     except json.JSONDecodeError:\n                         print(f\"\\nReceived non-JSON data: {event.data}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"\\nConnection error: {e}. Reconnecting in 10 seconds...\")\n            time.sleep(10)\n        except KeyboardInterrupt:\n             print(\"\\nInterrupted by user. Exiting.\")\n             break\n        except Exception as e:\n             print(f\"\\nAn unexpected error occurred: {e}. Reconnecting in 10 seconds...\")\n             time.sleep(10)\n\n# --- Usage ---\n# connect_image_feed()\n```\n\n----------------------------------------\n\nTITLE: Parsing llms.txt File in Python\nDESCRIPTION: This Python code demonstrates how to fetch and parse the llms.txt file from Pollinations.AI. It retrieves site information, API endpoints, and capabilities to help LLMs interact with the site appropriately.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Python example of an LLM agent using llms.txt\nimport requests\n\ndef get_llms_txt(domain):\n    url = f\"https://{domain}/llms.txt\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return parse_llms_txt(response.text)\n    return None\n\ndef parse_llms_txt(content):\n    # Simple parser for llms.txt\n    sections = {}\n    current_section = None\n\n    for line in content.split('\\n'):\n        if line.startswith('#'):\n            # New section\n            current_section = line.strip('# ')\n            sections[current_section] = []\n        elif line.strip() and current_section:\n            # Add content to current section\n            sections[current_section].append(line)\n\n    return sections\n\n# Use the parsed information to understand API endpoints\nllms_info = get_llms_txt(\"pollinations.ai\")\napi_endpoints = [line for line in llms_info.get(\"API Endpoints\", []) if line.startswith(\"API-Endpoint:\")]\ncapabilities = [line for line in llms_info.get(\"Capabilities\", []) if line.startswith(\"Capability:\")]\n\nprint(f\"Available API Endpoints: {api_endpoints}\")\nprint(f\"Capabilities: {capabilities}\")\n```\n\n----------------------------------------\n\nTITLE: Running Basic Image Generation with EDM\nDESCRIPTION: Minimal example script for generating an 8x8 grid of images using pre-trained models.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython example.py\n```\n\n----------------------------------------\n\nTITLE: Connecting to Text Feed with Python SSEClient\nDESCRIPTION: Python implementation for connecting to the Pollinations.AI text feed using the sseclient-py library. It includes connection management, error handling, and reconnection logic with truncated response display.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport sseclient # pip install sseclient-py\nimport requests\nimport json\nimport time\n\nfeed_url = \"https://text.pollinations.ai/feed\"\n\ndef connect_text_feed():\n     while True:\n        try:\n            print(f\"Connecting to text feed: {feed_url}\")\n            response = requests.get(feed_url, stream=True, headers={'Accept': 'text/event-stream'})\n            response.raise_for_status()\n            client = sseclient.SSEClient(response)\n\n            print(\"Connection established. Waiting for text...\")\n            for event in client.events():\n                 if event.data:\n                     try:\n                         text_data = json.loads(event.data)\n                         print(\"\\n--- New Text ---\")\n                         print(f\"  Model: {text_data.get('model', 'N/A')}\")\n                         # Truncate long responses for cleaner logging\n                         response_preview = (text_data.get('response', 'N/A') or \"\")[:150]\n                         if len(text_data.get('response', '')) > 150: response_preview += \"...\"\n                         print(f\"  Response: {response_preview}\")\n                         # Process text_data as needed\n                     except json.JSONDecodeError:\n                         print(f\"\\nReceived non-JSON data: {event.data}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"\\nConnection error: {e}. Reconnecting in 10 seconds...\")\n            time.sleep(10)\n        except KeyboardInterrupt:\n             print(\"\\nInterrupted by user. Exiting.\")\n             break\n        except Exception as e:\n             print(f\"\\nAn unexpected error occurred: {e}. Reconnecting in 10 seconds...\")\n             time.sleep(10)\n\n# --- Usage ---\n# connect_text_feed()\n```\n\n----------------------------------------\n\nTITLE: Training and Testing SDXL Models\nDESCRIPTION: Commands for starting distributed training across 64 GPUs and running continuous evaluation with FID scoring. Includes configuration for wandb logging and checkpoint management.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdxl/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# start a training with 64 gpu. we need to run this script on all 8 nodes. Please change the EXP_NAME and NODE_RANK_ID accordingly.  \nbash experiments/sdxl/sdxl_cond999_8node_lr5e-7_denoising4step_diffusion1000_gan5e-3_guidance8_noinit_noode_backsim_scratch.sh $CHECKPOINT_PATH $WANDB_ENTITY $WANDB_PROJECT fsdp_configs/EXP_NAME NODE_RANK_ID \n\n# on some other machine, start a testing process that continually reads from the checkpoint folder and evaluate the FID \n# Change TIMESTAMP_TBD to the real one\npython main/sdxl/test_folder_sdxl.py \\\n    --folder $CHECKPOINT_PATH/sdxl_cond999_8node_lr5e-7_denoising4step_diffusion1000_gan5e-3_guidance8_noinit_noode_backsim_scratch/TIMESTAMP_TBD/ \\\n    --conditioning_timestep 999 --num_step 4 --wandb_entity $WANDB_ENTITY \\\n    --wandb_project $WANDB_PROJECT --num_train_timesteps 1000 \\\n    --seed 10 --eval_res 512 --ref_dir $CHECKPOINT_PATH/coco10k/subset \\\n    --anno_path  $CHECKPOINT_PATH/coco10k/all_prompts.pkl \\\n    --total_eval_samples 10000 --clip_score \\\n    --wandb_name test_sdxl_cond999_8node_lr5e-7_denoising4step_diffusion1000_gan5e-3_guidance8_noinit_noode_backsim_scratch\n```\n\n----------------------------------------\n\nTITLE: Making Text Generation API Requests using cURL\nDESCRIPTION: Examples of using cURL to make GET requests to the Pollinations.ai text generation API with various parameters including basic prompts, model selection, and streaming responses.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Basic prompt\ncurl \"https://text.pollinations.ai/What%20is%20the%20capital%20of%20France%3F\"\n\n# With parameters (model, seed, system prompt)\ncurl \"https://text.pollinations.ai/Write%20a%20short%20poem%20about%20robots?model=mistral&seed=123&system=You%20are%20a%20poet\"\n\n# Get JSON response\ncurl \"https://text.pollinations.ai/What%20is%20AI?json=true\"\n\n# Streaming response (raw SSE output)\ncurl -N \"https://text.pollinations.ai/Tell%20me%20a%20very%20long%20story?stream=true\"\n```\n\n----------------------------------------\n\nTITLE: Distributed Image Generation\nDESCRIPTION: Command for distributed image generation across multiple GPUs using torchrun.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Generate 1024 images using 2 GPUs\ntorchrun --standalone --nproc_per_node=2 generate.py --outdir=out --seeds=0-999 --batch=64 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables in .env File\nDESCRIPTION: Creates a .env file with necessary configuration variables for the Cloudflare Worker, including Google Analytics credentials and Cloudflare account ID.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGA_MEASUREMENT_ID=your-ga-measurement-id\nGA_API_SECRET=your-ga-api-secret\nCLOUDFLARE_ACCOUNT_ID=your-cloudflare-account-id\n```\n\n----------------------------------------\n\nTITLE: API Request Example using Fetch\nDESCRIPTION: JavaScript example demonstrating how to make API requests to text.pollinations.ai using the Portkey integration with fetch\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/portkey-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example using fetch\nfetch('http://localhost:16385/openai', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    model: 'portkey-gpt4',\n    messages: [\n      { role: 'user', content: 'Hello, who are you?' }\n    ],\n    temperature: 0.7\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Diffusion Models and Training Environment\nDESCRIPTION: Configuration script for initializing the training environment, including setting up checkpoint paths, WandB integration, and master node configuration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdv1.5/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_PATH=\"\" # change this to your own checkpoint folder \nexport WANDB_ENTITY=\"\" # change this to your own wandb entity\nexport WANDB_PROJECT=\"\" # change this to your own wandb project\nexport MASTER_IP=\"\"  # change this to your own master ip\n\n# Not sure why but we found the following line necessary to work with the accelerate package in our system. \n# Change YOUR_MASTER_IP/YOUR_MASTER_NODE_NAME to the correct value \necho \"YOUR_MASTER_IP \tYOUR_MASTER_NODE_NAME\" | sudo tee -a /etc/hosts\n\nmkdir $CHECKPOINT_PATH\n\nbash scripts/download_sdv15.sh $CHECKPOINT_PATH\n```\n\n----------------------------------------\n\nTITLE: Connecting to Text Feed with JavaScript EventSource\nDESCRIPTION: JavaScript implementation for connecting to the Pollinations.AI text feed using the browser's EventSource API. It handles incoming text data events and manages connection states.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connectTextFeed() {\n  const feedUrl = \"https://text.pollinations.ai/feed\";\n  console.log(\"Connecting to Text Feed:\", feedUrl);\n\n  const eventSource = new EventSource(feedUrl);\n\n  eventSource.onmessage = function (event) {\n    try {\n      const textData = JSON.parse(event.data);\n      console.log(\"New Text Response:\", textData);\n      // Example: Display the response text\n      // const p = document.createElement('p');\n      // p.textContent = `[${textData.model || 'N/A'}] ${textData.response || 'N/A'}`;\n      // document.getElementById('text-feed-output').prepend(p); // Add to your display area\n    } catch (e) {\n      console.error(\"Failed to parse text feed data:\", event.data, e);\n    }\n  };\n\n  eventSource.onerror = function (err) {\n    console.error(\"Text Feed Error:\", err);\n    eventSource.close();\n    // setTimeout(connectTextFeed, 5000); // Optional: Attempt reconnect\n  };\n\n  eventSource.onopen = function () {\n    console.log(\"Text Feed connection opened.\");\n  };\n}\n\n// --- Usage ---\n// connectTextFeed();\n```\n\n----------------------------------------\n\nTITLE: Running Model Context Protocol Server with NPX\nDESCRIPTION: Command to run the Model Context Protocol (MCP) server using npx without requiring installation. The MCP server enables AI assistants like Claude to generate images and audio directly.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/README-pollinations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run with npx (no installation required)\nnpx @pollinations/model-context-protocol\n```\n\n----------------------------------------\n\nTITLE: Training DMD2 on ImageNet-64x64\nDESCRIPTION: Bash command to start DMD2 training on ImageNet-64x64 using 7 GPUs. It uses a specific configuration file and the previously set environment variables.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/imagenet/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash experiments/imagenet/imagenet_gan_classifier_genloss3e-3_diffusion1000_lr2e-6_scratch.sh  $CHECKPOINT_PATH $WANDB_ENTITY $WANDB_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Deploying the Cloudflare Worker\nDESCRIPTION: Commands to deploy the Cloudflare Worker after logging in to the Cloudflare account.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cloudflare-cache\nnpx wrangler login  # First time only, opens browser for authentication\nnpx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Basic Request Body Structure for OpenAI-Compatible API\nDESCRIPTION: Example JSON request body structure for making API calls to the Pollinations text endpoint, demonstrating speech conversion request format.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"openai-audio\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Convert this longer text into speech using the selected voice. This method is better for larger inputs.\"\n    }\n  ],\n  \"voice\": \"nova\",\n  \"private\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format with Tool Calls\nDESCRIPTION: Example of the response format when a model calls a function, showing the structure of tool_calls array.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  choices: [\n    {\n      message: {\n        role: \"assistant\",\n        content: \"\",\n        tool_calls: [\n          {\n            id: \"call_abc123\",\n            type: \"function\",\n            function: {\n              name: \"get_weather\",\n              arguments: \"{\\\"location\\\":\\\"Paris\\\"}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stable Diffusion WebUI API for Origin Service\nDESCRIPTION: Command for running automatic1111's stable diffusion webui with API support, optionally using xformers for performance improvement. This is a prerequisite for the image generation origin service.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./webui.sh --api [--xformers]\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with cURL POST Request\nDESCRIPTION: Example of using cURL to generate audio from text using a POST request with JSON payload\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://text.pollinations.ai/openai \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"openai-audio\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Hello from Pollinations AI! This audio was generated via POST.\"}\n    ],\n    \"voice\": \"echo\"\n  }' \\\n  --output generated_audio_post.mp3\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with JavaScript Fetch\nDESCRIPTION: Browser-based JavaScript implementation using fetch API to generate and play audio from text\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nasync function generateAudioGet(text, voice = \"alloy\") {\n  const encodedText = encodeURIComponent(text);\n  const params = new URLSearchParams({\n    model: \"openai-audio\",\n    voice: voice,\n  });\n  const url = `https://text.pollinations.ai/${encodedText}?${params.toString()}`;\n\n  console.log(\"Generating audio via GET:\", url);\n\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `HTTP error! status: ${response.status}, message: ${errorText}`\n      );\n    }\n\n    if (response.headers.get(\"Content-Type\")?.includes(\"audio/mpeg\")) {\n      const audioBlob = await response.blob();\n      const audioUrl = URL.createObjectURL(audioBlob);\n\n      // Example: Play the audio\n      const audio = new Audio(audioUrl);\n      audio.play();\n      console.log(\"Audio generated and playing.\");\n    } else {\n      const errorText = await response.text();\n      console.error(\n        \"Expected audio, received:\",\n        response.headers.get(\"Content-Type\"),\n        errorText\n      );\n      throw new Error(\"API did not return audio content.\");\n    }\n  } catch (error) {\n    console.error(\"Error generating audio via GET:\", error);\n  }\n}\n\n// --- Usage ---\n// generateAudioGet(\"This audio comes from a GET request.\", \"shimmer\");\n```\n\n----------------------------------------\n\nTITLE: Integrating Pollinations.AI with React Hooks\nDESCRIPTION: Example React component that demonstrates how to use Pollinations React hooks to generate both images and text. The component renders an AI-generated image alongside markdown content for a travel guide.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/README-pollinations.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { usePollinationsImage, usePollinationsText } from '@pollinations/react';\nimport ReactMarkdown from 'react-markdown';\n\nconst AIGeneratedContent = () => {\n  const imageUrl = usePollinationsImage(\"Beautiful landscape of Paris with Eiffel Tower\", { width: 800, height: 600, seed: 42 });\n  const markdown = usePollinationsText(\"Write a brief travel guide for Paris, including top attractions and local cuisine in markdown\", { seed: 42 });\n\n  return (\n    <div>\n      <h2>AI-Generated Travel Guide</h2>\n      <img src={imageUrl} alt=\"AI Generated\" />\n      {markdown ? (\n        <ReactMarkdown>{markdown}</ReactMarkdown>\n      ) : (\n        <p>Loading markdown content...</p>\n      )}\n    </div>\n  );\n};\n\nexport default AIGeneratedContent;\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud CLI in Bash\nDESCRIPTION: This code snippet demonstrates how to install the Google Cloud CLI by adding the Cloud SDK distribution URI, importing the Google Cloud public key, and installing the SDK.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add the Cloud SDK distribution URI as a package source\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n\n# Import the Google Cloud public key\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\n# Update and install the SDK\nsudo apt-get update && sudo apt-get install google-cloud-cli\n```\n\n----------------------------------------\n\nTITLE: Master Cloudflare Stack Orchestration Script in Bash\nDESCRIPTION: This script orchestrates the entire Cloudflare stack setup by sequentially calling the individual setup scripts. It creates an R2 bucket, sets up a tunnel, deploys a worker, and configures everything with proper connections.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/TODO.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# setup-cloudflare-stack.sh\n\n# Check for required parameters\nif [ \"$#\" -ne 5 ]; then\n    echo \"Usage: $0 <account_id> <zone_id> <worker_name> <bucket_name> <local_port>\"\n    echo \"Example: $0 your_account_id your_zone_id pollinations-image-cache pollinations-images 16384\"\n    exit 1\nfi\n\nACCOUNT_ID=$1\nZONE_ID=$2\nWORKER_NAME=$3\nBUCKET_NAME=$4\nLOCAL_PORT=$5\n\n# Setup authentication\n./setup-cloudflare-auth.sh\n\n# Create R2 bucket\n./setup-cloudflare-r2.sh \"$ACCOUNT_ID\" \"$BUCKET_NAME\"\n\n# Setup origin tunnel\n./setup-cloudflare-tunnel.sh \"image-origin\" \"pollinations.ai\" \"$LOCAL_PORT\"\n\n# Deploy worker with custom domain\n./deploy-cloudflare-worker.sh \"$ACCOUNT_ID\" \"$ZONE_ID\" \"$WORKER_NAME\" \"image.pollinations.ai\"\n\necho \"Cloudflare stack setup complete!\"\necho \"Worker: $WORKER_NAME is now accessible at image.pollinations.ai\"\necho \"Origin service is accessible at image-origin.pollinations.ai\"\necho \"R2 bucket: $BUCKET_NAME is configured for caching\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pollinations.AI Architecture with Mermaid\nDESCRIPTION: Mermaid diagram showing the Pollinations.AI architecture, including various clients, CDNs, API services, and the connection between different components. It illustrates how different services interact within the ecosystem.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/README-pollinations.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Q[Bots - Discord, Telegram, WhatsApp] --> L1\n    \n    N[30+ Mobile and Web Apps] --> L1\n    N --> L2\n    \n    A[pollinations.ai Web Frontend] --> L1\n    A --> L2\n    \n    R[AI Agents - Qwen, Sillytavern, ...] --> L1\n    \n    AI[AI Assistants - Claude] --> MCP[MCP Server]\n    MCP --> L1\n    \n    L1[Image CDN] --> CF[Cloudflare Worker with R2 Cache]\n    L2[Text CDN] --> C\n    \n    CF --> B\n    \n    B[image-origin.pollinations.ai - AWS EC2 CPU] --> F[Azure OpenAI - Prompt Enhancing]\n    B --> S[LlamaGuard - Safety Checker]\n    F --> E[Translation Service - 1 GPU VM]\n    E --> D[FLUX image generation model - 2-6 GPU VMs on AWS]\n    \n    C[text.pollinations.ai - AWS EC2 CPU] --> P[karma.yt - Realtime News]\n    C --> SC[Scaleway API]\n    C --> DS[Deepseek API]\n    C --> G[Azure-hosted Serverless LLMs]\n    C --> CFM[Cloudflare AI]\n    SC --> MI[Mistral Models]\n    SC --> QW[Qwen Models]\n    SC --> LL[Llama Models]\n    DS --> DM[Deepseek Models]\n    G --> H[OpenAI]\n    G --> K[Claude]\n    CFM --> CFL[Llama & Deepseek Models]\n```\n\n----------------------------------------\n\nTITLE: Starting the Origin Service for Image Generation\nDESCRIPTION: Commands to set up the cache directory, install dependencies, and start the origin server which will listen on port 16384 by default.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /tmp/stableDiffusion_cache\nnpm install\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Creating Google Cloud Service Account and Key in Bash\nDESCRIPTION: This code snippet demonstrates how to create a service account, grant necessary roles, create and download a key, and set secure permissions for the key file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create service account\ngcloud iam service-accounts create vertex-ai-client --display-name=\"Vertex AI Client\"\n\n# Grant necessary roles\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\n  --member=\"serviceAccount:vertex-ai-client@YOUR_PROJECT_ID.iam.gserviceaccount.com\" \\\n  --role=\"roles/aiplatform.user\"\n\n# Create and download key\nmkdir -p credentials\ngcloud iam service-accounts keys create credentials/google_vertex_key.json \\\n  --iam-account=vertex-ai-client@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set secure permissions\nchmod 600 credentials/google_vertex_key.json\n```\n\n----------------------------------------\n\nTITLE: Pollinations Platform Architecture Diagram\nDESCRIPTION: Mermaid flowchart showing the platform architecture including frontend clients, CDN layers, AI services, and model integrations. Illustrates the flow from user interfaces through various services to the underlying AI models.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/operations/dataroom/05_product_technology.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Q[Bots & Integrations] --> L1\n    N[Mobile/Web Apps] --> L1\n    A[Web Frontend] --> L1\n    R[AI Agents] --> L1\n    \n    L1[Image CDN] --> B\n    L2[Text CDN] --> C\n    \n    B[image.pollinations.ai] --> F[GroqCloud]\n    B --> S[Safety Checker]\n    B --> M[Custom FLUX Models]\n    F --> E[Translation Service]\n    E --> D[FLUX Generation]\n    \n    C[text.pollinations.ai] --> P[Real-time News]\n    C --> G[Serverless LLMs]\n    G --> H[OpenAI]\n    G --> I[Mistral]\n    G --> J[Llama]\n    G --> K[Claude]\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Function Tools in JavaScript\nDESCRIPTION: Example of defining function definitions (tools) for weather data retrieval that can be called by the model.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst weatherTools = [\n  {\n    type: \"function\",\n    function: {\n      name: \"get_weather\",\n      description: \"Get the current weather for a location\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          location: {\n            type: \"string\",\n            description: \"The location to get weather for\"\n          }\n        },\n        required: [\"location\"]\n      }\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Worker for Caching\nDESCRIPTION: Series of commands to navigate to the cloudflare-cache directory, install dependencies, and deploy the worker using Wrangler.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd cloudflare-cache\nnpm install\nnpx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler Development Commands\nDESCRIPTION: Commands for local development and viewing logs from the deployed worker.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Using Google Cloud Authentication Module in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the Google Cloud authentication module in JavaScript, including getting the current token and using the token refresh function.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport googleCloudAuth from './googleCloudAuth.js';\n\n// Get the current token\nconst token = googleCloudAuth.getToken();\n\n// Use the token refresh function directly (useful for APIs that need a fresh token)\nconst authFunction = googleCloudAuth.getToken;\n```\n\n----------------------------------------\n\nTITLE: Quick Start Installation with NPX\nDESCRIPTION: Command to run the MCP server directly using npx without installation\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run directly with npx (no installation required)\nnpx @pollinations/model-context-protocol\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Worker with Custom Domain in Bash\nDESCRIPTION: This script deploys a Cloudflare worker using Wrangler and adds a custom domain to it. It uses the Cloudflare API to attach the custom domain to the deployed worker.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/TODO.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# deploy-cloudflare-worker.sh\n\n# Load credentials\nsource ~/.cloudflare-credentials\n\n# Check for required parameters\nif [ \"$#\" -ne 4 ]; then\n    echo \"Usage: $0 <account_id> <zone_id> <worker_name> <custom_domain>\"\n    echo \"Example: $0 your_account_id your_zone_id pollinations-image-cache image.pollinations.ai\"\n    exit 1\nfi\n\nACCOUNT_ID=$1\nZONE_ID=$2\nWORKER_NAME=$3\nCUSTOM_DOMAIN=$4\n\n# Deploy the worker using wrangler\necho \"Deploying worker: $WORKER_NAME\"\ncd cloudflare-cache\nnpm install\nnpx wrangler deploy\n\n# Add custom domain to the worker\necho \"Adding custom domain: $CUSTOM_DOMAIN to worker: $WORKER_NAME\"\nDOMAIN_RESPONSE=$(curl -s -X PUT \"https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/workers/domains\" \\\n     -H \"Authorization: Bearer $CF_API_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     --data \"{\\\"hostname\\\":\\\"$CUSTOM_DOMAIN\\\",\\\"service\\\":\\\"$WORKER_NAME\\\",\\\"zone_id\\\":\\\"$ZONE_ID\\\"}\")\n\nif echo \"$DOMAIN_RESPONSE\" | grep -q '\"success\":true'; then\n    echo \"Custom domain added successfully\"\nelse\n    echo \"Custom domain addition failed\"\n    echo \"$DOMAIN_RESPONSE\"\n    exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional Cache Interface in JavaScript\nDESCRIPTION: Example of a functional interface for cache implementations showing the consistent interface pattern for both memory-based and Cloudflare-based caching systems. Implements factory functions for creating different cache implementations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/docs/cloudflare-caching-implementation-plan.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example structure (not actual implementation)\nexport const createCache = (config) => ({\n  isImageCached: (prompt, extraParams) => { /* implementation */ },\n  getCachedImage: (prompt, extraParams) => { /* implementation */ },\n  cacheImage: (prompt, extraParams, bufferPromiseCreator) => { /* implementation */ }\n});\n\nexport const createCloudflareCache = (config) => {\n  // Return the same interface but with Cloudflare implementation\n};\n\nexport const createMemoryCache = (config) => {\n  // Return the same interface but with in-memory implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Cloudflare Setup Commands\nDESCRIPTION: Series of commands for manually setting up Wrangler CLI, logging into Cloudflare, creating R2 bucket, and deploying the worker.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g wrangler\nwrangler login\nwrangler r2 bucket create pollinations-text\nnpm install\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Multi-GPU Image Generation Command\nDESCRIPTION: Generates 1024 images using 2 GPUs in parallel using torchrun for distributed processing. Demonstrates scaling the generation process across multiple GPUs.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/generate-help.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=2 generate.py --outdir=out --seeds=0-999 --batch=64 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Running Quick Setup Script for Cloudflare R2 and Worker Deployment\nDESCRIPTION: Simple setup script command to create R2 bucket and deploy the worker automatically.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare R2 Bucket in Bash\nDESCRIPTION: This script creates an R2 bucket in Cloudflare using the API. It loads credentials from a previously created file and makes an API call to create the bucket.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/TODO.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# setup-cloudflare-r2.sh\n\n# Load credentials\nsource ~/.cloudflare-credentials\n\n# Check for required parameters\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 <account_id> <bucket_name>\"\n    exit 1\nfi\n\nACCOUNT_ID=$1\nBUCKET_NAME=$2\n\n# Create R2 bucket\necho \"Creating R2 bucket: $BUCKET_NAME\"\nCREATE_RESPONSE=$(curl -s -X PUT \"https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/r2/buckets/$BUCKET_NAME\" \\\n     -H \"Authorization: Bearer $CF_API_TOKEN\" \\\n     -H \"Content-Type: application/json\")\n\nif echo \"$CREATE_RESPONSE\" | grep -q '\"success\":true'; then\n    echo \"R2 bucket created successfully\"\nelse\n    echo \"R2 bucket creation failed\"\n    echo \"$CREATE_RESPONSE\"\n    exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Tunnel in Bash\nDESCRIPTION: This script installs cloudflared, creates a tunnel, sets up DNS records, and configures a systemd service. It also creates proper ingress rules for the tunnel and handles DNS record creation via the Cloudflare API.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/TODO.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# setup-cloudflare-tunnel.sh\n\n# Check if script is run with required arguments\nif [ \"$#\" -ne 3 ]; then\n    echo \"Usage: $0 <subdomain> <domain> <local_port>\"\n    echo \"Example: $0 image-origin pollinations.ai 16384\"\n    exit 1\nfi\n\nSUBDOMAIN=$1\nDOMAIN=$2\nLOCAL_PORT=$3\nHOSTNAME=\"${SUBDOMAIN}.${DOMAIN}\"\n\n# Install cloudflared if not present\nif ! command -v cloudflared &> /dev/null; then\n    echo \"Installing cloudflared...\"\n    curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n    sudo dpkg -i cloudflared.deb\n    rm cloudflared.deb\nfi\n\n# Login to Cloudflare (this will open a browser)\necho \"Please login to Cloudflare...\"\ncloudflared tunnel login\n\n# Create new tunnel\necho \"Creating tunnel...\"\nTUNNEL_NAME=\"${SUBDOMAIN}.${DOMAIN}\"\nTUNNEL_ID=$(cloudflared tunnel create \"$TUNNEL_NAME\" | grep -oP 'Created tunnel \\K[a-f0-9-]+')\necho \"Tunnel created with ID: $TUNNEL_ID\"\n\n# Create config file\necho \"Creating config file...\"\nmkdir -p ~/.cloudflared\ncat > ~/.cloudflared/config.yml << EOL\ntunnel: ${TUNNEL_ID}\ncredentials-file: /home/ubuntu/.cloudflared/${TUNNEL_ID}.json\n\ningress:\n  - hostname: ${HOSTNAME}\n    service: http://localhost:${LOCAL_PORT}\n  - service: http_status:404\nEOL\n\n# Create systemd service\necho \"Creating systemd service...\"\nsudo bash -c \"cat > /etc/systemd/system/cloudflared.service << EOL\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nUser=$USER\nExecStart=/usr/local/bin/cloudflared tunnel run ${TUNNEL_ID}\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOL\"\n\n# Start and enable the service\necho \"Starting cloudflared service...\"\nsudo systemctl daemon-reload\nsudo systemctl enable cloudflared\nsudo systemctl start cloudflared\n\n# Create DNS record using Cloudflare API\nif [ -f ~/.cloudflare-credentials ]; then\n    source ~/.cloudflare-credentials\n    \n    echo \"Creating DNS record for ${HOSTNAME}...\"\n    # Get zone ID for the domain\n    ZONE_RESPONSE=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones?name=${DOMAIN}\" \\\n         -H \"Authorization: Bearer $CF_API_TOKEN\" \\\n         -H \"Content-Type: application/json\")\n    \n    ZONE_ID=$(echo \"$ZONE_RESPONSE\" | grep -o '\"id\":\"[^\"]*\"' | head -1 | cut -d'\"' -f4)\n    \n    if [ -n \"$ZONE_ID\" ]; then\n        # Create CNAME record\n        DNS_RESPONSE=$(curl -s -X POST \"https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records\" \\\n             -H \"Authorization: Bearer $CF_API_TOKEN\" \\\n             -H \"Content-Type: application/json\" \\\n             --data \"{\\\"type\\\":\\\"CNAME\\\",\\\"name\\\":\\\"$SUBDOMAIN\\\",\\\"content\\\":\\\"${TUNNEL_ID}.cfargotunnel.com\\\",\\\"ttl\\\":1,\\\"proxied\\\":true}\")\n        \n        if echo \"$DNS_RESPONSE\" | grep -q '\"success\":true'; then\n            echo \"DNS record created successfully\"\n        else\n            echo \"DNS record creation failed\"\n            echo \"$DNS_RESPONSE\"\n        fi\n    else\n        echo \"Could not find zone ID for domain: $DOMAIN\"\n    fi\nelse\n    echo \"Cloudflare credentials not found. DNS record must be created manually.\"\n    echo \"Create a CNAME record:\"\n    echo \"   Name: ${SUBDOMAIN}\"\n    echo \"   Target: ${TUNNEL_ID}.cfargotunnel.com\"\n    echo \"   Proxy status: Proxied (Orange cloud)\"\nfi\n\necho \"Setup complete!\"\necho \"Tunnel ID: ${TUNNEL_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Tunnels\nDESCRIPTION: Commands for setting up Cloudflare tunnels for both main service and origin service with specified domains and ports.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./setup-cloudflare-tunnel.sh text pollinations.ai 16385\n./setup-cloudflare-tunnel.sh text-origin pollinations.ai 16385\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline Commands in Bash\nDESCRIPTION: Commands for running the complete pipeline and individual stages of the affiliate list generation process. Includes examples for testing individual components and pipeline stages.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/impact/scripts/get_affiliate_list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode get_affiliates_list.js\n\n./create_affiliate_list.sh\n\n# Example: Generate tracking links only\nnode 1_impact_tracking_links.js > output/intermediate_results/test_output_step1.json\n\n# Example: Generate and enrich tracking links\ncat output/intermediate_results/test_output_step1.json | node 2_impact_tracking_links_enrich.js > output/intermediate_results/test_output_step2.json\n\n# Example: Generate markdown only\n# node 6_generate_markdown.js\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for Portkey API configuration including API key and default provider settings\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/portkey-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Portkey API Configuration\nPORTKEY_API_KEY=your_portkey_api_key_here\nPORTKEY_PROVIDER=openai  # Default provider (optional)\n```\n\n----------------------------------------\n\nTITLE: Generating Audio with Python Requests\nDESCRIPTION: Python implementation for generating audio using the requests library with GET method and proper error handling\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport urllib.parse\n\ntext = \"Generating audio using the GET method is simple for short texts.\"\nvoice = \"echo\" # alloy, echo, fable, onyx, nova, shimmer\noutput_filename = \"generated_audio_get.mp3\"\n\nencoded_text = urllib.parse.quote(text)\nurl = f\"https://text.pollinations.ai/{encoded_text}\"\nparams = {\n    \"model\": \"openai-audio\",\n    \"voice\": voice\n}\n\ntry:\n    response = requests.get(url, params=params)\n    response.raise_for_status()\n\n    if 'audio/mpeg' in response.headers.get('Content-Type', ''):\n        with open(output_filename, 'wb') as f:\n            f.write(response.content)\n        print(f\"Audio saved successfully as {output_filename}\")\n    else:\n        print(\"Error: Expected audio response, but received:\")\n        print(f\"Content-Type: {response.headers.get('Content-Type')}\")\n        print(response.text)\n\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error making TTS GET request: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Running the Worker Locally\nDESCRIPTION: Command to run the Cloudflare Worker locally for development and testing.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Managing N8N Cloudflare Tunnel Service\nDESCRIPTION: SystemD commands for starting, stopping, restarting the Cloudflare tunnel service and viewing its logs.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/n8n/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the service\nsudo systemctl start cloudflared-n8n.service\n\n# Stop the service\nsudo systemctl stop cloudflared-n8n.service\n\n# Restart the service\nsudo systemctl restart cloudflared-n8n.service\n\n# View logs\nsudo journalctl -u cloudflared-n8n.service -f\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Repository\nDESCRIPTION: These commands clone the forked repository locally and create a new branch for changes.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pollinations/repository-name.git\ncd pollinations/pollinator-agent/forks/repository-name\ngit checkout -b add-pollinations-ai\n```\n\n----------------------------------------\n\nTITLE: Downloading DMD2 Model Checkpoint\nDESCRIPTION: Script to download a specific DMD2 model checkpoint from HuggingFace. Requires setting checkpoint name and output path variables.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdxl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_NAME=\"sdxl/sdxl_cond999_8node_lr5e-7_denoising4step_diffusion1000_gan5e-3_guidance8_noinit_noode_backsim_scratch_checkpoint_model_019000\"  # note that the sdxl/ is necessary\nexport OUTPUT_PATH=\"path/to/your/output/folder\"\n\nbash scripts/download_hf_checkpoint.sh $CHECKPOINT_NAME $OUTPUT_PATH\n```\n\n----------------------------------------\n\nTITLE: Creating .dev.vars File for Local Development\nDESCRIPTION: Manually creates a .dev.vars file with required environment variables for local development.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create .dev.vars file manually\necho \"GA_MEASUREMENT_ID=your-ga-measurement-id\" > .dev.vars\necho \"GA_API_SECRET=your-ga-api-secret\" >> .dev.vars\n```\n\n----------------------------------------\n\nTITLE: Generating Images with Pre-trained Models\nDESCRIPTION: Command to generate 64 images using a pre-trained model with specific output configuration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generate 64 images and save them as out/*.png\npython generate.py --outdir=out --seeds=0-63 --batch=64 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech POST Request JSON Body\nDESCRIPTION: Example JSON body structure for making POST requests to the text-to-speech API endpoint\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/APIDOCS.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"openai-audio\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Convert this longer text into speech using the selected voice. This method is better for larger inputs.\"\n    }\n  ],\n  \"voice\": \"nova\",\n  \"private\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Model Checkpoints from Hugging Face\nDESCRIPTION: Script to download model checkpoints from Hugging Face repository. Requires specifying checkpoint name and output path.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdv1.5/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_NAME=\"sdv1.5/laion6.25_sd_baseline_8node_guidance1.75_lr1e-5_seed10_dfake10_from_scratch_fid9.28_checkpoint_model_039000\"  # note that the sdv1.5/ is necessary\nexport OUTPUT_PATH=\"path/to/your/output/folder\"\n\nbash scripts/download_hf_checkpoint.sh $CHECKPOINT_NAME $OUTPUT_PATH\n```\n\n----------------------------------------\n\nTITLE: Sampler Ablation Commands\nDESCRIPTION: Commands to reproduce sampler ablations from the paper's Section 3 with different configurations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Figure 2a, \"Our reimplementation\"\npython generate.py --outdir=out --steps=512 --solver=euler --disc=vp --schedule=vp --scaling=vp \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/baseline/baseline-cifar10-32x32-uncond-vp.pkl\n\n# Figure 2a, \"+ Heun & our {t_i}\"\npython generate.py --outdir=out --steps=128 --solver=heun --disc=edm --schedule=vp --scaling=vp \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/baseline/baseline-cifar10-32x32-uncond-vp.pkl\n\n# Figure 2a, \"+ Our sigma(t) & s(t)\"\npython generate.py --outdir=out --steps=18 --solver=heun --disc=edm --schedule=linear --scaling=none \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/baseline/baseline-cifar10-32x32-uncond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Consolidated Affiliate Data Structure in JavaScript\nDESCRIPTION: JavaScript object structure for the consolidated affiliate data in the affiliates.js file. Each affiliate entry contains detailed metadata including ID, name, product information, audience targeting, and categorization.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: \"unique_id\",\n  name: \"Affiliate Name\",\n  product: \"Product description\",\n  description: \"Detailed description of the affiliate product\",\n  audience: \"Target audience description\",\n  categories: [\"Category1\", \"Category2\"],\n  tags: [\"tag1\", \"tag2\"],  // Optional\n  nsfw: true,              // Optional, for adult content\n  ad_text: \"Custom ad text with {url} placeholder\",  // Optional\n  trackingLink: \"https://example.com/?ref=your_ref_link\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for DMD2 Training\nDESCRIPTION: Bash commands to set up the environment for DMD2 training. It exports necessary variables, creates a checkpoint directory, and downloads the ImageNet dataset.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/imagenet/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_PATH=\"\" # change this to your own checkpoint folder \nexport WANDB_ENTITY=\"\" # change this to your own wandb entity\nexport WANDB_PROJECT=\"\" # change this to your own wandb project\n\nmkdir $CHECKPOINT_PATH\n\nbash scripts/download_imagenet.sh $CHECKPOINT_PATH\n```\n\n----------------------------------------\n\nTITLE: Calculating FID Score with torchrun\nDESCRIPTION: Command to calculate FID (Fréchet Inception Distance) score using pre-generated images against CIFAR-10 reference statistics.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=1 fid.py calc --images=fid-tmp \\\n    --ref=https://nvlabs-fi-cdn.nvidia.com/edm/fid-refs/cifar10-32x32.npz\n```\n\n----------------------------------------\n\nTITLE: Custom Affiliate JSON Data Structure\nDESCRIPTION: JSON schema for defining custom affiliates in the custom_affiliate_list.json file. Each affiliate requires a unique ID, tracking link, and metadata like advertiser name and description.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"unique_id\",\n  \"type\": \"TEXT_LINK\",\n  \"trackingLink\": \"https://example.com/?ref=your_ref_link\",\n  \"landingPageUrl\": \"https://example.com/\",\n  \"advertiserName\": \"Example Company\",\n  \"mobileReady\": \"true\",\n  \"language\": \"ENGLISH\",\n  \"description\": \"Description of the affiliate product\",\n  \"topSeller\": \"false\",\n  \"labels\": \"label1,label2,label3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Image Creation Function in Node.js\nDESCRIPTION: This snippet shows the performance profile of a custom createAndReturnImage function. It appears to be part of the main application logic for generating and processing images.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nFunction: ^createAndReturnImage file:///home/ec2-user/generative_image_url/index.js:129:36\n```\n\n----------------------------------------\n\nTITLE: Computing FID Reference Statistics\nDESCRIPTION: Command to compute FID reference statistics for custom datasets.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython fid.py ref --data=datasets/my-dataset.zip --dest=fid-refs/my-dataset.npz\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Bash\nDESCRIPTION: Command to execute only unit tests located directly in the test directory.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies for ML Project with Diffusion Models\nDESCRIPTION: A requirements file listing Python package dependencies for a machine learning project. The dependencies include PyTorch 2.4.1, Hugging Face's Transformers and Diffusers libraries, acceleration libraries like xformers, model fine-tuning with PEFT, web interfaces (Gradio, FastAPI), computer vision tools, and diffusion model implementations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntorch==2.4.1\ntransformers\nxformers\ndiffusers\naccelerate\npeft\ngradio\nfastapi\nopencv-python\nhidiffusion\ncompel\n```\n\n----------------------------------------\n\nTITLE: ImageNet Dataset Preparation\nDESCRIPTION: Commands to convert ImageNet dataset to 64x64 resolution ZIP format and generate reference statistics.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython dataset_tool.py --source=downloads/imagenet/ILSVRC/Data/CLS-LOC/train \\\n    --dest=datasets/imagenet-64x64.zip --resolution=64x64 --transform=center-crop\npython fid.py ref --data=datasets/imagenet-64x64.zip --dest=fid-refs/imagenet-64x64.npz\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeouts in JavaScript\nDESCRIPTION: JavaScript code showing how to set timeout duration for tests that make API calls.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest.beforeEach(t => {\n    t.timeout(60000); // 60 seconds in milliseconds\n});\n```\n\n----------------------------------------\n\nTITLE: Training and Testing Commands for DMD2\nDESCRIPTION: Example commands for starting training on 64 GPUs and running continuous FID evaluation. Includes detailed parameters for model testing and evaluation.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdv1.5/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# start a training with 64 gpu. we need to run this script on all 8 nodes. \nbash experiments/laion/laion6.25_sd_baseline_8node_guidance1.75_lr1e-5_seed10_dfake10_from_scratch.sh $CHECKPOINT_PATH  $WANDB_ENTITY $WANDB_PROJECT $MASTER_IP\n\n# on some other machine, start a testing process that continually reads from the checkpoint folder and evaluate the FID \n# Change TIMESTAMP_TBD to the real one\npython main/test_folder_sd.py   --folder $CHECKPOINT_PATH/laion6.25_sd_baseline_8node_guidance1.75_lr1e-5_seed10_dfake10_from_scratch/TIMESTAMP_TBD \\\n    --wandb_name test_laion6.25_sd_baseline_8node_guidance1.75_lr1e-5_seed10_dfake10_from_scratch \\\n    --wandb_entity $WANDB_ENTITY \\\n    --wandb_project $WANDB_PROJECT \\\n    --image_resolution 512 \\\n    --latent_resolution 64 \\\n    --num_train_timesteps 1000 \\\n    --test_visual_batch_size 64 \\\n    --per_image_object 16 \\\n    --seed 10 \\\n    --anno_path $CHECKPOINT_PATH/captions_coco14_test.pkl \\\n    --eval_res 256 \\\n    --ref_dir $CHECKPOINT_PATH/val2014 \\\n    --total_eval_samples 30000 \\\n    --model_id \"runwayml/stable-diffusion-v1-5\" \\\n    --pred_eps\n```\n\n----------------------------------------\n\nTITLE: Image Creation Function in JavaScript\nDESCRIPTION: Custom createAndReturnImage function from index.js that creates and returns image objects. This appears to be an application-specific function that calls into the Jimp library.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateAndReturnImage file:///home/ec2-user/generative_image_url/index.js:129:36\n```\n\n----------------------------------------\n\nTITLE: Dataset-Specific Generation Commands\nDESCRIPTION: Optimized generation commands for different datasets with recommended sampling parameters.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For CIFAR-10 at 32x32, use deterministic sampling with 18 steps (NFE = 35)\npython generate.py --outdir=out --steps=18 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n\n# For FFHQ and AFHQv2 at 64x64, use deterministic sampling with 40 steps (NFE = 79)\npython generate.py --outdir=out --steps=40 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-ffhq-64x64-uncond-vp.pkl\n\n# For ImageNet at 64x64, use stochastic sampling with 256 steps (NFE = 511)\npython generate.py --outdir=out --steps=256 --S_churn=40 --S_min=0.05 --S_max=50 --S_noise=1.003 \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-imagenet-64x64-cond-adm.pkl\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logs\nDESCRIPTION: Command to enable debug logging for Portkey integration\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/portkey-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=pollinations:portkey* npm run start\n```\n\n----------------------------------------\n\nTITLE: Executing Google Cloud Auth Setup Script in Bash\nDESCRIPTION: This snippet shows how to make the setup script executable and run it to automate the Google Cloud authentication setup process.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Make the script executable if it's not already\nchmod +x setup-google-cloud-auth.sh\n\n# Run the setup script\nsudo ./setup-google-cloud-auth.sh\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Command to run the Portkey integration test suite\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/portkey-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:pattern \"test/portkey.integration.test.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Environment Variables\nDESCRIPTION: This snippet shows the environment variables that need to be added to the .env file for Google Cloud authentication.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_APPLICATION_CREDENTIALS=/absolute/path/to/credentials/google_vertex_key.json\nGCLOUD_PROJECT_ID=YOUR_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: OpenRouter Tools Implementation\nDESCRIPTION: Example implementation of function calling with the OpenRouter client, including tool definitions and text generation function.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/function-calling.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Function definitions (tools)\nexport const OPENROUTER_TOOLS = {\n  weather: [\n    {\n      type: \"function\",\n      function: {\n        name: \"get_weather\",\n        description: \"Get the current weather for a location\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            location: {\n              type: \"string\",\n              description: \"The location to get weather for\"\n            }\n          },\n          required: [\"location\"]\n        }\n      }\n    }\n  ]\n};\n\n// Example function to use function calling\nexport async function generateTextWithFunctions(messages, toolType = 'weather') {\n  const tools = OPENROUTER_TOOLS[toolType] || [];\n  \n  const response = await generateTextOpenRouter(messages, {\n    tools,\n    tool_choice: 'auto'\n  });\n  \n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Function Calling Tests in Bash\nDESCRIPTION: Commands for running various function calling related tests.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:file -- test/simpleFunctionCalling.test.js\nnpm run test:file -- test/toolCalls.test.js\nnpm run test:pattern -- \"**/tool*.test.js\" \"**/function*.test.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Wrangler.toml\nDESCRIPTION: Configuration example for setting Google Analytics credentials directly in the wrangler.toml file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\nGA_MEASUREMENT_ID = \"G-XXXXXXXXXX\"  # Replace with your GA4 measurement ID\nGA_API_SECRET = \"XXXXXXXXXX\"        # Replace with your GA4 API secret\n```\n\n----------------------------------------\n\nTITLE: Checking N8N Tunnel Status\nDESCRIPTION: Commands to make the status check script executable and run it to verify the tunnel status.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/n8n/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x check-status.sh\n./check-status.sh\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Setting Google Cloud Project in Bash\nDESCRIPTION: This snippet shows how to log in to Google Cloud and set the project using gcloud commands.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/auth/GOOGLE_CLOUD_AUTH.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Log in to Google Cloud\ngcloud auth login\n\n# Set your project\ngcloud config set project YOUR_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Running the Affiliate Pipeline Script with Node.js\nDESCRIPTION: Command to execute the main affiliate list generation script. This launches the complete pipeline that fetches, enriches and categorizes affiliate data.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode impact/scripts/get_affiliate_list/get_affiliates_list.js\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Bash\nDESCRIPTION: Basic command to execute all tests in the project using npm.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Continuous FID Evaluation for DMD2 Training\nDESCRIPTION: Python command to start a testing process that continuously evaluates the FID score of the model during training. It reads from the checkpoint folder and uses Weights & Biases for logging.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/imagenet/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main/test_folder.py \\\n    --folder $CHECKPOINT_PATH/imagenet_gan_classifier_genloss3e-3_diffusion1000_lr2e-6_scratch/TIMESTAMP_TBD \\\n    --wandb_name test_imagenet_gan_classifier_genloss3e-3_diffusion1000_lr2e-6_scratch \\\n    --wandb_entity $WANDB_ENTITY \\\n    --wandb_project $WANDB_PROJECT \\\n    --resolution 64 --label_dim 1000  \\\n    --ref_path $CHECKPOINT_PATH/imagenet_fid_refs_edm.npz \\\n    --detector_url $CHECKPOINT_PATH/inception-2015-12-05.pkl \n```\n\n----------------------------------------\n\nTITLE: Training DDPM++ Model on CIFAR-10 Example Command\nDESCRIPTION: Example command demonstrating how to train a DDPM++ model on the CIFAR-10 dataset using 8 GPUs with torchrun distributed training.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/train-help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=8 train.py --outdir=training-runs \\\n    --data=datasets/cifar10-32x32.zip --cond=1 --arch=ddpmpp\n```\n\n----------------------------------------\n\nTITLE: AFHQv2 Dataset Preparation\nDESCRIPTION: Commands to convert AFHQv2 dataset to 64x64 resolution ZIP format and generate reference statistics.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython dataset_tool.py --source=downloads/afhqv2 \\\n    --dest=datasets/afhqv2-64x64.zip --resolution=64x64\npython fid.py ref --data=datasets/afhqv2-64x64.zip --dest=fid-refs/afhqv2-64x64.npz\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Impact Publisher API in .env file\nDESCRIPTION: Configuration for the Impact Publisher API credentials including Account SID, Auth Token, and API base URL. These environment variables are essential for authenticating with the Impact API.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMPACT_ACCOUNT_SID=YourActualAccountSid\nIMPACT_AUTH_TOKEN=YourActualAuthToken\nIMPACT_API_BASE_URL=https://api.impact.com\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of LLM Integrations\nDESCRIPTION: A formatted table listing various projects that integrate with Pollinations.AI, including project names, descriptions, creators, and relevant links\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/README-pollinations.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Project | Description | Creator | Links |\n|---------|-------------|---------|-------|\n```\n\n----------------------------------------\n\nTITLE: Using the Deployment Script\nDESCRIPTION: Alternative deployment method using a script that loads environment variables, creates the R2 bucket, configures local development, and deploys the worker.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cloudflare-cache\n./deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Images for FID Calculation using Torchrun\nDESCRIPTION: Command to generate 50,000 images using torchrun with specific model parameters and save them to fid-tmp directory\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/fid-help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=1 generate.py --outdir=fid-tmp --seeds=0-49999 --subdirs \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Visualizing Monthly Growth Rate Metrics with Mermaid\nDESCRIPTION: This Mermaid graph displays the monthly growth rate metrics for the Pollinations project, including user growth, API usage, integration rate, and community growth percentages.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/operations/dataroom/06_traction_metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Growth Metrics] --> B[User Growth: XX%]\n    A --> C[API Usage: XX%]\n    A --> D[Integration Rate: XX%]\n    A --> E[Community Growth: XX%]\n```\n\n----------------------------------------\n\nTITLE: FID Calculation Command\nDESCRIPTION: Command to generate images for FID (Fréchet Inception Distance) calculation using torchrun.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Generate 50000 images and save them as fid-tmp/*/*.png\ntorchrun --standalone --nproc_per_node=1 generate.py --outdir=fid-tmp --seeds=0-49999 --subdirs \\\n    --network=https://nvlabs-fi-cdn.nvidia.com/edm/pretrained/edm-cifar10-32x32-cond-vp.pkl\n```\n\n----------------------------------------\n\nTITLE: Cloning the Pollinations React Documentation Repository\nDESCRIPTION: Command to clone the repository containing the Pollinations React documentation and examples, followed by changing into the project directory.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/diogo-karma/pollinations-react-doc\ncd pollinations-react-doc\n```\n\n----------------------------------------\n\nTITLE: Formatting Entry for awesome-cyberai4k12 Repository\nDESCRIPTION: Markdown format example showing how to list Pollinations.AI in the awesome-cyberai4k12 repository, emphasizing educational and accessibility features.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [Pollinations.AI](https://pollinations.ai/) - Free, no-signup AI platform for text, image, and audio generation, perfect for classroom use with no API keys required\n```\n\n----------------------------------------\n\nTITLE: Calculating FID Score using Torchrun\nDESCRIPTION: Command to calculate FID score by comparing generated images against reference statistics from CIFAR10 dataset\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/fid-help.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=1 fid.py calc --images=fid-tmp \\\n    --ref=https://nvlabs-fi-cdn.nvidia.com/edm/fid-refs/cifar10-32x32.npz\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Authentication in Bash\nDESCRIPTION: This script handles Cloudflare authentication and API token management. It verifies the API token and saves credentials for use in other scripts.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/TODO.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# setup-cloudflare-auth.sh\n\n# Check for required environment variables\nif [ -z \"$CF_API_TOKEN\" ]; then\n    echo \"Error: CF_API_TOKEN environment variable is not set\"\n    echo \"Please create an API token with appropriate permissions at https://dash.cloudflare.com/profile/api-tokens\"\n    exit 1\nfi\n\n# Verify the token works\necho \"Verifying Cloudflare API token...\"\nVERIFY_RESPONSE=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/user/tokens/verify\" \\\n     -H \"Authorization: Bearer $CF_API_TOKEN\" \\\n     -H \"Content-Type: application/json\")\n\nif echo \"$VERIFY_RESPONSE\" | grep -q '\"success\":true'; then\n    echo \"API token is valid\"\nelse\n    echo \"API token verification failed\"\n    echo \"$VERIFY_RESPONSE\"\n    exit 1\nfi\n\n# Save token for use in other scripts\necho \"export CF_API_TOKEN=$CF_API_TOKEN\" > ~/.cloudflare-credentials\necho \"Cloudflare credentials saved to ~/.cloudflare-credentials\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Text Generation API Server\nDESCRIPTION: Command to start the server after installation and configuration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Formatting Entry for public-apis Repository\nDESCRIPTION: Markdown table format example showing how to list Pollinations.AI in the public-apis repository with details about API authentication and features.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| [Pollinations.AI](https://pollinations.ai) | Free, no-signup APIs for text, image, and audio generation | No | Yes | Yes |\n```\n\n----------------------------------------\n\nTITLE: Forking Repository using GitHub API\nDESCRIPTION: This command forks a repository to the Pollinations organization GitHub account using the GitHub API.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmcp0_fork_repository --owner=\"repository-owner\" --repo=\"repository-name\" --organization=\"pollinations\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers full access to the site. Uses standard robots.txt syntax to define unrestricted access for all user agents.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Analyzing Image Resizing Performance in Node.js\nDESCRIPTION: This snippet profiles the performance of image resizing operations. It focuses on the Resize._resizeWidthRGBChannels method from the @jimp/plugin-resize library, which is crucial for resizing images efficiently.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *Resize._resizeWidthRGBChannels /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:114:53\nFunction: ^Resize.resizeWidthRGBA /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:287:45\nFunction: ^Resize.resize /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:343:36\nFunction: ^resize /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/index.js:34:30\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Integration Setup\nDESCRIPTION: Command to install and configure the MCP server for Claude Desktop integration\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run the installation script\nnpx @pollinations/model-context-protocol install-claude-mcp\n```\n\n----------------------------------------\n\nTITLE: Analyzing Node.js Performance Profile for Image Processing Libraries\nDESCRIPTION: This profile data shows the CPU usage of various image processing functions. The most intensive operations appear to be in JPEG encoding (jpeg-js library), PNG processing (pngjs library), and Jimp image manipulation. The data is formatted as a CPU profile showing percentages of execution time for each function call.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n      5   50.0%          LazyCompile: ~encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n      5  100.0%            LazyCompile: ~<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\n      5   50.0%          Function: ^encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n      5  100.0%            Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\n     10   12.0%      LazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n      9   90.0%        Function: ^encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n      9  100.0%          Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\n      6   66.7%            Function: ^getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n      3   33.3%            LazyCompile: ~getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n      1   10.0%        LazyCompile: ~encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n      1  100.0%          LazyCompile: ~<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\n      1  100.0%            LazyCompile: ~getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n      5    6.0%      Function: ^_copyActual node:buffer:243:21\n      4   80.0%        Function: ^concat node:buffer:536:32\n      2   50.0%          LazyCompile: ~exports.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse-sync.js:7:27\n      2  100.0%            LazyCompile: ~module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n      1   25.0%          LazyCompile: ~module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n      1  100.0%            LazyCompile: ~exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n      1   25.0%          Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/phin/lib/phin.compiled.js:1:1891\n      1  100.0%            Function: ^emit node:events:475:44\n      1   20.0%        LazyCompile: ~concat node:buffer:536:32\n      1  100.0%          LazyCompile: ~Inflate._processChunk /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-inflate.js:47:43\n      1  100.0%            LazyCompile: ~zlibBufferSync /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-inflate.js:138:24\n      4    4.8%      LazyCompile: ~<anonymous> /home/ec2-user/generative_image_url/node_modules/node-fetch/lib/index.js:269:47\n      4  100.0%        /home/ec2-user/.nvm/versions/node/v16.16.0/bin/node\n      4  100.0%          Function: ^processTicksAndRejections node:internal/process/task_queues:68:35\n      2    2.4%      LazyCompile: *writeBits /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:254:21\n      2  100.0%        Function: ^processDU /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:569:21\n      2  100.0%          LazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n      2  100.0%            Function: ^encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n      1    1.2%      LazyCompile: ~statSync node:fs:1543:18\n      1  100.0%        LazyCompile: ~tryStatSync node:internal/modules/esm/resolve:189:3\n      1  100.0%          LazyCompile: ~finalizeResolution node:internal/modules/esm/resolve:397:28\n      1  100.0%            LazyCompile: ~moduleResolve node:internal/modules/esm/resolve:988:23\n      1    1.2%      LazyCompile: ~readPackage node:internal/modules/cjs/loader:290:21\n      1  100.0%        LazyCompile: ~resolveExports node:internal/modules/cjs/loader:472:24\n      1  100.0%          LazyCompile: ~Module._findPath node:internal/modules/cjs/loader:494:28\n      1  100.0%            LazyCompile: ~Module._resolveFilename node:internal/modules/cjs/loader:848:35\n      1    1.2%      LazyCompile: ~getMIMEFromBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:28:27\n      1  100.0%        LazyCompile: ~parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n      1  100.0%          LazyCompile: ~parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:430:32\n      1  100.0%            LazyCompile: ~Jimp /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:215:16\n      1    1.2%      LazyCompile: *Jimp /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:215:16\n      1  100.0%        Function: ^compositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n      1  100.0%          LazyCompile: ~getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n      1  100.0%            Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/promisify.js:13:31\n      1    1.2%      Function: ~<anonymous> node:internal/main/run_main_module:1:1\n      1    1.2%      Function: ^nextTick node:internal/process/task_queues:104:18\n      1  100.0%        Function: ^maybeReadMore node:internal/streams/readable:602:23\n      1  100.0%          Function: ^addChunk node:internal/streams/readable:304:18\n      1  100.0%            Function: ^readableAddChunk node:internal/streams/readable:236:26\n      1    1.2%      Function: ^Resize._resizeWidthRGBChannels /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:114:53\n      1  100.0%        LazyCompile: ~Resize.resizeWidthRGBA /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:287:45\n      1  100.0%          LazyCompile: ~Resize.resize /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/modules/resize.js:343:36\n      1  100.0%            LazyCompile: ~resize /home/ec2-user/generative_image_url/node_modules/@jimp/plugin-resize/dist/index.js:34:30\n      1    1.2%      /home/ec2-user/.nvm/versions/node/v16.16.0/bin/node\n      1  100.0%        Function: ^FastBuffer node:internal/buffer:958:14\n      1  100.0%          LazyCompile: ~fromArrayLike node:buffer:480:23\n      1  100.0%            LazyCompile: ~fromObject node:buffer:495:20\n```\n\n----------------------------------------\n\nTITLE: Google AdSense Publisher Configuration String\nDESCRIPTION: A configuration string for Google AdSense that specifies the publisher domain (google.com), publisher ID (pub-5780146691305076), connection type (DIRECT), and authentication token (f08c47fec0942fa0).\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/ads.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle.com, pub-5780146691305076, DIRECT, f08c47fec0942fa0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Text Generation API\nDESCRIPTION: Commands to navigate to the text.pollinations.ai directory and install the required dependencies using npm.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd pollinations/text.pollinations.ai\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Manual AbortController Installation\nDESCRIPTION: Command to manually install AbortController if the polyfill doesn't work\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-abort-controller\n```\n\n----------------------------------------\n\nTITLE: Profiling Image Processing Functions in Node.js\nDESCRIPTION: This snippet shows the performance breakdown of various image processing functions, including PNG parsing, filtering, and bitmap conversion, as well as JPEG encoding. It highlights the most time-consuming operations in the application.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n1    1.1%            Function: ^createAndReturnImage file:///home/ec2-user/generative_image_url/index.js:129:36\n29   24.6%        LazyCompile: ~<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:1249:31\n21   72.4%          LazyCompile: ~composite /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:25:19\n21  100.0%            LazyCompile: ~compositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n8   27.6%          Function: ^composite /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:25:19\n6   75.0%            LazyCompile: ~compositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n2   25.0%            Function: ^compositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n9    7.0%    LazyCompile: *scan /home/ec2-user/generative_image_url/node_modules/@jimp/utils/dist/index.js:43:14\n6   66.7%      Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:1249:31\n6  100.0%        Function: ^composite /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:25:19\n6  100.0%          Function: ^compositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n6  100.0%            Function: ^getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n```\n\n----------------------------------------\n\nTITLE: Memory Operations and Buffer Handling in Node.js\nDESCRIPTION: This snippet focuses on memory operations and buffer handling in Node.js, particularly in the context of image processing. It shows the performance of memcpy operations and buffer creation/manipulation functions.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n106    1.1%  __memcpy_avx_unaligned_erms\n83   78.3%    /home/ec2-user/.nvm/versions/node/v16.16.0/bin/node\n25   30.1%      LazyCompile: *FastBuffer node:internal/buffer:958:14\n18   72.0%        Function: ^fromArrayLike node:buffer:480:23\n17   94.4%          Function: ^fromObject node:buffer:495:20\n17  100.0%            Function: ^from node:buffer:296:28\n1    5.6%          LazyCompile: ~fromObject node:buffer:495:20\n1  100.0%            Function: ^from node:buffer:296:28\n```\n\n----------------------------------------\n\nTITLE: Image Buffer Generation Function in JavaScript\nDESCRIPTION: The getBuffer method from @jimp/core that converts image objects to buffer format. This function is frequently called and triggers JPEG encoding operations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n```\n\n----------------------------------------\n\nTITLE: Profiling PNG Parsing in Node.js\nDESCRIPTION: This snippet shows the performance profile of PNG parsing operations. It focuses on the Filter._reverseFilterLine method from the pngjs library, which is a significant part of the PNG decoding process.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *Filter._reverseFilterLine /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse.js:119:47\nLazyCompile: *SyncReader.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-reader.js:18:40\nFunction: ^exports.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse-sync.js:7:27\nFunction: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n```\n\n----------------------------------------\n\nTITLE: CIFAR-10 Dataset Preparation\nDESCRIPTION: Commands to convert CIFAR-10 dataset to required ZIP format and generate reference statistics.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython dataset_tool.py --source=downloads/cifar10/cifar-10-python.tar.gz \\\n    --dest=datasets/cifar10-32x32.zip\npython fid.py ref --data=datasets/cifar10-32x32.zip --dest=fid-refs/cifar10-32x32.npz\n```\n\n----------------------------------------\n\nTITLE: PNG Processing Performance in Node.js\nDESCRIPTION: This snippet focuses on the performance of PNG processing operations, including bitmap mapping, data filtering, and parsing. It shows the time spent in various functions of the pngjs library.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n127    1.3%  LazyCompile: *pixelBppMapper /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:39:11\n118   92.9%    LazyCompile: *mapImage8Bit /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:173:22\n107   90.7%      Function: ^exports.dataToBitMap /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:201:32\n107  100.0%        Function: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n107  100.0%          Function: ^exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n107  100.0%            Function: ^parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n```\n\n----------------------------------------\n\nTITLE: Image Scanning Function in JavaScript\nDESCRIPTION: The scan function from @jimp/utils/dist that iterates over image data. This function is primarily called from composite operations and represents a significant portion of processing time.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nscan /home/ec2-user/generative_image_url/node_modules/@jimp/utils/dist/index.js:43:14\n```\n\n----------------------------------------\n\nTITLE: JPEG Encoding Performance in Node.js\nDESCRIPTION: This snippet shows the performance of JPEG encoding operations using the jpeg-js library. It highlights the time spent in the processDU and encode functions of the JPEGEncoder.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n10   12.0%      LazyCompile: *processDU /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:569:21\n10  100.0%        LazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n```\n\n----------------------------------------\n\nTITLE: Node.js Bottom-up Profile Analysis\nDESCRIPTION: Hierarchical call stack analysis showing the distribution of CPU time across different functions, with heavy focus on image processing operations in jpeg-js and pngjs libraries.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n [Bottom up (heavy) profile]:\n  Note: percentage shows a share of a particular caller in the total\n  amount of its parent calls.\n  Callers occupying less than 1.0% are not shown.\n\n   ticks parent  name\n   4596   46.8%  /home/ec2-user/.nvm/versions/node/v16.16.0/bin/node\n   3059   66.6%    /home/ec2-user/.nvm/versions/node/v16.16.0/bin/node\n```\n\n----------------------------------------\n\nTITLE: Image Buffer Generation in Jimp for Node.js\nDESCRIPTION: This snippet shows the performance profile of the getBuffer function from the @jimp/core library. It's used to generate a buffer representation of an image for further processing or saving.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nFunction: ^getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n```\n\n----------------------------------------\n\nTITLE: FFHQ Dataset Preparation\nDESCRIPTION: Commands to convert FFHQ dataset to 64x64 resolution ZIP format and generate reference statistics.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython dataset_tool.py --source=downloads/ffhq/images1024x1024 \\\n    --dest=datasets/ffhq-64x64.zip --resolution=64x64\npython fid.py ref --data=datasets/ffhq-64x64.zip --dest=fid-refs/ffhq-64x64.npz\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Files in Bash\nDESCRIPTION: Commands demonstrating how to run specific test files using the test:file script.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Using the test:file script (note the -- before the file path)\nnpm run test:file -- test/simpleFunctionCalling.test.js\n\n# Using the test:file script for multiple files\nnpm run test:file -- test/simpleFunctionCalling.test.js test/toolCalls.test.js\n```\n\n----------------------------------------\n\nTITLE: Image Scanning in Jimp Utils for Node.js\nDESCRIPTION: This snippet shows the performance profile of the scan function from the @jimp/utils library. It's used for iterating over image pixels for various image processing operations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *scan /home/ec2-user/generative_image_url/node_modules/@jimp/utils/dist/index.js:43:14\n```\n\n----------------------------------------\n\nTITLE: JPEG Encoding with processDU Function in Node.js\nDESCRIPTION: This snippet shows the performance profile of the processDU function from the jpeg-js library. It's a key part of the JPEG encoding process, handling discrete cosine transform (DCT) units.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nFunction: ^processDU /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:569:21\n```\n\n----------------------------------------\n\nTITLE: PNG Processing Performance Analysis with pixelBppMapper\nDESCRIPTION: This portion of the profile highlights PNG image processing performance, specifically the pixelBppMapper function from the pngjs library. This function is responsible for mapping pixel data based on bits-per-pixel, with most calls coming through mapImage8Bit and subsequently the dataToBitMap function chain.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n    104    1.1%  LazyCompile: *pixelBppMapper /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:52:11\n     97   93.3%    LazyCompile: *mapImage8Bit /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:173:22\n     79   81.4%      Function: ^exports.dataToBitMap /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:201:32\n     79  100.0%        Function: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n     79  100.0%          Function: ^exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n     79  100.0%            Function: ^parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n     18   18.6%      LazyCompile: ~exports.dataToBitMap /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:201:32\n     15   83.3%        LazyCompile: ~module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n     12   80.0%          LazyCompile: ~exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n     12  100.0%            LazyCompile: ~parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n      3   20.0%          Function: ^exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n      3  100.0%            LazyCompile: ~parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n      3   16.7%        Function: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n      3  100.0%          Function: ^exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n      3  100.0%            LazyCompile: ~parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n      6    5.8%    Function: ^exports.dataToBitMap /home/ec2-user/generative_image_url/node_modules/pngjs/lib/bitmapper.js:201:32\n      6  100.0%      Function: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n      6  100.0%        Function: ^exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n      6  100.0%          Function: ^parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:183:21\n      6  100.0%            Function: ^parseBitmap /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:430:32\n```\n\n----------------------------------------\n\nTITLE: Analyzing JPEG Encoding Performance in Node.js\nDESCRIPTION: This snippet shows the performance profile of JPEG encoding operations. It highlights the time spent in different functions of the jpeg-js library, particularly in the JPEGEncoder.encode and fDCTQuant methods.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\nFunction: ^encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\nFunction: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\nFunction: ^getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n```\n\n----------------------------------------\n\nTITLE: Processing PNG Images with SyncReader in Node.js\nDESCRIPTION: This snippet shows the performance profile of the SyncReader.process function from the pngjs library. It's used for processing PNG images synchronously.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *SyncReader.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-reader.js:18:40\n```\n\n----------------------------------------\n\nTITLE: Dataset Label JSON Structure for StyleGAN2 ADA PyTorch\nDESCRIPTION: JSON structure for storing class labels in the 'dataset.json' file that resides at the dataset root folder. Each entry in the 'labels' array contains a file path relative to the dataset root and the corresponding class label as an integer.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/dataset-tool-help.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"labels\": [\n        [\"00000/img00000000.png\",6],\n        [\"00000/img00000001.png\",9],\n        ... repeated for every image in the datase\n        [\"00049/img00049999.png\",1]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Revenue Growth Streams with Mermaid Graph\nDESCRIPTION: This Mermaid graph illustrates the various revenue sources for the Pollinations project, including Core Services, Premium Features, Enterprise Solutions, and B2B Partnerships. It provides a visual representation of the revenue growth strategy.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/operations/dataroom/07_financials.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Revenue Sources] --> B[Core Services]\n    A --> C[Premium Features]\n    A --> D[Enterprise Solutions]\n    A --> E[B2B Partnerships]\n```\n\n----------------------------------------\n\nTITLE: Image Compositing in Jimp Core for Node.js\nDESCRIPTION: This snippet shows the performance profile of the composite function from the @jimp/core library. It's used for combining multiple images or applying overlays.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nFunction: ^composite /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:25:19\n```\n\n----------------------------------------\n\nTITLE: Visualizing Organizational Structure with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the hierarchical structure of the Pollinations team, showing the leadership team branching into three main departments: AI/ML Development, Platform Architecture, and Community & Operations. Each department further divides into specialized teams handling specific responsibilities.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/operations/dataroom/03_team.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Leadership Team] --> B[AI/ML Development]\n    A --> C[Platform Architecture]\n    A --> D[Community & Operations]\n    \n    B --> E[Model Development]\n    B --> F[AI Infrastructure]\n    \n    C --> G[Backend Services]\n    C --> H[Frontend Development]\n    C --> I[DevOps]\n    \n    D --> J[Developer Relations]\n    D --> K[Partnerships]\n    D --> L[Community Support]\n```\n\n----------------------------------------\n\nTITLE: Using Arazzo Specification for Service Discovery in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the Arazzo specification to discover services based on capabilities and execute example requests. It loads the Arazzo specification and provides functions to find services and retrieve example requests.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript example of an AI agent using arazzo.json\nasync function loadArazzoSpec(domain) {\n  const response = await fetch(`https://${domain}/arazzo.json`);\n  if (response.ok) {\n    return await response.json();\n  }\n  return null;\n}\n\nasync function findServiceByCapability(capability) {\n  const arazzo = await loadArazzoSpec(\"pollinations.ai\");\n\n  // Search for services matching the capability\n  return arazzo.services.filter(service =>\n    service.description.toLowerCase().includes(capability.toLowerCase())\n  );\n}\n\nasync function executeExampleRequest(serviceName) {\n  const arazzo = await loadArazzoSpec(\"pollinations.ai\");\n\n  // Find the service\n  const service = arazzo.services.find(s => s.name === serviceName);\n  if (!service || !service.examples || service.examples.length === 0) {\n    return null;\n  }\n\n  // Get the first example\n  const example = service.examples[0];\n\n  // For GET requests, we can just return the URL\n  if (service.method === \"GET\") {\n    return example.request;\n  }\n\n  // For POST requests, we need the full request details\n  return example.request;\n}\n\n// Example usage\nfindServiceByCapability(\"audio\").then(services => {\n  console.log(\"Services for audio generation:\", services.map(s => s.name));\n\n  if (services.length > 0) {\n    executeExampleRequest(services[0].name).then(request => {\n      console.log(\"Example request:\", request);\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integration Example for awesome-generative-ai\nDESCRIPTION: This markdown snippet shows how to format the Pollinations.AI entry for the image section of the awesome-generative-ai repository.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [Pollinations.AI](https://pollinations.ai/) - Free, no-signup image generation API with no API keys required\n```\n\n----------------------------------------\n\nTITLE: Profiling Pixel Manipulation in Node.js Image Processing\nDESCRIPTION: This snippet shows the performance profile of pixel manipulation operations. It focuses on the getPixelIndex method from the @jimp/core library, which is essential for accessing and modifying individual pixels in an image.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *getPixelIndex /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:713:34\nLazyCompile: *<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:69:69\nLazyCompile: *scan /home/ec2-user/generative_image_url/node_modules/@jimp/utils/dist/index.js:43:14\nFunction: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/index.js:1249:31\n```\n\n----------------------------------------\n\nTITLE: Integration Example for awesome-generative-ai-apis\nDESCRIPTION: This markdown snippet demonstrates how to format the Pollinations.AI entry for the awesome-generative-ai-apis repository.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| [Pollinations.AI](https://pollinations.ai/) | [Link](https://github.com/pollinations/pollinations/blob/master/APIDOCS.md) | N | Pollinations.AI provides free, no-signup APIs for text, image, and audio generation with no API keys required. It offers simple URL-based endpoints, OpenAI-compatible interfaces, and React hooks for easy integration. |\n```\n\n----------------------------------------\n\nTITLE: Bucket Usage Statistics in CSV Format\nDESCRIPTION: Shows statistics for different bucket keys including number of jobs, requests and returns. Data is presented in CSV format with headers and two data rows.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/tableLogs.txt#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nBucket Key,Jobs,Requests,Returns\nturbo-912-512,0,1,1\nturbo-1365-768,1,101,99\n```\n\n----------------------------------------\n\nTITLE: Training DDPM++ Model\nDESCRIPTION: Example command to train a DDPM++ model for class-conditional CIFAR-10 using 8 GPUs.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntorchrun --standalone --nproc_per_node=8 train.py --outdir=training-runs \\\n    --data=datasets/cifar10-32x32.zip --cond=1 --arch=ddpmpp\n```\n\n----------------------------------------\n\nTITLE: Queue Metrics in CSV Format\nDESCRIPTION: Displays queue performance metrics including requests, returns, queue size, pending items and utilization rate. Data is presented in CSV format with headers and one data row.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/tableLogs.txt#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nRequests,Returned,Q-Size,Q-Pending,Q-Utilization\n29,57,0,1,N/I%\n```\n\n----------------------------------------\n\nTITLE: Image Composition Over Background Function in JavaScript\nDESCRIPTION: The compositeBitmapOverBackground function from @jimp/core that handles placing an image over a background. This operation is frequently used before generating image buffers.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ncompositeBitmapOverBackground /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:215:39\n```\n\n----------------------------------------\n\nTITLE: Installing N8N Tunnel Setup Script\nDESCRIPTION: Commands to make the setup script executable and run it to create a new Cloudflare tunnel for N8N.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/n8n/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x setup-n8n-tunnel.sh\n./setup-n8n-tunnel.sh\n```\n\n----------------------------------------\n\nTITLE: Proxy Server Configuration List\nDESCRIPTION: A collection of proxy server configurations with IP addresses, ports, and authentication credentials. Each line follows the format IP:PORT:USERNAME:PASSWORD where the username is 'uqyagbev' and password is 'kajhqlhyhuwj' across all entries.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/webshare_100_proxies.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n94.101.99.49:5598:uqyagbev:kajhqlhyhuwj\n64.137.95.98:6581:uqyagbev:kajhqlhyhuwj\n209.242.202.27:6427:uqyagbev:kajhqlhyhuwj\n64.137.10.246:5896:uqyagbev:kajhqlhyhuwj\n64.137.95.177:6660:uqyagbev:kajhqlhyhuwj\n45.67.0.86:6522:uqyagbev:kajhqlhyhuwj\n64.137.10.17:5667:uqyagbev:kajhqlhyhuwj\n45.131.94.193:6180:uqyagbev:kajhqlhyhuwj\n138.128.148.227:6787:uqyagbev:kajhqlhyhuwj\n45.151.163.33:5786:uqyagbev:kajhqlhyhuwj\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Diffusion Models and Training Environment\nDESCRIPTION: Script to configure environment variables, set up FSDP configs for accelerate launch, and download SDXL base models. Includes system configuration for accelerate package compatibility.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/sdxl/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_PATH=\"\" # change this to your own checkpoint folder \nexport WANDB_ENTITY=\"\" # change this to your own wandb entity\nexport WANDB_PROJECT=\"\" # change this to your own wandb project\nexport MASTER_IP=\"\"  # change this to your own master ip\n\n# Not sure why but we found the following line necessary to work with the accelerate package in our system. \n# Change YOUR_MASTER_IP/YOUR_MASTER_NODE_NAME to the correct value \necho \"YOUR_MASTER_IP \tYOUR_MASTER_NODE_NAME\" | sudo tee -a /etc/hosts\n\n# create a fsdp configs for accelerate launch. change the EXP_NAME to your own experiment name \npython main/sdxl/create_sdxl_fsdp_configs.py --folder fsdp_configs/EXP_NAME  --master_ip $MASTER_IP --num_machines 8  --sharding_strategy 4\nmkdir $CHECKPOINT_PATH\n\nbash scripts/download_sdxl.sh $CHECKPOINT_PATH\n```\n\n----------------------------------------\n\nTITLE: JPEG Encoding Function in JavaScript\nDESCRIPTION: The encode method of JPEGEncoder class that handles conversion of image data to JPEG format. This function is used in the getBuffer method of @jimp/core and represents a significant processing bottleneck.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nJPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n```\n\n----------------------------------------\n\nTITLE: Running EDM with Docker\nDESCRIPTION: Commands to build and run the EDM Docker container for image generation.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the edm:latest image\ndocker build --tag edm:latest .\n\n# Run the generate.py script using Docker:\ndocker run --gpus all -it --rm --user $(id -u):$(id -g) \\\n    -v `pwd`:/scratch --workdir /scratch -e HOME=/scratch \\\n    edm:latest \\\n    python example.py\n```\n\n----------------------------------------\n\nTITLE: Composite Image Processing Function in JavaScript\nDESCRIPTION: Anonymous function from @jimp/core/dist/composite/index.js that handles image composition operations. This is a CPU-intensive function that represents 7% of total execution time when processing image data.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/composite/index.js:69:69\n```\n\n----------------------------------------\n\nTITLE: JPEG Encoding with JPEGEncoder in Node.js\nDESCRIPTION: This snippet shows the performance profile of the JPEGEncoder.encode function from the jpeg-js library. It's the main function responsible for encoding images to JPEG format.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nLazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n```\n\n----------------------------------------\n\nTITLE: Viewing Worker Logs\nDESCRIPTION: Command to view logs from the deployed Cloudflare Worker.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler tail\n```\n\n----------------------------------------\n\nTITLE: Node.js Function Call Profile Data\nDESCRIPTION: Performance profiling data showing the execution hierarchy and timing of various Node.js functions, particularly those related to image processing with Jimp and buffer operations. The data includes function names, file locations, and percentage of total execution time.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1  100.0%            Function: ^Module._load node:internal/modules/cjs/loader:757:24\n1    2.6%        Function: ^ClientRequest node:_http_client:112:23\n1  100.0%          Function: ^request node:http:95:17\n1  100.0%            LazyCompile: ~<anonymous> /home/ec2-user/generative_image_url/node_modules/node-fetch/lib/index.js:1437:36\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloudflare Tunnel for Origin Service\nDESCRIPTION: Command to run the Cloudflare tunnel setup script, connecting the local image generation service (running on port 16384) to the image-origin.pollinations.ai domain.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./setup-cloudflare-tunnel.sh image-origin pollinations.ai 16384\n```\n\n----------------------------------------\n\nTITLE: Node.js Performance Profile Stack Trace\nDESCRIPTION: Performance profiling data showing the execution stack trace for image processing operations. Key components include JPEG encoding, buffer management, and HTTP request handling. The trace shows heavy usage of the Jimp image processing library and node-fetch for HTTP requests.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n     66    2.2%      LazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n     50   75.8%        Function: ^encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:793:16\n     50  100.0%          Function: ^<anonymous> /home/ec2-user/generative_image_url/node_modules/@jimp/jpeg/dist/index.js:25:72\n     36   72.0%            Function: ^getBuffer /home/ec2-user/generative_image_url/node_modules/@jimp/core/dist/utils/image-bitmap.js:226:19\n```\n\n----------------------------------------\n\nTITLE: Computing Dataset Reference Statistics\nDESCRIPTION: Command to compute and save reference statistics for a custom dataset\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/third_party/edm/docs/fid-help.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython fid.py ref --data=datasets/my-dataset.zip --dest=fid-refs/my-dataset.npz\n```\n\n----------------------------------------\n\nTITLE: Image Processing Performance Analysis - Node.js Profiler Output\nDESCRIPTION: Profiler output showing function call hierarchy and execution times for image processing operations. Major hotspots include JPEG encoding (jpeg-js), PNG processing (pngjs), and Jimp image manipulation operations.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n     12   11.8%        LazyCompile: ~zlibBufferSync /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-inflate.js:138:24\n     12  100.0%          Function: ^inflateSync /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-inflate.js:154:21\n     12  100.0%            Function: ^module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n     92    3.0%      LazyCompile: *processDU /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:569:21\n     92  100.0%        LazyCompile: *JPEGEncoder.encode /home/ec2-user/generative_image_url/node_modules/jpeg-js/lib/encoder.js:628:25\n```\n\n----------------------------------------\n\nTITLE: Downloading DMD2 Checkpoints from Hugging Face\nDESCRIPTION: Bash script to download DMD2 model checkpoints from Hugging Face. It sets environment variables for the checkpoint name and output path, then calls a download script.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/image_gen_dmd2/experiments/imagenet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CHECKPOINT_NAME=\"imagenet/imagenet_gan_classifier_genloss3e-3_diffusion1000_lr2e-6_scratch_fid1.51_checkpoint_model_193500\"  # note that the imagenet/ is necessary\nexport OUTPUT_PATH=\"path/to/your/output/folder\"\n\nbash scripts/download_hf_checkpoint.sh $CHECKPOINT_NAME $OUTPUT_PATH\n```\n\n----------------------------------------\n\nTITLE: PNG Filtering and Parsing in Node.js\nDESCRIPTION: This snippet shows the performance of PNG filtering and parsing operations, particularly the unfiltering process for PNG type 4 filters. It highlights the time spent in various functions of the pngjs library's filter parsing module.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n121    1.2%  LazyCompile: *Filter._unFilterType4 /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse.js:103:43\n120   99.2%    Function: ^Filter._reverseFilterLine /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse.js:119:47\n87   72.5%      Function: ^SyncReader.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/sync-reader.js:18:40\n53   60.9%        LazyCompile: ~exports.process /home/ec2-user/generative_image_url/node_modules/pngjs/lib/filter-parse-sync.js:7:27\n53  100.0%          LazyCompile: ~module.exports /home/ec2-user/generative_image_url/node_modules/pngjs/lib/parser-sync.js:16:26\n53  100.0%            LazyCompile: ~exports.read /home/ec2-user/generative_image_url/node_modules/pngjs/lib/png-sync.js:8:24\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Module Directory Structure\nDESCRIPTION: Directory structure layout for the cache module showing the organization of files including main exports, memory cache, Cloudflare cache, embedding utilities, and configuration.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/docs/cloudflare-caching-implementation-plan.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n  cache/\n    index.js             # Main exports and factory functions\n    memoryCache.js       # Pure functions for in-memory caching (existing)\n    cloudflareCache.js   # Pure functions for Cloudflare-based caching (new)\n    embeddingUtils.js    # Utilities for generating and comparing embeddings\n    config.js            # Configuration loading from environment\n```\n\n----------------------------------------\n\nTITLE: Cloning the Pollinations.ai Repository\nDESCRIPTION: Command to clone the Pollinations.ai GitHub repository to your local machine.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pollinations/pollinations\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Wrangler CLI\nDESCRIPTION: Commands to set environment variables using the Wrangler CLI.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/cloudflare-cache/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwrangler secret put GA_MEASUREMENT_ID\nwrangler secret put GA_API_SECRET\n```\n\n----------------------------------------\n\nTITLE: Viewing README.md File\nDESCRIPTION: This command displays the content of the README.md file in the main Pollinations repository.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat /path/to/pollinations/README.md\n```\n\n----------------------------------------\n\nTITLE: Installing and Running MCP Server in Bash\nDESCRIPTION: This bash script demonstrates how to install and run the Model Context Protocol (MCP) server for Pollinations.AI. The MCP server acts as a bridge between AI assistants and Pollinations.AI APIs, enabling direct image and audio generation.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations.ai/public/llm-metadata-standards.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pollinations/model-context-protocol\n\nnpx @pollinations/model-context-protocol\n```\n\n----------------------------------------\n\nTITLE: C++ Entry Points Performance Analysis\nDESCRIPTION: Performance profiling data showing CPU ticks and percentage distribution across various C++ functions, with __lll_unlock_wake and memory operations consuming the most resources.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/image.pollinations.ai/profile.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n [C++ entry points]:\n   ticks    cpp   total   name\n    179   36.1%    1.8%  __lll_unlock_wake\n     83   16.7%    0.8%  __memcpy_avx_unaligned_erms\n     32    6.5%    0.3%  fwrite\n```\n\n----------------------------------------\n\nTITLE: PR Tracking Table Format\nDESCRIPTION: This markdown snippet shows the format for tracking pull requests in the pr-tracking.md file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## PR Tracking\n\n| Repository | PR Link | Status | Date | Notes |\n|------------|---------|--------|------|-------|\n| [repo-name](https://github.com/owner/repo) | [PR #X](https://github.com/owner/repo/pull/X) (by [pollinations](https://github.com/pollinations)) | Open | YYYY-MM-DD | Added Pollinations.AI to [section] |\n```\n\n----------------------------------------\n\nTITLE: Installing Portkey Gateway via NPX\nDESCRIPTION: Command to install and run the Portkey gateway locally on port 8787\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/docs/portkey-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install and run the Portkey gateway locally\nnpx @portkey-ai/gateway\n```\n\n----------------------------------------\n\nTITLE: Main Philosophical Concepts in Markdown\nDESCRIPTION: Structured documentation of Gurdjieff's core philosophical concepts including fundamental principles, human nature understanding, and methods for self-development.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/personas/backgroundKnowledge/347159565-Gurdjieff-s-Confessions.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Gurdjieff's Expanded Concepts and Key Quotes\n\n## Fundamental Principles\n\n1. Integration of Eastern and Western knowledge\n   - Eastern theory combined with Western practical application\n   - Emphasis on collecting fragments of ancient wisdom\n\n2. Importance of self-knowledge and personal development\n   - \"The greatest secret about human nature [is] the power that separates man from it and the way to break through the barriers.\"\n\n3. Concept of human potential and higher consciousness\n   - Humans as \"fallen angels\" with potential for higher development\n   - \"Man could become better than angels by working on himself and purging undesirable elements.\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Generated Image (Python)\nDESCRIPTION: Python function to download an image generated by Pollinations.AI using the API. It takes a prompt as input and saves the resulting image to a file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\ndef download_image(prompt):\n    url = f\"https://pollinations.ai/p/{prompt}\"\n    response = requests.get(url)\n    with open('generated_image.jpg', 'wb') as file:\n        file.write(response.content)\n    print('Image downloaded!')\n\ndownload_image(\"conceptual_isometric_world_of_pollinations_ai_surreal_hyperrealistic_digital_garden\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissive Cross-Domain Access Policy in XML\nDESCRIPTION: This XML document defines a cross-domain policy that allows unrestricted access from any domain without requiring secure connections. It uses the standard DTD from Adobe for cross-domain policies.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/crossdomain.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\n<cross-domain-policy>\n  <allow-access-from domain=\"*\" secure=\"false\"/>\n</cross-domain-policy>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for the affiliate list generator, including Impact API credentials and base URL configuration. These variables should be set in a .env file.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/affiliate/impact/scripts/get_affiliate_list/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIMPACT_ACCOUNT_SID=your_account_sid\nIMPACT_AUTH_TOKEN=your_auth_token\nIMPACT_API_BASE_URL=https://api.impact.com\nIMPACT_MEDIA_PARTNER_PROPERTY_ID=your_media_property_id\nPOLLINATIONS_REFERRER=your_referrer_name (optional)\n```\n\n----------------------------------------\n\nTITLE: Advanced Concepts and Methods in Markdown\nDESCRIPTION: Detailed documentation of Gurdjieff's advanced teachings including the Law of Three, Centers of Human Function, and practical methods for spiritual development.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/personas/backgroundKnowledge/347159565-Gurdjieff-s-Confessions.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Gurdjieff's Advanced Concepts and Practical Methods\n\n## The Law of Three and the Law of Seven\n\n1. The Law of Three (Trinity)\n   - All phenomena result from the interaction of three forces: affirming, denying, and reconciling\n   - Application in understanding personal and cosmic processes\n\n2. The Law of Seven (Octave)\n   - Progress occurs in seven steps with two \"intervals\" where additional effort is needed\n   - Relevance to personal development and understanding of cosmic processes\n```\n\n----------------------------------------\n\nTITLE: Installing Pollinations React Package\nDESCRIPTION: Command to install the Pollinations React hooks package via npm\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pollinations/react\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server for Pollinations React\nDESCRIPTION: Command to start the development server for the Pollinations React documentation project using various package managers.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev # or yarn dev or bun dev or pnpm dev\n```\n\n----------------------------------------\n\nTITLE: MCP Server Update Commands\nDESCRIPTION: Commands for updating the MCP server to resolve AbortController issues and check Node.js version\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @pollinations/model-context-protocol@latest\n# or run with npx\nnpx @pollinations/model-context-protocol@latest\n```\n\n----------------------------------------\n\nTITLE: Installing React-Markdown Package\nDESCRIPTION: Command to install the react-markdown package required for markdown rendering\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-markdown\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pollinations React Project\nDESCRIPTION: Command to install the necessary dependencies for the Pollinations React project using various package managers.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinations-react/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install # or yarn install or bun install or pnpm install\n```\n\n----------------------------------------\n\nTITLE: IP Address List\nDESCRIPTION: A list of network addresses in both IPv4 (e.g., 185.56.171) and IPv6 (e.g., 2001:67c:6ec:203:192:42:116:218) formats.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/blocked_ips.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n185.56.171\n217.64.151\n94.102.51\n212.38.189\n185.117.215\n139.99.8\n104.192.3\n195.80.151\n[...additional IPs...]\n```\n\n----------------------------------------\n\nTITLE: Running Pattern-Matched Tests in Bash\nDESCRIPTION: Commands showing how to run tests matching specific filename patterns.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/text.pollinations.ai/test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests with \"function\" in the filename\nnpm run test:pattern -- \"**/function*.test.js\"\n\n# Run all tests with \"tool\" in the filename\nnpm run test:pattern -- \"**/tool*.test.js\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing User Growth Metrics with Mermaid\nDESCRIPTION: This Mermaid graph illustrates key user growth metrics for the Pollinations project, including monthly active users, platform integrations, and developer community growth.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/operations/dataroom/06_traction_metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Active Users] --> B[50,000+ Monthly Active Users]\n    A --> C[100+ Platform Integrations]\n    A --> D[Growing Developer Community]\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: These commands add changes, commit them with a message, and push to the remote repository.\nSOURCE: https://github.com/pollinations/pollinations/blob/master/pollinator-agent/integration-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.md\ngit commit -m \"Add Pollinations.AI to [relevant section]\"\ngit push -u origin add-pollinations-ai\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Check\nDESCRIPTION: Command to check the current Node.js version installation\nSOURCE: https://github.com/pollinations/pollinations/blob/master/model-context-protocol/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```"
  }
]