[
  {
    "owner": "sass",
    "repo": "sass-site",
    "content": "TITLE: Merging Maps with map.merge() in Sass\nDESCRIPTION: Demonstrates how to use map.merge() to combine two maps, with the second map's values taking precedence for duplicate keys.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$light-weights: (\"lightest\": 100, \"light\": 300);\n$heavy-weights: (\"medium\": 500, \"bold\": 700);\n\n@debug map.merge($light-weights, $heavy-weights);\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$light-weights: (\"lightest\": 100, \"light\": 300)\n$heavy-weights: (\"medium\": 500, \"bold\": 700)\n\n@debug map.merge($light-weights, $heavy-weights)\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n----------------------------------------\n\nTITLE: Variable Scope in Sass\nDESCRIPTION: This example demonstrates variable scope in Sass. Global variables are accessible throughout the stylesheet after declaration, while local variables are only accessible within the block they're declared in.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$global-variable: global value;\n\n.content {\n  $local-variable: local value;\n  global: $global-variable;\n  local: $local-variable;\n}\n\n.sidebar {\n  global: $global-variable;\n\n  // This would fail, because $local-variable isn't in scope:\n  // local: $local-variable;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$global-variable: global value\n\n.content\n  $local-variable: local value\n  global: $global-variable\n  local: $local-variable\n\n\n.sidebar\n  global: $global-variable\n\n  // This would fail, because $local-variable isn't in scope:\n  // local: $local-variable\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in Sass\nDESCRIPTION: This example demonstrates how to define variables in Sass using the $ prefix and reference them in CSS properties. It shows defining a base color variable and using it in a derived variable through the rgba() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$base-color: #c6538c;\n$border-dark: rgba($base-color, 0.88);\n\n.alert {\n  border: 1px solid $border-dark;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$base-color: #c6538c\n$border-dark: rgba($base-color, 0.88)\n\n.alert\n  border: 1px solid $border-dark\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Basic Sass Mixins\nDESCRIPTION: Demonstrates how to define mixins for resetting lists and creating horizontal lists, then using them in a nav element. Shows the syntax for both SCSS and Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin horizontal-list {\n  @include reset-list;\n\n  li {\n    display: inline-block;\n    margin: {\n      left: -2px;\n      right: 2em;\n    }\n  }\n}\n\nnav ul {\n  @include horizontal-list;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin reset-list\n  margin: 0\n  padding: 0\n  list-style: none\n\n\n@mixin horizontal-list\n  @include reset-list\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: 2em\n\n\n\n\nnav ul\n  @include horizontal-list\n```\n\n----------------------------------------\n\nTITLE: Implementing a Higher-Order Function in Sass\nDESCRIPTION: This example demonstrates how to create a higher-order function in Sass that takes a list of numbers and a function as arguments. It applies the given function to each number in the list and returns the results.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n@use 'sass:meta';\n\n@function transform($list, $function) {\n  $result: ();\n  @each $item in $list {\n    $result: list.append($result, meta.call($function, $item));\n  }\n  @return $result;\n}\n\n@function double($number) {\n  @return $number * 2;\n}\n\n.powers {\n  of-two: transform((1, 2, 3, 4), meta.get-function(\"double\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Sass Mixin with Optional Arguments\nDESCRIPTION: Shows how to create a mixin with optional arguments that have default values. This example creates a text replacement mixin with customizable background positioning.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@mixin replace-text($image, $x: 50%, $y: 50%) {\n  text-indent: -99999em;\n  overflow: hidden;\n  text-align: left;\n\n  background: {\n    image: $image;\n    repeat: no-repeat;\n    position: $x $y;\n  }\n}\n\n.mail-icon {\n  @include replace-text(url(\"/images/mail.svg\"), 0);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin replace-text($image, $x: 50%, $y: 50%)\n  text-indent: -99999em\n  overflow: hidden\n  text-align: left\n\n  background:\n    image: $image\n    repeat: no-repeat\n    position: $x $y\n\n.mail-icon\n  @include replace-text(url(\"/images/mail.svg\"), 0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Map Values with map.get() in Sass\nDESCRIPTION: Demonstrates how to use map.get() to access deeply nested values in a map structure.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$config: (a: (b: (c: d)));\n@debug map.get($config, a, b, c); // d\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$config: (a: (b: (c: d)))\n@debug map.get($config, a, b, c) // d\n```\n\n----------------------------------------\n\nTITLE: Using Parent Selector in Sass for Pseudo-classes and Contextual Styling\nDESCRIPTION: Demonstrates how to use the parent selector (&) to add pseudo-classes to outer selectors, style elements in specific contexts, and use it as an argument to pseudo-class selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/parent-selector.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.alert {\n  // The parent selector can be used to add pseudo-classes to the outer\n  // selector.\n  &:hover {\n    font-weight: bold;\n  }\n\n  // It can also be used to style the outer selector in a certain context, such\n  // as a body set to use a right-to-left language.\n  [dir=rtl] & {\n    margin-left: 0;\n    margin-right: 10px;\n  }\n\n  // You can even use it as an argument to pseudo-class selectors.\n  :not(&) {\n    opacity: 0.8;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.alert\n  // The parent selector can be used to add pseudo-classes to the outer\n  // selector.\n  &:hover\n    font-weight: bold\n\n\n  // It can also be used to style the outer selector in a certain context, such\n  // as a body set to use a right-to-left language.\n  [dir=rtl] &\n    margin-left: 0\n    margin-right: 10px\n\n\n  // You can even use it as an argument to pseudo-class selectors.\n  :not(&)\n    opacity: 0.8\n```\n\n----------------------------------------\n\nTITLE: Defining a Fibonacci Function in Sass\nDESCRIPTION: Creates a function that calculates the Fibonacci number at position n, then uses it to set a sidebar margin. The function builds the Fibonacci sequence using a loop and returns the nth value.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@function fibonacci($n) {\n  $sequence: 0 1;\n  @for $_ from 1 through $n {\n    $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1);\n    $sequence: append($sequence, $new);\n  }\n  @return nth($sequence, length($sequence));\n}\n\n.sidebar {\n  float: left;\n  margin-left: fibonacci(4) * 1px;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@function fibonacci($n)\n  $sequence: 0 1\n  @for $_ from 1 through $n\n    $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1)\n    $sequence: append($sequence, $new)\n  @return nth($sequence, length($sequence))\n\n.sidebar\n  float: left\n  margin-left: fibonacci(4) * 1px\n```\n\n----------------------------------------\n\nTITLE: Using @forward in Sass for Library Authors\nDESCRIPTION: Shows how library authors can use @forward to expose APIs from multiple files. The example demonstrates forwarding functions, variables, and mixins from separate files.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// bootstrap.scss\n@forward \"functions\";\n@forward \"variables\";\n@forward \"mixins\";\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Channels in SCSS\nDESCRIPTION: Demonstrates using color.adjust() to modify color channels by fixed amounts. Shows adjustments in different color spaces including RGB, LAB, and OKLCH.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.adjust(#6b717f, $red: 15); // #7a717f\n@debug color.adjust(lab(40% 30 40), $lightness: 10%, $a: -20); // lab(50% 10 40)\n@debug color.adjust(#d2e1dd, $hue: 45deg, $space: oklch);\n// rgb(209.7987626149, 223.8632000471, 229.3988769575)\n```\n\n----------------------------------------\n\nTITLE: Extracting Map Values in Sass\nDESCRIPTION: Demonstrates using the map.values() function to extract all values from a map into a comma-separated list. The example extracts font weight values from a map of font weight definitions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.values($font-weights); // 400, 500, 700\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.values($font-weights)  // 400, 500, 700\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Map Values with map.get() in Sass\nDESCRIPTION: Demonstrates how to use map.get() to access values in nested maps, including handling of missing keys.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.get($fonts, \"Helvetica\", \"weights\", \"regular\"); // 400\n@debug map.get($fonts, \"Helvetica\", \"colors\"); // null\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.get($fonts, \"Helvetica\", \"weights\", \"regular\") // 400\n@debug map.get($fonts, \"Helvetica\", \"colors\") // null\n```\n\n----------------------------------------\n\nTITLE: Using @for Loop with Variable Interpolation in Sass\nDESCRIPTION: This example demonstrates using a @for loop to create different background colors for list elements. It iterates from 1 through 3, using the loop variable to both select elements with nth-child and calculate progressively lighter background colors using the lighten function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/control/for.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$base-color: #036;\n\n@for $i from 1 through 3 {\n  ul:nth-child(3n + #{$i}) {\n    background-color: lighten($base-color, $i * 5%);\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$base-color: #036\n\n@for $i from 1 through 3\n  ul:nth-child(3n + #{$i})\n    background-color: lighten($base-color, $i * 5%)\n```\n\n----------------------------------------\n\nTITLE: Implementing Extend/Inheritance with Placeholder Classes in Sass\nDESCRIPTION: Demonstrates the use of @extend and placeholder classes to share CSS properties across multiple selectors. Shows how to create reusable message styles with different variations while keeping the compiled CSS clean and efficient.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n/* This CSS will print because %message-shared is extended. */\n%message-shared {\n  border: 1px solid #ccc;\n  padding: 10px;\n  color: #333;\n}\n\n// This CSS won't print because %equal-heights is never extended.\n%equal-heights {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.message {\n  @extend %message-shared;\n}\n\n.success {\n  @extend %message-shared;\n  border-color: green;\n}\n\n.error {\n  @extend %message-shared;\n  border-color: red;\n}\n\n.warning {\n  @extend %message-shared;\n  border-color: yellow;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n/* This CSS will print because %message-shared is extended. */\n%message-shared\n  border: 1px solid #ccc\n  padding: 10px\n  color: #333\n\n// This CSS won't print because %equal-heights is never extended.\n%equal-heights\n  display: flex\n  flex-wrap: wrap\n\n.message\n  @extend %message-shared\n\n.success\n  @extend %message-shared\n  border-color: green\n\n.error\n  @extend %message-shared\n  border-color: red\n\n.warning\n  @extend %message-shared\n  border-color: yellow\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Selectors with @extend in Sass\nDESCRIPTION: Demonstrates how to create and extend placeholder selectors in Sass. The example shows a %toolbelt placeholder that defines common styles which are then extended by .action-buttons and .reset-buttons classes. The placeholder selector itself won't appear in the final CSS output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/placeholder-selectors.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n%toolbelt {\n  box-sizing: border-box;\n  border-top: 1px rgba(#000, .12) solid;\n  padding: 16px 0;\n  width: 100%;\n\n  &:hover { border: 2px rgba(#000, .5) solid; }\n}\n\n.action-buttons {\n  @extend %toolbelt;\n  color: #4285f4;\n}\n\n.reset-buttons {\n  @extend %toolbelt;\n  color: #cddc39;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n%toolbelt\n  box-sizing: border-box\n  border-top: 1px rgba(#000, .12) solid\n  padding: 16px 0\n  width: 100%\n\n  &:hover\n    border: 2px rgba(#000, .5) solid\n\n.action-buttons\n  @extend %toolbelt\n  color: #4285f4\n\n\n.reset-buttons\n  @extend %toolbelt\n  color: #cddc39\n```\n\n----------------------------------------\n\nTITLE: Retrieving Map Values with map.get in Sass\nDESCRIPTION: Demonstrates how to use the map.get function to retrieve values from maps in Sass. The examples show accessing values by key and handling cases where a key isn't found.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.get($font-weights, \"medium\"); // 500\n@debug map.get($font-weights, \"extra-bold\"); // null\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.get($font-weights, \"medium\") // 500\n@debug map.get($font-weights, \"extra-bold\") // null\n```\n\n----------------------------------------\n\nTITLE: Basic @use Rule Usage in Sass\nDESCRIPTION: Demonstrates the basic usage of the @use rule to load modules and include their styles in the compiled CSS output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use 'foundation/code';\n@use 'foundation/lists';\n```\n\n----------------------------------------\n\nTITLE: Getting Map Keys with map.keys() in Sass\nDESCRIPTION: Shows how to use map.keys() to retrieve all keys from a map as a list.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.keys($font-weights); // \"regular\", \"medium\", \"bold\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.keys($font-weights)  // \"regular\", \"medium\", \"bold\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Maps with @each in Sass\nDESCRIPTION: Shows how to use the @each rule to iterate through each key-value pair in a Sass map. The example creates a set of utility classes for different text colors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$theme-colors: (\n  \"success\": #28a745,\n  \"info\": #17a2b8,\n  \"warning\": #ffc107,\n);\n\n@each $name, $color in $theme-colors {\n  .alert-#{$name} {\n    color: $color;\n    background-color: lighten($color, 40%);\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$theme-colors: (\"success\": #28a745, \"info\": #17a2b8, \"warning\": #ffc107)\n\n@each $name, $color in $theme-colors\n  .alert-#{$name}\n    color: $color\n    background-color: lighten($color, 40%)\n```\n\n----------------------------------------\n\nTITLE: Using Index Files in Sass Module Organization\nDESCRIPTION: Shows how to use index files to organize and load multiple Sass modules from a directory. The example demonstrates structuring files in a 'foundation' folder with an index file that imports and forwards other modules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_index.scss\n@use 'code';\n@use 'lists';\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use 'foundation';\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_index.sass\n@use 'code'\n@use 'lists'\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@use 'foundation'\n```\n\nLANGUAGE: css\nCODE:\n```\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n\nul, ol {\n  text-align: left;\n}\nul ul, ol ol {\n  padding-bottom: 0;\n  padding-left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Content Block Usage in Sass Mixins\nDESCRIPTION: Demonstrates how to create and use a mixin with a content block for hover states. The mixin includes disable state handling and allows custom styles to be injected via @content.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_7\n\nLANGUAGE: sass\nCODE:\n```\n@mixin hover {\n  &:not([disabled]):hover {\n    @content;\n  }\n}\n\n.button {\n  border: 1px solid black;\n  @include hover {\n    border-width: 2px;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin hover\n  &:not([disabled]):hover\n    @content\n\n\n\n.button\n  border: 1px solid black\n  @include hover\n    border-width: 2px\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules with @use in Sass\nDESCRIPTION: Shows how to configure a module when loading it with @use by overriding default variable values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// _library.scss\n$-black: #000;\n$-border-radius: 0.25rem;\n$-box-shadow: null;\n\n/// If the user has configured `$-box-shadow`, returns their configured value.\n/// Otherwise returns a value derived from `$-black`.\n@function -box-shadow() {\n  @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15));\n}\n\n@mixin configure($black: null, $border-radius: null, $box-shadow: null) {\n  @if $black {\n    $-black: $black !global;\n  }\n  @if $border-radius {\n    $-border-radius: $border-radius !global;\n  }\n  @if $box-shadow {\n    $-box-shadow: $box-shadow !global;\n  }\n}\n\n@mixin styles {\n  code {\n    border-radius: $-border-radius;\n    box-shadow: -box-shadow();\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use 'library';\n\n@include library.configure(\n  $black: #222,\n  $border-radius: 0.1rem\n);\n\n@include library.styles;\n```\n\n----------------------------------------\n\nTITLE: Variable Scope in Flow Control Statements\nDESCRIPTION: This example shows how variables in flow control statements have special scoping rules. They don't shadow variables at the same level but assign to them directly, making it easier to conditionally assign values to variables.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n$dark-theme: true !default;\n$primary-color: #f8bbd0 !default;\n$accent-color: #6a1b9a !default;\n\n@if $dark-theme {\n  $primary-color: darken($primary-color, 60%);\n  $accent-color: lighten($accent-color, 60%);\n}\n\n.button {\n  background-color: $primary-color;\n  border: 1px solid $accent-color;\n  border-radius: 3px;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$dark-theme: true !default\n$primary-color: #f8bbd0 !default\n$accent-color: #6a1b9a !default\n\n@if $dark-theme\n  $primary-color: darken($primary-color, 60%)\n  $accent-color: lighten($accent-color, 60%)\n\n\n.button\n  background-color: $primary-color\n  border: 1px solid $accent-color\n  border-radius: 3px\n```\n\n----------------------------------------\n\nTITLE: List Join Operation in Sass\nDESCRIPTION: Demonstrates joining two lists together with list.join(), allowing control over separators and bracketing. Supports comma, space, or slash separators and optional bracketing of the result.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px\n@debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def\n@debug list.join(10px, 20px); // 10px 20px\n@debug list.join(10px, 20px, $separator: comma); // 10px, 20px\n@debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def\n@debug list.join([10px], 20px); // [10px 20px]\n@debug list.join(10px, 20px, $bracketed: true); // [10px 20px]\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Content Blocks in Sass\nDESCRIPTION: Shows how to pass arguments to content blocks in mixins and how to accept those arguments in the content block declaration. Demonstrates media query handling with dynamic content based on media type.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_8\n\nLANGUAGE: sass\nCODE:\n```\n@mixin media($types...) {\n  @each $type in $types {\n    @media #{$type} {\n      @content($type);\n    }\n  }\n}\n\n@include media(screen, print) using ($type) {\n  h1 {\n    font-size: 40px;\n    @if $type == print {\n      font-family: Calluna;\n    }\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin media($types...)\n  @each $type in $types\n    @media #{$type}\n      @content($type)\n\n\n\n\n@include media(screen, print) using ($type)\n  h1\n    font-size: 40px\n    @if $type == print\n      font-family: Calluna\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Property Declarations in Sass\nDESCRIPTION: This example demonstrates how to create conditional property declarations that only appear in the compiled CSS under certain conditions. If a property value is null, Sass won't include it in the output CSS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$rounded-corners: false;\n\n.button {\n  border: 1px solid black;\n  border-radius: if($rounded-corners, 5px, null);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$rounded-corners: false\n\n.button\n  border: 1px solid black\n  border-radius: if($rounded-corners, 5px, null)\n```\n\n----------------------------------------\n\nTITLE: Using Argument Lists with Keyword Handling in Sass Mixins\nDESCRIPTION: Shows how to handle arbitrary arguments in mixins, including capturing and processing keyword arguments. This example creates a flexible border mixin that works with multiple syntaxes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/lists.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@mixin border($width, $args...) {\n  border-width: $width;\n  \n  // Extract keyword arguments like $color and $style\n  $kwargs: meta.keywords($args);\n  \n  @if map-has-key($kwargs, color) {\n    border-color: map-get($kwargs, color);\n  }\n  \n  @if map-has-key($kwargs, style) {\n    border-style: map-get($kwargs, style);\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n@mixin border($width, $args...)\n  border-width: $width\n  \n  // Extract keyword arguments like $color and $style\n  $kwargs: meta.keywords($args)\n  \n  @if map-has-key($kwargs, color)\n    border-color: map-get($kwargs, color)\n  \n  @if map-has-key($kwargs, style)\n    border-style: map-get($kwargs, style)\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation with Mixins in Sass\nDESCRIPTION: Example of using interpolation in a mixin to dynamically generate class names and property names based on parameters. The mixin creates an icon positioned at a specified corner with a dynamic filename in the background image.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/interpolation.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin corner-icon($name, $top-or-bottom, $left-or-right) {\n  .icon-#{$name} {\n    background-image: url(\"/icons/#{$name}.svg\");\n    position: absolute;\n    #{$top-or-bottom}: 0;\n    #{$left-or-right}: 0;\n  }\n}\n\n@include corner-icon(\"mail\", top, left);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin corner-icon($name, $top-or-bottom, $left-or-right)\n  .icon-#{$name}\n    background-image: url(\"/icons/#{$name}.svg\")\n    position: absolute\n    #{$top-or-bottom}: 0\n    #{$left-or-right}: 0\n\n\n\n@include corner-icon(\"mail\", top, left)\n```\n\n----------------------------------------\n\nTITLE: Sass Mixin with Arguments for RTL Support\nDESCRIPTION: Defines a mixin that takes arguments to handle right-to-left (RTL) language support. Demonstrates how to use interpolation and pass arguments when including the mixin.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@mixin rtl($property, $ltr-value, $rtl-value) {\n  #{$property}: $ltr-value;\n\n  [dir=rtl] & {\n    #{$property}: $rtl-value;\n  }\n}\n\n.sidebar {\n  @include rtl(float, left, right);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin rtl($property, $ltr-value, $rtl-value)\n  #{$property}: $ltr-value\n\n  [dir=rtl] &\n    #{$property}: $rtl-value\n\n\n\n.sidebar\n  @include rtl(float, left, right)\n```\n\n----------------------------------------\n\nTITLE: Using SassScript Expressions in Sass Property Declarations\nDESCRIPTION: This example demonstrates using Sass variables and expressions within property declarations. A $size variable is defined and used for width and height, with a calculated value for border-radius.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.circle {\n  $size: 100px;\n  width: $size;\n  height: $size;\n  border-radius: $size * 0.5;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.circle\n  $size: 100px\n  width: $size\n  height: $size\n  border-radius: $size * 0.5\n```\n\n----------------------------------------\n\nTITLE: Getting Color Channel Values\nDESCRIPTION: Examples of using color.channel() to extract specific channel values from colors in different color spaces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.channel(hsl(80deg 30% 50%), \"hue\"); // 80deg\n@debug color.channel(hsl(80deg 30% 50%), \"hue\", $space: oklch); // 124.279238779deg\n@debug color.channel(hsl(80deg 30% 50%), \"red\", $space: rgb); // 140.25\n```\n\n----------------------------------------\n\nTITLE: Iterating with @each Using Destructuring in SCSS/SASS\nDESCRIPTION: Demonstrates using @each with destructuring to iterate over a list of lists containing icon definitions. Creates icon styles with different glyphs and sizes based on the data structure.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/control/each.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$icons:\n  \"eye\" \"\\f112\" 12px,\n  \"start\" \"\\f12e\" 16px,\n  \"stop\" \"\\f12f\" 10px;\n\n@each $name, $glyph, $size in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: \"Icon Font\";\n    content: $glyph;\n    font-size: $size;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$icons: \"eye\" \"\\f112\" 12px, \"start\" \"\\f12e\" 16px, \"stop\" \"\\f12f\" 10px\n\n@each $name, $glyph, $size in $icons\n  .icon-#{$name}:before\n    display: inline-block\n    font-family: \"Icon Font\"\n    content: $glyph\n    font-size: $size\n```\n\n----------------------------------------\n\nTITLE: Basic Style Rule Declaration in Sass/SCSS\nDESCRIPTION: Demonstrates the basic syntax for declaring a style rule with multiple properties in both SCSS and Sass formats.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/index.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.button {\n  padding: 3px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n  border: 1px solid #e1e4e8;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.button\n  padding: 3px 10px\n  font-size: 12px\n  border-radius: 3px\n  border: 1px solid #e1e4e8\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Lists with @each in Sass\nDESCRIPTION: Shows how to use the @each control directive to iterate over elements in a list and generate styles for each value. This example creates classes for icons with different themes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/lists.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$themes: \"alto\", \"galaxy\", \"retro\";\n\n@each $theme in $themes {\n  .icon-#{$theme} {\n    background: url(\"/icons/#{$theme}.png\");\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$themes: \"alto\", \"galaxy\", \"retro\"\n\n@each $theme in $themes\n  .icon-#{$theme}\n    background: url(\"/icons/#{$theme}.png\")\n```\n\n----------------------------------------\n\nTITLE: Using Optional Arguments in Sass Functions\nDESCRIPTION: Creates a color inversion function with an optional intensity parameter that defaults to 100%. The function calculates the inverse color by changing the hue and then mixes it with the original color based on the provided amount.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@function invert($color, $amount: 100%) {\n  $inverse: change-color($color, $hue: hue($color) + 180);\n  @return mix($inverse, $color, $amount);\n}\n\n$primary-color: #036;\n.header {\n  background-color: invert($primary-color, 80%);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@function invert($color, $amount: 100%)\n  $inverse: change-color($color, $hue: hue($color) + 180)\n  @return mix($inverse, $color, $amount)\n\n\n$primary-color: #036\n.header\n  background-color: invert($primary-color, 80%)\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Sass\nDESCRIPTION: Shows how to define and use variables in Sass for storing reusable values like colors and font stacks.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$font-stack: Helvetica, sans-serif\n$primary-color: #333\n\nbody\n  font: 100% $font-stack\n  color: $primary-color\n```\n\n----------------------------------------\n\nTITLE: Using the Min Function in Sass Math Module\nDESCRIPTION: Example demonstrating the min function which returns the lowest of one or more numbers. It can handle individual values or use a spread list of values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.min(1px, 4px); // 1px\n\n$widths: 50px, 30px, 100px;\n@debug math.min($widths...); // 30px\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.min(1px, 4px)  // 1px\n\n$widths: 50px, 30px, 100px\n@debug math.min($widths...)  // 30px\n```\n\n----------------------------------------\n\nTITLE: Using string.quote() function in Sass/SCSS\nDESCRIPTION: Demonstrates how to use the string.quote() function to convert strings to quoted strings. Works with both quoted and unquoted input strings.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.quote(Helvetica); // \"Helvetica\"\n@debug string.quote(\"Helvetica\"); // \"Helvetica\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.quote(Helvetica)  // \"Helvetica\"\n@debug string.quote(\"Helvetica\")  // \"Helvetica\"\n```\n\n----------------------------------------\n\nTITLE: Changing Color Channel Values\nDESCRIPTION: Shows usage of color.change() to set specific color channel values. Examples cover RGB, SRGB, and OKLCH color spaces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.change(#6b717f, $red: 100); // #64717f\n@debug color.change(color(srgb 0 0.2 0.4), $red: 0.8, $blue: 0.1);\n// color(srgb 0.8 0.2 0.1)\n@debug color.change(#998099, $lightness: 30%, $space: oklch);\n// rgb(58.0719961509, 37.2631531594, 58.4201613409)\n```\n\n----------------------------------------\n\nTITLE: Basic @forward Usage in SCSS/Sass\nDESCRIPTION: Demonstrates basic usage of @forward rule to expose mixins from a module. Shows how to forward a list-reset mixin and use it in downstream stylesheets.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/forward.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// src/_list.scss\n@mixin list-reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n// bootstrap.scss\n@forward \"src/list\";\n\n// styles.scss\n@use \"bootstrap\";\n\nli {\n  @include bootstrap.list-reset;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// src/_list.sass\n@mixin list-reset\n  margin: 0\n  padding: 0\n  list-style: none\n\n// bootstrap.sass\n@forward \"src/list\"\n\n// styles.sass\n@use \"bootstrap\"\n\nli\n  @include bootstrap.list-reset\n```\n\n----------------------------------------\n\nTITLE: Using Maps as an Alternative to Dynamic Variable Names\nDESCRIPTION: This example shows how to use Sass maps as an alternative to dynamic variable names. Instead of trying to interpolate variable names, you can store values in a map and access them using the map.get() function with a key that can be determined at runtime.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$theme-colors: (\n  \"success\": #28a745,\n  \"info\": #17a2b8,\n  \"warning\": #ffc107,\n);\n\n.alert {\n  // Instead of $theme-color-#{warning}\n  background-color: map.get($theme-colors, \"warning\");\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$theme-colors: (\"success\": #28a745, \"info\": #17a2b8, \"warning\": #ffc107)\n\n.alert\n  // Instead of $theme-color-#{warning}\n  background-color: map.get($theme-colors, \"warning\")\n```\n\n----------------------------------------\n\nTITLE: Performing Division with math.div() in Sass\nDESCRIPTION: The math.div() function returns the result of dividing two numbers. It handles unit cancellation and combination. This function is compatible with Dart Sass 1.33.0 and later, but not with LibSass or Ruby Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_26\n\nLANGUAGE: SCSS\nCODE:\n```\n@use 'sass:math';\n\n@debug math.div(1, 2); // 0.5\n@debug math.div(100px, 5px); // 20\n@debug math.div(100px, 5); // 20px\n@debug math.div(100px, 5s); // 20px/s\n```\n\nLANGUAGE: Sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.div(1, 2)  // 0.5\n@debug math.div(100px, 5px)  // 20\n@debug math.div(100px, 5)  // 20px\n@debug math.div(100px, 5s)  // 20px/s\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Maps with map.deep-merge() in Sass\nDESCRIPTION: Shows how to use map.deep-merge() to recursively merge nested maps, compared with the regular map.merge() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$helvetica-light: (\n  \"weights\": (\n    \"lightest\": 100,\n    \"light\": 300\n  )\n);\n$helvetica-heavy: (\n  \"weights\": (\n    \"medium\": 500,\n    \"bold\": 700\n  )\n);\n\n@debug map.deep-merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"lightest\": 100,\n//     \"light\": 300,\n//     \"medium\": 500,\n//     \"bold\": 700\n//   )\n// )\n@debug map.merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"medium: 500,\n//     \"bold\": 700\n//   )\n// )\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$helvetica-light: (\"weights\": (\"lightest\": 100, \"light\": 300))\n$helvetica-heavy: (\"weights\": (\"medium\": 500, \"bold\": 700))\n\n@debug map.deep-merge($helvetica-light, $helvetica-heavy)\n// (\n//   \"weights\": (\n//     \"lightest\": 100,\n//     \"light\": 300,\n//     \"medium\": 500,\n//     \"bold\": 700\n//   )\n// )\n@debug map.merge($helvetica-light, $helvetica-heavy);\n// (\n//   \"weights\": (\n//     \"medium: 500,\n//     \"bold\": 700\n//   )\n// )\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Operators in Sass for Fluid Layouts\nDESCRIPTION: Shows how to use Sass mathematical operators and the math.div() function to create a fluid grid system. Demonstrates converting pixel values to percentages for responsive layouts.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\";\n\n.container {\n  display: flex;\n}\n\narticle[role=\"main\"] {\n  width: math.div(600px, 960px) * 100%;\n}\n\naside[role=\"complementary\"] {\n  width: math.div(300px, 960px) * 100%;\n  margin-left: auto;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\"\n\n.container\n  display: flex\n\narticle[role=\"main\"]\n  width: math.div(600px, 960px) * 100%\n\naside[role=\"complementary\"]\n  width: math.div(300px, 960px) * 100%\n  margin-left: auto\n```\n\n----------------------------------------\n\nTITLE: Defining Button Base Mixin using SCSS Syntax\nDESCRIPTION: Example of SCSS syntax showing a button-base mixin that includes typography and ripple effects, along with basic button styling and hover/disabled states. Uses curly braces and semicolons similar to CSS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/index.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin button-base() {\n  @include typography(button);\n  @include ripple-surface;\n  @include ripple-radius-bounded;\n\n  display: inline-flex;\n  position: relative;\n  height: $button-height;\n  border: none;\n  vertical-align: middle;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:disabled {\n    color: $mdc-button-disabled-ink-color;\n    cursor: default;\n    pointer-events: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation and Hyphenation in Sass\nDESCRIPTION: Demonstrates string concatenation using the + operator and hyphenation using the - operator in Sass. Shows how quoted and unquoted strings behave differently when concatenated.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/string.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug \"Helvetica\" + \" Neue\"; // \"Helvetica Neue\"\n@debug sans- + serif; // sans-serif\n@debug sans - serif; // sans-serif\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug \"Helvetica\" + \" Neue\"  // \"Helvetica Neue\"\n@debug sans- + serif  // sans-serif\n@debug sans - serif  // sans-serif\n```\n\n----------------------------------------\n\nTITLE: Color Alpha Channel Modification in Sass\nDESCRIPTION: Examples of modifying alpha channel of existing colors using rgb() and rgba() functions. Shows how to set new alpha values for both hex colors and rgba colors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@debug rgb(#f2ece4, 50%); // rgba(242, 236, 228, 0.5);\n@debug rgba(rgba(0, 51, 102, 0.5), 1); // #003366\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Map Values in Sass\nDESCRIPTION: Shows advanced usage of map.set() with multiple keys to update deeply nested map values. The example updates a font weight value within a nested structure of font definitions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.set($fonts, \"Helvetica\", \"weights\", \"regular\", 300);\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"regular\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.set($fonts, \"Helvetica\", \"weights\", \"regular\", 300)\n// (\n//   \"Helvetica\": (\n//     \"weights\": (\n//       \"regular\": 300,\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n----------------------------------------\n\nTITLE: Sass Mixin with Arbitrary Arguments\nDESCRIPTION: Shows how to create a mixin that accepts an arbitrary number of arguments using the ... syntax. This example creates an ordering mixin for form inputs.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@mixin order($height, $selectors...) {\n  @for $i from 0 to length($selectors) {\n    #{nth($selectors, $i + 1)} {\n      position: absolute;\n      height: $height;\n      margin-top: $i * $height;\n    }\n  }\n}\n\n@include order(150px, \"input.name\", \"input.address\", \"input.zip\");\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin order($height, $selectors...)\n  @for $i from 0 to length($selectors)\n    #{nth($selectors, $i + 1)}\n      position: absolute\n      height: $height\n      margin-top: $i * $height\n\n\n\n\n@include order(150px, \"input.name\", \"input.address\", \"input.zip\")\n```\n\n----------------------------------------\n\nTITLE: Adding Prefixes with @forward in Sass\nDESCRIPTION: Shows how to use the 'as' clause with @forward to add prefixes to forwarded names. The example demonstrates prefixing theme variables in a material design library.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// material/_index.scss\n@forward \"theme\" as theme-*;\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"material\" with ($theme-primary: blue);\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"material/theme\" with ($primary: blue);\n```\n\n----------------------------------------\n\nTITLE: Basic Color Value Examples in Sass\nDESCRIPTION: Demonstrates various ways to define colors in Sass including hex codes, rgba values, named colors, rgb() function, lab() function, and color() function with display-p3 space.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/colors.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug #f2ece4; // #f2ece4\n@debug #b37399aa; // rgba(179, 115, 153, 67%)\n@debug midnightblue; // #191970\n@debug rgb(204 102 153); // #c69\n@debug lab(32.4% 38.4 -47.7 / 0.7); // lab(32.4% 38.4 -47.7 / 0.7)\n@debug color(display-p3 0.597 0.732 0.576); // color(display-p3 0.597 0.732 0.576)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug #f2ece4  // #f2ece4\n@debug #b37399aa  // rgba(179, 115, 153, 67%)\n@debug midnightblue  // #191970\n@debug rgb(204 102 153)  // #c69\n@debug lab(32.4% 38.4 -47.7 / 0.7)  // lab(32.4% 38.4 -47.7 / 0.7)\n@debug color(display-p3 0.597 0.732 0.576)  // color(display-p3 0.597 0.732 0.576)\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefix Mixin with @warn in Sass\nDESCRIPTION: Demonstrates how to create a mixin that adds vendor prefixes to CSS properties while warning about unknown prefixes. The mixin checks each prefix against a known list and issues a warning if an invalid prefix is encountered.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/warn.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$known-prefixes: webkit, moz, ms, o;\n\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if not index($known-prefixes, $prefix) {\n      @warn \"Unknown prefix #{$prefix}.\";\n    }\n\n    -#{$prefix}-#{$property}: $value;\n  }\n  #{$property}: $value;\n}\n\n.tilt {\n  // Oops, we typo'd \"webkit\" as \"wekbit\"!\n  @include prefix(transform, rotate(15deg), wekbit ms);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$known-prefixes: webkit, moz, ms, o\n\n@mixin prefix($property, $value, $prefixes)\n  @each $prefix in $prefixes\n    @if not index($known-prefixes, $prefix)\n      @warn \"Unknown prefix #{$prefix}.\"\n\n\n    -#{$prefix}-#{$property}: $value\n\n  #{$property}: $value\n\n\n.tilt\n  // Oops, we typo'd \"webkit\" as \"wekbit\"!\n  @include prefix(transform, rotate(15deg), wekbit ms)\n```\n\nLANGUAGE: css\nCODE:\n```\n.tilt {\n  -wekbit-transform: rotate(15deg);\n  -ms-transform: rotate(15deg);\n  transform: rotate(15deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Using meta.type-of() to determine the type of Sass values in SCSS/Sass\nDESCRIPTION: The meta.type-of() function returns the type of a Sass value as an unquoted string. It can identify types such as number, string, color, list, map, and others.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:meta';\n\n@debug meta.type-of(10px); // number\n@debug meta.type-of(10px 20px 30px); // list\n@debug meta.type-of(()); // list\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:meta'\n\n@debug meta.type-of(10px)  // number\n@debug meta.type-of(10px 20px 30px)  // list\n@debug meta.type-of(())  // list\n```\n\n----------------------------------------\n\nTITLE: Removing Map Keys with map.deep-remove() in Sass\nDESCRIPTION: Demonstrates how to use map.deep-remove() to remove keys from both top-level and nested maps.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.deep-remove($font-weights, \"regular\");\n// (\"medium\": 500, \"bold\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.deep-remove($font-weights, \"regular\")\n// (\"medium\": 500, \"bold\": 700)\n```\n\n----------------------------------------\n\nTITLE: List Length Function in Sass\nDESCRIPTION: Shows how to get the length of a list using list.length(). Works with single values, lists, and maps, returning the number of elements or key-value pairs.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.length(10px); // 1\n@debug list.length(10px 20px 30px); // 3\n@debug list.length((width: 10px, height: 20px)); // 2\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Colors Mixin with @if and @else in Sass\nDESCRIPTION: This snippet demonstrates a theme-colors mixin that sets background and text colors based on a boolean parameter. The mixin uses @if and @else conditions to apply either light or dark theme colors to elements.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/control/if.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$light-background: #f2ece4;\n$light-text: #036;\n$dark-background: #6b717f;\n$dark-text: #d2e1dd;\n\n@mixin theme-colors($light-theme: true) {\n  @if $light-theme {\n    background-color: $light-background;\n    color: $light-text;\n  } @else {\n    background-color: $dark-background;\n    color: $dark-text;\n  }\n}\n\n.banner {\n  @include theme-colors($light-theme: true);\n  body.dark & {\n    @include theme-colors($light-theme: false);\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$light-background: #f2ece4\n$light-text: #036\n$dark-background: #6b717f\n$dark-text: #d2e1dd\n\n@mixin theme-colors($light-theme: true)\n  @if $light-theme\n    background-color: $light-background\n    color: $light-text\n  @else\n    background-color: $dark-background\n    color: $dark-text\n\n\n\n.banner\n  @include theme-colors($light-theme: true)\n  body.dark &\n    @include theme-colors($light-theme: false)\n```\n\n----------------------------------------\n\nTITLE: Using Variables in @media Queries with Sass\nDESCRIPTION: Demonstrates how to use Sass variables within @media queries for more flexible and maintainable breakpoints.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$layout-breakpoint-small: 960px;\n\n@media (min-width: $layout-breakpoint-small) {\n  .hide-extra-small {\n    display: none;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$layout-breakpoint-small: 960px\n\n@media (min-width: $layout-breakpoint-small)\n  .hide-extra-small\n    display: none\n```\n\n----------------------------------------\n\nTITLE: Creating a scale-below function with @while loops in Sass\nDESCRIPTION: This snippet demonstrates a function that uses a @while loop to repeatedly divide a value by a ratio until it falls below a base value. The example shows both the function definition and its practical application for scaling font sizes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/control/while.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\";\n\n/// Divides `$value` by `$ratio` until it's below `$base`.\n@function scale-below($value, $base, $ratio: 1.618) {\n  @while $value > $base {\n    $value: math.div($value, $ratio);\n  }\n  @return $value;\n}\n\n$normal-font-size: 16px;\nsup {\n  font-size: scale-below(20px, 16px);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\"\n\n/// Divides `$value` by `$ratio` until it's below `$base`.\n@function scale-below($value, $base, $ratio: 1.618)\n  @while $value > $base\n    $value: math.div($value, $ratio)\n  @return $value\n\n\n\n$normal-font-size: 16px\nsup\n  font-size: scale-below(20px, 16px)\n```\n\n----------------------------------------\n\nTITLE: Comparing lighten() Function with color.scale() in Sass\nDESCRIPTION: Shows the difference between the lighten() function and the recommended color.scale() alternative. lighten() adds a fixed percentage to lightness while scale() increases lightness proportionally.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.\n@debug lighten(#e1d7d2, 30%); // white\n\n// scale() instead makes it 30% lighter than it was originally.\n@debug color.scale(#e1d7d2, $lightness: 30%); // #eae3e0\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n// #e1d7d2 has lightness 85%, so when lighten() adds 30% it just returns white.\n@debug lighten(#e1d7d2, 30%)  // white\n\n// scale() instead makes it 30% lighter than it was originally.\n@debug color.scale(#e1d7d2, $lightness: 30%)  // #eae3e0\n```\n\n----------------------------------------\n\nTITLE: Using Plain CSS Functions in Sass/SCSS\nDESCRIPTION: Demonstrates how Sass handles unknown function calls by passing them through to CSS. Shows variable interpolation in function arguments and debugging output for both var() and gradient functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@debug var(--main-bg-color); // var(--main-bg-color)\n\n$primary: #f2ece4;\n$accent: #e1d7d2;\n@debug radial-gradient($primary, $accent); // radial-gradient(#f2ece4, #e1d7d2)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug var(--main-bg-color)  // var(--main-bg-color)\n\n$primary: #f2ece4\n$accent: #e1d7d2\n@debug radial-gradient($primary, $accent)  // radial-gradient(#f2ece4, #e1d7d2)\n```\n\n----------------------------------------\n\nTITLE: Finding Elements in Lists with list.index() in Sass\nDESCRIPTION: Demonstrates how to use list.index() to find the position of a value in a list. The function returns the index if found or null if not found, which can be used for validation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/lists.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:list\";\n\n$sizes: 4rem, 2rem, 1rem, 0.5rem;\n\n@debug list.index($sizes, 1rem);  // 3\n@debug list.index($sizes, 3rem);  // null\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:list\"\n\n$sizes: 4rem, 2rem, 1rem, 0.5rem\n\n@debug list.index($sizes, 1rem)  // 3\n@debug list.index($sizes, 3rem)  // null\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers with math.random() in Sass\nDESCRIPTION: The math.random() function generates random numbers. Without arguments, it returns a decimal between 0 and 1. With a numeric argument, it returns a whole number between 1 and the given limit.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_28\n\nLANGUAGE: SCSS\nCODE:\n```\n@use 'sass:math';\n\n@debug math.random(); // 0.2821251858\n@debug math.random(); // 0.6221325814\n\n@debug math.random(10); // 4\n@debug math.random(10000); // 5373\n```\n\nLANGUAGE: Sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.random()  // 0.2821251858\n@debug math.random()  // 0.6221325814\n\n@debug math.random(10)  // 4\n@debug math.random(10000)  // 5373\n```\n\n----------------------------------------\n\nTITLE: Creating Function Aliases Using Argument Lists\nDESCRIPTION: Demonstrates how to create a function alias by forwarding all arguments to another function. This example shows a deprecated function that warns users while passing all arguments to the new recommended function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@function fg($args...) {\n  @warn \"The fg() function is deprecated. Call foreground() instead.\";\n  @return foreground($args...);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@function fg($args...)\n  @warn \"The fg() function is deprecated. Call foreground() instead.\"\n  @return foreground($args...)\n```\n\n----------------------------------------\n\nTITLE: Taking Arbitrary Arguments in Sass Functions\nDESCRIPTION: Creates a sum function that accepts any number of numeric values using the argument list syntax. The function iterates through each number in the list and adds them together, returning the total sum.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@function sum($numbers...) {\n  $sum: 0;\n  @each $number in $numbers {\n    $sum: $sum + $number;\n  }\n  @return $sum;\n}\n\n.micro {\n  width: sum(50px, 30px, 100px);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@function sum($numbers...)\n  $sum: 0\n  @each $number in $numbers\n    $sum: $sum + $number\n\n  @return $sum\n\n\n.micro\n  width: sum(50px, 30px, 100px)\n```\n\n----------------------------------------\n\nTITLE: Using the Round Function in Sass Math Module\nDESCRIPTION: Example showing the round function which rounds a number to the nearest whole number. Values below 0.5 round down, while values 0.5 and above round up.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.round(4); // 4\n@debug math.round(4.2); // 4\n@debug math.round(4.9); // 5\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.round(4)  // 4\n@debug math.round(4.2)  // 4\n@debug math.round(4.9)  // 5\n```\n\n----------------------------------------\n\nTITLE: Using Sass as a JavaScript Library\nDESCRIPTION: Demonstrates how to use Sass as a JavaScript library in Node.js. It shows both synchronous and asynchronous compilation methods using the sass package.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/dart-sass.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst sass = require('sass');\n\nconst result = sass.compile('style.scss');\nconsole.log(result.css);\n\n// OR\n\nconst result = await sass.compileAsync('style.scss');\nconsole.log(result.css);\n```\n\n----------------------------------------\n\nTITLE: Loading Members with @use in Sass\nDESCRIPTION: Shows how to access variables, functions, and mixins from a module using the namespace provided by @use.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use \"src/corners\";\n\n.button {\n  @include corners.rounded;\n  padding: 5px + corners.$radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Color Scale Function Example in Sass\nDESCRIPTION: Demonstrates scaling color properties using the color.scale() function. Shows examples of scaling red channel, lightness in oklch space, and chroma with alpha transparency.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_12\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.scale(#6b717f, $red: 15%)  // rgb(129.2, 113, 127)\n@debug color.scale(#d2e1dd, $lightness: -10%, $space: oklch)\n// rgb(181.2580722731, 195.8949200496, 192.0059024063)\n@debug color.scale(oklch(80% 20% 120deg), $chroma: 50%, $alpha: -40%)\n// oklch(80% 0.24 120deg / 0.6)\n```\n\n----------------------------------------\n\nTITLE: Using @error for Argument Validation in Sass Mixins\nDESCRIPTION: This example demonstrates a reflexive-position mixin that uses @error to validate that the $property argument is either 'left' or 'right'. If an invalid property is provided, it throws an error with a descriptive message and halts compilation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/error.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin reflexive-position($property, $value) {\n  @if $property != left and $property != right {\n    @error \"Property #{$property} must be either left or right.\";\n  }\n\n  $left-value: if($property == right, initial, $value);\n  $right-value: if($property == right, $value, initial);\n\n  left: $left-value;\n  right: $right-value;\n  [dir=rtl] & {\n    left: $right-value;\n    right: $left-value;\n  }\n}\n\n.sidebar {\n  @include reflexive-position(top, 12px);\n  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  // Error: Property top must be either left or right.\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin reflexive-position($property, $value)\n  @if $property != left and $property != right\n    @error \"Property #{$property} must be either left or right.\"\n\n\n  $left-value: if($property == right, initial, $value)\n  $right-value: if($property == right, $value, initial)\n\n  left: $left-value\n  right: $right-value\n  [dir=rtl] &\n    left: $right-value\n    right: $left-value\n\n\n\n.sidebar\n  @include reflexive-position(top, 12px)\n  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  // Error: Property top must be either left or right.\n```\n\n----------------------------------------\n\nTITLE: Using the Absolute Value Function in Sass Math Module\nDESCRIPTION: Example demonstrating the abs function which returns the absolute value of a number. It returns the positive value of both positive and negative inputs while preserving units.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.abs(10px); // 10px\n@debug math.abs(-10px); // 10px\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.abs(10px) // 10px\n@debug math.abs(-10px) // 10px\n```\n\n----------------------------------------\n\nTITLE: Color Mixing Function in Sass\nDESCRIPTION: Mixes two colors using specified methods and weights. Supports various color spaces and interpolation methods.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_10\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color';\n\n@debug color.mix(#036, #d2e1dd, $method: rgb)  // #698aa2\n@debug color.mix(#036, #d2e1dd, $method: oklch)  // rgb(87.864037264, 140.601918773, 154.2876826946)\n@debug color.mix(color(rec2020 1 0.7 0.1), color(rec2020 0.8 none 0.3), $weight: 75%, $method: rec2020)  // color(rec2020 0.95 0.7 0.15)\n@debug color.mix(oklch(80% 20% 0deg), oklch(50% 10% 120deg), $method: oklch longer hue)  // oklch(65% 0.06 240deg)\n```\n\n----------------------------------------\n\nTITLE: Using @use without a Namespace in Sass\nDESCRIPTION: Shows how to load a module without a namespace using @use \"<url>\" as *.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use \"src/corners\" as *;\n\n.button {\n  @include rounded;\n  padding: 5px + $radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Grayscale\nDESCRIPTION: Shows usage of color.grayscale() to convert colors to their grayscale equivalents while maintaining lightness.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.grayscale(#6b717f); // #757575\n@debug color.grayscale(color(srgb 0.4 0.2 0.6)); // color(srgb 0.3233585271 0.3233585411 0.3233585792)\n@debug color.grayscale(oklch(50% 80% 270deg)); // oklch(50% 0% 270deg)\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation in Property Names with Sass\nDESCRIPTION: This example shows how to use interpolation to dynamically generate property names. It creates a mixin that adds vendor prefixes to properties, demonstrating the flexible syntax for dynamic property creation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@mixin prefix($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    -#{$prefix}-#{$property}: $value;\n  }\n  #{$property}: $value;\n}\n\n.gray {\n  @include prefix(filter, grayscale(50%), moz webkit);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin prefix($property, $value, $prefixes)\n  @each $prefix in $prefixes\n    -#{$prefix}-#{$property}: $value\n\n  #{$property}: $value\n\n\n.gray\n  @include prefix(filter, grayscale(50%), moz webkit)\n```\n\n----------------------------------------\n\nTITLE: Prefixed @forward in SCSS/Sass\nDESCRIPTION: Shows how to forward module members with a prefix using the 'as' syntax. Demonstrates prefixing a reset mixin with 'list-'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/forward.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// src/_list.scss\n@mixin reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n// bootstrap.scss\n@forward \"src/list\" as list-*;\n\n// styles.scss\n@use \"bootstrap\";\n\nli {\n  @include bootstrap.list-reset;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// src/_list.sass\n@mixin reset\n  margin: 0\n  padding: 0\n  list-style: none\n\n// bootstrap.sass\n@forward \"src/list\" as list-*\n\n// styles.sass\n@use \"bootstrap\"\n\nli\n  @include bootstrap.list-reset\n```\n\n----------------------------------------\n\nTITLE: Color Space Conversion Example in Sass\nDESCRIPTION: Shows color space conversion using color.to-space() function with various color spaces including display-p3, oklab, and xyz.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_15\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.to-space(#036, display-p3)  // lch(20.7457453073% 35.0389733355 273.0881809283deg)\n@debug color.to-space(oklab(44% 0.09 -0.13))  // rgb(103.1328911972, 50.9728091281, 150.8382311692)\n@debug color.to-space(xyz(0.8 0.1 0.1))  // color(a98-rgb 1.2177586808 -0.7828263424 0.3516847577)\n@debug color.to-space(grey, lch)  // lch(53.5850134522% 0 none)\n@debug color.to-space(lch(none 10% 30deg), oklch)  // oklch(none 0.3782382429 11.1889160032deg)\n```\n\n----------------------------------------\n\nTITLE: List Bracketed Check in Sass\nDESCRIPTION: Shows how to check if a list has square brackets using list.is-bracketed(). Returns a boolean indicating whether the list is bracketed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.is-bracketed(1px 2px 3px); // false\n@debug list.is-bracketed([1px, 2px, 3px]); // true\n```\n\n----------------------------------------\n\nTITLE: Using string.to-lower-case() function in Sass/SCSS\nDESCRIPTION: Demonstrates converting ASCII letters in a string to lowercase. Works with both quoted and unquoted strings, but only affects ASCII characters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.to-lower-case(\"Bold\"); // \"bold\"\n@debug string.to-lower-case(SANS-SERIF); // sans-serif\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.to-lower-case(\"Bold\")  // \"bold\"\n@debug string.to-lower-case(SANS-SERIF)  // sans-serif\n```\n\n----------------------------------------\n\nTITLE: List Zipping in Sass\nDESCRIPTION: Shows how to combine multiple lists into a single list of sublists using list.zip(). Creates paired elements from multiple input lists.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long\n@debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid\n```\n\n----------------------------------------\n\nTITLE: Creating Complementary Colors\nDESCRIPTION: Demonstrates color.complement() usage to create complementary colors by rotating hue by 180 degrees in different color spaces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// HSL hue 222deg becomes 42deg.\n@debug color.complement(#6b717f); // #7f796b\n\n// Oklch hue 267.1262408996deg becomes 87.1262408996deg\n@debug color.complement(#6b717f, oklch);\n// rgb(118.8110604298, 112.5123650034, 98.1616586336)\n\n// Hue 70deg becomes 250deg.\n@debug color.complement(oklch(50% 0.12 70deg), oklch); // oklch(50% 0.12 250deg)\n```\n\n----------------------------------------\n\nTITLE: Nesting Property Declarations in Sass\nDESCRIPTION: This example demonstrates property nesting in Sass, where properties with the same prefix (like transition) can be nested. The outer property name is combined with inner ones using a hyphen as separator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.enlarge {\n  font-size: 14px;\n  transition: {\n    property: font-size;\n    duration: 4s;\n    delay: 2s;\n  }\n\n  &:hover { font-size: 36px; }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.enlarge\n  font-size: 14px\n  transition:\n    property: font-size\n    duration: 4s\n    delay: 2s\n\n  &:hover\n    font-size: 36px\n```\n\n----------------------------------------\n\nTITLE: Sass Mixin with Keyword Arguments\nDESCRIPTION: Demonstrates how to use keyword arguments when including a mixin. This is useful for mixins with multiple optional arguments or when argument meaning isn't obvious without names.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@mixin square($size, $radius: 0) {\n  width: $size;\n  height: $size;\n\n  @if $radius != 0 {\n    border-radius: $radius;\n  }\n}\n\n.avatar {\n  @include square(100px, $radius: 4px);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin square($size, $radius: 0)\n  width: $size\n  height: $size\n\n  @if $radius != 0\n    border-radius: $radius\n\n\n\n.avatar\n  @include square(100px, $radius: 4px)\n```\n\n----------------------------------------\n\nTITLE: List Append Function Usage in Sass\nDESCRIPTION: Demonstrates how to append values to lists using list.append() with different separators. The function adds a value to the end of a list and allows specifying the separator type (comma, space, or slash).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.append(10px 20px, 30px); // 10px 20px 30px\n@debug list.append((blue, red), green); // blue, red, green\n@debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)\n@debug list.append(10px, 20px, $separator: comma); // 10px, 20px\n@debug list.append((blue, red), green, $separator: space); // blue red green\n```\n\n----------------------------------------\n\nTITLE: Using the @use Rule in Sass\nDESCRIPTION: Demonstrates how to use the @use rule to import and namespace styles from another stylesheet. The example shows importing Bootstrap and using its variables and mixins.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\";\n\n.element {\n  background-color: bootstrap.$body-bg;\n  @include bootstrap.float-left;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Hypotenuse Function in Sass Math Module\nDESCRIPTION: Example showing the hypot function which calculates the length of an n-dimensional vector with components equal to the input numbers. It supports multiple values, including with compatible units.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.hypot(3, 4); // 5\n\n$lengths: 1in, 10cm, 50px;\n@debug math.hypot($lengths...); // 4.0952775683in\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.hypot(3, 4) // 5\n\n$lengths: 1in, 10cm, 50px\n@debug math.hypot($lengths...) // 4.0952775683in\n```\n\n----------------------------------------\n\nTITLE: Checking Global Variable Existence in Sass\nDESCRIPTION: Example showing how to check if global variables exist using meta.global-variable-exists()\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@debug meta.global-variable-exists(\"var1\"); // false\n\n$var1: value;\n@debug meta.global-variable-exists(\"var1\"); // true\n\nh1 {\n  // $var2 is local.\n  $var2: value;\n  @debug meta.global-variable-exists(\"var2\"); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Using meta.variable-exists() to check variable availability in SCSS/Sass\nDESCRIPTION: The meta.variable-exists() function checks whether a variable with a given name exists in the current scope. It returns a boolean value and works with both global and local variables.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@debug meta.variable-exists(\"var1\"); // false\n\n$var1: value;\n@debug meta.variable-exists(\"var1\"); // true\n\nh1 {\n  // $var2 is local.\n  $var2: value;\n  @debug meta.variable-exists(\"var2\"); // true\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n@debug meta.variable-exists(\"var1\")  // false\n\n$var1: value\n@debug meta.variable-exists(\"var1\")  // true\n\nh1\n  // $var2 is local.\n  $var2: value\n  @debug meta.variable-exists(\"var2\")  // true\n```\n\n----------------------------------------\n\nTITLE: Loading CSS with Configuration in SCSS and Sass\nDESCRIPTION: Demonstrates using meta.load-css() to dynamically load and include CSS from a module with configuration options. Shows both SCSS and Sass syntax variations for loading a dark theme with customizable border contrast.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// dark-theme/_code.scss\n$border-contrast: false !default;\n\ncode {\n  background-color: #6b717f;\n  color: #d2e1dd;\n  @if $border-contrast {\n    border-color: #dadbdf;\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use \"sass:meta\";\n\nbody.dark {\n  @include meta.load-css(\"dark-theme/code\",\n      $with: (\"border-contrast\": true));\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// dark-theme/_code.sass\n$border-contrast: false !default\n\ncode\n  background-color: #6b717f\n  color: #d2e1dd\n  @if $border-contrast\n    border-color: #dadbdf\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@use \"sass:meta\"\n\nbody.dark\n  $configuration: (\"border-contrast\": true)\n  @include meta.load-css(\"dark-theme/code\", $with: $configuration)\n```\n\nLANGUAGE: css\nCODE:\n```\nbody.dark code {\n  background-color: #6b717f;\n  color: #d2e1dd;\n  border-color: #dadbdf;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Clamp Function in Sass Math Module\nDESCRIPTION: Example of the clamp function which restricts a value between minimum and maximum bounds. The function takes compatible units and returns the clamped value with appropriate units.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.clamp(-1, 0, 1); // 0\n@debug math.clamp(1px, -1px, 10px); // 1px\n@debug math.clamp(-1in, 1cm, 10mm); // 10mm\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.clamp(-1, 0, 1) // 0\n@debug math.clamp(1px, -1px, 10px) // 1px\n@debug math.clamp(-1in, 1cm, 10mm) // 10mm\n```\n\n----------------------------------------\n\nTITLE: Using String Functions with Indexes in Sass\nDESCRIPTION: This example demonstrates how to use string functions from the sass:string module, showing how string indexing works in Sass. It includes examples of string.index() to find the position of a substring and string.slice() to extract portions of a string using negative indexes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\"); // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\"); // 11\n@debug string.slice(\"Roboto Mono\", -4); // \"Mono\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\")  // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\")  // 11\n@debug string.slice(\"Roboto Mono\", -4)  // \"Mono\"\n```\n\n----------------------------------------\n\nTITLE: Using string.unique-id() function in Sass/SCSS\nDESCRIPTION: Demonstrates generating random, unique string identifiers that are guaranteed to be valid CSS identifiers and unique within the current Sass compilation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.unique-id(); // uabtrnzug\n@debug string.unique-id(); // u6w1b1def\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.unique-id(); // uabtrnzug\n@debug string.unique-id(); // u6w1b1def\n```\n\n----------------------------------------\n\nTITLE: HTML Ancestor Handling in Sass @extend\nDESCRIPTION: Illustrates how Sass handles complex selector ancestors when using @extend, showing that not all possible combinations are generated to maintain stylesheet efficiency.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\nheader .warning li {\n  font-weight: bold;\n}\n\naside .notice dd {\n  // Sass doesn't generate CSS to match the <dd> in\n  //\n  // <header>\n  //   <aside>\n  //     <div class=\"warning\">\n  //       <div class=\"notice\">\n  //         <dd>...</dd>\n  //       </div>\n  //     </div>\n  //   </aside>\n  // </header>\n  //\n  // because matching all elements like that would require us to generate nine\n  // new selectors instead of just two.\n  @extend li;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\nheader .warning li\n  font-weight: bold\n\n\naside .notice dd\n  // Sass doesn't generate CSS to match the <dd> in\n  //\n  // <header>\n  //   <aside>\n  //     <div class=\"warning\">\n  //       <div class=\"notice\">\n  //         <dd>...</dd>\n  //       </div>\n  //     </div>\n  //   </aside>\n  // </header>\n  //\n  // because matching all elements like that would require us to generate nine\n  // new selectors instead of just two.\n  @extend li\n```\n\n----------------------------------------\n\nTITLE: Parsing CSS Selectors using Sass selector.simple-selectors()\nDESCRIPTION: Demonstrates using the simple-selectors() function from Sass's selector module to break down CSS selectors into their component parts. The function accepts a selector string and returns a comma-separated list of individual selectors, excluding combinators and commas.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.simple-selectors(\"a.disabled\"); // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\"); // main, .blog, :after\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:selector\"\n\n@debug selector.simple-selectors(\"a.disabled\")  // a, .disabled\n@debug selector.simple-selectors(\"main.blog:after\")  // main, .blog, :after\n```\n\n----------------------------------------\n\nTITLE: Using meta.mixin-exists() to check mixin availability in SCSS/Sass\nDESCRIPTION: The meta.mixin-exists() function checks whether a mixin with a given name exists in the current scope or in a specified module. It returns a boolean value.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@debug meta.mixin-exists(\"shadow-none\"); // false\n\n@mixin shadow-none {\n  box-shadow: none;\n}\n\n@debug meta.mixin-exists(\"shadow-none\"); // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n@debug meta.mixin-exists(\"shadow-none\")  // false\n\n@mixin shadow-none\n  box-shadow: none\n\n\n@debug meta.mixin-exists(\"shadow-none\")  // true\n```\n\n----------------------------------------\n\nTITLE: Passing Arbitrary Arguments in Sass Functions\nDESCRIPTION: Shows how to use the spread operator to pass all elements of a list as individual arguments to a function. This technique allows for dynamically passing multiple arguments stored in a variable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$widths: 50px, 30px, 100px;\n.micro {\n  width: min($widths...);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$widths: 50px, 30px, 100px\n.micro\n  width: min($widths...)\n```\n\n----------------------------------------\n\nTITLE: Using selector.replace Function in Sass\nDESCRIPTION: Shows how to replace parts of selectors using the selector.replace function with intelligent unification.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.replace(\"a.disabled\", \"a\", \".link\"); // .link.disabled\n@debug selector.replace(\"a.disabled\", \"h1\", \"h2\"); // a.disabled\n@debug selector.replace(\".guide .info\", \".info\", \".content nav.sidebar\");\n// .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n----------------------------------------\n\nTITLE: Defining Button Base Mixin using Sass Indented Syntax\nDESCRIPTION: Example of the same button-base mixin written in Sass's indented syntax, which uses indentation instead of curly braces and newlines instead of semicolons. Demonstrates the more concise indentation-based format.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/index.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n@mixin button-base()\n  @include typography(button)\n  @include ripple-surface\n  @include ripple-radius-bounded\n\n  display: inline-flex\n  position: relative\n  height: $button-height\n  border: none\n  vertical-align: middle\n\n  &:hover\n    cursor: pointer\n\n  &:disabled\n    color: $mdc-button-disabled-ink-color\n    cursor: default\n    pointer-events: none\n```\n\n----------------------------------------\n\nTITLE: Working with CSS Custom Properties in Sass\nDESCRIPTION: This example shows how to work with CSS custom properties in Sass. While regular SassScript isn't evaluated inside custom property values, interpolation can be used to inject dynamic values into them.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$primary: #81899b;\n$accent: #302e24;\n$warn: #dfa612;\n\n:root {\n  --primary: #{$primary};\n  --accent: #{$accent};\n  --warn: #{$warn};\n\n  // Even though this looks like a Sass variable, it's valid CSS so it's not\n  // evaluated.\n  --consumed-by-js: $primary;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$primary: #81899b\n$accent: #302e24\n$warn: #dfa612\n\n:root\n  --primary: #{$primary}\n  --accent: #{$accent}\n  --warn: #{$warn}\n\n  // Even though this looks like a Sass variable, it's valid CSS so it's not\n  // evaluated.\n  --consumed-by-js: $primary\n```\n\n----------------------------------------\n\nTITLE: Using math.sqrt() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.sqrt() function to calculate square roots. The function requires a unitless number as input.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.sqrt(100); // 10\n@debug math.sqrt(math.div(1, 3)); // 0.5773502692\n@debug math.sqrt(-1); // NaN\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.sqrt(100) // 10\n@debug math.sqrt(math.div(1, 3)) // 0.5773502692\n@debug math.sqrt(-1) // NaN\n```\n\n----------------------------------------\n\nTITLE: Using the Max Function in Sass Math Module\nDESCRIPTION: Example showing the max function which returns the highest of one or more numbers. It can handle individual values or use a spread list of values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.max(1px, 4px); // 4px\n\n$widths: 50px, 30px, 100px;\n@debug math.max($widths...); // 100px\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.max(1px, 4px)  // 4px\n\n$widths: 50px, 30px, 100px\n@debug math.max($widths...)  // 100px\n```\n\n----------------------------------------\n\nTITLE: Checking Sass Feature Support\nDESCRIPTION: Example showing how to check if specific Sass features are supported using meta.feature-exists()\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@debug meta.feature-exists(\"at-error\"); // true\n@debug meta.feature-exists(\"unrecognized\"); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sass Color Functions in SCSS\nDESCRIPTION: This snippet shows how to use Sass color functions like scale() and mix() with different color spaces. It demonstrates scaling lightness in the oklch space and mixing colors using the oklch method.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/colors.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n$venus: #998099;\n\n@debug color.scale($venus, $lightness: +15%, $space: oklch);\n// rgb(170.1523703626, 144.612080603, 170.1172627174)\n@debug color.mix($venus, midnightblue, $method: oklch);\n// rgb(95.9363315581, 74.5687109346, 133.2082569526)\n```\n\n----------------------------------------\n\nTITLE: Basic Numeric Operations in Sass\nDESCRIPTION: Demonstrates basic arithmetic operations with numbers including addition, subtraction, multiplication, and modulo. Shows how Sass handles units in calculations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/numeric.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug 10s + 15s; // 25s\n@debug 1in - 10px; // 0.8958333333in\n@debug 5px * 3px; // 15px*px\n@debug 1in % 9px; // 0.0625in\n```\n\n----------------------------------------\n\nTITLE: Basic Sass Calculation Examples (SCSS/Sass)\nDESCRIPTION: Shows how Sass handles basic calc(), min(), and calc() within min() expressions. Some calculations are simplified to values when possible, while others remain as calc() expressions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug calc(400px + 10%); // calc(400px + 10%)\n@debug calc(400px / 2); // 200px\n@debug min(100px, calc(1rem + 10%)); // min(100px, 1rem + 10%)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug calc(400px + 10%)  // calc(400px + 10%)\n@debug calc(400px / 2)  // 200px\n@debug min(100px, calc(1rem + 10%)) ; // min(100px, 1rem + 10%)\n```\n\n----------------------------------------\n\nTITLE: Calculation Simplification in Sass (SCSS/Sass)\nDESCRIPTION: Demonstrates how Sass calculations are simplified when used in CSS properties, including how variables containing calculations can be used and manipulated in other calculations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$width: calc(400px + 10%);\n\n.sidebar {\n  width: $width;\n  padding-left: calc($width / 4);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$width: calc(400px + 10%)\n\n.sidebar\n  width: $width\n  padding-left: calc($width / 4)\n```\n\n----------------------------------------\n\nTITLE: Using math.cos() function in Sass\nDESCRIPTION: Shows how to use the math.cos() function to calculate cosine. The function accepts angles (in deg or rad) or unitless numbers (assumed to be in rad).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.cos(100deg); // -0.1736481777\n@debug math.cos(1rad); // 0.5403023059\n@debug math.cos(1); // 0.5403023059\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.cos(100deg) // -0.1736481777\n@debug math.cos(1rad) // 0.5403023059\n@debug math.cos(1) // 0.5403023059\n```\n\n----------------------------------------\n\nTITLE: Checking Map Keys with map.has-key() in Sass\nDESCRIPTION: Shows how to use map.has-key() to check for the existence of keys in maps.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.has-key($font-weights, \"regular\"); // true\n@debug map.has-key($font-weights, \"bolder\"); // false\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.has-key($font-weights, \"regular\") // true\n@debug map.has-key($font-weights, \"bolder\") // false\n```\n\n----------------------------------------\n\nTITLE: Using math.atan2() function in Sass\nDESCRIPTION: Shows how to use the math.atan2() function to calculate the 2-argument arctangent. The function requires two numbers with compatible units or unitless, and returns the result in degrees.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.atan2(-1, 1); // 135deg\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.atan2(-1, 1) // 135deg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @debug Usage in Sass Mixin\nDESCRIPTION: This snippet shows how to use the @debug rule within a Sass mixin to print the value of a calculated variable. The mixin calculates a divider offset and uses it to set margin and width properties.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/debug.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin inset-divider-offset($offset, $padding) {\n  $divider-offset: (2 * $padding) + $offset;\n  @debug \"divider offset: #{$divider-offset}\";\n\n  margin-left: $divider-offset;\n  width: calc(100% - #{$divider-offset});\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin inset-divider-offset($offset, $padding)\n  $divider-offset: (2 * $padding) + $offset\n  @debug \"divider offset: #{$divider-offset}\"\n\n  margin-left: $divider-offset\n  width: calc(100% - #{$divider-offset})\n```\n\n----------------------------------------\n\nTITLE: Checking Content Block Existence in Sass Mixins\nDESCRIPTION: Example demonstrating how to check if a mixin was passed a @content block using meta.content-exists()\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:meta';\n\n@mixin debug-content-exists {\n  @debug meta.content-exists();\n  @content;\n}\n\n@include debug-content-exists; // false\n@include debug-content-exists { // true\n  // Content!\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of @extend in Sass\nDESCRIPTION: Shows how to use @extend to inherit styles from one selector to another in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n\n  &--serious {\n    @extend .error;\n    border-width: 3px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Constants in Sass Calculations (SCSS/Sass)\nDESCRIPTION: Shows how Sass handles special constant names in calculations, including pi, e, infinity, and NaN. These constants are automatically resolved to their corresponding numeric values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug calc(pi); // 3.1415926536\n@debug calc(e);  // 2.7182818285\n@debug calc(infinity) > math.$max-number;  // true\n@debug calc(-infinity) < math.$min-number; // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug calc(pi)  // 3.1415926536\n@debug calc(e)   // 2.7182818285\n@debug calc(infinity) > math.$max-number   // true\n@debug calc(-infinity) < math.$min-number  // true\n```\n\n----------------------------------------\n\nTITLE: Using Oklch Color Function in Sass\nDESCRIPTION: Examples of using the oklch() function to create colors using perceptually-uniform lightness, chroma, and hue values. Demonstrates both basic usage and usage with alpha channel.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@debug oklch(50% 0.3 270deg); // oklch(50% 0.3 270deg)\n@debug oklch(80% 50% 0.2turn / 0.5); // oklch(80% 0.2 72deg / 0.5);\n```\n\n----------------------------------------\n\nTITLE: Using selector.extend Function in Sass\nDESCRIPTION: Demonstrates how to extend selectors using the selector.extend function, similar to using the @extend rule.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.extend(\"a.disabled\", \"a\", \".link\"); // a.disabled, .link.disabled\n@debug selector.extend(\"a.disabled\", \"h1\", \"h2\"); // a.disabled\n@debug selector.extend(\".guide .info\", \".info\", \".content nav.sidebar\");\n// .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar\n```\n\n----------------------------------------\n\nTITLE: Using string.slice() function in Sass/SCSS\nDESCRIPTION: Demonstrates extracting a portion of a string using start and end indices. Negative indices count from the end of the string, and the default end index is -1 (the end of the string).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.slice(\"Helvetica Neue\", 11); // \"Neue\"\n@debug string.slice(\"Helvetica Neue\", 1, 3); // \"Hel\"\n@debug string.slice(\"Helvetica Neue\", 1, -6); // \"Helvetica\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.slice(\"Helvetica Neue\", 11)  // \"Neue\"\n@debug string.slice(\"Helvetica Neue\", 1, 3)  // \"Hel\"\n@debug string.slice(\"Helvetica Neue\", 1, -6)  // \"Helvetica\"\n```\n\n----------------------------------------\n\nTITLE: Using math.acos() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.acos() function to calculate arccosine. The function requires a unitless number as input and returns the result in degrees.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.acos(0.5); // 60deg\n@debug math.acos(2); // NaNdeg\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.acos(0.5) // 60deg\n@debug math.acos(2) // NaNdeg\n```\n\n----------------------------------------\n\nTITLE: Illustrating Boolean Operators in Sass\nDESCRIPTION: This snippet demonstrates the usage of boolean operators in Sass, including 'and', 'or', and 'not' operations on boolean values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/booleans.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug true and true; // true\n@debug true and false; // false\n\n@debug true or false; // true\n@debug false or false; // false\n\n@debug not true; // false\n@debug not false; // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug true and true  // true\n@debug true and false  // false\n\n@debug true or false  // true\n@debug false or false  // false\n\n@debug not true  // false\n@debug not false  // true\n```\n\n----------------------------------------\n\nTITLE: Using @return with Early Returns in Sass\nDESCRIPTION: Implements a string insertion function with early return optimization. The function checks if the input string is empty and returns immediately if so, otherwise processes the string by slicing it at the specified index and inserting new content.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/function.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@function str-insert($string, $insert, $index) {\n  // Avoid making new strings if we don't need to.\n  @if string.length($string) == 0 {\n    @return $insert;\n  }\n\n  $before: string.slice($string, 0, $index);\n  $after: string.slice($string, $index);\n  @return $before + $insert + $after;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@function str-insert($string, $insert, $index)\n  // Avoid making new strings if we don't need to.\n  @if string.length($string) == 0\n    @return $insert\n\n\n  $before: string.slice($string, 0, $index)\n  $after: string.slice($string, $index)\n  @return $before + $insert + $after\n```\n\n----------------------------------------\n\nTITLE: Color Inversion Function in Sass\nDESCRIPTION: Inverts colors with customizable weight and color space parameters. Supports various color spaces including RGB and display-p3, with weight ranging from 0% to 100%.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_6\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color';\n\n@debug color.invert(#b37399, $space: rgb)  // #4c8c66\n@debug color.invert(#550e0c, 20%, $space: display-p3)  // rgb(103.4937692017, 61.3720912206, 59.430641338)\n```\n\n----------------------------------------\n\nTITLE: Using selector.unify Function in Sass\nDESCRIPTION: Demonstrates how to create a selector that matches elements matched by both input selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.unify(\"a\", \".disabled\"); // a.disabled\n@debug selector.unify(\"a.disabled\", \"a.outgoing\"); // a.disabled.outgoing\n@debug selector.unify(\"a\", \"h1\"); // null\n@debug selector.unify(\".warning a\", \"main a\"); // .warning main a, main .warning a\n```\n\n----------------------------------------\n\nTITLE: Using math.pow() function in Sass\nDESCRIPTION: Shows how to use the math.pow() function to raise a base to an exponent. The function requires unitless numbers for both base and exponent.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_14\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.pow(10, 2); // 100\n@debug math.pow(100, math.div(1, 3)); // 4.6415888336\n@debug math.pow(5, -2); // 0.04\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.pow(10, 2) // 100\n@debug math.pow(100, math.div(1, 3)) // 4.6415888336\n@debug math.pow(5, -2) // 0.04\n```\n\n----------------------------------------\n\nTITLE: Using selector.nest Function in Sass\nDESCRIPTION: Shows how to nest selectors as if they were nested within each other in the stylesheet.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.nest(\"ul\", \"li\"); // ul li\n@debug selector.nest(\".alert, .warning\", \"p\"); // .alert p, .warning p\n@debug selector.nest(\".alert\", \"&:hover\"); // .alert:hover\n@debug selector.nest(\".accordion\", \"&__copy\"); // .accordion__copy\n```\n\n----------------------------------------\n\nTITLE: Accessing the Mathematical Constant 'e' in Sass\nDESCRIPTION: Example demonstrating how to access the mathematical constant e through the sass:math module. The value is approximately 2.7182818285.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$e; // 2.7182818285\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$e  // 2.7182818285\n```\n\n----------------------------------------\n\nTITLE: Parent Selector in Nested Import\nDESCRIPTION: Illustrates how parent selectors in nested imports refer to the selector where the stylesheet is nested. The example shows RTL styling within a nested import.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// _theme.scss\nul li {\n  $padding: 16px;\n  padding-left: $padding;\n  [dir=rtl] & {\n    padding: {\n      left: 0;\n      right: $padding;\n    }\n  }\n}\n---\n// style.scss\n.theme-sample {\n  @import \"theme\";\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _theme.sass\nul li\n  $padding: 16px\n  padding-left: $padding\n  [dir=rtl] &\n    padding:\n      left: 0\n      right: $padding\n---\n// style.sass\n.theme-sample\n  @import theme\n```\n\nLANGUAGE: css\nCODE:\n```\n.theme-sample ul li {\n  padding-left: 16px;\n}\n[dir=rtl] .theme-sample ul li {\n  padding-left: 0;\n  padding-right: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using string.insert() function in Sass/SCSS\nDESCRIPTION: Shows how to insert a string at a specific position within another string. The index parameter can be positive or negative, with negative indices counting from the end of the string.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.insert(\"Roboto Bold\", \" Mono\", 7); // \"Roboto Mono Bold\"\n@debug string.insert(\"Roboto Bold\", \" Mono\", -6); // \"Roboto Mono Bold\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.insert(\"Roboto Bold\", \" Mono\", 7)  // \"Roboto Mono Bold\"\n@debug string.insert(\"Roboto Bold\", \" Mono\", -6)  // \"Roboto Mono Bold\"\n```\n\n----------------------------------------\n\nTITLE: Using string.split() function in Sass/SCSS (Dart Sass 1.57.0+)\nDESCRIPTION: Shows how to split a string into a list of substrings using a separator. The optional limit parameter controls the maximum number of splits, with the last item containing the remainder of the string.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.split(\"Segoe UI Emoji\", \" \"); // [\"Segoe\", \"UI\", \"Emoji\"]\n@debug string.split(\"Segoe UI Emoji\", \" \", $limit: 1); // [\"Segoe\", \"UI Emoji\"]\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.split(\"Segoe UI Emoji\", \" \")  // [\"Segoe\", \"UI\", \"Emoji\"]\n@debug string.split(\"Segoe UI Emoji\", \" \", $limit: 1)  // [\"Segoe\", \"UI Emoji\"]\n```\n\n----------------------------------------\n\nTITLE: Using math.compatible() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.compatible() function to check if two numbers have compatible units. This function is useful for determining if numbers can be safely added, subtracted, or compared.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_23\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.compatible(2px, 1px); // true\n@debug math.compatible(100px, 3em); // false\n@debug math.compatible(10cm, 3mm); // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.compatible(2px, 1px)  // true\n@debug math.compatible(100px, 3em)  // false\n@debug math.compatible(10cm, 3mm)  // true\n```\n\n----------------------------------------\n\nTITLE: List Values in Sass\nDESCRIPTION: Examples of list values in Sass, showing different separator types and bracket usage\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/index.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n1.5em 1em 0 2em\nHelvetica, Arial, sans-serif\n[col1-start]\n```\n\n----------------------------------------\n\nTITLE: Using selector.append Function in Sass\nDESCRIPTION: Shows how to combine selectors without descendant combinators using the selector.append function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.append(\"a\", \".disabled\"); // a.disabled\n@debug selector.append(\".accordion\", \"__copy\"); // .accordion__copy\n@debug selector.append(\".accordion\", \"__copy, __image\");\n// .accordion__copy, .accordion__image\n```\n\n----------------------------------------\n\nTITLE: Using Index Files for Importing in SCSS\nDESCRIPTION: Demonstrates the use of index files (_index.scss) to simplify imports in SCSS. It shows how to create an index file that imports multiple partials, which can then be imported as a single unit.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_index.scss\n@import 'code', 'lists';\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@import 'foundation';\n```\n\n----------------------------------------\n\nTITLE: Working with Map Immutability in Sass\nDESCRIPTION: Illustrates map immutability in Sass and shows how to update state by assigning new maps to variables. The example uses a mixin to add browser prefixes to a global map.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms);\n\n@mixin add-browser-prefix($browser, $prefix) {\n  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global;\n}\n\n@include add-browser-prefix(\"opera\", o);\n@debug $prefixes-by-browser;\n// (\"firefox\": moz, \"safari\": webkit, \"ie\": ms, \"opera\": o)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$prefixes-by-browser: (\"firefox\": moz, \"safari\": webkit, \"ie\": ms)\n\n@mixin add-browser-prefix($browser, $prefix)\n  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global\n\n\n@include add-browser-prefix(\"opera\", o)\n@debug $prefixes-by-browser\n// (\"firefox\": moz, \"safari\": webkit, \"ie\": ms, \"opera\": o)\n```\n\n----------------------------------------\n\nTITLE: Color IE Hex String Conversion in Sass\nDESCRIPTION: Converts colors to IE-compatible hex strings in #AARRGGBB format. Handles RGB, RGBA, and OKLCH color formats, with automatic gamut mapping when needed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_5\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.ie-hex-str(#b37399)  // #FFB37399\n@debug color.ie-hex-str(rgba(242, 236, 228, 0.6))  // #99F2ECE4\n@debug color.ie-hex-str(oklch(70% 10% 120deg))  // #FF9BA287\n```\n\n----------------------------------------\n\nTITLE: Unary Operators in Sass\nDESCRIPTION: Shows usage of unary plus and minus operators with expressions and their effects on values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/numeric.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@debug +(5s + 7s); // 12s\n@debug -(50px + 30px); // -80px\n@debug -(10px - 15px); // 5px\n```\n\n----------------------------------------\n\nTITLE: Nested Selector Lists in Sass/SCSS\nDESCRIPTION: Shows how to nest multiple selectors within comma-separated selector lists, demonstrating Sass's intelligent handling of selector combinations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/index.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.alert, .warning {\n  ul, p {\n    margin-right: 0;\n    margin-left: 0;\n    padding-bottom: 0;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.alert, .warning\n  ul, p\n    margin-right: 0\n    margin-left: 0\n    padding-bottom: 0\n```\n\n----------------------------------------\n\nTITLE: Selector Combinators with Nesting\nDESCRIPTION: Demonstrates various ways to use CSS combinators (>, +, ~) with nested selectors in Sass, showing different placement options for the combinators.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/index.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nul > {\n  li {\n    list-style-type: none;\n  }\n}\n\nh2 {\n  + p {\n    border-top: 1px solid gray;\n  }\n}\n\np {\n  ~ {\n    span {\n      opacity: 0.8;\n    }\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\nul >\n  li\n    list-style-type: none\n\n\n\nh2\n  + p\n    border-top: 1px solid gray\n\n\n\np\n  ~\n    span\n      opacity: 0.8\n```\n\n----------------------------------------\n\nTITLE: Using is-superselector Function in Sass\nDESCRIPTION: Demonstrates the use of selector.is-superselector function to check if one selector matches all elements that another selector matches.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.is-superselector(\"a\", \"a.disabled\"); // true\n@debug selector.is-superselector(\"a.disabled\", \"a\"); // false\n@debug selector.is-superselector(\"a\", \"sidebar a\"); // true\n@debug selector.is-superselector(\"sidebar a\", \"a\"); // false\n@debug selector.is-superselector(\"a\", \"a\"); // true\n```\n\n----------------------------------------\n\nTITLE: Choosing a Namespace with @use in Sass\nDESCRIPTION: Demonstrates how to specify a custom namespace when using the @use rule to load a module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// src/_corners.scss\n$radius: 3px;\n\n@mixin rounded {\n  border-radius: $radius;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use \"src/corners\" as c;\n\n.button {\n  @include c.rounded;\n  padding: 5px + c.$radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Import in SCSS and Sass\nDESCRIPTION: Demonstrates how to use nested imports in SCSS and Sass to scope imported styles to a specific selector. The example shows importing a theme file within a .theme-sample class.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// _theme.scss\npre, code {\n  font-family: 'Source Code Pro', Helvetica, Arial;\n  border-radius: 4px;\n}\n---\n// style.scss\n.theme-sample {\n  @import \"theme\";\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _theme.sass\npre, code\n  font-family: 'Source Code Pro', Helvetica, Arial\n  border-radius: 4px\n---\n// style.sass\n.theme-sample\n  @import theme\n```\n\nLANGUAGE: css\nCODE:\n```\n.theme-sample pre, .theme-sample code {\n  font-family: 'Source Code Pro', Helvetica, Arial;\n  border-radius: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments in SCSS\nDESCRIPTION: Demonstrates different types of comments in SCSS syntax including single-line comments, multi-line comments, and comments with interpolation. Shows how comments can be placed in various positions within the code.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/comments.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// This comment won't be included in the CSS.\n\n/* But this comment will, except in compressed mode. */\n\n/* It can also contain interpolation:\n* 1 + 1 = #{1 + 1} */\n\n/*! This comment will be included even in compressed mode. */\n\np /* Multi-line comments can be written anywhere\n  * whitespace is allowed. */ .sans {\n  font: Helvetica, // So can single-line comments.\n        sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @use for Namespaced Imports in Sass\nDESCRIPTION: Demonstrates how to use the @use directive to import and namespace functionality from another Sass file. The example shows importing from a 'bootstrap' module and using a mixin with the namespaced syntax.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\";\n\n.element {\n  @include bootstrap.float-left;\n}\n```\n\n----------------------------------------\n\nTITLE: String Escape Sequences in Sass\nDESCRIPTION: Shows various string escape sequences including Unicode characters, special characters, and newlines.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug \"\\\"\"; // '\"'\n@debug \\.widget; // \\.widget\n@debug \"\\a\"; // \"\\a\" (a string containing only a newline)\n@debug \"line1\\a line2\"; // \"line1\\a line2\"\n@debug \"Nat + Liz \\1F46D\"; // \"Nat + Liz 👭\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sass Operator Precedence\nDESCRIPTION: This snippet shows examples of Sass operator precedence, illustrating how different operators are evaluated in complex expressions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/index.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug 1 + 2 * 3 == 1 + (2 * 3); // true\n@debug true or false and false == true or (false and false); // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug 1 + 2 * 3 == 1 + (2 * 3)  // true\n@debug true or false and false == true or (false and false)  // true\n```\n\n----------------------------------------\n\nTITLE: Removing Keys from Maps in Sass\nDESCRIPTION: Shows how to use map.remove() function to create a new map with specified keys removed. The examples demonstrate removing single keys, multiple keys, and handling non-existent keys.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.remove($font-weights, \"regular\"); // (\"medium\": 500, \"bold\": 700)\n@debug map.remove($font-weights, \"regular\", \"bold\"); // (\"medium\": 500)\n@debug map.remove($font-weights, \"bolder\");\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.remove($font-weights, \"regular\")  // (\"medium\": 500, \"bold\": 700)\n@debug map.remove($font-weights, \"regular\", \"bold\")  // (\"medium\": 500)\n@debug map.remove($font-weights, \"bolder\")\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Mathematical Constant 'π' in Sass\nDESCRIPTION: Example showing how to access the mathematical constant pi through the sass:math module. The value is approximately 3.1415926536.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$pi; // 3.1415926536\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$pi  // 3.1415926536\n```\n\n----------------------------------------\n\nTITLE: CSS implementation without @extend\nDESCRIPTION: Demonstrates how styles would be written in CSS without using Sass's @extend feature.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n\n.error--serious {\n  border-width: 3px;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Files in Sass\nDESCRIPTION: Demonstrates how to load plain CSS files in Sass. The example shows that CSS files can be imported using the @use rule, and while they don't expose Sass features, their styles are included in the output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use 'code';\n```\n\nLANGUAGE: css\nCODE:\n```\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@use 'code'\n```\n\nLANGUAGE: css\nCODE:\n```\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Operators in Sass\nDESCRIPTION: This code snippet shows examples of using the 'not', 'and', and 'or' operators in Sass. It demonstrates how these operators work with true and false values, including negation, logical AND, and logical OR operations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/boolean.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n@debug not true; // false\n@debug not false; // true\n\n@debug true and true; // true\n@debug true and false; // false\n\n@debug true or false; // true\n@debug false or false; // false\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug not true  // false\n@debug not false  // true\n\n@debug true and true  // true\n@debug true and false  // false\n\n@debug true or false  // true\n@debug false or false  // false\n```\n\n----------------------------------------\n\nTITLE: Quoted String Examples in Sass\nDESCRIPTION: Demonstrates quoted string usage with various escape sequences and string interpolation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug \"Helvetica Neue\"; // \"Helvetica Neue\"\n@debug \"C:\\\\Program Files\"; // \"C:\\\\Program Files\"\n@debug \"\\\"Don't Fear the Reaper\\\"\"; // \"\\\"Don't Fear the Reaper\\\"\"\n@debug \"line1\\a line2\"; // \"line1\\a line2\"\n\n$roboto-variant: \"Mono\";\n@debug \"Roboto #{$roboto-variant}\"; // \"Roboto Mono\"\n```\n\n----------------------------------------\n\nTITLE: Unary String Operators in Sass\nDESCRIPTION: Demonstrates the unary operators / and - that create unquoted strings starting with the operator symbol followed by the expression value.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/string.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug / 15px; // /15px\n@debug - moz; // -moz\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug / 15px  // /15px\n@debug - moz  // -moz\n```\n\n----------------------------------------\n\nTITLE: Using the Ceil Function in Sass Math Module\nDESCRIPTION: Example demonstrating the ceil function which rounds a number up to the next highest whole number. All values are rounded to their integer ceiling values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.ceil(4); // 4\n@debug math.ceil(4.2); // 5\n@debug math.ceil(4.9); // 5\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.ceil(4)  // 4\n@debug math.ceil(4.2)  // 5\n@debug math.ceil(4.9)  // 5\n```\n\n----------------------------------------\n\nTITLE: Missing Channel Handling in Sass\nDESCRIPTION: Shows how Sass handles missing color channels using hsl() and color mixing functions. Demonstrates channel conversion behavior when working with missing values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/colors.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n$grey: hsl(none 0% 50%);\n\n@debug color.mix($grey, blue, $method: hsl); // hsl(240, 50%, 50%)\n@debug color.to-space($grey, lch); // lch(53.3889647411% 0 none)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n$grey: hsl(none 0% 50%)\n\n@debug color.mix($grey, blue, $method: hsl)  // hsl(240, 50%, 50%)\n@debug color.to-space($grey, lch)  // lch(53.3889647411% 0 none)\n```\n\n----------------------------------------\n\nTITLE: Nesting @media Queries in Sass\nDESCRIPTION: Shows how Sass merges nested @media queries to improve browser compatibility.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@media (hover: hover) {\n  .button:hover {\n    border: 2px solid black;\n\n    @media (color) {\n      border-color: #036;\n    }\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@media (hover: hover)\n  .button:hover\n    border: 2px solid black\n\n    @media (color)\n      border-color: #036\n```\n\n----------------------------------------\n\nTITLE: Using meta.inspect() to convert Sass values to string representation in SCSS/Sass\nDESCRIPTION: The meta.inspect() function converts Sass values to their string representation. It works with various data types including lists, maps, null values, and strings.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@debug meta.inspect(10px 20px 30px); // unquote(\"10px 20px 30px\")\n@debug meta.inspect((\"width\": 200px)); // unquote('(\"width\": 200px)')\n@debug meta.inspect(null); // unquote(\"null\")\n@debug meta.inspect(\"Helvetica\"); // unquote('\"Helvetica\"')\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n@debug meta.inspect(10px 20px 30px)  // unquote(\"10px 20px 30px\")\n@debug meta.inspect((\"width\": 200px))  // unquote('(\"width\": 200px)')\n@debug meta.inspect(null)  // unquote(\"null\")\n@debug meta.inspect(\"Helvetica\")  // unquote('\"Helvetica\"')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equality Operations in Sass\nDESCRIPTION: This code example demonstrates how equality (==) and inequality (!=) operators work with different Sass data types including numbers, strings, colors, lists, maps, calculations, booleans, null values, and functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/equality.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug 1px == 1px; // true\n@debug 1px != 1em; // true\n@debug 1 != 1px; // true\n@debug 96px == 1in; // true\n\n@debug \"Helvetica\" == Helvetica; // true\n@debug \"Helvetica\" != \"Arial\"; // true\n\n@debug hsl(34, 35%, 92.1%) == #f2ece4; // true\n@debug rgba(179, 115, 153, 0.5) != rgba(179, 115, 153, 0.8); // true\n\n@debug (5px 7px 10px) == (5px 7px 10px); // true\n@debug (5px 7px 10px) != (10px 14px 20px); // true\n@debug (5px 7px 10px) != (5px, 7px, 10px); // true\n@debug (5px 7px 10px) != [5px 7px 10px]; // true\n\n$theme: (\"venus\": #998099, \"nebula\": #d2e1dd);\n@debug $theme == (\"venus\": #998099, \"nebula\": #d2e1dd); // true\n@debug $theme != (\"venus\": #998099, \"iron\": #dadbdf); // true\n\n@debug true == true; // true\n@debug true != false; // true\n@debug null != false; // true\n\n@debug get-function(\"rgba\") == get-function(\"rgba\"); // true\n@debug get-function(\"rgba\") != get-function(\"hsla\"); // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug 1px == 1px  // true\n@debug 1px != 1em  // true\n@debug 1 != 1px  // true\n@debug 96px == 1in  // true\n\n@debug \"Helvetica\" == Helvetica  // true\n@debug \"Helvetica\" != \"Arial\"  // true\n\n@debug hsl(34, 35%, 92.1%) == #f2ece4  // true\n@debug rgba(179, 115, 153, 0.5) != rgba(179, 115, 153, 0.8)  // true\n\n@debug (5px 7px 10px) == (5px 7px 10px)  // true\n@debug (5px 7px 10px) != (10px 14px 20px)  // true\n@debug (5px 7px 10px) != (5px, 7px, 10px)  // true\n@debug (5px 7px 10px) != [5px 7px 10px]  // true\n\n$theme: (\"venus\": #998099, \"nebula\": #d2e1dd)\n@debug $theme == (\"venus\": #998099, \"nebula\": #d2e1dd)  // true\n@debug $theme != (\"venus\": #998099, \"iron\": #dadbdf)  // true\n\n@debug calc(10px + 10%) == calc(10px + 10%)  // true\n@debug calc(10% + 10px) == calc(10px + 10%)  // false\n\n@debug true == true  // true\n@debug true != false  // true\n@debug null != false  // true\n\n@debug get-function(\"rgba\") == get-function(\"rgba\")  // true\n@debug get-function(\"rgba\") != get-function(\"hsla\")  // true\n```\n\n----------------------------------------\n\nTITLE: Variable Shadowing in Sass\nDESCRIPTION: This example shows how local variables can shadow global variables of the same name. When a local variable has the same name as a global variable, they are treated as two separate variables, and the local one takes precedence within its scope.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$variable: global value;\n\n.content {\n  $variable: local value;\n  value: $variable;\n}\n\n.sidebar {\n  value: $variable;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$variable: global value\n\n.content\n  $variable: local value\n  value: $variable\n\n\n.sidebar\n  value: $variable\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Incompatible Units in Sass/SCSS\nDESCRIPTION: Shows the error that occurs when trying to compare numbers with incompatible units. Sass cannot convert between unrelated units like pixels and seconds.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/relational.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug 100px > 10s;\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug 100px > 10s\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements with list.nth() in Sass\nDESCRIPTION: Demonstrates how to use the list.nth() function to retrieve elements from lists at specific index positions. The index starts at 1, and negative indices count from the end of the list.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/lists.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:list\";\n\n$sizes: 40px, 50px, 80px;\n\n.icon-small {\n  font-size: list.nth($sizes, 1);  // 40px\n}\n.icon-medium {\n  font-size: list.nth($sizes, 2);  // 50px\n}\n.icon-large {\n  font-size: list.nth($sizes, 3);  // 80px\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:list\"\n\n$sizes: 40px, 50px, 80px\n\n.icon-small\n  font-size: list.nth($sizes, 1)  // 40px\n\n.icon-medium\n  font-size: list.nth($sizes, 2)  // 50px\n\n.icon-large\n  font-size: list.nth($sizes, 3)  // 80px\n```\n\n----------------------------------------\n\nTITLE: Handling boundary cases with string.insert() in Sass/SCSS\nDESCRIPTION: Demonstrates how string.insert() handles edge cases with large or small index values. Values beyond the string length append to the end, and values below negative length prepend to the beginning.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.insert(\"Roboto\", \" Bold\", 100); // \"Roboto Bold\"\n@debug string.insert(\"Bold\", \"Roboto \", -100); // \"Roboto Bold\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.insert(\"Roboto\", \" Bold\", 100)  // \"Roboto Bold\"\n@debug string.insert(\"Bold\", \"Roboto \", -100)  // \"Roboto Bold\"\n```\n\n----------------------------------------\n\nTITLE: Using Relational Operators in Sass/SCSS\nDESCRIPTION: Examples of basic relational operators comparing numbers with compatible units. The operators automatically convert between units like pixels, inches, milliseconds, and seconds.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/relational.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@debug 100 > 50; // true\n@debug 10px < 17px; // true\n@debug 96px >= 1in; // true\n@debug 1000ms <= 1s; // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug 100 > 50  // true\n@debug 10px < 17px  // true\n@debug 96px >= 1in  // true\n@debug 1000ms <= 1s  // true\n```\n\n----------------------------------------\n\nTITLE: Comparing transparentize() and color.scale() in Sass\nDESCRIPTION: Demonstrates the difference between using transparentize() and color.scale() to adjust color transparency. It shows how transparentize() decreases alpha by a fixed amount, while color.scale() makes a color a certain percentage more transparent.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_33\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it\n// returns a fully transparent color.\n@debug transparentize(rgba(#036, 0.3), 0.3); // rgba(0, 51, 102, 0)\n\n// scale() instead makes it 30% more transparent than it was originally.\n@debug color.scale(rgba(#036, 0.3), $alpha: -30%); // rgba(0, 51, 102, 0.21)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n// rgba(#036, 0.3) has alpha 0.3, so when transparentize() subtracts 0.3 it\n// returns a fully transparent color.\n@debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)\n\n// scale() instead makes it 30% more transparent than it was originally.\n@debug color.scale(rgba(#036, 0.3), $alpha: -30%)  // rgba(0, 51, 102, 0.21)\n```\n\n----------------------------------------\n\nTITLE: Inspecting and Converting Color Spaces in Sass\nDESCRIPTION: Demonstrates how to use the color module to inspect a color's space, check if it's a legacy color, and convert between color spaces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$brand: MediumVioletRed;\n\n// results: rgb, true\n@debug color.space($brand);\n@debug color.is-legacy($brand);\n\n// result: oklch(55.34% 0.2217 349.7)\n@debug color.to-space($brand, 'oklch');\n\n// results: oklch, false\n@debug color.space($brand);\n@debug color.is-legacy($brand);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$brand: MediumVioletRed\n\n// results: rgb, true\n@debug color.space($brand)\n@debug color.is-legacy($brand)\n\n// result: oklch(55.34% 0.2217 349.7)\n@debug color.to-space($brand, 'oklch')\n\n// results: oklch, false\n@debug color.space($brand)\n@debug color.is-legacy($brand)\n```\n\n----------------------------------------\n\nTITLE: List Value Examples in Sass\nDESCRIPTION: Shows different ways to declare list values in Sass, including space-separated, comma-separated, and bracketed lists.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/structure.md#2025-04-09_snippet_2\n\nLANGUAGE: SCSS\nCODE:\n```\n1.5em 1em 0 2em\nHelvetica, Arial, sans-serif\n[col1-start]\n```\n\n----------------------------------------\n\nTITLE: Checking Function Existence in Sass\nDESCRIPTION: Example demonstrating how to check if functions exist in different contexts using meta.function-exists()\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n@use \"sass:math\";\n\n@debug meta.function-exists(\"div\", \"math\"); // true\n@debug meta.function-exists(\"scale-color\"); // true\n@debug meta.function-exists(\"add\"); // false\n\n@function add($num1, $num2) {\n  @return $num1 + $num2;\n}\n@debug meta.function-exists(\"add\"); // true\n```\n\n----------------------------------------\n\nTITLE: Adding Values to Maps with map.set in Sass\nDESCRIPTION: Demonstrates how to use the map.set function to add new key-value pairs to a map or replace existing values. The function returns a new map without modifying the original.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.set($font-weights, \"extra-bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.set($font-weights, \"extra-bold\": 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\n----------------------------------------\n\nTITLE: Adding Values to Maps with map.set in Sass\nDESCRIPTION: Demonstrates how to use the map.set function to add new key-value pairs to a map or replace existing values. The function returns a new map without modifying the original.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.set($font-weights, \"extra-bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900);\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.set($font-weights, \"extra-bold\": 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 700, \"extra-bold\": 900)\n@debug map.set($font-weights, \"bold\", 900)\n// (\"regular\": 400, \"medium\": 500, \"bold\": 900)\n```\n\n----------------------------------------\n\nTITLE: Using string.index() function in Sass/SCSS\nDESCRIPTION: Demonstrates how to find the position of a substring within a string using string.index(). Returns the index of the first occurrence or null if not found.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\"); // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\"); // 11\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.index(\"Helvetica Neue\", \"Helvetica\")  // 1\n@debug string.index(\"Helvetica Neue\", \"Neue\")  // 11\n```\n\n----------------------------------------\n\nTITLE: Setting Map Values in Sass\nDESCRIPTION: Demonstrates the map.set() function to create a new map with updated values. The examples show setting values at the top level and within nested map structures.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);\n\n@debug map.set($font-weights, \"regular\", 300);\n// (\"regular\": 300, \"medium\": 500, \"bold\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700)\n\n@debug map.set($font-weights, \"regular\", 300)\n// (\"regular\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n----------------------------------------\n\nTITLE: Conditional Value Selection\nDESCRIPTION: Demonstrates the if() function which returns one of two values based on a condition, with special evaluation behavior.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_5\n\nLANGUAGE: sass\nCODE:\n```\n@debug if(true, 10px, 15px);\n@debug if(false, 10px, 15px);\n@debug if(variable-defined($var), $var, null);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Minimum Safe Integer in Sass Math Module\nDESCRIPTION: Example demonstrating how to access the minimum safe integer value that can be precisely represented as a 64-bit floating-point number in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$min-safe-integer; // -9007199254740991\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$min-safe-integer  // -9007199254740991\n```\n\n----------------------------------------\n\nTITLE: Using math.atan() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.atan() function to calculate arctangent. The function requires a unitless number as input and returns the result in degrees.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.atan(10); // 84.2894068625deg\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.atan(10) // 84.2894068625deg\n```\n\n----------------------------------------\n\nTITLE: Visibility Control in @forward\nDESCRIPTION: Demonstrates controlling member visibility using hide/show keywords. Shows how to selectively forward specific mixins and variables.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/forward.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// src/_list.scss\n$horizontal-list-gap: 2em;\n\n@mixin list-reset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin list-horizontal {\n  @include list-reset;\n\n  li {\n    display: inline-block;\n    margin: {\n      left: -2px;\n      right: $horizontal-list-gap;\n    }\n  }\n}\n\n// bootstrap.scss\n@forward \"src/list\" hide list-reset, $horizontal-list-gap;\n```\n\nLANGUAGE: sass\nCODE:\n```\n// src/_list.sass\n$horizontal-list-gap: 2em\n\n@mixin list-reset\n  margin: 0\n  padding: 0\n  list-style: none\n\n@mixin list-horizontal\n  @include list-rest\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: $horizontal-list-gap\n\n// bootstrap.sass\n@forward \"src/list\" hide list-reset, $horizontal-list-gap\n```\n\n----------------------------------------\n\nTITLE: Using color.adjust() and color.scale() Functions in Sass\nDESCRIPTION: Shows how to use color.adjust() and color.scale() functions to modify colors in different color spaces, replacing deprecated functions like lighten() and saturate().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/color-functions.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:color\";\n\n$color: #c71585;\n@debug color.adjust($color, $lightness: 15%, $space: hsl);\n@debug color.adjust($color, $lightness: 15%, $space: oklch);\n@debug color.scale($color, $lightness: 15%, $space: oklch);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:color\"\n\n$color: #c71585\n@debug color.adjust($color, $lightness: 15%, $space: hsl)\n@debug color.adjust($color, $lightness: 15%, $space: oklch)\n@debug color.scale($color, $lightness: 15%, $space: oklch)\n```\n\n----------------------------------------\n\nTITLE: Using abs() Function in Sass\nDESCRIPTION: Demonstrates the abs() function usage with different value types and calculations. Shows both direct CSS calculations and math module usage.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n.post-image {\n  padding-left: abs(10px);\n  padding-right: math.abs(-7.5%);\n  padding-top: abs(1 + 1px);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.post-image\n  padding-left: abs(-10px)\n  padding-right: math.abs(-7.5%)\n  padding-top: abs(1 + 1px)\n```\n\n----------------------------------------\n\nTITLE: Color Channel Missing Check in Sass\nDESCRIPTION: Checks if specific channels are missing in a color value. Supports various color formats and channel names.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_8\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.is-legacy(#b37399)  // true\n@debug color.is-legacy(hsl(90deg 30% 90%))  // true\n@debug color.is-legacy(oklch(70% 10% 120deg))  // false\n```\n\n----------------------------------------\n\nTITLE: Using opacify() and fade-in() Functions in Sass\nDESCRIPTION: Demonstrates the use of opacify() and fade-in() functions to increase the opacity of colors. Both functions increase the alpha channel by a specified amount between 0 and 1.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_28\n\nLANGUAGE: scss\nCODE:\n```\n@debug opacify(rgba(#6b717f, 0.5), 0.2); // rgba(107, 113, 127, 0.7)\n@debug fade-in(rgba(#e1d7d2, 0.5), 0.4); // rgba(225, 215, 210, 0.9)\n@debug opacify(rgba(#036, 0.7), 0.3); // #036\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug opacify(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.7)\n@debug fade-in(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.9)\n@debug opacify(rgba(#036, 0.7), 0.3)  // #036\n```\n\n----------------------------------------\n\nTITLE: Improved @use Rule Namespacing in SCSS After Migration\nDESCRIPTION: This SCSS snippet shows the result of using the namespace migrator with a custom --rename option. It demonstrates how complex namespaces can be simplified to more meaningful, component-based names using regular expressions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use 'components/button/lib/mixins' as button;\n@use 'components/input/lib/mixins' as input;\n@use 'components/table/lib/mixins' as table;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Embedding Source Content with --embed-sources\nDESCRIPTION: Example showing how to embed the entire contents of Sass source files in the source map with the --embed-sources flag, guaranteeing source availability regardless of how CSS is served.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_13\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --embed-sources sass/style.scss css.style.css\n```\n\n----------------------------------------\n\nTITLE: Private Members with @use in Sass\nDESCRIPTION: Demonstrates how to define private members in a module that are not accessible when the module is loaded with @use.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// src/_corners.scss\n$-radius: 3px;\n\n@mixin rounded {\n  border-radius: $-radius;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use \"src/corners\";\n\n.button {\n  @include corners.rounded;\n\n  // This is an error! $-radius isn't visible outside of `_corners.scss`.\n  padding: 5px + corners.$-radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Hue in Sass\nDESCRIPTION: The adjust-hue() function increases or decreases a color's HSL hue. It takes a color and a degree value between -360 and 360. This function is deprecated in favor of color.adjust().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n@debug adjust-hue(#6b717f, 60deg); // #796b7f\n@debug adjust-hue(#d2e1dd, -60deg); // #d6e1d2\n@debug adjust-hue(#036, 45); // #1a0066\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug adjust-hue(#6b717f, 60deg)  // #796b7f\n@debug adjust-hue(#d2e1dd, -60deg)  // #d6e1d2\n@debug adjust-hue(#036, 45)  // #1a0066\n```\n\n----------------------------------------\n\nTITLE: Constants in Sass Calculations (SCSS/Sass)\nDESCRIPTION: Demonstrates how Sass handles constants in calculations. Unrecognized identifiers are passed through as unquoted strings, while special constants like pi and e are converted to their numeric values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@debug calc(h + 30deg); // calc(h + 30deg);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug calc(h + 30deg)  // calc(h + 30deg);\n```\n\n----------------------------------------\n\nTITLE: Using math.asin() function in Sass\nDESCRIPTION: Shows how to use the math.asin() function to calculate arcsine. The function requires a unitless number as input and returns the result in degrees.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.asin(0.5); // 30deg\n@debug math.asin(2); // NaNdeg\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.asin(0.5) // 30deg\n@debug math.asin(2) // NaNdeg\n```\n\n----------------------------------------\n\nTITLE: Using color.lightness() Function in Sass\nDESCRIPTION: Demonstrates the use of the color.lightness() function to extract the lightness value from colors as a percentage. Returns the HSL lightness component as a number between 0% and 100%.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_26\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.lightness(#e1d7d2); // 85.2941176471%\n@debug color.lightness(#f2ece4); // 92.1568627451%\n@debug color.lightness(#dadbdf); // 86.4705882353%\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.lightness(#e1d7d2)  // 85.2941176471%\n@debug color.lightness(#f2ece4)  // 92.1568627451%\n@debug color.lightness(#dadbdf)  // 86.4705882353%\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sass Color Functions in Sass\nDESCRIPTION: This snippet is the Sass syntax equivalent of the SCSS example. It shows how to use Sass color functions like scale() and mix() with different color spaces, demonstrating scaling lightness in the oklch space and mixing colors using the oklch method.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/colors.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n$venus: #998099\n\n@debug color.scale($venus, $lightness: +15%, $space: oklch)\n// rgb(170.1523703626, 144.612080603, 170.1172627174)\n@debug color.mix($venus, midnightblue, $method: oklch)\n// rgb(95.9363315581, 74.5687109346, 133.2082569526)\n```\n\n----------------------------------------\n\nTITLE: Using --interactive mode in Sass\nDESCRIPTION: Demonstrates Sass's interactive mode (using -i flag) where you can write SassScript expressions and see their results. This mode also supports variables and @use rules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_18\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --interactive\n>> 1px + 1in\n97px\n>> @use \"sass:map\"\n>> $map: (\"width\": 100px, \"height\": 70px)\n(\"width\": 100px, \"height\": 70px)\n>> map.get($map, \"width\")\n100px\n```\n\n----------------------------------------\n\nTITLE: Complex @extend behavior in Sass\nDESCRIPTION: Illustrates how Sass intelligently handles complex selector interactions when using @extend.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n.content nav.sidebar {\n  @extend .info;\n}\n\n// This won't be extended, because `p` is incompatible with `nav`.\np.info {\n  background-color: #dee9fc;\n}\n\n// There's no way to know whether `<div class=\"guide\">` will be inside or\n// outside `<div class=\"content\">`, so Sass generates both to be safe.\n.guide .info {\n  border: 1px solid rgba(#000, 0.8);\n  border-radius: 2px;\n}\n\n// Sass knows that every element matching \"main.content\" also matches \".content\"\n// and avoids generating unnecessary interleaved selectors.\nmain.content .info {\n  font-size: 0.8em;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses for Explicit Order of Operations in Sass\nDESCRIPTION: This example demonstrates how parentheses can be used in Sass to explicitly control the order of operations, overriding the default operator precedence.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/index.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug (1 + 2) * 3; // 9\n@debug ((1 + 2) * 3 + 4) * 5; // 65\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug (1 + 2) * 3  // 9\n@debug ((1 + 2) * 3 + 4) * 5  // 65\n```\n\n----------------------------------------\n\nTITLE: Using math.is-unitless() function in Sass\nDESCRIPTION: Shows how to use the math.is-unitless() function to check if a number has no units. This function returns a boolean value indicating whether the input number is unitless.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.is-unitless(100); // true\n@debug math.is-unitless(100px); // false\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.is-unitless(100)  // true\n@debug math.is-unitless(100px)  // false\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Sass Files in Indented Syntax\nDESCRIPTION: Shows how to import multiple Sass files using the @import rule in Sass's indented syntax. It imports 'foundation/_code.sass' and 'foundation/_lists.sass' into a main stylesheet.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@import foundation/code, foundation/lists\n```\n\n----------------------------------------\n\nTITLE: Using color.hue() Function in Sass\nDESCRIPTION: Demonstrates the use of the color.hue() function to extract the hue value from colors in degrees. The function returns the hue component of a color in the HSL color space.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_23\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.hue(#e1d7d2); // 20deg\n@debug color.hue(#f2ece4); // 34.2857142857deg\n@debug color.hue(#dadbdf); // 228deg\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.hue(#e1d7d2)  // 20deg\n@debug color.hue(#f2ece4)  // 34.2857142857deg\n@debug color.hue(#dadbdf)  // 228deg\n```\n\n----------------------------------------\n\nTITLE: Creating SassDoc Documentation Comments\nDESCRIPTION: Demonstrates how to write documentation comments using SassDoc syntax with annotations for documenting Sass functions, mixins, and variables. Shows a practical example documenting a power function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/comments.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n/// Computes an exponent.\n///\n/// @param {number} $base\n///   The number to multiply by itself.\n/// @param {integer (unitless)} $exponent\n///   The number of `$base`s to multiply together.\n/// @return {number} `$base` to the power of `$exponent`.\n@function pow($base, $exponent)\n  $result: 1\n  @for $_ from 1 through $exponent\n    $result: $result * $base\n\n  @return $result\n```\n\n----------------------------------------\n\nTITLE: Generating Error CSS with --error-css\nDESCRIPTION: Example of using the --error-css flag to produce CSS files that display compilation errors directly in the browser, showing the error message and its context in both CSS comments and the body::before content.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_9\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --error-css style.scss style.css\n/* Error: Incompatible units em and px.\n *   ,\n * 1 | $width: 15px + 2em;\n *   |         ^^^^^^^^^^\n *   '\n *   test.scss 1:9  root stylesheet */\n\nbody::before {\n  font-family: \"Source Code Pro\", \"SF Mono\", Monaco, Inconsolata, \"Fira Mono\",\n      \"Droid Sans Mono\", monospace, monospace;\n  white-space: pre;\n  display: block;\n  padding: 1em;\n  margin-bottom: 1em;\n  border-bottom: 2px solid black;\n  content: \"Error: Incompatible units em and px.\\a   \\2577 \\a 1 \\2502  $width: 15px + 2em;\\a   \\2502          ^^^^^^^^^^\\a   \\2575 \\a   test.scss 1:9  root stylesheet\";\n}\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em;\n  │         ^^^^^^^^^^\n  ╵\n  test.scss 1:9  root stylesheet\n```\n\n----------------------------------------\n\nTITLE: Disallowed Compound Selectors in Sass @extend\nDESCRIPTION: Demonstrates invalid usage of compound and complex selectors with @extend. Shows that only simple selectors can be extended, and compound selectors like .message.info or .main .info are not allowed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n.alert {\n  @extend .message.info;\n  //      ^^^^^^^^^^^^^\n  // Error: Write @extend .message, .info instead.\n\n  @extend .main .info;\n  //      ^^^^^^^^^^^\n  // Error: write @extend .info instead.\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.alert\n  @extend .message.info\n  //      ^^^^^^^^^^^^^\n  // Error: Write @extend .message, .info instead.\n\n  @extend .main .info\n  //      ^^^^^^^^^^^\n  // Error: write @extend .info instead.\n```\n\n----------------------------------------\n\nTITLE: Accessing the Maximum 64-bit Floating Point Number in Sass\nDESCRIPTION: Example showing how to access the maximum representable 64-bit floating point number through the sass:math module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$max-number; // 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$max-number  // 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Using math.log() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.log() function to calculate logarithms with and without a specified base. The function requires unitless numbers as input.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.log(10); // 2.302585093\n@debug math.log(10, 10); // 1\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.log(10) // 2.302585093\n@debug math.log(10, 10) // 1\n```\n\n----------------------------------------\n\nTITLE: String Function Examples in Sass\nDESCRIPTION: Demonstrates the usage of string.quote() and string.unquote() functions for converting between quoted and unquoted strings.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.unquote(\".widget:hover\"); // .widget:hover\n@debug string.quote(bold); // \"bold\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Green Channel in Sass\nDESCRIPTION: The color.green() and green() functions return the green channel of a color as a number between 0 and 255. These functions are deprecated in favor of color.channel().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.green(#e1d7d2); // 215\n@debug color.green(white); // 255\n@debug color.green(black); // 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.green(#e1d7d2)  // 215\n@debug color.green(white)  // 255\n@debug color.green(black)  // 0\n```\n\n----------------------------------------\n\nTITLE: Calculation Operations Restrictions in Sass (SCSS/Sass)\nDESCRIPTION: Shows the limitations of using calculations with normal SassScript operations. Direct operations on calc() expressions cause errors, but nesting them within another calc() works properly.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$width: calc(100% + 10px);\n@debug $width * 2; // Error!\n@debug calc($width * 2); // calc((100% + 10px) * 2);\n```\n\nLANGUAGE: sass\nCODE:\n```\n$width: calc(100% + 10px);\n@debug $width * 2; // Error!\n@debug calc($width * 2); // calc((100% + 10px) * 2);\n```\n\n----------------------------------------\n\nTITLE: Using the --indented Flag for Indented Syntax\nDESCRIPTION: Example showing how to use the --indented flag to parse input as indented syntax (Sass) rather than SCSS. This is particularly useful when reading from standard input where syntax can't be determined by file extension.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ echo -e 'h1\\n  font-size: 40px' | sass --indented -\nh1 {\n  font-size: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting CSS At-Rules in Sass\nDESCRIPTION: Demonstrates how Sass handles nested at-rules within style rules, automatically swapping their positions in the output CSS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.print-only {\n  display: none;\n\n  @media print { display: block; }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.print-only\n  display: none\n\n  @media print\n    display: block\n```\n\n----------------------------------------\n\nTITLE: Using Perceptually Uniform Color Functions in CSS\nDESCRIPTION: Examples of CSS color functions that prioritize perceptually uniform distribution, including lab(), lch(), oklab(), and oklch().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nlab()\nlch()\noklab()\noklch()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Selector Value Format in Sass\nDESCRIPTION: Shows how selectors are represented internally as nested lists containing unquoted strings, with each level representing selector list, complex selectors, and compound selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug ((unquote(\".main\") unquote(\"aside:hover\")),\n        (unquote(\".sidebar\") unquote(\"p\")));\n// .main aside:hover, .sidebar p\n```\n\n----------------------------------------\n\nTITLE: Reassigning Variables in Sass Modules\nDESCRIPTION: Demonstrates how to reassign variables from imported modules in both SCSS and Sass syntax. The example shows a library module with a color variable that gets overridden in a separate module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n// _library.scss\n$color: red;\n```\n\nLANGUAGE: scss\nCODE:\n```\n// _override.scss\n@use 'library';\nlibrary.$color: blue;\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@use 'library';\n@use 'override';\n@debug library.$color;  //=> blue\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _library.sass\n$color: red\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _override.sass\n@use 'library'\nlibrary.$color: blue\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@use 'library'\n@use 'override'\n@debug library.$color  //=> blue\n```\n\n----------------------------------------\n\nTITLE: String Operators with Non-String Values in Sass\nDESCRIPTION: Shows how string operators work with non-string values like numbers and booleans. Demonstrates that string concatenation works with various data types on the right side of the operator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/string.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug \"Elapsed time: \" + 10s; // \"Elapsed time: 10s\";\n@debug true + \" is a boolean value\"; // \"true is a boolean value\";\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug \"Elapsed time: \" + 10s  // \"Elapsed time: 10s\";\n@debug true + \" is a boolean value\"  // \"true is a boolean value\";\n```\n\n----------------------------------------\n\nTITLE: Using the if() Function with Boolean Values in Sass\nDESCRIPTION: This snippet shows how to use the if() function in Sass to return different values based on boolean conditions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/booleans.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug if(true, 10px, 30px); // 10px\n@debug if(false, 10px, 30px); // 30px\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug if(true, 10px, 30px)  // 10px\n@debug if(false, 10px, 30px)  // 30px\n```\n\n----------------------------------------\n\nTITLE: Controlling Charset with --no-charset\nDESCRIPTION: Examples of using the --no-charset and --charset flags to control whether Sass emits @charset declarations or UTF-8 byte-order marks when the stylesheet contains non-ASCII characters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_8\n\nLANGUAGE: shellsession\nCODE:\n```\n$ echo 'h1::before {content: \"👭\"}' | sass --no-charset\nh1::before {\n  content: \"👭\";\n}\n\n$ echo 'h1::before {content: \"👭\"}' | sass --charset\n@charset \"UTF-8\";\nh1::before {\n  content: \"👭\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using @supports with Sass Mixins\nDESCRIPTION: Demonstrates how to use @supports within a Sass mixin to provide fallback styles based on browser feature support.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@mixin sticky-position {\n  position: fixed;\n  @supports (position: sticky) {\n    position: sticky;\n  }\n}\n\n.banner {\n  @include sticky-position;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin sticky-position\n  position: fixed\n  @supports (position: sticky)\n    position: sticky\n\n\n\n.banner\n  @include sticky-position\n```\n\n----------------------------------------\n\nTITLE: Media Query Limitations in Sass @extend\nDESCRIPTION: Shows the limitation of @extend within media queries, where extending selectors from outside the media query context is not allowed to maintain proper scope.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@media screen and (max-width: 600px) {\n  .error--serious {\n    @extend .error;\n    //      ^^^^^^\n    // Error: \".error\" was extended in @media, but used outside it.\n  }\n}\n\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@media screen and (max-width: 600px)\n  .error--serious\n    @extend .error\n    //      ^^^^^^\n    // Error: \".error\" was extended in @media, but used outside it.\n\n\n\n.error\n  border: 1px #f00\n  background-color: #fdd\n```\n\n----------------------------------------\n\nTITLE: Using Wide Gamut Color Functions in CSS\nDESCRIPTION: Examples of new CSS color functions for wide gamut and perceptually uniform color spaces, including oklch(), color(display-p3), and oklab().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\noklch(...)\ncolor(display-p3 ...)\noklab(...)\n```\n\n----------------------------------------\n\nTITLE: Number Values in Sass\nDESCRIPTION: Examples of numeric values in Sass, both with and without units\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/index.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n12\n100px\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Blackness in Sass\nDESCRIPTION: The color.blackness() and blackness() functions return the HWB blackness of a color as a percentage between 0% and 100%. These functions are deprecated in favor of color.channel().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_18\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.blackness(#e1d7d2); // 11.7647058824%\n@debug color.blackness(white); // 0%\n@debug color.blackness(black); // 100%\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.blackness(#e1d7d2)  // 11.7647058824%\n@debug color.blackness(white)  // 0%\n@debug color.blackness(black)  // 100%\n```\n\n----------------------------------------\n\nTITLE: String Values in Sass\nDESCRIPTION: Examples of string values in Sass, demonstrating both quoted and unquoted strings\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/index.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n\"Helvetica Neue\"\nbold\n```\n\n----------------------------------------\n\nTITLE: Using --dry-run Option\nDESCRIPTION: Example of using the --dry-run option to preview migration changes without saving them.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --dry-run --migrate-deps style.scss\nDry run. Logging migrated files instead of overwriting...\n\nstyle.scss\n_theme.scss\n_fonts.scss\n_grid.scss\n```\n\n----------------------------------------\n\nTITLE: Defining @keyframes Animations in Sass\nDESCRIPTION: Shows how to create CSS animations using the @keyframes at-rule in Sass, demonstrating percentage-based and from/to keyframes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@keyframes slide-in {\n  from {\n    margin-left: 100%;\n    width: 300%;\n  }\n\n  70% {\n    margin-left: 90%;\n    width: 150%;\n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@keyframes slide-in\n  from\n    margin-left: 100%\n    width: 300%\n\n\n  70%\n    margin-left: 90%\n    width: 150%\n\n\n  to\n    margin-left: 0%\n    width: 100%\n```\n\n----------------------------------------\n\nTITLE: Using --stop-on-error flag in Sass compilation\nDESCRIPTION: Shows how to use the --stop-on-error flag to halt compilation immediately when an error is detected rather than trying to compile other Sass files. Particularly useful in many-to-many mode.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_17\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --stop-on-error themes:public/css\nError: Expected expression.\n   ╷\n42 │ h1 {font-face: }\n   │                ^\n   ╵\n  themes/light.scss 42:16  root stylesheet\n```\n\n----------------------------------------\n\nTITLE: Special Unquoted String Cases in Sass\nDESCRIPTION: Shows special cases of unquoted strings including URLs, Unicode ranges, and special CSS values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@debug url(https://example.org); // url(https://example.org)\n@debug U+4??; // U+4??\n@debug #my-background; // #my-background\n@debug %; // %\n@debug !important; // !important\n```\n\n----------------------------------------\n\nTITLE: Using string.to-upper-case() function in Sass/SCSS\nDESCRIPTION: Demonstrates converting ASCII letters in a string to uppercase. Works with both quoted and unquoted strings, but only affects ASCII characters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.to-upper-case(\"Bold\"); // \"BOLD\"\n@debug string.to-upper-case(sans-serif); // SANS-SERIF\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.to-upper-case(\"Bold\")  // \"BOLD\"\n@debug string.to-upper-case(sans-serif)  // SANS-SERIF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Alpha in Sass\nDESCRIPTION: The color.alpha(), alpha(), and opacity() functions return the alpha channel of a color as a number between 0 and 1. These functions are deprecated in favor of color.channel().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.alpha(#e1d7d2); // 1\n@debug color.opacity(rgb(210, 225, 221, 0.4)); // 0.4\n@debug alpha(opacity=20); // alpha(opacity=20)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.alpha(#e1d7d2)  // 1\n@debug color.opacity(rgb(210, 225, 221, 0.4))  // 0.4\n@debug alpha(opacity=20)  // alpha(opacity=20)\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Migrator via Chocolatey\nDESCRIPTION: Command to install the Sass migrator using the Chocolatey package manager for Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\nchoco install sass-migrator\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Sass\nDESCRIPTION: Shows how to import a plain CSS file in Sass. The CSS file is imported without the .css extension and its contents are included as-is in the compiled output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n// code.css\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@import 'code';\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@import code\n```\n\nLANGUAGE: css\nCODE:\n```\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating --forward Option in Sass Migrator\nDESCRIPTION: This example illustrates how the --forward option is used to generate @forward rules for imported stylesheets during migration. It shows the transformation of multiple @import rules into @forward rules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_10\n\nLANGUAGE: shellsession\nCODE:\n```\n$ cat _index.scss\n@import \"theme\";\n@import \"typography\";\n@import \"components\";\n$ sass-migrator --migrate-deps module --forward=all style.scss\n$ cat _index.scss\n@forward \"theme\";\n@forward \"typography\";\n@forward \"components\";\n```\n\n----------------------------------------\n\nTITLE: Merging Maps with map.merge in Sass\nDESCRIPTION: Shows how to combine two maps using the map.merge function. When there are duplicate keys, the values from the second map are used in the result.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$light-weights: (\"lightest\": 100, \"light\": 300);\n$heavy-weights: (\"medium\": 500, \"bold\": 700);\n\n@debug map.merge($light-weights, $heavy-weights);\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$light-weights: (\"lightest\": 100, \"light\": 300)\n$heavy-weights: (\"medium\": 500, \"bold\": 700)\n\n@debug map.merge($light-weights, $heavy-weights)\n// (\"lightest\": 100, \"light\": 300, \"medium\": 500, \"bold\": 700)\n```\n\n----------------------------------------\n\nTITLE: Unquoted String Examples in Sass\nDESCRIPTION: Shows usage of unquoted strings (identifiers) including CSS-style identifiers and interpolation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@debug bold; // bold\n@debug -webkit-flex; // -webkit-flex\n@debug --123; // --123\n\n$prefix: ms;\n@debug -#{$prefix}-flex; // -ms-flex\n```\n\n----------------------------------------\n\nTITLE: Color Channel Powerless Check in Sass\nDESCRIPTION: Determines if a color channel is powerless in a given color space. Handles various color spaces and channel combinations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_9\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.is-powerless(hsl(180deg 0% 40%), \"hue\")  // true\n@debug color.is-powerless(hsl(180deg 0% 40%), \"saturation\")  // false\n@debug color.is-powerless(#999, \"hue\", $space: hsl)  // true\n```\n\n----------------------------------------\n\nTITLE: Examples of Many-to-Many Mode Compilation\nDESCRIPTION: Practical examples showing how to use many-to-many mode for single files, multiple files, and directory compilation. When compiling directories, partial files (starting with _) are ignored.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n​# Compiles style.scss to style.css.\n$ sass style.scss:style.css\n\n​# Compiles light.scss and dark.scss to light.css and dark.css.\n$ sass light.scss:light.css dark.scss:dark.css\n\n​# Compiles all Sass files in themes/ to CSS files in public/css/.\n$ sass themes:public/css\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Dart Sass with Module System Support\nDESCRIPTION: npm command to install the latest version of Dart Sass globally, which includes support for the new module system.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_8\n\nLANGUAGE: shellsession\nCODE:\n```\n$ npm install -g sass\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules Through Imports\nDESCRIPTION: Shows how to configure modules loaded through @import by defining global variables before the import. The example demonstrates setting a color variable for a library.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n// _library.scss\n$color: blue !default;\n\na {\n  color: $color;\n}\n---\n// _library.import.scss\n@forward 'library' as lib-*;\n---\n// style.sass\n$lib-color: green;\n@import \"library\";\n```\n\nLANGUAGE: sass\nCODE:\n```\n$color: blue !default\n\na\n  color: $color\n---\n// _library.import.sass\n@forward 'library' as lib-*\n---\n// style.sass\n$lib-color: green\n@import \"library\"\n```\n\nLANGUAGE: css\nCODE:\n```\na {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Using --no-unicode Option\nDESCRIPTION: Example of using the --no-unicode option to display error messages without Unicode characters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator --no-unicode module style.scss\nline 1, column 9 of style.scss: Error: Could not find Sass file at 'typography'.\n  ,\n1 | @import \"typography\";\n  |         ^^^^^^^^^^^^\n  '\nMigration failed!\n$ sass-migrator --unicode module style.scss\nline 1, column 9 of style.scss: Error: Could not find Sass file at 'typography'.\n  ╷\n1 │ @import \"typography\";\n  │         ^^^^^^^^^^^^\n  ╵\nMigration failed!\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Keys in map.merge\nDESCRIPTION: Demonstrates how map.merge handles duplicate keys when combining maps. The values from the second map override those in the first map for keys that exist in both.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/maps.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$weights: (\"light\": 300, \"medium\": 500);\n\n@debug map.merge($weights, (\"medium\": 700));\n// (\"light\": 300, \"medium\": 700)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\";\n\n$weights: (\"light\": 300, \"medium\": 500)\n\n@debug map.merge($weights, (\"medium\": 700))\n// (\"light\": 300, \"medium\": 700)\n```\n\n----------------------------------------\n\nTITLE: Converting to Percentage with math.percentage() in Sass\nDESCRIPTION: The math.percentage() function converts a unitless number (usually between 0 and 1) to a percentage. It's equivalent to multiplying the number by 100%.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_27\n\nLANGUAGE: SCSS\nCODE:\n```\n@use 'sass:math';\n\n@debug math.percentage(0.2); // 20%\n@debug math.percentage(math.div(100px, 50px)); // 200%\n```\n\nLANGUAGE: Sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.percentage(0.2)  // 20%\n@debug math.percentage(math.div(100px, 50px))  // 200%\n```\n\n----------------------------------------\n\nTITLE: Mixing Colors with Different Methods in Sass\nDESCRIPTION: Demonstrates the color.mix() function with different interpolation methods, including specifying color spaces and hue rotation directions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// result: #660099\n@debug color.mix(red, blue, 40%);\n\n// result: rgb(176.2950613593, -28.8924497904, 159.1757183525)\n@debug color.mix(red, blue, 40%, $method: lab);\n\n// result: rgb(-129.55249236, 149.0291922672, 77.9649510422)\n@debug color.mix(red, blue, 40%, $method: oklch longer hue);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n// result: #660099\n@debug color.mix(red, blue, 40%)\n\n// result: rgb(176.2950613593, -28.8924497904, 159.1757183525)\n@debug color.mix(red, blue, 40%, $method: lab)\n\n// result: rgb(-129.55249236, 149.0291922672, 77.9649510422)\n@debug color.mix(red, blue, 40%, $method: oklch longer hue)\n```\n\n----------------------------------------\n\nTITLE: Special Function Examples in Sass\nDESCRIPTION: Demonstrates special CSS functions that have unique parsing rules in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/structure.md#2025-04-09_snippet_5\n\nLANGUAGE: SCSS\nCODE:\n```\ncalc(1px + 100%)\nurl(http://myapp.com/assets/logo.png)\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Homebrew on macOS\nDESCRIPTION: Command to install Dart Sass using the Homebrew package manager on macOS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbrew install sass/sass/sass\n```\n\n----------------------------------------\n\nTITLE: Style Rule Example in Sass\nDESCRIPTION: Demonstrates the basic structure of a style rule with a block in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/structure.md#2025-04-09_snippet_1\n\nLANGUAGE: SCSS\nCODE:\n```\nh1 { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Displaying Partial Sass Compatibility Indicator in Markdown\nDESCRIPTION: This snippet shows how to use a compatibility indicator for partial feature support, including additional details about implementation differences.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% compatibility 'dart: true', 'libsass: \"partial\"', 'ruby: false' %}\n  Additional details go here.\n{% endcompatibility %}\n```\n\n----------------------------------------\n\nTITLE: Map Values in Sass\nDESCRIPTION: Example of a map value in Sass, showing key-value pair association\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/index.md#2025-04-09_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n(\"background\": red, \"foreground\": pink)\n```\n\n----------------------------------------\n\nTITLE: Using math.sin() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.sin() function to calculate sine. The function accepts angles (in deg or rad) or unitless numbers (assumed to be in rad).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.sin(100deg); // 0.984807753\n@debug math.sin(1rad); // 0.8414709848\n@debug math.sin(1); // 0.8414709848\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.sin(100deg) // 0.984807753\n@debug math.sin(1rad) // 0.8414709848\n@debug math.sin(1) // 0.8414709848\n```\n\n----------------------------------------\n\nTITLE: Inspecting Color Channels in Sass\nDESCRIPTION: Demonstrates how to access color channel values using color.channel() and how to retrieve channel values after conversion to a different color space.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$brand: hsl(0 100% 25.1%);\n\n// result: 25.1%\n@debug color.channel($brand, \"lightness\");\n\n// result: 37.67%\n@debug color.channel($brand, \"lightness\", $space: oklch);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$brand: hsl(0 100% 25.1%)\n\n// result: 25.1%\n@debug color.channel($brand, \"lightness\")\n\n// result: 37.67%\n@debug color.channel($brand, \"lightness\", $space: oklch)\n```\n\n----------------------------------------\n\nTITLE: Silencing specific deprecation warnings with --silence-deprecation\nDESCRIPTION: Demonstrates how to use the --silence-deprecation flag to temporarily ignore specific types of deprecation warnings, using the slash-division deprecation as an example.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_26\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --silence-deprecation=slash-div style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via npm\nDESCRIPTION: Command to install the pure-JavaScript version of Dart Sass globally using npm (Node Package Manager).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/012-dart-sass-is-in-beta.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g dart-sass\n```\n\n----------------------------------------\n\nTITLE: Map Declaration Example in Sass\nDESCRIPTION: Demonstrates the syntax for declaring a map with key-value pairs in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/structure.md#2025-04-09_snippet_3\n\nLANGUAGE: SCSS\nCODE:\n```\n(\"background\": red, \"foreground\": pink)\n```\n\n----------------------------------------\n\nTITLE: Executing Ruby Sass in One-to-One Mode\nDESCRIPTION: Demonstrates how to use Ruby Sass to compile a single input file to a single output file. If no output is specified, the compiled CSS is printed to the terminal.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass [input.scss] [output.css]\n```\n\n----------------------------------------\n\nTITLE: Using color.channel() Function in SCSS\nDESCRIPTION: Demonstrates how to extract channel values from colors in both their native space and after conversion to different color spaces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$brand: hsl(0 100% 25.1%);\n\n// result: 25.1%\n$hsl-lightness: color.channel($brand, \"lightness\");\n\n// result: 37.67%\n$oklch-lightness: color.channel($brand, \"lightness\", $space: oklch);\n```\n\n----------------------------------------\n\nTITLE: Using math.tan() function in Sass\nDESCRIPTION: Shows how to use the math.tan() function to calculate tangent. The function accepts angles (in deg or rad) or unitless numbers (assumed to be in rad).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_18\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.tan(100deg); // -5.6712818196\n@debug math.tan(1rad); // 1.5574077247\n@debug math.tan(1); // 1.5574077247\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.tan(100deg) // -5.6712818196\n@debug math.tan(1rad) // 1.5574077247\n@debug math.tan(1) // 1.5574077247\n```\n\n----------------------------------------\n\nTITLE: Using string.unquote() function in Sass/SCSS\nDESCRIPTION: Shows how to convert quoted strings to unquoted strings, which can be useful but potentially produce invalid CSS. Use with caution as the output may not always be valid CSS syntax.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.unquote(\"Helvetica\"); // Helvetica\n@debug string.unquote(\".widget:hover\"); // .widget:hover\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.unquote(\"Helvetica\")  // Helvetica\n@debug string.unquote(\".widget:hover\")  // .widget:hover\n```\n\n----------------------------------------\n\nTITLE: Using Ruby Sass with Compass Framework\nDESCRIPTION: Demonstrates how to load the Compass framework and make its mixins and functions available for use in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --compass style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via NPM\nDESCRIPTION: Command to install the JavaScript version of Dart Sass globally using NPM package manager\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/009-announcing-dart-sass.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g dart-sass\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments in Sass Indented Syntax\nDESCRIPTION: Shows how comments work in Sass indented syntax, where comment blocks are controlled by indentation. Demonstrates both silent and loud comments with optional closing markers.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/comments.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n// This comment won't be included in the CSS.\n  This is also commented out.\n\n/* But this comment will, except in compressed mode.\n\n/* It can also contain interpolation:\n  1 + 1 = #{1 + 1}\n\n/*! This comment will be included even in compressed mode.\n\np .sans\n  font: Helvetica, /* Inline comments must be closed. */ sans-serif\n```\n\n----------------------------------------\n\nTITLE: Using color.hwb() Function in Sass\nDESCRIPTION: Demonstrates two syntax options for the proposed color.hwb() function. It can use either space-separated syntax as defined in the CSS spec or Sass's comma-separated syntax.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/026-request-for-comments-hwb-functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\nhwb(270 20% 40%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nhwb(270, 20%, 40%)\n```\n\n----------------------------------------\n\nTITLE: Comparing OKLCH Color Definitions in SCSS\nDESCRIPTION: Demonstrates how OKLCH color space provides more perceptually consistent colors compared to HSL, with similar lightness and saturation values producing visually balanced results.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$pink: oklch(64% 0.196 353); // hsl(329.8 70.29% 58.75%)\n$blue: oklch(64% 0.196 253); // hsl(207.4 99.22% 50.69%)\n```\n\n----------------------------------------\n\nTITLE: Using the Floor Function in Sass Math Module\nDESCRIPTION: Example demonstrating the floor function which rounds a number down to the next lowest whole number. All values are rounded to their integer floor values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.floor(4); // 4\n@debug math.floor(4.2); // 4\n@debug math.floor(4.9); // 4\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.floor(4)  // 4\n@debug math.floor(4.2)  // 4\n@debug math.floor(4.9)  // 4\n```\n\n----------------------------------------\n\nTITLE: Using string.length() function in Sass/SCSS\nDESCRIPTION: Shows how to measure the length of strings in Sass, returning the number of characters. Works with both quoted and unquoted strings, including empty strings.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/string.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug string.length(\"Helvetica Neue\"); // 14\n@debug string.length(bold); // 4\n@debug string.length(\"\"); // 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:string\"\n\n@debug string.length(\"Helvetica Neue\")  // 14\n@debug string.length(bold)  // 4\n@debug string.length(\"\")  // 0\n```\n\n----------------------------------------\n\nTITLE: Using --verbose and --dry-run Options\nDESCRIPTION: Example of using both --verbose and --dry-run options to preview detailed migration changes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_7\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --verbose --dry-run style.scss\nDry run. Logging migrated files instead of overwriting...\n<==> style.scss\n@use \"bootstrap\" with (\n  $body-bg: #000,\n  $body-color: #111\n);\n\n@include bootstrap.media-breakpoint-up(sm) {\n  .navbar {\n    display: block;\n  }\n}\n$ sass-migrator module --verbose style.scss\nMigrating style.scss\n```\n\n----------------------------------------\n\nTITLE: Using selector-append Function in Sass 3.4\nDESCRIPTION: Demonstrates the selector-append function, which appends selectors without adding whitespace between them.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/004-sass-34-is-released.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nselector-append(\".foo, .bar\", \"-suffix\")\n```\n\n----------------------------------------\n\nTITLE: Using url() Function with Different Parsing Methods in Sass\nDESCRIPTION: Demonstrates three different ways to use the url() function in Sass: with a quoted string and interpolation, with an arithmetic expression, and as an interpolated special function. All examples are within @font-face rules setting up different weights of the Roboto font.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/special-functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$roboto-font-path: \"../fonts/roboto\";\n\n@font-face {\n    // This is parsed as a normal function call that takes a quoted string.\n    src: url(\"#{$roboto-font-path}/Roboto-Thin.woff2\") format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 100;\n}\n\n@font-face {\n    // This is parsed as a normal function call that takes an arithmetic\n    // expression.\n    src: url($roboto-font-path + \"/Roboto-Light.woff2\") format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 300;\n}\n\n@font-face {\n    // This is parsed as an interpolated special function.\n    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format(\"woff2\");\n\n    font-family: \"Roboto\";\n    font-weight: 400;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$roboto-font-path: \"../fonts/roboto\"\n\n@font-face\n    // This is parsed as a normal function call that takes a quoted string.\n    src: url(\"#{$roboto-font-path}/Roboto-Thin.woff2\") format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 100\n\n\n@font-face\n    // This is parsed as a normal function call that takes an arithmetic\n    // expression.\n    src: url($roboto-font-path + \"/Roboto-Light.woff2\") format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 300\n\n\n@font-face\n    // This is parsed as an interpolated special function.\n    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format(\"woff2\")\n\n    font-family: \"Roboto\"\n    font-weight: 400\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the page title for the sass:selector module documentation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: sass:selector\n---\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass to CSS using Command Line\nDESCRIPTION: Demonstrates how to use the sass command to compile Sass files to CSS, including watching for changes in directories.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass --watch input.scss output.css\n```\n\nLANGUAGE: shellsession\nCODE:\n```\nsass --watch app/sass:public/stylesheets\n```\n\n----------------------------------------\n\nTITLE: Sass Number Precision Examples\nDESCRIPTION: Demonstrates Sass's handling of numeric precision, showing how numbers are rounded to 10 digits after the decimal point and how precision affects number equality comparisons.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/numbers.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n@debug 0.012345678912345; // 0.0123456789\n@debug 0.01234567891 == 0.01234567899; // true\n@debug 1.00000000009; // 1\n@debug 0.99999999991; // 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Operations and Comparisons in Sass\nDESCRIPTION: This snippet shows various boolean operations and comparisons in Sass, including equality checks, relational operators, and the use of the math module for comparability checks.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/booleans.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\";\n\n@debug 1px == 2px; // false\n@debug 1px == 1px; // true\n@debug 10px < 3px; // false\n@debug math.comparable(100px, 3in); // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\"\n\n@debug 1px == 2px  // false\n@debug 1px == 1px  // true\n@debug 10px < 3px  // false\n@debug math.comparable(100px, 3in)  // true\n```\n\n----------------------------------------\n\nTITLE: Comparing Colors Across Different Spaces in Sass\nDESCRIPTION: Shows how to compare colors in different spaces using the color.same() function to determine if they represent the same rendered color.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$orange-rgb: #ff5f00;\n$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg);\n\n// result: false\n@debug $orange-rgb == $orange-oklch;\n\n// result: true\n@debug color.same($orange-rgb, $orange-oklch);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$orange-rgb: #ff5f00\n$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg)\n\n// result: false\n@debug $orange-rgb == $orange-oklch\n\n// result: true\n@debug color.same($orange-rgb, $orange-oklch)\n```\n\n----------------------------------------\n\nTITLE: Using selector-nest Function in Sass 3.4\nDESCRIPTION: Shows the usage of the new selector-nest function, which correctly nests selectors while handling comma-separated lists.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/004-sass-34-is-released.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nselector-nest(\".foo, .bar\", \".child\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating null in Sass functions and selectors\nDESCRIPTION: This snippet shows how null is returned by Sass functions when there's no result, and how it's used with the parent selector. It uses the string and map modules to demonstrate null returns.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/null.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n@use \"sass:string\";\n\n@debug string.index(\"Helvetica Neue\", \"Roboto\"); // null\n@debug map.get((\"large\": 20px), \"small\"); // null\n@debug &; // null\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n@use \"sass:string\"\n\n@debug string.index(\"Helvetica Neue\", \"Roboto\")  // null\n@debug map.get((\"large\": 20px), \"small\")  // null\n@debug &  // null\n```\n\n----------------------------------------\n\nTITLE: Using Ruby Sass with Standard Input\nDESCRIPTION: Demonstrates how to use the --stdin flag to read Sass input from standard input instead of a file.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_8\n\nLANGUAGE: shellsession\nCODE:\n```\n$ echo -e 'h1\\n  font-size: 40px' | sass --stdin\nh1 {\n  font-size: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass Files using Command-Line\nDESCRIPTION: Demonstrates how to use the Dart Sass command-line executable to compile Sass files into CSS. This snippet shows the basic usage of the sass command.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/dart-sass.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass source/index.scss css/index.css\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation in Sass\nDESCRIPTION: Shows how Sass handles scientific notation in numbers. Sass always compiles scientific notation to fully expanded numbers for better browser compatibility.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/numbers.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n@debug 5.2e3; // 5200\n@debug 6e-2; // 0.06\n```\n\n----------------------------------------\n\nTITLE: Handling null in Sass lists\nDESCRIPTION: This example demonstrates how null values in lists are omitted from the generated CSS. It uses a map of font families and attempts to retrieve a non-existent key, resulting in null.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/null.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\");\n\nh3 {\n  font: 18px bold map-get($fonts, \"sans\");\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\")\n\nh3\n  font: 18px bold map-get($fonts, \"sans\")\n```\n\n----------------------------------------\n\nTITLE: Generating Unix-style Newlines in Sass Output\nDESCRIPTION: This command tells Sass to generate output files with Unix-style newlines (U+000A LINE FEED), regardless of the operating system's default.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_10\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --unix-newlines style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Weave Algorithm in Pseudocode\nDESCRIPTION: Explains the weave operation used in the @extend algorithm, which handles selector combination. This function is responsible for generating all possible ways that extended selectors can be combined.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/001-how-extend-works.md#2025-04-09_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nlet PAREN_SELECTOR be the argument to weave(), a list of complex selectors\nlet PREFIXES be an empty list of complex selectors\n\nfor each complex selector COMPLEX in PAREN_SELECTOR:\n  if PREFIXES is empty:\n    add COMPLEX to PREFIXES\n    move to the next iteration\n\n  let COMPLEX_SUFFIX be the final compound selector in COMPLEX\n  let COMPLEX_PREFIX be COMPLEX without COMPLEX_SUFFIX\n  let NEW_PREFIXES be an empty list of complex selectors\n  for each complex selector PREFIX in PREFIXES:\n    let WOVEN be subweave(PREFIX, COMPLEX_PREFIX)\n    if WOVEN is null, move to the next iteration\n    for each complex selector WOVEN_COMPLEX in WOVEN:\n      append COMPLEX_SUFFIX to WOVEN_COMPLEX\n      add WOVEN_COMPLEX to NEW_PREFIXES\n  let PREFIXES be NEW_PREFIXES\n\nreturn PREFIXES\n```\n\n----------------------------------------\n\nTITLE: String Escape Normalization in Sass\nDESCRIPTION: Demonstrates how escape sequences are normalized in unquoted strings.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/strings.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:string\";\n\n@debug \\1F46D; // 👭\n@debug \\21; // \\!\n@debug \\7Fx; // \\7f x\n@debug string.length(\\7Fx); // 5\n```\n\n----------------------------------------\n\nTITLE: Suppressing Sass Warnings\nDESCRIPTION: This command tells Sass not to emit any warnings when compiling, including deprecation warnings and @warn rule outputs. It also silences the @debug rule.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_19\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --quiet style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Selective Compilation with --update\nDESCRIPTION: Example of using the --update flag to only compile stylesheets whose dependencies have been modified more recently than the corresponding CSS file, with status messages displayed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_10\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --update themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n```\n\n----------------------------------------\n\nTITLE: Using Dart Sass in Many-to-Many Mode\nDESCRIPTION: Command format for many-to-many mode which compiles multiple input files to multiple output files, or processes all Sass files in a directory to CSS files in another directory.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\nsass [<input.scss>:<output.css>] [<input/>:<output/>]...\n```\n\n----------------------------------------\n\nTITLE: HSL Color Construction\nDESCRIPTION: Demonstrates creating colors using HSL (Hue, Saturation, Lightness) values with optional alpha channel.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n@debug hsl(210deg 100% 20%);\n@debug hsl(210deg 100% 20% / 50%);\n@debug hsla(34, 35%, 92%, 0.2);\n```\n\n----------------------------------------\n\nTITLE: Specifying Sass Cache Location\nDESCRIPTION: This command tells Sass where to store its cache of parsed files for faster future invocations. In this example, it's set to /tmp/sass-cache.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_16\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --cache-location=/tmp/sass-cache style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Subset Map Operations in Ruby\nDESCRIPTION: Shows how a subset map data structure works with set and get operations, which is a core primitive needed for implementing @extend functionality.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/001-how-extend-works.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmap.set([1, 2], 'value1')\nmap.set([2, 3], 'value2')\nmap.set([3, 4], 'value3')\nmap.get([1, 2, 3]) => ['value1', 'value2']\n```\n\n----------------------------------------\n\nTITLE: Comparing Unitless Numbers in Sass/SCSS\nDESCRIPTION: Demonstrates how unitless numbers can be compared with any number. Sass automatically converts unitless numbers to the unit of the other number in the comparison.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/relational.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@debug 100 > 50px; // true\n@debug 10px < 17; // true\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug 100 > 50px  // true\n@debug 10px < 17  // true\n```\n\n----------------------------------------\n\nTITLE: Comparing Sass and CSS abs() Function Behavior with Percentage Values\nDESCRIPTION: Example showing how abs() with percentage values works differently in Sass versus CSS. In Sass, abs(10%) returns 10%, while in CSS, if 10% represents -50px, abs(10%) would resolve to -10% and then to 50px in the browser.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/abs-percent.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nabs(10%)\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Maps with --no-source-map\nDESCRIPTION: Example showing how to disable source map generation with the --no-source-map flag. By default, Dart Sass generates source maps for every CSS file it produces.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_11\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --no-source-map style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Using Dart Sass in One-to-One Mode\nDESCRIPTION: Basic command format for one-to-one mode compilation which processes a single input file to a single output file. If no output location is specified, the compiled CSS is printed to the terminal.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass <input.scss> [output.css]\n```\n\n----------------------------------------\n\nTITLE: Color Space Constructor Function\nDESCRIPTION: Shows usage of the color() function to create colors in different color spaces with specified channel values and optional alpha.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n@debug color(srgb 0.1 0.6 1);\n@debug color(xyz 30% 0% 90% / 50%);\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Migrator via npm\nDESCRIPTION: Command to install the Sass migrator globally using npm package manager.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\nnpm install -g sass-migrator\n```\n\n----------------------------------------\n\nTITLE: Displaying Brand Color Swatches with Liquid Templating in HTML\nDESCRIPTION: Creates a responsive grid layout that iterates through color variables using Liquid templating to display brand color swatches with their corresponding variable names.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/color.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"sl-l-grid sl-l-grid--full sl-l-large-grid--divide-by-3 sl-l-large-grid--gutters\">\n  {% for swatch in colors %}\n    <li class=\"sl-l-grid__column\">\n      <p class=\"sl-color--{{ swatch }}-background\">&nbsp;</p>\n      <code>$sl-color--{{ swatch }}</code>\n    </li>\n  {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Single Equals Operator in Sass for IE Compatibility\nDESCRIPTION: This snippet showcases the use of the special single equals (=) operator in Sass, which is used for backwards compatibility with old IE-only syntax. It creates an unquoted string with operands separated by =.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/index.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.transparent-blue {\n  filter: chroma(color=#0000ff);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.transparent-blue\n  filter: chroma(color=#0000ff)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sass Compatibility Indicator in Markdown\nDESCRIPTION: This snippet demonstrates how to use a compatibility indicator in Sass documentation to show feature support across different Sass implementations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% compatibility 'dart: true', 'libsass: \"3.6.0\"', 'ruby: false', 'feature: \"Feature Name\"' %}{% endcompatibility %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map URLs with --source-map-urls\nDESCRIPTION: Examples showing how to configure source map URL formats with relative (default) or absolute file URLs using the --source-map-urls option.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_12\n\nLANGUAGE: shellsession\nCODE:\n```\n​# Generates a URL like \"../sass/style.scss\".\n$ sass --source-map-urls=relative sass/style.scss css/style.css\n\n​# Generates a URL like \"file:///home/style-wiz/sassy-app/sass/style.scss\".\n$ sass --source-map-urls=absolute sass/style.scss css/style.css\n```\n\n----------------------------------------\n\nTITLE: Setting Output Styles with --style\nDESCRIPTION: Examples of using the --style (-s) option to control CSS output formatting, showing both expanded (default) and compressed styles.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_7\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --style=expanded style.scss\nh1 {\n  font-size: 40px;\n}\n\n$ sass --style=compressed style.scss\nh1{font-size:40px}\n```\n\n----------------------------------------\n\nTITLE: Using color.saturation() Function in Sass\nDESCRIPTION: Demonstrates the use of the color.saturation() function to extract the saturation value from colors. Returns the HSL saturation component as a percentage between 0% and 100%.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_32\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.saturation(#e1d7d2); // 20%\n@debug color.saturation(#f2ece4); // 30%\n@debug color.saturation(#dadbdf); // 7.2463768116%\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.saturation(#e1d7d2)  // 20%\n@debug color.saturation(#f2ece4)  // 30%\n@debug color.saturation(#dadbdf)  // 7.2463768116%\n```\n\n----------------------------------------\n\nTITLE: Executing Dart Sass Compilation Script\nDESCRIPTION: Shows how to run the Dart script for compiling Sass files from the command line. This command executes the Dart script with input and output file paths as arguments.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/dart-sass.md#2025-04-09_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\ndart compile-sass.dart styles.scss styles.css\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Components in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for creating alert components. It includes a default alert and an info alert with custom styling classes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sl-c-alert\">\n  <div class=\"sl-l-container\">\n    <p>\n      <strong>Alert</strong>\n      {% lorem 'sentence' %}\n    </p>\n  </div>\n</div>\n\n<div class=\"sl-c-alert sl-c-alert--info\">\n  <div class=\"sl-l-container\">\n    <p>\n      <strong>Info Alert</strong>\n      {% lorem 'sentence' %}\n    </p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Historical Sass Behavior with Mixed Declarations\nDESCRIPTION: This example shows how Sass historically pulled declarations to the beginning of rules when mixed with nested rules, avoiding selector duplication.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/mixed-decls.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.example {\n  color: red;\n\n  &--serious {\n    font-weight: bold;\n  }\n\n  font-weight: normal;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.example\n  color: red\n\n  &--serious\n    font-weight: bold\n\n\n  font-weight: normal\n```\n\nLANGUAGE: css\nCODE:\n```\n.example {\n  color: red;\n  font-weight: normal;\n}\n\n.example--serious {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Pass Algorithm in Pseudocode\nDESCRIPTION: Describes the first pass of the @extend algorithm where extend declarations are recorded in a subset map. This pass collects all @extend directives in the stylesheet for later processing.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/001-how-extend-works.md#2025-04-09_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nlet MAP be an empty subset map from simple selectors to (complex selector, compound selector) pairs\nfor each @extend in the document:\n  let EXTENDER be the complex selector of the CSS rule containing the @extend\n  let TARGET be the compound selector being @extended\n  MAP.set(TARGET, (EXTENDER, TARGET))\n```\n\n----------------------------------------\n\nTITLE: Controlling Unicode characters in error messages with --no-unicode\nDESCRIPTION: Demonstrates how to use the --no-unicode flag to emit only ASCII characters in error messages versus the default or --unicode behavior which includes non-ASCII characters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_20\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --no-unicode style.scss style.css\nError: Incompatible units em and px.\n  ,\n1 | $width: 15px + 2em;\n  |         ^^^^^^^^^^\n  '\n  test.scss 1:9  root stylesheet\n\n$ sass --unicode style.scss style.css\nError: Incompatible units em and px.\n  ╷\n1 │ $width: 15px + 2em;\n  │         ^^^^^^^^^^\n  ╵\n  test.scss 1:9  root stylesheet\n```\n\n----------------------------------------\n\nTITLE: Using the Node Package Importer with --pkg-importer\nDESCRIPTION: Example showing how to enable Node.js module resolution with the --pkg-importer=node option to load dependencies using the Node.js module resolution algorithm.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --pkg-importer=node style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Using color.channel() Function in Sass\nDESCRIPTION: Demonstrates how to use the new color.channel() function to access color channel values in different color spaces, replacing deprecated functions like color.red() and color.hue().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/color-functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:color\";\n\n$color: #c71585;\n@debug color.channel($color, \"red\", $space: rgb);\n@debug color.channel($color, \"red\", $space: display-p3);\n@debug color.channel($color, \"hue\", $space: oklch);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:color\"\n\n$color: #c71585\n@debug color.channel($color, \"red\", $space: rgb)\n@debug color.channel($color, \"red\", $space: display-p3)\n@debug color.channel($color, \"hue\", $space: oklch)\n```\n\n----------------------------------------\n\nTITLE: Generated CSS from Map Iteration\nDESCRIPTION: Shows the resulting CSS output from the map iteration example, demonstrating how the Sass map gets transformed into concrete CSS rules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/003-sass-33-is-released.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  font-size: 2em;\n}\n\nh2 {\n  font-size: 1.5em;\n}\n\nh3 {\n  font-size: 1.2em;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter block defining the page title and introduction text for the style guide page.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Style Guide\nintroduction: >\n  Contributing to this website? Awesome! Use this style guide, developed by\n  Team Sass Design. If you add new design, please document it here.\n---\n```\n\n----------------------------------------\n\nTITLE: Detecting First-Class Calculations in Sass\nDESCRIPTION: This snippet demonstrates how to detect support for first-class calculations in Sass using expression-level syntax. It compares the result of a calc() function to a numeric value.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/feature-exists.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1) == 1\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Unix Systems\nDESCRIPTION: Shell command to check if Sass installation is vulnerable by examining file permissions. If the last group of letters in the first column contains 'w', the installation is vulnerable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/035-security-alert-tar-permissions.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVulnerable:\n-rwxr-xrwx 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass\n\nNot vulnerable:\n-rwxr-xr-x 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass\n```\n\n----------------------------------------\n\nTITLE: Displaying help information with --help\nDESCRIPTION: Shows how to use the --help (-h) flag to print a summary of the Sass command-line documentation, providing an overview of available commands and options.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_28\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --help\nCompile Sass to CSS.\n\nUsage: sass <input.scss> [output.css]\n       sass <input.scss>:<output.css> <input/>:<output/>\n\n...\n```\n\n----------------------------------------\n\nTITLE: Running Sass in Interactive Mode\nDESCRIPTION: This command runs Sass in interactive mode, allowing users to write and evaluate SassScript expressions and use variables interactively.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_13\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --interactive\n>> 1px + 1in\n97px\n>> $map: (\"width\": 100px, \"height\": 70px)\n(\"width\": 100px, \"height\": 70px)\n>> map-get($map, \"width\")\n100px\n```\n\n----------------------------------------\n\nTITLE: Using @-moz-document with Empty URL Prefix in SCSS and Sass\nDESCRIPTION: Demonstrates the allowed usage of @-moz-document with an empty url-prefix function, which is still supported as a hack targeting Firefox. This snippet shows how to apply styles specifically for Firefox browsers.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/moz-document.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@-moz-document url-prefix() {\n  .error {\n    color: red;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@-moz-document url-prefix()\n  .error\n    color: red\n```\n\n----------------------------------------\n\nTITLE: Defining SassFunction Class in TypeScript\nDESCRIPTION: The SassFunction class represents function values in Sass, allowing creation of first-class functions with a synchronous callback. These functions can be passed around as values but cannot be invoked by custom functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassFunction extends Value {\n  /**\n   * Creates a Sass function value with the given `signature` that calls\n   * `callback` when it's invoked.\n   */\n  constructor(\n    signature: string,\n    callback: CustomFunctionCallback\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page with YAML Front Matter\nDESCRIPTION: YAML front matter configuration for a 404 error page, specifying layout, title, permalink and custom introduction properties. Includes settings for collection exclusion and text centering.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/404.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: has_no_sidebars\ntitle: Page Not Found\npermalink: '/404.html'\neleventyExcludeFromCollections: true\nintroduction: >\n  Sorry, but the page you were trying to view does not exist.\ncenter_introduction: true\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Future math.random() Unit Handling in Sass\nDESCRIPTION: Shows how math.random() will handle units in future Sass versions, where units will be preserved in the output rather than being stripped.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/function-units.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\"\n\n// Future Sass, doesn't work yet!\n@debug math.random(100px)  // 42px\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\";\n\n// Future Sass, doesn't work yet!\n@debug math.random(100px); // 42px\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Property with Nested Block in Plain CSS\nDESCRIPTION: An example from Polymer documentation showing CSS custom properties with nested block syntax, which was difficult to represent in Sass 3.4.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/008-sass-35-release-candidate.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:host {\n  --my-toolbar-theme: {\n    background-color: green;\n    border-radius: 4px;\n    border: 1px solid gray;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Sass version with --version flag\nDESCRIPTION: Demonstrates how to use the --version flag to print the current version of Sass installed on your system.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_29\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --version\n{{ releases['dart-sass'].version }}\n```\n\n----------------------------------------\n\nTITLE: Using Ruby Sass with Require Option\nDESCRIPTION: Shows how to load a Ruby gem before running Sass, which can be used to load functions defined in Ruby into the Sass environment.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --require=rails-sass-images style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Creating Opaque Colors with Null-Safe Alpha in JavaScript\nDESCRIPTION: Demonstrates how to properly create a SassColor object in JavaScript while safely handling potentially null alpha values. This pattern ensures compatibility with the new behavior by explicitly defaulting to 1 when alpha is null.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/null-alpha.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew sass.SassColor({\n  red: 102,\n  green: 51,\n  blue: 153,\n  alpha: alpha ?? 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sass CLI Command for Embedded Mode\nDESCRIPTION: Shows the new command-line interface for accessing the embedded Sass functionality that will be bundled into the main Dart Sass executable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/037-rfc-embedded-protocol-2.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsass --embedded\n```\n\n----------------------------------------\n\nTITLE: CSS Range-Format Media Query\nDESCRIPTION: Shows the new CSS Media Queries Level 4 range syntax for defining media queries, which is now supported in Dart Sass 1.11.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/017-feature-watchcss-imports-and-css-compatibility.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@media (width > 500px) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Selector Extension Approach in SCSS/Sass\nDESCRIPTION: Shows the recommended approach of extending each simple selector separately instead of using compound selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/extend-compound.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.message {\n  border: 1px solid black;\n}\n.info {\n  font-size: 1.5rem;\n}\n\n.heads-up {\n  @extend .message, .info;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.message\n  border: 1px solid black\n\n.info\n  font-size: 1.5rem\n\n\n.heads-up\n  @extend .message, .info\n```\n\n----------------------------------------\n\nTITLE: Transparent Color Output in Sass\nDESCRIPTION: Transparent colors created by Sass's color functions will now be written as rgba(0, 0, 0, 0) rather than transparent to work around an Internet Explorer bug.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n$color: rgba(0, 0, 0, 0);\n// Will output as: rgba(0, 0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Executing Ruby Sass in Many-to-Many Mode\nDESCRIPTION: Shows how to use Ruby Sass to compile multiple input files to multiple output files, or compile all Sass files in a directory to CSS files in another directory.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\nsass [<input.css>:<output.css>] [<input/>:<output/>] [input.css] [input/]...\n```\n\n----------------------------------------\n\nTITLE: Controlling Source Map Generation in Ruby Sass\nDESCRIPTION: Shows how to use the --sourcemap option to control how Sass generates source maps, with examples of auto, file, inline, and none modes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_7\n\nLANGUAGE: shellsession\nCODE:\n```\n# Generates a URL like \"../sass/style.scss\".\n$ sass --sourcemap=auto sass/style.scss css/style.css\n\n# Generates a URL like \"file:///home/style-wiz/sassy-app/sass/style.scss\".\n$ sass --sourcemap=file sass/style.scss css/style.css\n\n# Includes the full text of sass/style.scss in the source map.\n$ sass --sourcemap=inline sass/style.scss css/style.css\n\n# Doesn't generate a source map.\n$ sass --sourcemap=none sass/style.scss css/style.css\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Selectors for Compound Extensions\nDESCRIPTION: Demonstrates how to use placeholder selectors as an alternative approach when maintaining compound selector behavior is necessary.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/extend-compound.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n%message-info, .message.info {\n  border: 1px solid black;\n  font-size: 1.5rem;\n}\n\n.heads-up {\n  @extend %message-info;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n%message-info, .message.info\n  border: 1px solid black\n  font-size: 1.5rem\n\n\n.heads-up\n  @extend %message-info\n```\n\n----------------------------------------\n\nTITLE: Extended Pseudo-Selector Argument Syntax in Sass\nDESCRIPTION: Pseudo selectors that take arguments can now accept any argument matching CSS's <declaration-value> syntax, improving forwards-compatibility with new selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n:nth-child(2n + 1) {\n  background-color: lightgray;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS File in Sass\nDESCRIPTION: Demonstrates how to import a CSS file into Sass compilation by omitting the file extension. This allows the CSS to be parsed as plain CSS and included in the Sass stylesheet.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/017-feature-watchcss-imports-and-css-compatibility.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import \"styles\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Named Import of Sass in JavaScript\nDESCRIPTION: This code snippet demonstrates the correct way to import Sass in ECMAScript modules using named exports. This is the recommended method going forward.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/default-export.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as sass from 'sass'; // Do this\n```\n\n----------------------------------------\n\nTITLE: Setting Default Character Encoding in Sass CLI\nDESCRIPTION: This command sets the default character encoding for Sass to Shift-JIS when loading source files that don't explicitly specify an encoding.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_9\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --default-encoding=Shift-JIS style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Disabling Sass Caching\nDESCRIPTION: This command tells Sass not to cache parsed files at all, which may be useful in certain development or debugging scenarios.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_17\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --no-cache style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New CSS Nesting Behavior with Mixed Declarations\nDESCRIPTION: This example shows how CSS now applies declarations in the exact order they appear in the document, which differs from Sass's historical behavior.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/mixed-decls.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.example {\n  color: red;\n\n  &--serious {\n    font-weight: bold;\n  }\n\n  font-weight: normal;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.example\n  color: red\n\n  &--serious\n    font-weight: bold\n\n\n  font-weight: normal\n```\n\nLANGUAGE: css\nCODE:\n```\n.example {\n  color: red;\n}\n\n.example--serious {\n  font-weight: bold;\n}\n\n.example {\n  font-weight: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Library Configuration Example in Sass\nDESCRIPTION: Complete example of library configuration pattern using multiple files.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n// bootstrap.scss\n@forward \"variables\";\n@use \"reboot\";\n```\n\nLANGUAGE: scss\nCODE:\n```\n// _variables.scss\n$paragraph-margin-bottom: 1rem !default;\n```\n\nLANGUAGE: scss\nCODE:\n```\n// _reboot.scss\n@use \"variables\" as *;\n\np {\n  margin-top: 0;\n  margin-bottom: $paragraph-margin-bottom;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// User's stylesheet\n@use \"bootstrap\" with (\n  $paragraph-margin-bottom: 1.2rem\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Complex @use Rule Namespacing in SCSS\nDESCRIPTION: This SCSS snippet demonstrates a scenario where the module migrator generates complex namespaces for @use rules to resolve conflicts. It shows multiple @use rules with lengthy, automatically generated namespaces based on the imported file paths.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use 'components/button/lib/mixins' as button-lib-mixins;\n@use 'components/input/lib/mixins' as input-lib-mixins;\n@use 'components/table/lib/mixins' as table-lib-mixins;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sass Website Development\nDESCRIPTION: Command to install all required NPM dependencies for the Sass website project. This should be run after cloning the repository and setting up Node.js.\nSOURCE: https://github.com/sass/sass-site/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Emitting Debug Info in Sass Output\nDESCRIPTION: This command causes Sass to emit dummy @media queries that indicate where each style rule was defined in the source stylesheet. It's mainly for backwards-compatibility.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_11\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --debug-info style.scss\n@media -sass-debug-info{filename{font-family:file\\\\/\\\\/\\\\/home\\\\/style-wiz\\\\/sassy-app\\\\/style\\\\.scss}line{font-family:\\\\000031}}\nh1 {\n  font-size: 40px; }\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Old-Style Property Syntax in Sass\nDESCRIPTION: The old-style :name value property syntax is deprecated as it's not widely used and differs unnecessarily from CSS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_8\n\nLANGUAGE: sass\nCODE:\n```\n:property value // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Creating Slash-Separated Lists in Sass\nDESCRIPTION: Shows how to create slash-separated lists using the list.slash() function and use them with CSS Grid properties during the transition period.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/slash-div.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:list\";\n@use \"sass:math\";\n\n.item3 {\n  $row: list.slash(span math.div(6, 2), 7);\n  grid-row: $row;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:list\"\n@use \"sass:math\"\n\n.item3\n  $row: list.slash(span math.div(6, 2), 7)\n  grid-row: $row\n```\n\n----------------------------------------\n\nTITLE: Markdown Brand Guidelines Structure\nDESCRIPTION: Markdown structure defining the brand guidelines page layout with image galleries for different logo variations including standard, white, and black versions. Includes specifications for color codes and usage restrictions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/brand.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Brand Guidelines\n---\n\n## Brand Usage\n\n- Do not stretch or distort the logo. Use the \"seal\" version of the logo when\n  needing to use a square image (like avatars).\n- Do not alter the color of the logo. The official logo color is\n  `$sl-color--hopbush` (`#c69`).\n- If you have to put the logo on a busy/colorful background, then you can use\n  one of the reversed (on white) logos, provided here.\n- When using the Sass brand and identity in your presentations, articles,\n  videos, or any other media, please be respectful. The Sass brand is feminine\n  and we love that. But our brand must never be used alongside sexist imagery.\n  In fact, we [explicitly changed our\n  logo](https://github.com/sass/sass/issues/349) for that very reason. Read\n  our [community guidelines](/community-guidelines) for more information.\n```\n\n----------------------------------------\n\nTITLE: Prefix Forwarding in Sass\nDESCRIPTION: Shows how to add prefixes to forwarded module members using 'as'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n// material/_index.scss\n@forward \"theme\" as theme-*;\n```\n\n----------------------------------------\n\nTITLE: Handling Dependency Loading Errors\nDESCRIPTION: Example showing how to resolve dependency loading errors using the --load-path option.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_8\n\nLANGUAGE: shellsession\nCODE:\n```\n$ ls .\nstyle.scss  node_modules\n$ sass-migrator module style.scss\nError: Could not find Sass file at 'dependency'.\n  ,\n1 | @import \"dependency\";\n  |         ^^^^^^^^^^^^\n  '\n  style.scss 1:9  root stylesheet\nMigration failed!\n$ sass-migrator --load-path node_modules module style.scss\n```\n\n----------------------------------------\n\nTITLE: Adding Line Number Comments in Sass Output\nDESCRIPTION: This command causes Sass to emit comments for every style rule that indicate where each style rule was defined in the source stylesheet.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_12\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --line-numbers style.scss\n/* line 1, style.scss */\nh1 {\n  font-size: 40px; }\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Reference Combinator in Sass\nDESCRIPTION: The reference combinator (/foo/) is deprecated as it's no longer in the CSS specification and is being removed from Chrome.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_7\n\nLANGUAGE: sass\nCODE:\n```\nE /foo/ F {\n  property: value; // Deprecated\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguous Unary Operator Usage in Sass\nDESCRIPTION: Example showing how the unary minus operator can be ambiguous in Sass when used with variables in space-separated lists. This demonstrates the syntax that will be deprecated.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/strict-unary.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n$size: 10px;\n\ndiv {\n  margin: 15px -$size;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$size: 10px\n\ndiv\n  margin: 15px -$size\n```\n\n----------------------------------------\n\nTITLE: Module Forwarding in Sass\nDESCRIPTION: Demonstrates how to forward multiple modules using @forward directive.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n// bootstrap.scss\n@forward \"functions\";\n@forward \"variables\";\n@forward \"mixins\";\n```\n\n----------------------------------------\n\nTITLE: Suppressing all warnings with --quiet flag\nDESCRIPTION: Demonstrates the --quiet (-q) flag which tells Sass not to emit any warnings during compilation, including deprecation warnings and @warn rule outputs. It also silences the @debug rule.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_22\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --quiet style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Checking Sass Syntax Without Execution\nDESCRIPTION: This command verifies the syntax of a Sass input file without executing it. It exits with status 0 if the syntax is valid.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_14\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --check style.scss\n```\n\n----------------------------------------\n\nTITLE: Placeholder Selectors in Pseudo-Selectors\nDESCRIPTION: Pseudo selectors containing both placeholder and non-placeholder selectors will no longer be eliminated, aligning with the definition of placeholders as selectors that match nothing.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n:matches(.foo, %bar) {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Sass Variable Declaration with Different Flags\nDESCRIPTION: Example of a valid variable declaration using different flags (!global and !default) that will continue to be allowed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/duplicate-var-flags.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n$var: value !global !default\n```\n\n----------------------------------------\n\nTITLE: Library Configuration with @use in Sass\nDESCRIPTION: Shows how to configure library variables using the @use directive with 'with' clause.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" with (\n  $paragraph-margin-bottom: 1.2rem\n);\n```\n\n----------------------------------------\n\nTITLE: Using --poll flag with Sass watch mode\nDESCRIPTION: Demonstrates how to use the --poll flag with --watch to manually check for file changes instead of relying on the operating system's notification system. Useful when editing Sass on remote drives.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_16\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --watch --poll themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n\n​# Then when you edit themes/dark.scss...\nCompiled themes/dark.scss to public/css/dark.css.\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Stack Trace for Sass Errors\nDESCRIPTION: This command tells Sass to print the full Ruby stack trace when an error is encountered, which is useful for debugging by the Sass team.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_18\n\nLANGUAGE: shellsession\nCODE:\n```\nTraceback (most recent call last):\n        25: from /usr/share/gems/sass/bin/sass:13:in `<main>'\n        24: from /usr/share/gems/sass/lib/sass/exec/base.rb:18:in `parse!'\n        23: from /usr/share/gems/sass/lib/sass/exec/base.rb:50:in `parse'\n        22: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:63:in `process_result'\n        21: from /usr/share/gems/sass/lib/sass/exec/sass_scss.rb:396:in `run'\n        20: from /usr/share/gems/sass/lib/sass/engine.rb:290:in `render'\n        19: from /usr/share/gems/sass/lib/sass/engine.rb:414:in `_to_tree'\n        18: from /usr/share/gems/sass/lib/sass/scss/parser.rb:41:in `parse'\n        17: from /usr/share/gems/sass/lib/sass/scss/parser.rb:137:in `stylesheet'\n        16: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'\n        15: from /usr/share/gems/sass/lib/sass/scss/parser.rb:707:in `block_child'\n        14: from /usr/share/gems/sass/lib/sass/scss/parser.rb:681:in `ruleset'\n        13: from /usr/share/gems/sass/lib/sass/scss/parser.rb:689:in `block'\n        12: from /usr/share/gems/sass/lib/sass/scss/parser.rb:697:in `block_contents'\n        11: from /usr/share/gems/sass/lib/sass/scss/parser.rb:708:in `block_child'\n        10: from /usr/share/gems/sass/lib/sass/scss/parser.rb:743:in `declaration_or_ruleset'\n         9: from /usr/share/gems/sass/lib/sass/scss/parser.rb:820:in `try_declaration'\n         8: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1281:in `rethrow'\n         7: from /usr/share/gems/sass/lib/sass/scss/parser.rb:807:in `block in try_declaration'\n         6: from /usr/share/gems/sass/lib/sass/scss/parser.rb:999:in `value!'\n         5: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1161:in `sass_script'\n         4: from /usr/share/gems/sass/lib/sass/script/parser.rb:68:in `parse'\n         3: from /usr/share/gems/sass/lib/sass/script/parser.rb:855:in `assert_expr'\n         2: from /usr/share/gems/sass/lib/sass/script/lexer.rb:240:in `expected!'\n         1: from /usr/share/gems/sass/lib/sass/scss/parser.rb:1305:in `expected'\ntest.scss:1: Invalid CSS after \"h1 {font-size: \": expected expression (e.g. 1px, bold), was \"}\" (Sass::SyntaxError)\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via npm\nDESCRIPTION: Command to install the pure-JavaScript version of Dart Sass globally using npm.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g sass\n```\n\n----------------------------------------\n\nTITLE: Using color.is-powerless() Function in SCSS\nDESCRIPTION: Demonstrates how to check if a color channel has any effect on the final color output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$grey: hsl(0 0% 60%);\n\n// result: true, because saturation is 0\n$hue-powerless: color.is-powerless($grey, \"hue\");\n\n// result: false\n$hue-powerless: color.is-powerless($grey, \"lightness\");\n```\n\n----------------------------------------\n\nTITLE: Default Variable Definition in Sass\nDESCRIPTION: Example of defining default variables in a library module that can be configured.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// bootstrap.scss\n$paragraph-margin-bottom: 1rem !default;\n\np {\n  margin-top: 0;\n  margin-bottom: $paragraph-margin-bottom;\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes with --watch\nDESCRIPTION: Example of using the --watch (-w) flag to continuously monitor Sass files and recompile them when they or their dependencies change, with status messages for each compilation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_15\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --watch themes:public/css\nCompiled themes/light.scss to public/css/light.css.\n\n​# Then when you edit themes/dark.scss...\nCompiled themes/dark.scss to public/css/dark.css.\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Migrator via Homebrew\nDESCRIPTION: Command to install the Sass migrator using the Homebrew package manager for macOS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\nbrew install sass/sass/migrator\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dart Sass via Chocolatey on Windows\nDESCRIPTION: Command to upgrade an existing Dart Sass installation using Chocolatey on Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchoco upgrade sass\n```\n\n----------------------------------------\n\nTITLE: Using color.space() Function in SCSS\nDESCRIPTION: Shows how to determine the color space of different color values using the color.space() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// result: hsl\n$hsl-space: color.space(hsl(0 100% 25.1%));\n\n// result: oklch\n$oklch-space: color.space(oklch(37.7% 38.75% 29.23deg));\n```\n\n----------------------------------------\n\nTITLE: Global Namespace Import in Sass\nDESCRIPTION: Shows how to import everything into the global namespace using @use with 'as *'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" as *;\n\n.element {\n  @include float-left;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Source Maps with --embed-source-map\nDESCRIPTION: Example showing how to embed the source map directly in the generated CSS file rather than creating a separate file using the --embed-source-map flag.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_14\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --embed-source-map sass/style.scss css.style.css\n```\n\n----------------------------------------\n\nTITLE: Demonstrating --remove-prefix Option in Sass Migrator\nDESCRIPTION: This snippet shows how the --remove-prefix option removes a specified prefix from variable, mixin, and function names during migration. It also demonstrates how the migrator updates @import rules to @use rules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_9\n\nLANGUAGE: shellsession\nCODE:\n```\n$ cat style.scss\n@import \"theme\";\n\n@mixin app-inverted {\n  color: $app-bg-color;\n  background-color: $app-color;\n}\n$ sass-migrator --migrate-deps module --remove-prefix=app- style.scss\n$ cat style.scss\n@use \"theme\";\n\n@mixin inverted {\n  color: theme.$bg-color;\n  background-color: theme.$color;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dart Sass via Homebrew on macOS\nDESCRIPTION: Command to upgrade an existing Dart Sass installation using Homebrew on macOS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew upgrade sass\n```\n\n----------------------------------------\n\nTITLE: Unambiguous Unary Minus in Sass\nDESCRIPTION: This syntax clearly indicates a space-separated list with a negative value by using parentheses around the negative value. This is the recommended replacement when a list with a negative value is intended.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/033-request-for-comments-strict-unary-operators.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nmargin: $a (-$b)\n```\n\n----------------------------------------\n\nTITLE: Using the New math.div() Function in Sass Module System\nDESCRIPTION: This snippet shows the usage of the math.div() function in the new Sass module system, which will be an alternative to the divide() function for division operations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/022-request-for-commentsforward-slash-as-separator.md#2025-04-09_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nmath.div()\n```\n\n----------------------------------------\n\nTITLE: Setting Load Paths with --load-path\nDESCRIPTION: Example of using the --load-path (-I) option to add additional paths for Sass to search for stylesheets. This is useful when importing from libraries or node modules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass Files Using Command Line\nDESCRIPTION: Basic command line usage example showing how to compile a SCSS file to CSS using the sass executable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/install.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass source/stylesheets/index.scss build/stylesheets/index.css\n```\n\n----------------------------------------\n\nTITLE: Using selector-replace Function in Sass 3.4\nDESCRIPTION: Illustrates the selector-replace function, which performs a semantic search-and-replace operation on selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/004-sass-34-is-released.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nselector-replace(\".foo.bar.baz\", \".foo.baz\", \".qux\")\n```\n\n----------------------------------------\n\nTITLE: Ambiguous Unary Minus Expression in Sass\nDESCRIPTION: This example shows the currently ambiguous syntax where 'margin: $a -$b' is interpreted as subtraction rather than as a space-separated list with a negative value. This format will be deprecated under the proposal.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/033-request-for-comments-strict-unary-operators.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nmargin: $a -$b\n```\n\n----------------------------------------\n\nTITLE: Defining SassMap Class in TypeScript\nDESCRIPTION: The SassMap class represents map values in Sass, using an OrderedMap from the 'immutable' package to store its contents. It provides methods for creating maps and accessing their contents.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassMap extends Value {\n  /** Creates a Sass map with the given `contents`. */\n  constructor(contents: OrderedMap<Value, Value>);\n\n  /** Creates an empty Sass map. */\n  static empty(): SassMap;\n\n  /** Returns this map's contents. */\n  get contents(): OrderedMap<Value, Value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the --stdin Flag for Standard Input\nDESCRIPTION: Examples of using the --stdin flag to read input from standard input instead of a file. This can be combined with output path or print directly to the console.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ echo \"h1 {font-size: 40px}\" | sass --stdin h1.css\n$ echo \"h1 {font-size: 40px}\" | sass --stdin\nh1 {\n  font-size: 40px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sass via NPM\nDESCRIPTION: Command to install the pure JavaScript implementation of Sass globally using npm package manager.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/install.md#2025-04-09_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\nnpm install -g sass\n```\n\n----------------------------------------\n\nTITLE: Using selector-unify Function in Sass 3.4\nDESCRIPTION: Shows the usage of the selector-unify function, which returns a selector matching elements matched by both input selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/004-sass-34-is-released.md#2025-04-09_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\nselector-unify(\".foo.bar\", \".bar.baz\")\n```\n\n----------------------------------------\n\nTITLE: Defining SassNumber Class in TypeScript\nDESCRIPTION: The SassNumber class represents numeric values in Sass, handling units and providing methods for unit conversion and assertion. It also accounts for Sass's numeric precision and offers utility methods for working with integers and ranges.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassNumber extends Value {\n  /** Creates a Sass number with no units or a single numerator unit. */\n  constructor(value: number, unit?: string);\n\n  /** Creates a Sass number with multiple numerator and/or denominator units. */\n  static withUnits(\n    value: number,\n    options?: {\n      numeratorUnits?: string[] | List<string>;\n      denominatorUnits?: string[] | List<string>;\n    }\n  ): SassNumber;\n\n  /** This number's value. */\n  get value(): number;\n\n  /**\n   * Whether `value` is an integer according to Sass's numeric logic.\n   *\n   * The integer value can be accessed using `asInt`.\n   */\n  get isInt(): boolean;\n\n  /**\n   * If `value` is an integer according to Sass's numeric logic, returns the\n   * corresponding JS integer, or `null` if `value` isn't an integer.\n   */\n  get asInt(): number | null;\n\n  /** This number's numerator units. */\n  get numeratorUnits(): List<string>;\n\n  /** This number's denominator units. */\n  get denominatorUnits(): List<string>;\n\n  /** Whether `this` has numerator or denominator units. */\n  get hasUnits(): boolean;\n\n  /**\n   * If `value` is an integer according to Sass's numeric logic, returns the\n   * corresponding JS integer, or throws an error if `value` isn't an integer.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of the parameter passed to the custom function (without the `$`).\n   */\n  assertInt(name?: string): number;\n\n  /**\n   * If `value` is between `min` and `max` according to Sass's numeric logic,\n   * returns it clamped to that range. Otherwise, throws an error.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of the parameter passed to the custom function (without the `$`).\n   */\n  assertInRange(min: number, max: number, name?: string): number;\n\n  /**\n   * Returns `this` if it has no units. Otherwise, throws an error.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertNoUnits(name?: string): SassNumber;\n\n  /**\n   * Returns `this` if it has `unit` as its single (numerator) unit. Otherwise,\n   * throws an error.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertUnit(name?: stringunit: string): SassNumber;\n\n  /** Returns whether `this` has the single numerator unit `unit`. */\n  hasUnit(unit: string): boolean;\n\n  /** Returns whether this number's units are compatible with `unit`. */\n  compatibleWithUnit(unit: string): boolean;\n\n  /**\n   * If this number's units are compatible with `newNumerators` and\n   * `newDenominators`, returns a new number with those units that's equal to\n   * `this`. Otherwise, throws an error.\n   *\n   * Note that unitless numbers are only compatible with other unitless numbers.\n   */\n  convert(\n    newNumerators: string[] | List<string>,\n    newDenominators: string[] | List<string>\n  ): SassNumber;\n\n  /**\n   * If this number's units are compatible with `other`'s, returns a new number\n   * with `other`'s units that's equal to `this`. Otherwise, throws an error.\n   *\n   * Note that unitless numbers are only compatible with other unitless numbers.\n   */\n  convertToMatch(other: SassNumber): SassNumber;\n\n  /** Equivalent to `convert(newNumerators, newDenominators).value`. */\n  convertValue(\n    newNumerators: string[] | List<string>,\n    newDenominators: string[] | List<string>\n  ): number;\n\n  /** Equivalent to `convertToMatch(other).value`. */\n  convertValueToMatch(other: SassNumber): number;\n\n  /**\n   * Like `convert()`, but if `this` is unitless returns a copy of it with the\n   * same value and the given units.\n   */\n  coerce(\n    newNumerators: string[] | List<string>,\n    newDenominators: string[] | List<string>\n  ): SassNumber;\n\n  /**\n   * Like `convertToMatch()`, but if `this` is unitless returns a copy of it\n   * with the same value and `other`'s units.\n   */\n  coerceToMatch(other: SassNumber): SassNumber;\n\n  /** Equivalent to `coerce(newNumerators, newDenominators).value`. */\n  coerceValue(\n    newNumerators: string[] | List<string>,\n    newDenominators: string[] | List<string>\n  ): number;\n\n  /** Equivalent to `coerceToMatch(other).value`. */\n  coerceValueToMatch(other: SassNumber): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SassString Class in TypeScript\nDESCRIPTION: The SassString class represents string values in Sass, providing methods for working with quoted and unquoted strings. It includes functionality for handling Sass's 1-based indexing and Unicode code point counting.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassString extends Value {\n  /** Creates a string with the given `text`. */\n  constructor(\n    text: string,\n    options?: {\n      /** @default true */\n      quotes: boolean;\n    }\n  );\n\n  /** Creates an empty string`. */\n  static empty(options?: {\n    /** @default true */\n    quotes: boolean;\n  }): SassString;\n\n  /** The contents of `this`. */\n  get text(): string;\n\n  /** Whether `this` has quotes. */\n  get hasQuotes(): boolean;\n\n  /** The number of Unicode code points in `text`. */\n  get sassLength(): number;\n\n  /**\n   * Converts the Sass index `sassIndex` to a JS index into `text`.\n   *\n   * Sass indices start counting at 1, and may be negative in order to index\n   * from the end of the list. In addition, Sass indexes strings by Unicode code\n   * point, while JS indexes them by UTF-16 code unit.\n   */\n  sassIndexToStringIndex(sassIndex: Value): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Precision in Sass Output\nDESCRIPTION: This command sets the number of digits of precision Sass uses when emitting decimal numbers. In this example, it's set to 20 digits.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_15\n\nLANGUAGE: shellsession\nCODE:\n```\n$ echo -e 'h1\\n  font-size: (100px / 3)' | sass --precision=20\nh1 {\n  font-size: 33.333333333333336px; }\n```\n\n----------------------------------------\n\nTITLE: Running Sass Migrator for Module System Migration\nDESCRIPTION: Command to run the Sass migrator tool for converting @import statements to the new module system. The --migrate-deps flag ensures dependencies are also migrated.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/043-import-is-deprecated.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --migrate-deps <path/to/style.scss>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @content Arguments in Sass Mixins\nDESCRIPTION: Shows how to use @content arguments in a mixin to create responsive media queries with type-specific styles. The mixin passes the media type to the content block, which can then be used for conditional styling.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/018-feature-watchcontent-arguments-and-color-functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@mixin media($types...) {\n  @each $type in $types {\n    @media #{$type} {\n      @content($type);\n    }\n  }\n}\n\n@include media(screen, print) using ($type) {\n  h1 {\n    font-size: 40px;\n    @if $type == print {\n      font-family: Calluna;\n    }\n  }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n@media screen {\n  h1 {\n    font-size: 40px;\n  }\n}\n@media print {\n  h1 {\n    font-size: 40px;\n    font-family: Calluna;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Interface for Sass Warnings and Debug Messages\nDESCRIPTION: TypeScript interface for the Logger API that allows customized handling of warnings and debug messages. Includes methods for handling warnings (including deprecation warnings) and debug output with source information.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Logger {\n  warn?(\n    message: string,\n    options: {\n      deprecation: boolean;\n      span?: SourceSpan;\n      stack?: string;\n    }\n  ): void;\n\n  debug?(\n    message: string,\n    options: {span: SourceSpan}\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass String to CSS with New JavaScript API\nDESCRIPTION: This snippet demonstrates how to use the new compileString() function from the Sass JavaScript API to compile a string of Sass code into CSS. The example shows how to require the sass module, define a Sass string with nested selectors, and access the resulting CSS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/031-new-js-api-release-candidate.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sass = require('sass');\n\nconst result = sass.compileString(`\nh1 {\n  font-size: 40px;\n  code {\n    font-face: Roboto Mono;\n  }\n}`);\nconsole.log(result.css);\n```\n\n----------------------------------------\n\nTITLE: Using Ruby Sass Watch Mode\nDESCRIPTION: Demonstrates how to use the --watch flag to enable many-to-many mode and continuously compile stylesheets when they or their dependencies change.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --watch themes:public/css\n      write public/css/light.css\n      write public/css/light.css.map\n\n# Then when you edit themes/dark.scss...\n      write public/css/dark.css\n      write public/css/dark.css.map\n```\n\n----------------------------------------\n\nTITLE: Specifying multiple Sass file locations in package.json exports\nDESCRIPTION: Shows how to use the 'exports' field to specify different locations for various Sass files within a package, including the main entry point and specific stylesheets.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/040-announcing-pkg-importers.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"sass\": \"styles/index.scss\"\n    },\n    \"./button.scss\": {\n      \"sass\": \"styles/button.scss\"\n    },\n    \"./accordion.scss\": {\n      \"sass\": \"styles/accordion.scss\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Control with @use in Sass\nDESCRIPTION: Demonstrates how to control module namespaces using the @use directive with explicit naming via 'as'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" as b;\n\n.element {\n  @include b.float-left;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Calc Examples in Sass\nDESCRIPTION: Examples demonstrating how the proposed first-class calc functionality would handle different calculation scenarios, including simple additions, variable usage, and mixed unit calculations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/028-request-for-comments-first-class-calc.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1px + 10px)\n```\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1px + $length)\n```\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1px + 10%)\n```\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1px + $length)\n```\n\nLANGUAGE: sass\nCODE:\n```\ncalc(1% + math.round(15.3px))\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports in package.json\nDESCRIPTION: Example package.json configuration showing how to define Sass entry points using conditional exports. This allows package authors to specify different entry points for Sass, ES modules, and CommonJS.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/039-rfc-package-importer.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"sass\": \"./src/scss/index.scss\",\n      \"import\": \"./dist/js/index.mjs\",\n      \"default\": \"./dist/js/index.js\"\n    },\n    \"./utils\": {\n      \"sass\": \"./src/scss/_utils.scss\",\n      \"default\": \"./dist/js/utils.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Output Style in Ruby Sass\nDESCRIPTION: Shows how to use the --style option to control the output style of the resulting CSS, with examples of nested, expanded, compact, and compressed styles.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --style=nested\nh1 {\n  font-size: 40px; }\n  h1 code {\n    font-face: Roboto Mono; }\n\n$ sass --style=expanded style.scss\nh1 {\n  font-size: 40px;\n}\nh1 code {\n  font-face: Roboto Mono;\n}\n\n$ sass --style=compact style.scss\nh1 { font-size: 40px; }\nh1 code { font-face: Roboto Mono; }\n\n$ sass --style=compressed style.scss\nh1{font-size:40px}h1 code{font-face:Roboto Mono}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Package Importer in JavaScript\nDESCRIPTION: JavaScript code showing how to enable and configure the Node Package Importer in a Sass compilation setup. This demonstrates the opt-in nature of the feature.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/039-rfc-package-importer.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sass = require('sass');\n\nsass.compile('style.scss', {\n    importers: [sass.nodePackageImporter]\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Colors in Various CSS Color Spaces\nDESCRIPTION: Examples of using the color() function to define colors in different color spaces, including sRGB, display-p3, and xyz.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ncolor(sRGB ...)\ncolor(srbg-linear ...)\ncolor(display-p3 ...)\ncolor(a98-rgb ...)\ncolor(prophoto-rgb ...)\ncolor(rec2020 ...)\ncolor(xyz-d65 ...)\ncolor(xyz-d50 ...)\n```\n\n----------------------------------------\n\nTITLE: Migrating a Sass Library with Forward Rules\nDESCRIPTION: Command to migrate a Sass library, adding @forward rules to maintain a single-import API for users.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_7\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --migrate-deps --forward=all <path/to/index.scss>\n```\n\n----------------------------------------\n\nTITLE: Using patterns for Sass file exports in package.json\nDESCRIPTION: Illustrates how to use patterns in the 'exports' field to define locations for multiple Sass files matching a specific pattern within a package.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/040-announcing-pkg-importers.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"sass\": \"styles/index.scss\"\n    },\n    \"./*.scss\": {\n      \"sass\": \"styles/*.scss\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ruby Sass with Load Path Option\nDESCRIPTION: Demonstrates how to add an additional load path for Sass to look for stylesheets using the --load-path option.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/ruby-sass.md#2025-04-09_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Demonstrating Descendant Combinator Differences\nDESCRIPTION: Provides an HTML structure to show how the differences in descendant combinator handling affect element matching between Sass and native CSS nesting.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/036-sass-and-native-nesting.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=foo>\n  <div class=\"green-theme\">\n    <p class=bar>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equivalent Color Formats in Sass\nDESCRIPTION: Shows how the same color can be represented using different color formats including named colors, hex, HSL, OKLCH, and display-p3.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@debug MediumVioletRed;\n@debug #C71585;\n@debug hsl(322.2 80.91% 43.14%);\n@debug oklch(55.34% 0.2217 349.7);\n@debug color(display-p3 0.716 0.1763 0.5105);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug MediumVioletRed\n@debug #C71585\n@debug hsl(322.2 80.91% 43.14%)\n@debug oklch(55.34% 0.2217 349.7)\n@debug color(display-p3 0.716 0.1763 0.5105)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Slash Separator Behavior in Sass\nDESCRIPTION: This snippet shows how the forward slash will create a three-element slash-separated list instead of performing division. It also introduces the new divide() function for division operations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/022-request-for-commentsforward-slash-as-separator.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n1 / 2 / 3\n```\n\n----------------------------------------\n\nTITLE: Working with Missing Color Channels in Sass\nDESCRIPTION: Demonstrates how to create colors with missing channels using the 'none' keyword and how to check if a channel is missing using color.is-missing().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$brand: hsl(none 100% 25.1%);\n\n// result: false\n@debug color.is-missing($brand, \"lightness\");\n\n// result: true\n@debug color.is-missing($brand, \"hue\");\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$brand: hsl(none 100% 25.1%)\n\n// result: false\n@debug color.is-missing($brand, \"lightness\")\n\n// result: true\n@debug color.is-missing($brand, \"hue\")\n```\n\n----------------------------------------\n\nTITLE: Valid Multiline Statement Examples in Sass\nDESCRIPTION: Shows various cases where line breaks will not end statements, including @each loops, interpolation, and operators.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/044-rfc-indented-syntax.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n@each $item in /* A statement can't end after the word \"in\" in an `@each` statement. */\n    1, 2, 3\n  .item-#{ \n    $item /* A statement can't end inside the curly braces in an interpolation. */\n  }\n    content: $item * /* A statement can't end after a multiplication operator. */\n        10\n```\n\n----------------------------------------\n\nTITLE: Comparing Selector Suffix Behavior in Sass and Native CSS Nesting\nDESCRIPTION: Shows how Sass and native CSS nesting interpret the & symbol differently when used with suffixes or type selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/036-sass-and-native-nesting.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n.foo {\n  &-suffix { /* ... */ }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.foo {\n  &div { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Colors in Different Spaces in Sass\nDESCRIPTION: Shows how to adjust colors using color.scale() and how specifying a different color space for manipulation can yield different results.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$brand: hsl(0 100% 25.1%);\n\n// result: hsl(0 100% 43.8%)\n@debug color.scale($brand, $lightness: 25%);\n\n// result: hsl(5.76 56% 45.4%)\n@debug color.scale($brand, $lightness: 25%, $space: oklch);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$brand: hsl(0 100% 25.1%)\n\n// result: hsl(0 100% 43.8%)\n@debug color.scale($brand, $lightness: 25%)\n\n// result: hsl(5.76 56% 45.4%)\n@debug color.scale($brand, $lightness: 25%, $space: oklch)\n```\n\n----------------------------------------\n\nTITLE: Hiding Module Members in Sass\nDESCRIPTION: Example of hiding specific names when forwarding a module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@forward \"functions\" hide assert-ascending;\n```\n\n----------------------------------------\n\nTITLE: Checking for Powerless Color Channels in Sass\nDESCRIPTION: Shows how to determine if a color channel is powerless (has no effect on the final color) using the color.is-powerless() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$gray: hsl(0 0% 60%);\n\n// result: true, because saturation is 0\n@debug color.is-powerless($gray, \"hue\");\n\n// result: false\n@debug color.is-powerless($gray, \"lightness\");\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$gray: hsl(0 0% 60%)\n\n// result: true, because saturation is 0\n@debug color.is-powerless($gray, \"hue\")\n\n// result: false\n@debug color.is-powerless($gray, \"lightness\")\n```\n\n----------------------------------------\n\nTITLE: Converting Colors to Specific Gamuts with color.to-gamut() in Sass\nDESCRIPTION: This example shows how to use color.to-gamut() to adjust out-of-gamut colors to fit within the sRGB gamut using different methods. It demonstrates both clip and local-minde methods on an OKLCH color with high chroma.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$extra-pink: oklch(90% 90% 0deg);\n\n// result: oklch(68.3601568298% 0.290089749 338.3604392249deg)\n@debug color.to-gamut($extra-pink, srgb, clip);\n\n// result: oklch(88.7173946522% 0.0667320674 355.3282956627deg)\n@debug color.to-gamut($extra-pink, srgb, local-minde);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$extra-pink: oklch(90% 90% 0deg)\n\n// result: oklch(68.3601568298% 0.290089749 338.3604392249deg)\n@debug color.to-gamut($extra-pink, srgb, clip)\n\n// result: oklch(88.7173946522% 0.0667320674 355.3282956627deg)\n@debug color.to-gamut($extra-pink, srgb, local-minde)\n```\n\n----------------------------------------\n\nTITLE: Dart Archive File Permission Setting Function\nDESCRIPTION: Dart function from cli_pkg package that incorrectly set file permissions in tar archives. The function attempted to set 755/644 permissions but actually set 757/654 due to incorrect octal-to-decimal conversion.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/035-security-alert-tar-permissions.md#2025-04-09_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nArchiveFile fileFromBytes(String path, List<int> data,\n        {bool executable = false}) =>\n    ArchiveFile(path, data.length, data)\n      ..mode = executable ? 495 : 428\n      ..lastModTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;\n```\n\n----------------------------------------\n\nTITLE: Using the Sass Migrator CLI to Update Deprecated Color Functions\nDESCRIPTION: This shell command demonstrates how to use the sass-migrator tool to automatically convert legacy color functions to the newer color-space-friendly functions in Sass files.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_13\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator color --migrate-deps <path/to/style.scss>\n```\n\n----------------------------------------\n\nTITLE: Selective Module Forwarding in Sass\nDESCRIPTION: Shows how to selectively forward specific names from a module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/019-request-for-comments-module-system-proposal.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@forward \"functions\" show color-yiq;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Nesting with Combinators in Sass\nDESCRIPTION: This example shows how leading and trailing combinators can still be used for nesting purposes in Sass, which remains supported even after the deprecation of invalid combinators.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/bogus-combinators.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n.sidebar > {\n  .error {\n    color: red;\n  }\n}\n===\n.sidebar >\n  .error\n    color: red\n```\n\n----------------------------------------\n\nTITLE: Testing Color Gamut with color.is-in-gamut() in Sass\nDESCRIPTION: This code demonstrates how to use the color.is-in-gamut() function to check if a display-p3 color is within different color gamuts. It shows testing against the display-p3 gamut (returns true) and the sRGB gamut (returns false).\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/042-wide-gamut-colors-in-sass.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n$extra-pink: color(display-p3 0.951 0.457 0.7569);\n\n// result: true, for display-p3 gamut\n@debug color.is-in-gamut($extra-pink);\n\n// result: false, for srgb gamut\n@debug color.is-in-gamut($extra-pink, $space: srgb);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n$extra-pink: color(display-p3 0.951 0.457 0.7569)\n\n// result: true, for display-p3 gamut\n@debug color.is-in-gamut($extra-pink)\n\n// result: false, for srgb gamut\n@debug color.is-in-gamut($extra-pink, $space: srgb)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function Callback Type\nDESCRIPTION: Type definition for custom Sass function callbacks that process Value arrays and return a Value or Promise<Value>.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomFunctionCallback = (args: Value[]) => Value;\n```\n\n----------------------------------------\n\nTITLE: Using the New divide() Function in Sass\nDESCRIPTION: This snippet demonstrates the usage of the new divide() function, which will replace the / operator for division operations in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/022-request-for-commentsforward-slash-as-separator.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\ndivide()\n```\n\n----------------------------------------\n\nTITLE: Replacing Sass Module with SassC Module in Ruby\nDESCRIPTION: Example of migrating from Ruby Sass to LibSass by replacing the Sass module with the SassC module. This is particularly useful for Ruby web apps that use Sass, especially those with custom Sass functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/015-ruby-sass-is-deprecated.md#2025-04-09_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Replace:\n# Sass.compile(...)\n\n# With:\nSassC.compile(...)\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Information for Sass Versions\nDESCRIPTION: This snippet shows a compatibility block for different Sass implementations, indicating which versions support the described feature.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/css-function-mixin.md#2025-04-09_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% compatibility 'dart: \"1.76.0\"', 'libsass: false', 'ruby: false' %}{% endcompatibility %}\n```\n\n----------------------------------------\n\nTITLE: Using Package Imports in Sass\nDESCRIPTION: Example showing how to import Sass files from packages using the new pkg: URL scheme. This demonstrates both root package imports and subpath imports.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/039-rfc-package-importer.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"pkg:library\";\n@use \"pkg:library/utils\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Abstract Class\nDESCRIPTION: Abstract class definition for Sass values with methods for type checking, list operations, and value assertions. Includes comprehensive type conversion and validation functionality.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Value {\n  /**\n   * Returns the values of `this` when interpreted as a list.\n   *\n   * - For a list, this returns its elements.\n   * - For a map, this returns each of its key/value pairs as a `SassList`.\n   * - For any other value, this returns a list that contains only that value.\n   */\n  get asList(): List<Value>;\n\n  /** Whether `this` is a bracketed Sass list. */\n  get hasBrackets(): boolean;\n\n  /** Whether `this` is truthy (any value other than `null` or `false`). */\n  get isTruthy(): boolean;\n\n  /** Returns JS's null if this is `sassNull`, or `this` otherwise. */\n  get realNull(): null | Value;\n\n  /** If `this` is a list, return its separator. Otherwise, return `null`. */\n  get separator(): ListSeparator;\n\n  /**\n   * Converts the Sass index `sassIndex` to a JS index into the array returned\n   * by `asList`.\n   *\n   * Sass indices start counting at 1, and may be negative in order to index\n   * from the end of the list.\n   */\n  sassIndexToListIndex(sassIndex: Value): number;\n\n  /**\n   * Returns `this` if it's a `SassBoolean`, and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertBoolean(name?: string): SassBoolean;\n\n  /**\n   * Returns `this` if it's a `SassColor`, and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertColor(name?: string): SassColor;\n\n  /**\n   * Returns `this` if it's a `SassFunction`, and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of the parameter passed to the custom function (without the `$`).\n   */\n  assertFunction(name?: string): SassFunction;\n\n  /**\n   * Returns `this` if it's a `SassMap` (or converts it to a `SassMap` if it's\n   * an empty list), and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of the parameter passed to the custom function (without the `$`).\n   */\n  assertMap(name?: string): SassMap;\n\n  /**\n   * Returns `this` if it's a `SassNumber`, and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertNumber(name?: string): SassNumber;\n\n  /**\n   * Returns `this` if it's a `SassString`, and throws an error otherwise.\n   *\n   * The `name` parameter is used for error reporting. It should match the name\n   * of a parameter passed to the custom function (without the `$`).\n   */\n  assertString(name?: string): SassString;\n\n  /**\n   * Returns the value of `this` if it can be interpreted as a map.\n   *\n   * - If this is a map, returns its contents.\n   * - If this is an empty list, returns an empty map.\n   * - Otherwise, returns `null`.\n   */\n  tryMap(): OrderedMap<Value, Value> | null;\n\n  /** Returns whether `this == other` in SassScript. */\n  equals(other: Value): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Configuration Map in Sass\nDESCRIPTION: Example of a nested configuration map structure used to demonstrate the new map functions. Contains color configurations with primary and secondary values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/025-request-for-comments-nested-map-functions.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$config: (\n  \"colors\": (\n    \"primary\": red,\n    \"secondary\": blue\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Chocolatey on Windows\nDESCRIPTION: Command to install Dart Sass using the Chocolatey package manager on Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchoco install sass\n```\n\n----------------------------------------\n\nTITLE: Preserving String Quotes in CSS Custom Properties with meta.inspect()\nDESCRIPTION: Example showing how to preserve quotation marks when using font family names in CSS custom properties. Since interpolation removes quotes, the meta.inspect() function is used to preserve them.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/css-vars.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n$font-family-monospace: Menlo, Consolas, \"Courier New\", monospace;\n\n:root {\n  --font-family-monospace: #{meta.inspect($font-family-monospace)};\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n$font-family-monospace: Menlo, Consolas, \"Courier New\", monospace\n\n:root\n  --font-family-monospace: #{meta.inspect($font-family-monospace)}\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass in Browser Console using ES6 Imports\nDESCRIPTION: A simple example demonstrating how to import the Sass compiler directly in a browser console and compile a Sass string. This shows the most basic usage of Sass in the browser without any bundling setup.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/038-sass-in-the-browser.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sass = await import('https://jspm.dev/sass');\nsass.compileString('a {color: #663399}');\n```\n\n----------------------------------------\n\nTITLE: Defining SassColor Class in TypeScript\nDESCRIPTION: The SassColor class provides methods for creating and manipulating colors in RGB, HSL, and HWB formats. It includes static factory methods, getters for color components, and methods for modifying color values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassColor extends Value {\n  /** Creates an RGB color. */\n  static rgb(\n    red: number,\n    green: number,\n    blue: number,\n    alpha?: number\n  ): SassColor;\n\n  /** Creates an HSL color. */\n  static hsl(\n    hue: number,\n    saturation: number,\n    lightness: number,\n    alpha?: number\n  ): SassColor;\n\n  /** Creates an HWB color. */\n  static hwb(\n    hue: number,\n    whiteness: number,\n    blackness: number,\n    alpha?: number\n  ): SassColor;\n\n  /** The color's red channel. */\n  get red(): number;\n\n  /** The color's green channel. */\n  get green(): number;\n\n  /** The color's blue channel. */\n  get blue(): number;\n\n  /** The color's hue. */\n  get hue(): number;\n\n  /** The color's saturation. */\n  get saturation(): number;\n\n  /** The color's lightness. */\n  get lightness(): number;\n\n  /** The color's whiteness. */\n  get whiteness(): number;\n\n  /** The color's blackeness. */\n  get blackness(): number;\n\n  /** The color's alpha channel. */\n  get alpha(): number;\n\n  /**\n   * Returns a copy of `this` with the RGB channels updated to match `options`.\n   */\n  changeRgb(options: {\n    red?: number;\n    green?: number;\n    blue?: number;\n    alpha?: number;\n  }): SassColor;\n\n  /**\n   * Returns a copy of `this` with the HSL values updated to match `options`.\n   */\n  changeHsl(options: {\n    hue?: number;\n    saturation?: number;\n    lightness?: number;\n    alpha?: number;\n  }): SassColor;\n\n  /**\n   * Returns a copy of `this` with the HWB values updated to match `options`.\n   */\n  changeHwb(options: {\n    hue?: number;\n    whiteness?: number;\n    blackness?: number;\n    alpha?: number;\n  }): SassColor;\n\n  /** Returns a copy of `this` with `alpha` as its alpha channel. */\n  changeAlpha(alpha: number): SassColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Map.merge Result Example in Sass\nDESCRIPTION: Shows the resulting map structure after using map.merge() to update a nested color value.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/025-request-for-comments-nested-map-functions.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n(\n  \"colors\": (\n    \"primary\": green,\n    \"secondary\": blue\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Using SassScript Variables in CSS Custom Properties with Interpolation\nDESCRIPTION: Demonstrates the new approach in Sass 3.5 for including dynamic SassScript values in custom properties using interpolation syntax with #{}.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/008-sass-35-release-candidate.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:host {\n  --my-toolbar-theme: {\n    background-color: #{$toolbar-background};\n    border-radius: 4px;\n    border: 1px solid gray;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of SassScript Variables in CSS Custom Properties\nDESCRIPTION: Demonstration of incorrect and correct approaches to using SassScript variables in CSS custom properties. The correct approach uses interpolation (#{$variable}) which works across all Sass versions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/css-vars.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$accent-color: #fbbc04;\n\n:root {\n  // WRONG, will not work in recent Sass versions.\n  --accent-color-wrong: $accent-color;\n\n  // RIGHT, will work in all Sass versions.\n  --accent-color-right: #{$accent-color};\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$accent-color: #fbbc04\n\n:root\n  // WRONG, will not work in recent Sass versions.\n  --accent-color-wrong: $accent-color\n\n  // RIGHT, will work in all Sass versions.\n  --accent-color-right: #{$accent-color}\n```\n\n----------------------------------------\n\nTITLE: Comparing Descendant Combinator Behavior in Sass and Native CSS Nesting\nDESCRIPTION: Illustrates how Sass and native CSS nesting handle descendant combinators differently, affecting which elements are matched.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/036-sass-and-native-nesting.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.foo .bar {\n  .green-theme & { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to Sass API Proposals\nDESCRIPTION: A markdown list containing links to various Sass API proposal specifications hosted on GitHub, including the Compile API, Logger, Importer, and Functions/Values proposals.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* [Compile API proposal](https://github.com/sass/sass/blob/main/accepted/new-js-api.d.ts)\n* [Logger proposal](https://github.com/sass/sass/blob/main/accepted/js-logger.d.ts)\n* [Importer proposal](https://github.com/sass/sass/blob/main/accepted/new-js-importer.d.ts)\n* [Functions and values proposal](https://github.com/sass/sass/blob/main/accepted/new-function-and-values-api.d.ts)\n```\n\n----------------------------------------\n\nTITLE: Invalid Calc Usage Examples in Sass\nDESCRIPTION: Examples showing invalid uses of calc() expressions that would produce errors under the new proposal, demonstrating limitations of calculation usage outside of calc() contexts.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/028-request-for-comments-first-class-calc.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n1px + calc(1px + 10%)\n```\n\nLANGUAGE: sass\nCODE:\n```\nmath.round(calc(1px + 10%))\n```\n\n----------------------------------------\n\nTITLE: Multiline Grid Template Declaration in Sass\nDESCRIPTION: Demonstrates the proposed multiline statement syntax using parentheses for grid-template declaration.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/044-rfc-indented-syntax.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n.grid\n  display: grid\n  grid-template: (\n    \"header\" min-content\n    \"main\" 1fr\n  )\n```\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: grid;\n  grid-template: \"header\" min-content \"main\" 1fr;\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Import of Sass in JavaScript\nDESCRIPTION: This code snippet shows the deprecated way of importing Sass in ECMAScript modules. This method is no longer recommended and will be removed in Dart Sass 2.0.0.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/default-export.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport sass from 'sass'; // Don't do this anymore\n```\n\n----------------------------------------\n\nTITLE: Comparing Sass and Native CSS Nesting Selector Resolution\nDESCRIPTION: Demonstrates how Sass and native CSS nesting resolve selectors differently, particularly in terms of specificity and the use of :is().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/036-sass-and-native-nesting.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.foo, #bar {\n  .baz { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Map.set Nested Example Result in Sass\nDESCRIPTION: Demonstrates the output of using map.set() to add a new tertiary color to the nested color configuration.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/025-request-for-comments-nested-map-functions.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n(\n  \"colors\": (\n    \"primary\": red,\n    \"secondary\": blue,\n    \"tertiary\": yellow\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SassList Class in TypeScript\nDESCRIPTION: The SassList class represents list values in Sass, allowing creation of lists with specified separators and bracket options. It extends the Value class, which provides most list-related functionality.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass SassList extends Value {\n  /** Creates a Sass list with the given `contents`. */\n  constructor(\n    contents: Value[] | List<Value>,\n    options?: {\n      /** @default ',' */\n      separator?: ListSeparator;\n      /** @default false */\n      brackets?: boolean;\n    }\n  );\n\n  /** Creates an empty Sass list. */\n  static empty(options?: {\n    /** @default null */\n    separator?: ListSeparator;\n    /** @default false */\n    brackets?: boolean;\n  }): SassList;\n}\n```\n\n----------------------------------------\n\nTITLE: Sass Warning Output Example\nDESCRIPTION: Shows the format of warning messages and stack traces as output by Dart Sass implementation when encountering an unknown prefix in the mixin.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/warn.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nWarning: Unknown prefix wekbit.\n    example.scss 6:7   prefix()\n    example.scss 16:3  root stylesheet\n```\n\n----------------------------------------\n\nTITLE: Executing Sass Migrator for Module Migration in Shell\nDESCRIPTION: This snippet demonstrates how to use the Sass migrator tool to automatically update stylesheets to use the module system. It includes installing the migrator and running it on an entrypoint file.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/import.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ npm install -g sass-migrator\n$ sass-migrator module --migrate-deps your-entrypoint.scss\n```\n\n----------------------------------------\n\nTITLE: Using color.scale() with Different Color Spaces\nDESCRIPTION: Demonstrates how color adjustments can be performed in different color spaces while maintaining the original color space for output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n$brand: hsl(0 100% 25.1%);\n\n// result: hsl(0 100% 43.8%)\n$hsl-lightness: color.scale($brand, $lightness: 25%);\n\n// result: hsl(5.76 56% 45.4%)\n$oklch-lightness: color.scale($brand, $lightness: 25%, $space: oklch);\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Module Beta via Package Managers\nDESCRIPTION: Commands for installing the Sass module system beta preview (version 1.23.0-module.beta.1) through various package managers including npm, Homebrew, Chocolatey, and Pub\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/023-module-system-preview.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ npm install --save-dev sass@1.23.0-module.beta.1\n\n$ npm install -g sass@1.23.0-module.beta.1\n\n$ brew install sass/sass/sass@1.23.0-module.beta.1\n\n$ choco install sass --version 1.23.0.modulebeta-1\n\n$ pub global activate sass 1.23.0-module.beta.1\n```\n\n----------------------------------------\n\nTITLE: Defining FileImporter Interface in TypeScript\nDESCRIPTION: Interface definition for FileImporter that handles redirecting loads to the filesystem. Includes findFileUrl method that processes relative URLs and returns file location information.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileImporter {\n  findFileUrl(\n    url: string,\n    options: {fromImport: boolean}\n  ): FileImporterResult | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Sass @use Rule Example\nDESCRIPTION: Demonstrates the syntax and basic concepts of @use vs @import rules. The @use rule provides better scoping, prevents duplicate loading, requires quotes around URLs, and must be placed at the file beginning.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_10\n\nLANGUAGE: sass\nCODE:\n```\n@use 'path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Using math.div() for Division in Sass\nDESCRIPTION: Demonstrates the correct usage of math.div() function for division operations in future Sass versions, compared to the deprecated slash operator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/slash-div.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\";\n\n// WRONG, will not work in future Sass versions.\n@debug (12px/4px); // 3\n\n// RIGHT, will work in future Sass versions.\n@debug math.div(12px, 4px); // 3\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\"\n\n// WRONG, will not work in future Sass versions.\n@debug (12px/4px) // 3\n\n// RIGHT, will work in future Sass versions.\n@debug math.div(12px, 4px) // 3\n```\n\n----------------------------------------\n\nTITLE: Using color.same() Function in SCSS\nDESCRIPTION: Shows how to compare colors across different color spaces to determine if they will display the same way visually.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$orange-rgb: #ff5f00;\n$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg);\n\n// result: false\n$equal: $orange-rgb == $orange-oklch;\n\n// result: true\n$same: color.same($orange-rgb, $orange-oklch);\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dart Sass via Chocolatey on Windows\nDESCRIPTION: Command to upgrade an existing Dart Sass installation to the beta version using Chocolatey package manager on Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/012-dart-sass-is-in-beta.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchoco upgrade sass --pre\n```\n\n----------------------------------------\n\nTITLE: Unambiguous Subtraction in Sass\nDESCRIPTION: This syntax clearly indicates subtraction with separated operands and will continue to be supported. This is the recommended replacement for the deprecated form when subtraction is intended.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/033-request-for-comments-strict-unary-operators.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nmargin: $a - $b\n```\n\n----------------------------------------\n\nTITLE: Using @media with Range Syntax in Sass\nDESCRIPTION: Shows an example of a @media query using range syntax. Note: This feature is not supported in all Sass implementations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@media (width <= 700px) {\n  body {\n    background: green;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@media (width <= 700px)\n  body\n    background: green\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mixins in Sass\nDESCRIPTION: Shows how to create a mixin with parameters and use it to generate reusable CSS declarations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@mixin theme($theme: DarkGray) {\n  background: $theme;\n  box-shadow: 0 0 1px rgba($theme, .25);\n  color: #fff;\n}\n\n.info {\n  @include theme;\n}\n.alert {\n  @include theme($theme: DarkRed);\n}\n.success {\n  @include theme($theme: DarkGreen);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin theme($theme: DarkGray)\n  background: $theme\n  box-shadow: 0 0 1px rgba($theme, .25)\n  color: #fff\n\n.info\n  @include theme\n\n.alert\n  @include theme($theme: DarkRed)\n\n.success\n  @include theme($theme: DarkGreen)\n```\n\n----------------------------------------\n\nTITLE: Comparing Display-P3 and RGB Color Spaces\nDESCRIPTION: Shows the difference between standard RGB and Display-P3 color spaces for defining green colors, demonstrating P3's wider gamut capabilities.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/034-request-for-comments-color-spaces.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$fallback-green: rgb(0% 100% 0%);\n$brighter-green: color(display-p3 0 1 0);\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Chocolatey on Windows\nDESCRIPTION: This command installs the Dart Sass package from Chocolatey, the Windows package manager. The -prerelease flag is used to install the pre-release version of Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/010-dart-sass-is-on-chocolatey.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ choco install sass -prerelease\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Demonstrating Specificity Differences\nDESCRIPTION: Shows an HTML structure used to illustrate how the specificity differences between Sass and native CSS nesting affect element matching.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/036-sass-and-native-nesting.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=foo>\n  <p class=baz>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic CSS At-Rules in Sass\nDESCRIPTION: Shows examples of @namespace, @font-face, and @counter-style at-rules in both SCSS and Sass syntax. Illustrates how Sass preserves these CSS at-rules.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/css.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@namespace svg url(http://www.w3.org/2000/svg);\n\n@font-face {\n  font-family: \"Open Sans\";\n  src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\");\n}\n\n@counter-style thumbs {\n  system: cyclic;\n  symbols: \"\\1F44D\";\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@namespace svg url(http://www.w3.org/2000/svg)\n\n@font-face\n  font-family: \"Open Sans\"\n  src: url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\")\n\n@counter-style thumbs\n  system: cyclic\n  symbols: \"\\1F44D\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Color Space Detection in Sass\nDESCRIPTION: Determines if a color is in a legacy color space. Works with hex codes, HSL, and modern color formats like OKLCH.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_7\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.is-legacy(#b37399)  // true\n@debug color.is-legacy(hsl(90deg 30% 90%))  // true\n@debug color.is-legacy(oklch(70% 10% 120deg))  // false\n```\n\n----------------------------------------\n\nTITLE: Defining Importer Interface for Custom Sass File Loading\nDESCRIPTION: TypeScript interface for the Importer API that handles URL canonicalization and file loading. Provides methods for converting relative URLs to canonical absolute URLs and loading stylesheets from various sources.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Importers for compileAsync() and compileStringAsync() are the same, except\n// they may return Promises as well.\ninterface Importer {\n  canonicalize(\n    url: string,\n    options: {fromImport: boolean}\n  ): URL | null;\n\n  load(canonicalUrl: URL): ImporterResult | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart Sass CLI\nDESCRIPTION: Command to run Dart Sass from the command line after adding it to the system path\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/009-announcing-dart-sass.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart-sass\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Sass exports using Node.js pkg: importer\nDESCRIPTION: Demonstrates how to configure the 'exports' field in package.json to define the default Sass stylesheet to load for a package.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/040-announcing-pkg-importers.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"sass\": \"styles/index.scss\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Selectors in Sass\nDESCRIPTION: Illustrates how to nest CSS selectors in Sass to reflect the HTML structure and improve readability.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\nnav\n  ul\n    margin: 0\n    padding: 0\n    list-style: none\n\n  li\n    display: inline-block\n\n  a\n    display: block\n    padding: 6px 12px\n    text-decoration: none\n```\n\n----------------------------------------\n\nTITLE: Color Equality Comparison in Sass\nDESCRIPTION: Compares two colors for visual equality across different color spaces. Handles missing channels and color space conversions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_11\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.same(#036, #036)  // true\n@debug color.same(#036, #037)  // false\n@debug color.same(#036, color.to-space(#036, oklch))  // true\n@debug color.same(hsl(none 50% 50%), hsl(0deg 50% 50%))  // true\n```\n\n----------------------------------------\n\nTITLE: Defining Sass Compilation Functions in TypeScript\nDESCRIPTION: Core compilation functions of the proposed Sass JavaScript API. Includes both synchronous and asynchronous methods for compiling Sass from files and strings, with comprehensive option parameters.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/030-request-for-comments-new-js-api.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compile(\n  path: string,\n  options?: Options<'sync'>\n): CompileResult;\n\nfunction compileString(\n  source: string,\n  options?: StringOptions<'sync'>\n): CompileResult;\n\nfunction compileAsync(\n  path: string,\n  options?: Options<'async'>\n): Promise<CompileResult>;\n\nfunction compileStringAsync(\n  source: string,\n  options?: StringOptions<'async'>\n): Promise<CompileResult>;\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Property Example in Plain CSS\nDESCRIPTION: An example of CSS custom properties with complex syntax that posed challenges for Sass integration. This demonstrates the extremely broad syntax capabilities of CSS custom properties.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/008-sass-35-release-candidate.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wacky-property {\n  --property: .%(#@$~`^[^_+]<;:\"}\"|})*+;\n}\n```\n\n----------------------------------------\n\nTITLE: Using color.change() with space parameter in Sass JS API\nDESCRIPTION: Example of using the color.change() method with the new required 'space' parameter for cross-space transformations. The code demonstrates creating a color in RGB space and then changing its hue in the okclh color space.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/color-4-api.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = new sass.SassColor({red: 0x66, green: 0x33, blue: 0x99});\ncolor.change({hue: 270, space: \"okclh\"});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Implementation Guide Page\nDESCRIPTION: HTML layout for the Sass implementation guide, organized in a tiled list with three main sections: Resources, Requirements, and Making Language Changes. Each section contains relevant information for Sass implementers.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/implementation.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"list-tiled\">\n<li>\n\n<h2>Resources</h2>\n\n- [`sass-spec`](https://github.com/sass/sass-spec) is a suite of\n  implementation-agnostic test cases for verifying that a Sass\n  implementation behaves correctly. It's the best way to track your\n  implementation's compatibility with the Sass reference implementation.\n\n- [How `@extend` Works](https://gist.github.com/nex3/7609394) is a\n  fairly comprehensive run-down of the algorithm used by Sass's\n  trickiest feature. Natalie still says that the implementation of\n  `@extend` is the hardest code she's ever had to write, but luckily you\n  don't have to figure it out from scratch.\n\n- **Reach out!** If you're working on a new implementation, we want to\n  hear about it. Send an email to [Natalie](mailto:nex342@gmail.com) and\n  [Chris](mailto:chris@eppsteins.net), tell us about the cool work\n  you're doing, and ask about any corners of the language that don't\n  quite make sense.\n\n</li>\n<li>\n\n<h2>Requirements</h2>\n\nWe whole-heartedly love new implementations of Sass, but we do have a\nfew restrictions that we ask those implementations to follow in order to\ncall themselves \"Sass\", \"Sass implementations\", or the like. Sass is a\ncommunity as much as it is a language, and it's important that all\nimplementations are willing to work for the good of the community.\n\nFirst, we ask that every implementation adopt the [Sass community\nguidelines](/community-guidelines) for their own implementation-specific\ncommunities. Much of what makes the Sass community strong is a culture\nof kindness and respect, and having clear and explicit guidelines helps\nproduce that culture.\n\nSecond, we ask that implementations not extend the language without\nagreement from the other major implementations and from the language\ndesigners, Natalie and Chris. The only reason a Sass community exists at\nall is because the language enables styles and frameworks to be shared\namong designers, and it's crucial for sharing that Sass code that works\nfor one implementation works the same for all of them. In addition, it's\nimportant that there be a unified vision for the language design.\n\n</li>\n<li>\n\n<h2>Making Language Changes</h2>\n\nSass can still evolve as a language, of course. We have [a process][] for\nproposing and iterating on new language features that anyone can\nparticipate in. Language changes are discussed collaboratively, with\nparticular weight given to the maintainers of mature Sass implementations.\nAttempts will be made to reach consensus with all stakeholders. However,\nthis may be impossible in some circumstances, and the ultimate say lies\nwith the lead designer of Sass, Natalie.\n\n[a process]: https://github.com/sass/sass/blob/main/CONTRIBUTING.md\n\n</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Color Space Function Example in Sass\nDESCRIPTION: Shows usage of color.space() function to determine the color space of different color formats including hex, HSL, and XYZ.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_13\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.space(#036)  // rgb\n@debug color.space(hsl(120deg 40% 50%))  // hsl\n@debug color.space(color(xyz-d65 0.1 0.2 0.3))  // xyz\n```\n\n----------------------------------------\n\nTITLE: Running Sass Migrator for Module System Conversion\nDESCRIPTION: Command to automatically migrate Sass stylesheets to use the new module system, including dependencies.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --migrate-deps <path/to/style.scss>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Interpolation in Old Sass Syntax\nDESCRIPTION: This example demonstrates how interpolation was used to allow partially dynamic values in properties like 'border' in early Sass versions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/005-cleaning-up-interpolation.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n.border\n  border: 4px solid #{!background_color}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties with Complex Values in Polymer\nDESCRIPTION: Example of CSS custom properties with complex nested values as used in the Polymer library. This syntax was valid in older Sass versions but requires interpolation in newer versions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/css-vars.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n:root {\n  --flex-theme: {\n    border: 1px solid var(--theme-dark-blue);\n    font-family: var(--theme-font-family);\n    padding: var(--theme-wide-padding);\n    background-color: var(--theme-light-blue);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LibSass Path Environment Variable in Shell\nDESCRIPTION: This command sets up an environment variable pointing to the LibSass folder, which is required for building SassC.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/libsass.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nexport SASS_LIBSASS_PATH=/Users/hampton/path/libsass\n```\n\n----------------------------------------\n\nTITLE: Color Gamut Mapping Example in Sass\nDESCRIPTION: Demonstrates gamut mapping using color.to-gamut() function with different methods including local-minde and clip.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_14\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.to-gamut(#036, $method: local-minde)  // #036\n@debug color.to-gamut(oklch(60% 70% 20deg), $space: rgb, $method: local-minde)\n// oklch(61.2058838235% 0.2466052584 22.0773325274deg)\n@debug color.to-gamut(oklch(60% 70% 20deg), $space: rgb, $method: clip)\n// oklch(62.5026609544% 0.2528579741 24.1000466758deg)\n```\n\n----------------------------------------\n\nTITLE: Controlling Visibility with @forward in Sass\nDESCRIPTION: Demonstrates how to use 'show' and 'hide' with @forward to control which names are exposed from a module. It includes examples of showing specific functions and hiding private functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@forward \"functions\" show color-yiq;\n```\n\nLANGUAGE: scss\nCODE:\n```\n@forward \"functions\" hide assert-ascending;\n```\n\n----------------------------------------\n\nTITLE: Using Parent Selector in SassScript for Sass 3.4\nDESCRIPTION: Demonstrates how the parent selector '&' can now be used in SassScript, representing the parent selector as a list of lists for easy manipulation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/004-sass-34-is-released.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n.foo .bar, .baz { $selector: & }\n```\n\n----------------------------------------\n\nTITLE: Opting Into New CSS Semantics Early with Ampersand Wrapper\nDESCRIPTION: This example demonstrates how to opt into the new CSS semantics early by wrapping nested declarations in '& {}', which preserves the declaration order.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/mixed-decls.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.example {\n  color: red;\n\n  &--serious {\n    font-weight: bold;\n  }\n\n  & {\n    font-weight: normal;\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.example\n  color: red\n\n  &--serious\n    font-weight: bold\n\n\n  &\n    font-weight: normal\n```\n\n----------------------------------------\n\nTITLE: Using --migrate-deps Option\nDESCRIPTION: Example of using the --migrate-deps option to migrate dependencies of the specified Sass file.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass-migrator module --verbose style.scss\nMigrating style.scss\n$ sass-migrator module --verbose --migrate-deps style.scss\nMigrating style.scss\nMigrating _theme.scss\nMigrating _fonts.scss\nMigrating _grid.scss\n```\n\n----------------------------------------\n\nTITLE: Using saturate() and desaturate() Functions in Sass\nDESCRIPTION: Demonstrates the use of saturate() and desaturate() functions to adjust color saturation. The functions increase or decrease the HSL saturation by a specified percentage.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_31\n\nLANGUAGE: scss\nCODE:\n```\n// Saturation 50% becomes 70%.\n@debug saturate(#c69, 20%); // #e05299\n\n// Saturation 35% becomes 85%.\n@debug desaturate(#f2ece4, 50%); // #ebebeb\n\n// Saturation 80% becomes 100%.\n@debug saturate(#0e4982, 30%)  // #004990\n```\n\nLANGUAGE: sass\nCODE:\n```\n// Saturation 50% becomes 70%.\n@debug saturate(#c69, 20%); // #e05299\n\n// Saturation 35% becomes 85%.\n@debug desaturate(#f2ece4, 50%); // #ebebeb\n\n// Saturation 80% becomes 100%.\n@debug saturate(#0e4982, 30%)  // #004990\n```\n\n----------------------------------------\n\nTITLE: Configuring Libraries with @use in Sass\nDESCRIPTION: Demonstrates how to configure library variables using the 'with' clause in @use. The example shows setting a custom value for a Bootstrap variable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// bootstrap.scss\n$paragraph-margin-bottom: 1rem !default;\n\np {\n  margin-top: 0;\n  margin-bottom: $paragraph-margin-bottom;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" with (\n  $paragraph-margin-bottom: 1.2rem\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Components in HTML\nDESCRIPTION: This snippet shows the HTML structure for creating button components. It includes examples of link buttons and regular buttons with primary styling variations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"#\" class=\"sl-c-button\">Link</a>\n<button class=\"sl-c-button\" type=\"button\">Button</button>\n\n<a href=\"#\" class=\"sl-c-button sl-c-button--primary\">Link</a>\n<button class=\"sl-c-button sl-c-button--primary\" type=\"button\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart Sass Project Dependencies\nDESCRIPTION: Shows how to set up a pubspec.yaml file for a Dart project that uses Sass. This configuration file specifies the project name and includes Sass as a development dependency.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/dart-sass.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_project\ndev_dependencies:\n  sass: ^{{ releases['dart-sass'].version }}\n```\n\n----------------------------------------\n\nTITLE: Running Sass Migrator Command\nDESCRIPTION: Basic usage of the Sass migrator command, specifying the migration type and target Sass files.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/migrator.md#2025-04-09_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\nsass-migrator <migration> <entrypoint.scss...>\n```\n\n----------------------------------------\n\nTITLE: Using color.whiteness() in Sass\nDESCRIPTION: Demonstrates the usage of the color.whiteness() function to extract the HWB whiteness value of colors. This function returns a percentage between 0% and 100% representing the whiteness component of the color.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_35\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.whiteness(#e1d7d2); // 82.3529411765%\n@debug color.whiteness(white); // 100%\n@debug color.whiteness(black); // 0%\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.whiteness(#e1d7d2)  // 82.3529411765%\n@debug color.whiteness(white)  // 100%\n@debug color.whiteness(black)  // 0%\n```\n\n----------------------------------------\n\nTITLE: Controlling Namespaces with @use in Sass\nDESCRIPTION: Shows how to use the 'as' keyword with @use to control namespacing. It includes examples of custom naming and using the '*' wildcard to import without a namespace.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/024-the-module-system-is-launched.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" as b;\n\n.element {\n  @include b.float-left;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"bootstrap\" as *;\n\n.element {\n  @include float-left;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Introduction Components in HTML\nDESCRIPTION: This snippet shows the HTML structure for creating introduction components. It includes examples of both paragraph and div-based introductions with custom styling classes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"sl-c-introduction\">\n  {% lorem 'paragraph' %}\n</p>\n\n<div class=\"sl-c-introduction\">\n  <p>{% lorem 'paragraph' %}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dart Script for Sass Compilation\nDESCRIPTION: Illustrates how to write a Dart script that uses the Sass library to compile Sass files. This script takes input and output file paths as arguments and performs the compilation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/dart-sass.md#2025-04-09_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\nimport 'package:sass/sass.dart' as sass;\n\nvoid main(List<String> arguments) {\n  var result = sass.compileToResult(arguments[0]);\n  new File(arguments[1]).writeAsStringSync(result.css);\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving String Quotes in CSS Custom Properties with meta.inspect()\nDESCRIPTION: This example demonstrates how to preserve quotes in strings when using them in CSS custom properties. Since interpolation removes quotes, the meta.inspect() function is used as a workaround to maintain them.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/declarations.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n$font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto;\n$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;\n\n:root {\n  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)};\n  --font-family-monospace: #{meta.inspect($font-family-monospace)};\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n$font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto\n$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas\n\n:root\n  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)}\n  --font-family-monospace: #{meta.inspect($font-family-monospace)}\n```\n\n----------------------------------------\n\nTITLE: Using Built-In Color Module in Sass\nDESCRIPTION: This snippet demonstrates how to use the sass:color module to modify a primary color for a button. It uses the color.scale() function to adjust the lightness of the primary color for the border.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:color\";\n\n.button {\n  $primary-color: #6b717f;\n  color: $primary-color;\n  border: 1px solid color.scale($primary-color, $lightness: 20%);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:color\"\n\n.button\n  $primary-color: #6b717f\n  color: $primary-color\n  border: 1px solid color.scale($primary-color, $lightness: 20%)\n```\n\n----------------------------------------\n\nTITLE: Creating Slash-Separated Lists with slash-list() Function in Sass\nDESCRIPTION: This snippet introduces the slash-list() function, which will be temporarily added to create slash-separated lists before the / operator is redefined.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/022-request-for-commentsforward-slash-as-separator.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nslash-list()\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation List Components in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for creating vertical and horizontal navigation list components. It includes examples with custom wrapper classes for each type.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sl-c-list-navigation-wrapper\" style=\"height: unset; position: unset\">\n\n  - [Vertical](#)\n  - [Navigation](#)\n  - [List](#)\n\n</div>\n\n<div class=\"sl-c-list-horizontal-wrapper\">\n\n  - [Horizontal](#)\n  - [Navigation](#)\n  - [List](#)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Modules in Sass\nDESCRIPTION: Demonstrates how to use the @use rule to load Sass files as modules and access their variables, mixins, and functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/guide.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// _base.scss\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n---\n// styles.scss\n@use 'base';\n\n.inverse {\n  background-color: base.$primary-color;\n  color: white;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _base.sass\n$font-stack: Helvetica, sans-serif\n$primary-color: #333\n\nbody\n  font: 100% $font-stack\n  color: $primary-color\n---\n// styles.sass\n@use 'base'\n\n.inverse\n  background-color: base.$primary-color\n  color: white\n```\n\n----------------------------------------\n\nTITLE: Using Parent Selector in SassScript Expressions\nDESCRIPTION: Demonstrates how to use the parent selector as a SassScript expression, which returns the current parent selector in the format used by selector functions.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/parent-selector.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.main aside:hover,\n.sidebar p {\n  parent-selector: &;\n  // => ((unquote(\".main\") unquote(\"aside:hover\")),\n  //     (unquote(\".sidebar\") unquote(\"p\")))\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.main aside:hover,\n.sidebar p\n  parent-selector: &\n  // => ((unquote(\".main\") unquote(\"aside:hover\")),\n  //     (unquote(\".sidebar\") unquote(\"p\")))\n```\n\n----------------------------------------\n\nTITLE: Using Special Functions in Color Construction\nDESCRIPTION: Demonstrates how to use special functions like calc() or var() as arguments in color constructors, which returns an unquoted string using the same signature.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n@debug rgb(0 51 102 / var(--opacity));\n@debug color(display-p3 var(--peach));\n```\n\n----------------------------------------\n\nTITLE: Interpolating At-Rule Names in Sass\nDESCRIPTION: Demonstrates how to use interpolation in at-rule names within a mixin. This allows for dynamic generation of vendor-prefixed at-rules along with a standard unprefixed version.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/018-feature-watchcontent-arguments-and-color-functions.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@mixin viewport($prefixes) {\n  @each $prefix in $prefixes {\n    @-#{$prefix}-viewport {\n      @content;\n    }\n  }\n  @viewport {\n    @content;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Element Self-closing Example\nDESCRIPTION: Demonstrates the preferred XHTML-style self-closing tag syntax with a space before the trailing slash\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/code.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<hr />\n```\n\n----------------------------------------\n\nTITLE: Installing Sass via Chocolatey\nDESCRIPTION: Command to install Dart Sass using the Chocolatey package manager on Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/install.md#2025-04-09_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\nchoco install sass\n```\n\n----------------------------------------\n\nTITLE: Adding Suffixes with Parent Selector for BEM Methodology\nDESCRIPTION: Shows how to use the parent selector to add suffixes to class names, particularly useful when using the BEM (Block, Element, Modifier) methodology for structured class naming.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/style-rules/parent-selector.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n.accordion {\n  max-width: 600px;\n  margin: 4rem auto;\n  width: 90%;\n  font-family: \"Raleway\", sans-serif;\n  background: #f4f4f4;\n\n  &__copy {\n    display: none;\n    padding: 1rem 1.5rem 2rem 1.5rem;\n    color: gray;\n    line-height: 1.6;\n    font-size: 14px;\n    font-weight: 500;\n\n    &--open {\n      display: block;\n    }\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.accordion\n  max-width: 600px\n  margin: 4rem auto\n  width: 90%\n  font-family: \"Raleway\", sans-serif\n  background: #f4f4f4\n\n  &__copy\n    display: none\n    padding: 1rem 1.5rem 2rem 1.5rem\n    color: gray\n    line-height: 1.6\n    font-size: 14px\n    font-weight: 500\n\n    &--open\n      display: block\n```\n\n----------------------------------------\n\nTITLE: HWB Color Construction\nDESCRIPTION: Shows how to create colors using HWB (Hue, Whiteness, Blackness) values with optional alpha channel.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n@debug hwb(210deg 0% 60%);\n@debug hwb(210 0% 60% / 0.5);\n```\n\n----------------------------------------\n\nTITLE: Using CSS min() and max() Functions in Sass\nDESCRIPTION: Illustrates how Dart Sass 1.11 intelligently decides between using CSS or Sass min() and max() functions based on the input. It shows examples of both Sass function calls and CSS function compilation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/017-feature-watchcss-imports-and-css-compatibility.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\nmax($width, 100px)\nmax(compute-width(), 100px)\nmax(50% + 10px, 100px)\nmax(50% + #{$width / 2}, #{$width})\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a Sass community page, defining layout settings, title, and introduction text along with complementary navigation content for resources.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/community.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: has_complimentary\ntitle: '#teamSass'\nintroduction: >\n  Sass has an awesome community of designers and developers who love to spread\n  the word and help people out. Here we've collected some resources.\n  Happy Styling!\ncomplementary_content: |\n  <nav class=\"sl-c-list-navigation-wrapper\" aria-label=\"Resources\">\n\n  <h2>Resources</h2>\n\n  ### [Jump Start Sass](https://amzn.to/2LKF0uR)\n  by Kitty Giraudel and Miriam Suzanne\n\n  ### [Pragmatic Guide to Sass 3: Tame the Modern Style Sheet](https://amzn.to/2LEwXiZ)\n  by Hampton Lintorn-Catlin and Michael Lintorn-Catlin\n\n  ### [Sass for Web Designers](https://amzn.to/2RkIVU3)\n  by Dan Cederholm\n\n  ### [Sass and Compass in Action](https://amzn.to/2RjAQz7)\n  by Wynn Netherland, Natalie Weizenbaum, Chris Eppstein, Brandon Mathis\n\n  </nav>\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Sass via Homebrew\nDESCRIPTION: Command to install Dart Sass using the Homebrew package manager on Mac OS X or Linux.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/install.md#2025-04-09_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\nbrew install sass/sass/sass\n```\n\n----------------------------------------\n\nTITLE: Attempting to Modify Built-in Module Variables\nDESCRIPTION: This example shows that variables defined by built-in Sass modules cannot be modified. The attempt to assign a new value to the math.$pi variable will fail.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:math\" as math;\n\n// This assignment will fail.\nmath.$pi: 0;\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:math\" as math\n\n// This assignment will fail.\nmath.$pi: 0\n```\n\n----------------------------------------\n\nTITLE: List Separator Check in Sass\nDESCRIPTION: Demonstrates how to check the separator type of a list using list.separator(). Returns 'space', 'comma', or 'slash' depending on the list's separator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.separator(1px 2px 3px); // space\n@debug list.separator((1px, 2px, 3px)); // comma\n@debug list.separator('Helvetica'); // space\n@debug list.separator(()); // space\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Dart's pub package manager\nDESCRIPTION: Command to install Dart Sass globally using Dart's pub package manager.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/014-dart-sass-100-is-released.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npub global activate sass\n```\n\n----------------------------------------\n\nTITLE: Suppressing dependency warnings with --quiet-deps\nDESCRIPTION: Shows how to use the --quiet-deps flag to prevent Sass from emitting deprecation warnings from dependencies, which are files transitively imported through a load path.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_23\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --load-path=node_modules --quiet-deps style.scss style.css\n```\n\n----------------------------------------\n\nTITLE: Using transparentize() and fade-out() in Sass\nDESCRIPTION: Illustrates the usage of transparentize() and fade-out() functions to adjust color transparency. These functions decrease the alpha channel of colors by a specified amount.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_34\n\nLANGUAGE: scss\nCODE:\n```\n@debug transparentize(rgba(#6b717f, 0.5), 0.2);  // rgba(107, 113, 127, 0.3)\n@debug fade-out(rgba(#e1d7d2, 0.5), 0.4);  // rgba(225, 215, 210, 0.1)\n@debug transparentize(rgba(#036, 0.3), 0.3);  // rgba(0, 51, 102, 0)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug transparentize(rgba(#6b717f, 0.5), 0.2)  // rgba(107, 113, 127, 0.3)\n@debug fade-out(rgba(#e1d7d2, 0.5), 0.4)  // rgba(225, 215, 210, 0.1)\n@debug transparentize(rgba(#036, 0.3), 0.3)  // rgba(0, 51, 102, 0)\n```\n\n----------------------------------------\n\nTITLE: List Slash Separator Creation in Sass\nDESCRIPTION: Demonstrates creating slash-separated lists using list.slash(). Creates a list with forward slash separators between elements.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.slash(1px, 50px, 100px); // 1px / 50px / 100px\n```\n\n----------------------------------------\n\nTITLE: Using var() Function with CSS Color Functions\nDESCRIPTION: The var() function can now be safely passed to CSS color functions rgb(), rgba(), hsl(), and hsla(). This enhances compatibility with CSS Custom Properties.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/013-sass-35-is-released.md#2025-04-09_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\ncolor: rgb(var(--red), var(--green), var(--blue));\n```\n\n----------------------------------------\n\nTITLE: Invalid Sass Variable Declaration with Duplicate Flags\nDESCRIPTION: Example of a variable declaration that will be invalid in Dart Sass 2.0.0 due to duplicate !default flags.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/duplicate-var-flags.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n$var: value !default !default\n```\n\n----------------------------------------\n\nTITLE: Treating deprecations as errors with --fatal-deprecation\nDESCRIPTION: Demonstrates how to use the --fatal-deprecation flag to treat specific types of deprecation warnings as errors, using the slash-division deprecation as an example.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_24\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --fatal-deprecation=slash-div style.scss style.css\nError: Using / for division outside of calc() is deprecated and will be removed in Dart Sass 2.0.0.\n\nRecommendation: math.div(4, 2) or calc(4 / 2)\n\nMore info and automated migrator: /documentation/breaking-changes/slash-div\n\nThis is only an error because you've set the slash-div deprecation to be fatal.\nRemove this setting if you need to keep using this feature.\n  ╷\n1 │ a { b: (4/2); }\n  │         ^^^\n  ╵\n  style.scss 1:9  root stylesheet\n```\n\n----------------------------------------\n\nTITLE: Comparing saturate() Function with color.scale() in Sass\nDESCRIPTION: Shows the difference between the saturate() function and the recommended color.scale() alternative. saturate() adds a fixed percentage to saturation while scale() increases saturation proportionally.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_30\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes\n// fully saturated.\n@debug saturate(#0e4982, 30%); // #004990\n\n// scale() instead makes it 30% more saturated than it was originally.\n@debug color.scale(#0e4982, $saturation: 30%); // #0a4986\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n// #0e4982 has saturation 80%, so when saturate() adds 30% it just becomes\n// fully saturated.\n@debug saturate(#0e4982, 30%)  // #004990\n\n// scale() instead makes it 30% more saturated than it was originally.\n@debug color.scale(#0e4982, $saturation: 30%)  // #0a4986\n```\n\n----------------------------------------\n\nTITLE: Deep Removing Nested Map Keys with map.deep-remove() in Sass\nDESCRIPTION: Shows how to use map.deep-remove() to remove keys from deeply nested maps.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/map.md#2025-04-09_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n\n$fonts: (\n  \"Helvetica\": (\n    \"weights\": (\n      \"regular\": 400,\n      \"medium\": 500,\n      \"bold\": 700\n    )\n  )\n);\n\n@debug map.deep-remove($fonts, \"Helvetica\", \"weights\", \"regular\");\n// (\n//   \"Helvetica\": (\n//     \"weights: (\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n\n$fonts: (\"Helvetica\": (\"weights\": (\"regular\": 400, \"medium\": 500, \"bold\": 700)))\n\n@debug map.deep-remove($fonts, \"Helvetica\", \"weights\", \"regular\")\n// (\n//   \"Helvetica\": (\n//     \"weights: (\n//       \"medium\": 500,\n//       \"bold\": 700\n//     )\n//   )\n// )\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Dart's pub\nDESCRIPTION: Command to activate and install Dart Sass globally using Dart's package manager, pub.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/012-dart-sass-is-in-beta.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npub global activate sass\n```\n\n----------------------------------------\n\nTITLE: Incorrect Compound Selector Extension in SCSS/Sass\nDESCRIPTION: Demonstrates the problematic behavior of extending compound selectors in LibSass where selectors are only added when .info.message appear together.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/extend-compound.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.message {\n  border: 1px solid black;\n}\n.info {\n  font-size: 1.5rem;\n}\n\n.heads-up {\n  @extend .message.info;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.message\n  border: 1px solid black\n\n.info\n  font-size: 1.5rem\n\n\n.heads-up\n  @extend .message.info\n```\n\n----------------------------------------\n\nTITLE: Opting in to future deprecation warnings with --future-deprecation\nDESCRIPTION: Shows how to use the --future-deprecation flag to opt in early to future deprecation warnings, using the import deprecation as an example. Can be combined with --fatal-deprecation.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_25\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --future-deprecation=import style.scss style.css\nDeprecation Warning on line 1, column 9 of style.scss:\nSass @import rules will be deprecated in the future.\nRemove the --future-deprecation=import flag to silence this warning for now.\n  ╷\n1 │ @import 'dependency';\n  │         ^^^^^^^^^^^^\n  ╵\n```\n\n----------------------------------------\n\nTITLE: Using color.red() Function in Sass\nDESCRIPTION: Demonstrates the use of the color.red() function to extract the red channel value from colors. Returns the red component as a number between 0 and 255.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_29\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.red(#e1d7d2); // 225\n@debug color.red(white); // 255\n@debug color.red(black); // 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.red(#e1d7d2)  // 225\n@debug color.red(white)  // 255\n@debug color.red(black)  // 0\n```\n\n----------------------------------------\n\nTITLE: Using math.unit() function in Sass\nDESCRIPTION: Demonstrates the usage of the math.unit() function to get a string representation of a number's units. This function is primarily intended for debugging purposes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_25\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.unit(100); // \"\"\n@debug math.unit(100px); // \"px\"\n@debug math.unit(5px * 10px); // \"px*px\"\n@debug math.unit(math.div(5px, 1s)); // \"px/s\"\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.unit(100)  // \"\"\n@debug math.unit(100px)  // \"px\"\n@debug math.unit(5px * 10px)  // \"px*px\"\n@debug math.unit(math.div(5px, 1s))  // \"px/s\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Chocolatey on Windows\nDESCRIPTION: Command to install or upgrade Dart Sass beta version using Chocolatey package manager on Windows.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/012-dart-sass-is-in-beta.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchoco install sass --pre\n```\n\n----------------------------------------\n\nTITLE: Silencing Legacy API Deprecation Warnings in Dart Sass\nDESCRIPTION: Example showing how to silence deprecation warnings for the legacy JavaScript API using the silenceDeprecations option. This is a temporary solution until migration to the modern API, as the legacy API will be removed in Dart Sass 2.0.0.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/legacy-js-api.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sass = require('sass');\n\nconst result = sass.renderSync({\n  silenceDeprecations: ['legacy-js-api'],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Showing full stack traces with --trace flag\nDESCRIPTION: Shows how to use the --trace flag to print the full Dart or JavaScript stack trace when an error is encountered, which is useful for debugging errors in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/cli/dart-sass.md#2025-04-09_snippet_27\n\nLANGUAGE: shellsession\nCODE:\n```\n$ sass --trace style.scss style.css\nError: Expected expression.\n   ╷\n42 │ h1 {font-face: }\n   │                ^\n   ╵\n  themes/light.scss 42:16  root stylesheet\n\npackage:sass/src/visitor/evaluate.dart 1846:7                        _EvaluateVisitor._addExceptionSpan\npackage:sass/src/visitor/evaluate.dart 1128:12                       _EvaluateVisitor.visitBinaryOperationExpression\npackage:sass/src/ast/sass/expression/binary_operation.dart 39:15     BinaryOperationExpression.accept\npackage:sass/src/visitor/evaluate.dart 1097:25                       _EvaluateVisitor.visitVariableDeclaration\npackage:sass/src/ast/sass/statement/variable_declaration.dart 50:15  VariableDeclaration.accept\npackage:sass/src/visitor/evaluate.dart 335:13                        _EvaluateVisitor.visitStylesheet\npackage:sass/src/visitor/evaluate.dart 323:5                         _EvaluateVisitor.run\npackage:sass/src/visitor/evaluate.dart 81:10                         evaluate\npackage:sass/src/executable/compile_stylesheet.dart 59:9             compileStylesheet\npackage:sass/src/executable.dart 62:15                               main\n```\n\n----------------------------------------\n\nTITLE: Comparing opacify() Function with color.scale() in Sass\nDESCRIPTION: Shows the difference between the opacify() function and the recommended color.scale() alternative. opacify() adds a fixed amount to the alpha channel while scale() increases opacity proportionally.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_27\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n// rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully\n// opaque color.\n@debug opacify(rgba(#036, 0.7), 0.3); // #036\n\n// scale() instead makes it 30% more opaque than it was originally.\n@debug color.scale(rgba(#036, 0.7), $alpha: 30%); // rgba(0, 51, 102, 0.79)\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n// rgba(#036, 0.7) has alpha 0.7, so when opacify() adds 0.3 it returns a fully\n// opaque color.\n@debug opacify(rgba(#036, 0.7), 0.3)  // #036\n\n// scale() instead makes it 30% more opaque than it was originally.\n@debug color.scale(rgba(#036, 0.7), $alpha: 30%)  // rgba(0, 51, 102, 0.79)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Calculation Arguments in Sass\nDESCRIPTION: Example demonstrating the meta.calc-args() function to extract arguments from calc() and clamp() calculations\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:meta';\n\n@debug meta.calc-args(calc(100px + 10%)); // unquote(\"100px + 10%\")\n@debug meta.calc-args(clamp(50px, var(--width), 1000px)); // 50px, unquote(\"var(--width)\"), 1000px\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Layout with Bracketed Lists\nDESCRIPTION: An example of CSS Grid Layout syntax with bracketed identifiers that Sass 3.5 needed to support for full CSS compatibility.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/008-sass-35-release-candidate.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Opaque Colors with Null-Safe Alpha in Dart\nDESCRIPTION: Shows the proper way to create a SassColor object in Dart while safely handling potentially null alpha values. This approach ensures compatibility with the new behavior by explicitly defaulting to 1 when alpha is null.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/null-alpha.md#2025-04-09_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsass.SassColor.rgb(102, 51, 153, alpha ?? 1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Component in HTML\nDESCRIPTION: This snippet shows the HTML structure for creating a simple table component. It includes a basic table structure with custom styling class.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"sl-c-table\">\n  <tr>\n    <td>Table</td>\n    <td>Table</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using lighten() Function in Sass\nDESCRIPTION: Demonstrates the use of the lighten() function to increase the lightness of colors by a specified percentage. The function adjusts the HSL lightness value of the provided colors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_25\n\nLANGUAGE: scss\nCODE:\n```\n// Lightness 46% becomes 66%.\n@debug lighten(#6b717f, 20%); // #a1a5af\n\n// Lightness 20% becomes 80%.\n@debug lighten(#036, 60%); // #99ccff\n\n// Lightness 85% becomes 100%.\n@debug lighten(#e1d7d2, 30%); // white\n```\n\nLANGUAGE: sass\nCODE:\n```\n// Lightness 46% becomes 66%.\n@debug lighten(#6b717f, 20%)  // #a1a5af\n\n// Lightness 20% becomes 80%.\n@debug lighten(#036, 60%)  // #99ccff\n\n// Lightness 85% becomes 100%.\n@debug lighten(#e1d7d2, 30%)  // white\n```\n\n----------------------------------------\n\nTITLE: Using meta.module-mixins() to access mixins from modules in SCSS/Sass\nDESCRIPTION: The meta.module-mixins() function returns a map of all mixins defined in a module, allowing dynamic access to these mixins. Available in Dart Sass 1.69.0+, not in LibSass or Ruby Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n// _mixins.scss\n@mixin stretch() {\n  align-items: stretch;\n  display: flex;\n  flex-direction: row;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n@use \"sass:meta\";\n\n@use \"mixins\";\n\n@debug meta.module-mixins(\"mixins\"); // => (\"stretch\": get-mixin(\"stretch\"))\n\n.header {\n  @include meta.apply(map.get(meta.module-mixins(\"mixins\"), \"stretch\"));\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _mixins.scss\n@mixin stretch()\n  align-items: stretch\n  display: flex\n  flex-direction: row\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n@use \"sass:meta\"\n\n@use \"mixins\"\n\n@debug meta.module-mixins(\"mixins\") // => (\"stretch\": get-mixin(\"stretch\"))\n\n.header\n  @include meta.apply(map.get(meta.module-mixins(\"mixins\"), \"stretch\"))\n```\n\nLANGUAGE: css\nCODE:\n```\n.header {\n  align-items: stretch;\n  display: flex;\n  flex-direction: row;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old Sass Syntax with Static and Dynamic Properties\nDESCRIPTION: This snippet shows how Sass used to distinguish between static and dynamic properties in its early versions. Static properties used a colon, while dynamic properties used an equals sign.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/005-cleaning-up-interpolation.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n.border\n  border-width: 4px\n  border-style: solid\n  border-color= !background_color\n```\n\n----------------------------------------\n\nTITLE: CSS Type Function Example\nDESCRIPTION: Demonstrates the usage of the type() function within attr() to parse HTML attributes as CSS values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/attr-type.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nattr(data-count type(<number>))\n```\n\n----------------------------------------\n\nTITLE: Rendering Open Description List in HTML\nDESCRIPTION: This snippet shows the HTML structure for an open horizontal description list component. It includes entries for Dart Sass and Ruby Sass compatibility with an open indicator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<dl class=\"sl-c-description-list sl-c-description-list--horizontal\">\n  <div>\n    <dt>Dart Sass</dt>\n    <dd>✓</dd>\n  </div>\n  <div>\n    <dt>Ruby Sass</dt>\n    <dd>since 3.5.0</dd>\n  </div>\n  <div><a href=\"#\">▼</a></div>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Subtraction and Negation Examples\nDESCRIPTION: Illustrates different uses of the minus sign for subtraction and negation, including identifier handling and number operations.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/numeric.md#2025-04-09_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@debug a-1; // a-1\n@debug 5px-3px; // 2px\n@debug 5-3; // 2\n@debug 1 -2 3; // 1 -2 3\n\n$number: 2;\n@debug 1 -$number 3; // -1 3\n@debug 1 (-$number) 3; // 1 -2 3\n```\n\n----------------------------------------\n\nTITLE: Using selector.parse Function in Sass\nDESCRIPTION: Demonstrates how to parse a selector string into the internal selector value format.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:selector\";\n\n@debug selector.parse(\".main aside:hover, .sidebar p\");\n// ((unquote(\".main\") unquote(\"aside:hover\")),\n//  (unquote(\".sidebar\") unquote(\"p\")))\n```\n\n----------------------------------------\n\nTITLE: Creating Maps in Sass\nDESCRIPTION: Demonstrates the basic syntax for creating maps in Sass 3.3, which are key-value pair data structures similar to objects or dictionaries in other languages.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/003-sass-33-is-released.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$map: (key1: value1, key2: value2, key3: value3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Themes with @import in SCSS\nDESCRIPTION: This example shows a simplified theme configuration using @import in SCSS. It includes a component partial, a theme partial with default values, and a dark theme entrypoint that overrides the default values.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/breaking-changes/import.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// components/_button.scss\nbutton {\n  color: $text-color;\n  background-color: $background-color;\n}\n---\n// _theme.scss\n$text-color: black !default;\n$background-color: white !default;\n---\n// dark.scss\n$text-color: white;\n$background-color: white;\n@import \"theme\";\n\n@import \"components/button\";\n// More components are usually imported here.\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Sass via Pub\nDESCRIPTION: Command to install Dart Sass globally using the Dart package manager Pub\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/009-announcing-dart-sass.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npub global install sass\n```\n\n----------------------------------------\n\nTITLE: Creating Callout Components in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for creating callout components. It includes examples of default, warning, and fun fact callouts with custom styling classes.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"sl-c-callout\">\n\n  ### Callout\n\n  {% lorem 'paragraph' %}\n</div>\n\n<div class=\"sl-c-callout sl-c-callout--warning\">\n\n  ### Warning\n\n  {% lorem 'paragraph' %}\n</div>\n\n<div class=\"sl-c-callout sl-c-callout--fun-fact\">\n\n  ### Fun Fact\n\n  {% lorem 'paragraph' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using round() Function in Sass\nDESCRIPTION: Shows usage of the round() function with different parameters including strategy, number, and step values. Demonstrates both calculation and function parsing.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n$number: 12.5px;\n$step: 15px;\n\n.post-image {\n  padding-left: round(nearest, $number, $step);\n  padding-right: round($number + 10px);\n  padding-bottom: round($number + 10px, $step + 10%);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$number: 12.5px\n$step: 15px\n\n.post-image\n  padding-left: round(nearest, $number, $step)\n  padding-right: round($number + 10px)\n  padding-bottom: round($number + 10px, $step + 10%)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Problem with '&' in SassScript for Selector Lists\nDESCRIPTION: This SCSS snippet demonstrates the issue with using '#{&}' for adding suffixes to selector lists. When '&' contains multiple selectors ('.foo, .bar'), using interpolation produces the incorrect result of '.foo, .bar-suffix' instead of '.foo-suffix, .bar-suffix'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/002-a-change-in-plans-for-sass-33.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.foo, .bar {\n  @at-root #{&}-suffix {\n    color: blue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolation in Plain CSS Imports\nDESCRIPTION: Shows how to use interpolation in plain CSS imports to dynamically generate import URLs. The example creates a mixin for importing Google Fonts.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@mixin google-font($family) {\n  @import url(\"http://fonts.googleapis.com/css?family=#{$family}\");\n}\n\n@include google-font(\"Droid Sans\");\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin google-font($family)\n  @import url(\"http://fonts.googleapis.com/css?family=#{$family}\")\n\n\n@include google-font(\"Droid Sans\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS class repetition in HTML\nDESCRIPTION: Shows an HTML example where multiple classes are used on an element, which @extend aims to simplify.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/extend.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"error error--serious\">\n  Oh no! You've been hacked!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Site Objectives List\nDESCRIPTION: Markdown formatted list defining the two main objectives of the Sass website: promoting Sass and serving as a resource.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Site Objectives\n\n1. Show why Sass is the best CSS Preprocessor, and why you should use it.\n2. Be a resource for those who are already using Sass, at whatever level.\n```\n\n----------------------------------------\n\nTITLE: Using First-Class Mixin Values with meta.get-mixin() and meta.apply() in Sass\nDESCRIPTION: This example demonstrates how to work with mixin values in Sass. It shows how to define a mixin, retrieve it as a value using meta.get-mixin(), and then dynamically apply it using meta.apply(). This technique enables creating extensible components with customizable styles.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/mixins.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n/// Applies styles to make an element appear like a button.\n@mixin button($background: #6b717f) {\n  display: inline-block;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  background: $background;\n  color: white;\n  font-family: Helvetica, sans-serif;\n  font-size: 1em;\n}\n\n@mixin primary-button {\n  // Get the `button` mixin and store it in a variable.\n  $button: meta.get-mixin(button);\n\n  // Call the `button` mixin with hot pink as the background.\n  @include meta.apply($button, #e91e63);\n\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n.my-button {\n  @include primary-button;\n}\n```\n\n----------------------------------------\n\nTITLE: Transformation Pass Algorithm in Pseudocode\nDESCRIPTION: Details the second pass of the @extend algorithm where selectors are transformed according to the recorded extends. This is the main algorithm that applies the extension logic to create new selectors.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/001-how-extend-works.md#2025-04-09_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nlet MAP be the subset map from the recording pass\n\ndefine extend_complex(COMPLEX, SEEN) to be:\n  let CHOICES be an empty list of lists of complex selectors\n  for each compound selector COMPOUND in COMPLEX:\n    let EXTENDED be extend_compound(COMPOUND, SEEN)\n    if no complex selector in EXTENDED is a superselector of COMPOUND:\n      add a complex selector composed only of COMPOUND to EXTENDED\n    add EXTENDED to CHOICES\n\n  let WEAVES be an empty list of selector lists\n  for each list of complex selectors PATH in paths(CHOICES):\n    add weave(PATH) to WEAVES\n  return trim(WEAVES)\n\ndefine extend_compound(COMPOUND, SEEN) to be:\n  let RESULTS be an empty list of complex selectors\n  for each (EXTENDER, TARGET) in MAP.get(COMPOUND):\n    if SEEN contains TARGET, move to the next iteration\n\n    let COMPOUND_WITHOUT_TARGET be COMPOUND without any of the simple selectors in TARGET\n    let EXTENDER_COMPOUND be the last compound selector in EXTENDER\n    let UNIFIED be unify(EXTENDER_COMPOUND, COMPOUND_WITHOUT_TARGET)\n    if UNIFIED is null, move to the next iteration\n\n    let UNIFIED_COMPLEX be EXTENDER with the last compound selector replaced with UNIFIED\n    with TARGET in SEEN:\n      add each complex selector in extend_complex(UNIFIED_COMPLEX, SEEN) to RESULTS\n  return RESULTS\n\nfor each selector COMPLEX in the document:\n  let SEEN be an empty set of compound selectors\n  let LIST be a selector list comprised of the complex selectors in extend_complex(COMPLEX, SEEN)\n  replace COMPLEX with LIST\n```\n\n----------------------------------------\n\nTITLE: Loading Sass Modules with @use and @import\nDESCRIPTION: This snippet demonstrates the use of @use and @forward to load Sass modules that contain @import statements. It explains that all public members and transitively imported content are included in the loaded module.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_11\n\nLANGUAGE: Sass\nCODE:\n```\n@use\n@forward\n@import\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Sass Files in SCSS\nDESCRIPTION: Demonstrates importing multiple Sass files using the @import rule in SCSS syntax. It shows how to import 'foundation/_code.scss' and 'foundation/_lists.scss' into a main stylesheet.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_code.scss\ncode {\n  padding: .25em;\n  line-height: 0;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// foundation/_lists.scss\nul, ol {\n  text-align: left;\n\n  & & {\n    padding: {\n      bottom: 0;\n      left: 0;\n    }\n  }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n// style.scss\n@import 'foundation/code', 'foundation/lists';\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Font Families Using Liquid Templating\nDESCRIPTION: This code loops through font family definitions and creates a description list for each one, displaying the font style visually and providing the corresponding Sass variable name.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/typography.md#2025-04-09_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% for font_family in font_families %}\n  <dl class=\"guide-description-list\">\n    <dt class=\"sl-font-family--{{ font_family.style }}\">{{ font_family.value }}</dt>\n    <dd>\n      <code>$sl-font-family--{{ font_family.style }}</code>\n    </dd>\n  </dl>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Sass Number Operations\nDESCRIPTION: Demonstrates basic number usage in Sass, including integers, decimals, and unit operations. Shows how numbers can have no units or complex units like square pixels.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/numbers.md#2025-04-09_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n@debug 100; // 100\n@debug 0.8; // 0.8\n@debug 16px; // 16px\n@debug 5px * 2px; // 10px*px (read \"square pixels\")\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Structure with Schema.org and ARIA Attributes\nDESCRIPTION: Navigation component template that includes schema.org microdata markup, ARIA roles, and a list of main site navigation links. The template also includes a search component placeholder with id 'docsearch'.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/_includes/header_nav.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nav\n  class=\"sl-r-banner__navigation sl-l-grid__column sl-l-large-grid sl-l-large-grid__column--auto-size sl-c-list-horizontal-wrapper\"\n  itemtype=\"https://schema.org/SiteNavigationElement\"\n  itemscope=\"itemscope\"\n  role=\"navigation\"\n  aria-label=\"Site navigation\">\n\n- [Playground](/playground)\n- [Install](/install)\n- [Learn Sass](/guide)\n- [Blog](/blog)\n- [Documentation](/documentation)\n- [Get Involved](/community)\n- <div id=\"docsearch\"></div>\n\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Passing Arbitrary Arguments to Sass Mixins\nDESCRIPTION: Demonstrates how to pass arbitrary arguments to a mixin using the ... syntax. This example uses a variable to store selectors and passes them to the order mixin.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$form-selectors: \"input.name\", \"input.address\", \"input.zip\" !default;\n\n@include order(150px, $form-selectors...);\n```\n\nLANGUAGE: sass\nCODE:\n```\n$form-selectors: \"input.name\", \"input.address\", \"input.zip\" !default\n\n@include order(150px, $form-selectors...)\n```\n\n----------------------------------------\n\nTITLE: Using Index Files for Importing in Indented Syntax\nDESCRIPTION: Shows how to use index files (_index.sass) to simplify imports in Sass's indented syntax. It demonstrates creating an index file that imports multiple partials, which can then be imported as a single unit.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_code.sass\ncode\n  padding: .25em\n  line-height: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_lists.sass\nul, ol\n  text-align: left\n\n  & &\n    padding:\n      bottom: 0\n      left: 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n// foundation/_index.sass\n@import code, lists\n```\n\nLANGUAGE: sass\nCODE:\n```\n// style.sass\n@import foundation\n```\n\n----------------------------------------\n\nTITLE: Imperative Nature of Sass Variables\nDESCRIPTION: This example illustrates the imperative nature of Sass variables where changing a variable's value doesn't affect its earlier uses. Each rule uses the variable value that was defined at the time the rule was processed.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$variable: value 1;\n.rule-1 {\n  value: $variable;\n}\n\n$variable: value 2;\n.rule-2 {\n  value: $variable;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$variable: value 1\n.rule-1\n  value: $variable\n\n\n$variable: value 2\n.rule-2\n  value: $variable\n```\n\n----------------------------------------\n\nTITLE: Rendering Horizontal Navigation List in HTML\nDESCRIPTION: This HTML snippet creates a horizontal navigation list with links to Sass resources and pages. It uses custom CSS classes for styling and layout.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/_includes/footer_nav.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nav class=\"sl-c-list-horizontal-wrapper sl-c-list-wrap\">\n\n- [Sass on GitHub](https://github.com/sass)\n- [Website Source Code](https://github.com/sass/sass-site)\n- [Style Guide](/styleguide)\n- [Community Guidelines](/community-guidelines)\n\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Creating a Mixin Alias in Sass\nDESCRIPTION: Shows how to create an alias for a mixin using argument lists. This technique can be used for deprecation warnings or creating shortcuts for complex mixins.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@mixin btn($args...) {\n  @warn \"The btn() mixin is deprecated. Include button() instead.\";\n  @include button($args...);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin btn($args...)\n  @warn \"The btn() mixin is deprecated. Include button() instead.\"\n  @include button($args...)\n```\n\n----------------------------------------\n\nTITLE: Plain CSS @import Examples\nDESCRIPTION: Demonstrates various ways to use plain CSS @import statements in Sass, including importing .css files, URLs, and imports with media queries.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@import \"theme.css\";\n@import \"http://fonts.googleapis.com/css?family=Droid+Sans\";\n@import url(theme);\n@import \"landscape\" screen and (orientation: landscape);\n```\n\nLANGUAGE: sass\nCODE:\n```\n@import \"theme.css\"\n@import \"http://fonts.googleapis.com/css?family=Droid+Sans\"\n@import url(theme)\n@import \"landscape\" screen and (orientation: landscape)\n```\n\n----------------------------------------\n\nTITLE: Using !global Flag to Modify Global Variables\nDESCRIPTION: This example demonstrates using the !global flag to modify a global variable from within a local scope. A variable declaration with !global will always assign to the global scope, regardless of where it appears.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/variables.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$variable: first global value;\n\n.content {\n  $variable: second global value !global;\n  value: $variable;\n}\n\n.sidebar {\n  value: $variable;\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$variable: first global value\n\n.content\n  $variable: second global value !global\n  value: $variable\n\n\n.sidebar\n  value: $variable\n```\n\n----------------------------------------\n\nTITLE: Rendering Closed Description List in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for a closed horizontal description list component. It includes entries for Dart Sass and Ruby Sass compatibility.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/components.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<dl class=\"sl-c-description-list sl-c-description-list--horizontal\">\n  <div>\n    <dt>Dart Sass</dt>\n    <dd>✓</dd>\n  </div>\n  <div>\n    <dt>Ruby Sass</dt>\n    <dd>since 3.5.0</dd>\n  </div>\n  <div><a href=\"#\">➤︎</a></div>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Indented Mixin Syntax in Sass\nDESCRIPTION: Illustrates the alternative indented syntax for defining and using mixins using = for definition and + for inclusion. Shows implementation of list reset and horizontal list styling.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/mixin.md#2025-04-09_snippet_9\n\nLANGUAGE: sass\nCODE:\n```\n=reset-list\n  margin: 0\n  padding: 0\n  list-style: none\n\n=horizontal-list\n  +reset-list\n\n  li\n    display: inline-block\n    margin:\n      left: -2px\n      right: 2em\n\nnav ul\n  +horizontal-list\n```\n\n----------------------------------------\n\nTITLE: Import-Only Files for Module Compatibility\nDESCRIPTION: Demonstrates the use of import-only files to maintain compatibility with @import while providing a separate API for @use. The example shows a reset mixin with different naming conventions for import and use.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/import.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n// _reset.scss\n\n// Module system users write `@include reset.list()`.\n@mixin list() {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n}\n---\n// _reset.import.scss\n\n// Legacy import users can keep writing `@include reset-list()`.\n@forward \"reset\" as reset-*;\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _reset.sass\n\n// Module system users write `@include reset.list()`.\n@mixin list()\n  ul\n    margin: 0\n    padding: 0\n    list-style: none\n---\n// _reset.import.sass\n\n// Legacy import users can keep writing `@include reset-list()`.\n@forward \"reset\" as reset-*\n```\n\n----------------------------------------\n\nTITLE: SCSS Class Naming Examples\nDESCRIPTION: Illustrates the BEM naming convention with sl- namespace and various prefixes for components, layouts, states, and JavaScript hooks\nSOURCE: https://github.com/sass/sass-site/blob/main/source/styleguide/code.md#2025-04-09_snippet_1\n\nLANGUAGE: SCSS\nCODE:\n```\nsl-c-card\nsl-c-card__header\nsl-c-card--primary\nsl-c-card__header--large\nsl-l-grid\nsl-is-active\nsl-js-toggle-navigation\n```\n\n----------------------------------------\n\nTITLE: Dynamic Animation Generation with Interpolation in SassScript\nDESCRIPTION: Demonstrates using interpolation in SassScript to generate unique animation names. The mixin creates an inline keyframe animation with a dynamically generated name using the unique-id() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/interpolation.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@mixin inline-animation($duration) {\n  $name: inline-#{unique-id()};\n\n  @keyframes #{$name} {\n    @content;\n  }\n\n  animation-name: $name;\n  animation-duration: $duration;\n  animation-iteration-count: infinite;\n}\n\n.pulse {\n  @include inline-animation(2s) {\n    from { background-color: yellow }\n    to { background-color: red }\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n@mixin inline-animation($duration)\n  $name: inline-#{unique-id()}\n\n  @keyframes #{$name}\n    @content\n\n\n  animation-name: $name\n  animation-duration: $duration\n  animation-iteration-count: infinite\n\n\n.pulse\n  @include inline-animation(2s)\n    from\n      background-color: yellow\n    to\n      background-color: red\n```\n\nLANGUAGE: css\nCODE:\n```\n.pulse {\n  animation-name: inline-uifpe6h;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n@keyframes inline-uifpe6h {\n  from {\n    background-color: yellow;\n  }\n  to {\n    background-color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sass @import Rule Reference\nDESCRIPTION: Shows the older @import syntax for comparison. This approach is being replaced by @use due to global scoping and potential duplicate loading issues.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/at-rules/use.md#2025-04-09_snippet_11\n\nLANGUAGE: sass\nCODE:\n```\n@import 'path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Individual Development Commands for Sass Website\nDESCRIPTION: Commands for individual development tasks including building the static site for development and formatting/linting all files in the project.\nSOURCE: https://github.com/sass/sass-site/blob/main/CONTRIBUTING.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# build the static site for development\nnpm run build\n\n# format and lint all files\nnpm run fix\n```\n\n----------------------------------------\n\nTITLE: Interpolating Quoted Strings in Sass\nDESCRIPTION: Shows how interpolation removes quotation marks when injecting quoted strings into CSS. This example demonstrates that when a quoted string is interpolated, the quotes are removed in the output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/interpolation.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.example {\n  unquoted: #{\"string\"};\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n.example\n  unquoted: #{\"string\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blue Channel in Sass\nDESCRIPTION: The color.blue() and blue() functions return the blue channel of a color as a number between 0 and 255. These functions are deprecated in favor of color.channel().\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:color';\n\n@debug color.blue(#e1d7d2); // 210\n@debug color.blue(white); // 255\n@debug color.blue(black); // 0\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:color'\n\n@debug color.blue(#e1d7d2)  // 210\n@debug color.blue(white)  // 255\n@debug color.blue(black)  // 0\n```\n\n----------------------------------------\n\nTITLE: Incompatible Units Error Example\nDESCRIPTION: Demonstrates error handling when attempting to perform operations with incompatible units.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/numeric.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@debug 100px + 10s;\n//     ^^^^^^^^^^^\n// Error: Incompatible units px and s.\n```\n\n----------------------------------------\n\nTITLE: Darkening Colors in Sass\nDESCRIPTION: The darken() function makes a color darker by decreasing its HSL lightness. It's often not the best choice for darkening colors; color.scale() is recommended instead for more intuitive results.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n@debug darken(#b37399, 20%); // #7c4465\n@debug darken(#f2ece4, 40%); // #b08b5a\n@debug darken(#036, 30%); // black\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug darken(#b37399, 20%)  // #7c4465\n@debug darken(#f2ece4, 40%)  // #b08b5a\n@debug darken(#036, 30%)  // black\n```\n\n----------------------------------------\n\nTITLE: Division and Slash Operator Usage\nDESCRIPTION: Demonstrates various ways of using division and slash operators, including forced separator usage with list.slash() function.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/operators/numeric.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:list\";\n\n@debug 15px / 30px; // 15px/30px\n@debug (10px + 5px) / 30px; // 0.5\n@debug list.slash(10px + 5px, 30px); // 15px/30px\n\n$result: 15px / 30px;\n@debug $result; // 0.5\n\n@function fifteen-divided-by-thirty() {\n  @return 15px / 30px;\n}\n@debug fifteen-divided-by-thirty(); // 0.5\n\n@debug (15px/30px); // 0.5\n@debug (bold 15px/30px sans-serif); // bold 15px/30px sans-serif\n@debug 15px/30px + 1; // 1.5\n```\n\n----------------------------------------\n\nTITLE: Desaturating Colors in Sass\nDESCRIPTION: The desaturate() function makes a color less saturated by decreasing its HSL saturation. It's often not the best choice for desaturating colors; color.scale() is recommended instead for more intuitive results.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/color.md#2025-04-09_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n@debug desaturate(#036, 20%); // #0a335c\n@debug desaturate(#f2ece4, 20%); // #eeebe8\n@debug desaturate(#d2e1dd, 30%); // #dadada\n```\n\nLANGUAGE: sass\nCODE:\n```\n@debug desaturate(#036, 20%)  // #0a335c\n@debug desaturate(#f2ece4, 20%)  // #eeebe8\n@debug desaturate(#d2e1dd, 30%)  // #dadada\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Include\nDESCRIPTION: Liquid template syntax to include a reusable documentation snippet about built-in module status.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/selector.md#2025-04-09_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% render 'doc_snippets/built-in-module-status' %}\n```\n\n----------------------------------------\n\nTITLE: Using Oklab Color Function in Sass\nDESCRIPTION: Examples of using the oklab() function to create colors using perceptually-uniform lightness, a, and b channels. Shows both basic usage and usage with alpha channel.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/index.md#2025-04-09_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@debug oklab(50% -0.1 0.15); // oklab(50% -0.1 0.15)\n@debug oklab(80% 0% 20% / 0.5); // oklab(80% 0 0.08 / 0.5)\n```\n\n----------------------------------------\n\nTITLE: Omitting null property values in Sass\nDESCRIPTION: This snippet shows how properties with null values are entirely omitted from the generated CSS. It uses a nested font property declaration with a map lookup that results in null.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/null.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\");\n\nh3 {\n  font: {\n    size: 18px;\n    weight: bold;\n    family: map-get($fonts, \"sans\");\n  }\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$fonts: (\"serif\": \"Helvetica Neue\", \"monospace\": \"Consolas\")\n\nh3\n  font:\n    size: 18px\n    weight: bold\n    family: map-get($fonts, \"sans\")\n```\n\n----------------------------------------\n\nTITLE: List Element Replacement in Sass\nDESCRIPTION: Shows how to replace elements in a list at a specific index using list.set-nth(). Supports both positive and negative indices for element replacement.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/list.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:list';\n\n@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px\n@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em\n@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto\n```\n\n----------------------------------------\n\nTITLE: Using the Maximum Safe Integer in Sass Math Module\nDESCRIPTION: Example showing how to access the maximum safe integer value that can be precisely represented as a 64-bit floating-point number in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$max-safe-integer; // 9007199254740991\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$max-safe-integer  // 9007199254740991\n```\n\n----------------------------------------\n\nTITLE: Note: No Code Snippets Present\nDESCRIPTION: This document is primarily explanatory text about node-fibers discontinuation and does not contain any code snippets to document.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/blog/029-node-fibers-discontinued.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Using the Maximum Safe Integer in Sass Math Module\nDESCRIPTION: Example showing how to access the maximum safe integer value that can be precisely represented as a 64-bit floating-point number in Sass.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/math.md#2025-04-09_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:math';\n\n@debug math.$max-safe-integer; // 9007199254740991\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use 'sass:math'\n\n@debug math.$max-safe-integer  // 9007199254740991\n```\n\n----------------------------------------\n\nTITLE: Running SassC Compiler in Shell\nDESCRIPTION: This command demonstrates how to run the SassC executable to compile Sass input into CSS output.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/libsass.md#2025-04-09_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n./bin/sassc [input file] > output.css\n```\n\n----------------------------------------\n\nTITLE: Using meta.module-functions() to access functions from modules in SCSS/Sass\nDESCRIPTION: The meta.module-functions() function returns a map of all functions defined in a module, allowing dynamic access to these functions. The module must be loaded with a @use rule.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n// _functions.scss\n@function pow($base, $exponent) {\n  $result: 1;\n  @for $_ from 1 through $exponent {\n    $result: $result * $base;\n  }\n  @return $result;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:map\";\n@use \"sass:meta\";\n\n@use \"functions\";\n\n@debug meta.module-functions(\"functions\"); // (\"pow\": get-function(\"pow\"))\n\n@debug meta.call(map.get(meta.module-functions(\"functions\"), \"pow\"), 3, 4); // 81\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _functions.sass\n@function pow($base, $exponent)\n  $result: 1\n  @for $_ from 1 through $exponent\n    $result: $result * $base\n\n  @return $result\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:map\"\n@use \"sass:meta\"\n\n@use \"functions\"\n\n@debug meta.module-functions(\"functions\") // (\"pow\": get-function(\"pow\"))\n\n@debug meta.call(map.get(meta.module-functions(\"functions\"), \"pow\"), 3, 4) // 81\n```\n\n----------------------------------------\n\nTITLE: Using meta.module-variables() to access variables from modules in SCSS/Sass\nDESCRIPTION: The meta.module-variables() function returns a map of all variables defined in a module, allowing dynamic access to these variables. The module must be loaded with a @use rule.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/modules/meta.md#2025-04-09_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n// _variables.scss\n$hopbush: #c69;\n$midnight-blue: #036;\n$wafer: #e1d7d2;\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sass:meta\";\n\n@use \"variables\";\n\n@debug meta.module-variables(\"variables\");\n// (\n//   \"hopbush\": #c69,\n//   \"midnight-blue\": #036,\n//   \"wafer\": #e1d7d2\n// )\n```\n\nLANGUAGE: sass\nCODE:\n```\n// _variables.sass\n$hopbush: #c69\n$midnight-blue: #036\n$wafer: #e1d7d2\n```\n\nLANGUAGE: sass\nCODE:\n```\n@use \"sass:meta\"\n\n@use \"variables\"\n\n@debug meta.module-variables(\"variables\")\n// (\n//   \"hopbush\": #c69,\n//   \"midnight-blue\": #036,\n//   \"wafer\": #e1d7d2\n// )\n```\n\n----------------------------------------\n\nTITLE: Using element() Function with Interpolation in Sass\nDESCRIPTION: Shows how to use the element() function in Sass with interpolation to dynamically generate an element reference. The example creates a background using element() that references an ID constructed with a variable.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/syntax/special-functions.md#2025-04-09_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$logo-element: logo-bg;\n\n.logo {\n  background: element(##{$logo-element});\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$logo-element: logo-bg\n\n.logo\n  background: element(##{$logo-element})\n```\n\n----------------------------------------\n\nTITLE: Using min() and max() Functions in Sass\nDESCRIPTION: Demonstrates how min() and max() functions are parsed differently based on their content. Shows both CSS calculation cases and SassScript function calls using modulo operator.\nSOURCE: https://github.com/sass/sass-site/blob/main/source/documentation/values/calculations.md#2025-04-09_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n$padding: 12px;\n\n.post {\n  padding-left: max($padding, env(safe-area-inset-left));\n  padding-right: max($padding, env(safe-area-inset-right));\n}\n\n.sidebar {\n  padding-left: max($padding % 10, 20px);\n  padding-right: max($padding % 10, 20px);\n}\n```\n\nLANGUAGE: sass\nCODE:\n```\n$padding: 12px\n\n.post\n  padding-left: max($padding, env(safe-area-inset-left))\n  padding-right: max($padding, env(safe-area-inset-right))\n\n.sidebar\n  padding-left: max($padding % 10, 20px)\n  padding-right: max($padding % 10, 20px)\n```"
  }
]