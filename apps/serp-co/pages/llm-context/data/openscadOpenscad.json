[
  {
    "owner": "openscad",
    "repo": "openscad",
    "content": "TITLE: Enhanced import() Function in OpenSCAD\nDESCRIPTION: Shows new features in import() including center= parameter, .json support, and improved SVG import with $fn, $fs, $fa support.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nimport(\"model.json\", center=true);\nimport(\"image.svg\", $fn=100);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple 3D Tree with OpenSCAD\nDESCRIPTION: Basic example showing how to create a tree by combining cylinder and sphere primitives using the union operation and translation transform.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncylinder(h = 30, r = 8);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nunion() {\n  cylinder(h = 30, r = 8);\n  sphere(20);\n}\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nunion() {\n  cylinder(h = 30, r = 8);\n  translate([0, 0, 40]) sphere(20);\n}\n```\n\n----------------------------------------\n\nTITLE: Using import() function in OpenSCAD 2011.12\nDESCRIPTION: New import() function added in OpenSCAD 2011.12 to import STL, DXF, and OFF files based on file extension.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nimport()\n```\n\n----------------------------------------\n\nTITLE: Using parent_module() and $parent_modules in OpenSCAD 2014.03\nDESCRIPTION: New parent_module() function and $parent_modules variable added in OpenSCAD 2014.03 to access information about parent modules in the hierarchy.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nparent_module()\\n$parent_modules\n```\n\n----------------------------------------\n\nTITLE: Improved rotate_extrude() in OpenSCAD\nDESCRIPTION: Demonstrates the new start= parameter and a= alias in rotate_extrude(), with updated angle behavior.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrotate_extrude(a=90, start=45) {\n  square(10);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bitwise and Shift Operators in OpenSCAD\nDESCRIPTION: Demonstrates the newly added bitwise and shift operators in OpenSCAD: ~, |, &, <<, >>.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nresult = 5 & 3; // Bitwise AND\nshifted = 1 << 2; // Left shift\n```\n\n----------------------------------------\n\nTITLE: Using resize() module in OpenSCAD 2013.06\nDESCRIPTION: New resize() module added in OpenSCAD 2013.06 for resizing objects. See the OpenSCAD User Manual for usage details.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nresize()\n```\n\n----------------------------------------\n\nTITLE: Using New Modules in OpenSCAD: textmetrics() and fontmetrics()\nDESCRIPTION: Examples of using the new textmetrics() and fontmetrics() modules introduced in OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmetrics = textmetrics(\"Hello\", size = 10);\nfont_info = fontmetrics(\"Arial\");\n```\n\n----------------------------------------\n\nTITLE: Using linear_extrude with Scale Parameter in OpenSCAD\nDESCRIPTION: Example of the new linear_extrude function with the scale parameter that allows different scaling in x and y dimensions while extruding a 2D shape into 3D.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2013.06.md#2025-04-12_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_extrude(height=a, slices=b, twist=c, scale=[x,y])\n```\n\n----------------------------------------\n\nTITLE: Vector Swizzle Feature in OpenSCAD\nDESCRIPTION: Demonstrates the new vector swizzle feature in OpenSCAD for manipulating vector components.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nv = [1,2,3];\nswizzled = v.zyx; // Results in [3,2,1]\n```\n\n----------------------------------------\n\nTITLE: Using the len() function in OpenSCAD\nDESCRIPTION: The len() function takes a vector or string parameter and returns its length. This can be used to determine the size of arrays or strings.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlen([1, 2, 3, 4])  // Returns 4\nlen(\"Hello\")     // Returns 5\n```\n\n----------------------------------------\n\nTITLE: Using diameter argument in OpenSCAD 2014.03\nDESCRIPTION: New diameter argument added for circle, cylinder, and sphere functions in OpenSCAD 2014.03. This allows specifying sizes directly as diameters instead of radii.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncircle(d)\\ncylinder(d, d1, d2)\\nsphere(d)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hex Constants in OpenSCAD\nDESCRIPTION: Shows the new feature of using hex constants with the 0x prefix in OpenSCAD code.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nvalue = 0xFF; // Example of a hex constant\n```\n\n----------------------------------------\n\nTITLE: Using version() function in OpenSCAD\nDESCRIPTION: The version() function returns the OpenSCAD version as a vector, providing information about the current release.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nversion()  // Returns [2011, 09] for example\n```\n\n----------------------------------------\n\nTITLE: Using string index operator in OpenSCAD\nDESCRIPTION: The index operator can be used to access individual characters in a string by their position.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstr = \"Hello\";\nfirst_char = str[0];  // Returns \"H\"\n```\n\n----------------------------------------\n\nTITLE: Enhanced linear_extrude() in OpenSCAD\nDESCRIPTION: Shows the new v= and segments= parameters in linear_extrude(), and the h= alias for height=.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_extrude(h=10, v=[0,0,1], segments=20) {\n  square(10);\n}\n```\n\n----------------------------------------\n\nTITLE: Using modern extrude functions in OpenSCAD\nDESCRIPTION: The recommended way to use extrusion with imported DXF files, replacing the deprecated dxf_linear_extrude() and dxf_rotate_extrude() functions.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// New approach\nlinear_extrude(height=10) {\n  import(\"file.dxf\");\n}\n\nrotate_extrude() {\n  import(\"profile.dxf\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Linux/BSD Dependencies with Package Manager\nDESCRIPTION: Shell command to run the script that installs required dependencies for OpenSCAD on Linux/BSD systems using the system's package manager.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsudo ./scripts/uni-get-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Using the New fill() Module in OpenSCAD\nDESCRIPTION: Demonstrates the usage of the newly added fill() module in OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/next.md#2025-04-12_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfill() {\n  circle(r=10);\n}\n```\n\n----------------------------------------\n\nTITLE: Using children() instead of child() in OpenSCAD 2014.03\nDESCRIPTION: The children() function replaces the deprecated child() function in OpenSCAD 2014.03 for accessing child objects in modules.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nchildren()\n```\n\n----------------------------------------\n\nTITLE: Building macOS Dependencies with Homebrew\nDESCRIPTION: Shell command to run the script that installs all dependencies for OpenSCAD on macOS using the Homebrew package manager.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/macosx-build-homebrew.sh\n```\n\n----------------------------------------\n\nTITLE: Using the import() function in OpenSCAD\nDESCRIPTION: The new import() statement reads files in the correct format based on the filename extension (.stl, .dxf and .off are supported).\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nimport(\"model.stl\");\nimport(\"drawing.dxf\");\nimport(\"mesh.off\");\n```\n\n----------------------------------------\n\nTITLE: Using color() with alpha and string parameters in OpenSCAD 2011.12\nDESCRIPTION: The color() function now supports an alpha parameter and string color names in OpenSCAD 2011.12.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncolor(c=[1,0,0], alpha=0.4)\\ncolor(\"Red\")\n```\n\n----------------------------------------\n\nTITLE: Illegal for() Loop Value Handling in OpenSCAD\nDESCRIPTION: Demonstrates how for loops with illegal values (like non-numeric step values) are now skipped rather than causing errors during evaluation.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/visitor-changes.txt#2025-04-12_snippet_4\n\nLANGUAGE: openscad\nCODE:\n```\nfor ([0:true:2])\n```\n\n----------------------------------------\n\nTITLE: Running CTest Commands for OpenSCAD Tests\nDESCRIPTION: Common CTest commands for executing OpenSCAD tests with different configurations and filters. Shows how to run tests in parallel, with regex filtering, and different test configurations.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/testing.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ctest -j8           # Runs tests enabled by default using 8 parallel processes.\n$ ctest -R <regex>    # Runs only matching tests, e.g. ctest -R dxf\n$ ctest -C <configs>  # Adds extended tests belonging to configs.\n```\n\n----------------------------------------\n\nTITLE: Using the PI constant in OpenSCAD\nDESCRIPTION: The PI constant can be used in calculations requiring the mathematical constant π.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncylinder(h=10, r=5*PI);\n```\n\n----------------------------------------\n\nTITLE: Using cylinder() Function with Radius Parameters in OpenSCAD\nDESCRIPTION: Shows how the cylinder() function now uses the r parameter as a fallback when r1 or r2 are missing, providing more consistent behavior for cylinder creation.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/visitor-changes.txt#2025-04-12_snippet_1\n\nLANGUAGE: openscad\nCODE:\n```\ncylinder(r=10)\n```\n\n----------------------------------------\n\nTITLE: Using len() function in OpenSCAD 2011.12\nDESCRIPTION: New len() function added in OpenSCAD 2011.12 to return the length of a vector or string.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlen()\n```\n\n----------------------------------------\n\nTITLE: Adding Command-Line Tests for OpenSCAD\nDESCRIPTION: Comprehensive function to add command-line tests for OpenSCAD. It handles test setup, configuration tagging, parameter passing, and special handling for 2D tests. Supports both normal and experimental tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_cmdline_test TESTCMD_BASENAME)\n  cmake_parse_arguments(TESTCMD \"OPENSCAD;STDIO;EXPERIMENTAL\" \"EXE;SCRIPT;SUFFIX;KERNEL;EXPECTEDDIR\" \"FILES;ARGS\" ${ARGN})\n\n  set(EXTRA_OPTIONS \"\")\n\n  # If sharing results with another test, pass on this to the python script\n  if (TESTCMD_EXPECTEDDIR)\n    list(APPEND EXTRA_OPTIONS -e ${TESTCMD_EXPECTEDDIR})\n  endif()\n\n  if (TESTCMD_KERNEL)\n    list(APPEND EXTRA_OPTIONS -k ${TESTCMD_KERNEL})\n  endif()\n\n  if (TESTCMD_STDIO)\n    list(APPEND EXTRA_OPTIONS --stdin --stdout)\n  endif()\n\n  if ((TESTCMD_EXE OR TESTCMD_SCRIPT) AND TESTCMD_OPENSCAD)\n    message(FATAL_ERROR \"add_cmdline_test() does not allow OPENSCAD flag alongside EXE or SCRIPT values\")\n  endif()\n\n  # python script implies Python3_EXECUTABLE\n  if (TESTCMD_SCRIPT MATCHES \\\\.[Pp][Yy]$)\n    set(TESTCMD_EXE ${Python3_EXECUTABLE})\n  endif()\n  if (TESTCMD_OPENSCAD)\n    set(TESTCMD_EXE ${OPENSCAD_BINPATH})\n  endif()\n\n  if (TESTCMD_EXE)\n    set(TESTNAME_OPTION -t ${TESTCMD_BASENAME})\n  else()\n    # If no executable was specified, assume it was built by us and resides here\n    set(TESTCMD_EXE ${CCBD}/${TESTCMD_BASENAME})\n  endif()\n\n  # Add tests from args\n  foreach (SCADFILE ${TESTCMD_FILES})\n    get_filename_component(FILE_BASENAME ${SCADFILE} NAME_WE)\n    string(REPLACE \" \" \"_\" FILE_BASENAME ${FILE_BASENAME}) # Test names cannot include spaces\n    set(TEST_FULLNAME \"${TESTCMD_BASENAME}_${FILE_BASENAME}\")\n\n    if (TESTCMD_EXPERIMENTAL)\n      set(TEST_IS_EXPERIMENTAL true)\n    endif()\n\n    # add global experimental options here\n    set(EXPERIMENTAL_OPTION \"\")\n\n    # # To give manifold some extra test coverage, enable manifold \n    # # for all tests except those marked as skipped.\n    # if (ENABLE_MANIFOLD\n    #     AND NOT SCADFILE IN_LIST SCADFILES_DIFFERENT_MANIFOLD_EXPECTATIONS\n    #     AND NOT SCADFILE IN_LIST SCADFILES_FAILING_WITH_MANIFOLD\n    #     AND NOT TEST_FULLNAME IN_LIST TESTS_FAILING_WITH_MANIFOLD\n    #     AND NOT TESTCMD_BASENAME MATCHES \"^(stlexport|objexport)$\"\n    #     AND NOT TESTCMD_BASENAME MATCHES \"^openscad-viewoptions-.*\"\n    #     AND NOT TESTCMD_BASENAME MATCHES \"^remesh-.*\")\n    #   set(MANIFOLD_OPTION \"--backend=manifold\")\n    # else()\n    set(MANIFOLD_OPTION \"\")\n    # endif()\n\n    # 2D tests should be viewed from the top, not an angle.\n    set(CAMERA_OPTION \"\")\n    is_2d(${SCADFILE} IS2D)\n    if (IS2D)\n      set(CAMERA_OPTION \"--camera=0,0,100,0,0,0\" \"--viewall\" \"--autocenter\" \"--projection=ortho\")\n    endif()\n\n    # Handle configurations\n    get_test_config(${TEST_FULLNAME} FOUNDCONFIGS)\n    if (NOT FOUNDCONFIGS)\n      set_test_config(Default FILES ${TEST_FULLNAME})\n    endif()\n    set_test_config(All FILES ${TEST_FULLNAME})\n    list(FIND FOUNDCONFIGS Bugs FOUND)\n    if (FOUND EQUAL -1)\n      set_test_config(Good FILES ${TEST_FULLNAME})\n    endif()\n    get_test_config(${TEST_FULLNAME} CONFVAL)\n\n    set(FILENAME_OPTION -f ${FILE_BASENAME})\n\n    # Apply lazy-union to *all* tests for comprehensive testing of this experimental feature.\n    # Would need all passing before making lazy-union non-experimental, but that's probably a long way off.\n    # Mostly just breaks issues that export non-manifold/intersecting geometry without explicit union.\n    #set(EXPERIMENTAL_OPTION ${EXPERIMENTAL_OPTION} \"--enable=lazy-union\")\n\n    # Enable vertex-object-renderers-indexing by default for all test if experimental build\n    # if (EXPERIMENTAL)\n    #   set(EXPERIMENTAL_OPTION ${EXPERIMENTAL_OPTION} \"--enable=vertex-object-renderers-indexing\")\n    # endif()\n\n    string(JOIN \" \" DBG_COMMAND_STR\n      \"add_test(\" ${TEST_FULLNAME} CONFIGURATIONS ${CONFVAL}\n      COMMAND ${Python3_EXECUTABLE}\n      ${TEST_CMDLINE_TOOL_PY} ${COMPARATOR} -c ${IMAGE_COMPARE_EXE}\n      -s ${TESTCMD_SUFFIX} ${EXTRA_OPTIONS} ${TESTNAME_OPTION} ${FILENAME_OPTION}\n      ${TESTCMD_EXE} ${TESTCMD_SCRIPT} ${SCADFILE} ${CAMERA_OPTION}\n      ${EXPERIMENTAL_OPTION} ${MANIFOLD_OPTION} ${TESTCMD_ARGS} \")\"\n    )\n\n    # only add test if it is not experimental or if it is and experimental option is enabled\n    if (NOT TEST_IS_EXPERIMENTAL OR EXPERIMENTAL)\n      # Use cmake option \"--log-level DEBUG\" during top level config to see this\n      message(DEBUG \"${DBG_COMMAND_STR}\")\n      add_test(NAME ${TEST_FULLNAME} CONFIGURATIONS ${CONFVAL}\n        COMMAND ${Python3_EXECUTABLE}\n        ${TEST_CMDLINE_TOOL_PY} ${COMPARATOR} -c ${IMAGE_COMPARE_EXE}\n        -s ${TESTCMD_SUFFIX} ${EXTRA_OPTIONS} ${TESTNAME_OPTION} ${FILENAME_OPTION}\n        ${TESTCMD_EXE} ${TESTCMD_SCRIPT} \"${SCADFILE}\" ${CAMERA_OPTION}\n        ${EXPERIMENTAL_OPTION} ${MANIFOLD_OPTION} ${TESTCMD_ARGS}\n      )\n      set_property(TEST ${TEST_FULLNAME} PROPERTY ENVIRONMENT ${CTEST_ENVIRONMENT})\n    else()\n      message(DEBUG \"Experimental Test not added: ${DBG_COMMAND_STR}\")\n    endif()\n  endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter List Dependencies in OpenSCAD\nDESCRIPTION: Example showing how parameter list values can now depend on earlier values in for loops, allowing dynamic range creation based on previous parameters.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2013.06.md#2025-04-12_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfor (i=[0:2], j=[0:i]) ..\n```\n\n----------------------------------------\n\nTITLE: Using the color() function with alpha parameter in OpenSCAD\nDESCRIPTION: The color() function now supports an alpha parameter for transparency. Colors can be specified as RGB vectors with an optional alpha value.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncolor(c=[1,0,0], alpha=0.4) {\n  cube(10);\n}\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Build Configuration\nDESCRIPTION: Configures WebAssembly-specific build settings including memory limits, exception handling, and environment-specific options for web and Node.js targets.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME STREQUAL Emscripten)\n  target_link_options(OpenSCAD PUBLIC\n    -fexceptions\n    -sABORT_ON_WASM_EXCEPTIONS\n    -sALLOW_MEMORY_GROWTH=1\n    -sDISABLE_EXCEPTION_CATCHING=0\n    -sEXIT_RUNTIME=1\n    -sEXPORTED_RUNTIME_METHODS=['ENV','ERRNO_CODES','FS','PATH','callMain']\n    -sMAXIMUM_MEMORY=4GB\n  )\n```\n\n----------------------------------------\n\nTITLE: Using resize Module in OpenSCAD\nDESCRIPTION: Reference to the resize() module which allows resizing objects to specific dimensions while maintaining proportions where desired.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2013.06.md#2025-04-12_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nresize()\n```\n\n----------------------------------------\n\nTITLE: Configuring CGAL Sources for OpenSCAD in CMake\nDESCRIPTION: This snippet defines the source files related to CGAL (Computational Geometry Algorithms Library) integration in OpenSCAD. It includes various geometry utilities and file I/O operations specific to CGAL.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nset(CGAL_SOURCES\n  src/geometry/cgal/cgalutils.cc\n  src/geometry/cgal/cgalutils-applyops.cc\n  src/geometry/cgal/cgalutils-closed.cc\n  src/geometry/cgal/cgalutils-convex.cc\n  src/geometry/cgal/cgalutils-kernel.cc\n  src/geometry/cgal/cgalutils-mesh.cc\n  src/geometry/cgal/cgalutils-minkowski.cc\n  src/geometry/cgal/cgalutils-nef.cc\n  src/geometry/cgal/cgalutils-orient.cc\n  src/geometry/cgal/cgalutils-polyhedron.cc\n  src/geometry/cgal/cgalutils-project.cc\n  src/geometry/cgal/cgalutils-tess.cc\n  src/geometry/cgal/cgalutils-triangulate.cc\n  src/geometry/cgal/CGAL_Nef_polyhedron.cc\n  src/geometry/cgal/CGALCache.cc\n  src/io/export_nef.cc\n  src/io/import_nef.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Target Properties\nDESCRIPTION: Configures platform-specific properties for macOS bundles, MinGW builds, and MSVC builds. For macOS, it also copies resource files into the application bundle structure.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE AND NOT APPLE_UNIX)\n  set_target_properties(OpenSCAD PROPERTIES\n    MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/Info.plist.in\n    MACOSX_BUNDLE TRUE\n    MACOSX_BUNDLE_ICON_FILE ${MACOSX_BUNDLE_ICON_FILE}\n    MACOSX_BUNDLE_BUNDLE_VERSION ${OPENSCAD_YEAR}.${OPENSCAD_MONTH}.${OPENSCAD_DAY}\n    MACOSX_BUNDLE_SHORT_VERSION_STRING ${OPENSCAD_YEAR}.${OPENSCAD_MONTH}\n    RESOURCE \"${RESOURCE_FILES}\"\n  )\n  set(BUNDLE_RESOURCES_DIR ${CMAKE_CURRENT_BINARY_DIR}/OpenSCAD.app/Contents/Resources)\n  file(COPY ${CMAKE_SOURCE_DIR}/color-schemes DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/examples DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/fonts DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/libraries DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/locale DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/shaders DESTINATION ${BUNDLE_RESOURCES_DIR})\n  file(COPY ${CMAKE_SOURCE_DIR}/templates DESTINATION ${BUNDLE_RESOURCES_DIR})\nelseif(MINGW)\n  set_target_properties(OpenSCAD PROPERTIES\n    LINK_FLAGS \"-Wl,--stack,${STACKSIZE}\"\n  )\nelseif(MSVC)\n  set_target_properties(OpenSCAD PROPERTIES\n    LINK_FLAGS \"-subsystem:windows -ENTRY:mainCRTStartup -stack:${STACKSIZE}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling OpenSCAD Natively\nDESCRIPTION: Steps to compile OpenSCAD natively, including generating a Makefile, building the project, and optionally installing it. Also includes instructions for running tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -DEXPERIMENTAL=1\ncmake --build build\ncmake --install build\nctest\n```\n\n----------------------------------------\n\nTITLE: Building OpenSCAD WASM for Node.js\nDESCRIPTION: Commands to create a standalone Node.js executable WASM build, generating 'openscad.js' in the 'build-node' directory. This allows running OpenSCAD in a Node.js environment.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/wasm-base-docker-run.sh emcmake cmake -B build-node -DWASM_BUILD_TYPE=node -DCMAKE_BUILD_TYPE=Debug -DEXPERIMENTAL=1\n./scripts/wasm-base-docker-run.sh cmake --build build-node -j2\nbuild-node/openscad.js --help\n```\n\n----------------------------------------\n\nTITLE: Using import_dxf() Function with Layer Parameters in OpenSCAD\nDESCRIPTION: Demonstrates the updated behavior of import_dxf() function where an empty string for layername now imports all layers instead of a single layer with zero-length name.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/visitor-changes.txt#2025-04-12_snippet_0\n\nLANGUAGE: openscad\nCODE:\n```\nimport_dxf(layername=\"\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSCAD Assets on Non-Windows Platforms\nDESCRIPTION: Handles installation of various OpenSCAD assets on non-Windows platforms, including man pages, application metadata, desktop entries, icons, and MIME type information. This ensures proper integration with desktop environments.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\n    install(FILES ${CMAKE_CURRENT_LIST_DIR}/doc/openscad.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 RENAME openscad${SUFFIX_WITH_DASH}.1)\n    install(FILES ${CMAKE_CURRENT_LIST_DIR}/openscad.appdata.xml DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/metainfo RENAME org.openscad.OpenSCAD${SUFFIX_WITH_DASH}.appdata.xml)\n    install(FILES ${RESOURCE_DIR}/icons/openscad.desktop DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications RENAME openscad${SUFFIX_WITH_DASH}.desktop)\n    install(FILES ${RESOURCE_DIR}/icons/openscad.xml DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/mime/packages RENAME openscad${SUFFIX_WITH_DASH}.xml)\n    install(FILES ${RESOURCE_DIR}/icons/openscad${SNAPSHOT_SUFFIX}-48.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/48x48/apps RENAME openscad${SNAPSHOT_SUFFIX}.png)\n    install(FILES ${RESOURCE_DIR}/icons/openscad${SNAPSHOT_SUFFIX}-64.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/64x64/apps RENAME openscad${SNAPSHOT_SUFFIX}.png)\n    install(FILES ${RESOURCE_DIR}/icons/openscad${SNAPSHOT_SUFFIX}-128.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/128x128/apps RENAME openscad${SNAPSHOT_SUFFIX}.png)\n    install(FILES ${RESOURCE_DIR}/icons/openscad${SNAPSHOT_SUFFIX}-256.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/256x256/apps RENAME openscad${SNAPSHOT_SUFFIX}.png)\n    install(FILES ${RESOURCE_DIR}/icons/openscad${SNAPSHOT_SUFFIX}-512.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/512x512/apps RENAME openscad${SNAPSHOT_SUFFIX}.png)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD CI Workflows Locally\nDESCRIPTION: Commands to run CircleCI workflows locally for different OpenSCAD builds, including 64-bit and 32-bit MXE builds and AppImage build. Also includes instructions for interactive debugging of CI jobs.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncircleci local execute --job  openscad-mxe-64bit\ncircleci local execute --job  openscad-mxe-32bit\ncircleci local execute --job  openscad-appimage-64bit\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --entrypoint=/bin/bash -it openscad/mxe-x86_64-gui:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/%your username%/openscad.git workspace\ncd workspace\ngit checkout %your branch%\ngit submodule init\ngit submodule update\n\n# Then execute the commands from .circleci/config.yml:\n#    export NUMCPU=2\n#    ...\n#    ./scripts/release-common.sh -snapshot -mingw64 -v \"$OPENSCAD_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Completing CPack Configuration and Enabling Tests\nDESCRIPTION: Finalizes CPack configuration by setting the license file and project configuration file. Also configures testing if ENABLE_TESTS is set, adds offline documentation if enabled, and sets up Windows resource files.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/COPYING\")\n# None of config time variables are available for CPACK_PROJECT_CONFIG_FILE, so we configure it now with values.\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/openscad_cpack.cmake.in\"\n               \"${CMAKE_BINARY_DIR}/openscad_cpack.cmake\" @ONLY)\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/nsis/extra-install-commands.nsh.in\"\n               \"${CMAKE_BINARY_DIR}/nsis-extra-install-commands.nsh\" @ONLY)\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/nsis/extra-uninstall-commands.nsh.in\"\n               \"${CMAKE_BINARY_DIR}/nsis-extra-uninstall-commands.nsh\" @ONLY)\n# CPACK_PROJECT_CONFIG_FILE is for configuring CPack-generator specific settings\nset(CPACK_PROJECT_CONFIG_FILE \"${CMAKE_BINARY_DIR}/openscad_cpack.cmake\")\nset(CPACK_THREADS 0)\n\nif(ENABLE_TESTS)\n  enable_testing()\n  add_subdirectory(tests)\nendif()\n\nif(OFFLINE_DOCS)\n  add_subdirectory(resources)\nendif()\n\nconfigure_file(${RESOURCE_DIR}/openscad_win32${SNAPSHOT_SUFFIX}.rc.in\n\t       ${CMAKE_BINARY_DIR}/openscad_win32${SNAPSHOT_SUFFIX}.rc)\ninclude(CPack)\n\nadd_sanitizers(OpenSCAD)\n\nif(INFO)\n  include(\"cmake/Modules/info.cmake\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building OpenSCAD WASM for Browser\nDESCRIPTION: Commands to create WASM build for browser use, generating 'openscad.wasm' and 'openscad.js' in the 'build-web' directory. This build is used by openscad-playground for a web-based UI.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/wasm-base-docker-run.sh emcmake cmake -B build-web -DCMAKE_BUILD_TYPE=Debug -DEXPERIMENTAL=1\n./scripts/wasm-base-docker-run.sh cmake --build build-web -j2\n```\n\n----------------------------------------\n\nTITLE: Checking Dependencies Versions on Linux/BSD\nDESCRIPTION: Shell command to run the script that checks if all required dependencies are installed and have compatible versions for building OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/check-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Test File Categories in CMake\nDESCRIPTION: Organizes test files into categorical lists including 2D features, 3D features, bug tests, and various file format tests using file globbing patterns.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB FEATURES_2D_FILES   ${TEST_SCAD_DIR}/2D/features/*.scad)\nlist(REMOVE_ITEM FEATURES_2D_FILES\n  ${TEST_SCAD_DIR}/2D/features/text-metrics.scad\n)\nfile(GLOB ISSUES_2D_FILES     ${TEST_SCAD_DIR}/2D/issues/*.scad)\nfile(GLOB_RECURSE BUGS_2D_FILES    ${TEST_SCAD_DIR}/bugs2D/*.scad)\nfile(GLOB SCAD_DXF_FILES      ${TEST_SCAD_DIR}/dxf/*.scad)\nfile(GLOB SCAD_PDF_FILES      ${TEST_SCAD_DIR}/pdf/*.scad)\n```\n\n----------------------------------------\n\nTITLE: Configuring CGAL Integration for OpenSCAD\nDESCRIPTION: Sets up CGAL computational geometry library with version checking, ensuring minimum version 5.0. Configures debug mode and necessary GMP dependencies.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_CGAL)\n  # Note: Saving CMAKE_MODULE_PATH as CGAL will overwrite it.\n  # Reconsider this after CGAL 5.4: https://github.com/CGAL/cgal/pull/6029\n  set(OPENSCAD_ORIGINAL_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})\n  set(CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE TRUE)\n  # Some older versions do not match with CGAL 5.0 REQUIRED, so we check after.\n  find_package(CGAL REQUIRED COMPONENTS Core)\n  if (${CGAL_MAJOR_VERSION} LESS 5)\n    message(FATAL_ERROR \"CGAL: ${CGAL_MAJOR_VERSION}.${CGAL_MINOR_VERSION}.${CGAL_BUGFIX_VERSION} less than required minimum version 5.0\")\n  endif()\n  message(STATUS \"CGAL: ${CGAL_MAJOR_VERSION}.${CGAL_MINOR_VERSION}.${CGAL_BUGFIX_VERSION}\")\n  target_compile_definitions(OpenSCAD PRIVATE ENABLE_CGAL)\n  # The macro `CGAL_DEBUG` allows to force CGAL assertions, even if `NDEBUG` is defined,\n  # Enabling CGAL assertions is necessary for us to catch them before they cause a crash\n  # on bad geometry input.\n  target_compile_definitions(OpenSCAD PRIVATE CGAL_DEBUG)\n  target_compile_definitions(OpenSCAD PRIVATE CGAL_USE_GMPXX)\n  if(TARGET CGAL::CGAL)\n    target_link_libraries(OpenSCAD PRIVATE CGAL::CGAL CGAL::CGAL_Core)\n    message(STATUS \"CGAL: Using target CGAL::CGAL CGAL::CGAL_Core\")\n  else()\n    target_link_libraries(OpenSCAD PRIVATE ${CGAL_LIBRARY} ${GMP_LIBRARIES} ${MPFR_LIBRARIES})\n  endif()\n  # revert any changes to module path from CGAL_Macros.cmake; see note above\n  # Commented out code should work in CGAL>= 5.4\n  #if (CGAL_MODULE_PATH_IS_SET)\n  #  set(CMAKE_MODULE_PATH ${OPENSCAD_ORIGINAL_CMAKE_MODULE_PATH})\n  #endif()\n  set(CMAKE_MODULE_PATH ${OPENSCAD_ORIGINAL_CMAKE_MODULE_PATH})\nendif(ENABLE_CGAL)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for macOS Build\nDESCRIPTION: Shell command to source the environment setup script for macOS builds, which configures necessary environment variables before compilation.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsource scripts/setenv-macos.sh\n```\n\n----------------------------------------\n\nTITLE: OpenSCAD Project Options Configuration\nDESCRIPTION: Defines build configuration options including experimental features, GUI settings, rendering backend choices, and platform-specific options. Sets up conditional build flags and deployment targets.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(INFO \"Display build configuration info at end of cmake config\" ON)\noption(ENABLE_TESTS \"Run testsuite after building.\" ON)\noption(EXPERIMENTAL \"Enable Experimental Features\" OFF)\noption(USE_MANIFOLD_TRIANGULATOR \"Use Manifold's triangulator instead of CGAL's\" ON)\noption(USE_BUILTIN_MANIFOLD \"Use manifold from submodule\" ON)\noption(USE_BUILTIN_CLIPPER2 \"Use Clipper2 from submodule\" ON)\noption(SNAPSHOT \"Create dev snapshot, uses nightly icons\" OFF)\noption(HEADLESS \"Build without GUI frontend\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifold and TBB for OpenSCAD in CMake\nDESCRIPTION: This snippet handles the configuration of the Manifold library and Intel TBB for parallel processing. It sets up compile options, finds the required packages, and links them to OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_MANIFOLD)\n  if(NOT DEFINED MANIFOLD_PAR)\n    target_compile_options(OpenSCAD PRIVATE\n      -DENABLE_TBB\n    )\n    find_package(TBB QUIET)\n    if (NOT TBB_FOUND AND PKG_CONFIG_FOUND)\n      pkg_check_modules(TBB tbb REQUIRED)\n      add_library(TBB::tbb UNKNOWN IMPORTED)\n      set_target_properties(TBB::tbb\n        PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"${TBB_INCLUDE_DIRS}\")\n      set_target_properties(TBB::tbb\n        PROPERTIES INTERFACE_LINK_LIBRARIES \"${TBB_LINK_LIBRARIES}\")\n      list(GET TBB_LINK_LIBRARIES 0 TBB_IMPORTED_LOCATION)\n      set_target_properties(TBB::tbb\n        PROPERTIES IMPORTED_LOCATION \"${TBB_IMPORTED_LOCATION}\")\n    endif()\n    message(STATUS \"TBB: ${TBB_VERSION}\")\n    target_link_libraries(OpenSCAD PRIVATE TBB::tbb)\n\n    set(MANIFOLD_PAR ON CACHE BOOL \"Parallel backend\" FORCE)\n  endif()\n\n  set(MANIFOLD_PYBIND OFF)\n  set(MANIFOLD_TEST OFF)\n  if(USE_BUILTIN_MANIFOLD)\n    if(CMAKE_UNITY_BUILD)\n      set(CMAKE_UNITY_BUILD OFF)\n      add_subdirectory(submodules/manifold EXCLUDE_FROM_ALL)\n      set(CMAKE_UNITY_BUILD ON)\n    else()\n      add_subdirectory(submodules/manifold EXCLUDE_FROM_ALL)\n    endif()\n    message(STATUS \"mainfold submodule: ${manifold_VERSION}\")\n  else()\n    find_package(manifold REQUIRED QUIET)\n    message(STATUS \"mainfold: ${manifold_VERSION}\")\n  endif()\n  target_link_libraries(OpenSCAD PRIVATE manifold::manifold)\n  add_sanitizers(manifold)\n\n  if (USE_MANIFOLD_TRIANGULATOR)\n    target_compile_definitions(OpenSCAD PRIVATE USE_MANIFOLD_TRIANGULATOR)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Library Dependencies for OpenSCAD\nDESCRIPTION: Sets up essential library dependencies including LibZip, FreeType, and LibXml2 with appropriate version requirements.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(LibZip REQUIRED QUIET)\nmessage(STATUS \"libzip: ${LIBZIP_VERSION}\")\ntarget_include_directories(OpenSCAD SYSTEM PRIVATE ${LIBZIP_INCLUDE_DIR_ZIP} ${LIBZIP_INCLUDE_DIR_ZIPCONF})\ntarget_link_libraries(OpenSCAD PRIVATE ${LIBZIP_LIBRARY})\ntarget_compile_definitions(OpenSCAD PRIVATE ENABLE_LIBZIP)\n\nfind_package(Freetype 2.4.9 REQUIRED QUIET)\nmessage(STATUS \"Freetype: ${FREETYPE_VERSION_STRING}\")\ntarget_include_directories(OpenSCAD SYSTEM PRIVATE ${FREETYPE_INCLUDE_DIRS})\ntarget_link_libraries(OpenSCAD PRIVATE ${FREETYPE_LIBRARIES})\n\nfind_package(LibXml2 2.9 REQUIRED QUIET)\nmessage(STATUS \"LibXml2: ${LIBXML2_VERSION_STRING}\")\ntarget_include_directories(OpenSCAD SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})\ntarget_link_libraries(OpenSCAD PRIVATE ${LIBXML2_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Installer Package\nDESCRIPTION: Shell command to run the script that builds OpenSCAD and creates a 64-bit Windows installer package after dependencies are built.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/release-common.sh mingw64\n```\n\n----------------------------------------\n\nTITLE: CMake Core Configuration for OpenSCAD\nDESCRIPTION: Initial CMake setup including minimum version requirement, policies, and core project options. Sets up version requirements, build types, and basic configuration options.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nif(POLICY CMP0071)\n  cmake_policy(SET CMP0071 NEW)\nendif()\nif(POLICY CMP0072)\n  cmake_policy(SET CMP0072 NEW)\nendif()\nif(POLICY CMP0079)\n  cmake_policy(SET CMP0079 NEW)\nendif()\nif(POLICY CMP0082)\n  cmake_policy(SET CMP0082 NEW)\nendif()\nif(POLICY CMP0077)\n  cmake_policy(SET CMP0079 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Apple Platform Configuration\nDESCRIPTION: Configures platform-specific settings for macOS, including OpenGL context setup, source files, and library dependencies.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  target_compile_definitions(OpenSCAD PRIVATE OPENSCAD_OS=\"Mac OS X\")\n  message(STATUS \"Offscreen OpenGL Context - using Apple CGL/NSOpenGL\")\n  set(PLATFORM_SOURCES src/platform/PlatformUtils-mac.mm src/io/imageutils-macosx.cc src/platform/CocoaUtils.mm)\n  if(NOT HEADLESS)\n    set(PLATFORM_SOURCES ${PLATFORM_SOURCES} src/gui/AppleEvents.cc)\n  endif()\n  if(NOT NULLGL)\n    target_compile_definitions(OpenSCAD PRIVATE GL_SILENCE_DEPRECATION)\n    set(OFFSCREEN_METHOD \"Apple CGL/NSOpenGL\")\n    set(PLATFORM_SOURCES ${PLATFORM_SOURCES}\n        src/glview/offscreen-old/OffscreenContextNSOpenGL.mm\n        src/glview/OffscreenContextCGL.cc)\n  endif()\n  find_library(COCOA_LIBRARY Cocoa)\n  target_link_libraries(OpenSCAD PRIVATE ${COCOA_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Rendering Sources in CMake for OpenSCAD\nDESCRIPTION: Conditional compilation setup for OpenSCAD's rendering backend. When NULLGL is defined, it uses a null implementation for headless operation; otherwise, it configures a full OpenGL rendering pipeline with support for CGAL and OpenCSG.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(NULLGL)\n  message(STATUS \"NULLGL is set. Overriding OpenGL(TM) settings\")\n  set(OFFSCREEN_SOURCES\n    src/glview/Renderer.cc\n    src/glview/NULLGL.cc # contains several 'nullified' versions of above .cc files\n    src/glview/OffscreenView.cc\n    src/glview/OffscreenContextNULL.cc\n    src/io/export_png.cc\n    src/io/imageutils.cc)\nelse()\n  set(OFFSCREEN_SOURCES\n    src/glview/OpenGLContext.cc\n    src/glview/fbo.cc\n    src/glview/Renderer.cc\n    src/glview/ShaderUtils.cc\n    src/glview/system-gl.cc\n    src/glview/VBOBuilder.cc\n    src/glview/VertexState.cc\n    src/glview/VBORenderer.cc\n    src/glview/GLView.cc\n    src/glview/hershey.cc\n    src/glview/OffscreenView.cc\n    src/glview/cgal/CGALRenderer.cc\n    src/glview/cgal/CGALRenderUtils.cc\n    src/glview/PolySetRenderer.cc\n    src/glview/preview/OpenCSGRenderer.cc\n    src/glview/preview/ThrownTogetherRenderer.cc\n    src/io/export_png.cc\n    src/io/imageutils.cc\n    ${GLEW_SOURCES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Windows Cross-Compile\nDESCRIPTION: Shell command to source the environment setup script for cross-compiling OpenSCAD for 64-bit Windows from Linux, setting up necessary environment variables.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nsource ./scripts/setenv-mingw-xbuild.sh 64\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Dependencies\nDESCRIPTION: Sets up Qt dependencies with support for both Qt5 and Qt6, including optional features like DBus and Gamepad support.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif (USE_QT6)\n  find_package(Qt6 COMPONENTS Core Core5Compat Widgets Multimedia OpenGL OpenGLWidgets Concurrent Network Svg REQUIRED QUIET)\n  message(STATUS \"Qt6: ${Qt6_VERSION}\")\nelse()\n  find_package(Qt5 5.12 COMPONENTS Core Widgets Multimedia OpenGL Concurrent Network Svg REQUIRED QUIET)\n  message(STATUS \"Qt5: ${Qt5_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing View Options in OpenSCAD\nDESCRIPTION: This section tests different view options in OpenSCAD including axes display, scales, edges, and crosshairs. Tests verify that each view option produces the expected visual output with the specified camera parameters.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# View Options tests\n#\nset(VIEW_OPTIONS_TEST \"${TEST_SCAD_DIR}/3D/misc/view-options-tests.scad\")\nadd_cmdline_test(openscad-viewoptions-axes              OPENSCAD FILES ${VIEW_OPTIONS_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view axes)\nadd_cmdline_test(openscad-viewoptions-axes-scales       OPENSCAD FILES ${VIEW_OPTIONS_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view axes,scales)\nadd_cmdline_test(openscad-viewoptions-axes-scales-edges OPENSCAD FILES ${VIEW_OPTIONS_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view axes,scales,edges)\nadd_cmdline_test(openscad-viewoptions-crosshairs        OPENSCAD FILES ${VIEW_OPTIONS_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --render --view crosshairs)\nset(VIEW_OPTIONS_EDGES_TEST\n  ${VIEW_OPTIONS_TEST}\n  ${TEST_SCAD_DIR}/misc/cube10.scad\n  ${TEST_SCAD_DIR}/3D/features/render-preserve-colors.scad\n)\nadd_cmdline_test(openscad-viewoptions-edges                 OPENSCAD FILES ${VIEW_OPTIONS_EDGES_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view edges)\nadd_cmdline_test(openscad-manifold-viewoptions-edges        OPENSCAD FILES ${VIEW_OPTIONS_EDGES_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view edges --backend=manifold)\nadd_cmdline_test(openscad-render-manifold-viewoptions-edges OPENSCAD FILES ${VIEW_OPTIONS_EDGES_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=80,14,19,0,0,0 --viewall --view edges --render --backend=manifold)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Library Dependencies Based on Qt Version\nDESCRIPTION: Sets up the appropriate Qt library dependencies based on whether Qt5 or Qt6 is used. Handles different requirements for headless builds and MXE cross-compilation environments.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_QT6)\n  if(NOT HEADLESS)\n    target_link_libraries(OpenSCAD PRIVATE\n      Qt6::Core Qt6::Core5Compat Qt6::Widgets Qt6::Multimedia Qt6::OpenGL Qt6::OpenGLWidgets Qt6::Concurrent Qt6::Network Qt6::Svg\n      ${QT6QSCINTILLA_LIBRARY} ${Qt6DBus_LIBRARIES} ${Qt6Gamepad_LIBRARIES}\n    )\n  endif()\n  if(MXECROSS)\n    target_link_libraries(OpenSCAD PRIVATE Qt6::QSvgPlugin)\n  endif()\nelse()\n  if(NOT HEADLESS)\n    target_link_libraries(OpenSCAD PRIVATE\n      Qt5::Core Qt5::Widgets Qt5::Multimedia Qt5::OpenGL Qt5::Concurrent Qt5::Network Qt5::Svg\n      ${QT5QSCINTILLA_LIBRARY} ${Qt5DBus_LIBRARIES} ${Qt5Gamepad_LIBRARIES}\n    )\n  endif()\n  if(MXECROSS)\n    target_link_libraries(OpenSCAD PRIVATE Qt5::QSvgPlugin)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building OpenSCAD Release Binaries for Linux\nDESCRIPTION: Commands to build Linux binary packages for an OpenSCAD release, detecting architecture automatically.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/release-common.sh -> openscad-$VERSION.x86-ARCH.tar.gz\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ scp openscad-$VERSION.x86-ARCH.tar.gz openscad@files.openscad.org:www\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Format Export Tests in CMake for OpenSCAD\nDESCRIPTION: Defines command-line tests for OBJ and conditional 3MF export functionality in OpenSCAD. The 3MF export test is only included if the LIB3MF library is found in the build environment.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(objexport              EXPERIMENTAL OPENSCAD SUFFIX obj FILES ${EXPORT_OBJ_TEST_FILES} ARGS --enable=predictible-output)\nif (LIB3MF_FOUND)\nadd_cmdline_test(3mfexport              EXPERIMENTAL OPENSCAD SUFFIX 3mf FILES ${EXPORT_3MF_TEST_FILES} ARGS --enable=predictible-output)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Input with lexertl Iterator in C++\nDESCRIPTION: This example shows how to tokenize input using lexertl's iterator approach. It defines the same rules for numbers and lowercase letters as the previous example, but uses lexertl::siterator to iterate through the tokens in the input string.\nSOURCE: https://github.com/openscad/openscad/blob/master/src/ext/lexertl/README.md#2025-04-12_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <lexertl/generator.hpp>\n#include <lexertl/iterator.hpp>\n#include <iostream>\n\nint main()\n{\n    lexertl::rules rules;\n    lexertl::state_machine sm;\n\n    rules.push(\"[0-9]+\", 1);\n    rules.push(\"[a-z]+\", 2);\n    lexertl::generator::build(rules, sm);\n\n    std::string input(\"abc012Ad3e4\");\n    lexertl::siterator iter(input.begin(), input.end(), sm);\n    lexertl::siterator end;\n\n    for (; iter != end; ++iter)\n    {\n        std::cout << \"Id: \" << iter->id << \", Token: '\" <<\n            iter->str() << \"'\\n\";\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Source Files Based on Features\nDESCRIPTION: Conditionally adds source files to the build based on enabled features like Manifold and CGAL. This allows for selective compilation of features that may not be available or needed in all builds.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_MANIFOLD)\n  target_compile_definitions(OpenSCAD PRIVATE ENABLE_MANIFOLD)\n  list(APPEND Sources ${MANIFOLD_SOURCES})\nendif()\nif (ENABLE_CGAL)\n  list(APPEND Sources ${CGAL_SOURCES})\nendif()\nif (ENABLE_MANIFOLD AND ENABLE_CGAL)\n  list(APPEND Sources ${MANIFOLD_CGAL_SOURCES})\nendif()\nlist(APPEND Sources src/openscad.cc ${CORE_SOURCES} ${OFFSCREEN_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Creating Source Package Archive for OpenSCAD Release\nDESCRIPTION: Command to create a compressed source package archive for the OpenSCAD release.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscripts/git-archive-all.py --prefix=openscad-$VERSION/ openscad-$VERSION.src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring STL Export Tests in CMake for OpenSCAD\nDESCRIPTION: Defines several command-line tests for STL export functionality in OpenSCAD. Tests include standard STL export, ASCII STL export to stdout, manifold STL export (conditional on ENABLE_MANIFOLD), binary STL export, and binary STL export to stdout.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(stlexport              EXPERIMENTAL OPENSCAD SUFFIX stl FILES ${EXPORT_STL_TEST_FILES} ARGS --enable=predictible-output --render)\nadd_cmdline_test(stlexport-stdout       EXPERIMENTAL OPENSCAD SUFFIX stl FILES ${EXPORT_STL_TEST_FILES} STDIO EXPECTEDDIR stlexport ARGS --enable=predictible-output --render --export-format asciistl)\nif (ENABLE_MANIFOLD)\nadd_cmdline_test(manifold-stlexport     EXPERIMENTAL OPENSCAD SUFFIX stl FILES ${EXPORT_STL_TEST_FILES} EXPECTEDDIR stlexport ARGS --enable=predictible-output --backend=manifold --render)\nendif()\n\nadd_cmdline_test(binstlexport           EXPERIMENTAL OPENSCAD SUFFIX stl FILES ${EXPORT_STL_TEST_FILES} ARGS --enable=predictible-output --render --export-format binstl)\nadd_cmdline_test(binstlexport-stdout    EXPERIMENTAL OPENSCAD SUFFIX stl FILES ${EXPORT_STL_TEST_FILES} STDIO EXPECTEDDIR binstlexport ARGS --enable=predictible-output --render --export-format binstl)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Driver Sources for Unix Platforms in OpenSCAD\nDESCRIPTION: Platform-specific setup for input drivers in OpenSCAD. Enables joystick support on Unix (non-Apple, non-headless) platforms and compiles the sources conditionally.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND (NOT APPLE) AND (NOT HEADLESS))\n  set(PLATFORM_INPUT_DRIVER_SOURCES src/gui/input/JoystickInputDriver.cc)\n  target_compile_definitions(OpenSCAD PRIVATE ENABLE_JOYSTICK)\nendif()\n\nset(INPUT_DRIVER_SOURCES\n  ${PLATFORM_INPUT_DRIVER_SOURCES}\n  ${INPUT_DRIVER_HIDAPI_SOURCES}\n  ${INPUT_DRIVER_SPNAV_SOURCES}\n  ${INPUT_DRIVER_DBUS_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifold Sources for OpenSCAD in CMake\nDESCRIPTION: This snippet defines the source files related to Manifold geometry processing in OpenSCAD. It includes core Manifold utilities and CGAL-specific Manifold operations.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nset(MANIFOLD_SOURCES\n  src/geometry/manifold/ManifoldGeometry.cc\n  src/geometry/manifold/manifoldutils.cc\n  src/geometry/manifold/manifold-applyops.cc\n  src/geometry/manifold/Polygon2d-manifold.cc\n)\n\nset(MANIFOLD_CGAL_SOURCES\n  src/geometry/manifold/manifold-applyops-minkowski.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Input with lexertl Direct Lookup in C++\nDESCRIPTION: This example demonstrates how to create a lexical analyzer using lexertl's direct lookup approach. It defines rules for numbers and lowercase letters, builds a state machine, and processes an input string by iteratively looking up tokens and printing their IDs and values.\nSOURCE: https://github.com/openscad/openscad/blob/master/src/ext/lexertl/README.md#2025-04-12_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <lexertl/generator.hpp>\n#include <lexertl/lookup.hpp>\n#include <iostream>\n\nint main()\n{\n    lexertl::rules rules;\n    lexertl::state_machine sm;\n\n    rules.push(\"[0-9]+\", 1);\n    rules.push(\"[a-z]+\", 2);\n    lexertl::generator::build(rules, sm);\n\n    std::string input(\"abc012Ad3e4\");\n    lexertl::smatch results(input.begin(), input.end());\n\n    // Read ahead\n    lexertl::lookup(sm, results);\n\n    while (results.id != 0)\n    {\n        std::cout << \"Id: \" << results.id << \", Token: '\" <<\n            results.str () << \"'\\n\";\n        lexertl::lookup(sm, results);\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Language Translation File with msginit\nDESCRIPTION: Shell command to initialize a new language translation file using msginit. The command creates a new .po file for the specified language code based on the template openscad.pot file.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/translation.txt#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ msginit -l $LANGCODE -o ./locale/$LANGCODE.po -i ./locale/openscad.pot\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipper2 Library for OpenSCAD in CMake\nDESCRIPTION: This snippet handles the configuration of the Clipper2 library, either using a built-in version or finding an installed version. It sets up the necessary compile options and links the library to OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_BUILTIN_CLIPPER2)\n  set(CLIPPER2_UTILS OFF)\n  set(CLIPPER2_EXAMPLES OFF)\n  set(CLIPPER2_TESTS OFF)\n  add_subdirectory(\"submodules/Clipper2/CPP\" EXCLUDE_FROM_ALL)\n  set(Clipper2_FOUND \"YES\")\n  if(NOT TARGET Clipper2::Clipper2)\n    add_library(Clipper2::Clipper2 ALIAS Clipper2)\n  endif()\n  message(STATUS \"Clipper2 submodule\")\nelse()\n  find_package(Clipper2 REQUIRED QUIET)\n  message(STATUS \"Clipper2: ${Clipper2_VERSION}\")\nendif()\ntarget_link_libraries(OpenSCAD PRIVATE Clipper2::Clipper2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon and Resource Files\nDESCRIPTION: Configures various files that depend on build type (release vs. nightly), including application metadata, desktop files, and resource collections. This ensures that the correct branding and resources are used for each build type.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure icon-related files, for release vs nightly\nconfigure_file(${CMAKE_CURRENT_LIST_DIR}/openscad.appdata.xml.in ${CMAKE_CURRENT_LIST_DIR}/openscad.appdata.xml.in2)\nconfigure_file(${RESOURCE_DIR}/icons/openscad.desktop.in ${RESOURCE_DIR}/icons/openscad.desktop)\nconfigure_file(${RESOURCE_DIR}/common.qrc.in ${RESOURCE_DIR}/common.qrc)\nconfigure_file(${RESOURCE_DIR}/mac.qrc.in ${RESOURCE_DIR}/mac.qrc)\n```\n\n----------------------------------------\n\nTITLE: Defining Manifold Corner Case Test Files for OpenSCAD\nDESCRIPTION: Defines a comprehensive set of test files for testing manifold corner cases in OpenSCAD. Includes various scenarios of object self-touching and interactions at edges, vertices, and faces, for both manifold and non-manifold cases.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\n# Manifoldness corner cases\nset(FILES_MANIFOLD_CORNER_CASES\n  ${TEST_SCAD_DIR}/3D/misc/tetracyl-slim.scad\n  ${TEST_SCAD_DIR}/3D/misc/tetracyl-touch-edge.scad\n  ${TEST_SCAD_DIR}/3D/misc/tetracyl-touch-edge-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/tetracyl-touch-vertex.scad\n  ${TEST_SCAD_DIR}/3D/misc/tetracyl-touch-vertex-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-edge-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-edge.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-vertex-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-vertex.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-face-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedrons-touch-face.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-edge-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-edge.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-face-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-face.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-vertex-nonmanifold.scad\n  ${TEST_SCAD_DIR}/3D/misc/polyhedron-self-touch-vertex.scad\n  ${TEST_SCAD_DIR}/3D/features/rotate_extrude-touch-edge.scad\n  ${TEST_SCAD_DIR}/3D/features/rotate_extrude-touch-vertex.scad\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Translation Update Script\nDESCRIPTION: Shell command to execute the translation-update.sh script which automates the process of updating translation files. The script scans source code, regenerates .pot files, updates .po files, and compiles them to .mo format.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/translation.txt#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/translation-update.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring 3MF Format Tests in CMake\nDESCRIPTION: Conditional configuration of 3MF format tests based on lib3mf availability. Includes preview, render and manifold backend tests for 3MF file format.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif (LIB3MF_FOUND)\nadd_cmdline_test(3mfpreviewtest SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPORT_IMPORT_3D_PREVIEW_FILES} EXPECTEDDIR monotonerendertest ARGS ${OPENSCAD_EXE_ARG} --format=3MF)\n```\n\n----------------------------------------\n\nTITLE: Creating OpenCSG Interface Library in CMake\nDESCRIPTION: Creates an interface library named OpenCSG that provides the compiled objects from OpenCSGObjects to consumers. Interface libraries in CMake are used for targets that don't directly create output but propagate usage requirements to dependent targets.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists-OpenCSG.txt#2025-04-12_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(OpenCSG INTERFACE)\ntarget_include_directories(OpenCSG INTERFACE submodules/OpenCSG/include)\ntarget_sources(OpenCSG INTERFACE $<TARGET_OBJECTS:OpenCSGObjects>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Export Format Tests in CMake\nDESCRIPTION: Sets up preview and render tests for basic 3D file formats (STL, OFF, AMF, OBJ) using OpenSCAD's command line interface. Tests include both preview and forced rendering modes.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmdline_test(monotonerendertest OPENSCAD SUFFIX png FILES ${EXPORT_IMPORT_3D_PREVIEW_FILES} ${SIMPLE_EXPORT_IMPORT_2D_FILES} ARGS --colorscheme=Monotone --render)\nadd_cmdline_test(stlpreviewtest SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPORT_IMPORT_3D_PREVIEW_FILES} EXPECTEDDIR monotonerendertest ARGS ${OPENSCAD_EXE_ARG} --format=STL)\n```\n\n----------------------------------------\n\nTITLE: Archiving OpenSCAD Release Source in Shell\nDESCRIPTION: This command creates a source archive for the OpenSCAD release. It uses a custom Python script to create a tar.gz file with all project files, prefixed with the version number.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/patchlevel-checklist.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/git-archive-all.py --prefix=openscad-$VERSION/ openscad-$VERSION.src.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifold Backend Tests in CMake\nDESCRIPTION: Sets up tests specifically for the manifold backend with various export formats including OFF, STL, AMF, and OBJ. Includes special handling for corner cases and specific test files.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_MANIFOLD)\nset(OFFRENDERMANIFOLDTEST_FILES ${EXPORT_IMPORT_3D_RENDERMANIFOLD_FILES})\nlist(REMOVE_ITEM OFFRENDERMANIFOLDTEST_FILES\n ${TEST_SCAD_DIR}/misc/cube10.scad\n ${TEST_SCAD_DIR}/3D/features/polyhedron-tests.scad\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CTest Custom Commands in CMake\nDESCRIPTION: Sets up custom test configuration by generating CTestCustom.cmake from a template. Includes optional upload argument setting based on environment variable.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(STATUS \"creating CTestCustom.cmake\")\nset(TEMPLATE_HEADER \"Generated by cmake from ${CCSD}/CTestCustom.template\")\nset(UPLOADARG \"\")\nif ($ENV{OPENSCAD_UPLOAD_TESTS})\n  set(UPLOADARG \"--upload\")\nendif()\nconfigure_file(${CCSD}/CTestCustom.template ${CBD}/CTestCustom.cmake @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Testing Orthographic Gimbal Camera in OpenSCAD\nDESCRIPTION: These tests verify orthographic projection mode with gimbal camera functionality in OpenSCAD. Tests use standard camera parameter format with the orthographic projection flag enabled through --projection=o.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\n# Orthographic gimbal cam\nadd_cmdline_test(openscad-camortho         OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=100,-20,-20,90,0,90,220 --projection=o)\nadd_cmdline_test(openscad-camortho-viewall OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=100,-20,-10,90,0,90,3000 --viewall --projection=o)\n```\n\n----------------------------------------\n\nTITLE: Uploading OpenSCAD Release Source via SCP\nDESCRIPTION: This command securely copies the OpenSCAD source archive to the project's file server. It uses the SCP protocol to transfer the file to a specific user and location.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/patchlevel-checklist.txt#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscp openscad-$VERSION.src.tar.gz openscad@files.openscad.org:www\n```\n\n----------------------------------------\n\nTITLE: Configuring 2D Export Tests in CMake\nDESCRIPTION: Sets up tests for 2D file format exports including DXF and SVG formats with forced rendering mode.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmdline_test(dxfrendertest SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPORT_IMPORT_2D_RENDER_FILES} ${SCAD_DXF_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=DXF --render=force)\nadd_cmdline_test(svgrendertest SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPORT_IMPORT_2D_RENDER_FILES} ${SCAD_SVG_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=SVG --render=force)\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Tests in OpenSCAD CMake Configuration\nDESCRIPTION: Conditionally disables experimental tests when the EXPERIMENTAL flag is set. Currently disables rendering tests related to GitHub issue #5220 about roof-related functionality.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nif (EXPERIMENTAL)\nset_tests_properties(\n  # https://github.com/openscad/openscad/issues/5220\n  rendertest_roof\n  csgrendertest_roof\n\n  PROPERTIES DISABLED TRUE\n)\nendif (EXPERIMENTAL)\n```\n\n----------------------------------------\n\nTITLE: Testing Perspective Vector Camera in OpenSCAD\nDESCRIPTION: These tests verify perspective vector camera functionality in OpenSCAD, testing standard views (front, back, left, right, top, bottom) and custom angles with the 6-argument --camera format (eye_x,eye_y,eye_z,center_x,center_y,center_z).\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\n# Perspective vector cam\nadd_cmdline_test(openscad-cameye            OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=120,80,60,0,0,0)\nadd_cmdline_test(openscad-cameye_front      OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,-130,0,0,0,0)\nadd_cmdline_test(openscad-cameye_back       OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,130,0,0,0,0)\nadd_cmdline_test(openscad-cameye_left       OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=-130,0,0,0,0,0)\nadd_cmdline_test(openscad-cameye_right      OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=130,0,0,0,0,0)\nadd_cmdline_test(openscad-cameye_top        OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,0,130,0,0,0)\nadd_cmdline_test(openscad-cameye_bottom     OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,0,-130,0,0,0)\nadd_cmdline_test(openscad-cameye2           OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=160,140,130,0,0,0)\nadd_cmdline_test(openscad-camcenter         OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=100,60,30,20,10,30)\nadd_cmdline_test(openscad-camcenter-viewall OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=60,40,30,20,10,30 --viewall)\n```\n\n----------------------------------------\n\nTITLE: Configuring Customizer Tests in CMake\nDESCRIPTION: Defines tests for OpenSCAD's customizer functionality including parameter sets, descriptions, and special cases like dot notation in set names.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nset(SET_OF_PARAM_TEST \"${TEST_CUSTOMIZER_DIR}/setofparameter.scad\")\nset(SET_OF_PARAM_JSON \"${TEST_CUSTOMIZER_DIR}/setofparameter.json\")\nadd_cmdline_test(customizertest OPENSCAD ARGS SUFFIX ast FILES\n  ${TEST_CUSTOMIZER_DIR}/description.scad\n  ${TEST_CUSTOMIZER_DIR}/parameter.scad\n```\n\n----------------------------------------\n\nTITLE: Configuring 3MF-related Test Disabling in OpenSCAD CMake\nDESCRIPTION: Conditionally disables 3MF-related tests based on whether Lib3MF is found and if the EXPERIMENTAL flag is set. Handles cases where 3MF export is problematic or when Lib3MF is not available.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nif (LIB3MF_FOUND)\n  if (EXPERIMENTAL)\n    set_tests_properties(\n      # https://github.com/openscad/openscad/issues/5800\n      3mfexport_3mf-export\n\n      PROPERTIES DISABLED TRUE\n    )\n  endif (EXPERIMENTAL)\n  set_tests_properties(\n    # We don't repair polygon winding order in CGAL mode\n    # We could perhaps split the test into good+bad polyhedrons\n    # and only disable the bad ones.\n    3mfrendertest_polyhedron-tests\n\n    # When exported from CGAL, the file cannot be re-imported\n    3mfrendertest_bad-stl-wing\n\n    # For some reason, only failing on Linux\n    3mfrendertest_bad-stl-tardis\n    \n    PROPERTIES DISABLED TRUE\n  )\nelse()\n  set_tests_properties(\n    previewtest_import_3mf-tests\n    rendertest_import_3mf-tests\n    csgrendertest_import_3mf-tests\n    throwntogethertest_import_3mf-tests\n    PROPERTIES DISABLED TRUE\n  )\nendif(LIB3MF_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Using for() Loop with Scalar Arguments in OpenSCAD\nDESCRIPTION: Demonstrates the new support for scalar arguments in for() loops, allowing simpler iteration syntax for single values.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/visitor-changes.txt#2025-04-12_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\nfor (i=23) echo(i)\n```\n\n----------------------------------------\n\nTITLE: Running Cascade Test Script\nDESCRIPTION: Shell commands to run cascade test scripts that create or modify multiple dependent files to test automatic reloading of cascading changes.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./cascade.sh\n./cascade2.sh\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD Test Suite with CTest on Windows\nDESCRIPTION: Command to execute the OpenSCAD test suite after launching the test console. This runs a series of regression tests and generates an HTML report with the results.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/WinReadme.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nctest\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Tests in CMake for OpenSCAD\nDESCRIPTION: Disables certain tests that are failing due to a known issue (GitHub issue #4632). The disabled tests include CSG and AST output tests for both run and check phases.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_53\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(\n  relative-output_csg_run\n  relative-output_csg_check\n  relative-output_ast_run \n  relative-output_ast_check\n  PROPERTIES DISABLED TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Building macOS Dependencies from Source\nDESCRIPTION: Shell command to run the script that compiles all dependencies for OpenSCAD on macOS from source code.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/macosx-build-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Modifying Cube Size in OpenSCAD\nDESCRIPTION: Code modification example for multipleB.scad that changes the size of a cube by adjusting the multiplier for the F() function.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_2\n\nLANGUAGE: openscad\nCODE:\n```\ncube(1.5*F(), center=true);\ncube(2.5*F(), center=true);\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD in Debug Mode\nDESCRIPTION: Command-line instruction for running OpenSCAD with debugging enabled for FileModule and SourceFileCache to monitor module caching behavior.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--debug=FileModule,SourceFileCache\n```\n\n----------------------------------------\n\nTITLE: Adding Dump Tests and Non-ASCII Filename Tests\nDESCRIPTION: Adds tests for dumping OpenSCAD models to CSG format and tests with non-ASCII filenames to ensure proper handling of special characters in filenames.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(dumptest           OPENSCAD FILES ${FEATURES_2D_FILES} ${FEATURES_3D_FILES} ${DEPRECATED_3D_FILES} ${MISC_FILES} SUFFIX csg ARGS)\nadd_cmdline_test(dumptest-examples  OPENSCAD FILES ${EXAMPLE_FILES} SUFFIX csg ARGS)\n# non-ASCII filenames\nadd_cmdline_test(openscad-nonascii  OPENSCAD FILES ${TEST_SCAD_DIR}/misc/sfære.scad SUFFIX csg)\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies for Linux/BSD\nDESCRIPTION: Shell command to run the script that compiles all dependencies for OpenSCAD on Linux/BSD systems, useful when system packages are too old or missing.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/uni-build-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration with Library Paths\nDESCRIPTION: Examples of using environment variables to help CMAKE find required dependencies like Eigen, OpenCSG, CGAL, Boost, and GLEW.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/testing.txt#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENSCAD_LIBRARIES=$HOME cmake .\nCGALDIR=$HOME/CGAL-3.9 BOOSTDIR=$HOME/boost-1.47.0 cmake .\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Linux/BSD Build\nDESCRIPTION: Shell command to source the environment setup script for Linux/BSD builds, configuring necessary environment variables before compiling dependencies or OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nsource ./scripts/setenv-unibuild.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Additional PNG Test Types\nDESCRIPTION: Adds various additional PNG test types including force rendering, stdio render testing, and CSG render testing, as well as manifold-specific rendering tests when enabled.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\n# Other PNG tests\nadd_cmdline_test(renderforcetest     OPENSCAD FILES ${RENDERFORCETEST_FILES} SUFFIX png ARGS --render=force)\nadd_cmdline_test(renderstdiotest     OPENSCAD SUFFIX png FILES ${RENDERSTDIOTEST_FILES} STDIO EXPECTEDDIR rendertest ARGS --export-format png --render)\nadd_cmdline_test(csgrendertest       SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${RENDERTEST_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=csg --render)\nif (ENABLE_MANIFOLD)\nadd_cmdline_test(rendermanifoldtest            OPENSCAD SUFFIX png FILES ${RENDERMANIFOLDTEST_FILES} EXPECTEDDIR rendertest ARGS --render --backend=manifold)\nadd_cmdline_test(rendermanifoldtest-different  OPENSCAD SUFFIX png FILES ${SCADFILES_DIFFERENT_MANIFOLD_RENDER_EXPECTATIONS} ARGS --render --backend=manifold)\nadd_cmdline_test(previewmanifoldtest           OPENSCAD SUFFIX png FILES ${PREVIEWMANIFOLDTEST_FILES} EXPECTEDDIR previewtest ARGS --backend=manifold)\nadd_cmdline_test(previewmanifoldtest-different OPENSCAD SUFFIX png FILES ${SCADFILES_DIFFERENT_MANIFOLD_PREVIEW_EXPECTATIONS} ARGS --backend=manifold)\nadd_cmdline_test(renderforcemanifoldtest       OPENSCAD SUFFIX png FILES ${TEST_SCAD_DIR}/Bugs/import-single-triangle.scad ARGS --render=force --backend=manifold)\n# This tests that no warnings are issued when using Manifold for converting or processing geometry\nadd_cmdline_test(renderforcemanifoldtest-hardwarnings OPENSCAD SUFFIX png FILES ${MANIFOLDHARDWARNING_FILES} EXPECTEDDIR rendertest ARGS --render=force --backend=manifold --hardwarnings)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Merging MCAD Library in OpenSCAD Release Process\nDESCRIPTION: Commands to update the MCAD library in OpenSCAD by first pulling changes from upstream to the MCAD clone, then updating the MCAD submodule in the OpenSCAD repository.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n$ git merge upstream/master\n$ git push\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd libraries/MCAD\n$ git pull\n$ cd ../..\n$ git commit -m \"Updated MCAD\" libraries/MCAD\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies for Windows Cross-Compile\nDESCRIPTION: Shell command to run the script that downloads and compiles all dependencies for cross-compiling OpenSCAD for 64-bit Windows from Linux.\nSOURCE: https://github.com/openscad/openscad/blob/master/README.md#2025-04-12_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/mingw-x-build-dependencies.sh 64\n```\n\n----------------------------------------\n\nTITLE: Adding Abstract Syntax Tree (AST) Dump Tests\nDESCRIPTION: Adds command-line tests that output the abstract syntax tree (AST) for various OpenSCAD files, including function tests, operator tests, and expression tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(astdumptest OPENSCAD SUFFIX ast FILES\n  ${MISC_FILES}\n  ${TEST_SCAD_DIR}/functions/assert-expression-fail1-test.scad\n  ${TEST_SCAD_DIR}/functions/assert-expression-fail2-test.scad\n  ${TEST_SCAD_DIR}/functions/assert-expression-fail3-test.scad\n  ${TEST_SCAD_DIR}/functions/assert-expression-tests.scad\n  ${TEST_SCAD_DIR}/functions/bitwise-operators.scad\n  ${TEST_SCAD_DIR}/functions/echo-expression-tests.scad\n  ${TEST_SCAD_DIR}/functions/expression-precedence-tests.scad\n  ${TEST_SCAD_DIR}/functions/let-test-single.scad\n  ${TEST_SCAD_DIR}/functions/let-tests.scad\n  ${TEST_SCAD_DIR}/functions/list-comprehensions.scad\n  ${TEST_SCAD_DIR}/functions/exponent-operator-test.scad\n  ${TEST_SCAD_DIR}/misc/ifelse-ast-dump.scad\n  ${TEST_SCAD_DIR}/svg/id-layer-selection-test.scad\n)\nadd_cmdline_test(astdumpstdiotest OPENSCAD SUFFIX ast FILES ${TEST_SCAD_DIR}/misc/allexpressions.scad STDIO EXPECTEDDIR astdumptest ARGS --export-format ast)\n```\n\n----------------------------------------\n\nTITLE: Tagging an OpenSCAD Release\nDESCRIPTION: Git command to create a tag for a new OpenSCAD release version.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit tag \"openscad-$VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Building OpenSCAD Release Binaries for macOS\nDESCRIPTION: Command to build the macOS binary package for an OpenSCAD release.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/publish-macosx.sh -> OpenSCAD-$VERSION.dmg\n```\n\n----------------------------------------\n\nTITLE: Running Code Beautification Script in Shell\nDESCRIPTION: Commands for running the beautification script using uncrustify. The script can either beautify only changed files (default behavior) or the entire codebase with the --all flag.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/hacking.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscripts/beautify.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nscripts/beautify.sh --all\n```\n\n----------------------------------------\n\nTITLE: Pushing OpenSCAD Release Tags\nDESCRIPTION: Git command to push the new release tag and master branch to the remote repository.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tags master\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Console Application Build with CMake\nDESCRIPTION: CMake configuration for building a Windows console application. The script sets minimum CMake version requirements, defines the project, configures the executable with a .com extension, and specifies installation parameters.\nSOURCE: https://github.com/openscad/openscad/blob/master/winconsole/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.20)\n\nproject(winconsole VERSION 1.0 LANGUAGES C)\n\nset(CMAKE_EXECUTABLE_SUFFIX_C .com)\n\nadd_executable(winconsole winconsole.c)\n\nset_target_properties(winconsole PROPERTIES OUTPUT_NAME openscad${SUFFIX_WITH_DASH})\n\ninstall(TARGETS winconsole RUNTIME DESTINATION \".\")\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release for OpenSCAD\nDESCRIPTION: Command to create a GitHub release for the new OpenSCAD version using a script.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/github-release.sh $VERSION\n```\n\n----------------------------------------\n\nTITLE: Setting Language Environment for Testing French Translation in OpenSCAD\nDESCRIPTION: Shell command to run OpenSCAD with French language settings for testing translations. This approach uses the LANGUAGE environment variable to override the system locale temporarily.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/translation.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ LANGUAGE=fr ./openscad\n```\n\n----------------------------------------\n\nTITLE: Xvfb Test Execution Commands\nDESCRIPTION: Commands for running tests on headless Unix servers using virtual framebuffer programs like Xvnc or Xvfb.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/testing.txt#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ Xvfb :5 -screen 0 800x600x24 &\n$ DISPLAY=:5 ctest\n\n# or\n\n$ xvfb-run ctest\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD Tests via CLI\nDESCRIPTION: Shell script for running the test suite using the OpenSCAD command line interface. This iterates through all test files with names starting with 'g' (good) or 'b' (bad) and attempts to render them to STL.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/manual/issue214/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscad=<pathname of project root>/openscad\nfor f in [gb]*.scad; do echo $f; $scad -o ,.stl $f; done\n```\n\n----------------------------------------\n\nTITLE: Testing Experimental Roof Feature in OpenSCAD\nDESCRIPTION: This section tests the experimental roof feature in OpenSCAD. Tests check CSG dump output, rendered images with different backends (CGAL and Manifold), preview rendering, and thrown-together preview mode.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# --enable=roof tests\n#\nlist(APPEND EXPERIMENTAL_ROOF_FILES ${EXAMPLES_DIR}/Basics/roof.scad)\nadd_cmdline_test(dumptest-examples   EXPERIMENTAL OPENSCAD SUFFIX csg FILES ${EXPERIMENTAL_ROOF_FILES} ARGS --enable=roof)\nadd_cmdline_test(rendertest          EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} ARGS --render --enable=roof)\nadd_cmdline_test(csgrendertest       EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=csg --render --enable=roof)\nadd_cmdline_test(rendermanifoldtest  EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} EXPECTEDDIR rendertest ARGS --render --enable=roof --backend=manifold)\nadd_cmdline_test(previewtest         EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} ARGS --enable=roof)\nadd_cmdline_test(previewmanifoldtest EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} ARGS --enable=roof --backend=manifold)\nadd_cmdline_test(throwntogethertest  EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_ROOF_FILES} ARGS --preview=throwntogether --enable=roof)\n\n#\n# --enable=import-function tests\n```\n\n----------------------------------------\n\nTITLE: Creating Release Notes for OpenSCAD\nDESCRIPTION: Command to generate release notes for an OpenSCAD release using a script.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/makereleasenotes.sh\n```\n\n----------------------------------------\n\nTITLE: Using strace to Debug Translation Loading in OpenSCAD\nDESCRIPTION: Shell command that combines strace with grep to monitor which .mo translation files are being accessed when running OpenSCAD with French language settings. Useful for debugging translation loading issues.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/translation.txt#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ LANGUAGE=fr strace -f ./openscad 2>&1 | grep LC_MESSAGES\n```\n\n----------------------------------------\n\nTITLE: MSVC Build Commands for Windows\nDESCRIPTION: Sequence of commands needed to build and run tests using Microsoft Visual C++ compiler on Windows.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/testing.txt#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> cd \\where\\you\\installed\\openscad\n> cd tests\n> cmake . -DCMAKE_BUILD_TYPE=Release\n> sed -i s/\\/MD/\\/MT/ CMakeCache.txt\n> cmake .\n> nmake -f Makefile\n```\n\n----------------------------------------\n\nTITLE: Setting Up Text Metrics Tests in CMake for OpenSCAD\nDESCRIPTION: Configures various test files and commands for the experimental text metrics feature in OpenSCAD, including echo tests, dump tests, preview tests, and render tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_50\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND EXPERIMENTAL_TEXTMETRICS_ECHOTEST_FILES\n  ${TEST_SCAD_DIR}/misc/isobject-test.scad\n  ${TEST_SCAD_DIR}/misc/text-metrics-test.scad\n)\nlist(APPEND EXPERIMENTAL_TEXTMETRICS_FILES\n  ${TEST_SCAD_DIR}/2D/features/text-metrics.scad\n)\nadd_cmdline_test(echotest           EXPERIMENTAL OPENSCAD SUFFIX echo FILES ${EXPERIMENTAL_TEXTMETRICS_ECHOTEST_FILES} ARGS --enable=textmetrics)\nadd_cmdline_test(dumptest           EXPERIMENTAL OPENSCAD SUFFIX csg  FILES ${EXPERIMENTAL_TEXTMETRICS_FILES} ARGS --enable=textmetrics)\nadd_cmdline_test(previewtest        EXPERIMENTAL OPENSCAD SUFFIX png  FILES ${EXPERIMENTAL_TEXTMETRICS_FILES} ARGS --enable=textmetrics)\nadd_cmdline_test(throwntogethertest EXPERIMENTAL OPENSCAD SUFFIX png  FILES ${EXPERIMENTAL_TEXTMETRICS_FILES} ARGS --preview=throwntogether --enable=textmetrics)\nadd_cmdline_test(csgrendertest      EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${EXPERIMENTAL_TEXTMETRICS_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=csg --render --enable=textmetrics)\nadd_cmdline_test(rendertest         EXPERIMENTAL OPENSCAD SUFFIX png FILES ${EXPERIMENTAL_TEXTMETRICS_FILES} ARGS --render --enable=textmetrics)\nadd_cmdline_test(dxfrendertest      EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png ARGS ${OPENSCAD_EXE_ARG} --format=DXF --render=force --enable=textmetrics EXPECTEDDIR rendertest FILES ${EXPERIMENTAL_TEXTMETRICS_FILES})\nadd_cmdline_test(svgrendertest      EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png ARGS ${OPENSCAD_EXE_ARG} --format=SVG --render=force --enable=textmetrics EXPECTEDDIR rendertest FILES ${EXPERIMENTAL_TEXTMETRICS_FILES})\n```\n\n----------------------------------------\n\nTITLE: Building OpenSCAD with Experimental Features\nDESCRIPTION: Shell command to clean, configure with qmake including experimental features, and build OpenSCAD. This is a prerequisite step before updating translations to ensure all translatable strings are included.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/translation.txt#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ make clean && qmake CONFIG+=experimental && make\n```\n\n----------------------------------------\n\nTITLE: Configuring HIDAPI Integration in CMake\nDESCRIPTION: Sets up HIDAPI library integration including version detection, source inclusion, and library linking for OpenSCAD target.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nfile(STRINGS \"${HIDAPI_SRC_DIR}/VERSION\" HIDAPI_VERSION_STRING)\ntarget_include_directories(OpenSCAD SYSTEM PRIVATE \"${HIDAPI_SRC_DIR}\")\nset(INPUT_DRIVER_HIDAPI_SOURCES \"${HIDAPI_SRC_DIR}/hid.c\" src/gui/input/HidApiInputDriver.cc)\ntarget_compile_definitions(OpenSCAD PRIVATE ENABLE_HIDAPI)\ntarget_link_libraries(OpenSCAD PRIVATE setupapi hid)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Configuration for OpenSCAD Testing\nDESCRIPTION: This snippet sets up the initial CMake configuration, including minimum version, policies, and options. It also defines common paths used throughout the testing process.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nif(POLICY CMP0017)\n  cmake_policy(SET CMP0017 NEW)\nendif()\ncmake_policy(SET CMP0057 NEW)\ncmake_policy(SET CMP0070 NEW)\n\noption(USE_IMAGE_COMPARE_PY \"Use built-in image_compare.py\" ON)\n\nset(CBD ${CMAKE_BINARY_DIR})\nset(CSD ${CMAKE_SOURCE_DIR})\nset(CCBD ${CMAKE_CURRENT_BINARY_DIR})\nset(CCSD ${CMAKE_CURRENT_SOURCE_DIR})\nset(LIBRARIES_DIR       \"${CSD}/libraries\")\nset(EXAMPLES_DIR        \"${CSD}/examples\")\nset(TEST_DATA_DIR       \"${CCSD}/data\")\nset(TEST_SCAD_DIR       \"${CCSD}/data/scad\")\nset(TEST_CUSTOMIZER_DIR \"${CCSD}/data/scad/customizer\")\nset(TEST_PYTHON_DIR     \"${CCSD}/data/python\")\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD Tests via GUI\nDESCRIPTION: Shell script for running the test suite using the OpenSCAD graphical user interface. This iterates through all test files and opens them one by one in the GUI for manual verification.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/manual/issue214/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscad=<pathname of project root>/openscad\nfor f in [gb]*.scad; do echo $f; $scad $f; done\n```\n\n----------------------------------------\n\nTITLE: Adding SVG Viewbox and Import Tests\nDESCRIPTION: Adds tests for SVG viewbox functionality and general SVG import capabilities, testing how OpenSCAD handles various SVG files and viewbox attributes.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset(VIEWBOX_TEST \"${TEST_SCAD_DIR}/svg/extruded/viewbox-test.scad\")\nforeach(TEST ${SVG_VIEWBOX_TESTS})\n  add_cmdline_test(svgviewbox-${TEST} OPENSCAD ARGS --imgsize 600,600 \"-Dfile=\\\"${TEST_DATA_DIR}/svg/viewbox/${TEST}.svg\\\";\" SUFFIX png FILES ${VIEWBOX_TEST})\nendforeach()\n\nadd_cmdline_test(svgimport OPENSCAD ARGS --imgsize 600,600 SUFFIX png FILES\n  ${TEST_SCAD_DIR}/svg/extruded/box-w-holes.scad\n  ${TEST_SCAD_DIR}/svg/extruded/simple-center.scad\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Orthographic Vector Camera in OpenSCAD\nDESCRIPTION: These tests verify orthographic projection mode with vector camera functionality in OpenSCAD, with and without the --viewall option. Tests use the 6-argument camera format with the orthographic projection flag.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\n# Orthographic vector cam\nadd_cmdline_test(openscad-cameyeortho         OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=90,80,75,0,0,0 --projection=o)\nadd_cmdline_test(openscad-cameyeortho-viewall OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=16,14,13,0,0,0 --viewall --projection=o)\n\nadd_cmdline_test(openscad-camvp-variables     OPENSCAD FILES ${CAMERA_TEST_VP} SUFFIX png ARGS ${IMGSIZE})\nadd_cmdline_test(openscad-camvp-override      OPENSCAD FILES ${CAMERA_TEST_VP} SUFFIX png ARGS ${IMGSIZE} --camera=120,80,60,0,0,0)\n```\n\n----------------------------------------\n\nTITLE: Handling Boost Placeholders Warning in CMake\nDESCRIPTION: Adds a compile definition to avoid warnings from specific Boost versions between 1.72 and 1.76 that have issues with placeholders.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif ((\"${Boost_VERSION}\" VERSION_GREATER \"1.72\") AND (\"${Boost_VERSION}\" VERSION_LESS \"1.76\"))\n  # Avoid warning messages from boost which are also caused by boost's code.\n  #   https://github.com/boostorg/property_tree/issues/51\n  target_compile_definitions(OpenSCAD PUBLIC BOOST_BIND_GLOBAL_PLACEHOLDERS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Configuration in CMake for OpenSCAD\nDESCRIPTION: Function to set test configuration by adding test files to a specific configuration category. It handles prefixes for test names and maintains the configuration in the parent scope.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(set_test_config CONFIG)\n  cmake_parse_arguments(TESTCFG \"\" \"\" \"FILES;PREFIXES\" ${ARGN})\n   # Get fullnames for test files\n  if (TESTCFG_PREFIXES)\n    foreach(PREFIX ${TESTCFG_PREFIXES})\n      foreach(FILE ${TESTCFG_FILES})\n        get_test_fullname(${PREFIX} ${FILE} TESTCFG_FULLNAME)\n        list(APPEND FULLNAMES ${TESTCFG_FULLNAME})\n      endforeach()\n    endforeach()\n  else()\n    list(APPEND FULLNAMES ${TESTCFG_FILES})\n  endif()\n  # Set config on fullnames\n  list(APPEND ${CONFIG}_TEST_CONFIG ${FULLNAMES})\n  list(FIND TEST_CONFIGS ${CONFIG} FOUND)\n  if (FOUND EQUAL -1)\n    list(APPEND TEST_CONFIGS ${CONFIG})\n    list(SORT TEST_CONFIGS)\n    # Export to parent scope\n    set(TEST_CONFIGS ${TEST_CONFIGS} CACHE INTERNAL \"\")\n  endif()\n  # Export to parent scope\n  set(${CONFIG}_TEST_CONFIG ${${CONFIG}_TEST_CONFIG} CACHE INTERNAL \"\")\nendfunction(set_test_config)\n```\n\n----------------------------------------\n\nTITLE: Adding Output File Tests for Various Formats in CMake for OpenSCAD\nDESCRIPTION: Sets up output file tests for multiple file formats including STL, OFF, WRL, AMF, 3MF, CSG, DXF, SVG, PDF, PNG, Echo, AST, Term, NEF3, and NEFDBG. Each test uses a specific OpenSCAD file and output format.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT stl)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT off)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT wrl)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT amf)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT 3mf)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT csg)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/2D/features/square-tests.scad FORMAT dxf)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/2D/features/square-tests.scad FORMAT svg)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/2D/features/square-tests.scad FORMAT pdf)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT png)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT echo)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT ast)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT term)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT nef3)\nadd_output_file_test(relative-output FILE ${TEST_SCAD_DIR}/3D/features/cube-tests.scad FORMAT nefdbg)\n```\n\n----------------------------------------\n\nTITLE: Configuring POV Export Tests with Camera Parameters in CMake for OpenSCAD\nDESCRIPTION: Defines multiple command-line tests for POV export functionality in OpenSCAD with various camera parameters. Tests include default view, translations along different axes, rotations around different axes, distance variations, and combinations of camera parameters.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(povexport-as-is        EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold)\nadd_cmdline_test(povexport-translate-1  EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,0,0,0,0,140)\nadd_cmdline_test(povexport-translate-2  EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=10,0,0,0,0,0,140)\nadd_cmdline_test(povexport-translate-3  EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,10,0,0,0,0,140)\nadd_cmdline_test(povexport-translate-4  EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,10,0,0,0,140)\nadd_cmdline_test(povexport-rotate-1     EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,0,90,0,0,140)\nadd_cmdline_test(povexport-rotate-2     EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,0,0,90,0,140)\nadd_cmdline_test(povexport-rotate-3     EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,0,0,0,90,140)\nadd_cmdline_test(povexport-distance-1   EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=0,0,0,0,0,0,100)\nadd_cmdline_test(povexport-all          EXPERIMENTAL OPENSCAD SUFFIX pov FILES ${EXPORT_POV_TEST_FILES} ARGS --enable=predictible-output --backend=manifold --camera=1,2,3,4,5,6,7)\n```\n\n----------------------------------------\n\nTITLE: Package Configuration and Submodules\nDESCRIPTION: Sets up package configuration and includes submodules directory for the build process\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig)\n\nadd_subdirectory(submodules)\n```\n\n----------------------------------------\n\nTITLE: Adding Failing Tests for OpenSCAD Test Framework\nDESCRIPTION: Function to add tests that are expected to fail with a specific return value. Used for testing error conditions and validating that OpenSCAD properly handles invalid inputs.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_failing_test TESTCMD_BASENAME)\n  cmake_parse_arguments(TESTCMD \"\" \"RETVAL;EXE;SCRIPT;SUFFIX\" \"FILES;ARGS\" ${ARGN})\n\n  if (\"${TESTCMD_SUFFIX}\" STREQUAL \"\") # Suffix \"off\" counts as a false value, so check directly for empty string.\n    message(FATAL_ERROR \"add_failing_test() requires SUFFIX to be set\" )\n  endif()\n  if (NOT TESTCMD_EXE)\n    set(TESTCMD_EXE ${Python3_EXECUTABLE})\n  endif()\n  if (NOT TESTCMD_SCRIPT)\n    set(TESTCMD_SCRIPT ${SHOULDFAIL_PY})\n  endif()\n\n  set(TESTNAME_OPTION -t ${TESTCMD_BASENAME})\n\n  # Add tests from args\n  foreach (SCADFILE ${TESTCMD_FILES})\n    get_filename_component(FILE_BASENAME ${SCADFILE} NAME_WE)\n    string(REPLACE \" \" \"_\" FILE_BASENAME ${FILE_BASENAME}) # Test names cannot include spaces\n    set(TEST_FULLNAME \"${TESTCMD_BASENAME}_${FILE_BASENAME}\")\n    # Handle configurations\n    unset(FOUNDCONFIGS)\n    get_test_config(${TEST_FULLNAME} FOUNDCONFIGS)\n    if (NOT FOUNDCONFIGS)\n      set_test_config(Default FILES ${TEST_FULLNAME})\n    endif()\n    set_test_config(All FILES ${TEST_FULLNAME})\n    unset(FOUNDCONFIGS)\n    get_test_config(${TEST_FULLNAME} FOUNDCONFIGS)\n    set(CONFVAL ${FOUNDCONFIGS})\n\n    # The python script cannot extract the testname when given extra parameters\n    if (TESTCMD_ARGS)\n      set(FILENAME_OPTION -f ${FILE_BASENAME})\n    endif()\n\n    add_test(NAME ${TEST_FULLNAME} CONFIGURATIONS ${CONFVAL} COMMAND ${TESTCMD_EXE} ${TESTCMD_SCRIPT} \"${SCADFILE}\" -s ${TESTCMD_SUFFIX} ${TESTCMD_ARGS})\n    set_property(TEST ${TEST_FULLNAME} PROPERTY ENVIRONMENT \"${CTEST_ENVIRONMENT}\")\n  endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Testing Perspective Gimbal Camera in OpenSCAD\nDESCRIPTION: These tests verify perspective gimbal camera functionality in OpenSCAD, including camera distance, rotation, translation, and the --viewall option. Tests use standard camera parameter format (eye_x,eye_y,eye_z,center_x,center_y,center_z,distance).\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmdline_test(openscad-camdist          OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,0,0,90,0,90,200)\nadd_cmdline_test(openscad-camrot           OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=0,0,0,440,337.5,315,200)\nadd_cmdline_test(openscad-camtrans         OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=100,-20,-10,90,0,90,200)\nadd_cmdline_test(openscad-camtrans-viewall OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS ${IMGSIZE} --camera=100,-20,-10,90,0,90,6000 --viewall)\nadd_cmdline_test(openscad-camtrans-viewall-offcenter OPENSCAD FILES ${CAMERA_TEST_OFFCENTER} SUFFIX png ARGS ${IMGSIZE} --camera=0,0,0,30,40,50,10 --viewall --autocenter)\n```\n\n----------------------------------------\n\nTITLE: Updating Missing Module in OpenSCAD\nDESCRIPTION: Shell command to update an OpenSCAD module file with a larger sphere size to test dependency tracking.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"module missing() { sphere(20); }\" >  missing.scad\n```\n\n----------------------------------------\n\nTITLE: Defining Common Compiler Definitions\nDESCRIPTION: Sets up common compiler definitions for OpenSCAD including Unicode support and math definitions\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(OpenSCAD PRIVATE\n  _REENTRANT\n  UNICODE\n  _UNICODE\n  _USE_MATH_DEFINES)\n```\n\n----------------------------------------\n\nTITLE: Adding Baseline PNG Rendering Tests\nDESCRIPTION: Adds baseline PNG rendering tests using different rendering methods including standard rendering, preview, and thrown together rendering approaches.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n# Baseline PNG tests\nadd_cmdline_test(rendertest         OPENSCAD FILES ${RENDERTEST_FILES} SUFFIX png ARGS --render)\nadd_cmdline_test(previewtest        OPENSCAD FILES ${PREVIEWTEST_FILES} SUFFIX png ARGS)\nadd_cmdline_test(throwntogethertest OPENSCAD SUFFIX png FILES ${THROWNTOGETHERTEST_FILES} ARGS --preview=throwntogether)\n```\n\n----------------------------------------\n\nTITLE: Configuring Examples Test Cases in CMake\nDESCRIPTION: Sets up test configurations for example files in OpenSCAD, specifying different test prefixes for rendering, preview, and export tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset_test_config(Examples FILES ${EXAMPLE_FILES} PREFIXES\n  rendertest rendermanifoldtest rendermanifoldtest-different \n  previewtest previewmanifoldtest previewmanifoldtest-different previewtestthrowntogethertest \n  csgrendertest monotonerendertest \n  offpreviewtest offrendertest dumptest-examples)\nset_test_config(Examples FILES ${EXAMPLE_2D_FILES} PREFIXES dxfrendertest)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSCAD Resource Files for Non-Apple Platforms\nDESCRIPTION: Sets up installation of resource directories needed by OpenSCAD, including color schemes, examples, fonts, libraries, localization files, shaders, and templates. Specific file patterns are excluded from installation where necessary.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_48\n\nLANGUAGE: CMake\nCODE:\n```\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/color-schemes DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\")\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/examples DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\")\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/fonts DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\" PATTERN \".uuid\" EXCLUDE)\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/libraries DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\" PATTERN \".git*\" EXCLUDE)\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/locale DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\" FILES_MATCHING PATTERN \"*/LC_MESSAGES/openscad.mo\")\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/shaders DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\")\n  install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/templates DESTINATION \"${OPENSCAD_INSTALL_RESOURCEDIR}\" FILES_MATCHING PATTERN \"*.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSCAD Language Module for TextWrangler\nDESCRIPTION: Command to install the OpenSCAD.plist file into TextWrangler's Language Modules directory. This enables OpenSCAD syntax highlighting and language support in TextWrangler.\nSOURCE: https://github.com/openscad/openscad/blob/master/contrib/BBEdit-TextWrangler.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nInstall OpenSCAD.plist into ~/Library/Application Support/TextWrangler/Language Modules\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Known Issues in OpenSCAD CMake Configuration\nDESCRIPTION: Sets properties to disable various OpenSCAD tests that have known issues. Issues include tests that don't output anything, tests with z-fighting rendering differences across machines, and tests with floating point accuracy problems.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nset_tests_properties(\n  # These don't output anything\n  dxfrendertest_text-empty-tests\n  dxfrendertest_nothing-decimal-comma-separated\n  dxfrendertest_nullspace-2d\n  svgrendertest_text-empty-tests\n  svgrendertest_nullspace-2d\n\n  # Not useful\n  throwntogethertest_internal-cavity\n  throwntogethertest_internal-cavity-polyhedron\n  throwntogethertest_nullspace-difference\n\n  # z-fighting different on different machines\n  throwntogethertest_issue1803\n  previewtest_issue1165\n  previewtest_issue1215\n  throwntogethertest_issue1089\n  throwntogethertest_issue1215\n\n  # This test won't render anything meaningful in throwntogether mode\n  throwntogethertest_minkowski3-erosion\n\n  # The inf/nan tests fail when exporting CSG and rendering that output again\n  # as currently inf/nan is written directly to the CSG file (e.g. r = inf)\n  # which is not valid or even misleading in case a variable inf exists.\n  # FIXME: define export behavior for inf/nan when exporting CSG files\n  # These tests return error code 1.\n  # FIXME: We should have a way of running these and verify the return code\n  csgrendertest_primitive-inf-tests\n  csgrendertest_transform-nan-inf-tests\n\n  # Triggers a floating point accuracy issue causing loaded .csg to\n  # render slightly differently\n  rendertest_nothing-decimal-comma-separated\n  rendertest_import-empty-tests\n  rendertest_empty-shape-tests\n  csgrendertest_issue1258\n\n  # The Apple SW renderer has a bug in the GLSL dFdy() function, used\n  # by GLSL fwidth(), which causes horizonal line artifacts when using\n  # wireframe rendering in preview model.\n  openscad-viewoptions-edges_view-options-tests\n  openscad-viewoptions-axes-scales-edges_view-options-tests\n  openscad-manifold-viewoptions-edges_view-options-tests\n\n  # OpenCSG z fighting\n  previewtest_surface_image\n  throwntogethertest_surface_image\n\n  # CGAL sometimes fail to union minkowski convex decompositions, causing visual differences\n  # in rendering.\n  rendertest_minkowski3-difference-test\n  csgrendertest_minkowski3-difference-test\n  previewtest_minkowski3-difference-test\n\n  # Transparent objects rendered differently on different machines\n  throwntogethertest_offset\n\n  # https://github.com/openscad/openscad/issues/5159\n  rendertest_projection\n  csgrendertest_projection\n\n  # https://github.com/openscad/openscad/issues/5158\n  throwntogethertest_example017\n  rendertest_example017 \n  previewtest_example017\n  \n  # https://github.com/openscad/openscad/issues/4398\n  csgrendertest_logo_and_text\n\n  # https://github.com/openscad/openscad/issues/909\n  amfpreviewtest_polyhedron-single-triangle\n  amfrendertest_bad-stl-tardis\n  amfrendertest_bad-stl-pcbvicebar\n  amfrendertest_bad-stl-wing\n  \n  # We don't repair polygon winding order in CGAL mode\n  # We could perhaps split the test into good+bad polyhedrons\n  # and only disable the bad ones.\n  stlrendertest_polyhedron-tests\n  offrendertest_polyhedron-tests\n  amfrendertest_polyhedron-tests\n  objrendertest_polyhedron-tests\n\n  # When exported from CGAL, the file cannot be re-imported\n  stlrendertest_bad-stl-wing\n  offrendertest_bad-stl-wing\n  objrendertest_bad-stl-wing\n\n  # https://github.com/openscad/openscad/issues/2301\n  rendertest_issue2301\n  previewtest_issue2301\n  csgrendertest_issue2301\n\n  # https://github.com/openscad/openscad/issues/2090\n  rendertest_issue2090\n  previewtest_issue2090\n  throwntogethertest_issue2090\n  csgrendertest_issue2090\n\n  # https://github.com/openscad/openscad/issues/2841\n  rendertest_issue2841\n  previewtest_issue2841\n  csgrendertest_issue2841\n  throwntogethertest_issue2841\n  rendertest_issue2841b\n  previewtest_issue2841b\n  throwntogethertest_issue2841b\n  csgrendertest_issue2841b\n  \n  PROPERTIES DISABLED TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test File Lists in CMake\nDESCRIPTION: Defines and manages lists of test files for different testing scenarios in OpenSCAD. Includes import tests for various formats, render tests, preview tests, and special case handling for color and manifold testing.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND STL_IMPORT_FILES\n  ${TEST_SCAD_DIR}/stl/stl-import-invalidvertex.scad\n  ${TEST_SCAD_DIR}/stl/stl-import-toomanyvertices.scad\n  ${TEST_SCAD_DIR}/stl/stl-import-unparseable.scad\n  # result will not be empty\n  ${TEST_SCAD_DIR}/stl/stl-import-centered.scad\n  ${TEST_SCAD_DIR}/stl/stl-import-not-centered.scad\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Import Tests in CMake for OpenSCAD\nDESCRIPTION: Sets up test files for experimental JSON import functionality and adds a command line test with specific arguments.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_49\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND EXPERIMENTAL_IMPORT_FILES\n  ${TEST_SCAD_DIR}/json/import-json.scad\n  ${TEST_SCAD_DIR}/json/import-json-relative-path.scad\n  )\nadd_cmdline_test(echotest           EXPERIMENTAL OPENSCAD SUFFIX echo FILES ${EXPERIMENTAL_IMPORT_FILES} ARGS --enable=import-function)\n```\n\n----------------------------------------\n\nTITLE: Uploading OpenSCAD Source Package\nDESCRIPTION: SCP command to upload the source package to the OpenSCAD file server.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/release-checklist.txt#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ scp openscad-$VERSION.src.tar.gz openscad@files.openscad.org:www\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Test Disabling in OpenSCAD CMake Configuration\nDESCRIPTION: Disables specific tests based on the running platform (Apple, Unix, Windows). NEF3 broken tests are disabled on Apple and Unix platforms, while Windows has specific tests disabled due to UTF-8 issues and tool dependencies.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\n# Platform specific test disable\nif(APPLE)\n  set_tests_properties(\n    ${NEF3_BROKEN_TESTS}\n    PROPERTIES DISABLED TRUE\n  )\nelseif(UNIX)\n  set_tests_properties(\n    ${NEF3_BROKEN_TESTS}\n    PROPERTIES DISABLED TRUE\n  )\nelseif(WIN32 OR MXECROSS)\n  set_tests_properties(\n    # Known UTF-8 issue on Windows\n    openscad-nonascii_sfære\n    # requires `gs` tool\n    pdfexporttest_centered\n    pdfexporttest_simple-pdf\n    PROPERTIES DISABLED TRUE\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documentation of Export/Import Test Caveats\nDESCRIPTION: Documents caveats related to export and import functionality in OpenSCAD, explaining how non-manifold meshes may be handled differently when exporting, importing, and rendering.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# There are some caveats with export and import, so we need to test a few combinations:\n# 1. It may be possible to export a non-manifold mesh (e.g. malformed polyhedron) due to \n#    no manifoldness checks at export time. This is by design, e.g. to allow users to \n#    troubleshoot externally.\n# 2. It may be possible to import such non-manifolds and preview or render them, but it will\n#    likely fail when trying to construct a data structure requiring manifold objects (e.g. --render=force)\n#\n# This leads to three types of tests:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Camera Test Environment Variables in OpenSCAD Testing\nDESCRIPTION: This section establishes the test paths and image output parameters used for camera position testing in OpenSCAD. It defines the test file locations and configures image size settings for visual comparison tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nset(CAMERA_TEST           \"${TEST_SCAD_DIR}/3D/misc/camera-tests.scad\")\nset(CAMERA_TEST_OFFCENTER \"${TEST_SCAD_DIR}/3D/misc/camera-tests-offcenter.scad\")\nset(CAMERA_TEST_VP        \"${TEST_SCAD_DIR}/3D/misc/camera-vp.scad\")\n# Image output parameters\nadd_cmdline_test(openscad-imgsize          OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS --imgsize 100,100)\nadd_cmdline_test(openscad-imgstretch       OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS --imgsize 500,100)\nadd_cmdline_test(openscad-imgstretch2      OPENSCAD FILES ${CAMERA_TEST} SUFFIX png ARGS --imgsize 100,500)\n# Perspective gimbal cam\nset(IMGSIZE \"--imgsize=500,500\")\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Library Path Configuration\nDESCRIPTION: Commands to set environment variables for library paths on Linux and Mac systems to help find locally built libraries.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/testing.txt#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nLinux: export LD_LIBRARY_PATH=$HOME/lib:$HOME/lib64\nMac: export DYLD_LIBRARY_PATH=$HOME/lib\n```\n\n----------------------------------------\n\nTITLE: Debugging Test Configurations in OpenSCAD CMake\nDESCRIPTION: Adds debug logging for test configurations that can be viewed when CMake is run with the '--log-level DEBUG' option. Lists all available test configurations and their content for debugging purposes.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\n# Use cmake option \"--log-level DEBUG\" during top level config to see this\nmessage(DEBUG \"Available test configurations: ${TEST_CONFIGS}\")\nforeach(CONF ${TEST_CONFIGS})\n  list(SORT ${CONF}_TEST_CONFIG)\n  message(DEBUG \"${CONF}: ${${CONF}_TEST_CONFIG}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Documentation of OpenSCAD Test Types\nDESCRIPTION: Documents the various types of tests used in OpenSCAD testing, explaining what each test type does and how it operates on OpenSCAD files.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# Types of tests:\n# o echotest: Just record console output\n# o dumptest: Export .csg\n# o rendertest: Export to PNG using --render\n# o renderforcetest: Export to PNG using --render=force\n# o rendermanifoldtest: Export to PNG using --render with --backend=manifold\n# o renderforcemanifoldtest: Export to PNG using --render=force with --backend=manifold\n# o previewtest: Export to PNG using OpenCSG\n# o previewmanifoldtest: Export to PNG in preview mode with --backend=manifold\n# o throwntogethertest: Export to PNG using the Throwntogether renderer\n# o csgrendertest: 1) Export to .csg, 2) import .csg and export to PNG (--render)\n# o monotonerendertest: Same as rendertest but with the \"Monotone\" color scheme\n# o stlpreviewtest: Export to STL, Re-import and render to PNG (--render)\n# o stlrendertest: Export to STL, Re-import and render to PNG (--render=force)\n# o offpreviewtest: Export to OFF, Re-import and render to PNG (--render)\n# o offrendertest: Export to STL, Re-import and render to PNG (--render=force)\n# o dxfrendertest: Export to DXF, Re-import and render to PNG (--render=force)\n#\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Configurations for OpenSCAD Tests\nDESCRIPTION: This snippet sets platform-specific configurations, including workarounds for known bugs on certain architectures. It also determines the path for the OpenSCAD executable based on the platform.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif ( ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"ppc\")\n  message(STATUS \"Workaround PPC bug https://bugs.freedesktop.org/show_bug.cgi?id=42540\")\n  list(APPEND CTEST_ENVIRONMENT \"GALLIUM_DRIVER=softpipe\")\n  list(APPEND CTEST_ENVIRONMENT \"DRAW_USE_LLVM=no\")\nendif()\n\nif ( ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"mips\")\n  message(STATUS \"Workaround MIPS bug https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=868745\")\n  list(APPEND CTEST_ENVIRONMENT \"GALLIUM_DRIVER=softpipe\")\n  list(APPEND CTEST_ENVIRONMENT \"DRAW_USE_LLVM=no\")\nendif()\n\nif(EXISTS \"$ENV{OPENSCAD_BINARY}\")\n  set(OPENSCAD_BINPATH \"$ENV{OPENSCAD_BINARY}\")\nelseif(APPLE)\n  set(OPENSCAD_BINPATH \"${CBD}/OpenSCAD.app/Contents/MacOS/OpenSCAD\")\nelseif (WIN32 OR MXECROSS)\n  set(OPENSCAD_BINPATH \"${CBD}/openscad.com\")\nelseif(EXISTS \"${CBD}/bin/openscad\")\n  set(OPENSCAD_BINPATH \"${CBD}/bin/openscad\")\nelse()\n  set(OPENSCAD_BINPATH \"${CBD}/openscad\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Order and Adding Sources to Target\nDESCRIPTION: Sets up optional sorting of build files (to prioritize recently modified files) and adds all source and resource files to the OpenSCAD target. Also adds a post-build command for compiling translation files.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nif (SORT_BUILD)\n  # Build the last modified sources first (to fail fast during development)\n  execute_process(\n    COMMAND ../scripts/sort_cmake_filelist.sh \"${Sources}\"\n    OUTPUT_VARIABLE Sources)\nendif()\n\ntarget_sources(OpenSCAD PRIVATE ${Sources} ${RESOURCE_FILES})\nfind_program(SHELL_EXE NAMES sh bash $ENV{SHELL})\nadd_custom_command(TARGET OpenSCAD POST_BUILD\n    COMMAND \"${SHELL_EXE}\"\n    ARGS \"${CMAKE_CURRENT_LIST_DIR}/scripts/translation-make.sh\" \"${SUFFIX_WITH_DASH}\"\n    COMMENT \"Compiling language files\")\n```\n\n----------------------------------------\n\nTITLE: CLI Test Output for OpenSCAD Import Path and Syntax Error Tests\nDESCRIPTION: Sample output from running the test suite in CLI mode. Shows the expected error messages for bad files and successful rendering for good files, demonstrating that file paths are properly resolved and syntax errors are correctly reported with file names and line numbers.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/manual/issue214/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbad-include-synerr.scad\nERROR: Parser error in file \"/res/doug/src/openscad/tests/data/manual/issue214/syntax-error-in-line-2.scad\", line 2: syntax error\n\nCan't parse file 'bad-include-synerr.scad'!\n\nbad-includeX.scad\nWARNING: Can't open import file '\"cube.stl\"'.\nCurrent top level object is empty.\nbad-synerr.scad\nERROR: Parser error in file \"/res/doug/src/openscad/tests/data/manual/issue214/bad-synerr.scad\", line 3: syntax error\n\nCan't parse file 'bad-synerr.scad'!\n\nbad-useX2.scad\nDEPRECATED: Imported file (cube2.stl) found in document root instead of relative to the importing module. This behavior is deprecated\ngood-include2.scad\ngood-includeX2.scad\ngood-use2.scad\ngood-useX.scad\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-MSVC Dependencies for OpenSCAD\nDESCRIPTION: Sets up dependencies for non-MSVC builds (Linux, macOS, etc.), including module paths for MXE cross-compilation, Eigen, Boost, HarfBuzz, FontConfig and other core libraries.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake/Modules\")\n  if(MXECROSS)\n    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake/Modules/MXE\")\n  endif()\n\n  if(NOT \"$ENV{OPENSCAD_LIBRARIES}\" STREQUAL \"\")\n    list(APPEND CMAKE_PREFIX_PATH \"$ENV{OPENSCAD_LIBRARIES}\")\n    if(APPLE)\n      list(APPEND CMAKE_IGNORE_PREFIX_PATH \"/opt/homebrew\") # Homebrew Apple Silicon\n      list(APPEND CMAKE_IGNORE_PREFIX_PATH \"/usr/local\")    # Homebrew Intel\n    endif()\n  endif()\n\n  find_package(Eigen3 REQUIRED)\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${EIGEN3_INCLUDE_DIR})\n  target_compile_definitions(OpenSCAD PRIVATE EIGEN_DONT_ALIGN)\n  message(STATUS \"Eigen: ${Eigen3_VERSION}\")\n\n  find_package(Boost 1.61 REQUIRED COMPONENTS system regex program_options)\n  message(STATUS \"Boost: ${Boost_VERSION}\")\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${Boost_INCLUDE_DIRS})\n  target_link_libraries(OpenSCAD PRIVATE ${Boost_LIBRARIES})\n  target_compile_definitions(OpenSCAD PRIVATE BOOST_DLL_USE_STD_FS)\n\n  find_package(HarfBuzz 0.9.19 REQUIRED QUIET)\n  message(STATUS \"Harfbuzz: ${HARFBUZZ_VERSION}\")\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${HARFBUZZ_INCLUDE_DIRS})\n  target_link_libraries(OpenSCAD PRIVATE ${HARFBUZZ_LIBRARIES})\n\n  find_package(FontConfig 2.8.0 REQUIRED QUIET)\n  message(STATUS \"Fontconfig: ${FONTCONFIG_VERSION}\")\n  target_link_libraries(OpenSCAD PRIVATE ${FONTCONFIG_LIBRARIES})\n\n  find_package(GLIB2 2.26 REQUIRED QUIET)\n  message(STATUS \"Glib: ${GLIB2_VERSION}\")\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${GLIB2_INCLUDE_DIRS})\n  target_link_libraries(OpenSCAD PRIVATE ${GLIB2_LIBRARIES})\n\n  find_package(DoubleConversion REQUIRED QUIET)\n  target_link_libraries(OpenSCAD PRIVATE ${DoubleConversion_LIBRARIES})\n\n  find_graphics()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Package Installation for Windows in OpenSCAD CMake\nDESCRIPTION: Sets up packaging configuration for Windows to install test files when building with MXE cross-compilation and the EXPERIMENTAL flag enabled. Creates a separate component for tests and installs directories, files, and utilities needed for test execution.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\n# Package Tests with Windows (.zip archive only)\nif(MXECROSS AND EXPERIMENTAL)\n  set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\n\n  include(CPackComponent)\n  cpack_add_component(Tests ARCHIVE_FILE OpenSCAD-Tests-${CPACK_PACKAGE_VERSION})\n\n  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/\n    DESTINATION tests\n    USE_SOURCE_PERMISSIONS\n    COMPONENT Tests\n    PATTERN \".git*\" EXCLUDE\n    PATTERN \"OpenSCAD_Test_Console.py\" EXCLUDE\n    PATTERN \"WinReadme.txt\" EXCLUDE\n    PATTERN \"mingw_convert_ctest.py\" EXCLUDE\n    PATTERN \"mingwcon.bat\" EXCLUDE\n  )\n  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/\n    DESTINATION tests-build\n    USE_SOURCE_PERMISSIONS\n    COMPONENT Tests\n    PATTERN \"venv\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"CMakeLists.txt\" EXCLUDE\n    PATTERN \"cmake_install.cmake\" EXCLUDE\n  )\n\n  # Move files to top project dir for visibility\n  install(FILES OpenSCAD_Test_Console.py DESTINATION . COMPONENT Tests)\n  install(FILES WinReadme.txt DESTINATION . COMPONENT Tests RENAME \"Windows_Test_Readme.txt\")\n  # Move files to tests-build dir\n  install(FILES mingw_convert_ctest.py DESTINATION tests-build COMPONENT Tests)\n  install(FILES mingwcon.bat DESTINATION tests-build COMPONENT Tests)\n\n  file(GENERATE OUTPUT mingw_cross_info.py CONTENT\n\"# created automatically during packaging by cmake from within linux\nlinux_abs_basedir='${CMAKE_SOURCE_DIR}'\nlinux_abs_builddir='${CMAKE_BINARY_DIR}'\nlinux_python='${Python3_EXECUTABLE}'\nlinux_convert='${IMAGE_COMPARE_EXE}'\nwin_installdir='OpenSCAD-Tests-${CPACK_PACKAGE_VERSION}'\n\" NEWLINE_STYLE WIN32)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test File Sets for Export/Import Testing in OpenSCAD\nDESCRIPTION: Defines several sets of test files for export/import testing in OpenSCAD. Includes simple 2D and 3D files, non-manifold polyhedrons, and configures file groups for render and preview tests with appropriate exclusions for non-manifold objects.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\n# Trivial Export/Import files: Sanity-checks bidirectional file format import/export\nset(SIMPLE_EXPORT_IMPORT_2D_FILES ${TEST_SCAD_DIR}/misc/square10.scad)\nset(SIMPLE_EXPORT_IMPORT_3D_FILES ${TEST_SCAD_DIR}/misc/cube10.scad)\nset(SIMPLE_EXPORT_IMPORT_NON_MANIFOLD ${TEST_SCAD_DIR}/3D/misc/polyhedron-single-triangle.scad)\n\nset(EXPORT_IMPORT_2D_RENDER_FILES ${SIMPLE_EXPORT_IMPORT_2D_TESTS} ${FILES_2D})\n\nset(EXPORT_IMPORT_3D_PREVIEW_FILES ${SIMPLE_EXPORT_IMPORT_NON_MANIFOLD} ${SIMPLE_EXPORT_IMPORT_3D_FILES})\nset(EXPORT_IMPORT_3D_RENDER_FILES ${SIMPLE_EXPORT_IMPORT_3D_FILES} ${EXPORT_IMPORT_3D_FILES})\nlist(REMOVE_ITEM EXPORT_IMPORT_3D_RENDER_FILES\n  # Non-manifold polyhedrons can never be rendered\n  ${TEST_SCAD_DIR}/misc/nonmanifold-polyhedron.scad\n)\nset(EXPORT_IMPORT_3D_RENDERMANIFOLD_FILES ${EXPORT_IMPORT_3D_RENDER_FILES})\n```\n\n----------------------------------------\n\nTITLE: Updating Missing Submodule in OpenSCAD\nDESCRIPTION: Shell command to update a submodule file with a larger sphere size to test dependency tracking across directories.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho \"module missingsub() { sphere(20); }\" >  subdir/missingsub.scad\n```\n\n----------------------------------------\n\nTITLE: Configuring GLAD Dynamic Loading in CMake\nDESCRIPTION: Links to dynamic library loading capabilities when using GLAD instead of GLEW for OpenGL loading.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_GLAD)\n  target_link_libraries(OpenSCAD PRIVATE ${CMAKE_DL_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Configurations\nDESCRIPTION: Configures test settings for heavy tests that take more than 5 seconds to run on modern hardware. Includes cache clearing and specific test file configurations.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(CONFIG $CACHE{TEST_CONFIGS})\n  unset(${CONFIG}_TEST_CONFIG CACHE)\nendforeach()\n\nset_test_config(Heavy FILES\n  csgrendertest_issue267-normalization-crash\n  rendertest_issue267-normalization-crash\n)\n```\n\n----------------------------------------\n\nTITLE: Adding CSG Term and Echo Tests\nDESCRIPTION: Adds command-line tests for CSG term output and echo functionality, testing all expressions, functions, and modules in OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cmdline_test(csgtermtest      OPENSCAD SUFFIX term FILES\n  ${TEST_SCAD_DIR}/misc/allexpressions.scad\n  ${TEST_SCAD_DIR}/misc/allfunctions.scad\n  ${TEST_SCAD_DIR}/misc/allmodules.scad\n)\n\nadd_cmdline_test(echotest         OPENSCAD SUFFIX echo FILES ${ECHO_FILES})\n# trace-usermodule-parameters is on by default,\n# but can generate very long outputs and potentially\n# unstable outputs, when combined with recursive tests.\nadd_cmdline_test(echotest         OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/misc/recursion-test-vector.scad ARGS --trace-usermodule-parameters=false)\n\nadd_cmdline_test(echostdiotest    OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/misc/echo-tests.scad STDIO EXPECTEDDIR echotest ARGS --export-format echo)\nadd_cmdline_test(echotest         OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/misc/builtin-invalid-range-test.scad ARGS --check-parameter-ranges=on)\n\n# This test is quiet to speed up the test and to have a stable and reproducable output\nadd_cmdline_test(echotest         OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/issues/issue4172-echo-vector-stack-exhaust.scad ARGS --quiet --trace-usermodule-parameters=false)\n```\n\n----------------------------------------\n\nTITLE: Creating Missing Submodule in OpenSCAD\nDESCRIPTION: Shell command to create a module file in a subdirectory that defines a missingsub() function which renders a sphere.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho \"module missingsub() { sphere(10); }\" >  subdir/missingsub.scad\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Support for OpenSCAD\nDESCRIPTION: Sets up optional Python integration, which requires both Python and Nettle cryptographic library. Creates a symlink for the Python-enabled version of OpenSCAD.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_PYTHON)\n  find_package(Python REQUIRED COMPONENTS Interpreter Development)\n  find_package(Nettle 3.4)\n  if(NOT Nettle_FOUND)\n    message(WARNING \"Nettle not found, disabling python support.\")\n    set(ENABLE_PYTHON OFF CACHE BOOL \"\" FORCE)\n  else()\n    message(STATUS \"Python ${Python_VERSION} enabled, using Nettle ${Nettle_VERSION}\")\n    target_include_directories(OpenSCAD PRIVATE ${Python_INCLUDE_DIRS})\n    target_link_libraries(OpenSCAD PRIVATE ${Python_LIBRARIES})\n    target_include_directories(OpenSCAD PRIVATE ${Nettle_INCLUDE_DIRS})\n    target_link_libraries(OpenSCAD PRIVATE ${Nettle_LIBRARIES})\n    add_custom_target(OpenSCADPython ALL COMMAND ${CMAKE_COMMAND} -E create_symlink openscad${SUFFIX_WITH_DASH} \"openscad-python\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Fixed Manifold Bugs\nDESCRIPTION: Re-enables testing for specific bugs that were fixed by the manifold backend, ensuring these issues continue to be tested when using the manifold rendering backend.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset_test_config(Bugs FILES\n  # https://github.com/openscad/openscad/issues/3567\n  rendertest_linear_extrude-scale-zero-tests\n  csgrendertest_linear_extrude-scale-zero-tests\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flex and Bison Targets\nDESCRIPTION: Configures Flex and Bison targets for lexer and parser generation, including both main OpenSCAD parser and comment parser.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nFLEX_TARGET(openscad_lexer src/core/lexer.l ${OPENSCAD_LIB_OUTPUT_DIR}/lexer.cxx DEFINES_FILE ${OPENSCAD_LIB_OUTPUT_DIR}/lexer.hxx COMPILE_FLAGS ${WINCOMPAT})\nBISON_TARGET(openscad_parser src/core/parser.y ${OPENSCAD_LIB_OUTPUT_DIR}/parser.cxx DEFINES_FILE ${OPENSCAD_LIB_OUTPUT_DIR}/parser.hxx COMPILE_FLAGS \"-d -p parser\")\nADD_FLEX_BISON_DEPENDENCY(openscad_lexer openscad_parser)\n```\n\n----------------------------------------\n\nTITLE: Creating Missing Module in OpenSCAD\nDESCRIPTION: Shell command to create a basic OpenSCAD module file that defines a missing() function which renders a sphere.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"module missing() { sphere(10); }\" >  missing.scad\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snapshot Builds and Platform-Specific Resources\nDESCRIPTION: Configures snapshot (nightly) builds with special suffixes and adds platform-specific resources for Windows, macOS, and other platforms. This ensures proper application packaging for each target platform.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nif (SNAPSHOT)\n  set(SNAPSHOT_SUFFIX \"-nightly\")\n  set(SNAPSHOT_NAME_SUFFIX \" (Nightly)\")\n  target_compile_definitions(OpenSCAD PRIVATE OPENSCAD_SNAPSHOT)\nendif()\nset(WINDOWS_RESOURCE_PATH ${CMAKE_BINARY_DIR}/openscad_win32${SNAPSHOT_SUFFIX}.rc)\nset(MACOSX_BUNDLE_ICON_FILE icon${SNAPSHOT_SUFFIX}.icns)\n\nif (APPLE)\n  list(APPEND RESOURCE_FILES ${RESOURCE_DIR}/mac.qrc)\n  list(APPEND RESOURCE_FILES ${RESOURCE_DIR}/icons/${MACOSX_BUNDLE_ICON_FILE})\nelseif(WIN32)\n  list(APPEND RESOURCE_FILES ${WINDOWS_RESOURCE_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Tags from Tests in OpenSCAD Test Framework\nDESCRIPTION: Function to remove a specific configuration tag from test files. This allows for modifying test configurations without recreating them.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(remove_test_config CONFIG)\n  cmake_parse_arguments(TESTCFG \"\" \"\" \"FILES\" ${ARGN})\n  list(APPEND FULLNAMES ${TESTCFG_FILES})\n  # Remove config from fullnames\n  list(REMOVE_ITEM ${CONFIG}_TEST_CONFIG ${FULLNAMES})\n  # Export to parent scope\n  set(${CONFIG}_TEST_CONFIG ${${CONFIG}_TEST_CONFIG} CACHE INTERNAL \"\")\nendfunction(remove_test_config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Comparison for OpenSCAD Tests\nDESCRIPTION: This snippet sets up the image comparison tool for the test suite. It either uses a built-in Python script or ImageMagick, depending on the configuration. It also handles the creation of a virtual environment for Python if necessary.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_IMAGE_COMPARE_PY)\n  set(VENV_DIR \"${CCBD}/venv\")\n  message(STATUS \"Preparing image_compare.py for test suite image comparison: ${VENV_DIR}\")\n\n  find_path(VENV_BIN_PATH activate PATHS \"${VENV_DIR}/bin\" \"${VENV_DIR}/Scripts\" NO_DEFAULT_PATH NO_CACHE)\n  if(WIN32)\n    set(IMAGE_COMPARE_EXE \"${VENV_BIN_PATH}/python.exe\")\n  else()\n    set(IMAGE_COMPARE_EXE \"${VENV_BIN_PATH}/python\")\n  endif()\n  # ... (additional venv setup and library checks)\nelse()\n  # Imagemagick\n  find_package(ImageMagick COMPONENTS convert)\n  if(ImageMagick_convert_FOUND)\n    # ... (ImageMagick configuration)\n  else()\n    message(STATUS \"Couldn't find imagemagick 'convert' program\")\n    set(DIFFPNG 1)\n  endif()\n  if (${DIFFPNG})\n    set(IMAGE_COMPARE_EXE ${CCBD}/diffpng)\n    set(COMPARATOR \"--comparator=diffpng\")\n    add_executable(diffpng diffpng.cpp ${CSD}/src/ext/lodepng/lodepng.cpp)\n    target_include_directories(diffpng PRIVATE ${CSD}/src/ext/lodepng)\n    message(STATUS \"using diffpng for image comparison\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Amiri Font Configuration YAML\nDESCRIPTION: YAML configuration defining metadata for the Amiri Arabic typeface including designer information, source URL, license type and descriptive text about the font's origins and purpose.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/ttf/amiri-0.106/README.txt#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndesigner: Khaled Hosny\nurl: http://amirifont.org\nlicense: OFL\ndescription: Amiri is a classical Arabic typeface in Naskh style for\ntypesetting books and other running text. Its design is a revival of the\nbeautiful typeface pioneered in early 20th century by Bulaq Press in Cairo,\nalso known as Amiria Press, after which the font is named.\n```\n\n----------------------------------------\n\nTITLE: Setting OpenSCAD Installation Directories for Different Platforms\nDESCRIPTION: Configures the installation directories based on the target platform. On Windows, files are installed in the current directory, while on other platforms they use standard installation paths defined by CMake variables.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  set(OPENSCAD_BINDIR \".\")\n  set(OPENSCAD_INSTALL_RESOURCEDIR \".\")\nelse()\n  set(OPENSCAD_BINDIR ${CMAKE_INSTALL_BINDIR})\n  set(OPENSCAD_INSTALL_RESOURCEDIR ${CMAKE_INSTALL_DATAROOTDIR}/openscad${SUFFIX_WITH_DASH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Configurations in OpenSCAD Test Framework\nDESCRIPTION: Function to get a list of configurations that apply to a specific test case. It checks each registered configuration to see if the test is included.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(get_test_config TESTNAME OUTVAR)\n  unset(CONFIGS)\n  foreach(CONFIG ${TEST_CONFIGS})\n    list(FIND ${CONFIG}_TEST_CONFIG ${TESTNAME} IDX)\n    if (IDX GREATER -1)\n      list(APPEND CONFIGS ${CONFIG})\n    endif()\n  endforeach()\n  set(${OUTVAR} \"${CONFIGS}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring SpNav Support in CMake\nDESCRIPTION: Configures Space Navigator input device support by finding SpNav package and setting up required includes and libraries.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SpNav QUIET)\nif(SPNAV_FOUND)\n  message(STATUS \"SpNav: found\")\n  set(INPUT_DRIVER_SPNAV_SOURCES src/gui/input/SpaceNavInputDriver.cc)\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${SPNAV_INCLUDE_DIR})\n  target_link_libraries(OpenSCAD PRIVATE ${SPNAV_LIBRARY})\n  target_compile_definitions(OpenSCAD PRIVATE ENABLE_SPNAV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Version Release History Table\nDESCRIPTION: A table showing Python release history from version 0.9.0 through 2.2+, including release derivation, year, owner, and GPL compatibility status.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/Python-LICENSE.txt#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    Release         Derived     Year        Owner       GPL-\n                    from                                compatible? (1)\n\n    0.9.0 thru 1.2              1991-1995   CWI         yes\n    1.3 thru 1.5.2  1.2         1995-1999   CNRI        yes\n    1.6             1.5.2       2000        CNRI        no\n    2.0             1.6         2000        BeOpen.com  no\n    1.6.1           1.6         2001        CNRI        yes (2)\n    2.1             2.0+1.6.1   2001        PSF         no\n    2.0.1           2.0+1.6.1   2001        PSF         yes\n    2.1.1           2.1+2.0.1   2001        PSF         yes\n    2.1.2           2.1.1       2002        PSF         yes\n    2.1.3           2.1.2       2002        PSF         yes\n    2.2 and above   2.1.1       2001-now    PSF         yes\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Settings for OpenSCAD Package Creation\nDESCRIPTION: Sets up common CPack configuration properties for creating distributable packages. This includes package metadata, description, and vendor information that will be used across all packaging formats.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_50\n\nLANGUAGE: CMake\nCODE:\n```\n# Packaging: CPACK_* settings should be configured before `include(CPack)`\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_PACKAGE_NAME \"OpenSCAD\")\nset(CPACK_PACKAGE_VENDOR \"The OpenSCAD Developers\")\nset(CPACK_PACKAGE_VERSION \"${OPENSCAD_VERSION}\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"The Programmer's Solid 3D CAD Modeler\")\n```\n\n----------------------------------------\n\nTITLE: Testing Colorscheme Options in OpenSCAD\nDESCRIPTION: This section tests various colorscheme options in OpenSCAD including Cornfield, Metallic, Sunset, Starnight, Monotone, and ClearSky. Tests verify that each colorscheme correctly affects the visual rendering of models.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Colorscheme tests\n#\nset(LOGO_EXAMPLE ${EXAMPLES_DIR}/Basics/logo.scad)\nset(CSG_EXAMPLE  ${EXAMPLES_DIR}/Basics/CSG.scad)\nadd_cmdline_test(openscad-colorscheme-cornfield       OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=Cornfield)\nadd_cmdline_test(openscad-colorscheme-metallic        OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=Metallic)\nadd_cmdline_test(openscad-colorscheme-sunset          OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=Sunset)\nadd_cmdline_test(openscad-colorscheme-starnight       OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=Starnight)\nadd_cmdline_test(openscad-colorscheme-monotone        OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=Monotone)\nadd_cmdline_test(openscad-colorscheme-clearsky        OPENSCAD FILES ${LOGO_EXAMPLE} SUFFIX png ARGS --colorscheme=ClearSky)\nadd_cmdline_test(openscad-colorscheme-metallic-render OPENSCAD FILES ${CSG_EXAMPLE}  SUFFIX png ARGS --colorscheme=Metallic --render)\n```\n\n----------------------------------------\n\nTITLE: Finding Graphics Libraries for OpenSCAD in CMake\nDESCRIPTION: A macro that configures graphics dependencies for OpenSCAD. It handles NULLGL option, OpenCSG (built-in or external), OpenGL, and GL wrangler libraries (GLEW or GLAD).\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(find_graphics)\n  # NULLGL - Allow us to build without OpenGL(TM). run 'cmake .. -DNULLGL=1'\n  # Most tests will fail, but it can be used for testing/experiments\n  if(NULLGL)\n    target_compile_definitions(OpenSCAD PRIVATE NULLGL)\n  else()\n\n    set(OPENSCAD_UNITY_BUILD ${CMAKE_UNITY_BUILD})\n    set(CMAKE_UNITY_BUILD OFF)\n    if(NOT USE_BUILTIN_OPENCSG)\n      find_package(OpenCSG REQUIRED QUIET)\n      target_link_libraries(OpenSCAD PRIVATE ${OPENCSG_LIBRARY})\n      message(STATUS \"OpenCSG: ${OPENCSG_VERSION_STRING}\")\n      if(MSVC)\n        find_path(OPENCSG_INCLUDE_DIRS opencsg/opencsg.h)\n        target_include_directories(OpenSCAD SYSTEM PRIVATE \"${OPENCSG_INCLUDE_DIRS}/opencsg\")\n      else()\n        find_path(OPENCSG_INCLUDE_DIRS opencsg.h)\n        target_include_directories(OpenSCAD SYSTEM PRIVATE ${OPENCSG_INCLUDE_DIRS})\n      endif()\n    else()\n      include(\"submodules/CMakeLists-OpenCSG.txt\")\n      target_link_libraries(OpenSCAD PRIVATE OpenCSG)\n      message(STATUS \"OpenCSG submodule: ${OPENCSG_VERSION_STRING}\")\n    endif(NOT USE_BUILTIN_OPENCSG)\n    set(CMAKE_UNITY_BUILD ${OPENSCAD_UNITY_BUILD})\n\n    target_compile_definitions(OpenSCAD PRIVATE ENABLE_OPENCSG)\n\n    if (${OPENCSG_VERSION_STRING} VERSION_LESS \"1.6.0\")\n      set(OPENCSG_GLEW ON)\n      target_compile_definitions(OpenSCAD PRIVATE OPENCSG_GLEW)\n    endif()\n\n    if (NOT USE_GLAD AND NOT USE_GLEW)\n      if (OPENCSG_GLEW)\n        set(USE_GLEW ON)\n        set(WRANGLER \"glew\")\n      else()\n\tset(USE_GLAD ON)\n        set(WRANGLER \"GLAD\")\n      endif()\n      message(STATUS \"USE_GLAD/USE_GLEW not specified: Defaulting to ${WRANGLER}\")\n    endif()\n\n    if (USE_GLEW OR OPENCSG_GLEW)\n      find_package(GLEW REQUIRED QUIET)\n      message(STATUS \"GLEW: ${GLEW_VERSION}\")\n      target_link_libraries(OpenSCAD PRIVATE GLEW::glew)\n      set(GLEW_SOURCES src/glview/glew-utils.cc)\n    endif()\n\n    find_package(OpenGL REQUIRED QUIET)\n    target_link_libraries(OpenSCAD PRIVATE ${OPENGL_LIBRARIES})\n    message(STATUS \"OpenGL: ${OPENGL_LIBRARIES}\")\n  endif()\nendmacro(find_graphics)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Dependencies for OpenSCAD\nDESCRIPTION: Sets up specific configuration options and dependencies for Microsoft Visual C++ compiler builds, including Flex lexer options, Eigen, Boost, HarfBuzz, FontConfig, GLib and other dependencies.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n  # Flex lexer options\n  set(WINCOMPAT \"--wincompat --nounistd\")\n  target_compile_definitions(OpenSCAD PRIVATE _USE_MATH_DEFINES)\n\n  find_package(Eigen3 CONFIG REQUIRED)\n  target_link_libraries(OpenSCAD PRIVATE Eigen3::Eigen)\n  message(STATUS \"Eigen: ${Eigen3_VERSION}\")\n\n  set(Boost_USE_STATIC_LIBS TRUE)\n  find_package(Boost 1.61 REQUIRED COMPONENTS system regex program_options)\n  message(STATUS \"Boost: ${Boost_VERSION}\")\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${Boost_INCLUDE_DIRS})\n  target_link_libraries(OpenSCAD PRIVATE ${Boost_LIBRARIES})\n  target_compile_definitions(OpenSCAD PRIVATE BOOST_DLL_USE_STD_FS)\n\n  find_package(harfbuzz CONFIG REQUIRED)\n  find_path(HARFBUZZ_INCLUDE_DIRS harfbuzz)\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${HARFBUZZ_INCLUDE_DIRS}/harfbuzz)\n  target_link_libraries(OpenSCAD PRIVATE harfbuzz::harfbuzz)\n\n  find_package(unofficial-fontconfig CONFIG REQUIRED)\n  target_link_libraries(OpenSCAD PRIVATE unofficial::fontconfig::fontconfig)\n\n  find_package(unofficial-glib CONFIG REQUIRED)\n  target_include_directories(OpenSCAD SYSTEM PRIVATE ${GLIB2_INCLUDE_DIRS})\n  target_link_libraries(OpenSCAD PRIVATE unofficial::glib::gio unofficial::glib::glib unofficial::glib::gmodule unofficial::glib::gobject)\n\n  find_package(double-conversion CONFIG REQUIRED)\n  target_link_libraries(OpenSCAD PRIVATE double-conversion::double-conversion)\n\n  find_library(GETTEXT_LIBRARY libintl)\n  target_link_libraries(OpenSCAD PRIVATE ${GETTEXT_LIBRARY})\n\n  # call before setting local CMAKE_MODULE_PATH so we use VCPKG version of FindGLEW\n  find_graphics()\n\n  # needed for QtQScintilla, maybe others\n  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake/Modules\")\n```\n\n----------------------------------------\n\nTITLE: Empty for() Loop Handling in OpenSCAD\nDESCRIPTION: Shows how empty for loops are now handled - they are not evaluated at all, preventing potential errors or unexpected behavior.\nSOURCE: https://github.com/openscad/openscad/blob/master/doc/visitor-changes.txt#2025-04-12_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\nfor () echo(i)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Package Settings with NSIS\nDESCRIPTION: Sets up Windows-specific packaging configuration when cross-compiling with MXE. This configures the NSIS installer with appropriate file associations, install directory settings, and custom install/uninstall commands.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_51\n\nLANGUAGE: CMake\nCODE:\n```\nif(MXECROSS)\n  set(CPACK_GENERATOR ZIP;NSIS)\n  set(CPACK_SYSTEM_NAME ${PACKAGE_ARCH})\n  set(CPACK_PACKAGE_EXECUTABLES \"openscad;${CPACK_PACKAGE_NAME}${SNAPSHOT_NAME_SUFFIX}\")\n  set(CPACK_PACKAGE_INSTALL_DIRECTORY \"${CPACK_PACKAGE_NAME}${SNAPSHOT_NAME_SUFFIX}\")\n  set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY \"${CPACK_PACKAGE_NAME}${SNAPSHOT_NAME_SUFFIX}\")\n  if(\"${CMAKE_VERSION}\" VERSION_GREATER_EQUAL \"3.22\")\n    set(CPACK_NSIS_IGNORE_LICENSE_PAGE ON)\n  else()\n    message(FATAL_ERROR \"CPACK_NSIS_IGNORE_LICENSE_PAGE requires cmake 3.22\")\n  endif()\n  set(CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS \"\\\n    !include \\\\\\\"FileFunc.nsh\\\\\\\"\\n\\\n    !include \\\\\\\"${CMAKE_SOURCE_DIR}/cmake/nsis/mingw-file-association.nsh\\\\\\\"\\\n  \")\n  set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"\\\n    !include \\\\\\\"${CMAKE_BINARY_DIR}/nsis-extra-install-commands.nsh\\\\\\\"\\\n  \")\n  set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"\\\n    !include \\\\\\\"${CMAKE_BINARY_DIR}/nsis-extra-uninstall-commands.nsh\\\\\\\"\\\n  \")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Core Source Files for OpenSCAD in CMake\nDESCRIPTION: This snippet lists all the core source files for the OpenSCAD project, including files for AST processing, geometry handling, file I/O, and various utilities. It also conditionally includes Python-related sources if Python support is enabled.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE_SOURCES\n  src/Feature.cc\n  src/FontCache.cc\n  src/LibraryInfo.cc\n  src/RenderStatistic.cc\n  src/core/AST.cc\n  src/core/Arguments.cc\n  src/core/Assignment.cc\n  # ... (many more source files listed)\n  ${LIB3MF_SOURCES}\n  ${PLATFORM_SOURCES}\n  ${FLEX_openscad_lexer_OUTPUTS}\n  ${BISON_openscad_parser_OUTPUTS}\n  ${FLEX_comment_lexer_OUTPUTS}\n  ${BISON_comment_parser_OUTPUTS})\nif(ENABLE_PYTHON)\n\tlist(APPEND CORE_SOURCES\n\t\t    src/python/pymod.cc\n\t\t    src/python/pyopenscad.cc \n\t\t    src/python/pyfunctions.cc )\n\ttarget_compile_definitions(OpenSCAD PRIVATE ENABLE_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Management Functions for OpenSCAD\nDESCRIPTION: This snippet defines a function for generating full test names based on the test command and source filename. It's used to create unique identifiers for each test in the suite.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(get_test_fullname TESTCMD FILENAME FULLNAME)\n  get_filename_component(TESTCMD_NAME ${TESTCMD} NAME_WE)\n  get_filename_component(TESTNAME ${FILENAME} NAME_WE)\n  string(REPLACE \" \" \"_\" TESTNAME ${TESTNAME})\n  set(${FULLNAME} ${TESTCMD_NAME}_${TESTNAME})\n  set(${FULLNAME} ${${FULLNAME}} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Generating OpenGL Extension Loading Code with GLAD for OpenSCAD\nDESCRIPTION: This command uses GLAD to generate OpenGL extension loading code for the OpenSCAD project. It specifies multiple OpenGL APIs, versions, and extensions to be included. The output is configured for C language with specific options like header-only and loader.\nSOURCE: https://github.com/openscad/openscad/blob/master/src/ext/glad/README.md#2025-04-12_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m glad --merge --api='gl:compatibility=4.6,gles2=3.2,egl=1.5,wgl=1.0,glx=1.4' \\\n  --extensions='GL_ARB_framebuffer_object,GL_EXT_framebuffer_object,GL_EXT_packed_depth_stencil,GL_ARB_occlusion_query,GL_NV_occlusion_query,GL_ARB_texture_cube_map,GL_ARB_texture_env_dot3,GL_EXT_depth_bounds_test,GL_ARB_occlusion_query2,WGL_ARB_create_context,WGL_ARB_create_context_profile,EGL_EXT_device_enumeration,EGL_EXT_platform_base,EGL_EXT_platform_device,GLX_ARB_create_context,GLX_ARB_create_context_profile' \\\n  --out-path=out c --alias --header-only --loader\n```\n\n----------------------------------------\n\nTITLE: Creating OpenCSG Object Library in CMake\nDESCRIPTION: Creates an object library named OpenCSGObjects from the previously defined source files. This approach allows the object files to be included in other targets without being compiled multiple times. It also configures the necessary include directories.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists-OpenCSG.txt#2025-04-12_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(OpenCSGObjects OBJECT ${OPENCSG_SOURCES})\ntarget_include_directories(OpenCSGObjects PRIVATE OpenCSG submodules/OpenCSG submodules/OpenCSG/include)\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Source Files for OpenSCAD\nDESCRIPTION: Comprehensive list of GUI-related source files used in the OpenSCAD application. Includes components for the main window, editors, parameter widgets, export dialogs, and various UI utilities.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nset(GUI_SOURCES\n  ${GUI_SOURCES}\n  src/openscad_gui.cc\n  src/gui/AutoUpdater.cc\n  src/gui/CGALWorker.cc\n  src/gui/ViewportControl.cc\n  src/gui/Console.cc\n  src/gui/Dock.cc\n  src/gui/Editor.cc\n  src/gui/ErrorLog.cc\n  src/gui/EventFilter.h\n  src/gui/Export3mfDialog.cc\n  src/gui/ExportPdfDialog.cc\n  src/gui/OctoPrintApiKeyDialog.cc\n  src/gui/FontListDialog.cc\n  src/gui/FontListTableView.cc\n  src/gui/InitConfigurator.cc\n  src/gui/ImportUtils.cc\n  src/gui/LaunchingScreen.cc\n  src/gui/LibraryInfoDialog.cc\n  src/gui/MainWindow.cc\n  src/gui/Measurement.cc\n  src/gui/Animate.cc\n  src/gui/FontList.cc\n  src/gui/MouseSelector.cc\n  src/gui/OctoPrint.cc\n  src/gui/OpenCSGWarningDialog.cc\n  src/gui/OpenSCADApp.cc\n  src/gui/Preferences.cc\n  src/gui/PrintInitDialog.cc\n  src/gui/PrintService.cc\n  src/gui/ExternalToolInterface.cc\n  src/gui/ProgressWidget.cc\n  src/gui/RubberBandManager.cc\n  src/gui/QGLView.cc\n  src/gui/QGLView2.cc\n  src/gui/QSettingsCached.cc\n  src/gui/QWordSearchField.cc\n  src/gui/ScadApi.cc\n  src/gui/ScadLexer.cc\n  src/gui/ScintillaEditor.cc\n  src/gui/SettingsWriter.cc\n  src/gui/TabManager.cc\n  src/gui/UIUtils.cc\n  src/gui/WindowManager.cc\n  src/gui/IgnoreWheelWhenNotFocused.cc\n  src/gui/input/AxisConfigWidget.cc\n  src/gui/input/ButtonConfigWidget.cc\n  src/gui/input/InputDriver.cc\n  src/gui/input/InputDriverManager.cc\n  src/gui/input/InputEventMapper.cc\n  src/gui/parameter/GroupWidget.cc\n  src/gui/parameter/ParameterCheckBox.cc\n  src/gui/parameter/ParameterComboBox.cc\n  src/gui/parameter/ParameterSlider.cc\n  src/gui/parameter/ParameterSpinBox.cc\n  src/gui/parameter/ParameterText.cc\n  src/gui/parameter/ParameterVector.cc\n  src/gui/parameter/ParameterVirtualWidget.cc\n  src/gui/parameter/ParameterWidget.cc\n  ${INPUT_DRIVER_SOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking if a Test is 2D in OpenSCAD Test Framework\nDESCRIPTION: Function to determine if a test file is a 2D test by checking if it's included in the ALL_2D_FILES list. This affects how the test is rendered and viewed.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(is_2d FULLNAME RESULT)\n  list(FIND ALL_2D_FILES ${FULLNAME} IDX)\n  if (${IDX} GREATER -1)\n    set(${RESULT} 1 PARENT_SCOPE)\n  else()\n    set(${RESULT} PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Using linear_extrude with scale parameter in OpenSCAD 2013.06\nDESCRIPTION: The linear_extrude function now supports a scale parameter in OpenSCAD 2013.06, allowing scaling during extrusion.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_extrude(height=a, slices=b, twist=c, scale=[x,y])\n```\n\n----------------------------------------\n\nTITLE: Module Cache Debug Output Example\nDESCRIPTION: Example of the debug output showing the memory address of a loaded module file.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFileModule: /path/to/used.scad: 0x103612f70\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI and Headless Build Resources\nDESCRIPTION: Sets up resources differently based on whether the build is headless or includes the GUI. For GUI builds, it includes UI resources, icons, and additional source files needed for the interface.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nset(RESOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/resources)\nif(HEADLESS)\n  target_compile_definitions(OpenSCAD PRIVATE OPENSCAD_NOGUI)\nelse()\n  list(APPEND RESOURCE_FILES\n    ${RESOURCE_DIR}/common.qrc\n    ${RESOURCE_DIR}/icons-chokusen.qrc\n    ${RESOURCE_DIR}/icons-chokusen-dark.qrc\n  )\n  # GUI_UIS for .ui files to be indexed by Qt Creator despite AUTOUIC usage\n  # GUI_HEADERS for .h files to be indexed by Qt Creator despite AUTOUIC usage\n  list(APPEND Sources ${GUI_SOURCES} ${GUI_HEADER_ONLY} ${GUI_UIS} ${GUI_HEADERS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Manifold-specific Tests in OpenSCAD CMake Configuration\nDESCRIPTION: Conditionally disables Manifold-specific tests when the ENABLE_MANIFOLD flag is set. These include tests with z-fighting issues, rendering differences due to unstable triangle order, and specific GitHub issue-related tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_MANIFOLD)\nset_tests_properties(\n  # z-fighting different on different machines\n  previewmanifoldtest_issue1165\n  previewmanifoldtest_issue1215\n\n  # Manifold triangle order not stable, causes transparent\n  # objects to render differently on different machines\n  rendermanifoldtest-different_color-tests\n  rendermanifoldtest-different_hex-colors-tests\n  rendermanifoldtest-different_projection\n\n  # https://github.com/openscad/openscad/issues/909\n  amfrendermanifoldtest_bad-stl-wing\n\n  # https://github.com/openscad/openscad/issues/2841\n  rendermanifoldtest_issue2841b\n  previewmanifoldtest_issue2841b\n\n  # OpenCSG z fighting\n  previewmanifoldtest_surface_image\n\n  # https://github.com/openscad/openscad/issues/5158\n  previewmanifoldtest_example017\n\n  PROPERTIES DISABLED TRUE\n)\nendif (ENABLE_MANIFOLD)\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Return Value in OpenSCAD\nDESCRIPTION: Code modification example for multiplecommon.scad that changes the value returned by the F() function from 20 to 10.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/modulecache-tests/README.txt#2025-04-12_snippet_3\n\nLANGUAGE: openscad\nCODE:\n```\nfunction F() = 20;\nfunction F() = 10;\n```\n\n----------------------------------------\n\nTITLE: Unix Platform Configuration\nDESCRIPTION: Sets up Unix-specific build configuration including EGL and GLX support for OpenGL contexts.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(UNIX)\n  target_compile_definitions(OpenSCAD PRIVATE OPENSCAD_OS=\"Unix\")\n  set(PLATFORM_SOURCES src/io/imageutils-lodepng.cc src/platform/PlatformUtils-posix.cc)\n  if(NOT NULLGL)\n    set(OFFSCREEN_METHOD \"Unix\")\n    if(ENABLE_EGL AND OpenGL_EGL_FOUND)\n      target_compile_definitions(OpenSCAD PRIVATE ENABLE_EGL)\n      set(OFFSCREEN_METHOD \"${OFFSCREEN_METHOD} EGL\")\n      set(PLATFORM_SOURCES ${PLATFORM_SOURCES}\n\tsrc/glview/offscreen-old/OffscreenContextEGL.cc\n        src/glview/OffscreenContextEGL.cc)\n      if (NOT USE_GLAD)\n        target_compile_definitions(OpenSCAD PRIVATE GLEW_EGL)\n      endif()\n      target_link_libraries(OpenSCAD PRIVATE OpenGL::EGL)\n    endif()\n    if(ENABLE_GLX AND OpenGL_GLX_FOUND)\n      target_compile_definitions(OpenSCAD PRIVATE ENABLE_GLX)\n      set(OFFSCREEN_METHOD \"${OFFSCREEN_METHOD} GLX\")\n      set(PLATFORM_SOURCES ${PLATFORM_SOURCES}\n          src/glview/offscreen-old/OffscreenContextGLX.cc\n          src/glview/OffscreenContextGLX.cc)\n      find_package(X11 REQUIRED)\n      target_link_libraries(OpenSCAD PRIVATE X11::X11 ${CMAKE_DL_LIBS})\n    endif()\n    message(STATUS \"Offscreen OpenGL Context - using ${OFFSCREEN_METHOD}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Files for QtCreator in OpenSCAD\nDESCRIPTION: Sets up a list of UI files to be shown in the QtCreator project tree for easier navigation. These files define the various dialogs and widgets used in the OpenSCAD GUI.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\n# To be added in Source for QtCreator to show them in project tree\nset(GUI_UIS\n    ${GUI_UIS}\n    src/gui/AboutDialog.ui\n    src/gui/Animate.ui\n    src/gui/Console.ui\n    src/gui/ErrorLog.ui\n    src/gui/Export3mfDialog.ui\n    src/gui/ExportPdfDialog.ui\n    src/gui/OctoPrintApiKeyDialog.ui\n    src/gui/FontList.ui\n    src/gui/FontListDialog.ui\n    src/gui/LaunchingScreen.ui\n    src/gui/LibraryInfoDialog.ui\n    src/gui/MainWindow.ui\n    src/gui/OpenCSGWarningDialog.ui\n    src/gui/Preferences.ui\n    src/gui/PrintInitDialog.ui\n    src/gui/ProgressWidget.ui\n    src/gui/ViewportControl.ui\n    src/gui/input/AxisConfigWidget.ui\n    src/gui/input/ButtonConfigWidget.ui\n    src/gui/parameter/ParameterCheckBox.ui\n    src/gui/parameter/ParameterComboBox.ui\n    src/gui/parameter/ParameterDescriptionWidget.ui\n    src/gui/parameter/ParameterSlider.ui\n    src/gui/parameter/ParameterSpinBox.ui\n    src/gui/parameter/ParameterText.ui\n    src/gui/parameter/ParameterVector.ui\n    src/gui/parameter/ParameterWidget.ui\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MarVoSym Font in Ubuntu Linux via Command Line\nDESCRIPTION: Command to install the MarVoSym font in Ubuntu Linux by copying it to the system fonts directory. This requires sudo privileges to copy the font file to the appropriate system directory.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/ttf/marvosym-3.10/readme.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp marvosym.ttf /usr/share/fonts/truetype\n```\n\n----------------------------------------\n\nTITLE: Windows Platform Configuration\nDESCRIPTION: Configures Windows-specific build settings including WGL context for OpenGL rendering.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(WIN32)\n  target_compile_definitions(OpenSCAD PRIVATE NOGDI)\n  target_compile_definitions(OpenSCAD PRIVATE OPENSCAD_OS=\"Windows\")\n  message(STATUS \"Offscreen OpenGL Context - using Microsoft WGL\")\n  set(PLATFORM_SOURCES src/io/imageutils-lodepng.cc src/platform/PlatformUtils-win.cc)\n  if(NOT NULLGL)\n    set(OFFSCREEN_METHOD \"Windows WGL\")\n    message(STATUS \"Offscreen OpenGL Context - using Microsoft WGL\")\n    set(PLATFORM_SOURCES ${PLATFORM_SOURCES} src/glview/offscreen-old/OffscreenContextWGL.cc)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header-Only Code for OpenSCAD GUI\nDESCRIPTION: Specifies header-only GUI components that don't have corresponding .cc files but need to be included in the project structure for IDE visibility.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\n# header-only code\nset(GUI_HEADER_ONLY\n  src/gui/AboutDialog.h\n  src/gui/Network.h\n  src/gui/NetworkSignal.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSCAD Language Module for BBEdit\nDESCRIPTION: Command to install the OpenSCAD.plist file into BBEdit's Language Modules directory. This enables OpenSCAD syntax highlighting and language support in BBEdit.\nSOURCE: https://github.com/openscad/openscad/blob/master/contrib/BBEdit-TextWrangler.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInstall OpenSCAD.plist into ~/Library/Application Support/BBEdit/Language Modules\n```\n\n----------------------------------------\n\nTITLE: Setting Up Export/Import Test Files\nDESCRIPTION: Defines lists of files for testing various export/import formats including STL, OBJ, 3MF, and POV, as well as 3D files for testing export and import functionality.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Export/import tests\n#\n\nlist(APPEND EXPORT_STL_TEST_FILES\n  ${TEST_SCAD_DIR}/stl/stl-export.scad\n)\n\n# FIXME: Reintroduce\nlist(APPEND COLOR_EXPORT_TEST_FILES\n  ${TEST_SCAD_DIR}/misc/color-export.scad\n)\n\nlist(APPEND EXPORT_OBJ_TEST_FILES ${TEST_SCAD_DIR}/obj/obj-export.scad)\nlist(APPEND EXPORT_OBJ_TEST_FILES ${TEST_SCAD_DIR}/obj/obj-import-export_dodecahedron.scad)\nlist(APPEND EXPORT_OBJ_TEST_FILES ${TEST_SCAD_DIR}/obj/obj-import-export_cube.scad)\nlist(APPEND EXPORT_OBJ_TEST_FILES ${TEST_SCAD_DIR}/3D/features/polyhedron-cube.scad)\n\nlist(APPEND EXPORT_3MF_TEST_FILES ${TEST_SCAD_DIR}/3mf/3mf-export.scad)\n\nlist(APPEND EXPORT_POV_TEST_FILES ${TEST_SCAD_DIR}/pov/pov-export.scad)\n\nlist(APPEND EXPORT_IMPORT_3D_FILES\n${TEST_SCAD_DIR}/3D/features/mirror-tests.scad\n${TEST_SCAD_DIR}/3D/features/polyhedron-tests.scad\n${TEST_SCAD_DIR}/3D/features/polyhedron-nonplanar-tests.scad\n${TEST_SCAD_DIR}/3D/features/rotate_extrude-tests.scad\n${TEST_SCAD_DIR}/3D/features/union-coincident-test.scad\n${TEST_SCAD_DIR}/3D/issues/fn_bug.scad\n${TEST_SCAD_DIR}/3D/issues/issue904.scad\n${TEST_SCAD_DIR}/3D/issues/issue1105.scad\n${TEST_SCAD_DIR}/3D/issues/issue1105b.scad\n${TEST_SCAD_DIR}/3D/issues/issue1105c.scad\n${TEST_SCAD_DIR}/3D/issues/issue1105d.scad\n${TEST_SCAD_DIR}/3D/issues/issue1215.scad\n${TEST_SCAD_DIR}/3D/issues/issue1215b.scad\n${TEST_SCAD_DIR}/3D/issues/issue1215c.scad\n${TEST_SCAD_DIR}/3D/issues/issue1221.scad\n${TEST_SCAD_DIR}/3D/issues/issue1225.scad\n${TEST_SCAD_DIR}/3D/issues/issue1258.scad\n${TEST_SCAD_DIR}/3D/issues/issue2259.scad\n${TEST_SCAD_DIR}/misc/bad-stl-pcbvicebar.scad\n${TEST_SCAD_DIR}/misc/bad-stl-tardis.scad\n${TEST_SCAD_DIR}/misc/bad-stl-wing.scad\n${TEST_SCAD_DIR}/misc/internal-cavity.scad\n${TEST_SCAD_DIR}/misc/internal-cavity-polyhedron.scad\n${TEST_SCAD_DIR}/misc/nonmanifold-polyhedron.scad\n${TEST_SCAD_DIR}/misc/preview_variable.scad\n${TEST_SCAD_DIR}/misc/rotate_extrude-hole.scad\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Compile Options in CMake\nDESCRIPTION: Configures debug-specific compiler options for OpenSCAD target, enabling DEBUG macro in debug builds\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(OpenSCAD PRIVATE \"$<$<CONFIG:DEBUG>:-DDEBUG>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Bug Test Cases in CMake\nDESCRIPTION: Sets up test configurations for bugs in OpenSCAD, specifying which test files to use with various test prefixes for different rendering and preview tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset_test_config(Bugs FILES ${BUGS_FILES} ${BUGS_2D_FILES} PREFIXES\n rendertest rendermanifoldtest csgrendertest previewtest previewmanifoldtest throwntogethertest)\nset_test_config(Bugs FILES ${BUGS_FILES} PREFIXES\n  offpreviewtest monotonerendertest \n  stlpreviewtest stlpreviewmanifoldtest \n  stlrendertest stlrendermanifoldtest\n  stlrenderforcetest stlrendermanifoldforcetest\n  binstlrenderforcetest binstlrendermanifoldforcetest\n  offrendertest renderforcemanifoldtest)\n```\n\n----------------------------------------\n\nTITLE: Using version() and version_num() functions in OpenSCAD 2011.12\nDESCRIPTION: New version() and version_num() functions added in OpenSCAD 2011.12 to return the OpenSCAD version as a vector or number respectively.\nSOURCE: https://github.com/openscad/openscad/blob/master/RELEASE_NOTES.md#2025-04-12_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nversion()\\nversion_num()\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Parameter Testing in OpenSCAD CMake Tests\nDESCRIPTION: These commands define tests to verify that OpenSCAD correctly handles 6-argument and 7-argument camera parameters and properly sets the $vp* variables. Tests check the behavior across echo, CSG dump, and PNG preview outputs.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n# Test transcription of --camera options to $vp* for 7-argument --camera.\nadd_cmdline_test(echotest-cli-view-variables-7         OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60,70)\nadd_cmdline_test(dumptest-cli-view-variables-7         OPENSCAD SUFFIX csg FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60,70)\nadd_cmdline_test(previewtest-cli-view-variables-7      OPENSCAD SUFFIX png FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60,70)\n\n# Test transcription of --camera options to $vp* for 6-argument --camera.\nadd_cmdline_test(echotest-cli-view-variables-6         OPENSCAD SUFFIX echo FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60)\nadd_cmdline_test(dumptest-cli-view-variables-6         OPENSCAD SUFFIX csg FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60)\nadd_cmdline_test(previewtest-cli-view-variables-6      OPENSCAD SUFFIX png FILES ${TEST_SCAD_DIR}/misc/test-view-variables.scad ARGS --camera 10,20,30,40,50,60)\n```\n\n----------------------------------------\n\nTITLE: GNU Compiler-Specific Settings\nDESCRIPTION: Configures GNU compiler-specific flags including rounding math and Windows-specific warning suppression\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -frounding-math\")\n  if (WIN32) # gcc bug spams warnings, See issue #2771\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-attributes\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Stack Size Definition\nDESCRIPTION: Sets the stack size to 8MB to address GitHub issue 116. This value is used as default in PlatformUtils.h.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(OpenSCAD PRIVATE \"STACKSIZE=${STACKSIZE}\")\n```\n\n----------------------------------------\n\nTITLE: Using color() function with string names in OpenSCAD\nDESCRIPTION: The color() function now supports specifying colors as strings, allowing for more readable color definitions.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncolor(\"Red\") {\n  sphere(10);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Experimental Lazy Union Feature in OpenSCAD\nDESCRIPTION: This section tests the experimental lazy-union feature in OpenSCAD which enables optimized handling of union operations. Tests check CSG dump output, preview rendering, and export to various formats including STL, OFF, DXF, and SVG.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\n############################\n# Experimental tests       #\n############################\n\n#\n# --enable=lazyunion tests\n#\nadd_cmdline_test(lazyunion-dump        EXPERIMENTAL OPENSCAD SUFFIX csg FILES ${LAZYUNION_FILES} ARGS --enable=lazy-union)\nadd_cmdline_test(lazyunion-preview     EXPERIMENTAL OPENSCAD SUFFIX png FILES ${LAZYUNION_FILES} ARGS --enable=lazy-union)\nadd_cmdline_test(lazyunion-render      EXPERIMENTAL OPENSCAD SUFFIX png FILES ${LAZYUNION_FILES} ARGS --enable=lazy-union --render)\nadd_cmdline_test(lazyunion-monotonepng EXPERIMENTAL OPENSCAD SUFFIX png FILES ${LAZYUNION_3D_FILES} ARGS --colorscheme=Monotone --enable=lazy-union --render )\nadd_cmdline_test(lazyunion-stlpreviewtest  EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${LAZYUNION_3D_FILES} EXPECTEDDIR lazyunion-monotonepng ARGS ${OPENSCAD_EXE_ARG} --format=STL --enable=lazy-union --render=force)\nadd_cmdline_test(lazyunion-offpreviewtest  EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${LAZYUNION_3D_FILES} EXPECTEDDIR lazyunion-monotonepng ARGS ${OPENSCAD_EXE_ARG} --format=OFF --enable=lazy-union --render=force)\nadd_cmdline_test(lazyunion-dxfrendertest  EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${LAZYUNION_2D_FILES} EXPECTEDDIR lazyunion-render     ARGS ${OPENSCAD_EXE_ARG} --format=DXF --enable=lazy-union --render=force)\nadd_cmdline_test(lazyunion-svgrendertest  EXPERIMENTAL SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${LAZYUNION_2D_FILES} EXPECTEDDIR lazyunion-render     ARGS ${OPENSCAD_EXE_ARG} --format=SVG --enable=lazy-union --render=force)\n```\n\n----------------------------------------\n\nTITLE: Configuring HID API Support for OpenSCAD\nDESCRIPTION: Sets up optional HID API support for input devices. Checks for system HID API or can use bundled version if allowed by configuration.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_HIDAPI)\n  find_package(HidAPI 0.10 QUIET)\n  if(HIDAPI_FOUND)\n    set(INPUT_DRIVER_HIDAPI_SOURCES src/gui/input/HidApiInputDriver.cc)\n    target_include_directories(OpenSCAD SYSTEM PRIVATE ${HIDAPI_INCLUDE_DIR})\n    target_link_libraries(OpenSCAD PRIVATE ${HIDAPI_LIBRARY})\n    target_compile_definitions(OpenSCAD PRIVATE ENABLE_HIDAPI)\n    message(STATUS \"HidAPI: ${HIDAPI_VERSION_STRING}\")\n  elseif(ALLOW_BUNDLED_HIDAPI)\n    set(HIDAPI_SRC_DIR \"src/ext/hidapi\")\n```\n\n----------------------------------------\n\nTITLE: Removing Fixed Manifold Bugs from Tests\nDESCRIPTION: Removes bugs that have been fixed by the manifold backend from the Bugs test configuration to guard against regressions in future updates.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nremove_test_config(Bugs FILES\n  stlrendermanifoldforcetest_issue584\n  rendermanifoldtest_issue591\n  rendermanifoldtest_issue791 \n  # FIXME: #802\n  stlrendermanifoldforcetest_issue945\n  stlrendermanifoldforcetest_issue945b\n  stlrendermanifoldforcetest_issue945c\n  stlrendermanifoldforcetest_issue945d\n  stlrendermanifoldforcetest_issue945e\n  stlrendermanifoldforcetest_issue945f\n  rendermanifoldtest_issue1455\n)\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction Notice for GNU GPL Programs\nDESCRIPTION: This snippet shows a sample short notice to be displayed when a GNU GPL licensed program starts in interactive mode. It includes placeholders for program name, year, and author, and mentions the absence of warranty and redistribution conditions.\nSOURCE: https://github.com/openscad/openscad/blob/master/src/ext/hidapi/LICENSE-gpl3.txt#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Listing GUI Headers for IDE Project Tree in OpenSCAD\nDESCRIPTION: Comprehensive list of header files for the OpenSCAD GUI components, intended for IDE visibility. These are added to the source list to ensure they appear in development environments like QtCreator.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\n# To be added in Source for QtCreator to show them in project tree\nset(GUI_HEADERS\n    src/gui/Animate.h\n    src/gui/AppleEvents.h\n    src/gui/AutoUpdater.h\n    src/gui/CGALWorker.h\n    src/gui/Console.h\n    src/gui/Dock.h\n    src/gui/Editor.h\n    src/gui/ErrorLog.h\n    src/gui/EventFilter.h\n    src/gui/Export3mfDialog.h\n    src/gui/ExportPdfDialog.h\n    src/gui/OctoPrintApiKeyDialog.h\n    src/gui/FontList.h\n    src/gui/FontListDialog.h\n    src/gui/FontListTableView.h\n    src/gui/IgnoreWheelWhenNotFocused.h\n    src/gui/ImportUtils.h\n    src/gui/InitConfigurator.h\n    src/gui/LaunchingScreen.h\n    src/gui/LibraryInfoDialog.h\n    src/gui/MainWindow.h\n    src/gui/MouseSelector.h\n    src/gui/Network.h\n    src/gui/NetworkSignal.h\n    src/gui/OctoPrint.h\n    src/gui/OpenCSGWarningDialog.h\n    src/gui/OpenSCADApp.h\n    src/gui/Preferences.h\n    src/gui/PrintInitDialog.h\n    src/gui/PrintService.h\n    src/gui/ProgressWidget.h\n    src/gui/RubberBandManager.h\n    src/gui/QGLView.h\n    src/gui/QSettingsCached.h\n    src/gui/QWordSearchField.h\n    src/gui/ScadApi.h\n    src/gui/ScadLexer.h\n    src/gui/ScintillaEditor.h\n    src/gui/SettingsWriter.h\n    src/gui/TabManager.h\n    src/gui/UIUtils.h\n    src/gui/ViewportControl.h\n    src/gui/WindowManager.h\n    src/gui/qt-obsolete.h\n    src/gui/qtgettext.h\n    src/gui/AboutDialog.h\n    src/gui/parameter/GroupWidget.h\n    src/gui/parameter/ParameterCheckBox.h\n    src/gui/parameter/ParameterComboBox.h\n    src/gui/parameter/ParameterSlider.h\n    src/gui/parameter/ParameterSpinBox.h\n    src/gui/parameter/ParameterText.h\n    src/gui/parameter/ParameterVector.h\n    src/gui/parameter/ParameterVirtualWidget.h\n    src/gui/parameter/ParameterWidget.h\n)\n```\n\n----------------------------------------\n\nTITLE: NULLGL Offscreen Method Configuration\nDESCRIPTION: Configures the offscreen rendering method, setting it to NULLGL if enabled or undefined otherwise.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(NULLGL)\n  set(OFFSCREEN_METHOD \"NULLGL\")\n  message(STATUS \"Offscreen OpenGL Context - using NULLGL\")\nelse()\n  SET(OFFSCREEN_METHOD \"<undefined>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MXE Cross-Compilation Options in CMake\nDESCRIPTION: Adds specific compile definitions when cross-compiling with MXE. Sets static linking for XML, SVG plugin, and GLEW, as well as adds bcrypt library dependency.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (MXECROSS)\n  target_compile_definitions(OpenSCAD PRIVATE LIBXML_STATIC STATIC_QT_SVG_PLUGIN)\n  target_compile_definitions(OpenSCAD PRIVATE GLEW_STATIC)\n  target_link_libraries(OpenSCAD PRIVATE bcrypt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties for Unity Build Exclusion\nDESCRIPTION: Excludes specific files from unity builds due to compatibility issues with flex/bison generated code, anonymous namespaces, OpenGL macros, and other compilation conflicts. This ensures proper compilation of problematic source files.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n  # flex and bison tends to generate many macros, which does not work well with\n  # unity build\n  ${FLEX_openscad_lexer_OUTPUTS}\n  ${BISON_openscad_parser_OUTPUTS}\n  ${FLEX_comment_lexer_OUTPUTS}\n  ${BISON_comment_parser_OUTPUTS}\n  # manifold uses a lot of anonymous namespaces.\n  # unity build will cause naming conflict for functions inside those namespaces.\n  ${MANIFOLD_SOURCES}\n  # files using opengl does not work well with unity build, again due to the\n  # macros\n  ${OFFSCREEN_SOURCES}\n  ${PLATFORM_SOURCES}\n  src/glview/OffscreenContextFactory.cc\n  src/glview/RenderSettings.cc\n  src/glview/Camera.cc\n  src/glview/ColorMap.cc\n  src/glview/preview/CSGTreeNormalizer.cc\n  src/gui/QGLView.cc\n  src/gui/QGLView2.cc\n  # spnv.h references Xlib.h\n  src/gui/input/SpaceNavInputDriver.cc\n  # _USE_MATH_DEFINES should be defined before the first include of cmath,\n  # unity build will violate this so we just exclude them\n  src/core/BuiltinContext.cc\n  src/geometry/roof_vd.cc\n  src/geometry/manifold/manifold-applyops-minkowski.cc\n  src/io/DxfData.cc\n  src/utils/calc.cc\n  src/utils/degree_trig.cc\n  PROPERTIES SKIP_UNITY_BUILD_INCLUSION ON)\n```\n\n----------------------------------------\n\nTITLE: Internet Connection Check with Ping Command\nDESCRIPTION: Executes a ping command to verify connectivity to files.openscad.org, with different syntax for MSVC and other platforms.\nSOURCE: https://github.com/openscad/openscad/blob/master/resources/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    execute_process(\n        COMMAND ping files.openscad.org -n 2\n        ERROR_QUIET\n        RESULT_VARIABLE NO_CONNECTION\n    )\nelse()\n    execute_process(\n        COMMAND ping files.openscad.org -c 2\n        ERROR_QUIET\n        RESULT_VARIABLE NO_CONNECTION\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSCAD Binary Installation for Non-Apple Platforms\nDESCRIPTION: Sets up the installation targets and file locations for OpenSCAD on non-Apple platforms (or Apple with Unix behavior). This includes binary naming, Python integration if enabled, and handling of mimalloc on Windows.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE OR APPLE_UNIX)\n  set_target_properties(OpenSCAD PROPERTIES OUTPUT_NAME openscad${SUFFIX_WITH_DASH})\n  install(TARGETS OpenSCAD RUNTIME DESTINATION \"${OPENSCAD_BINDIR}\")\n  if(ENABLE_PYTHON)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/openscad-python DESTINATION \"${OPENSCAD_BINDIR}\")\n  endif()\n  if(WIN32)\n    if(USE_MIMALLOC AND MI_LINK_SHARED)\n      if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        install(FILES ${CMAKE_SOURCE_DIR}/submodules/mimalloc/bin/mimalloc-redirect.dll DESTINATION \".\")\n      elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n        install(FILES ${CMAKE_SOURCE_DIR}/submodules/mimalloc/bin/mimalloc-redirect32.dll DESTINATION \".\")\n      endif()\n      install(FILES ${CMAKE_BINARY_DIR}/submodules/mimalloc/mimalloc.dll DESTINATION \".\")\n    endif()\n  else()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSCAD on Apple Platforms\nDESCRIPTION: Handles installation of OpenSCAD for Apple platforms that aren't using the APPLE_UNIX configuration. On these platforms, the application is installed as a bundle in the standard binary directory.\nSOURCE: https://github.com/openscad/openscad/blob/master/CMakeLists.txt#2025-04-12_snippet_49\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  install(TARGETS ${CMAKE_PROJECT_NAME}\n      BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documentation Download Target Configuration\nDESCRIPTION: Sets up CMake custom targets and commands to download documentation using a Python script. Creates necessary directories and handles dependencies.\nSOURCE: https://github.com/openscad/openscad/blob/master/resources/CMakeLists.txt#2025-04-12_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_DOCS_DIRECTORY \"${CMAKE_SOURCE_DIR}/resources/docs/OpenSCADUserDocs\")\nmake_directory(${CMAKE_DOCS_DIRECTORY})\ninclude(FindPythonInterp)\nadd_custom_target(\n    offline_documentation ALL\n    DEPENDS ${CMAKE_DOCS_DIRECTORY}/openscad_docs\n)\nadd_custom_command(\n    OUTPUT\n        ${CMAKE_DOCS_DIRECTORY}/openscad_docs\n        ${CMAKE_DOCS_DIRECTORY}/openscad_docs_pdf\n    COMMAND \"${PYTHON_EXECUTABLE}\" \"${CMAKE_SOURCE_DIR}/resources/docs/docs_downloader.py\"\n    COMMENT \"Running docs_downloader.py\"                                                                                                                       \n    WORKING_DIRECTORY ${CMAKE_DOCS_DIRECTORY} DEPENDS ${CMAKE_SOURCE_DIR}/resources/docs/docs_downloader.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimalloc Integration in CMake for OpenSCAD\nDESCRIPTION: Configures mimalloc memory allocator integration for OpenSCAD, including compile definitions, library linking, and build options. Handles both system-installed and bundled mimalloc versions with platform-specific settings for macOS and other systems.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists.txt#2025-04-12_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(USE_MIMALLOC)\n  target_compile_definitions(OpenSCAD PRIVATE USE_MIMALLOC)\n\n  get_property(OSCAD_LIBS TARGET OpenSCAD PROPERTY LINK_LIBRARIES)\n  if(OSCAD_LIBS)\n    message(AUTHOR_WARNING \"Target OpenSCAD appears to have libraries linked before mimalloc (${OSCAD_LIBS}).  This might cause problems.\")\n  endif()\n\n  find_package(mimalloc QUIET)\n  if(TARGET mimalloc)\n    message(STATUS \"Using already installed mimalloc package, version ${mimalloc_VERSION}\")\n    target_compile_definitions(OpenSCAD PRIVATE MI_LINK_SHARED)\n    target_link_libraries(OpenSCAD PRIVATE mimalloc)\n  else()\n    set(MI_SUBDIR mimalloc)\n    set(mimalloc_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/${MI_SUBDIR}/cmake\" PARENT_SCOPE)\n\n    set(MI_DEBUG_FULL        OFF CACHE BOOL \"\")\n    set(MI_PADDING           ON  CACHE BOOL \"\")\n    if(APPLE)\n      set(MI_OVERRIDE        OFF CACHE BOOL \"\")\n    else()\n      set(MI_OVERRIDE        ON  CACHE BOOL \"\")\n    endif()\n    set(MI_XMALLOC           OFF CACHE BOOL \"\")\n    set(MI_SHOW_ERRORS       OFF CACHE BOOL \"\")\n    set(MI_USE_CXX           ON  CACHE BOOL \"\")\n    set(MI_SEE_ASM           OFF CACHE BOOL \"\")\n    set(MI_INTERPOSE         ON  CACHE BOOL \"\")\n    set(MI_OSX_ZONE          ON  CACHE BOOL \"\")\n    set(MI_LOCAL_DYNAMIC_TLS OFF CACHE BOOL \"\")\n    set(MI_BUILD_SHARED      OFF CACHE BOOL \"\")\n    set(MI_BUILD_STATIC      ON  CACHE BOOL \"\")\n    set(MI_BUILD_OBJECT      OFF CACHE BOOL \"\")\n    set(MI_BUILD_TESTS       OFF CACHE BOOL \"\")\n    set(MI_DEBUG_TSAN        OFF CACHE BOOL \"\")\n    set(MI_DEBUG_UBSAN       OFF CACHE BOOL \"\")\n    set(MI_INSTALL_TOPLEVEL  OFF CACHE BOOL \"\")\n\n    target_include_directories(OpenSCAD SYSTEM PRIVATE ${MI_SUBDIR}/include)\n    if(MI_BUILD_SHARED AND MXECROSS)\n      set(CMAKE_SHARED_LIBRARY_PREFIX \"\")\n    endif()\n    add_subdirectory(${MI_SUBDIR} EXCLUDE_FROM_ALL)\n\n    if(MI_OVERRIDE)\n      target_compile_definitions(OpenSCAD PRIVATE MI_OVERRIDE)\n    endif()\n\n    if(MI_BUILD_SHARED)\n      target_compile_definitions(OpenSCAD PRIVATE MI_LINK_SHARED)\n      target_link_libraries(OpenSCAD PRIVATE mimalloc)\n    elseif(MI_BUILD_STATIC)\n      target_compile_definitions(OpenSCAD PRIVATE MI_LINK_STATIC)\n      target_link_libraries(OpenSCAD PRIVATE mimalloc-static)\n    elseif(MI_BUILD_OBJECT)\n      target_compile_definitions(OpenSCAD PRIVATE MI_LINK_OBJECT)\n      target_link_libraries(OpenSCAD PRIVATE $<TARGET_OBJECTS:mimalloc-obj> pthread)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example FONTLOG Format for Font Documentation\nDESCRIPTION: A template for creating a FONTLOG file that documents font information, version history, and contributor acknowledgements. This format is recommended for use with fonts released under the SIL Open Font License to track changes and credit contributors.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/data/ttf/amiri-0.106/OFL-FAQ.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFONTLOG for the GlobalFontFamily fonts\n\nThis file provides detailed information on the GlobalFontFamily Font Software. This information should be distributed along with the GlobalFontFamily fonts and any derivative works.\n\nBasic Font Information\n\nGlobalFontFamily is a Unicode typeface family that supports all languages that use the Latin script and its variants, and could be expanded to support other scripts.\n\nNewWorldFontFamily is based on the GlobalFontFamily and also supports Greek, Hebrew, Cyrillic and Armenian.\n\nMore specifically, this release supports the following Unicode ranges...\nThis release contains...\nDocumentation can be found at...\nTo contribute to the project...\n\nChangeLog\n\n1 August 2008 (Tom Parker) GlobalFontFamily version 1.2.1\n- Tweaked the smart font code (Branch merged with trunk version)\n- Provided improved build and debugging environment for smart behaviours\n\n7 February 2007 (Pat Johnson) NewWorldFontFamily Version 1.3\n- Added Greek and Cyrillic glyphs\n\n7 March 2006 (Fred Foobar) NewWorldFontFamily Version 1.2\n- Tweaked contextual behaviours\n\n1 Feb 2005 (Jane Doe) NewWorldFontFamily Version 1.1\n- Improved build script performance and verbosity\n- Extended the smart code documentation\n- Corrected minor typos in the documentation\n- Fixed position of combining inverted breve below (U+032F)\n- Added OpenType/Graphite smart code for Armenian\n- Added Armenian glyphs (U+0531 -> U+0587) \n- Released as \"NewWorldFontFamily\"\n\n1 Jan 2005 (Joe Smith) GlobalFontFamily Version 1.0\n- Initial release\n\nAcknowledgements\n\nIf you make modifications be sure to add your name (N), email (E), web-address (if you have one) (W) and description (D). This list is in alphabetical order.\n\nN: Jane Doe\nE: jane@university.edu\nW: http://art.university.edu/projects/fonts\nD: Contributor - Armenian glyphs and code\n\nN: Fred Foobar\nE: fred@foobar.org\nW: http://foobar.org\nD: Contributor - misc Graphite fixes\n\nN: Pat Johnson\nE: pat@fontstudio.org\nW: http://pat.fontstudio.org\nD: Designer - Greek & Cyrillic glyphs based on Roman design\n\nN: Tom Parker\nE: tom@company.com\nW: http://www.company.com/tom/projects/fonts\nD: Engineer - original smart font code\n\nN: Joe Smith\nE: joe@fontstudio.org\nW: http://joe.fontstudio.org\nD: Designer - original Roman glyphs\n\nFontstudio.org is an not-for-profit design group whose purpose is...\nFoobar.org is a distributed community of developers...\nCompany.com is a small business who likes to support community designers...\nUniversity.edu is a renowed educational institution with a strong design department...\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for GNU GPL\nDESCRIPTION: This snippet provides a template for the copyright notice to be included at the start of each source file when applying the GNU GPL to a new program. It includes placeholders for program name, year, and author.\nSOURCE: https://github.com/openscad/openscad/blob/master/src/ext/hidapi/LICENSE-gpl3.txt#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Files for OpenSCAD Tests\nDESCRIPTION: Code that configures templated test files by generating concrete test files from templates. This creates test cases for various OpenSCAD features like includes, imports, and specific issue tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${TEST_SCAD_DIR}/templates/include-tests-template.scad\n               ${TEST_SCAD_DIR}/misc/include-tests.scad)\nconfigure_file(${TEST_SCAD_DIR}/templates/use-tests-template.scad\n               ${TEST_SCAD_DIR}/misc/use-tests.scad)\nconfigure_file(${TEST_SCAD_DIR}/templates/import_stl-tests-template.scad\n               ${TEST_SCAD_DIR}/3D/features/import_stl-tests.scad)\nconfigure_file(${TEST_SCAD_DIR}/templates/import_3mf-tests-template.scad\n               ${TEST_SCAD_DIR}/3D/features/import_3mf-tests.scad)\nconfigure_file(${TEST_SCAD_DIR}/templates/import_dxf-tests-template.scad\n               ${TEST_SCAD_DIR}/2D/features/import_dxf-tests.scad)\nconfigure_file(${TEST_PYTHON_DIR}/gen_issue2342-template.py\n               ${TEST_PYTHON_DIR}/gen_issue2342.py)\nconfigure_file(${TEST_PYTHON_DIR}/gen_svg_viewbox_tests-template.py\n               ${TEST_PYTHON_DIR}/gen_svg_viewbox_tests.py)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Files Using Python Scripts\nDESCRIPTION: Creates custom targets for generating test files including a large SCAD file for parser stress testing and SVG viewbox tests.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(issue2342 ALL\n  COMMAND ${Python3_EXECUTABLE} ${TEST_PYTHON_DIR}/gen_issue2342.py \">${TEST_SCAD_DIR}/issues/issue2342.scad\"\n  WORKING_DIRECTORY ${GEN_SCRIPT_DIR}\n  COMMENT \"Generating issue2342.scad\"\n)\nadd_custom_target(svg_viewbox_tests ALL\n  COMMAND ${Python3_EXECUTABLE} ${TEST_PYTHON_DIR}/gen_svg_viewbox_tests.py \"${TEST_DATA_DIR}/svg/viewbox\" \"${TEST_SCAD_DIR}/svg/extruded\"\n  WORKING_DIRECTORY ${GEN_SCRIPT_DIR}\n  COMMENT \"Generating svg viewbox tests\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Output File Test Function in CMake for OpenSCAD\nDESCRIPTION: Creates a function to add tests for writing outputs to relative filenames and verifying the correct file location. The function sets up run and check tests for each output format.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_51\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_output_file_test TESTCMD_BASENAME)\n  cmake_parse_arguments(TESTCMD \"\" \"FILE;FORMAT\" \"\" ${ARGN})\n\n  add_test(NAME \"${TESTCMD_BASENAME}_${TESTCMD_FORMAT}_run\" CONFIGURATIONS Default COMMAND ${OPENSCAD_BINPATH} ${TESTCMD_FILE} -o ${TESTCMD_BASENAME}.${TESTCMD_FORMAT})\n  add_test(NAME \"${TESTCMD_BASENAME}_${TESTCMD_FORMAT}_check\" CONFIGURATIONS Default COMMAND ${CMAKE_COMMAND} -E cat ${TESTCMD_BASENAME}.${TESTCMD_FORMAT})\n  set_tests_properties(\"${TESTCMD_BASENAME}_${TESTCMD_FORMAT}_check\" PROPERTIES DEPENDS \"${TESTCMD_BASENAME}_${TESTCMD_FORMAT}_run\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Using version_num() function in OpenSCAD\nDESCRIPTION: The version_num() function returns the OpenSCAD version as a number, providing a numeric representation of the current release.\nSOURCE: https://github.com/openscad/openscad/blob/master/releases/2011.12.md#2025-04-12_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nversion_num()  // Returns 20110923 for example\n```\n\n----------------------------------------\n\nTITLE: Extracting OpenCSG Version from Header in CMake\nDESCRIPTION: Extracts the OpenCSG version string from the opencsg.h header file using regex pattern matching. The extracted version is stored in a CMake cache variable for use elsewhere in the build system.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists-OpenCSG.txt#2025-04-12_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(_VERSION_FILE ${CMAKE_SOURCE_DIR}/submodules/OpenCSG/include/opencsg.h)\nif(EXISTS ${_VERSION_FILE})\n  file(STRINGS ${_VERSION_FILE} _VERSION_LINE REGEX \"define[ ]+OPENCSG_VERSION_STRING\" )\n  if(_VERSION_LINE)\n    string (REGEX REPLACE \".*define[ ]+OPENCSG_VERSION_STRING[ ]+\\\".*\\ (.*)\\\".*\" \"\\\\1\" VERSION_STRING \"${_VERSION_LINE}\")\n    set(OPENCSG_VERSION_STRING ${VERSION_STRING} CACHE STRING \"OpenCSG version string\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining OpenCSG Source Files in CMake\nDESCRIPTION: Defines a list of source files from the OpenCSG submodule that will be compiled into the OpenCSG library. The files include various rendering, context management, and OpenGL helper implementations.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists-OpenCSG.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(OPENCSG_SOURCES\n  submodules/OpenCSG/src/area.cpp\n  submodules/OpenCSG/src/batch.cpp\n  submodules/OpenCSG/src/context.cpp\n  submodules/OpenCSG/src/channelManager.cpp\n  submodules/OpenCSG/src/frameBufferObject.cpp\n  submodules/OpenCSG/src/frameBufferObjectExt.cpp\n  submodules/OpenCSG/src/occlusionQuery.cpp\n  submodules/OpenCSG/src/opencsgRender.cpp\n  submodules/OpenCSG/src/openglHelper.cpp\n  submodules/OpenCSG/src/primitive.cpp\n  submodules/OpenCSG/src/primitiveHelper.cpp\n  submodules/OpenCSG/src/renderGoldfeather.cpp\n  submodules/OpenCSG/src/renderSCS.cpp\n  submodules/OpenCSG/src/scissorMemo.cpp\n  submodules/OpenCSG/src/settings.cpp\n  submodules/OpenCSG/src/glad/src/gl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipper2 Library Options in CMake\nDESCRIPTION: Sets CMake options for the Clipper2 library, disabling utils, examples, and tests. Then adds the Clipper2 C++ directory as a subdirectory, excluding it from the default build target.\nSOURCE: https://github.com/openscad/openscad/blob/master/submodules/CMakeLists-Clipper2.txt#2025-04-12_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLIPPER2_UTILS OFF)\nset(CLIPPER2_EXAMPLES OFF)\nset(CLIPPER2_TESTS OFF)\nadd_subdirectory(\"Clipper2/CPP\" EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Listing NEF3 Broken Tests in OpenSCAD CMake Configuration\nDESCRIPTION: Creates a list of NEF3-related tests known to have issues across different rendering methods. These tests will be selectively disabled based on platform in subsequent code.\nSOURCE: https://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#2025-04-12_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND NEF3_BROKEN_TESTS\n  rendertest_nef3_broken\n  previewtest_nef3_broken\n  throwntogethertest_nef3_broken\n  csgrendertest_nef3_broken\n)\n```"
  }
]